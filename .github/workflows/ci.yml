name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Quality checks and testing
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: reporunner_test
          POSTGRES_USER: reporunner
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: reporunner
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: reporunner_test
        options: >-
          --health-cmd "mongosh --eval \"db.adminCommand('ping')\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        package: [
          'packages/@reporunner/ai-core',
          'packages/@reporunner/auth',
          'packages/@reporunner/workflow-engine',
          'packages/@reporunner/database',
          'packages/@reporunner/api',
          'packages/@reporunner/cli',
          'packages/backend',
          'packages/frontend'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm --filter=${{ matrix.package }} type-check

      - name: Linting
        run: pnpm --filter=${{ matrix.package }} lint

      - name: Unit tests
        run: pnpm --filter=${{ matrix.package }} test:unit
        env:
          DATABASE_URL: postgresql://reporunner:test_password@localhost:5432/reporunner_test
          MONGODB_URI: mongodb://reporunner:test_password@localhost:27017/reporunner_test
          REDIS_URL: redis://localhost:6379

      - name: Build
        run: pnpm --filter=${{ matrix.package }} build

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.package }}
          path: |
            ${{ matrix.package }}/coverage/
            ${{ matrix.package }}/test-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./${{ matrix.package }}/coverage/lcov.info
          flags: ${{ matrix.package }}
          name: ${{ matrix.package }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Integration testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: quality

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: reporunner_test
          POSTGRES_USER: reporunner
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: reporunner
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: reporunner_test
        options: >-
          --health-cmd "mongosh --eval \"db.adminCommand('ping')\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm migrate:up
        env:
          DATABASE_URL: postgresql://reporunner:test_password@localhost:5432/reporunner_test
          MONGODB_URI: mongodb://reporunner:test_password@localhost:27017/reporunner_test
          REDIS_URL: redis://localhost:6379

      - name: Start backend for integration tests
        run: |
          pnpm --filter=@reporunner/backend start:test &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://reporunner:test_password@localhost:5432/reporunner_test
          MONGODB_URI: mongodb://reporunner:test_password@localhost:27017/reporunner_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          JWT_REFRESH_SECRET: test_jwt_refresh_secret

      - name: Run integration tests
        run: pnpm test:integration
        env:
          API_URL: http://localhost:3001
          DATABASE_URL: postgresql://reporunner:test_password@localhost:5432/reporunner_test
          MONGODB_URI: mongodb://reporunner:test_password@localhost:27017/reporunner_test
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

  # E2E testing
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 60

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          FRONTEND_URL: http://localhost:3000
          API_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e-results/
            playwright-report/

      - name: Cleanup Docker Compose
        if: always()
        run: docker compose -f docker-compose.yml down -v

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run SAST with CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript,typescript

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm build:production

      - name: Bundle analysis
        run: pnpm analyze:bundle

      - name: Performance benchmarks
        run: pnpm test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            bundle-analysis/
            performance-results/

  # Report results
  report:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [quality, integration, e2e, security]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: '**/test-results.xml'
          reporter: jest-junit
          fail-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');

            // Generate test summary
            let summary = '## 🧪 Test Results Summary\n\n';

            // Add quality results
            if ('${{ needs.quality.result }}' === 'success') {
              summary += '✅ **Code Quality & Unit Tests**: Passed\n';
            } else {
              summary += '❌ **Code Quality & Unit Tests**: Failed\n';
            }

            // Add integration results
            if ('${{ needs.integration.result }}' === 'success') {
              summary += '✅ **Integration Tests**: Passed\n';
            } else {
              summary += '❌ **Integration Tests**: Failed\n';
            }

            // Add E2E results
            if ('${{ needs.e2e.result }}' === 'success') {
              summary += '✅ **End-to-End Tests**: Passed\n';
            } else {
              summary += '❌ **End-to-End Tests**: Failed\n';
            }

            // Add security results
            if ('${{ needs.security.result }}' === 'success') {
              summary += '✅ **Security Scanning**: Passed\n';
            } else {
              summary += '❌ **Security Scanning**: Failed\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
