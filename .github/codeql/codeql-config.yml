# CodeQL Configuration
# Manages false positive suppressions and query customization

name: "Reporunner CodeQL Config"

# Use security-extended query suite for comprehensive coverage
queries:
  - uses: security-extended

# Suppress false positives with detailed justifications
query-filters:
  # Alert #143 - False Positive: Rate Limiting Multi-line Parsing
  - exclude:
      id: js/missing-rate-limiting
      paths:
        - packages/backend/src/domains/collaboration/routes/collaborationRoutes.ts
      reason: |
        False positive due to CodeQL multi-line parsing limitation.

        Reality: Rate limiting IS applied via express-rate-limit middleware.
        Location: collaborationRoutes.ts lines 23-32 (single router.use() call)

        Code:
          router.use(
            authenticate,           // Line 24 (where alert triggers)
            rateLimit({            // Lines 25-31 (actual rate limiter)
              windowMs: 15 * 60 * 1000,
              max: 100,
              message: 'Too many requests from this IP, please try again later',
              standardHeaders: true,
              legacyHeaders: false,
            })
          );

        Root Cause: CodeQL's pattern matcher doesn't recognize rateLimit()
        when split across multiple lines in the same middleware chain.

        Verification: Manual code review confirms rate limiting active.
        See SECURITY.md for additional context.

  # Alert #144 - False Positive: Prototype Pollution Control Flow
  - exclude:
      id: js/prototype-polluting-function
      paths:
        - packages/@klikkflow/workflow/src/common/DataTransformer.ts
      reason: |
        False positive due to CodeQL not recognizing early return control flow.

        Reality: Dangerous keys (__proto__, constructor, prototype) are filtered
        BEFORE Object.defineProperty can be reached.

        Code:
          const finalKey = keys[keys.length - 1];

          // Early return prevents line 92 from executing with dangerous keys
          if (DataTransformer.isDangerousKey(finalKey)) {
            return result;  // Line 86-87: Exit before property operation
          }

          // This code ONLY reached if finalKey is safe
          Object.defineProperty(current, finalKey, {  // Line 92 (where alert triggers)
            value,
            writable: true,
            enumerable: true,
            configurable: true,
          });

        Root Cause: CodeQL flags Object.defineProperty API itself regardless of
        control flow guards above it.

        Verification: Manual code review + unit tests confirm no prototype pollution.
        See SECURITY.md for complete security analysis.

# Path exclusions for third-party code and generated files
paths-ignore:
  - "**/node_modules/**"
  - "**/dist/**"
  - "**/build/**"
  - "**/*.test.ts"
  - "**/*.spec.ts"
  - "**/coverage/**"
  - "**/migrations/**"

# Include all workspace packages for analysis
paths:
  - packages/**
  - infrastructure/**
