# ============================================
# KlikkFlow - Nginx Load Balancer Configuration
# For Blue-Green Deployment on VPS
# ============================================
#
# Installation:
#   1. Copy to VPS: sudo cp nginx-lb.conf /etc/nginx/sites-available/klikkflow
#   2. Enable: sudo ln -s /etc/nginx/sites-available/klikkflow /etc/nginx/sites-enabled/
#   3. Test: sudo nginx -t
#   4. Reload: sudo systemctl reload nginx
#
# SSL Certificate (Let's Encrypt):
#   sudo certbot --nginx -d app.klikk.ai -d api.klikk.ai
#
# ============================================

# Blue-Green Upstream Configuration
# Only ONE should be active at a time (other should be commented)
upstream klikkflow_active {
    # Blue Environment (Port 3010)
    server localhost:3010;

    # Green Environment (Port 3020)
    # server localhost:3020;

    # Connection settings
    keepalive 32;
    keepalive_timeout 60s;
}

# Frontend Server (app.klikk.ai)
server {
    listen 80;
    listen [::]:80;
    server_name app.klikk.ai;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name app.klikk.ai;

    # SSL Configuration (managed by certbot)
    ssl_certificate /etc/letsencrypt/live/app.klikk.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/app.klikk.ai/privkey.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;

    # Logging
    access_log /var/log/nginx/klikkflow-frontend-access.log;
    error_log /var/log/nginx/klikkflow-frontend-error.log warn;

    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;

    # Root location - proxy to active frontend
    location / {
        proxy_pass http://klikkflow_active;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://klikkflow_active/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }

    # Static assets caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://klikkflow_active;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# API Server (api.klikk.ai)
server {
    listen 80;
    listen [::]:80;
    server_name api.klikk.ai;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.klikk.ai;

    # SSL Configuration (managed by certbot)
    ssl_certificate /etc/letsencrypt/live/api.klikk.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.klikk.ai/privkey.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # CORS Headers (adjust as needed)
    add_header Access-Control-Allow-Origin "https://app.klikk.ai" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Logging
    access_log /var/log/nginx/klikkflow-api-access.log;
    error_log /var/log/nginx/klikkflow-api-error.log warn;

    # Client settings
    client_max_body_size 100M;
    client_body_timeout 120s;

    # Handle preflight requests
    if ($request_method = OPTIONS) {
        return 204;
    }

    # API endpoints - proxy to backend (port 3011 or 3021 based on active environment)
    location / {
        # Determine backend port based on active frontend
        # Blue backend: 3011, Green backend: 3021
        set $backend_port 3011;  # Default to blue
        # Uncomment for green:
        # set $backend_port 3021;

        proxy_pass http://localhost:$backend_port;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Longer timeouts for API
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # WebSocket support for real-time features
    location /socket.io/ {
        set $backend_port 3011;  # Default to blue
        # Uncomment for green:
        # set $backend_port 3021;

        proxy_pass http://localhost:$backend_port;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket specific settings
        proxy_buffering off;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # Health check
    location /health {
        set $backend_port 3011;  # Default to blue
        # Uncomment for green:
        # set $backend_port 3021;

        proxy_pass http://localhost:$backend_port/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }
}

# Rate Limiting Zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

# Apply rate limiting (uncomment if needed)
# server {
#     location /api/ {
#         limit_req zone=api_limit burst=20 nodelay;
#         # ... rest of proxy configuration
#     }
#
#     location /api/auth/ {
#         limit_req zone=auth_limit burst=3 nodelay;
#         # ... rest of proxy configuration
#     }
# }
