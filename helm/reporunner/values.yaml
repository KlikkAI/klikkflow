# Default values for reporunner
# This is a YAML-formatted file

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Reporunner images
image:
  registry: docker.io
  repository: reporunner/reporunner
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: reporunner/frontend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Backend configuration  
backend:
  enabled: true
  replicaCount: 3
  image:
    repository: reporunner/backend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3001
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  env:
    NODE_ENV: production
    JWT_SECRET: "change-this-in-production"
  envFrom: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Worker configuration
worker:
  enabled: true
  replicaCount: 5
  image:
    repository: reporunner/worker
    tag: "1.0.0" 
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  env:
    NODE_ENV: production
  envFrom: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: reporunner.example.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls:
    - secretName: reporunner-tls
      hosts:
        - reporunner.example.com

# Service accounts
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 2000

# Container security context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# PostgreSQL dependency
postgresql:
  enabled: true
  auth:
    postgresPassword: "reporunner-postgres"
    username: "reporunner"
    password: "reporunner-password"
    database: "reporunner"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 20Gi
    initdb:
      scripts:
        init.sql: |
          CREATE EXTENSION IF NOT EXISTS vector;
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

# MongoDB dependency
mongodb:
  enabled: true
  auth:
    enabled: true
    rootPassword: "reporunner-mongodb"
    username: "reporunner"
    password: "reporunner-password"
    database: "reporunner"
  architecture: standalone
  persistence:
    enabled: true
    size: 20Gi

# Redis dependency
redis:
  enabled: true
  auth:
    enabled: true
    password: "reporunner-redis"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 8Gi

# Monitoring
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      labels: {}
  grafana:
    enabled: true
    adminPassword: "reporunner-grafana"

# Persistence for uploaded files
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi

# External secrets
externalSecrets:
  enabled: false
  secretStore:
    provider: aws
    region: us-west-2
  secrets: []

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1