# Production Docker Compose for KlikkFlow
# Complete setup with all required services
# Last Updated: October 11, 2025

services:
  # Main KlikkFlow Application
  klikkflow:
    image: klikkflow/klikkflow:latest
    container_name: klikkflow-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Application
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # Database URLs
      - MONGODB_URI=mongodb://mongo:27017/klikkflow
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/klikkflow
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379

      # Authentication (REQUIRED - Set in .env)
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}

      # Email Configuration (Optional)
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
      - SMTP_FROM=${SMTP_FROM:-noreply@klikkflow.com}

      # AI Services (Optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}

      # Object Storage (Optional)
      - S3_BUCKET=${S3_BUCKET:-}
      - S3_REGION=${S3_REGION:-us-east-1}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
      - S3_ENDPOINT=${S3_ENDPOINT:-}  # For MinIO or custom S3

    volumes:
      - klikkflow-data:/app/data
      - klikkflow-logs:/app/logs
      - klikkflow-uploads:/app/uploads

    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

    networks:
      - klikkflow-network

    security_opt:
      - no-new-privileges:true

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # MongoDB - Primary Database
  mongo:
    image: mongo:7
    container_name: klikkflow-mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-changeme}
      - MONGO_INITDB_DATABASE=klikkflow
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./infrastructure/docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --auth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - klikkflow-network
    security_opt:
      - no-new-privileges:true

  # PostgreSQL with pgvector - AI Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: klikkflow-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=klikkflow
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - klikkflow-network
    security_opt:
      - no-new-privileges:true

  # Redis - Caching and Queue
  redis:
    image: redis:7-alpine
    container_name: klikkflow-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - klikkflow-network
    security_opt:
      - no-new-privileges:true

  # Nginx - Reverse Proxy (Optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: klikkflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - klikkflow
    networks:
      - klikkflow-network
    security_opt:
      - no-new-privileges:true
    profiles:
      - with-nginx

volumes:
  klikkflow-data:
    driver: local
  klikkflow-logs:
    driver: local
  klikkflow-uploads:
    driver: local
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-cache:
    driver: local

networks:
  klikkflow-network:
    driver: bridge
    name: klikkflow-production
