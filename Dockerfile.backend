# ============================================
# Backend Dockerfile - KlikkFlow
# Multi-stage build: TypeScript â†’ Node.js
# Target size: ~80MB
# ============================================

# ============================================
# Stage 1: Base - Install pnpm
# ============================================
FROM node:20-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm@10.18.1

WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY .npmrc* ./

# ============================================
# Stage 2: Dependencies - Install all deps
# ============================================
FROM base AS deps

# Copy all package.json files for complete monorepo dependency resolution
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared/package.json ./packages/shared/
COPY packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/

# Install all dependencies (skip preinstall script - only needed for local dev)
RUN pnpm install --frozen-lockfile --ignore-scripts

# ============================================
# Stage 3: Production Dependencies
# ============================================
FROM base AS prod-deps

# IMPORTANT: pnpm needs workspace config FIRST to understand workspace:* dependencies
# Already copied in base stage: package.json, pnpm-lock.yaml, pnpm-workspace.yaml

# Copy package files
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared/package.json ./packages/shared/
COPY packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY packages/@klikkflow/auth/package.json ./packages/@klikkflow/auth/
COPY packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/

# Copy dist folders for workspace packages (needed for pnpm workspace linking)
COPY packages/shared/dist ./packages/shared/dist
COPY packages/@klikkflow/ai/dist ./packages/@klikkflow/ai/dist
COPY packages/@klikkflow/auth/dist ./packages/@klikkflow/auth/dist
COPY packages/@klikkflow/core/dist ./packages/@klikkflow/core/dist
COPY packages/@klikkflow/platform/dist ./packages/@klikkflow/platform/dist

# Install all dependencies including workspace packages (--prod doesn't properly link workspace:* deps)
# The final image size is controlled by what we COPY in runtime stage, not by --prod flag
RUN pnpm install --frozen-lockfile --ignore-scripts

# Manually create symlinks for workspace packages (pnpm with shamefullyHoist:false may not create them)
RUN mkdir -p node_modules/@klikkflow && \
    ln -sf ../../packages/@klikkflow/ai node_modules/@klikkflow/ai && \
    ln -sf ../../packages/@klikkflow/auth node_modules/@klikkflow/auth && \
    ln -sf ../../packages/@klikkflow/core node_modules/@klikkflow/core && \
    ln -sf ../../packages/@klikkflow/platform node_modules/@klikkflow/platform && \
    ln -sf ../../packages/shared node_modules/@klikkflow/shared

# ============================================
# Stage 4: Runtime - Run the server with tsx
# ============================================
FROM node:20-alpine AS runtime

# Install dumb-init and tsx for TypeScript execution
RUN apk add --no-cache dumb-init curl && \
    npm install -g tsx@4.19.2

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S klikkflow -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy source code for backend (run with tsx)
COPY --chown=klikkflow:nodejs packages/backend/src ./packages/backend/src

# Copy compiled dist for @klikkflow packages (libraries)
COPY --chown=klikkflow:nodejs packages/shared/dist ./packages/shared/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/ai/dist ./packages/@klikkflow/ai/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/auth/dist ./packages/@klikkflow/auth/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/core/dist ./packages/@klikkflow/core/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/platform/dist ./packages/@klikkflow/platform/dist

# Copy TypeScript config for backend (libraries use compiled dist)
COPY --chown=klikkflow:nodejs tsconfig.base.json ./
COPY --chown=klikkflow:nodejs packages/backend/tsconfig.json ./packages/backend/

# Copy production dependencies
COPY --from=prod-deps --chown=klikkflow:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=klikkflow:nodejs /app/packages/backend/node_modules ./packages/backend/node_modules

# Copy package.json files
COPY --chown=klikkflow:nodejs package.json pnpm-workspace.yaml ./
COPY --chown=klikkflow:nodejs packages/backend/package.json ./packages/backend/
COPY --chown=klikkflow:nodejs packages/shared/package.json ./packages/shared/
COPY --chown=klikkflow:nodejs packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY --chown=klikkflow:nodejs packages/@klikkflow/auth/package.json ./packages/@klikkflow/auth/
COPY --chown=klikkflow:nodejs packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY --chown=klikkflow:nodejs packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/

# Create logs directory with proper permissions before switching user
RUN mkdir -p /app/packages/backend/logs && \
    chown -R klikkflow:nodejs /app/packages/backend/logs

# Switch to non-root user
USER klikkflow

# Set environment
ENV NODE_ENV=production
ENV PORT=3001

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Labels for metadata
LABEL org.opencontainers.image.title="KlikkFlow Backend"
LABEL org.opencontainers.image.description="KlikkFlow workflow automation platform - Express API server"
LABEL org.opencontainers.image.url="https://github.com/KlikkAI/klikkflow"
LABEL org.opencontainers.image.source="https://github.com/KlikkAI/klikkflow"
LABEL org.opencontainers.image.vendor="KlikkFlow Team"
LABEL org.opencontainers.image.licenses="MIT"

# Start application with dumb-init and tsx
ENTRYPOINT ["dumb-init", "--"]
CMD ["tsx", "packages/backend/src/server.ts"]
