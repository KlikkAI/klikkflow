# ============================================
# Nginx Load Balancer Configuration
# KlikkFlow High Availability Setup
# ============================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_rlimit_nofile 8192;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==========================================
    # Logging Format
    # ==========================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'upstream=$upstream_addr status=$upstream_status';

    access_log /var/log/nginx/access.log main;

    # ==========================================
    # Performance Settings
    # ==========================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # File upload limits (for workflow imports, credentials)
    client_max_body_size 50M;
    client_body_buffer_size 128k;

    # Timeouts for long-running workflows
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # ==========================================
    # Gzip Compression
    # ==========================================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml;
    gzip_min_length 256;
    gzip_disable "msie6";

    # ==========================================
    # Backend Upstream Pool
    # ==========================================
    upstream backend_pool {
        # Load balancing method: least_conn (least connections)
        least_conn;

        # Backend instances
        server backend:3001 max_fails=3 fail_timeout=30s;
        server backend-2:3001 max_fails=3 fail_timeout=30s;

        # Keep-alive connections to upstream
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # ==========================================
    # Health Check Upstream (for internal checks)
    # ==========================================
    upstream backend_health {
        server backend:3001;
        server backend-2:3001 backup;
    }

    # ==========================================
    # Main Load Balancer Server
    # ==========================================
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # ==========================================
        # Load Balancer Health Check
        # ==========================================
        location /health {
            access_log off;
            return 200 "load balancer healthy\n";
            add_header Content-Type text/plain;
        }

        # ==========================================
        # Nginx Status (for monitoring)
        # ==========================================
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.16.0.0/12;  # Docker network
            allow 10.0.0.0/8;     # Private network
            deny all;
        }

        # ==========================================
        # API Routes (REST)
        # ==========================================
        location /api/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Keep-alive to upstream
            proxy_set_header Connection "";

            # Buffer settings for large responses
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # ==========================================
        # WebSocket Routes (Socket.IO for real-time updates)
        # ==========================================
        location /socket.io/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;

            # WebSocket upgrade headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts (keep connections alive)
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for WebSocket
            proxy_buffering off;

            # Error handling (no retry for WebSocket)
            proxy_next_upstream off;
        }

        # ==========================================
        # Authentication Routes (critical path)
        # ==========================================
        location /api/auth/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Keep-alive
            proxy_set_header Connection "";

            # Shorter timeout for auth
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # No buffering for auth (faster response)
            proxy_buffering off;

            # Retry on failure
            proxy_next_upstream error timeout http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # ==========================================
        # Workflow Execution Routes (long timeout)
        # ==========================================
        location /api/workflows/execute {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Keep-alive
            proxy_set_header Connection "";

            # Extended timeout for workflow execution
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;

            # No retry for execution (avoid duplicate runs)
            proxy_next_upstream off;
        }

        # ==========================================
        # Backend Health Check Endpoint
        # ==========================================
        location /api/health {
            proxy_pass http://backend_health/api/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # Fast timeout for health checks
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            access_log off;
        }

        # ==========================================
        # Metrics Endpoint (for Prometheus)
        # ==========================================
        location /metrics {
            proxy_pass http://backend_pool/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # Fast timeout
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            # Access control (internal only)
            allow 172.16.0.0/12;  # Docker network
            allow 10.0.0.0/8;     # Private network
            deny all;

            access_log off;
        }

        # ==========================================
        # Frontend Static Assets (fallback)
        # ==========================================
        location / {
            proxy_pass http://frontend:80;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache frontend responses
            proxy_cache_bypass $http_upgrade;
        }

        # ==========================================
        # Error Pages
        # ==========================================
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        error_page 500 /500.html;
        location = /500.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
