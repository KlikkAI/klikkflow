version: '3.8'

name: reporunner

services:
  # PostgreSQL with pgvector for main database and vector storage
  postgres:
    image: pgvector/pgvector:pg16
    container_name: reporunner-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: reporunner
      POSTGRES_USER: reporunner
      POSTGRES_PASSWORD: reporunner_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reporunner -d reporunner"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reporunner-network

  # MongoDB for workflow definitions and user data  
  mongodb:
    image: mongo:7.0
    container_name: reporunner-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: reporunner
      MONGO_INITDB_ROOT_PASSWORD: reporunner_dev
      MONGO_INITDB_DATABASE: reporunner
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reporunner-network

  # Redis for caching and queue management
  redis:
    image: redis:7.4-alpine
    container_name: reporunner-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass reporunner_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reporunner-network

  # Backend API server
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: development
    container_name: reporunner-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      
      # Database URLs
      DATABASE_URL: postgresql://reporunner:reporunner_dev@postgres:5432/reporunner
      MONGODB_URI: mongodb://reporunner:reporunner_dev@mongodb:27017/reporunner
      REDIS_URL: redis://:reporunner_dev@redis:6379
      
      # JWT Secret
      JWT_SECRET: reporunner_dev_secret_key_change_in_production
      
      # AI Provider Keys (set in .env.local)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:-}
      
      # Email configuration
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      SMTP_SECURE: false
      
    volumes:
      - ./packages/backend:/app/packages/backend
      - ./packages/core:/app/packages/core
      - ./packages/@reporunner:/app/packages/@reporunner
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reporunner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React application
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
      target: development
    container_name: reporunner-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_WS_URL: ws://localhost:3001
    volumes:
      - ./packages/frontend:/app/packages/frontend
      - ./packages/core:/app/packages/core
      - ./packages/@reporunner:/app/packages/@reporunner
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - reporunner-network

  # Worker for background job processing
  worker:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile.worker
      target: development
    container_name: reporunner-worker
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://reporunner:reporunner_dev@postgres:5432/reporunner
      MONGODB_URI: mongodb://reporunner:reporunner_dev@mongodb:27017/reporunner
      REDIS_URL: redis://:reporunner_dev@redis:6379
      
      # AI Provider Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:-}
    volumes:
      - ./packages/backend:/app/packages/backend
      - ./packages/core:/app/packages/core
      - ./packages/@reporunner:/app/packages/@reporunner
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reporunner-network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: reporunner-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - reporunner-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: reporunner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - reporunner-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: reporunner-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: reporunner_dev
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - reporunner-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: reporunner-jaeger
    restart: unless-stopped
    ports:
      - "14268:14268"  # HTTP collector
      - "16686:16686"  # Web UI
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - reporunner-network

volumes:
  postgres_data:
    name: reporunner_postgres_data
  mongodb_data:
    name: reporunner_mongodb_data
  redis_data:
    name: reporunner_redis_data
  prometheus_data:
    name: reporunner_prometheus_data
  grafana_data:
    name: reporunner_grafana_data

networks:
  reporunner-network:
    name: reporunner_network
    driver: bridge