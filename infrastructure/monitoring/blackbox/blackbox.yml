modules:
  # HTTP 2xx module - Basic HTTP health checks
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      headers:
        Host: klikkflow.com
        Accept-Language: en-US
      no_follow_redirects: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: false

  # HTTP POST module for API endpoints
  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"health": "check"}'
      valid_status_codes: [200, 201, 202]

  # HTTP module with authentication
  http_auth:
    prober: http
    timeout: 10s
    http:
      method: GET
      headers:
        Authorization: "Bearer YOUR_API_TOKEN"
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - "\"status\":\\s*\"healthy\""

  # HTTPS module with SSL verification
  https_2xx:
    prober: http
    timeout: 10s
    http:
      method: GET
      valid_status_codes: [200]
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # TCP connect module
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"

  # SSH module
  ssh_banner:
    prober: tcp
    timeout: 10s
    tcp:
      query_response:
        - expect: "^SSH-2.0-"
      preferred_ip_protocol: "ip4"

  # DNS module
  dns_query:
    prober: dns
    timeout: 5s
    dns:
      query_name: "klikkflow.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp:
          - ".*127.0.0.1"
        fail_if_not_matches_regexp:
          - ".*"

  # ICMP module
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"
      source_ip_address: "127.0.0.1"

  # Database connectivity checks
  postgres_connect:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - send: ""
        - expect: "^.+PostgreSQL.+"
      preferred_ip_protocol: "ip4"

  mongodb_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"

  redis_connect:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - send: "PING\r\n"
        - expect: "PONG"
      preferred_ip_protocol: "ip4"

  # WebSocket module
  websocket:
    prober: http
    timeout: 10s
    http:
      method: GET
      headers:
        Connection: Upgrade
        Upgrade: websocket
        Sec-WebSocket-Key: "dGhlIHNhbXBsZSBub25jZQ=="
        Sec-WebSocket-Version: "13"
      valid_status_codes: [101]

  # API health check with JSON response validation
  api_health:
    prober: http
    timeout: 10s
    http:
      method: GET
      headers:
        Accept: application/json
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - "\"status\":\\s*\"(ok|healthy|up)\""
      fail_if_body_matches_regexp:
        - "\"status\":\\s*\"(error|down|unhealthy)\""

  # Workflow execution endpoint check
  workflow_api:
    prober: http
    timeout: 15s
    http:
      method: GET
      headers:
        Accept: application/json
        Authorization: "Bearer API_TOKEN_HERE"
      valid_status_codes: [200, 401]  # 401 is OK for auth check
      preferred_ip_protocol: "ip4"

  # Frontend availability check
  frontend_check:
    prober: http
    timeout: 10s
    http:
      method: GET
      headers:
        Accept: text/html
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - "<title>.*KlikkFlow.*</title>"
      preferred_ip_protocol: "ip4"

  # SSL certificate expiry check
  ssl_expiry:
    prober: http
    timeout: 10s
    http:
      method: GET
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"
      fail_if_ssl_cert_expires_in_days: 30

  # SMTP check
  smtp_banner:
    prober: tcp
    timeout: 10s
    tcp:
      query_response:
        - expect: "^220.*"
      preferred_ip_protocol: "ip4"

  # File server check
  file_server:
    prober: http
    timeout: 5s
    http:
      method: HEAD
      valid_status_codes: [200, 404]  # 404 is OK if checking for specific file
      preferred_ip_protocol: "ip4"

  # Custom application metrics endpoint
  metrics_endpoint:
    prober: http
    timeout: 5s
    http:
      method: GET
      headers:
        Accept: text/plain
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - "# HELP.*"
        - "# TYPE.*"
      preferred_ip_protocol: "ip4"