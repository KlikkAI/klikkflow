{
  "statistics": {
    "detectionDate": "2025-09-26T19:17:36.877Z",
    "formats": {
      "typescript": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/properties/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/enhanced-properties/index.ts": {
            "lines": 12,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/enhanced-node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/properties/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/actions/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/properties/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/actions/index.ts": {
            "lines": 8,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodeconfigs/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/infrastructure/repositories/mongo-tenant.repository/repository-queries.ts": {
            "lines": 41,
            "tokens": 420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity/tenant-properties.ts": {
            "lines": 125,
            "tokens": 883,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 112,
            "duplicatedTokens": 892,
            "percentage": 89.6,
            "percentageTokens": 101.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity/tenant-methods.ts": {
            "lines": 39,
            "tokens": 258,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 150,
            "percentage": 35.9,
            "percentageTokens": 58.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/properties.ts": {
            "lines": 564,
            "tokens": 3969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/node.ts": {
            "lines": 60,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/index.ts": {
            "lines": 3,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/credentials.ts": {
            "lines": 231,
            "tokens": 1572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/properties.ts": {
            "lines": 708,
            "tokens": 5462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/node.ts": {
            "lines": 72,
            "tokens": 476,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/index.ts": {
            "lines": 3,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/credentials.ts": {
            "lines": 377,
            "tokens": 2324,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeConfigs.ts": {
            "lines": 354,
            "tokens": 2374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/domain/repositories/IHealthCheckRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/logging/logger/domain/repositories/ILoggerRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/domain/repositories/IDebugToolsRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/presentation/controllers/tenant.controller.ts": {
            "lines": 179,
            "tokens": 1606,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/infrastructure/repositories/mongo-tenant.repository.ts": {
            "lines": 83,
            "tokens": 892,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity.ts": {
            "lines": 277,
            "tokens": 2316,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 126,
            "duplicatedTokens": 1042,
            "percentage": 45.49,
            "percentageTokens": 44.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/application/validators/tenant.validator.ts": {
            "lines": 55,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/application/services/tenant.service.ts": {
            "lines": 160,
            "tokens": 1193,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 182,
            "percentage": 8.75,
            "percentageTokens": 15.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/webhooktrigger.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/vectorstoretool.node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/vectorstore.node/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/transform.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/pgvector.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/llm.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/file.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/database.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/aiagent.node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/types.ts": {
            "lines": 30,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 150,
            "duplicatedTokens": 1086,
            "percentage": 517.24,
            "percentageTokens": 482.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 36,
            "duplicatedTokens": 516,
            "percentage": 600,
            "percentageTokens": 560.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/infrastructure/repositories/PermissionRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/domain/repositories/IPermissionRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/infrastructure/repositories/OperationalTransformRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/domain/repositories/IOperationalTransformRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/infrastructure/repositories/EmbeddingsRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/domain/repositories/IEmbeddingsRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/infrastructure/repositories/DatabaseRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/domain/repositories/IDatabaseRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/application/use-cases/database-service.ts": {
            "lines": 57,
            "tokens": 383,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/infrastructure/repositories/CursorTrackingRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/domain/repositories/ICursorTrackingRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/infrastructure/repositories/CollaborationRepository.ts": {
            "lines": 29,
            "tokens": 225,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 181,
            "percentage": 86.21,
            "percentageTokens": 80.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/repositories/ICollaborationRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/entities/Session.entity.ts": {
            "lines": 137,
            "tokens": 1147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflowengine/index.ts": {
            "lines": 10,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflow/WorkflowService.ts": {
            "lines": 226,
            "tokens": 1633,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 70,
            "duplicatedTokens": 514,
            "percentage": 30.97,
            "percentageTokens": 31.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts": {
            "lines": 171,
            "tokens": 1226,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 105,
            "duplicatedTokens": 770,
            "percentage": 61.4,
            "percentageTokens": 62.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/gmail/GmailService.ts": {
            "lines": 221,
            "tokens": 1596,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 257,
            "percentage": 15.84,
            "percentageTokens": 16.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts": {
            "lines": 481,
            "tokens": 3520,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 180,
            "duplicatedTokens": 1318,
            "percentage": 37.42,
            "percentageTokens": 37.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/credential/CredentialService.ts": {
            "lines": 316,
            "tokens": 2299,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 60,
            "duplicatedTokens": 438,
            "percentage": 18.99,
            "percentageTokens": 19.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/session-management.ts": {
            "lines": 103,
            "tokens": 825,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 103,
            "duplicatedTokens": 937,
            "percentage": 100,
            "percentageTokens": 113.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/collaboration-analytics.ts": {
            "lines": 30,
            "tokens": 185,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 151,
            "percentage": 63.33,
            "percentageTokens": 81.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts": {
            "lines": 106,
            "tokens": 861,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 156,
            "duplicatedTokens": 1407,
            "percentage": 147.17,
            "percentageTokens": 163.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-resolution.ts": {
            "lines": 100,
            "tokens": 787,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 105,
            "duplicatedTokens": 931,
            "percentage": 105,
            "percentageTokens": 118.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts": {
            "lines": 103,
            "tokens": 778,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 149,
            "duplicatedTokens": 1296,
            "percentage": 144.66,
            "percentageTokens": 166.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-management.ts": {
            "lines": 103,
            "tokens": 743,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 100,
            "duplicatedTokens": 832,
            "percentage": 97.09,
            "percentageTokens": 111.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-analytics.ts": {
            "lines": 26,
            "tokens": 149,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 107,
            "percentage": 57.69,
            "percentageTokens": 71.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/auth/AuthService.ts": {
            "lines": 311,
            "tokens": 2262,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 330,
            "percentage": 14.47,
            "percentageTokens": 14.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-versioning.ts": {
            "lines": 113,
            "tokens": 793,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 110,
            "duplicatedTokens": 883,
            "percentage": 97.35,
            "percentageTokens": 111.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-sharing.ts": {
            "lines": 110,
            "tokens": 826,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 119,
            "duplicatedTokens": 949,
            "percentage": 108.18,
            "percentageTokens": 114.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-permissions.ts": {
            "lines": 20,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-operations.ts": {
            "lines": 105,
            "tokens": 884,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 94,
            "duplicatedTokens": 791,
            "percentage": 89.52,
            "percentageTokens": 89.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts": {
            "lines": 106,
            "tokens": 813,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 123,
            "duplicatedTokens": 1000,
            "percentage": 116.04,
            "percentageTokens": 123,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-core.ts": {
            "lines": 105,
            "tokens": 1205,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 99,
            "duplicatedTokens": 1149,
            "percentage": 94.29,
            "percentageTokens": 95.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-utilities.ts": {
            "lines": 86,
            "tokens": 600,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 80,
            "duplicatedTokens": 604,
            "percentage": 93.02,
            "percentageTokens": 100.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-operations.ts": {
            "lines": 116,
            "tokens": 714,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 66,
            "duplicatedTokens": 519,
            "percentage": 56.9,
            "percentageTokens": 72.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-verification.ts": {
            "lines": 102,
            "tokens": 716,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 97,
            "duplicatedTokens": 719,
            "percentage": 95.1,
            "percentageTokens": 100.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-utilities.ts": {
            "lines": 99,
            "tokens": 619,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 61,
            "duplicatedTokens": 445,
            "percentage": 61.62,
            "percentageTokens": 71.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/SecurityHeadersBuilder.ts": {
            "lines": 174,
            "tokens": 1170,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 164,
            "percentage": 16.09,
            "percentageTokens": 14.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/PermissionsPolicyBuilder.ts": {
            "lines": 200,
            "tokens": 1411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/HSTSBuilder.ts": {
            "lines": 84,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/CSPBuilder.ts": {
            "lines": 159,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/Store.ts": {
            "lines": 23,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/RedisStore.ts": {
            "lines": 69,
            "tokens": 555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/MemoryStore.ts": {
            "lines": 69,
            "tokens": 610,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/services/TokenService.ts": {
            "lines": 121,
            "tokens": 875,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/services/SessionService.ts": {
            "lines": 197,
            "tokens": 1638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/services/RoleService.ts": {
            "lines": 113,
            "tokens": 759,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/workflowexporter/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/typevalidation/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/transformnodeutils/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/propertyevaluator/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodeversioning/nodeVersioningService.ts": {
            "lines": 171,
            "tokens": 1226,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 220,
            "percentage": 17.54,
            "percentageTokens": 17.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodegenerator/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/expressionevaluator/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/enhancedpropertyevaluator/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security/securityService.ts": {
            "lines": 76,
            "tokens": 523,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 50,
            "duplicatedTokens": 367,
            "percentage": 65.79,
            "percentageTokens": 70.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/collaboration/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/authentication/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/rbacstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanworkflowstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/enhancedexecutionstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/collaborationstore/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/analyticsstore/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/aiassistantstore/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts": {
            "lines": 241,
            "tokens": 1744,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 165,
            "duplicatedTokens": 1210,
            "percentage": 68.46,
            "percentageTokens": 69.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts": {
            "lines": 431,
            "tokens": 3150,
            "sources": 1,
            "clones": 27,
            "duplicatedLines": 510,
            "duplicatedTokens": 3747,
            "percentage": 118.33,
            "percentageTokens": 118.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowoptimizer/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowdebugger/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts": {
            "lines": 221,
            "tokens": 1596,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 115,
            "duplicatedTokens": 844,
            "percentage": 52.04,
            "percentageTokens": 52.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts": {
            "lines": 286,
            "tokens": 2077,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 140,
            "duplicatedTokens": 1028,
            "percentage": 48.95,
            "percentageTokens": 49.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performance/PerformanceService.ts": {
            "lines": 306,
            "tokens": 2225,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 257,
            "percentage": 11.44,
            "percentageTokens": 11.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/logging/LoggingService.ts": {
            "lines": 301,
            "tokens": 2188,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 75,
            "duplicatedTokens": 551,
            "percentage": 24.92,
            "percentageTokens": 25.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts": {
            "lines": 311,
            "tokens": 2262,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 160,
            "duplicatedTokens": 1157,
            "percentage": 51.45,
            "percentageTokens": 51.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts": {
            "lines": 356,
            "tokens": 2595,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 165,
            "duplicatedTokens": 1212,
            "percentage": 46.35,
            "percentageTokens": 46.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhanceddebugging/enhancedDebuggingService.ts": {
            "lines": 331,
            "tokens": 2410,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 70,
            "duplicatedTokens": 514,
            "percentage": 21.15,
            "percentageTokens": 21.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts": {
            "lines": 351,
            "tokens": 2558,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 100,
            "duplicatedTokens": 734,
            "percentage": 28.49,
            "percentageTokens": 28.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts": {
            "lines": 266,
            "tokens": 1929,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 90,
            "duplicatedTokens": 660,
            "percentage": 33.83,
            "percentageTokens": 34.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerconnectionvalidator/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/conflictresolver/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts": {
            "lines": 166,
            "tokens": 1189,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 80,
            "duplicatedTokens": 587,
            "percentage": 48.19,
            "percentageTokens": 49.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts": {
            "lines": 281,
            "tokens": 2040,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 140,
            "duplicatedTokens": 1028,
            "percentage": 49.82,
            "percentageTokens": 50.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/analytics/analyticsService.ts": {
            "lines": 281,
            "tokens": 2040,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 65,
            "duplicatedTokens": 477,
            "percentage": 23.13,
            "percentageTokens": 23.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts": {
            "lines": 326,
            "tokens": 2373,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 150,
            "duplicatedTokens": 1100,
            "percentage": 46.01,
            "percentageTokens": 46.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts": {
            "lines": 471,
            "tokens": 3446,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 160,
            "duplicatedTokens": 1175,
            "percentage": 33.97,
            "percentageTokens": 34.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedauth/advancedAuthService.ts": {
            "lines": 376,
            "tokens": 2743,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 75,
            "duplicatedTokens": 551,
            "percentage": 19.95,
            "percentageTokens": 20.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/workflowschemas/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/types/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/WebhookTrigger.node.ts": {
            "lines": 324,
            "tokens": 2175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStoreTool.node.ts": {
            "lines": 421,
            "tokens": 3053,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 114,
            "percentage": 4.99,
            "percentageTokens": 3.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStore.node.ts": {
            "lines": 509,
            "tokens": 3774,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 114,
            "percentage": 4.13,
            "percentageTokens": 3.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Trigger.node.ts": {
            "lines": 110,
            "tokens": 733,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 94,
            "percentage": 6.36,
            "percentageTokens": 12.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Transform.node.ts": {
            "lines": 387,
            "tokens": 2344,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/PgVector.node.ts": {
            "lines": 309,
            "tokens": 2404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Ollama.node.ts": {
            "lines": 163,
            "tokens": 1115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Loop.node.ts": {
            "lines": 143,
            "tokens": 985,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/LLM.node.ts": {
            "lines": 322,
            "tokens": 2456,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts": {
            "lines": 251,
            "tokens": 1959,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 211,
            "percentage": 7.17,
            "percentageTokens": 10.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/File.node.ts": {
            "lines": 360,
            "tokens": 2466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Embedding.node.ts": {
            "lines": 243,
            "tokens": 1682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Email.node.ts": {
            "lines": 298,
            "tokens": 2186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Delay.node.ts": {
            "lines": 85,
            "tokens": 596,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Database.node.ts": {
            "lines": 310,
            "tokens": 2224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Condition.node.ts": {
            "lines": 219,
            "tokens": 1781,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Action.node.ts": {
            "lines": 214,
            "tokens": 1529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 117,
            "percentage": 5.14,
            "percentageTokens": 7.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/AIAgent.node.ts": {
            "lines": 423,
            "tokens": 3315,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 200,
            "percentage": 3.31,
            "percentageTokens": 6.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/workflowapi/WorkflowApiService.ts": {
            "lines": 191,
            "tokens": 1374,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 110,
            "percentage": 7.85,
            "percentageTokens": 8.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/credentialapi/CredentialApiService.ts": {
            "lines": 226,
            "tokens": 1633,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 220,
            "percentage": 13.27,
            "percentageTokens": 13.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/authapi/AuthApiService.ts": {
            "lines": 231,
            "tokens": 1670,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 220,
            "percentage": 12.99,
            "percentageTokens": 13.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/apiclient/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/intelligentautoconnect/intelligentAutoConnectService.ts": {
            "lines": 181,
            "tokens": 1300,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 110,
            "percentage": 8.29,
            "percentageTokens": 8.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/integration/integrationService.ts": {
            "lines": 116,
            "tokens": 819,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 220,
            "percentage": 25.86,
            "percentageTokens": 26.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/executionmonitor/executionMonitorService.ts": {
            "lines": 201,
            "tokens": 1448,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 313,
            "percentage": 22.39,
            "percentageTokens": 21.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/containerfactory/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/defaultTheme.ts": {
            "lines": 78,
            "tokens": 473,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 286,
            "percentage": 60.26,
            "percentageTokens": 60.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/darkTheme.ts": {
            "lines": 78,
            "tokens": 473,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 286,
            "percentage": 60.26,
            "percentageTokens": 60.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/ThemeManager.ts": {
            "lines": 228,
            "tokens": 1921,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/index.ts": {
            "lines": 8,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/usecontainerinteractions/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/index.ts": {
            "lines": 13,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts": {
            "lines": 189,
            "tokens": 1900,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 125,
            "duplicatedTokens": 982,
            "percentage": 66.14,
            "percentageTokens": 51.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/HealthCheckService.ts": {
            "lines": 296,
            "tokens": 2151,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 330,
            "percentage": 15.2,
            "percentageTokens": 15.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts": {
            "lines": 251,
            "tokens": 2515,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 59,
            "duplicatedTokens": 466,
            "percentage": 23.51,
            "percentageTokens": 18.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/logging/logger/LoggerService.ts": {
            "lines": 191,
            "tokens": 1374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts": {
            "lines": 361,
            "tokens": 2632,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 105,
            "duplicatedTokens": 771,
            "percentage": 29.09,
            "percentageTokens": 29.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts": {
            "lines": 123,
            "tokens": 861,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 168,
            "percentage": 17.89,
            "percentageTokens": 19.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts": {
            "lines": 376,
            "tokens": 2950,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 172,
            "percentage": 5.32,
            "percentageTokens": 5.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/routes/workflowRoutes.ts": {
            "lines": 206,
            "tokens": 1192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/repositories/WorkflowRepository.ts": {
            "lines": 65,
            "tokens": 425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/interfaces/index.ts": {
            "lines": 26,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/controllers/WorkflowController.ts": {
            "lines": 229,
            "tokens": 1938,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/OAuthService.ts": {
            "lines": 309,
            "tokens": 2488,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 353,
            "percentage": 11.97,
            "percentageTokens": 14.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/GmailService.ts": {
            "lines": 342,
            "tokens": 2799,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/routes/oauthRoutes.ts": {
            "lines": 75,
            "tokens": 444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/interfaces/index.ts": {
            "lines": 59,
            "tokens": 361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/controllers/OAuthController.ts": {
            "lines": 140,
            "tokens": 1147,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 85,
            "percentage": 4.29,
            "percentageTokens": 7.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/routes/nodeExecutionRoutes.ts": {
            "lines": 21,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/repositories/ExecutionRepository.ts": {
            "lines": 72,
            "tokens": 484,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/interfaces/index.ts": {
            "lines": 58,
            "tokens": 383,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 99,
            "percentage": 18.97,
            "percentageTokens": 25.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/controllers/NodeExecutionController.ts": {
            "lines": 41,
            "tokens": 358,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 85,
            "percentage": 14.63,
            "percentageTokens": 23.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts": {
            "lines": 650,
            "tokens": 4993,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 161,
            "duplicatedTokens": 1243,
            "percentage": 24.77,
            "percentageTokens": 24.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/routes/credentialRoutes.ts": {
            "lines": 114,
            "tokens": 703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/repositories/CredentialRepository.ts": {
            "lines": 115,
            "tokens": 750,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/interfaces/index.ts": {
            "lines": 36,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/controllers/CredentialController.ts": {
            "lines": 106,
            "tokens": 870,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/routes/collaborationRoutes.ts": {
            "lines": 69,
            "tokens": 376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts": {
            "lines": 328,
            "tokens": 2551,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 135,
            "duplicatedTokens": 1231,
            "percentage": 41.16,
            "percentageTokens": 48.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts": {
            "lines": 526,
            "tokens": 4206,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 366,
            "duplicatedTokens": 3258,
            "percentage": 69.58,
            "percentageTokens": 77.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/validators/authValidators.ts": {
            "lines": 84,
            "tokens": 524,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts": {
            "lines": 588,
            "tokens": 4779,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 118,
            "duplicatedTokens": 992,
            "percentage": 20.07,
            "percentageTokens": 20.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/routes/authRoutes.ts": {
            "lines": 81,
            "tokens": 315,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/repositories/UserRepository.ts": {
            "lines": 110,
            "tokens": 823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/interfaces/index.ts": {
            "lines": 34,
            "tokens": 181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts": {
            "lines": 125,
            "tokens": 1138,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 214,
            "percentage": 17.6,
            "percentageTokens": 18.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/node-execution.ts": {
            "lines": 105,
            "tokens": 749,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 100,
            "duplicatedTokens": 745,
            "percentage": 95.24,
            "percentageTokens": 99.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-utilities.ts": {
            "lines": 98,
            "tokens": 691,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 86,
            "duplicatedTokens": 672,
            "percentage": 87.76,
            "percentageTokens": 97.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-management.ts": {
            "lines": 110,
            "tokens": 731,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 84,
            "duplicatedTokens": 660,
            "percentage": 76.36,
            "percentageTokens": 90.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-processing.ts": {
            "lines": 60,
            "tokens": 401,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 49,
            "duplicatedTokens": 387,
            "percentage": 81.67,
            "percentageTokens": 96.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-operations.ts": {
            "lines": 113,
            "tokens": 765,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 95,
            "duplicatedTokens": 748,
            "percentage": 84.07,
            "percentageTokens": 97.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/job-management.ts": {
            "lines": 121,
            "tokens": 777,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 65,
            "duplicatedTokens": 513,
            "percentage": 53.72,
            "percentageTokens": 66.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts": {
            "lines": 406,
            "tokens": 3276,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 241,
            "percentage": 7.64,
            "percentageTokens": 7.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/CustomValidator.ts": {
            "lines": 120,
            "tokens": 845,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 147,
            "percentage": 15.83,
            "percentageTokens": 17.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/types/ValidationResult.ts": {
            "lines": 85,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/schema/ValidationSchema.ts": {
            "lines": 184,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts": {
            "lines": 287,
            "tokens": 1985,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 154,
            "percentage": 5.57,
            "percentageTokens": 7.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/CommonRules.ts": {
            "lines": 426,
            "tokens": 3425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/errors/ValidationError.ts": {
            "lines": 257,
            "tokens": 1751,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/context/ValidationContext.ts": {
            "lines": 304,
            "tokens": 1976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/FileValidator.ts": {
            "lines": 29,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts": {
            "lines": 204,
            "tokens": 1454,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 319,
            "percentage": 22.06,
            "percentageTokens": 21.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/types/UploadedFile.ts": {
            "lines": 183,
            "tokens": 699,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/types/UploadOptions.ts": {
            "lines": 161,
            "tokens": 462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/transforms/NoopTransform.ts": {
            "lines": 16,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/transforms/FileTransform.ts": {
            "lines": 11,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/StorageEngine.ts": {
            "lines": 90,
            "tokens": 395,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/LocalStorageEngine.ts": {
            "lines": 285,
            "tokens": 2199,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 93,
            "percentage": 4.21,
            "percentageTokens": 4.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/FileFilter.ts": {
            "lines": 10,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts": {
            "lines": 100,
            "tokens": 766,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 33,
            "duplicatedTokens": 226,
            "percentage": 33,
            "percentageTokens": 29.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/errors/UploadError.ts": {
            "lines": 196,
            "tokens": 1144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/index.ts": {
            "lines": 5,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-types.ts": {
            "lines": 99,
            "tokens": 755,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 96,
            "duplicatedTokens": 714,
            "percentage": 96.97,
            "percentageTokens": 94.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-service.ts": {
            "lines": 99,
            "tokens": 897,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 94,
            "duplicatedTokens": 870,
            "percentage": 94.95,
            "percentageTokens": 96.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-operations.ts": {
            "lines": 107,
            "tokens": 708,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 97,
            "duplicatedTokens": 701,
            "percentage": 90.65,
            "percentageTokens": 99.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/execution-management.ts": {
            "lines": 106,
            "tokens": 801,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 77,
            "duplicatedTokens": 745,
            "percentage": 72.64,
            "percentageTokens": 93.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts": {
            "lines": 524,
            "tokens": 4705,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 487,
            "duplicatedTokens": 4299,
            "percentage": 92.94,
            "percentageTokens": 91.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/index.ts": {
            "lines": 181,
            "tokens": 1597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-utilities.ts": {
            "lines": 140,
            "tokens": 814,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-types.ts": {
            "lines": 99,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-service.ts": {
            "lines": 101,
            "tokens": 714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-security.ts": {
            "lines": 117,
            "tokens": 969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-operations.ts": {
            "lines": 99,
            "tokens": 1173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-monitoring.ts": {
            "lines": 113,
            "tokens": 893,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-migration.ts": {
            "lines": 106,
            "tokens": 823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-management.ts": {
            "lines": 107,
            "tokens": 867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-compliance.ts": {
            "lines": 121,
            "tokens": 840,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-backup.ts": {
            "lines": 116,
            "tokens": 805,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-analytics.ts": {
            "lines": 112,
            "tokens": 1081,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/subscription-management.ts": {
            "lines": 104,
            "tokens": 862,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/service-exports.ts": {
            "lines": 117,
            "tokens": 776,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/index.ts": {
            "lines": 14,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/billing-integration.ts": {
            "lines": 102,
            "tokens": 874,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/webhook-providers.ts": {
            "lines": 101,
            "tokens": 773,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/template-types.ts": {
            "lines": 99,
            "tokens": 757,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/template-management.ts": {
            "lines": 117,
            "tokens": 887,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/service-core.ts": {
            "lines": 99,
            "tokens": 912,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 81,
            "percentage": 10.1,
            "percentageTokens": 8.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/queue-processing.ts": {
            "lines": 118,
            "tokens": 909,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/provider-implementations.ts": {
            "lines": 124,
            "tokens": 909,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/provider-exports.ts": {
            "lines": 23,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/notification-types.ts": {
            "lines": 99,
            "tokens": 739,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/index.ts": {
            "lines": 11,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/email-providers.ts": {
            "lines": 121,
            "tokens": 1006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/channel-management.ts": {
            "lines": 112,
            "tokens": 997,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/index/specialized-executors.ts": {
            "lines": 99,
            "tokens": 803,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/index/node-executors.ts": {
            "lines": 127,
            "tokens": 852,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/index/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/services/AuthService.ts": {
            "lines": 582,
            "tokens": 4533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts": {
            "lines": 281,
            "tokens": 2088,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 146,
            "duplicatedTokens": 1123,
            "percentage": 51.96,
            "percentageTokens": 53.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts": {
            "lines": 282,
            "tokens": 2070,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 158,
            "duplicatedTokens": 1164,
            "percentage": 56.03,
            "percentageTokens": 56.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention/retention-processing.ts": {
            "lines": 120,
            "tokens": 954,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 94,
            "duplicatedTokens": 936,
            "percentage": 78.33,
            "percentageTokens": 98.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention/retention-policies.ts": {
            "lines": 40,
            "tokens": 224,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 194,
            "percentage": 82.5,
            "percentageTokens": 86.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/service-exports.ts": {
            "lines": 62,
            "tokens": 453,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/search-operations.ts": {
            "lines": 114,
            "tokens": 944,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/retention-integration.ts": {
            "lines": 111,
            "tokens": 1058,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/reporting.ts": {
            "lines": 111,
            "tokens": 1003,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/index.ts": {
            "lines": 13,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/event-logging.ts": {
            "lines": 102,
            "tokens": 982,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/compliance-rules.ts": {
            "lines": 111,
            "tokens": 944,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/compliance-monitoring.ts": {
            "lines": 126,
            "tokens": 1066,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/compliance-engine.ts": {
            "lines": 113,
            "tokens": 904,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/batch-processing.ts": {
            "lines": 115,
            "tokens": 934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/audit-utilities.ts": {
            "lines": 128,
            "tokens": 1057,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/audit-types.ts": {
            "lines": 108,
            "tokens": 946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/audit-service.ts": {
            "lines": 101,
            "tokens": 954,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/analytics-integration.ts": {
            "lines": 138,
            "tokens": 1211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 92,
            "percentage": 7.97,
            "percentageTokens": 7.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/visualization.ts": {
            "lines": 109,
            "tokens": 825,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/report-generation.ts": {
            "lines": 112,
            "tokens": 718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/real-time-analytics.ts": {
            "lines": 114,
            "tokens": 896,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/query-engine.ts": {
            "lines": 101,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/predictive-analytics.ts": {
            "lines": 116,
            "tokens": 903,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/performance-optimization.ts": {
            "lines": 102,
            "tokens": 774,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/metrics-aggregation.ts": {
            "lines": 109,
            "tokens": 706,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/index.ts": {
            "lines": 13,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/export-operations.ts": {
            "lines": 118,
            "tokens": 1053,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/data-processing.ts": {
            "lines": 120,
            "tokens": 875,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/data-collection.ts": {
            "lines": 115,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-types.ts": {
            "lines": 99,
            "tokens": 756,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-service.ts": {
            "lines": 99,
            "tokens": 992,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 81,
            "percentage": 10.1,
            "percentageTokens": 8.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/alert-monitoring.ts": {
            "lines": 104,
            "tokens": 766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-templates.ts": {
            "lines": 36,
            "tokens": 323,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 35,
            "duplicatedTokens": 326,
            "percentage": 97.22,
            "percentageTokens": 100.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts": {
            "lines": 111,
            "tokens": 879,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 113,
            "duplicatedTokens": 1031,
            "percentage": 101.8,
            "percentageTokens": 117.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-core.ts": {
            "lines": 99,
            "tokens": 920,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 920,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-utilities.ts": {
            "lines": 96,
            "tokens": 576,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 128,
            "duplicatedTokens": 777,
            "percentage": 133.33,
            "percentageTokens": 134.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-rules.ts": {
            "lines": 99,
            "tokens": 752,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 95,
            "duplicatedTokens": 750,
            "percentage": 95.96,
            "percentageTokens": 99.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/schema-validation.ts": {
            "lines": 99,
            "tokens": 695,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 95,
            "duplicatedTokens": 706,
            "percentage": 95.96,
            "percentageTokens": 101.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/input-sanitization.ts": {
            "lines": 99,
            "tokens": 690,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 89,
            "duplicatedTokens": 647,
            "percentage": 89.9,
            "percentageTokens": 93.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/error-handling.ts": {
            "lines": 99,
            "tokens": 765,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 749,
            "percentage": 93.94,
            "percentageTokens": 97.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/data-transformation.ts": {
            "lines": 99,
            "tokens": 801,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 108,
            "duplicatedTokens": 904,
            "percentage": 109.09,
            "percentageTokens": 112.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation/ValidationMiddleware.ts": {
            "lines": 182,
            "tokens": 1444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/security-enforcement.ts": {
            "lines": 99,
            "tokens": 719,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 719,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/header-utilities.ts": {
            "lines": 65,
            "tokens": 459,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 65,
            "duplicatedTokens": 459,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/csp-policies.ts": {
            "lines": 99,
            "tokens": 711,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 686,
            "percentage": 90.91,
            "percentageTokens": 96.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/SecurityHeadersMiddleware.ts": {
            "lines": 216,
            "tokens": 1567,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 164,
            "percentage": 12.96,
            "percentageTokens": 10.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/redis-integration.ts": {
            "lines": 99,
            "tokens": 665,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 665,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/limiter-strategies.ts": {
            "lines": 100,
            "tokens": 646,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 89,
            "duplicatedTokens": 600,
            "percentage": 89,
            "percentageTokens": 92.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/limit-utilities.ts": {
            "lines": 55,
            "tokens": 402,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 359,
            "percentage": 78.18,
            "percentageTokens": 89.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/RateLimiter.ts": {
            "lines": 91,
            "tokens": 515,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/RateLimitMiddleware.ts": {
            "lines": 147,
            "tokens": 1032,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/upload-utilities.ts": {
            "lines": 99,
            "tokens": 842,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 104,
            "duplicatedTokens": 938,
            "percentage": 105.05,
            "percentageTokens": 111.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/upload-core.ts": {
            "lines": 99,
            "tokens": 911,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 911,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/storage-handling.ts": {
            "lines": 99,
            "tokens": 881,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 760,
            "percentage": 93.94,
            "percentageTokens": 86.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/security-scanning.ts": {
            "lines": 101,
            "tokens": 820,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 93,
            "duplicatedTokens": 796,
            "percentage": 92.08,
            "percentageTokens": 97.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/metadata-processing.ts": {
            "lines": 120,
            "tokens": 730,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 91,
            "duplicatedTokens": 730,
            "percentage": 75.83,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/file-validation.ts": {
            "lines": 99,
            "tokens": 796,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 79,
            "duplicatedTokens": 722,
            "percentage": 79.8,
            "percentageTokens": 90.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/cleanup-operations.ts": {
            "lines": 66,
            "tokens": 464,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 64,
            "duplicatedTokens": 484,
            "percentage": 96.97,
            "percentageTokens": 104.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/base/SecurityMiddleware.ts": {
            "lines": 129,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/token-validation.ts": {
            "lines": 99,
            "tokens": 796,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 90,
            "duplicatedTokens": 749,
            "percentage": 90.91,
            "percentageTokens": 94.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/session-management.ts": {
            "lines": 100,
            "tokens": 741,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 110,
            "duplicatedTokens": 838,
            "percentage": 110,
            "percentageTokens": 113.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts": {
            "lines": 101,
            "tokens": 764,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 131,
            "duplicatedTokens": 1032,
            "percentage": 129.7,
            "percentageTokens": 135.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/auth-utilities.ts": {
            "lines": 15,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/AuthMiddleware.ts": {
            "lines": 184,
            "tokens": 1281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts": {
            "lines": 119,
            "tokens": 910,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 162,
            "duplicatedTokens": 1539,
            "percentage": 136.13,
            "percentageTokens": 169.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/socket-manager-events.ts": {
            "lines": 105,
            "tokens": 1081,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 1074,
            "percentage": 93.33,
            "percentageTokens": 99.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts": {
            "lines": 109,
            "tokens": 898,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 141,
            "duplicatedTokens": 1373,
            "percentage": 129.36,
            "percentageTokens": 152.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-validation.ts": {
            "lines": 106,
            "tokens": 626,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 97,
            "duplicatedTokens": 628,
            "percentage": 91.51,
            "percentageTokens": 100.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-utilities.ts": {
            "lines": 87,
            "tokens": 406,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 140,
            "percentage": 24.14,
            "percentageTokens": 34.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts": {
            "lines": 106,
            "tokens": 996,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 114,
            "duplicatedTokens": 1206,
            "percentage": 107.55,
            "percentageTokens": 121.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-utilities.ts": {
            "lines": 95,
            "tokens": 485,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 328,
            "percentage": 44.21,
            "percentageTokens": 67.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-execution.ts": {
            "lines": 122,
            "tokens": 619,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 43,
            "duplicatedTokens": 376,
            "percentage": 35.25,
            "percentageTokens": 60.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-utilities.ts": {
            "lines": 123,
            "tokens": 763,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 65,
            "duplicatedTokens": 584,
            "percentage": 52.85,
            "percentageTokens": 76.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-management.ts": {
            "lines": 111,
            "tokens": 883,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 92,
            "duplicatedTokens": 810,
            "percentage": 82.88,
            "percentageTokens": 91.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/snapshot-operations.ts": {
            "lines": 112,
            "tokens": 802,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 85,
            "duplicatedTokens": 681,
            "percentage": 75.89,
            "percentageTokens": 84.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/scheduler-utilities.ts": {
            "lines": 75,
            "tokens": 502,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 54,
            "duplicatedTokens": 453,
            "percentage": 72,
            "percentageTokens": 90.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-monitoring.ts": {
            "lines": 110,
            "tokens": 864,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 98,
            "duplicatedTokens": 865,
            "percentage": 89.09,
            "percentageTokens": 100.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-management.ts": {
            "lines": 115,
            "tokens": 800,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 88,
            "duplicatedTokens": 690,
            "percentage": 76.52,
            "percentageTokens": 86.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-execution.ts": {
            "lines": 123,
            "tokens": 839,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 99,
            "duplicatedTokens": 846,
            "percentage": 80.49,
            "percentageTokens": 100.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-utilities.ts": {
            "lines": 120,
            "tokens": 800,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 67,
            "duplicatedTokens": 555,
            "percentage": 55.83,
            "percentageTokens": 69.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts": {
            "lines": 120,
            "tokens": 779,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 92,
            "duplicatedTokens": 671,
            "percentage": 76.67,
            "percentageTokens": 86.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/pool-management.ts": {
            "lines": 110,
            "tokens": 918,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 99,
            "duplicatedTokens": 911,
            "percentage": 90,
            "percentageTokens": 99.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/security-validation.ts": {
            "lines": 116,
            "tokens": 646,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 62,
            "duplicatedTokens": 443,
            "percentage": 53.45,
            "percentageTokens": 68.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/payload-processing.ts": {
            "lines": 109,
            "tokens": 795,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 83,
            "duplicatedTokens": 690,
            "percentage": 76.15,
            "percentageTokens": 86.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/endpoint-management.ts": {
            "lines": 107,
            "tokens": 793,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 99,
            "duplicatedTokens": 794,
            "percentage": 92.52,
            "percentageTokens": 100.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/delivery-tracking.ts": {
            "lines": 44,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/token-bucket.ts": {
            "lines": 104,
            "tokens": 736,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 158,
            "duplicatedTokens": 1079,
            "percentage": 151.92,
            "percentageTokens": 146.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/testing/test-framework/test-configuration.ts": {
            "lines": 6,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/testing/test-framework/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/security/credential-manager/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/oauth/oauth2-handler/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/monitoring/health-monitor/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/gmail-core.ts": {
            "lines": 99,
            "tokens": 997,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 964,
            "percentage": 93.94,
            "percentageTokens": 96.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/auth-integration.ts": {
            "lines": 78,
            "tokens": 503,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 69,
            "duplicatedTokens": 507,
            "percentage": 88.46,
            "percentageTokens": 100.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/registry-utilities.ts": {
            "lines": 20,
            "tokens": 134,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 130,
            "percentage": 90,
            "percentageTokens": 97.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/lifecycle-coordination.ts": {
            "lines": 107,
            "tokens": 573,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 91,
            "duplicatedTokens": 560,
            "percentage": 85.05,
            "percentageTokens": 97.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/integration-discovery.ts": {
            "lines": 107,
            "tokens": 738,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 90,
            "duplicatedTokens": 705,
            "percentage": 84.11,
            "percentageTokens": 95.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/health-monitoring.ts": {
            "lines": 113,
            "tokens": 698,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 67,
            "duplicatedTokens": 547,
            "percentage": 59.29,
            "percentageTokens": 78.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/dependency-resolution.ts": {
            "lines": 112,
            "tokens": 697,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 66,
            "duplicatedTokens": 512,
            "percentage": 58.93,
            "percentageTokens": 73.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts": {
            "lines": 111,
            "tokens": 678,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 82,
            "duplicatedTokens": 603,
            "percentage": 73.87,
            "percentageTokens": 88.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/message-routing.ts": {
            "lines": 117,
            "tokens": 723,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 65,
            "duplicatedTokens": 495,
            "percentage": 55.56,
            "percentageTokens": 68.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-utilities.ts": {
            "lines": 57,
            "tokens": 414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 57,
            "duplicatedTokens": 414,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-handlers.ts": {
            "lines": 115,
            "tokens": 767,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 83,
            "duplicatedTokens": 675,
            "percentage": 72.17,
            "percentageTokens": 88.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/validation-framework.ts": {
            "lines": 113,
            "tokens": 666,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 85,
            "duplicatedTokens": 591,
            "percentage": 75.22,
            "percentageTokens": 88.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/metadata-handling.ts": {
            "lines": 20,
            "tokens": 128,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 82,
            "percentage": 70,
            "percentageTokens": 64.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/lifecycle-hooks.ts": {
            "lines": 122,
            "tokens": 642,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 81,
            "duplicatedTokens": 573,
            "percentage": 66.39,
            "percentageTokens": 89.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/helper-utilities.ts": {
            "lines": 125,
            "tokens": 570,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 229,
            "percentage": 23.2,
            "percentageTokens": 40.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/error-management.ts": {
            "lines": 119,
            "tokens": 677,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 68,
            "duplicatedTokens": 511,
            "percentage": 57.14,
            "percentageTokens": 75.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/core-integration.ts": {
            "lines": 99,
            "tokens": 743,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 95,
            "duplicatedTokens": 682,
            "percentage": 95.96,
            "percentageTokens": 91.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/validation-rules.ts": {
            "lines": 105,
            "tokens": 974,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/schema-utilities.ts": {
            "lines": 98,
            "tokens": 709,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts": {
            "lines": 99,
            "tokens": 870,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 66,
            "duplicatedTokens": 596,
            "percentage": 66.67,
            "percentageTokens": 68.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/validation-methods.ts": {
            "lines": 118,
            "tokens": 654,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 67,
            "duplicatedTokens": 477,
            "percentage": 56.78,
            "percentageTokens": 72.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/utility-helpers.ts": {
            "lines": 42,
            "tokens": 318,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 42,
            "duplicatedTokens": 322,
            "percentage": 100,
            "percentageTokens": 101.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/lifecycle-management.ts": {
            "lines": 116,
            "tokens": 771,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 83,
            "duplicatedTokens": 712,
            "percentage": 71.55,
            "percentageTokens": 92.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/error-handling.ts": {
            "lines": 114,
            "tokens": 697,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 63,
            "duplicatedTokens": 503,
            "percentage": 55.26,
            "percentageTokens": 72.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/token-validation.ts": {
            "lines": 125,
            "tokens": 641,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 210,
            "percentage": 17.6,
            "percentageTokens": 32.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/token-management.ts": {
            "lines": 101,
            "tokens": 695,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 96,
            "duplicatedTokens": 698,
            "percentage": 95.05,
            "percentageTokens": 100.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/session-handling.ts": {
            "lines": 103,
            "tokens": 671,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 90,
            "duplicatedTokens": 610,
            "percentage": 87.38,
            "percentageTokens": 90.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/authorization-flow.ts": {
            "lines": 100,
            "tokens": 671,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 691,
            "percentage": 99,
            "percentageTokens": 102.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/vector-extensions.ts": {
            "lines": 116,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/transaction-management.ts": {
            "lines": 76,
            "tokens": 426,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 66,
            "duplicatedTokens": 417,
            "percentage": 86.84,
            "percentageTokens": 97.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/query-operations.ts": {
            "lines": 143,
            "tokens": 438,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 124,
            "percentage": 6.99,
            "percentageTokens": 28.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/schemas/workflow.schema.ts": {
            "lines": 95,
            "tokens": 1097,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/schemas/user.schema.ts": {
            "lines": 158,
            "tokens": 1766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/utility-methods.ts": {
            "lines": 74,
            "tokens": 517,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 65,
            "duplicatedTokens": 506,
            "percentage": 87.84,
            "percentageTokens": 97.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/error-handling.ts": {
            "lines": 113,
            "tokens": 629,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 63,
            "duplicatedTokens": 404,
            "percentage": 55.75,
            "percentageTokens": 64.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts": {
            "lines": 183,
            "tokens": 1879,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 163,
            "duplicatedTokens": 1586,
            "percentage": 89.07,
            "percentageTokens": 84.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts": {
            "lines": 223,
            "tokens": 2231,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 163,
            "duplicatedTokens": 1586,
            "percentage": 73.09,
            "percentageTokens": 71.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/node-templates.ts": {
            "lines": 98,
            "tokens": 143,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 67,
            "percentage": 6.12,
            "percentageTokens": 46.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/file-generation.ts": {
            "lines": 99,
            "tokens": 203,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 203,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/credential-templates.ts": {
            "lines": 56,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/command-handlers.ts": {
            "lines": 98,
            "tokens": 791,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 92,
            "duplicatedTokens": 778,
            "percentage": 93.88,
            "percentageTokens": 98.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts": {
            "lines": 199,
            "tokens": 1605,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 162,
            "percentage": 7.04,
            "percentageTokens": 10.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts": {
            "lines": 116,
            "tokens": 1238,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 214,
            "percentage": 18.97,
            "percentageTokens": 17.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/monitoring/base-monitoring-repository.ts": {
            "lines": 69,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/theme.ts": {
            "lines": 44,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/responsive.ts": {
            "lines": 28,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/index.ts": {
            "lines": 12,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/classNames.ts": {
            "lines": 31,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/typography.ts": {
            "lines": 42,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/spacing.ts": {
            "lines": 27,
            "tokens": 158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/index.ts": {
            "lines": 13,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/colors.ts": {
            "lines": 50,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/themes/index.ts": {
            "lines": 8,
            "tokens": 23,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/themes/gmailTheme.ts": {
            "lines": 249,
            "tokens": 1217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/reverseTypeAdapters.ts": {
            "lines": 139,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodeVersioning.ts": {
            "lines": 475,
            "tokens": 3745,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/enhancedPropertyEvaluator.ts": {
            "lines": 598,
            "tokens": 4588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/workflow.ts": {
            "lines": 128,
            "tokens": 1048,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security.ts": {
            "lines": 674,
            "tokens": 4915,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/nodeTypes.ts": {
            "lines": 77,
            "tokens": 572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/node.ts": {
            "lines": 4,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/debugging.ts": {
            "lines": 220,
            "tokens": 1842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts": {
            "lines": 395,
            "tokens": 2436,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 366,
            "percentage": 15.7,
            "percentageTokens": 15.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/containerNodes.ts": {
            "lines": 262,
            "tokens": 1844,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/collaboration.ts": {
            "lines": 582,
            "tokens": 3900,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/authentication.ts": {
            "lines": 445,
            "tokens": 3340,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 154,
            "percentage": 5.17,
            "percentageTokens": 4.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/rbacStore.ts": {
            "lines": 558,
            "tokens": 4777,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanWorkflowStore.ts": {
            "lines": 551,
            "tokens": 4932,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 400,
            "percentage": 9.44,
            "percentageTokens": 8.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/integrationStore.ts": {
            "lines": 154,
            "tokens": 1386,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/enhancedExecutionStore.ts": {
            "lines": 540,
            "tokens": 4363,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/credentialStore.ts": {
            "lines": 185,
            "tokens": 1797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/collaborationStore.ts": {
            "lines": 366,
            "tokens": 3347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts": {
            "lines": 178,
            "tokens": 1480,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 186,
            "percentage": 13.48,
            "percentageTokens": 12.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/analyticsStore.ts": {
            "lines": 383,
            "tokens": 3630,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/aiAssistantStore.ts": {
            "lines": 469,
            "tokens": 3556,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowTemplates.ts": {
            "lines": 834,
            "tokens": 6376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowScheduler.ts": {
            "lines": 897,
            "tokens": 7219,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 111,
            "percentage": 1.34,
            "percentageTokens": 1.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowOptimizer.ts": {
            "lines": 750,
            "tokens": 6256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/securityService.ts": {
            "lines": 856,
            "tokens": 6558,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbacService.ts": {
            "lines": 579,
            "tokens": 4394,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performanceMonitor.ts": {
            "lines": 588,
            "tokens": 4661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhancedDebuggingService.ts": {
            "lines": 570,
            "tokens": 4406,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 210,
            "percentage": 4.21,
            "percentageTokens": 4.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costOptimizer.ts": {
            "lines": 656,
            "tokens": 5459,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerExecutionService.ts": {
            "lines": 630,
            "tokens": 4990,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 68,
            "duplicatedTokens": 444,
            "percentage": 10.79,
            "percentageTokens": 8.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerConnectionValidator.ts": {
            "lines": 491,
            "tokens": 3215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/collaborationService.ts": {
            "lines": 464,
            "tokens": 3453,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/auditService.ts": {
            "lines": 736,
            "tokens": 5666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiOrchestrationService.ts": {
            "lines": 942,
            "tokens": 7681,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiModelService.ts": {
            "lines": 904,
            "tokens": 7405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiAssistantService.ts": {
            "lines": 671,
            "tokens": 5173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedTriggerSystem.ts": {
            "lines": 998,
            "tokens": 8510,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 111,
            "percentage": 1.2,
            "percentageTokens": 1.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts": {
            "lines": 943,
            "tokens": 7689,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 155,
            "duplicatedTokens": 978,
            "percentage": 16.44,
            "percentageTokens": 12.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/PerformanceService.ts": {
            "lines": 568,
            "tokens": 4120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/LoggingService.ts": {
            "lines": 499,
            "tokens": 3312,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/ConfigService.ts": {
            "lines": 330,
            "tokens": 2216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts": {
            "lines": 316,
            "tokens": 3702,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 252,
            "percentage": 5.06,
            "percentageTokens": 6.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/CredentialSchemas.ts": {
            "lines": 276,
            "tokens": 3007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/AuthSchemas.ts": {
            "lines": 263,
            "tokens": 2725,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/types.ts": {
            "lines": 449,
            "tokens": 3117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts": {
            "lines": 731,
            "tokens": 5547,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 584,
            "percentage": 6.02,
            "percentageTokens": 10.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/index.ts": {
            "lines": 13,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/constants/categories.ts": {
            "lines": 93,
            "tokens": 867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/WorkflowApiService.ts": {
            "lines": 488,
            "tokens": 3072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/CredentialApiService.ts": {
            "lines": 635,
            "tokens": 4064,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts": {
            "lines": 547,
            "tokens": 3544,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 440,
            "percentage": 9.87,
            "percentageTokens": 12.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/ApiClient.ts": {
            "lines": 428,
            "tokens": 3205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/intelligentAutoConnect.ts": {
            "lines": 327,
            "tokens": 2693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/containerFactory.ts": {
            "lines": 361,
            "tokens": 2797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/types.ts": {
            "lines": 375,
            "tokens": 2754,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/nodeUiRegistry.ts": {
            "lines": 252,
            "tokens": 1480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ComponentFactory.ts": {
            "lines": 376,
            "tokens": 2953,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts": {
            "lines": 281,
            "tokens": 2322,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 192,
            "percentage": 7.83,
            "percentageTokens": 8.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useScrollAnimations.ts": {
            "lines": 258,
            "tokens": 2144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useGmailCredential.ts": {
            "lines": 58,
            "tokens": 409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useCredentialForm.ts": {
            "lines": 191,
            "tokens": 1516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useContainerInteractions.ts": {
            "lines": 401,
            "tokens": 3121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts": {
            "lines": 251,
            "tokens": 1818,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 120,
            "duplicatedTokens": 812,
            "percentage": 47.81,
            "percentageTokens": 44.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/PermissionService.ts": {
            "lines": 116,
            "tokens": 819,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 220,
            "percentage": 25.86,
            "percentageTokens": 26.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/OperationalTransformService.ts": {
            "lines": 156,
            "tokens": 1115,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 203,
            "percentage": 19.23,
            "percentageTokens": 18.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/PerformanceMonitor.ts": {
            "lines": 414,
            "tokens": 3472,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 102,
            "percentage": 3.14,
            "percentageTokens": 2.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/HealthCheck.ts": {
            "lines": 497,
            "tokens": 4017,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 102,
            "percentage": 2.62,
            "percentageTokens": 2.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/ErrorTracker.ts": {
            "lines": 547,
            "tokens": 4728,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/logging/Logger.ts": {
            "lines": 350,
            "tokens": 2846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/EmbeddingsService.ts": {
            "lines": 126,
            "tokens": 893,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 110,
            "percentage": 11.9,
            "percentageTokens": 12.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts": {
            "lines": 600,
            "tokens": 4874,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 194,
            "percentage": 5.33,
            "percentageTokens": 3.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/DatabaseService.ts": {
            "lines": 126,
            "tokens": 893,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 203,
            "percentage": 23.81,
            "percentageTokens": 22.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/CursorTrackingService.ts": {
            "lines": 206,
            "tokens": 1485,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 59,
            "duplicatedTokens": 419,
            "percentage": 28.64,
            "percentageTokens": 28.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts": {
            "lines": 266,
            "tokens": 1929,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 89,
            "duplicatedTokens": 639,
            "percentage": 33.46,
            "percentageTokens": 33.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/testing-routes.ts": {
            "lines": 62,
            "tokens": 372,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 295,
            "percentage": 64.52,
            "percentageTokens": 79.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/profiling-routes.ts": {
            "lines": 108,
            "tokens": 822,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 89,
            "duplicatedTokens": 807,
            "percentage": 82.41,
            "percentageTokens": 98.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/error-routes.ts": {
            "lines": 104,
            "tokens": 739,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 92,
            "duplicatedTokens": 727,
            "percentage": 88.46,
            "percentageTokens": 98.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/config-routes.ts": {
            "lines": 107,
            "tokens": 845,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 79,
            "duplicatedTokens": 749,
            "percentage": 73.83,
            "percentageTokens": 88.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/workflow/workflow-middleware.ts": {
            "lines": 134,
            "tokens": 869,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 78,
            "duplicatedTokens": 645,
            "percentage": 58.21,
            "percentageTokens": 74.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/workflow/workflow-methods.ts": {
            "lines": 50,
            "tokens": 302,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 183,
            "percentage": 34,
            "percentageTokens": 60.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/user/user-middleware.ts": {
            "lines": 103,
            "tokens": 664,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 48,
            "duplicatedTokens": 398,
            "percentage": 46.6,
            "percentageTokens": 59.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/user/user-methods.ts": {
            "lines": 68,
            "tokens": 644,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 68,
            "duplicatedTokens": 644,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/organization/organization-middleware.ts": {
            "lines": 117,
            "tokens": 602,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 111,
            "percentage": 13.68,
            "percentageTokens": 18.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/operation/operation-middleware.ts": {
            "lines": 74,
            "tokens": 519,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/operation/operation-methods.ts": {
            "lines": 107,
            "tokens": 798,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 74,
            "duplicatedTokens": 663,
            "percentage": 69.16,
            "percentageTokens": 83.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-schema.ts": {
            "lines": 99,
            "tokens": 941,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 941,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-middleware.ts": {
            "lines": 131,
            "tokens": 985,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 724,
            "percentage": 54.2,
            "percentageTokens": 73.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-methods.ts": {
            "lines": 7,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-middleware.ts": {
            "lines": 121,
            "tokens": 881,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 79,
            "duplicatedTokens": 725,
            "percentage": 65.29,
            "percentageTokens": 82.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-methods.ts": {
            "lines": 80,
            "tokens": 648,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 68,
            "duplicatedTokens": 590,
            "percentage": 85,
            "percentageTokens": 91.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-reactions.ts": {
            "lines": 89,
            "tokens": 661,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 369,
            "percentage": 48.31,
            "percentageTokens": 55.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-middleware.ts": {
            "lines": 75,
            "tokens": 471,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-methods.ts": {
            "lines": 43,
            "tokens": 367,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 31,
            "duplicatedTokens": 277,
            "percentage": 72.09,
            "percentageTokens": 75.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/collaborationsession/collaboration-middleware.ts": {
            "lines": 109,
            "tokens": 724,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 327,
            "percentage": 32.11,
            "percentageTokens": 45.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/security-middleware.ts": {
            "lines": 99,
            "tokens": 696,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 94,
            "duplicatedTokens": 684,
            "percentage": 94.95,
            "percentageTokens": 98.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/monitoring-utilities.ts": {
            "lines": 85,
            "tokens": 562,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 80,
            "duplicatedTokens": 543,
            "percentage": 94.12,
            "percentageTokens": 96.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts": {
            "lines": 100,
            "tokens": 771,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 111,
            "duplicatedTokens": 984,
            "percentage": 111,
            "percentageTokens": 127.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/auth-utilities.ts": {
            "lines": 85,
            "tokens": 573,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 531,
            "percentage": 72.94,
            "percentageTokens": 92.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/access-control.ts": {
            "lines": 100,
            "tokens": 747,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 82,
            "duplicatedTokens": 714,
            "percentage": 82,
            "percentageTokens": 95.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/workers/worker-manager.ts": {
            "lines": 10,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/workflow-types.ts": {
            "lines": 85,
            "tokens": 788,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/node-context-types.ts": {
            "lines": 77,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/event-trigger-types.ts": {
            "lines": 101,
            "tokens": 698,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/queue/queue-manager.ts": {
            "lines": 16,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/execution/execution-engine.ts": {
            "lines": 16,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/events/event-bus.ts": {
            "lines": 9,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts": {
            "lines": 390,
            "tokens": 2924,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 270,
            "duplicatedTokens": 2077,
            "percentage": 69.23,
            "percentageTokens": 71.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts": {
            "lines": 354,
            "tokens": 2765,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 209,
            "duplicatedTokens": 1648,
            "percentage": 59.04,
            "percentageTokens": 59.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/ValidationMiddleware.ts": {
            "lines": 314,
            "tokens": 2194,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 94,
            "percentage": 3.82,
            "percentageTokens": 4.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/FileUploadMiddleware.ts": {
            "lines": 191,
            "tokens": 1413,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/styles.ts": {
            "lines": 222,
            "tokens": 1940,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/types/component.ts": {
            "lines": 282,
            "tokens": 925,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/usePrevious.ts": {
            "lines": 13,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useEventListener.ts": {
            "lines": 34,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useDisclosure.ts": {
            "lines": 39,
            "tokens": 293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useDebounce.ts": {
            "lines": 19,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useAsync.ts": {
            "lines": 65,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/utils/logger.ts": {
            "lines": 4,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/errors/application-error.ts": {
            "lines": 8,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/constants/app-constants.ts": {
            "lines": 4,
            "tokens": 32,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/versioning.ts": {
            "lines": 48,
            "tokens": 313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/validation.ts": {
            "lines": 36,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts": {
            "lines": 507,
            "tokens": 4275,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 364,
            "duplicatedTokens": 3030,
            "percentage": 71.79,
            "percentageTokens": 70.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/templates.ts": {
            "lines": 95,
            "tokens": 883,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 184,
            "percentage": 18.95,
            "percentageTokens": 20.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/queue.ts": {
            "lines": 127,
            "tokens": 1068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/channels.ts": {
            "lines": 117,
            "tokens": 935,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/worker.ts": {
            "lines": 42,
            "tokens": 277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/queue.ts": {
            "lines": 35,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts": {
            "lines": 237,
            "tokens": 2121,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 150,
            "duplicatedTokens": 1317,
            "percentage": 63.29,
            "percentageTokens": 62.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/compliance.ts": {
            "lines": 144,
            "tokens": 1335,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 95,
            "percentage": 8.33,
            "percentageTokens": 7.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/reports.ts": {
            "lines": 128,
            "tokens": 1157,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts": {
            "lines": 235,
            "tokens": 2132,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 229,
            "duplicatedTokens": 2091,
            "percentage": 97.45,
            "percentageTokens": 98.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/collectors.ts": {
            "lines": 145,
            "tokens": 1058,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter/distributed-limiter.ts": {
            "lines": 8,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts": {
            "lines": 696,
            "tokens": 5135,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 567,
            "duplicatedTokens": 4247,
            "percentage": 81.47,
            "percentageTokens": 82.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware.ts": {
            "lines": 366,
            "tokens": 2797,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 254,
            "duplicatedTokens": 1864,
            "percentage": 69.4,
            "percentageTokens": 66.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware.ts": {
            "lines": 349,
            "tokens": 2531,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 231,
            "duplicatedTokens": 1624,
            "percentage": 66.19,
            "percentageTokens": 64.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts": {
            "lines": 665,
            "tokens": 5512,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 613,
            "duplicatedTokens": 5149,
            "percentage": 92.18,
            "percentageTokens": 93.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts": {
            "lines": 415,
            "tokens": 3147,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 279,
            "duplicatedTokens": 2197,
            "percentage": 67.23,
            "percentageTokens": 69.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/jwt-session/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/validation.example.ts": {
            "lines": 164,
            "tokens": 1154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/security-headers.example.ts": {
            "lines": 190,
            "tokens": 1341,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/rate-limit.example.ts": {
            "lines": 90,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/auth.example.ts": {
            "lines": 187,
            "tokens": 1352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/encryption.service/encryption.serviceService.ts": {
            "lines": 368,
            "tokens": 1708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/audit-logger/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts": {
            "lines": 556,
            "tokens": 4981,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 210,
            "duplicatedTokens": 2197,
            "percentage": 37.77,
            "percentageTokens": 44.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts": {
            "lines": 574,
            "tokens": 4399,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 325,
            "duplicatedTokens": 2777,
            "percentage": 56.62,
            "percentageTokens": 63.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts": {
            "lines": 279,
            "tokens": 1826,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 85,
            "duplicatedTokens": 704,
            "percentage": 30.47,
            "percentageTokens": 38.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts": {
            "lines": 391,
            "tokens": 3305,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 242,
            "duplicatedTokens": 2075,
            "percentage": 61.89,
            "percentageTokens": 62.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts": {
            "lines": 460,
            "tokens": 3789,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 339,
            "duplicatedTokens": 2854,
            "percentage": 73.7,
            "percentageTokens": 75.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts": {
            "lines": 497,
            "tokens": 4227,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 258,
            "duplicatedTokens": 2137,
            "percentage": 51.91,
            "percentageTokens": 50.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/execution-engine/src/workflow-execution-engine.ts": {
            "lines": 615,
            "tokens": 4846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/event-bus/src/middleware.ts": {
            "lines": 43,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/event-bus/src/handlers.ts": {
            "lines": 24,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/event-bus/src/distributed-event-bus.ts": {
            "lines": 630,
            "tokens": 5270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts": {
            "lines": 434,
            "tokens": 3258,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 254,
            "duplicatedTokens": 2042,
            "percentage": 58.53,
            "percentageTokens": 62.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter.ts": {
            "lines": 451,
            "tokens": 3369,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 733,
            "percentage": 21.73,
            "percentageTokens": 21.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/testing/test-framework.ts": {
            "lines": 506,
            "tokens": 3771,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/security/credential-manager.ts": {
            "lines": 568,
            "tokens": 4149,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/oauth/oauth2-handler.ts": {
            "lines": 379,
            "tokens": 2881,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 92,
            "percentage": 3.69,
            "percentageTokens": 3.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/monitoring/health-monitor.ts": {
            "lines": 456,
            "tokens": 3464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/index/utility-exports.ts": {
            "lines": 64,
            "tokens": 410,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/index/integration-exports.ts": {
            "lines": 100,
            "tokens": 585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration.ts": {
            "lines": 269,
            "tokens": 2351,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 162,
            "duplicatedTokens": 1471,
            "percentage": 60.22,
            "percentageTokens": 62.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts": {
            "lines": 518,
            "tokens": 3767,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 332,
            "duplicatedTokens": 2454,
            "percentage": 64.09,
            "percentageTokens": 65.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts": {
            "lines": 458,
            "tokens": 3351,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 287,
            "duplicatedTokens": 2187,
            "percentage": 62.66,
            "percentageTokens": 65.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts": {
            "lines": 519,
            "tokens": 3477,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 372,
            "duplicatedTokens": 2668,
            "percentage": 71.68,
            "percentageTokens": 76.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts": {
            "lines": 442,
            "tokens": 3164,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 265,
            "duplicatedTokens": 2129,
            "percentage": 59.95,
            "percentageTokens": 67.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts": {
            "lines": 501,
            "tokens": 3545,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 321,
            "duplicatedTokens": 2301,
            "percentage": 64.07,
            "percentageTokens": 64.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/testing-benchmarking.ts": {
            "lines": 115,
            "tokens": 830,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 78,
            "duplicatedTokens": 663,
            "percentage": 67.83,
            "percentageTokens": 79.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/template-utilities.ts": {
            "lines": 60,
            "tokens": 406,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 227,
            "percentage": 41.67,
            "percentageTokens": 55.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/performance-analysis.ts": {
            "lines": 111,
            "tokens": 739,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 737,
            "percentage": 88.29,
            "percentageTokens": 99.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/dev-tools-core.ts": {
            "lines": 98,
            "tokens": 806,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 806,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/variants.ts": {
            "lines": 102,
            "tokens": 604,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/cn.ts": {
            "lines": 30,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/tokens/spacing.ts": {
            "lines": 59,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/tokens/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/hooks/use-state.ts": {
            "lines": 2,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/hooks/use-rbac-store.ts": {
            "lines": 2,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/vector-types.ts": {
            "lines": 12,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/query-types.ts": {
            "lines": 99,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/entity-schemas.ts": {
            "lines": 104,
            "tokens": 1224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection.ts": {
            "lines": 368,
            "tokens": 2332,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 76,
            "duplicatedTokens": 541,
            "percentage": 20.65,
            "percentageTokens": 23.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts": {
            "lines": 267,
            "tokens": 1965,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 128,
            "duplicatedTokens": 910,
            "percentage": 47.94,
            "percentageTokens": 46.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-service/database-serviceService.ts": {
            "lines": 448,
            "tokens": 2078,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/hybrid-manager.ts": {
            "lines": 100,
            "tokens": 667,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 101,
            "duplicatedTokens": 668,
            "percentage": 101,
            "percentageTokens": 100.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/health-monitoring.ts": {
            "lines": 12,
            "tokens": 88,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 91,
            "percentage": 100,
            "percentageTokens": 103.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/connection-orchestration.ts": {
            "lines": 111,
            "tokens": 640,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 46,
            "duplicatedTokens": 375,
            "percentage": 41.44,
            "percentageTokens": 58.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/validation/validator.ts": {
            "lines": 117,
            "tokens": 1015,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/validation.ts": {
            "lines": 214,
            "tokens": 1641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/logger.ts": {
            "lines": 121,
            "tokens": 1004,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/errors.ts": {
            "lines": 58,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/use-cases/Map.use-case.ts": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/use-cases/If.use-case.ts": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/use-cases/Filter.use-case.ts": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/use-cases/Error.use-case.ts": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/use-cases/Catch.use-case.ts": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/types/repository.types.ts": {
            "lines": 94,
            "tokens": 584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/service/base-service.ts": {
            "lines": 251,
            "tokens": 1924,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 248,
            "percentage": 7.97,
            "percentageTokens": 12.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/service/base-service.interface.ts": {
            "lines": 90,
            "tokens": 488,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/cached-repository.ts": {
            "lines": 176,
            "tokens": 1433,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/base-repository.ts": {
            "lines": 135,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/base-repository.interface.ts": {
            "lines": 78,
            "tokens": 395,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/interfaces/index.ts": {
            "lines": 48,
            "tokens": 632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/events/event-bus.ts": {
            "lines": 69,
            "tokens": 522,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts": {
            "lines": 139,
            "tokens": 1166,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 206,
            "percentage": 15.83,
            "percentageTokens": 17.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts": {
            "lines": 136,
            "tokens": 1286,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 240,
            "percentage": 16.18,
            "percentageTokens": 18.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts": {
            "lines": 174,
            "tokens": 1312,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 128,
            "duplicatedTokens": 1080,
            "percentage": 73.56,
            "percentageTokens": 82.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/cache/cache.interface.ts": {
            "lines": 28,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/base/BaseService.ts": {
            "lines": 156,
            "tokens": 1272,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/base/BaseMiddleware.ts": {
            "lines": 122,
            "tokens": 778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/constants/src/index/node-providers.ts": {
            "lines": 56,
            "tokens": 330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/workflow.ts": {
            "lines": 17,
            "tokens": 136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/start.ts": {
            "lines": 9,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts": {
            "lines": 457,
            "tokens": 2131,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 197,
            "duplicatedTokens": 1048,
            "percentage": 43.11,
            "percentageTokens": 49.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/dev.ts": {
            "lines": 26,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/deploy.ts": {
            "lines": 6,
            "tokens": 68,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/create.ts": {
            "lines": 20,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/build.ts": {
            "lines": 16,
            "tokens": 158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/auth.ts": {
            "lines": 5,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/validation-extensions.ts": {
            "lines": 44,
            "tokens": 363,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 42,
            "duplicatedTokens": 360,
            "percentage": 95.45,
            "percentageTokens": 99.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/middleware-handlers.ts": {
            "lines": 107,
            "tokens": 993,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 94,
            "duplicatedTokens": 957,
            "percentage": 87.85,
            "percentageTokens": 96.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/api-response-types.ts": {
            "lines": 99,
            "tokens": 838,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 838,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/two-factor.ts": {
            "lines": 147,
            "tokens": 1046,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/password-validator.ts": {
            "lines": 240,
            "tokens": 2111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/audit-logger.ts": {
            "lines": 108,
            "tokens": 936,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/types/rbac-security-types.ts": {
            "lines": 99,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/types/auth-provider-types.ts": {
            "lines": 50,
            "tokens": 308,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/strategies/jwt-strategy.ts": {
            "lines": 40,
            "tokens": 347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/strategies/basic-auth-strategy.ts": {
            "lines": 55,
            "tokens": 446,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/strategies/api-key-strategy.ts": {
            "lines": 57,
            "tokens": 493,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/providers/saml-provider.ts": {
            "lines": 48,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/providers/oauth-provider.ts": {
            "lines": 145,
            "tokens": 1031,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/providers/ldap-provider.ts": {
            "lines": 53,
            "tokens": 371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/session-middleware.ts": {
            "lines": 142,
            "tokens": 1256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts": {
            "lines": 80,
            "tokens": 778,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 256,
            "percentage": 22.5,
            "percentageTokens": 32.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/jwt-middleware.ts": {
            "lines": 67,
            "tokens": 612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/workflow.types/workflow-schemas.ts": {
            "lines": 5,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/auth.types/organization-types.ts": {
            "lines": 99,
            "tokens": 673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/auth.types/auth-requests.ts": {
            "lines": 94,
            "tokens": 913,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-gateway/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/tags.ts": {
            "lines": 46,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/spec-generator.ts": {
            "lines": 47,
            "tokens": 411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/security.ts": {
            "lines": 28,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/schemas.ts": {
            "lines": 110,
            "tokens": 693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/responses.ts": {
            "lines": 85,
            "tokens": 469,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/parameters.ts": {
            "lines": 85,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/info.ts": {
            "lines": 76,
            "tokens": 175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/workflows.ts": {
            "lines": 428,
            "tokens": 885,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/users.ts": {
            "lines": 76,
            "tokens": 306,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/nodes.ts": {
            "lines": 77,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/index.ts": {
            "lines": 52,
            "tokens": 561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/auth.ts": {
            "lines": 73,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/analytics.ts": {
            "lines": 46,
            "tokens": 236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/ai.ts": {
            "lines": 47,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/validation.ts": {
            "lines": 90,
            "tokens": 948,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 90,
            "percentage": 10,
            "percentageTokens": 9.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/logging.ts": {
            "lines": 47,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/error-handler.ts": {
            "lines": 39,
            "tokens": 334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/auth.ts": {
            "lines": 50,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/vector-store/vector-store.ts": {
            "lines": 326,
            "tokens": 2353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/utils/tokenizer.ts": {
            "lines": 125,
            "tokens": 979,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/utils/text-splitter.ts": {
            "lines": 121,
            "tokens": 1041,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/utils/prompt-template.ts": {
            "lines": 156,
            "tokens": 1486,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-embedding-node.ts": {
            "lines": 26,
            "tokens": 244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-completion-node.ts": {
            "lines": 19,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-classification-node.ts": {
            "lines": 37,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-chat-node.ts": {
            "lines": 27,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/llm/openai-provider.ts": {
            "lines": 188,
            "tokens": 1633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/llm/llm-manager.ts": {
            "lines": 171,
            "tokens": 1481,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/llm/anthropic-provider.ts": {
            "lines": 155,
            "tokens": 1409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/base/ai-registry.ts": {
            "lines": 134,
            "tokens": 962,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/base/ai-provider.ts": {
            "lines": 103,
            "tokens": 684,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/string-utils.ts": {
            "lines": 56,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/logging-utils.ts": {
            "lines": 47,
            "tokens": 397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/json-utils.ts": {
            "lines": 33,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/index.ts": {
            "lines": 9,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/date-utils.ts": {
            "lines": 47,
            "tokens": 406,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/conditional-utils.ts": {
            "lines": 20,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/array-utils.ts": {
            "lines": 48,
            "tokens": 583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/optimization-utils/file-consolidator.ts": {
            "lines": 47,
            "tokens": 338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/optimization-utils/deduplication-helper.ts": {
            "lines": 41,
            "tokens": 355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/interfaces.ts": {
            "lines": 26,
            "tokens": 285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/index.ts": {
            "lines": 8,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-use-cases.ts": {
            "lines": 61,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-service.ts": {
            "lines": 88,
            "tokens": 843,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-repository.ts": {
            "lines": 52,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-controller.ts": {
            "lines": 78,
            "tokens": 768,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/core/src/schemas/index.ts": {
            "lines": 75,
            "tokens": 782,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 71,
            "percentage": 8,
            "percentageTokens": 9.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/validation.ts": {
            "lines": 75,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/response.ts": {
            "lines": 159,
            "tokens": 1067,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/logger.ts": {
            "lines": 67,
            "tokens": 529,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/encryption.ts": {
            "lines": 83,
            "tokens": 588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/asyncHandler.ts": {
            "lines": 93,
            "tokens": 708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/workflow.ts": {
            "lines": 61,
            "tokens": 391,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 99,
            "percentage": 18.03,
            "percentageTokens": 25.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/express.ts": {
            "lines": 41,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/common.ts": {
            "lines": 74,
            "tokens": 477,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/VersionControlService.ts": {
            "lines": 539,
            "tokens": 4125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/PermissionService.ts": {
            "lines": 318,
            "tokens": 1859,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/OperationalTransformService.ts": {
            "lines": 484,
            "tokens": 3944,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/EmbeddingsService.ts": {
            "lines": 330,
            "tokens": 2205,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 222,
            "percentage": 9.7,
            "percentageTokens": 10.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/DatabaseService.ts": {
            "lines": 214,
            "tokens": 999,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts": {
            "lines": 545,
            "tokens": 4079,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 56,
            "duplicatedTokens": 598,
            "percentage": 10.28,
            "percentageTokens": 14.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/CollaborationService.ts": {
            "lines": 657,
            "tokens": 4899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts": {
            "lines": 458,
            "tokens": 3770,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 300,
            "duplicatedTokens": 2578,
            "percentage": 65.5,
            "percentageTokens": 68.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Workflow.ts": {
            "lines": 231,
            "tokens": 2058,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 95,
            "duplicatedTokens": 828,
            "percentage": 41.13,
            "percentageTokens": 40.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/User.ts": {
            "lines": 268,
            "tokens": 2154,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 116,
            "duplicatedTokens": 1042,
            "percentage": 43.28,
            "percentageTokens": 48.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Organization.ts": {
            "lines": 233,
            "tokens": 1721,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 111,
            "percentage": 6.87,
            "percentageTokens": 6.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Operation.ts": {
            "lines": 288,
            "tokens": 2115,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 74,
            "duplicatedTokens": 663,
            "percentage": 25.69,
            "percentageTokens": 31.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Execution.ts": {
            "lines": 207,
            "tokens": 1975,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 170,
            "duplicatedTokens": 1665,
            "percentage": 82.13,
            "percentageTokens": 84.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Credentials.ts": {
            "lines": 278,
            "tokens": 2260,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 147,
            "duplicatedTokens": 1315,
            "percentage": 52.88,
            "percentageTokens": 58.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Comment.ts": {
            "lines": 342,
            "tokens": 2409,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 74,
            "duplicatedTokens": 646,
            "percentage": 21.64,
            "percentageTokens": 26.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/CollaborationSession.ts": {
            "lines": 257,
            "tokens": 1979,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 327,
            "percentage": 13.62,
            "percentageTokens": 16.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/errorHandlers.ts": {
            "lines": 107,
            "tokens": 1051,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts": {
            "lines": 485,
            "tokens": 3599,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 224,
            "duplicatedTokens": 1571,
            "percentage": 46.19,
            "percentageTokens": 43.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts": {
            "lines": 380,
            "tokens": 2862,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 231,
            "duplicatedTokens": 2013,
            "percentage": 60.79,
            "percentageTokens": 70.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IService.ts": {
            "lines": 50,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IRepository.ts": {
            "lines": 18,
            "tokens": 221,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IController.ts": {
            "lines": 31,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/nodeTypes.ts": {
            "lines": 47,
            "tokens": 262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/httpStatus.ts": {
            "lines": 41,
            "tokens": 299,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/execution.ts": {
            "lines": 32,
            "tokens": 202,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/database.ts": {
            "lines": 40,
            "tokens": 360,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/postgresql.ts": {
            "lines": 103,
            "tokens": 800,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/index.ts": {
            "lines": 5,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/database.ts": {
            "lines": 54,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/ConfigService.ts": {
            "lines": 158,
            "tokens": 1005,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/base/BaseRepository.ts": {
            "lines": 90,
            "tokens": 680,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/base/BaseController.ts": {
            "lines": 87,
            "tokens": 754,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/workflow-engine.ts": {
            "lines": 336,
            "tokens": 2351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/index.ts": {
            "lines": 24,
            "tokens": 147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/use-case.ts": {
            "lines": 4,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter.ts": {
            "lines": 508,
            "tokens": 3591,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/jwt-session.ts": {
            "lines": 535,
            "tokens": 3929,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/encryption.service.ts": {
            "lines": 321,
            "tokens": 2603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/audit-logger.ts": {
            "lines": 750,
            "tokens": 5958,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/metrics.ts": {
            "lines": 23,
            "tokens": 196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/index.ts": {
            "lines": 28,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/alerts.ts": {
            "lines": 37,
            "tokens": 293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/gateway/src/routing.ts": {
            "lines": 35,
            "tokens": 296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/gateway/src/middleware.ts": {
            "lines": 30,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/gateway/src/index.ts": {
            "lines": 43,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/sso.ts": {
            "lines": 32,
            "tokens": 214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/rbac.ts": {
            "lines": 32,
            "tokens": 229,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/index.ts": {
            "lines": 36,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/compliance.ts": {
            "lines": 34,
            "tokens": 262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/audit.ts": {
            "lines": 33,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts": {
            "lines": 194,
            "tokens": 1739,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 416,
            "percentage": 27.84,
            "percentageTokens": 23.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts": {
            "lines": 349,
            "tokens": 2798,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 299,
            "duplicatedTokens": 2433,
            "percentage": 85.67,
            "percentageTokens": 86.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/generators.ts": {
            "lines": 197,
            "tokens": 911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/cli.ts": {
            "lines": 122,
            "tokens": 1144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/index.ts": {
            "lines": 11,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-service.ts": {
            "lines": 444,
            "tokens": 3060,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager.ts": {
            "lines": 212,
            "tokens": 1424,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 159,
            "duplicatedTokens": 1134,
            "percentage": 75,
            "percentageTokens": 79.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/index.ts": {
            "lines": 53,
            "tokens": 505,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/index.ts": {
            "lines": 9,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/cli.ts": {
            "lines": 81,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts": {
            "lines": 244,
            "tokens": 2203,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 235,
            "duplicatedTokens": 2155,
            "percentage": 96.31,
            "percentageTokens": 97.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/auth-manager.ts": {
            "lines": 370,
            "tokens": 3038,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 70,
            "duplicatedTokens": 618,
            "percentage": 18.92,
            "percentageTokens": 20.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/workflow.types.ts": {
            "lines": 80,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-gateway/src/index.ts": {
            "lines": 470,
            "tokens": 4072,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 106,
            "percentage": 3.4,
            "percentageTokens": 2.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/server.ts": {
            "lines": 198,
            "tokens": 1482,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 106,
            "percentage": 8.08,
            "percentageTokens": 7.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/embeddings.ts": {
            "lines": 135,
            "tokens": 1176,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 166,
            "percentage": 16.3,
            "percentageTokens": 14.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/index.ts": {
            "lines": 16,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/core/src/index.ts": {
            "lines": 8,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 126758,
          "tokens": 955578,
          "sources": 816,
          "clones": 534,
          "duplicatedLines": 14196,
          "duplicatedTokens": 114449,
          "percentage": 11.2,
          "percentageTokens": 11.98,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/containernode/ContainerNode.tsx": {
            "lines": 253,
            "tokens": 2135,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 253,
            "duplicatedTokens": 2135,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx": {
            "lines": 368,
            "tokens": 2002,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 506,
            "duplicatedTokens": 2804,
            "percentage": 137.5,
            "percentageTokens": 140.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index/index.tsx": {
            "lines": 88,
            "tokens": 701,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 88,
            "duplicatedTokens": 701,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailtriggernodebody/GmailTriggerNodeBody.tsx": {
            "lines": 186,
            "tokens": 1347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 186,
            "duplicatedTokens": 1347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailpropertiespanel/GmailPropertiesPanel.tsx": {
            "lines": 561,
            "tokens": 3879,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 561,
            "duplicatedTokens": 3879,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/databasenodebody/DatabaseNodeBody.tsx": {
            "lines": 186,
            "tokens": 1321,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 186,
            "duplicatedTokens": 1321,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx": {
            "lines": 206,
            "tokens": 1352,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1352,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx": {
            "lines": 215,
            "tokens": 1718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 215,
            "duplicatedTokens": 1718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx": {
            "lines": 253,
            "tokens": 2135,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 253,
            "duplicatedTokens": 2135,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx": {
            "lines": 88,
            "tokens": 701,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 88,
            "duplicatedTokens": 701,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar.tsx": {
            "lines": 42,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeMenu.tsx": {
            "lines": 70,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx": {
            "lines": 368,
            "tokens": 2002,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 368,
            "duplicatedTokens": 2002,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx": {
            "lines": 186,
            "tokens": 1347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 186,
            "duplicatedTokens": 1347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx": {
            "lines": 561,
            "tokens": 3879,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 561,
            "duplicatedTokens": 3879,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx": {
            "lines": 186,
            "tokens": 1321,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 186,
            "duplicatedTokens": 1321,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2422,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 1045,
            "duplicatedTokens": 7491,
            "percentage": 307.35,
            "percentageTokens": 309.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 177,
            "duplicatedTokens": 1557,
            "percentage": 300,
            "percentageTokens": 300,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/tableview/TableView.tsx": {
            "lines": 107,
            "tokens": 959,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 107,
            "duplicatedTokens": 959,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/schemaview/SchemaView.tsx": {
            "lines": 104,
            "tokens": 982,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 104,
            "duplicatedTokens": 982,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/jsonview/JsonView.tsx": {
            "lines": 286,
            "tokens": 2056,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 286,
            "duplicatedTokens": 2056,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx": {
            "lines": 126,
            "tokens": 940,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 239,
            "duplicatedTokens": 1900,
            "percentage": 189.68,
            "percentageTokens": 202.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx": {
            "lines": 274,
            "tokens": 1925,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 388,
            "duplicatedTokens": 2705,
            "percentage": 141.61,
            "percentageTokens": 140.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx": {
            "lines": 118,
            "tokens": 723,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 396,
            "duplicatedTokens": 2424,
            "percentage": 335.59,
            "percentageTokens": 335.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx": {
            "lines": 386,
            "tokens": 3090,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 386,
            "duplicatedTokens": 3090,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx": {
            "lines": 744,
            "tokens": 6211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 744,
            "duplicatedTokens": 6211,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 331,
            "duplicatedTokens": 2356,
            "percentage": 97.35,
            "percentageTokens": 97.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodehandle/NodeHandle.tsx": {
            "lines": 57,
            "tokens": 427,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 57,
            "duplicatedTokens": 427,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodebadge/NodeBadge.tsx": {
            "lines": 34,
            "tokens": 278,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 34,
            "duplicatedTokens": 278,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx": {
            "lines": 301,
            "tokens": 2567,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 301,
            "duplicatedTokens": 2567,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 59,
            "duplicatedTokens": 519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx": {
            "lines": 71,
            "tokens": 529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx": {
            "lines": 236,
            "tokens": 1946,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 236,
            "duplicatedTokens": 1946,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/workflowtemplatespanel/WorkflowTemplatesPanel.tsx": {
            "lines": 462,
            "tokens": 3418,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 462,
            "duplicatedTokens": 3418,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx": {
            "lines": 179,
            "tokens": 1260,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1260,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx": {
            "lines": 674,
            "tokens": 5282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 674,
            "duplicatedTokens": 5282,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx": {
            "lines": 467,
            "tokens": 3597,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 467,
            "duplicatedTokens": 3597,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx": {
            "lines": 192,
            "tokens": 1494,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1494,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx": {
            "lines": 69,
            "tokens": 571,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 571,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx": {
            "lines": 246,
            "tokens": 2027,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 246,
            "duplicatedTokens": 2027,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx": {
            "lines": 401,
            "tokens": 3279,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 401,
            "duplicatedTokens": 3279,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx": {
            "lines": 213,
            "tokens": 1957,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 326,
            "duplicatedTokens": 2917,
            "percentage": 153.05,
            "percentageTokens": 149.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx": {
            "lines": 124,
            "tokens": 933,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 124,
            "duplicatedTokens": 933,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx": {
            "lines": 584,
            "tokens": 4371,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 612,
            "duplicatedTokens": 4541,
            "percentage": 104.79,
            "percentageTokens": 103.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx": {
            "lines": 551,
            "tokens": 4638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 551,
            "duplicatedTokens": 4638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx": {
            "lines": 457,
            "tokens": 4042,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 457,
            "duplicatedTokens": 4042,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx": {
            "lines": 92,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 92,
            "duplicatedTokens": 625,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx": {
            "lines": 433,
            "tokens": 3173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx": {
            "lines": 210,
            "tokens": 1722,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1722,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx": {
            "lines": 441,
            "tokens": 3826,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 597,
            "duplicatedTokens": 5224,
            "percentage": 135.37,
            "percentageTokens": 136.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx": {
            "lines": 388,
            "tokens": 3119,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 388,
            "duplicatedTokens": 3119,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx": {
            "lines": 265,
            "tokens": 1879,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 292,
            "duplicatedTokens": 2091,
            "percentage": 110.19,
            "percentageTokens": 111.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx": {
            "lines": 498,
            "tokens": 3855,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 525,
            "duplicatedTokens": 4067,
            "percentage": 105.42,
            "percentageTokens": 105.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx": {
            "lines": 614,
            "tokens": 4647,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 634,
            "duplicatedTokens": 4877,
            "percentage": 103.26,
            "percentageTokens": 104.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx": {
            "lines": 332,
            "tokens": 2463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 332,
            "duplicatedTokens": 2463,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx": {
            "lines": 381,
            "tokens": 3316,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 381,
            "duplicatedTokens": 3316,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx": {
            "lines": 164,
            "tokens": 1329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 164,
            "duplicatedTokens": 1329,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx": {
            "lines": 206,
            "tokens": 1352,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1352,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/CustomNodeToolbar.tsx": {
            "lines": 37,
            "tokens": 223,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx": {
            "lines": 215,
            "tokens": 1718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 215,
            "duplicatedTokens": 1718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx": {
            "lines": 504,
            "tokens": 4037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 504,
            "duplicatedTokens": 4037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx": {
            "lines": 706,
            "tokens": 5978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 706,
            "duplicatedTokens": 5978,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx": {
            "lines": 385,
            "tokens": 2704,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 385,
            "duplicatedTokens": 2704,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/socialproof/SocialProof.tsx": {
            "lines": 94,
            "tokens": 794,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx": {
            "lines": 290,
            "tokens": 2563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 290,
            "duplicatedTokens": 2563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx": {
            "lines": 69,
            "tokens": 491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx": {
            "lines": 172,
            "tokens": 1268,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 172,
            "duplicatedTokens": 1268,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/footer/Footer.tsx": {
            "lines": 20,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx": {
            "lines": 170,
            "tokens": 1174,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1174,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/enterprisefeatures/EnterpriseFeatures.tsx": {
            "lines": 65,
            "tokens": 609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx": {
            "lines": 106,
            "tokens": 844,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 106,
            "duplicatedTokens": 844,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx": {
            "lines": 235,
            "tokens": 1943,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 235,
            "duplicatedTokens": 1943,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx": {
            "lines": 569,
            "tokens": 4345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 569,
            "duplicatedTokens": 4345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/TestCredentialButton.tsx": {
            "lines": 24,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/CredentialNameField.tsx": {
            "lines": 3,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/index.tsx": {
            "lines": 15,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/GmailSetupSteps.tsx": {
            "lines": 2,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/index.tsx": {
            "lines": 22,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/AIProviderFields.tsx": {
            "lines": 13,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx": {
            "lines": 375,
            "tokens": 3019,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 375,
            "duplicatedTokens": 3019,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx": {
            "lines": 527,
            "tokens": 4309,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 527,
            "duplicatedTokens": 4309,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2422,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 340,
            "duplicatedTokens": 2422,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 59,
            "duplicatedTokens": 519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/ErrorBoundary/GlobalErrorBoundary.tsx": {
            "lines": 39,
            "tokens": 337,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx": {
            "lines": 107,
            "tokens": 959,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 107,
            "duplicatedTokens": 959,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx": {
            "lines": 104,
            "tokens": 982,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 104,
            "duplicatedTokens": 982,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx": {
            "lines": 286,
            "tokens": 2056,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 286,
            "duplicatedTokens": 2056,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx": {
            "lines": 126,
            "tokens": 940,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 126,
            "duplicatedTokens": 940,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx": {
            "lines": 39,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/settings/Settings.tsx": {
            "lines": 284,
            "tokens": 2232,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 284,
            "duplicatedTokens": 2232,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx": {
            "lines": 287,
            "tokens": 2411,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 287,
            "duplicatedTokens": 2411,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx": {
            "lines": 210,
            "tokens": 1807,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1807,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx": {
            "lines": 302,
            "tokens": 2152,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 378,
            "duplicatedTokens": 2685,
            "percentage": 125.17,
            "percentageTokens": 124.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/privacy/Privacy.tsx": {
            "lines": 206,
            "tokens": 1666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx": {
            "lines": 269,
            "tokens": 2214,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 269,
            "duplicatedTokens": 2214,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx": {
            "lines": 162,
            "tokens": 1237,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 238,
            "duplicatedTokens": 1770,
            "percentage": 146.91,
            "percentageTokens": 143.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx": {
            "lines": 178,
            "tokens": 1314,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 178,
            "duplicatedTokens": 1314,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrations/Integrations.tsx": {
            "lines": 95,
            "tokens": 750,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 95,
            "duplicatedTokens": 750,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/features/Features.tsx": {
            "lines": 152,
            "tokens": 1071,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 152,
            "duplicatedTokens": 1071,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/executions/Executions.tsx": {
            "lines": 115,
            "tokens": 1079,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 115,
            "duplicatedTokens": 1079,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/enterprise/Enterprise.tsx": {
            "lines": 258,
            "tokens": 2160,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 258,
            "duplicatedTokens": 2160,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx": {
            "lines": 234,
            "tokens": 1884,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 234,
            "duplicatedTokens": 1884,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx": {
            "lines": 159,
            "tokens": 1388,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 159,
            "duplicatedTokens": 1388,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/credentials/Credentials.tsx": {
            "lines": 262,
            "tokens": 2152,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 262,
            "duplicatedTokens": 2152,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx": {
            "lines": 301,
            "tokens": 2172,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 301,
            "duplicatedTokens": 2172,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx": {
            "lines": 347,
            "tokens": 2718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 347,
            "duplicatedTokens": 2718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/about/About.tsx": {
            "lines": 255,
            "tokens": 2154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/index.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/StatusBadge.tsx": {
            "lines": 5,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx": {
            "lines": 3,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx": {
            "lines": 64,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx": {
            "lines": 274,
            "tokens": 1925,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 274,
            "duplicatedTokens": 1925,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx": {
            "lines": 118,
            "tokens": 723,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 118,
            "duplicatedTokens": 723,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx": {
            "lines": 162,
            "tokens": 978,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 283,
            "duplicatedTokens": 1739,
            "percentage": 174.69,
            "percentageTokens": 177.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 386,
            "tokens": 3090,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 386,
            "duplicatedTokens": 3090,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx": {
            "lines": 744,
            "tokens": 6211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 744,
            "duplicatedTokens": 6211,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 340,
            "duplicatedTokens": 2425,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx": {
            "lines": 57,
            "tokens": 427,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 57,
            "duplicatedTokens": 427,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx": {
            "lines": 34,
            "tokens": 278,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 34,
            "duplicatedTokens": 278,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 301,
            "tokens": 2567,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 301,
            "duplicatedTokens": 2567,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 59,
            "duplicatedTokens": 519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx": {
            "lines": 71,
            "tokens": 529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx": {
            "lines": 57,
            "tokens": 352,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 56,
            "duplicatedTokens": 279,
            "percentage": 98.25,
            "percentageTokens": 79.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx": {
            "lines": 161,
            "tokens": 923,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 250,
            "duplicatedTokens": 1464,
            "percentage": 155.28,
            "percentageTokens": 158.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx": {
            "lines": 236,
            "tokens": 1946,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 236,
            "duplicatedTokens": 1946,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx": {
            "lines": 462,
            "tokens": 3418,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 462,
            "duplicatedTokens": 3418,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx": {
            "lines": 179,
            "tokens": 1260,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1260,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx": {
            "lines": 674,
            "tokens": 5282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 674,
            "duplicatedTokens": 5282,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx": {
            "lines": 467,
            "tokens": 3597,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 467,
            "duplicatedTokens": 3597,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx": {
            "lines": 192,
            "tokens": 1494,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1494,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx": {
            "lines": 69,
            "tokens": 571,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 571,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionStateOverlay.tsx": {
            "lines": 8,
            "tokens": 47,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx": {
            "lines": 246,
            "tokens": 2027,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 246,
            "duplicatedTokens": 2027,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx": {
            "lines": 401,
            "tokens": 3279,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 401,
            "duplicatedTokens": 3279,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx": {
            "lines": 213,
            "tokens": 1957,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 213,
            "duplicatedTokens": 1957,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx": {
            "lines": 124,
            "tokens": 933,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 124,
            "duplicatedTokens": 933,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx": {
            "lines": 584,
            "tokens": 4371,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 584,
            "duplicatedTokens": 4371,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx": {
            "lines": 551,
            "tokens": 4638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 551,
            "duplicatedTokens": 4638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx": {
            "lines": 457,
            "tokens": 4042,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 457,
            "duplicatedTokens": 4042,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx": {
            "lines": 92,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 92,
            "duplicatedTokens": 625,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx": {
            "lines": 109,
            "tokens": 770,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx": {
            "lines": 210,
            "tokens": 1722,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1722,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx": {
            "lines": 11,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx": {
            "lines": 388,
            "tokens": 3119,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 388,
            "duplicatedTokens": 3119,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx": {
            "lines": 441,
            "tokens": 3826,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 441,
            "duplicatedTokens": 3826,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx": {
            "lines": 265,
            "tokens": 1879,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 265,
            "duplicatedTokens": 1879,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx": {
            "lines": 498,
            "tokens": 3855,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 498,
            "duplicatedTokens": 3855,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx": {
            "lines": 614,
            "tokens": 4647,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 614,
            "duplicatedTokens": 4647,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx": {
            "lines": 381,
            "tokens": 3316,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 381,
            "duplicatedTokens": 3316,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx": {
            "lines": 164,
            "tokens": 1329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 164,
            "duplicatedTokens": 1329,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx": {
            "lines": 56,
            "tokens": 385,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx": {
            "lines": 332,
            "tokens": 2463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 332,
            "duplicatedTokens": 2463,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentOutputPanel.tsx": {
            "lines": 36,
            "tokens": 288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx": {
            "lines": 249,
            "tokens": 2561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx": {
            "lines": 504,
            "tokens": 4037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 504,
            "duplicatedTokens": 4037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx": {
            "lines": 706,
            "tokens": 5978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 706,
            "duplicatedTokens": 5978,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx": {
            "lines": 385,
            "tokens": 2704,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 385,
            "duplicatedTokens": 2704,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx": {
            "lines": 127,
            "tokens": 1023,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx": {
            "lines": 39,
            "tokens": 303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/SocialProof.tsx": {
            "lines": 94,
            "tokens": 794,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx": {
            "lines": 290,
            "tokens": 2563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 290,
            "duplicatedTokens": 2563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx": {
            "lines": 69,
            "tokens": 491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx": {
            "lines": 79,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx": {
            "lines": 172,
            "tokens": 1268,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 172,
            "duplicatedTokens": 1268,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Footer.tsx": {
            "lines": 20,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx": {
            "lines": 170,
            "tokens": 1174,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1174,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/EnterpriseFeatures.tsx": {
            "lines": 65,
            "tokens": 609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CompetitiveAdvantage.tsx": {
            "lines": 28,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx": {
            "lines": 106,
            "tokens": 844,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 106,
            "duplicatedTokens": 844,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CallToAction.tsx": {
            "lines": 60,
            "tokens": 541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx": {
            "lines": 235,
            "tokens": 1943,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 235,
            "duplicatedTokens": 1943,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx": {
            "lines": 569,
            "tokens": 4345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 569,
            "duplicatedTokens": 4345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Auth/ProtectedRoute.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx": {
            "lines": 375,
            "tokens": 3019,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 375,
            "duplicatedTokens": 3019,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx": {
            "lines": 527,
            "tokens": 4309,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 527,
            "duplicatedTokens": 4309,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/overlay/dialog.tsx": {
            "lines": 34,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/field.tsx": {
            "lines": 42,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormLabel.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormInput.tsx": {
            "lines": 20,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormField.tsx": {
            "lines": 11,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/tab-container.tsx": {
            "lines": 24,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx": {
            "lines": 39,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/button.tsx": {
            "lines": 7,
            "tokens": 30,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/alert.tsx": {
            "lines": 9,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/VirtualizedList.tsx": {
            "lines": 58,
            "tokens": 466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/TestResultDisplay.tsx": {
            "lines": 0,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/JsonViewer.tsx": {
            "lines": 26,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/WorkflowEditor.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx": {
            "lines": 39,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx": {
            "lines": 284,
            "tokens": 2232,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 284,
            "duplicatedTokens": 2232,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx": {
            "lines": 287,
            "tokens": 2411,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 287,
            "duplicatedTokens": 2411,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx": {
            "lines": 210,
            "tokens": 1807,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1807,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx": {
            "lines": 302,
            "tokens": 2152,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 302,
            "duplicatedTokens": 2152,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx": {
            "lines": 206,
            "tokens": 1666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx": {
            "lines": 269,
            "tokens": 2214,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 269,
            "duplicatedTokens": 2214,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx": {
            "lines": 162,
            "tokens": 1237,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 162,
            "duplicatedTokens": 1237,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx": {
            "lines": 178,
            "tokens": 1314,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 178,
            "duplicatedTokens": 1314,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx": {
            "lines": 95,
            "tokens": 750,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 95,
            "duplicatedTokens": 750,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx": {
            "lines": 152,
            "tokens": 1071,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 152,
            "duplicatedTokens": 1071,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx": {
            "lines": 115,
            "tokens": 1079,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 115,
            "duplicatedTokens": 1079,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx": {
            "lines": 258,
            "tokens": 2160,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 258,
            "duplicatedTokens": 2160,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx": {
            "lines": 234,
            "tokens": 1884,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 234,
            "duplicatedTokens": 1884,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx": {
            "lines": 159,
            "tokens": 1388,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 159,
            "duplicatedTokens": 1388,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx": {
            "lines": 262,
            "tokens": 2152,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 262,
            "duplicatedTokens": 2152,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx": {
            "lines": 301,
            "tokens": 2172,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 301,
            "duplicatedTokens": 2172,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx": {
            "lines": 255,
            "tokens": 2154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx": {
            "lines": 347,
            "tokens": 2718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 347,
            "duplicatedTokens": 2718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx": {
            "lines": 162,
            "tokens": 978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 162,
            "duplicatedTokens": 978,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx": {
            "lines": 161,
            "tokens": 923,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 161,
            "duplicatedTokens": 923,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/withHOC.tsx": {
            "lines": 100,
            "tokens": 976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/App.tsx": {
            "lines": 51,
            "tokens": 723,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/main.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 46925,
          "tokens": 367497,
          "sources": 213,
          "clones": 96,
          "duplicatedLines": 22878,
          "duplicatedTokens": 177995,
          "percentage": 48.75,
          "percentageTokens": 48.43,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "tsx": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/containernode/ContainerNode.tsx": {
            "lines": 385,
            "tokens": 3105,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 380,
            "duplicatedTokens": 3040,
            "percentage": 98.7,
            "percentageTokens": 97.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx": {
            "lines": 455,
            "tokens": 2509,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 581,
            "duplicatedTokens": 3161,
            "percentage": 127.69,
            "percentageTokens": 125.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index/index.tsx": {
            "lines": 347,
            "tokens": 2752,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 338,
            "duplicatedTokens": 2634,
            "percentage": 97.41,
            "percentageTokens": 95.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailtriggernodebody/GmailTriggerNodeBody.tsx": {
            "lines": 361,
            "tokens": 2757,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 363,
            "duplicatedTokens": 2721,
            "percentage": 100.55,
            "percentageTokens": 98.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailpropertiespanel/GmailPropertiesPanel.tsx": {
            "lines": 732,
            "tokens": 5296,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 731,
            "duplicatedTokens": 5260,
            "percentage": 99.86,
            "percentageTokens": 99.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/databasenodebody/DatabaseNodeBody.tsx": {
            "lines": 358,
            "tokens": 2774,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 354,
            "duplicatedTokens": 2722,
            "percentage": 98.88,
            "percentageTokens": 98.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx": {
            "lines": 348,
            "tokens": 2626,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 362,
            "duplicatedTokens": 2732,
            "percentage": 104.02,
            "percentageTokens": 104.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx": {
            "lines": 461,
            "tokens": 3686,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 461,
            "duplicatedTokens": 3654,
            "percentage": 100,
            "percentageTokens": 99.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx": {
            "lines": 380,
            "tokens": 3040,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 380,
            "duplicatedTokens": 3040,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx": {
            "lines": 341,
            "tokens": 2674,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 338,
            "duplicatedTokens": 2634,
            "percentage": 99.12,
            "percentageTokens": 98.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar.tsx": {
            "lines": 75,
            "tokens": 422,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeMenu.tsx": {
            "lines": 123,
            "tokens": 806,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx": {
            "lines": 455,
            "tokens": 2509,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 455,
            "duplicatedTokens": 2509,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx": {
            "lines": 358,
            "tokens": 2718,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 363,
            "duplicatedTokens": 2721,
            "percentage": 101.4,
            "percentageTokens": 100.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx": {
            "lines": 729,
            "tokens": 5257,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 731,
            "duplicatedTokens": 5260,
            "percentage": 100.27,
            "percentageTokens": 100.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx": {
            "lines": 354,
            "tokens": 2722,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 354,
            "duplicatedTokens": 2722,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx": {
            "lines": 456,
            "tokens": 3389,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 906,
            "duplicatedTokens": 6688,
            "percentage": 198.68,
            "percentageTokens": 197.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx": {
            "lines": 368,
            "tokens": 2908,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 1063,
            "duplicatedTokens": 8336,
            "percentage": 288.86,
            "percentageTokens": 286.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/tableview/TableView.tsx": {
            "lines": 330,
            "tokens": 3132,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 334,
            "duplicatedTokens": 3209,
            "percentage": 101.21,
            "percentageTokens": 102.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/schemaview/SchemaView.tsx": {
            "lines": 244,
            "tokens": 2148,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 249,
            "duplicatedTokens": 2238,
            "percentage": 102.05,
            "percentageTokens": 104.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/jsonview/JsonView.tsx": {
            "lines": 439,
            "tokens": 2745,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 437,
            "duplicatedTokens": 2719,
            "percentage": 99.54,
            "percentageTokens": 99.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx": {
            "lines": 275,
            "tokens": 2426,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 309,
            "duplicatedTokens": 2662,
            "percentage": 112.36,
            "percentageTokens": 109.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx": {
            "lines": 546,
            "tokens": 4060,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 564,
            "duplicatedTokens": 4196,
            "percentage": 103.3,
            "percentageTokens": 103.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx": {
            "lines": 208,
            "tokens": 1409,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 364,
            "duplicatedTokens": 2370,
            "percentage": 175,
            "percentageTokens": 168.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx": {
            "lines": 479,
            "tokens": 3823,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 481,
            "duplicatedTokens": 3847,
            "percentage": 100.42,
            "percentageTokens": 100.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx": {
            "lines": 884,
            "tokens": 7388,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 1081,
            "duplicatedTokens": 8915,
            "percentage": 122.29,
            "percentageTokens": 120.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx": {
            "lines": 458,
            "tokens": 3395,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 908,
            "duplicatedTokens": 6694,
            "percentage": 198.25,
            "percentageTokens": 197.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodehandle/NodeHandle.tsx": {
            "lines": 287,
            "tokens": 2133,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 282,
            "duplicatedTokens": 2068,
            "percentage": 98.26,
            "percentageTokens": 96.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodebadge/NodeBadge.tsx": {
            "lines": 207,
            "tokens": 1788,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 203,
            "duplicatedTokens": 1736,
            "percentage": 98.07,
            "percentageTokens": 97.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx": {
            "lines": 460,
            "tokens": 3960,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 464,
            "duplicatedTokens": 4010,
            "percentage": 100.87,
            "percentageTokens": 101.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx": {
            "lines": 373,
            "tokens": 2992,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 336,
            "duplicatedTokens": 2618,
            "percentage": 90.08,
            "percentageTokens": 87.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx": {
            "lines": 508,
            "tokens": 4071,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 538,
            "duplicatedTokens": 4369,
            "percentage": 105.91,
            "percentageTokens": 107.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx": {
            "lines": 402,
            "tokens": 3525,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 467,
            "duplicatedTokens": 4221,
            "percentage": 116.17,
            "percentageTokens": 119.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/workflowtemplatespanel/WorkflowTemplatesPanel.tsx": {
            "lines": 682,
            "tokens": 5207,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 679,
            "duplicatedTokens": 5168,
            "percentage": 99.56,
            "percentageTokens": 99.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx": {
            "lines": 310,
            "tokens": 2119,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 352,
            "duplicatedTokens": 2458,
            "percentage": 113.55,
            "percentageTokens": 116,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx": {
            "lines": 987,
            "tokens": 8185,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 994,
            "duplicatedTokens": 8272,
            "percentage": 100.71,
            "percentageTokens": 101.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx": {
            "lines": 725,
            "tokens": 5690,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 721,
            "duplicatedTokens": 5638,
            "percentage": 99.45,
            "percentageTokens": 99.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx": {
            "lines": 556,
            "tokens": 4676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 546,
            "duplicatedTokens": 4546,
            "percentage": 98.2,
            "percentageTokens": 97.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx": {
            "lines": 283,
            "tokens": 2360,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 299,
            "duplicatedTokens": 2537,
            "percentage": 105.65,
            "percentageTokens": 107.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx": {
            "lines": 398,
            "tokens": 3247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 394,
            "duplicatedTokens": 3195,
            "percentage": 98.99,
            "percentageTokens": 98.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx": {
            "lines": 496,
            "tokens": 3952,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 524,
            "duplicatedTokens": 4160,
            "percentage": 105.65,
            "percentageTokens": 105.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx": {
            "lines": 347,
            "tokens": 3357,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 392,
            "duplicatedTokens": 3681,
            "percentage": 112.97,
            "percentageTokens": 109.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx": {
            "lines": 255,
            "tokens": 1992,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 265,
            "duplicatedTokens": 2067,
            "percentage": 103.92,
            "percentageTokens": 103.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx": {
            "lines": 764,
            "tokens": 5749,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 799,
            "duplicatedTokens": 6034,
            "percentage": 104.58,
            "percentageTokens": 104.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx": {
            "lines": 800,
            "tokens": 6588,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 795,
            "duplicatedTokens": 6523,
            "percentage": 99.38,
            "percentageTokens": 99.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx": {
            "lines": 604,
            "tokens": 5285,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 601,
            "duplicatedTokens": 5246,
            "percentage": 99.5,
            "percentageTokens": 99.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx": {
            "lines": 307,
            "tokens": 2379,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 375,
            "duplicatedTokens": 2717,
            "percentage": 122.15,
            "percentageTokens": 114.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx": {
            "lines": 778,
            "tokens": 6027,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 115,
            "duplicatedTokens": 754,
            "percentage": 14.78,
            "percentageTokens": 12.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx": {
            "lines": 375,
            "tokens": 2850,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 382,
            "duplicatedTokens": 2909,
            "percentage": 101.87,
            "percentageTokens": 102.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx": {
            "lines": 564,
            "tokens": 4986,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 641,
            "duplicatedTokens": 5701,
            "percentage": 113.65,
            "percentageTokens": 114.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx": {
            "lines": 775,
            "tokens": 6595,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 771,
            "duplicatedTokens": 6543,
            "percentage": 99.48,
            "percentageTokens": 99.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx": {
            "lines": 441,
            "tokens": 3403,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 495,
            "duplicatedTokens": 3838,
            "percentage": 112.24,
            "percentageTokens": 112.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx": {
            "lines": 668,
            "tokens": 5124,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 714,
            "duplicatedTokens": 5504,
            "percentage": 106.89,
            "percentageTokens": 107.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx": {
            "lines": 752,
            "tokens": 5436,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 749,
            "duplicatedTokens": 5397,
            "percentage": 99.6,
            "percentageTokens": 99.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx": {
            "lines": 580,
            "tokens": 4401,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 577,
            "duplicatedTokens": 4362,
            "percentage": 99.48,
            "percentageTokens": 99.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx": {
            "lines": 496,
            "tokens": 4246,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 486,
            "duplicatedTokens": 4116,
            "percentage": 97.98,
            "percentageTokens": 96.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx": {
            "lines": 526,
            "tokens": 4652,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 523,
            "duplicatedTokens": 4590,
            "percentage": 99.43,
            "percentageTokens": 98.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx": {
            "lines": 341,
            "tokens": 2535,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 343,
            "duplicatedTokens": 2538,
            "percentage": 100.59,
            "percentageTokens": 100.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/CustomNodeToolbar.tsx": {
            "lines": 96,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx": {
            "lines": 452,
            "tokens": 3569,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 452,
            "duplicatedTokens": 3569,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx": {
            "lines": 997,
            "tokens": 7737,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 994,
            "duplicatedTokens": 7698,
            "percentage": 99.7,
            "percentageTokens": 99.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx": {
            "lines": 910,
            "tokens": 7693,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 907,
            "duplicatedTokens": 7654,
            "percentage": 99.67,
            "percentageTokens": 99.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx": {
            "lines": 567,
            "tokens": 4129,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 565,
            "duplicatedTokens": 4080,
            "percentage": 99.65,
            "percentageTokens": 98.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/socialproof/SocialProof.tsx": {
            "lines": 238,
            "tokens": 1882,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 238,
            "duplicatedTokens": 1882,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx": {
            "lines": 511,
            "tokens": 3952,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 509,
            "duplicatedTokens": 3926,
            "percentage": 99.61,
            "percentageTokens": 99.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx": {
            "lines": 284,
            "tokens": 2050,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 283,
            "duplicatedTokens": 2037,
            "percentage": 99.65,
            "percentageTokens": 99.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx": {
            "lines": 376,
            "tokens": 2674,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 369,
            "duplicatedTokens": 2583,
            "percentage": 98.14,
            "percentageTokens": 96.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/footer/Footer.tsx": {
            "lines": 245,
            "tokens": 2007,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 245,
            "duplicatedTokens": 2007,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx": {
            "lines": 460,
            "tokens": 3542,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 459,
            "duplicatedTokens": 3529,
            "percentage": 99.78,
            "percentageTokens": 99.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/enterprisefeatures/EnterpriseFeatures.tsx": {
            "lines": 219,
            "tokens": 1818,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 219,
            "duplicatedTokens": 1818,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx": {
            "lines": 510,
            "tokens": 3699,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 520,
            "duplicatedTokens": 3823,
            "percentage": 101.96,
            "percentageTokens": 103.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx": {
            "lines": 394,
            "tokens": 3409,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 391,
            "duplicatedTokens": 3370,
            "percentage": 99.24,
            "percentageTokens": 98.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx": {
            "lines": 923,
            "tokens": 7093,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 922,
            "duplicatedTokens": 7057,
            "percentage": 99.89,
            "percentageTokens": 99.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/TestCredentialButton.tsx": {
            "lines": 66,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/CredentialNameField.tsx": {
            "lines": 41,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/index.tsx": {
            "lines": 70,
            "tokens": 357,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/GmailSetupSteps.tsx": {
            "lines": 24,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/index.tsx": {
            "lines": 95,
            "tokens": 458,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/AIProviderFields.tsx": {
            "lines": 54,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx": {
            "lines": 704,
            "tokens": 6019,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 704,
            "duplicatedTokens": 5996,
            "percentage": 100,
            "percentageTokens": 99.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx": {
            "lines": 760,
            "tokens": 6211,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 760,
            "duplicatedTokens": 6188,
            "percentage": 100,
            "percentageTokens": 99.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx": {
            "lines": 453,
            "tokens": 3350,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 453,
            "duplicatedTokens": 3350,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx": {
            "lines": 361,
            "tokens": 2817,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 361,
            "duplicatedTokens": 2817,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/ErrorBoundary/GlobalErrorBoundary.tsx": {
            "lines": 195,
            "tokens": 1506,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx": {
            "lines": 328,
            "tokens": 3106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 328,
            "duplicatedTokens": 3106,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx": {
            "lines": 243,
            "tokens": 2135,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 243,
            "duplicatedTokens": 2135,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx": {
            "lines": 437,
            "tokens": 2719,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 437,
            "duplicatedTokens": 2719,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx": {
            "lines": 273,
            "tokens": 2400,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 273,
            "duplicatedTokens": 2400,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx": {
            "lines": 525,
            "tokens": 5333,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 632,
            "duplicatedTokens": 6144,
            "percentage": 120.38,
            "percentageTokens": 115.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/settings/Settings.tsx": {
            "lines": 437,
            "tokens": 3484,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 432,
            "duplicatedTokens": 3404,
            "percentage": 98.86,
            "percentageTokens": 97.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx": {
            "lines": 665,
            "tokens": 5265,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 722,
            "duplicatedTokens": 5706,
            "percentage": 108.57,
            "percentageTokens": 108.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx": {
            "lines": 592,
            "tokens": 4721,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 633,
            "duplicatedTokens": 5028,
            "percentage": 106.93,
            "percentageTokens": 106.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx": {
            "lines": 524,
            "tokens": 4050,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 745,
            "duplicatedTokens": 5717,
            "percentage": 142.18,
            "percentageTokens": 141.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/privacy/Privacy.tsx": {
            "lines": 465,
            "tokens": 3864,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 481,
            "duplicatedTokens": 3979,
            "percentage": 103.44,
            "percentageTokens": 102.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx": {
            "lines": 717,
            "tokens": 4910,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 752,
            "duplicatedTokens": 5171,
            "percentage": 104.88,
            "percentageTokens": 105.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx": {
            "lines": 328,
            "tokens": 2595,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 549,
            "duplicatedTokens": 4264,
            "percentage": 167.38,
            "percentageTokens": 164.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx": {
            "lines": 587,
            "tokens": 4580,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 616,
            "duplicatedTokens": 4804,
            "percentage": 104.94,
            "percentageTokens": 104.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrations/Integrations.tsx": {
            "lines": 238,
            "tokens": 2046,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 233,
            "duplicatedTokens": 1972,
            "percentage": 97.9,
            "percentageTokens": 96.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/features/Features.tsx": {
            "lines": 561,
            "tokens": 3689,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 575,
            "duplicatedTokens": 3789,
            "percentage": 102.5,
            "percentageTokens": 102.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/executions/Executions.tsx": {
            "lines": 280,
            "tokens": 2596,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 284,
            "duplicatedTokens": 2606,
            "percentage": 101.43,
            "percentageTokens": 100.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/enterprise/Enterprise.tsx": {
            "lines": 595,
            "tokens": 4504,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 605,
            "duplicatedTokens": 4562,
            "percentage": 101.68,
            "percentageTokens": 101.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx": {
            "lines": 639,
            "tokens": 4882,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 691,
            "duplicatedTokens": 5274,
            "percentage": 108.14,
            "percentageTokens": 108.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx": {
            "lines": 327,
            "tokens": 2831,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 380,
            "duplicatedTokens": 3259,
            "percentage": 116.21,
            "percentageTokens": 115.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/credentials/Credentials.tsx": {
            "lines": 422,
            "tokens": 3547,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 427,
            "duplicatedTokens": 3543,
            "percentage": 101.18,
            "percentageTokens": 99.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx": {
            "lines": 600,
            "tokens": 4594,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 635,
            "duplicatedTokens": 4855,
            "percentage": 105.83,
            "percentageTokens": 105.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx": {
            "lines": 821,
            "tokens": 5444,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 864,
            "duplicatedTokens": 5774,
            "percentage": 105.24,
            "percentageTokens": 106.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/about/About.tsx": {
            "lines": 524,
            "tokens": 3934,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 539,
            "duplicatedTokens": 4048,
            "percentage": 102.86,
            "percentageTokens": 102.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/index.tsx": {
            "lines": 104,
            "tokens": 722,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/StatusBadge.tsx": {
            "lines": 94,
            "tokens": 587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeLabel.tsx": {
            "lines": 45,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx": {
            "lines": 52,
            "tokens": 414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 106,
            "percentage": 17.31,
            "percentageTokens": 25.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx": {
            "lines": 103,
            "tokens": 647,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 28,
            "duplicatedTokens": 232,
            "percentage": 27.18,
            "percentageTokens": 35.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx": {
            "lines": 544,
            "tokens": 4034,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 544,
            "duplicatedTokens": 4034,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx": {
            "lines": 202,
            "tokens": 1331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 197,
            "duplicatedTokens": 1253,
            "percentage": 97.52,
            "percentageTokens": 94.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx": {
            "lines": 234,
            "tokens": 1625,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 332,
            "duplicatedTokens": 2204,
            "percentage": 141.88,
            "percentageTokens": 135.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 474,
            "tokens": 3758,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 474,
            "duplicatedTokens": 3758,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx": {
            "lines": 881,
            "tokens": 7349,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 881,
            "duplicatedTokens": 7349,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx": {
            "lines": 455,
            "tokens": 3356,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 455,
            "duplicatedTokens": 3356,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx": {
            "lines": 282,
            "tokens": 2068,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 282,
            "duplicatedTokens": 2068,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx": {
            "lines": 203,
            "tokens": 1736,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 203,
            "duplicatedTokens": 1736,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 457,
            "tokens": 3921,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 457,
            "duplicatedTokens": 3921,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx": {
            "lines": 366,
            "tokens": 2901,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 366,
            "duplicatedTokens": 2901,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx": {
            "lines": 506,
            "tokens": 4045,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 506,
            "duplicatedTokens": 4045,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/componentfactory/ComponentFactory.tsx": {
            "lines": 378,
            "tokens": 2986,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx": {
            "lines": 116,
            "tokens": 838,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 258,
            "percentage": 41.38,
            "percentageTokens": 30.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx": {
            "lines": 224,
            "tokens": 1445,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 345,
            "duplicatedTokens": 2227,
            "percentage": 154.02,
            "percentageTokens": 154.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx": {
            "lines": 400,
            "tokens": 3499,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 400,
            "duplicatedTokens": 3499,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx": {
            "lines": 679,
            "tokens": 5168,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 679,
            "duplicatedTokens": 5168,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx": {
            "lines": 307,
            "tokens": 2080,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 307,
            "duplicatedTokens": 2080,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx": {
            "lines": 984,
            "tokens": 8146,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 984,
            "duplicatedTokens": 8146,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx": {
            "lines": 721,
            "tokens": 5638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 721,
            "duplicatedTokens": 5638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx": {
            "lines": 546,
            "tokens": 4546,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 546,
            "duplicatedTokens": 4546,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx": {
            "lines": 282,
            "tokens": 2347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 282,
            "duplicatedTokens": 2347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionStateOverlay.tsx": {
            "lines": 128,
            "tokens": 914,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx": {
            "lines": 394,
            "tokens": 3195,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 394,
            "duplicatedTokens": 3195,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx": {
            "lines": 492,
            "tokens": 3900,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 492,
            "duplicatedTokens": 3900,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx": {
            "lines": 345,
            "tokens": 3331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 345,
            "duplicatedTokens": 3331,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx": {
            "lines": 254,
            "tokens": 1979,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 254,
            "duplicatedTokens": 1979,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx": {
            "lines": 759,
            "tokens": 5684,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 759,
            "duplicatedTokens": 5684,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx": {
            "lines": 795,
            "tokens": 6523,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 795,
            "duplicatedTokens": 6523,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx": {
            "lines": 601,
            "tokens": 5246,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 601,
            "duplicatedTokens": 5246,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx": {
            "lines": 298,
            "tokens": 2262,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 295,
            "duplicatedTokens": 2189,
            "percentage": 98.99,
            "percentageTokens": 96.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx": {
            "lines": 215,
            "tokens": 1432,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 107,
            "percentage": 9.3,
            "percentageTokens": 7.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx": {
            "lines": 373,
            "tokens": 2824,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 373,
            "duplicatedTokens": 2824,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx": {
            "lines": 174,
            "tokens": 1243,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 80,
            "duplicatedTokens": 528,
            "percentage": 45.98,
            "percentageTokens": 42.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx": {
            "lines": 771,
            "tokens": 6543,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 771,
            "duplicatedTokens": 6543,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx": {
            "lines": 562,
            "tokens": 4960,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 560,
            "duplicatedTokens": 4931,
            "percentage": 99.64,
            "percentageTokens": 99.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx": {
            "lines": 434,
            "tokens": 3312,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 434,
            "duplicatedTokens": 3312,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx": {
            "lines": 664,
            "tokens": 5072,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 664,
            "duplicatedTokens": 5072,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx": {
            "lines": 749,
            "tokens": 5397,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 749,
            "duplicatedTokens": 5397,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx": {
            "lines": 486,
            "tokens": 4116,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 486,
            "duplicatedTokens": 4116,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx": {
            "lines": 521,
            "tokens": 4587,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 523,
            "duplicatedTokens": 4590,
            "percentage": 100.38,
            "percentageTokens": 100.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx": {
            "lines": 160,
            "tokens": 1015,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 48,
            "duplicatedTokens": 318,
            "percentage": 30,
            "percentageTokens": 31.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx": {
            "lines": 577,
            "tokens": 4362,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 577,
            "duplicatedTokens": 4362,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentOutputPanel.tsx": {
            "lines": 260,
            "tokens": 2342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx": {
            "lines": 371,
            "tokens": 3693,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 63,
            "duplicatedTokens": 562,
            "percentage": 16.98,
            "percentageTokens": 15.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx": {
            "lines": 994,
            "tokens": 7698,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 994,
            "duplicatedTokens": 7698,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx": {
            "lines": 907,
            "tokens": 7654,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 907,
            "duplicatedTokens": 7654,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx": {
            "lines": 563,
            "tokens": 4077,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 565,
            "duplicatedTokens": 4080,
            "percentage": 100.36,
            "percentageTokens": 100.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx": {
            "lines": 191,
            "tokens": 1598,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 99,
            "percentage": 6.28,
            "percentageTokens": 6.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx": {
            "lines": 32,
            "tokens": 265,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 68,
            "percentage": 25,
            "percentageTokens": 25.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx": {
            "lines": 113,
            "tokens": 906,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 180,
            "percentage": 18.58,
            "percentageTokens": 19.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/SocialProof.tsx": {
            "lines": 238,
            "tokens": 1882,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 238,
            "duplicatedTokens": 1882,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx": {
            "lines": 509,
            "tokens": 3926,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 509,
            "duplicatedTokens": 3926,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx": {
            "lines": 283,
            "tokens": 2037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 283,
            "duplicatedTokens": 2037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx": {
            "lines": 161,
            "tokens": 1290,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 68,
            "percentage": 4.97,
            "percentageTokens": 5.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx": {
            "lines": 369,
            "tokens": 2583,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 369,
            "duplicatedTokens": 2583,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Footer.tsx": {
            "lines": 245,
            "tokens": 2007,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 245,
            "duplicatedTokens": 2007,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx": {
            "lines": 459,
            "tokens": 3529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 459,
            "duplicatedTokens": 3529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/EnterpriseFeatures.tsx": {
            "lines": 219,
            "tokens": 1818,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 219,
            "duplicatedTokens": 1818,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CompetitiveAdvantage.tsx": {
            "lines": 144,
            "tokens": 965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx": {
            "lines": 510,
            "tokens": 3699,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 510,
            "duplicatedTokens": 3699,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CallToAction.tsx": {
            "lines": 136,
            "tokens": 1075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx": {
            "lines": 391,
            "tokens": 3370,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 391,
            "duplicatedTokens": 3370,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx": {
            "lines": 920,
            "tokens": 7054,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 922,
            "duplicatedTokens": 7057,
            "percentage": 100.22,
            "percentageTokens": 100.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Auth/ProtectedRoute.tsx": {
            "lines": 38,
            "tokens": 330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx": {
            "lines": 702,
            "tokens": 5993,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 704,
            "duplicatedTokens": 5996,
            "percentage": 100.28,
            "percentageTokens": 100.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx": {
            "lines": 758,
            "tokens": 6185,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 760,
            "duplicatedTokens": 6188,
            "percentage": 100.26,
            "percentageTokens": 100.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/overlay/dialog.tsx": {
            "lines": 181,
            "tokens": 943,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/field.tsx": {
            "lines": 135,
            "tokens": 767,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormLabel.tsx": {
            "lines": 43,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormInput.tsx": {
            "lines": 56,
            "tokens": 289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormField.tsx": {
            "lines": 41,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/tab-container.tsx": {
            "lines": 91,
            "tokens": 434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx": {
            "lines": 112,
            "tokens": 555,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 89,
            "percentage": 11.61,
            "percentageTokens": 16.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/button.tsx": {
            "lines": 86,
            "tokens": 423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/alert.tsx": {
            "lines": 141,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/VirtualizedList.tsx": {
            "lines": 229,
            "tokens": 1514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/TestResultDisplay.tsx": {
            "lines": 33,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/JsonViewer.tsx": {
            "lines": 103,
            "tokens": 831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/WorkflowEditor.tsx": {
            "lines": 63,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx": {
            "lines": 524,
            "tokens": 5320,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 524,
            "duplicatedTokens": 5320,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx": {
            "lines": 434,
            "tokens": 3445,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 432,
            "duplicatedTokens": 3404,
            "percentage": 99.54,
            "percentageTokens": 98.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx": {
            "lines": 664,
            "tokens": 5252,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 664,
            "duplicatedTokens": 5252,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx": {
            "lines": 591,
            "tokens": 4708,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 591,
            "duplicatedTokens": 4708,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx": {
            "lines": 520,
            "tokens": 3998,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 522,
            "duplicatedTokens": 4001,
            "percentage": 100.38,
            "percentageTokens": 100.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx": {
            "lines": 464,
            "tokens": 3851,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 464,
            "duplicatedTokens": 3851,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx": {
            "lines": 716,
            "tokens": 4897,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 716,
            "duplicatedTokens": 4897,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx": {
            "lines": 324,
            "tokens": 2543,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 326,
            "duplicatedTokens": 2548,
            "percentage": 100.62,
            "percentageTokens": 100.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/LandingPage.tsx": {
            "lines": 57,
            "tokens": 335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx": {
            "lines": 585,
            "tokens": 4554,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 585,
            "duplicatedTokens": 4554,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx": {
            "lines": 235,
            "tokens": 2007,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 233,
            "duplicatedTokens": 1972,
            "percentage": 99.15,
            "percentageTokens": 98.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx": {
            "lines": 560,
            "tokens": 3676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 560,
            "duplicatedTokens": 3676,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx": {
            "lines": 277,
            "tokens": 2557,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 274,
            "duplicatedTokens": 2501,
            "percentage": 98.92,
            "percentageTokens": 97.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx": {
            "lines": 592,
            "tokens": 4465,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 592,
            "duplicatedTokens": 4465,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx": {
            "lines": 638,
            "tokens": 4869,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 638,
            "duplicatedTokens": 4869,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx": {
            "lines": 322,
            "tokens": 2766,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 324,
            "duplicatedTokens": 2769,
            "percentage": 100.62,
            "percentageTokens": 100.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx": {
            "lines": 419,
            "tokens": 3508,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 414,
            "duplicatedTokens": 3437,
            "percentage": 98.81,
            "percentageTokens": 97.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx": {
            "lines": 599,
            "tokens": 4581,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 599,
            "duplicatedTokens": 4581,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx": {
            "lines": 524,
            "tokens": 3934,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 524,
            "duplicatedTokens": 3934,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx": {
            "lines": 820,
            "tokens": 5431,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 820,
            "duplicatedTokens": 5431,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx": {
            "lines": 228,
            "tokens": 1547,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 235,
            "duplicatedTokens": 1584,
            "percentage": 103.07,
            "percentageTokens": 102.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx": {
            "lines": 218,
            "tokens": 1367,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 225,
            "duplicatedTokens": 1404,
            "percentage": 103.21,
            "percentageTokens": 102.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/RouteTransition.tsx": {
            "lines": 29,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/withHOC.tsx": {
            "lines": 134,
            "tokens": 1280,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/App.tsx": {
            "lines": 135,
            "tokens": 1331,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/main.tsx": {
            "lines": 39,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 88995,
          "tokens": 696722,
          "sources": 217,
          "clones": 194,
          "duplicatedLines": 43432,
          "duplicatedTokens": 340305,
          "percentage": 48.8,
          "percentageTokens": 48.84,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx": {
            "lines": 14,
            "tokens": 58,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 58,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx": {
            "lines": 8,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 14,
            "tokens": 58,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 58,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 8,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 44,
          "tokens": 172,
          "sources": 4,
          "clones": 1,
          "duplicatedLines": 14,
          "duplicatedTokens": 58,
          "percentage": 31.82,
          "percentageTokens": 33.72,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 262722,
      "tokens": 2019969,
      "sources": 1250,
      "clones": 825,
      "duplicatedLines": 80520,
      "duplicatedTokens": 632807,
      "percentage": 30.65,
      "percentageTokens": 31.33,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "${output.id}`}>\n            {/* Connection Line for Standard Outputs */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Standard Outputs */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */}\n      {isAIAgent &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Plus Icon Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 363,
        "end": 432,
        "startLoc": {
          "line": 363,
          "column": 7,
          "position": 1999
        },
        "endLoc": {
          "line": 432,
          "column": 2,
          "position": 2400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 315,
        "end": 337,
        "startLoc": {
          "line": 315,
          "column": 17,
          "position": 1722
        },
        "endLoc": {
          "line": 337,
          "column": 2,
          "position": 1856
        }
      }
    },
    {
      "format": "tsx",
      "lines": 33,
      "fragment": "}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 374,
        "end": 406,
        "startLoc": {
          "line": 374,
          "column": 54,
          "position": 2063
        },
        "endLoc": {
          "line": 406,
          "column": 66,
          "position": 2227
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 326,
        "end": 358,
        "startLoc": {
          "line": 326,
          "column": 47,
          "position": 1786
        },
        "endLoc": {
          "line": 358,
          "column": 119,
          "position": 1950
        }
      }
    },
    {
      "format": "tsx",
      "lines": 32,
      "fragment": "}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n    <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 421,
        "end": 452,
        "startLoc": {
          "line": 421,
          "column": 23,
          "position": 2330
        },
        "endLoc": {
          "line": 452,
          "column": 2,
          "position": 2492
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 326,
        "end": 358,
        "startLoc": {
          "line": 326,
          "column": 47,
          "position": 1786
        },
        "endLoc": {
          "line": 358,
          "column": 2,
          "position": 1949
        }
      }
    },
    {
      "format": "javascript",
      "lines": 254,
      "fragment": "={onEdit}\n        className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n        title=\"Edit container\"\n      >\n        ⚙️\n      </button>\n      <button\n        onClick={onToggleExpanded}\n        className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n        title={isExpanded ? 'Collapse' : 'Expand'}\n      >\n        {isExpanded ? '▼' : '▶'}\n      </button>\n    </div>\n  </div>\n);\n\nconst DropZone: React.FC<{\n  containerType: ContainerType;\n  onDrop: (event: React.DragEvent) => void;\n  onDragOver: (event: React.DragEvent) => void;\n  hasChildren: boolean;\n}> = ({ containerType, onDrop, onDragOver, hasChildren }) => (\n  <div\n    className={cn(\n      'flex-1 flex items-center justify-center transition-all duration-200',\n      'border-2 border-dashed border-gray-600 rounded m-2',\n      'hover:border-gray-400 hover:bg-gray-800/20'\n    )}\n    onDrop={onDrop}\n    onDragOver={onDragOver}\n  >\n    {!hasChildren ? (\n      <div className=\"text-center p-8\">\n        <div className=\"text-3xl mb-2\">{getContainerIcon(containerType)}</div>\n        <div className=\"text-sm text-gray-400\">\n          Drop nodes here to add them to this {containerType}\n        </div>\n        {containerType === 'loop' && (\n          <div className=\"text-xs text-gray-500 mt-1\">Nodes will be executed repeatedly</div>\n        )}\n        {containerType === 'parallel' && (\n          <div className=\"text-xs text-gray-500 mt-1\">Nodes will be executed concurrently</div>\n        )}\n      </div>\n    ) : (\n      <div className=\"w-full h-full min-h-[200px] p-2\">\n        {/* Child nodes will be rendered here */}\n        <div className=\"text-xs text-gray-500 text-center\">Container content ({containerType})</div>\n      </div>\n    )}\n  </div>\n);\n\nexport const ContainerNode: React.FC<ContainerNodeProps> = ({ id, data, selected = false }) => {\n  const { setNodes } = useReactFlow();\n  const { addNode } = useLeanWorkflowStore();\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const { containerType, children, dimensions, isExpanded, config } = data;\n\n  const handleToggleExpanded = useCallback(() => {\n    // Update node data to toggle expanded state\n    setNodes((nodes) =>\n      nodes.map((node) =>\n        node.id === id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                isExpanded: !node.data.isExpanded,\n              },\n            }\n          : node\n      )\n    );\n  }, [id, setNodes]);\n\n  const handleEdit = useCallback(() => {}, []);\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      setIsDragOver(false);\n\n      try {\n        const data = event.dataTransfer.getData('application/reactflow');\n        if (!data) return;\n\n        const { type, nodeTypeData, integrationData } = JSON.parse(data);\n\n        // Calculate position within container\n        const containerRect = event.currentTarget.getBoundingClientRect();\n        const relativeX = event.clientX - containerRect.left;\n        const relativeY = event.clientY - containerRect.top;\n\n        // Create new node within container\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const newNode = {\n          id: newNodeId,\n          type: type,\n          position: { x: relativeX - 50, y: relativeY - 25 }, // Center on drop point\n          parameters: {},\n          data: {\n            label: nodeTypeData?.displayName || nodeTypeData?.name || type,\n            integration: integrationData?.id,\n            nodeType: nodeTypeData?.name || nodeTypeData?.id,\n            configuration: {},\n            credentials: [],\n            // Mark this node as belonging to the container\n            parentContainer: id,\n            containerType: containerType,\n          },\n        };\n\n        addNode(newNode);\n\n        // Update container to include this child\n        setNodes((nodes) =>\n          nodes.map((node) =>\n            node.id === id\n              ? {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    children: [...(node.data.children || []), newNode],\n                  },\n                }\n              : node\n          )\n        );\n      } catch (_error) {}\n    },\n    [id, containerType, addNode, setNodes]\n  );\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    // Only hide if leaving the container entirely\n    if (!event.currentTarget.contains(event.relatedTarget as HTMLElement)) {\n      setIsDragOver(false);\n    }\n  }, []);\n\n  // Calculate container handles based on type\n  const containerHandles = useMemo(() => {\n    switch (containerType) {\n      case 'loop':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [\n            { id: 'loop-start', position: Position.Right, label: 'Loop Start' },\n            { id: 'loop-end', position: Position.Bottom, label: 'Loop End' },\n          ],\n        };\n      case 'parallel':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [\n            {\n              id: 'parallel-branch',\n              position: Position.Right,\n              label: 'Branch',\n            },\n            {\n              id: 'parallel-complete',\n              position: Position.Bottom,\n              label: 'Complete',\n            },\n          ],\n        };\n      case 'conditional':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs:\n            config.conditions?.map((condition, index) => ({\n              id: condition.id,\n              position: Position.Right,\n              label: condition.label,\n              style: { top: `${20 + index * 30}%` },\n            })) || [],\n        };\n      case 'subflow':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [{ id: 'output', position: Position.Right }],\n        };\n      default:\n        return { inputs: [], outputs: [] };\n    }\n  }, [containerType, config.conditions]);\n\n  return (\n    <div\n      className={cn(\n        getContainerStyles(containerType, selected),\n        isDragOver && 'ring-2 ring-blue-400 ring-opacity-50',\n        'min-w-[300px] min-h-[200px]'\n      )}\n      style={{\n        width: dimensions.width,\n        height: isExpanded ? dimensions.height : 'auto',\n      }}\n      onDragLeave={handleDragLeave}\n    >\n      {/* Container Handles */}\n      {containerHandles.inputs.map((handle) => (\n        <Handle\n          key={handle.id}\n          type=\"target\"\n          position={handle.position}\n          id={handle.id}\n          className=\"!bg-gray-600 !border-2 !border-gray-400\"\n        />\n      ))}\n\n      {containerHandles.outputs.map((handle) => (\n        <Handle\n          key={handle.id}\n          type=\"source\"\n          position={handle.position}\n          id={handle.id}\n          className=\"!bg-gray-600 !border-2 !border-gray-400\"\n          style={'style' in handle ? handle.style : undefined}\n        >\n          {'label' in handle && handle.label && (\n            <div className=\"absolute top-0 left-full ml-2 text-xs text-gray-400 whitespace-nowrap\">\n              {handle.label}\n            </div>\n          )}\n        </Handle>\n      ))}\n\n      {/* Container Header */}\n      <ContainerHeader\n        containerType={containerType}\n        label={data.label}\n        isExpanded={isExpanded}\n        onToggleExpanded={handleToggleExpanded}\n        onEdit={handleEdit}\n      />\n\n      {/* Container Content */}\n      {isExpanded && (\n        <DropZone\n          containerType={containerType}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          hasChildren={children.length > 0}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx",
        "start": 110,
        "end": 363,
        "startLoc": {
          "line": 110,
          "column": 8,
          "position": 759
        },
        "endLoc": {
          "line": 363,
          "column": 2,
          "position": 2894
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/containernode/ContainerNode.tsx",
        "start": 115,
        "end": 368,
        "startLoc": {
          "line": 115,
          "column": 8,
          "position": 824
        },
        "endLoc": {
          "line": 368,
          "column": 2,
          "position": 2959
        }
      }
    },
    {
      "format": "tsx",
      "lines": 381,
      "fragment": "/**\n * Container Node Component\n *\n * Supports multiple container types:\n * - Loop containers for iteration workflows\n * - Parallel containers for concurrent execution\n * - Conditional containers for branching logic\n * - Subflow containers for nested workflows\n */\n\nimport type React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport type { Node } from 'reactflow';\nimport { Handle, Position, useReactFlow } from 'reactflow';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { cn } from '@/design-system/utils';\n\nexport type ContainerType = 'loop' | 'parallel' | 'conditional' | 'subflow';\n\nexport interface ContainerNodeData {\n  label: string;\n  containerType: ContainerType;\n  children: Node[];\n  config: {\n    // Loop configuration\n    loopMode?: 'forEach' | 'while' | 'count';\n    loopCondition?: string;\n    loopCount?: number;\n    loopVariable?: string;\n\n    // Parallel configuration\n    parallelMode?: 'all' | 'first' | 'race';\n    maxConcurrency?: number;\n\n    // Conditional configuration\n    conditions?: Array<{\n      id: string;\n      condition: string;\n      label: string;\n    }>;\n\n    // Subflow configuration\n    subflowId?: string;\n    passthrough?: boolean;\n  };\n\n  // Container visual properties\n  dimensions: {\n    width: number;\n    height: number;\n    minWidth: number;\n    minHeight: number;\n  };\n\n  // Auto-resize settings\n  autoResize: boolean;\n  padding: number;\n\n  // Container state\n  isExpanded: boolean;\n  isCollapsed: boolean;\n}\n\ninterface ContainerNodeProps {\n  id: string;\n  data: ContainerNodeData;\n  selected?: boolean;\n}\n\nconst getContainerStyles = (containerType: ContainerType, selected: boolean) => {\n  const baseStyles = 'relative border-2 border-dashed rounded-lg transition-all duration-200';\n\n  const typeStyles = {\n    loop: 'border-purple-400 bg-purple-900/10',\n    parallel: 'border-blue-400 bg-blue-900/10',\n    conditional: 'border-yellow-400 bg-yellow-900/10',\n    subflow: 'border-green-400 bg-green-900/10',\n  };\n\n  const selectedStyles = selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-blue-400' : '';\n\n  return cn(baseStyles, typeStyles[containerType], selectedStyles);\n};\n\nconst getContainerIcon = (containerType: ContainerType) => {\n  const icons = {\n    loop: '🔄',\n    parallel: '⚡',\n    conditional: '🔀',\n    subflow: '📦',\n  };\n  return icons[containerType];\n};\n\nconst ContainerHeader: React.FC<{\n  containerType: ContainerType;\n  label: string;\n  isExpanded: boolean;\n  onToggleExpanded: () => void;\n  onEdit: () => void;\n}> = ({ containerType, label, isExpanded, onToggleExpanded, onEdit }) => (\n  <div className=\"flex items-center justify-between p-2 bg-gray-800 rounded-t border-b border-gray-600\">\n    <div className=\"flex items-center gap-2\">\n      <span className=\"text-lg\">{getContainerIcon(containerType)}</span>\n      <span className=\"text-sm font-medium text-white capitalize\">{label || containerType}</span>\n    </div>\n\n    <div className=\"flex items-center gap-1\">\n      <button\n        onClick={onEdit}\n        className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n        title=\"Edit container\"\n      >\n        ⚙️\n      </button>\n      <button\n        onClick={onToggleExpanded}\n        className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n        title={isExpanded ? 'Collapse' : 'Expand'}\n      >\n        {isExpanded ? '▼' : '▶'}\n      </button>\n    </div>\n  </div>\n);\n\nconst DropZone: React.FC<{\n  containerType: ContainerType;\n  onDrop: (event: React.DragEvent) => void;\n  onDragOver: (event: React.DragEvent) => void;\n  hasChildren: boolean;\n}> = ({ containerType, onDrop, onDragOver, hasChildren }) => (\n  <div\n    className={cn(\n      'flex-1 flex items-center justify-center transition-all duration-200',\n      'border-2 border-dashed border-gray-600 rounded m-2',\n      'hover:border-gray-400 hover:bg-gray-800/20'\n    )}\n    onDrop={onDrop}\n    onDragOver={onDragOver}\n  >\n    {!hasChildren ? (\n      <div className=\"text-center p-8\">\n        <div className=\"text-3xl mb-2\">{getContainerIcon(containerType)}</div>\n        <div className=\"text-sm text-gray-400\">\n          Drop nodes here to add them to this {containerType}\n        </div>\n        {containerType === 'loop' && (\n          <div className=\"text-xs text-gray-500 mt-1\">Nodes will be executed repeatedly</div>\n        )}\n        {containerType === 'parallel' && (\n          <div className=\"text-xs text-gray-500 mt-1\">Nodes will be executed concurrently</div>\n        )}\n      </div>\n    ) : (\n      <div className=\"w-full h-full min-h-[200px] p-2\">\n        {/* Child nodes will be rendered here */}\n        <div className=\"text-xs text-gray-500 text-center\">Container content ({containerType})</div>\n      </div>\n    )}\n  </div>\n);\n\nexport const ContainerNode: React.FC<ContainerNodeProps> = ({ id, data, selected = false }) => {\n  const { setNodes } = useReactFlow();\n  const { addNode } = useLeanWorkflowStore();\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const { containerType, children, dimensions, isExpanded, config } = data;\n\n  const handleToggleExpanded = useCallback(() => {\n    // Update node data to toggle expanded state\n    setNodes((nodes) =>\n      nodes.map((node) =>\n        node.id === id\n          ? {\n              ...node,\n              data: {\n                ...node.data,\n                isExpanded: !node.data.isExpanded,\n              },\n            }\n          : node\n      )\n    );\n  }, [id, setNodes]);\n\n  const handleEdit = useCallback(() => {}, []);\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      setIsDragOver(false);\n\n      try {\n        const data = event.dataTransfer.getData('application/reactflow');\n        if (!data) return;\n\n        const { type, nodeTypeData, integrationData } = JSON.parse(data);\n\n        // Calculate position within container\n        const containerRect = event.currentTarget.getBoundingClientRect();\n        const relativeX = event.clientX - containerRect.left;\n        const relativeY = event.clientY - containerRect.top;\n\n        // Create new node within container\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const newNode = {\n          id: newNodeId,\n          type: type,\n          position: { x: relativeX - 50, y: relativeY - 25 }, // Center on drop point\n          parameters: {},\n          data: {\n            label: nodeTypeData?.displayName || nodeTypeData?.name || type,\n            integration: integrationData?.id,\n            nodeType: nodeTypeData?.name || nodeTypeData?.id,\n            configuration: {},\n            credentials: [],\n            // Mark this node as belonging to the container\n            parentContainer: id,\n            containerType: containerType,\n          },\n        };\n\n        addNode(newNode);\n\n        // Update container to include this child\n        setNodes((nodes) =>\n          nodes.map((node) =>\n            node.id === id\n              ? {\n                  ...node,\n                  data: {\n                    ...node.data,\n                    children: [...(node.data.children || []), newNode],\n                  },\n                }\n              : node\n          )\n        );\n      } catch (_error) {}\n    },\n    [id, containerType, addNode, setNodes]\n  );\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    // Only hide if leaving the container entirely\n    if (!event.currentTarget.contains(event.relatedTarget as HTMLElement)) {\n      setIsDragOver(false);\n    }\n  }, []);\n\n  // Calculate container handles based on type\n  const containerHandles = useMemo(() => {\n    switch (containerType) {\n      case 'loop':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [\n            { id: 'loop-start', position: Position.Right, label: 'Loop Start' },\n            { id: 'loop-end', position: Position.Bottom, label: 'Loop End' },\n          ],\n        };\n      case 'parallel':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [\n            {\n              id: 'parallel-branch',\n              position: Position.Right,\n              label: 'Branch',\n            },\n            {\n              id: 'parallel-complete',\n              position: Position.Bottom,\n              label: 'Complete',\n            },\n          ],\n        };\n      case 'conditional':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs:\n            config.conditions?.map((condition, index) => ({\n              id: condition.id,\n              position: Position.Right,\n              label: condition.label,\n              style: { top: `${20 + index * 30}%` },\n            })) || [],\n        };\n      case 'subflow':\n        return {\n          inputs: [{ id: 'input', position: Position.Left }],\n          outputs: [{ id: 'output', position: Position.Right }],\n        };\n      default:\n        return { inputs: [], outputs: [] };\n    }\n  }, [containerType, config.conditions]);\n\n  return (\n    <div\n      className={cn(\n        getContainerStyles(containerType, selected),\n        isDragOver && 'ring-2 ring-blue-400 ring-opacity-50',\n        'min-w-[300px] min-h-[200px]'\n      )}\n      style={{\n        width: dimensions.width,\n        height: isExpanded ? dimensions.height : 'auto',\n      }}\n      onDragLeave={handleDragLeave}\n    >\n      {/* Container Handles */}\n      {containerHandles.inputs.map((handle) => (\n        <Handle\n          key={handle.id}\n          type=\"target\"\n          position={handle.position}\n          id={handle.id}\n          className=\"!bg-gray-600 !border-2 !border-gray-400\"\n        />\n      ))}\n\n      {containerHandles.outputs.map((handle) => (\n        <Handle\n          key={handle.id}\n          type=\"source\"\n          position={handle.position}\n          id={handle.id}\n          className=\"!bg-gray-600 !border-2 !border-gray-400\"\n          style={'style' in handle ? handle.style : undefined}\n        >\n          {'label' in handle && handle.label && (\n            <div className=\"absolute top-0 left-full ml-2 text-xs text-gray-400 whitespace-nowrap\">\n              {handle.label}\n            </div>\n          )}\n        </Handle>\n      ))}\n\n      {/* Container Header */}\n      <ContainerHeader\n        containerType={containerType}\n        label={data.label}\n        isExpanded={isExpanded}\n        onToggleExpanded={handleToggleExpanded}\n        onEdit={handleEdit}\n      />\n\n      {/* Container Content */}\n      {isExpanded && (\n        <DropZone\n          containerType={containerType}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          hasChildren={children.length > 0}\n        />\n      )}\n\n      {/* Container Footer with Stats */}\n      <div className=\"px-2 py-1 bg-gray-800 rounded-b border-t border-gray-600\">\n        <div className=\"flex justify-between items-center text-xs text-gray-400\">\n          <span>{children.length} nodes</span>\n          {containerType === 'parallel' && config.maxConcurrency && (\n            <span>Max: {config.maxConcurrency}</span>\n          )}\n          {containerType === 'loop' && config.loopMode && <span>{config.loopMode}</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContainerNode;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx",
        "start": 1,
        "end": 381,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 381,
          "column": 2,
          "position": 3040
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/containernode/ContainerNode.tsx",
        "start": 6,
        "end": 386,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 386,
          "column": 2,
          "position": 3105
        }
      }
    },
    {
      "format": "javascript",
      "lines": 89,
      "fragment": "={iconSrc}\n            alt={displayName}\n            className=\"w-6 h-6\"\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              target.nextElementSibling?.classList.remove('hidden');\n            }}\n          />\n        );\n      }\n      return <span className=\"text-xl\">{iconSrc}</span>;\n    }\n\n    // Fallback to default icon\n    const defaultIcon = config.visual.defaultIcon;\n    if (typeof defaultIcon === 'string') {\n      // Handle special default icon types\n      switch (defaultIcon) {\n        case 'trigger-default':\n          return <div className=\"w-4 h-4 bg-green-500 rounded\"></div>;\n        case 'action-default':\n          return <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>;\n        case 'condition-default':\n          return <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>;\n        default:\n          return <span className=\"text-xl\">{defaultIcon}</span>;\n      }\n    }\n    return defaultIcon;\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        {' '}\n        {/* This container holds both the node and plus icons */}\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              ${config.visual.shape}\n              ${config.visual.dimensions.minWidth}\n              ${config.visual.dimensions.maxWidth ? config.visual.dimensions.maxWidth : ''}\n              ${config.visual.dimensions.minHeight ? config.visual.dimensions.minHeight : ''}\n              ${isSelected ? `ring-2 ring-offset-2 ring-offset-gray-900 ${config.visual.selectionRingColor}` : ''}\n              ${isHovered ? `hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ${config.visual.selectionRingColor}` : ''}\n            `}\n            style={config.visual.dimensions.style}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Use NodeHandles for all node types to ensure consistent UX */}\n            <NodeHandles\n              config={config.handles}\n              integration={data.integrationData?.id || data.integration}\n              nodeType={nodeType}\n              aiHandleConnections={aiHandleConnections}\n              hasOutgoingConnection={data.hasOutgoingConnection}\n            />\n\n            {/* Execution State Overlay */}\n            {id && <ExecutionStateOverlay nodeId={id} />}\n\n            {/* Node Icon */}\n            <div className=\"flex items-center justify-center\">{renderIcon()}</div>\n\n            {/* Node Toolbar */}\n            <NodeToolbar\n              visible={toolbarVisible}\n              onPlay={handlePlay}\n              onStop={handleStop}\n              onDelete={handleDelete}\n              onMenuToggle={() => setShowThreeDotMenu(!showThreeDotMenu)}\n            />\n\n            {/* Three Dot Menu */}\n            <NodeMenu\n              visible={showThreeDotMenu}\n              onClose={() => setShowThreeDotMenu(false)}\n              onOpen={handleOpen}\n              onTest={handleTest}\n              onRename={handleRename}\n              onDeactivate={handleDeactivate}\n              onCopy={handleCopy}\n              onDuplicate={handleDuplicate}\n              onSelectAll={handleSelectAll}\n              onClearSelection={handleClearSelection}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx",
        "start": 235,
        "end": 323,
        "startLoc": {
          "line": 235,
          "column": 4,
          "position": 1881
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2582
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index/index.tsx",
        "start": 241,
        "end": 329,
        "startLoc": {
          "line": 241,
          "column": 4,
          "position": 1959
        },
        "endLoc": {
          "line": 329,
          "column": 2,
          "position": 2660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 339,
      "fragment": ";\nimport NodeHandles from './NodeHandles';\nimport NodeMenu from './NodeMenu';\nimport NodeToolbar from './NodeToolbar';\n\n// Base props interface that all nodes extend\nexport interface BaseNodeData {\n  label: string;\n  integration?: string;\n  integrationData?: {\n    id: string;\n    name: string;\n    icon: string;\n    category: string;\n  };\n  nodeTypeData?:\n    | IntegrationNodeType\n    | {\n        id: string;\n        name: string;\n        type: string;\n        description: string;\n      };\n  config?: Record<string, unknown>;\n  parameters?: Record<string, unknown>;\n  icon?: string;\n  name?: string;\n  description?: string;\n  onDelete?: (nodeId: string) => void;\n  onConnect?: (sourceNodeId: string) => void;\n  onOpenProperties?: (nodeId: string) => void;\n  hasOutgoingConnection?: boolean;\n  isSelected?: boolean;\n  // For AI agents, track connections to specific handles\n  edges?: Array<{\n    source: string;\n    sourceHandle?: string;\n    target: string;\n    targetHandle?: string;\n  }>;\n  // Condition node specific properties\n  outputs?: Array<{\n    id: string;\n    label: string;\n    position: { top: string };\n    color: string;\n    condition?: string;\n  }>;\n  nodeSize?: {\n    width: number;\n    height: number;\n  };\n  conditionRules?: any[];\n}\n\nexport interface BaseNodeProps {\n  id?: string;\n  data: BaseNodeData;\n  selected?: boolean;\n}\n\n// Handle configuration for different node types\nexport interface HandleConfig {\n  input?: {\n    show: boolean;\n    position?: { top?: string; left?: string };\n  };\n  outputs?: Array<{\n    id: string;\n    position: { top?: string; right?: string };\n    color?: string;\n    label?: string;\n    removable?: boolean;\n  }>;\n  dynamicOutputs?: boolean;\n  maxOutputs?: number;\n  hasAIHandles?: boolean; // Flag to indicate AI-specific handles needed\n}\n\n// Visual configuration for different node types\nexport interface VisualConfig {\n  shape: string; // CSS classes for border-radius\n  defaultIcon: string | React.ReactNode; // Fallback icon\n  selectionRingColor: string; // CSS class for selection ring\n  dimensions: {\n    minWidth: string;\n    maxWidth?: string;\n    minHeight?: string;\n    // Support for dynamic inline styles\n    style?: React.CSSProperties;\n  };\n}\n\nexport interface BaseNodeConfig {\n  handles: HandleConfig;\n  visual: VisualConfig;\n}\n\ninterface BaseNodeComponentProps extends BaseNodeProps {\n  config: BaseNodeConfig;\n  children?: React.ReactNode;\n}\n\nconst BaseNode: React.FC<BaseNodeComponentProps> = ({ id, data, selected, config, children }) => {\n  const isSelected = data.isSelected || selected;\n  const displayName = data.name || data.label;\n  const integration = data.integrationData;\n\n  // Determine node type based on available data\n  const nodeType = React.useMemo(() => {\n    // Check if this is a condition node based on having conditionRules\n    if (data.conditionRules || config.handles.dynamicOutputs) {\n      return 'condition';\n    }\n    // Check if this is an AI agent\n    if (integration?.id === 'ai-agent' || config.handles.hasAIHandles) {\n      return 'ai-agent';\n    }\n    // Default to action\n    return 'action';\n  }, [\n    data.conditionRules,\n    config.handles.dynamicOutputs,\n    config.handles.hasAIHandles,\n    integration?.id,\n  ]);\n\n  // For AI agents, calculate which handles have incoming connections\n  const aiHandleConnections = React.useMemo(() => {\n    if (!config.handles.hasAIHandles || !data.edges || !id) {\n      return {};\n    }\n\n    const connections = {\n      ai_languageModel: false,\n      ai_memory: false,\n      ai_tool: false,\n    };\n\n    // Check for incoming connections to each AI handle\n    data.edges.forEach((edge) => {\n      if (edge.target === id) {\n        switch (edge.targetHandle) {\n          case 'ai_languageModel':\n          case 'plus-ai_languageModel':\n            connections.ai_languageModel = true;\n            break;\n          case 'ai_memory':\n          case 'plus-ai_memory':\n            connections.ai_memory = true;\n            break;\n          case 'ai_tool':\n          case 'plus-ai_tool':\n            connections.ai_tool = true;\n            break;\n        }\n      }\n    });\n\n    return connections;\n  }, [config.handles.hasAIHandles, data.edges, id]);\n\n  // Common state\n  const [isHovered, setIsHovered] = useState(false);\n  const [showThreeDotMenu, setShowThreeDotMenu] = useState(false);\n  const [toolbarVisible, setToolbarVisible] = useState(false);\n  const hideTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  // Common handlers\n  const handleDelete = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    if (id && data.onDelete) {\n      data.onDelete(id);\n    }\n  };\n\n  const handlePlay = () => {};\n\n  const handleStop = () => {};\n\n  const handleOpen = () => {\n    if (id && data.onOpenProperties) {\n      data.onOpenProperties(id);\n    }\n  };\n\n  const handleTest = () => {};\n\n  const handleRename = () => {};\n\n  const handleDeactivate = () => {};\n\n  const handleCopy = () => {};\n\n  const handleDuplicate = () => {};\n\n  const handleSelectAll = () => {};\n\n  const handleClearSelection = () => {};\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    // Only handle double-click if it's on the node itself, not on toolbar buttons\n    event.stopPropagation();\n    if (id && data.onOpenProperties) {\n      data.onOpenProperties(id);\n    }\n  };\n\n  const handleMouseEnter = () => {\n    if (hideTimeoutRef.current) {\n      clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = null;\n    }\n    setIsHovered(true);\n    setToolbarVisible(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    hideTimeoutRef.current = setTimeout(() => {\n      setToolbarVisible(false);\n    }, 1000);\n  };\n\n  // Render icon\n  const renderIcon = () => {\n    if (data.icon || integration?.icon) {\n      const iconSrc = data.icon || integration?.icon;\n      if (typeof iconSrc === 'string' && (iconSrc.startsWith('http') || iconSrc.startsWith('/'))) {\n        return (\n          <img\n            src={iconSrc}\n            alt={displayName}\n            className=\"w-6 h-6\"\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              target.nextElementSibling?.classList.remove('hidden');\n            }}\n          />\n        );\n      }\n      return <span className=\"text-xl\">{iconSrc}</span>;\n    }\n\n    // Fallback to default icon\n    const defaultIcon = config.visual.defaultIcon;\n    if (typeof defaultIcon === 'string') {\n      // Handle special default icon types\n      switch (defaultIcon) {\n        case 'trigger-default':\n          return <div className=\"w-4 h-4 bg-green-500 rounded\"></div>;\n        case 'action-default':\n          return <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>;\n        case 'condition-default':\n          return <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>;\n        default:\n          return <span className=\"text-xl\">{defaultIcon}</span>;\n      }\n    }\n    return defaultIcon;\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        {' '}\n        {/* This container holds both the node and plus icons */}\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              ${config.visual.shape}\n              ${config.visual.dimensions.minWidth}\n              ${config.visual.dimensions.maxWidth ? config.visual.dimensions.maxWidth : ''}\n              ${config.visual.dimensions.minHeight ? config.visual.dimensions.minHeight : ''}\n              ${isSelected ? `ring-2 ring-offset-2 ring-offset-gray-900 ${config.visual.selectionRingColor}` : ''}\n              ${isHovered ? `hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ${config.visual.selectionRingColor}` : ''}\n            `}\n            style={config.visual.dimensions.style}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Use NodeHandles for all node types to ensure consistent UX */}\n            <NodeHandles\n              config={config.handles}\n              integration={data.integrationData?.id || data.integration}\n              nodeType={nodeType}\n              aiHandleConnections={aiHandleConnections}\n              hasOutgoingConnection={data.hasOutgoingConnection}\n            />\n\n            {/* Execution State Overlay */}\n            {id && <ExecutionStateOverlay nodeId={id} />}\n\n            {/* Node Icon */}\n            <div className=\"flex items-center justify-center\">{renderIcon()}</div>\n\n            {/* Node Toolbar */}\n            <NodeToolbar\n              visible={toolbarVisible}\n              onPlay={handlePlay}\n              onStop={handleStop}\n              onDelete={handleDelete}\n              onMenuToggle={() => setShowThreeDotMenu(!showThreeDotMenu)}\n            />\n\n            {/* Three Dot Menu */}\n            <NodeMenu\n              visible={showThreeDotMenu}\n              onClose={() => setShowThreeDotMenu(false)}\n              onOpen={handleOpen}\n              onTest={handleTest}\n              onRename={handleRename}\n              onDeactivate={handleDeactivate}\n              onCopy={handleCopy}\n              onDuplicate={handleDuplicate}\n              onSelectAll={handleSelectAll}\n              onClearSelection={handleClearSelection}\n            />\n\n            {/* Custom children for node-specific content */}\n            {children}\n          </div>\n        </div>\n      </div>\n\n      {/* Only show label below node if it's not using AI handles (AI agents show label inside) */}\n      {!config.handles.hasAIHandles && (\n        <div className=\"mt-2 text-white text-sm font-medium ps-5 max-w-[100px] truncate\">\n          {displayName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BaseNode;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx",
        "start": 4,
        "end": 342,
        "startLoc": {
          "line": 4,
          "column": 30,
          "position": 40
        },
        "endLoc": {
          "line": 342,
          "column": 2,
          "position": 2674
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index/index.tsx",
        "start": 10,
        "end": 348,
        "startLoc": {
          "line": 10,
          "column": 19,
          "position": 118
        },
        "endLoc": {
          "line": 348,
          "column": 2,
          "position": 2752
        }
      }
    },
    {
      "format": "javascript",
      "lines": 369,
      "fragment": "={Position.Left}\n          id=\"main\"\n          className=\"w-3 h-3 bg-gray-600 border-2 border-gray-800 hover:bg-gray-500 transition-colors\"\n          style={{ left: '-6px', top: isAIAgent ? '50%' : '50%' }}\n        />\n      )}\n\n      {/* AI-specific handles for AI Agent nodes - positioned at bottom with vertical connection lines */}\n      {isAIAgent && (\n        <>\n          {/* Vertical connection lines for AI handles - only show if not connected */}\n          {!aiHandleConnections.ai_languageModel && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '25%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n          {!aiHandleConnections.ai_memory && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n          {!aiHandleConnections.ai_tool && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '75%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n\n          {/* Plus Icons for AI handles - positioned below the node - only show if not connected */}\n          {!aiHandleConnections.ai_languageModel && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_languageModel\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '25%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-blue-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {!aiHandleConnections.ai_memory && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_memory\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-orange-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {!aiHandleConnections.ai_tool && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_tool\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '75%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-teal-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {/* Actual functional AI handles (visible at bottom edge of node) */}\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_languageModel\"\n            className={getHandleStyle('ai_languageModel', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '25%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_memory\"\n            className={getHandleStyle('ai_memory', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '50%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_tool\"\n            className={getHandleStyle('ai_tool', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '75%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n\n          {/* Labels for bottom handles - positioned below plus icons */}\n          <div\n            className=\"absolute text-xs text-blue-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '25%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            LLM\n          </div>\n          <div\n            className=\"absolute text-xs text-orange-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '50%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            Mem\n          </div>\n          <div\n            className=\"absolute text-xs text-teal-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '75%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            Tool\n          </div>\n        </>\n      )}\n\n      {/* Output Handles with Plus Icons and Connection Lines */}\n      {config.outputs?.map((output) => {\n        return (\n          <React.Fragment key={output.id}>\n            {/* Actual Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={output.id}\n              className={getHandleStyle(output.id, nodeType)}\n              style={{\n                right: '-6px',\n                top: output.position.top || '50%',\n                transform: 'translateY(-50%)',\n                zIndex: 10, // Ensure handles are above other elements\n              }}\n            />\n\n            {/* Output Label */}\n            {output.label && (\n              <div\n                className=\"absolute text-xs text-gray-400 font-medium pointer-events-none\"\n                style={{\n                  right: '-60px',\n                  top: output.position.top || '40%',\n                  transform: 'translateY(-50%)',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {output.label}\n              </div>\n            )}\n          </React.Fragment>\n        );\n      })}\n\n      {/* Condition node specific connection lines and draggable plus icons */}\n      {nodeType === 'condition' &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`condition-plus-${output.id}`}>\n            {/* Connection Line for Condition Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Condition */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (All node types except AI Agent and Condition - they have their own) */}\n      {!isAIAgent &&\n        nodeType !== 'condition' &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Standard Outputs */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Standard Outputs */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */}\n      {isAIAgent &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Plus Icon Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 64,
        "end": 432,
        "startLoc": {
          "line": 64,
          "column": 9,
          "position": 398
        },
        "endLoc": {
          "line": 432,
          "column": 2,
          "position": 2400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 64,
        "end": 337,
        "startLoc": {
          "line": 64,
          "column": 9,
          "position": 398
        },
        "endLoc": {
          "line": 337,
          "column": 2,
          "position": 1856
        }
      }
    },
    {
      "format": "tsx",
      "lines": 456,
      "fragment": "import React from 'react';\nimport { Handle, Position } from 'reactflow';\nimport type { HandleConfig } from './index';\n\ninterface NodeHandlesProps {\n  config: HandleConfig;\n  nodeType?: string;\n  integration?: string;\n  // Connection information for AI handles\n  aiHandleConnections?: {\n    ai_languageModel?: boolean;\n    ai_memory?: boolean;\n    ai_tool?: boolean;\n  };\n  // Connection state for output handles\n  hasOutgoingConnection?: boolean;\n}\n\n// Handle styling based on connection type and node type\nconst getHandleStyle = (handleId: string, nodeType?: string) => {\n  // AI-specific handle styling\n  switch (handleId) {\n    case 'ai_languageModel':\n      return 'w-3 h-3 bg-blue-400 border-2 border-white rounded-full hover:bg-blue-300 transition-colors';\n    case 'ai_embedding':\n      return 'w-3 h-3 bg-indigo-400 border-2 border-white rounded-full hover:bg-indigo-300 transition-colors';\n    case 'ai_vectorStore':\n      return 'w-3 h-3 bg-purple-400 border-2 border-white rounded-full hover:bg-purple-300 transition-colors';\n    case 'ai_tool':\n      return 'w-3 h-3 bg-teal-400 border-2 border-white rounded-full hover:bg-teal-300 transition-colors';\n    case 'ai_memory':\n      return 'w-3 h-3 bg-orange-400 border-2 border-white rounded-full hover:bg-orange-300 transition-colors';\n    default:\n      // Condition node handles get different styling\n      if (nodeType === 'condition') {\n        if (handleId === 'default') {\n          return 'w-3 h-3 bg-gray-500 border-2 border-gray-700 rounded-full hover:bg-gray-400 transition-colors';\n        }\n        return 'w-3 h-3 bg-green-500 border-2 border-green-700 rounded-full hover:bg-green-400 transition-colors';\n      }\n      // Default handle styling\n      return 'w-3 h-3 bg-gray-600 border-2 border-gray-800 rounded-full hover:bg-gray-500 transition-colors';\n  }\n};\n\nconst NodeHandles: React.FC<NodeHandlesProps> = ({\n  config,\n  integration,\n  aiHandleConnections = {},\n  hasOutgoingConnection,\n  nodeType,\n}) => {\n  // Determine if this node should have AI handles based on integration\n  const isAIAgent = integration === 'ai-agent';\n  // Determine if this node should have plus icons for outputs\n  // Show for all node types\n\n  return (\n    <>\n      {/* Standard Input Handle - positioned properly for AI agents */}\n      {config.input?.show && (\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id=\"main\"\n          className=\"w-3 h-3 bg-gray-600 border-2 border-gray-800 hover:bg-gray-500 transition-colors\"\n          style={{ left: '-6px', top: isAIAgent ? '50%' : '50%' }}\n        />\n      )}\n\n      {/* AI-specific handles for AI Agent nodes - positioned at bottom with vertical connection lines */}\n      {isAIAgent && (\n        <>\n          {/* Vertical connection lines for AI handles - only show if not connected */}\n          {!aiHandleConnections.ai_languageModel && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '25%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n          {!aiHandleConnections.ai_memory && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n          {!aiHandleConnections.ai_tool && (\n            <div\n              className=\"absolute w-px h-14 bg-gray-400\"\n              style={{\n                bottom: '-56px',\n                left: '75%',\n                transform: 'translateX(-50%)',\n                zIndex: -1,\n              }}\n            />\n          )}\n\n          {/* Plus Icons for AI handles - positioned below the node - only show if not connected */}\n          {!aiHandleConnections.ai_languageModel && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_languageModel\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '25%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-blue-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {!aiHandleConnections.ai_memory && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_memory\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-orange-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {!aiHandleConnections.ai_tool && (\n            <Handle\n              type=\"target\"\n              position={Position.Bottom}\n              id=\"plus-ai_tool\"\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                bottom: '-58px',\n                left: '75%',\n                transform: 'translateX(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-teal-400 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          )}\n\n          {/* Actual functional AI handles (visible at bottom edge of node) */}\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_languageModel\"\n            className={getHandleStyle('ai_languageModel', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '25%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_memory\"\n            className={getHandleStyle('ai_memory', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '50%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n          <Handle\n            type=\"target\"\n            position={Position.Bottom}\n            id=\"ai_tool\"\n            className={getHandleStyle('ai_tool', nodeType)}\n            style={{\n              bottom: '-6px',\n              left: '75%',\n              transform: 'translateX(-50%)',\n            }}\n          />\n\n          {/* Labels for bottom handles - positioned below plus icons */}\n          <div\n            className=\"absolute text-xs text-blue-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '25%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            LLM\n          </div>\n          <div\n            className=\"absolute text-xs text-orange-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '50%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            Mem\n          </div>\n          <div\n            className=\"absolute text-xs text-teal-400 font-medium pointer-events-none\"\n            style={{\n              bottom: '-75px',\n              left: '75%',\n              transform: 'translateX(-50%)',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            Tool\n          </div>\n        </>\n      )}\n\n      {/* Output Handles with Plus Icons and Connection Lines */}\n      {config.outputs?.map((output) => {\n        return (\n          <React.Fragment key={output.id}>\n            {/* Actual Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={output.id}\n              className={getHandleStyle(output.id, nodeType)}\n              style={{\n                right: '-6px',\n                top: output.position.top || '50%',\n                transform: 'translateY(-50%)',\n                zIndex: 10, // Ensure handles are above other elements\n              }}\n            />\n\n            {/* Output Label */}\n            {output.label && (\n              <div\n                className=\"absolute text-xs text-gray-400 font-medium pointer-events-none\"\n                style={{\n                  right: '-60px',\n                  top: output.position.top || '40%',\n                  transform: 'translateY(-50%)',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {output.label}\n              </div>\n            )}\n          </React.Fragment>\n        );\n      })}\n\n      {/* Condition node specific connection lines and draggable plus icons */}\n      {nodeType === 'condition' &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`condition-plus-${output.id}`}>\n            {/* Connection Line for Condition Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Condition */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (All node types except AI Agent and Condition - they have their own) */}\n      {!isAIAgent &&\n        nodeType !== 'condition' &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Standard Outputs */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Standard Outputs */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */}\n      {isAIAgent &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Plus Icon Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n    </>\n  );\n};\n\nexport default NodeHandles;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 1,
        "end": 456,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 456,
          "column": 2,
          "position": 2509
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodehandles/NodeHandles.tsx",
        "start": 1,
        "end": 456,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 456,
          "column": 2,
          "position": 2509
        }
      }
    },
    {
      "format": "typescript",
      "lines": 90,
      "fragment": "this._name = name;\n    this._updatedAt = new Date();\n\n    this.addEvent(\n      new TenantUpdatedEvent({\n        tenantId: this.id,\n        changes: { name },\n      })\n    );\n  }\n\n  changePlan(newPlan: TenantPlan): void {\n    if (this._status === TenantStatus.SUSPENDED) {\n      throw new InvalidTenantStateException('Cannot change plan for suspended tenant');\n    }\n\n    const oldPlan = this._plan;\n    this._plan = newPlan;\n    this._updatedAt = new Date();\n\n    this.addEvent(\n      new PlanChangedEvent({\n        tenantId: this.id,\n        oldPlan: oldPlan.type,\n        newPlan: newPlan.type,\n        changedBy: this.ownerId,\n      })\n    );\n  }\n\n  updateBillingInfo(billingInfo: BillingInfo): void {\n    this._billingInfo = billingInfo;\n    this._updatedAt = new Date();\n\n    this.addEvent(\n      new TenantUpdatedEvent({\n        tenantId: this.id,\n        changes: { billingInfo: billingInfo.toJSON() },\n      })\n    );\n  }\n\n  configureSso(ssoConfig: SSOConfig): void {\n    if (!this._plan.features.sso) {\n      throw new InvalidTenantStateException('SSO is not available in current plan');\n    }\n\n    this._ssoConfig = ssoConfig;\n    this._updatedAt = new Date();\n\n    this.addEvent(\n      new TenantUpdatedEvent({\n        tenantId: this.id,\n        changes: { ssoEnabled: true, ssoProvider: ssoConfig.provider },\n      })\n    );\n  }\n\n  updateSettings(settings: Partial<TenantSettings>): void {\n    this._settings = this._settings.merge(settings);\n    this._updatedAt = new Date();\n\n    this.addEvent(\n      new TenantUpdatedEvent({\n        tenantId: this.id,\n        changes: { settings },\n      })\n    );\n  }\n\n  suspend(reason: string): void {\n    if (this._status === TenantStatus.SUSPENDED) {\n      throw new InvalidTenantStateException('Tenant is already suspended');\n    }\n\n    this._status = TenantStatus.SUSPENDED;\n    this._updatedAt = new Date();\n    this._metadata.suspendedAt = new Date();\n    this._metadata.suspensionReason = reason;\n\n    this.addEvent(\n      new TenantSuspendedEvent({\n        tenantId: this.id,\n        reason,\n        suspendedAt: new Date(),\n      })\n    );\n  }\n\n  activate():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity.ts",
        "start": 133,
        "end": 222,
        "startLoc": {
          "line": 133,
          "column": 5,
          "position": 1161
        },
        "endLoc": {
          "line": 222,
          "column": 2,
          "position": 1839
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity/tenant-properties.ts",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ": void {\n    if (this._status === TenantStatus.ACTIVE) {\n      throw new InvalidTenantStateException('Tenant is already active');\n    }\n\n    this._status = TenantStatus.ACTIVE;\n    this._updatedAt = new Date();\n    delete this._metadata.suspendedAt;\n    delete this._metadata.suspensionReason;\n\n    this.addEvent(\n      new TenantUpdatedEvent({\n        tenantId: this.id,\n        changes: { status: TenantStatus.ACTIVE },\n      })\n    );\n  }\n\n  checkLimit(resource: string, currentUsage: number): void {\n    const limit = this._plan.limits[resource];\n    if (limit && currentUsage >= limit) {\n      throw new TenantLimitExceededException(\n        `Tenant has exceeded ${resource} limit: ${currentUsage}/${limit}`\n      );",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity.ts",
        "start": 222,
        "end": 245,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 1839
        },
        "endLoc": {
          "line": 245,
          "column": 2,
          "position": 2053
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity/tenant-properties.ts",
        "start": 100,
        "end": 126,
        "startLoc": {
          "line": 100,
          "column": 1,
          "position": 670
        },
        "endLoc": {
          "line": 126,
          "column": 2,
          "position": 883
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ": Record<string, any> {\n    return {\n      id: this._id,\n      name: this._name,\n      slug: this._slug,\n      organizationId: this._organizationId,\n      plan: this._plan.toJSON(),\n      billingInfo: this._billingInfo?.toJSON(),\n      ssoConfig: this._ssoConfig?.toJSON(),\n      settings: this._settings.toJSON(),\n      status: this._status,\n      createdAt: this._createdAt,\n      updatedAt: this._updatedAt,\n      ownerId: this._ownerId,\n      metadata: this._metadata,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity.ts",
        "start": 261,
        "end": 275,
        "startLoc": {
          "line": 261,
          "column": 2,
          "position": 2157
        },
        "endLoc": {
          "line": 275,
          "column": 2,
          "position": 2307
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/domain/entities/tenant.entity/tenant-methods.ts",
        "start": 22,
        "end": 38,
        "startLoc": {
          "line": 22,
          "column": 1,
          "position": 101
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 253
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "(id: string): Promise<ServiceResult<Tenant>> {\n    return this.execute(async () => {\n      const tenant = await this.repository.findById(id);\n      if (!tenant) {\n        throw new Error(`Tenant not found with ID ${id}`);\n      }\n\n      if (tenant.status === 'inactive'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/application/services/tenant.service.ts",
        "start": 98,
        "end": 105,
        "startLoc": {
          "line": 98,
          "column": 11,
          "position": 711
        },
        "endLoc": {
          "line": 105,
          "column": 11,
          "position": 802
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/application/services/tenant.service.ts",
        "start": 66,
        "end": 73,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 480
        },
        "endLoc": {
          "line": 73,
          "column": 9,
          "position": 571
        }
      }
    },
    {
      "format": "javascript",
      "lines": 187,
      "fragment": "={onMouseEnter} onMouseLeave={onMouseLeave}>\n      {/* Enhanced Node Toolbar */}\n      <EnhancedNodeToolbar\n        visible={isHovered && selected}\n        nodeId={nodeId}\n        actions={toolbarActions}\n        onActionClick={(actionId) => handleToolbarAction(actionId)}\n        theme={gmailTheme}\n      />\n\n      {/* Gmail Trigger Input Handle (Hidden - triggers don't have inputs) */}\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id=\"output_0\"\n        style={{\n          background: '#ea4335',\n          width: 12,\n          height: 12,\n          top: '50%',\n          border: '2px solid #fff',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        }}\n      />\n\n      <Card\n        size=\"small\"\n        variant=\"outlined\"\n        onDoubleClick={handleDoubleClick}\n        className={`\n          gmail-trigger-node\n          ${selected ? 'node-selected' : ''}\n          ${isConnected ? 'node-connected' : 'node-disconnected'}\n          transition-all duration-200 hover:shadow-md cursor-pointer\n        `}\n        style={{\n          minWidth: 280,\n          maxWidth: 320,\n          borderColor: selected ? '#ea4335' : isConnected ? '#34a853' : '#fbbc04',\n          borderWidth: selected ? 2 : 1,\n          backgroundColor: nodeData.disabled ? '#f8f9fa' : '#fff',\n          boxShadow: selected ? '0 4px 12px rgba(234, 67, 53, 0.15)' : undefined,\n        }}\n        styles={{ body: { padding: '16px' } }}\n      >\n        {/* Header Section */}\n        <div className=\"flex items-start gap-3 mb-3\">\n          {/* Gmail Logo Avatar */}\n          <Avatar\n            size={36}\n            style={{\n              backgroundColor: '#ea4335',\n              flexShrink: 0,\n            }}\n          >\n            <MailOutlined style={{ fontSize: '20px', color: '#fff' }} />\n          </Avatar>\n\n          {/* Node Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <div className=\"font-semibold text-sm truncate flex-1\">\n                {nodeData.name || 'Gmail Trigger'}\n              </div>\n              {isConnected ? (\n                <CheckCircleOutlined className=\"text-green-500 text-xs\" />\n              ) : (\n                <ExclamationCircleOutlined className=\"text-yellow-500 text-xs\" />\n              )}\n\n              {/* Standard Edit/Settings Buttons */}\n              <div className=\"flex gap-1 ml-2\">\n                <Tooltip title=\"Edit\">\n                  <Button\n                    size=\"small\"\n                    type=\"text\"\n                    icon={<EditOutlined />}\n                    onClick={handleEditClick}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  />\n                </Tooltip>\n                <Tooltip title=\"Settings\">\n                  <Button\n                    size=\"small\"\n                    type=\"text\"\n                    icon={<SettingOutlined />}\n                    onClick={handleSettingsClick}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  />\n                </Tooltip>\n              </div>\n            </div>\n\n            <div className=\"text-xs text-gray-500 mb-2\">\n              {isConnected ? 'Connected to Gmail' : 'Not connected'}\n            </div>\n\n            {/* Connection Status */}\n            <div className=\"flex gap-1 mb-2\">\n              <Tag color={isConnected ? 'green' : 'orange'} style={{ margin: 0, fontSize: '10px' }}>\n                {isConnected ? 'Connected' : 'Setup Required'}\n              </Tag>\n              {isConnected && (\n                <Tag color=\"blue\" style={{ margin: 0, fontSize: '10px' }}>\n                  <ClockCircleOutlined style={{ marginRight: '2px' }} />\n                  {pollFrequency}\n                </Tag>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Email Statistics */}\n        {isConnected && (\n          <div className=\"bg-gray-50 rounded-lg p-3 mb-3\">\n            <div className=\"grid grid-cols-3 gap-2 text-center\">\n              <div>\n                <div className=\"text-lg font-semibold text-blue-600\">{emailCount}</div>\n                <div className=\"text-xs text-gray-500\">Recent</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-red-600\">{unreadCount}</div>\n                <div className=\"text-xs text-gray-500\">Unread</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-green-600\">{activeFilters}</div>\n                <div className=\"text-xs text-gray-500\">Filters</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Configuration Summary */}\n        <div className=\"space-y-2\">\n          {/* Filters Summary */}\n          {activeFilters > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <FilterOutlined className=\"text-blue-500 text-xs\" />\n              <span className=\"text-xs text-gray-600\">\n                {activeFilters} filter{activeFilters !== 1 ? 's' : ''} active\n              </span>\n            </div>\n          )}\n\n          {/* Output Format */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs text-gray-500\">Output:</span>\n            <Badge\n              count={simplify ? 'Simplified' : 'Full'}\n              style={{\n                backgroundColor: simplify ? '#52c41a' : '#1890ff',\n                fontSize: '9px',\n                height: '16px',\n                lineHeight: '14px',\n              }}\n            />\n          </div>\n\n          {/* Advanced Options */}\n          {options.downloadAttachments && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs text-gray-500\">Attachments:</span>\n              <Badge\n                count=\"Download\"\n                style={{\n                  backgroundColor: '#fa8c16',\n                  fontSize: '9px',\n                  height: '16px',\n                  lineHeight: '14px',\n                }}\n              />\n            </div>\n          )}\n\n          {options.markAsRead && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs text-gray-500\">Auto-mark:</span>\n              <Badge\n                count=\"Read\"\n                style={{\n                  backgroundColor: '#13c2c2',\n                  fontSize: '9px',\n                  height: '16px',\n                  lineHeight: '14px',\n                }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx",
        "start": 137,
        "end": 323,
        "startLoc": {
          "line": 137,
          "column": 13,
          "position": 1143
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2490
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailtriggernodebody/GmailTriggerNodeBody.tsx",
        "start": 140,
        "end": 326,
        "startLoc": {
          "line": 140,
          "column": 13,
          "position": 1182
        },
        "endLoc": {
          "line": 326,
          "column": 2,
          "position": 2529
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "import {\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  EditOutlined,\n  ExclamationCircleOutlined,\n  FilterOutlined,\n  MailOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { Avatar, Badge, Button, Card, Tag, Tooltip } from 'antd';\nimport type React from 'react';\nimport { Handle, Position } from 'reactflow';\nimport type { CustomNodeBodyProps } from '../../../../app/node-extensions/types';\nimport { gmailTheme } from '../../../themes/gmailTheme';\nimport EnhancedNodeToolbar from '../../common/EnhancedNodeToolbar';\n\n/**\n * Gmail Trigger Node Body Component\n * Specialized UI for Gmail trigger nodes with connection status, polling indicators, and email statistics\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 4,
          "position": 132
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailtriggernodebody/GmailTriggerNodeBody.tsx",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 7,
          "position": 131
        }
      }
    },
    {
      "format": "tsx",
      "lines": 345,
      "fragment": ";\n\n/**\n * Gmail Trigger Node Body Component\n * Specialized UI for Gmail trigger nodes with connection status, polling indicators, and email statistics\n */\nconst GmailTriggerNodeBody: React.FC<CustomNodeBodyProps> = ({\n  nodeId,\n  nodeData,\n  selected,\n  isHovered,\n  onMouseEnter,\n  onMouseLeave,\n  onDelete: _onDelete,\n  onEdit,\n  onOpenProperties,\n}) => {\n  // Extract Gmail-specific configuration\n  const filters = nodeData.parameters?.filters || {};\n  const pollTimes = nodeData.parameters?.pollTimes || { mode: 'everyMinute' };\n  const options = nodeData.parameters?.options || {};\n  const simplify = nodeData.parameters?.simplify !== false;\n  const credential = nodeData.parameters?.credential;\n\n  // Mock connection status - in real implementation, this would come from credential store\n  const isConnected = Boolean(credential);\n  const lastSync = nodeData.lastSync || new Date().toISOString();\n  const emailCount = nodeData.emailCount || 0;\n  const unreadCount = nodeData.unreadCount || 0;\n\n  // Get polling frequency display\n  const getPollFrequencyDisplay = (pollTimes: any) => {\n    const mode = pollTimes.mode || 'everyMinute';\n    switch (mode) {\n      case 'everyMinute':\n        return 'Every Minute';\n      case 'everyHour':\n        return `Every Hour (${pollTimes.minute || 0}m)`;\n      case 'everyDay':\n        return `Daily ${pollTimes.hour || 9}:${String(pollTimes.minute || 0).padStart(2, '0')}`;\n      case 'everyWeek':\n        return `Weekly ${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][pollTimes.weekday || 1]}`;\n      case 'everyMonth':\n        return `Monthly (Day ${pollTimes.dayOfMonth || 1})`;\n      case 'customInterval':\n        return `Every ${pollTimes.intervalMinutes || 5}m`;\n      case 'customCron':\n        return 'Custom Cron';\n      default:\n        return 'Every Minute';\n    }\n  };\n\n  // Get active filters count\n  const getActiveFiltersCount = (filters: any) => {\n    let count = 0;\n    if (filters.search) count++;\n    if (filters.senderFilter) count++;\n    if (filters.subjectFilter) count++;\n    if (filters.labelNamesOrIds?.length > 0) count++;\n    if (filters.readStatus && filters.readStatus !== 'all') count++;\n    if (filters.hasAttachment && filters.hasAttachment !== 'any') count++;\n    if (filters.dateRange?.enabled) count++;\n    return count;\n  };\n\n  const activeFilters = getActiveFiltersCount(filters);\n  const pollFrequency = getPollFrequencyDisplay(pollTimes);\n\n  // Enhanced toolbar actions for Gmail\n  const toolbarActions = [\n    {\n      id: 'test-connection',\n      icon: 'SyncOutlined',\n      label: 'Test Connection',\n      action: 'testConnection',\n    },\n    {\n      id: 'view-emails',\n      icon: 'EyeOutlined',\n      label: 'Preview Emails',\n      action: 'previewEmails',\n    },\n    {\n      id: 'configure-filters',\n      icon: 'FilterOutlined',\n      label: 'Configure Filters',\n      action: 'configureFilters',\n    },\n  ];\n\n  const handleToolbarAction = (action: string) => {\n    switch (action) {\n      case 'testConnection':\n        // TODO: Implement connection test\n        break;\n      case 'previewEmails':\n        // TODO: Implement email preview\n        break;\n      case 'configureFilters':\n        onOpenProperties?.();\n        break;\n    }\n  };\n\n  // Event handlers with debug logging\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  const handleEditClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onEdit?.();\n  };\n\n  const handleSettingsClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"relative\" onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n      {/* Enhanced Node Toolbar */}\n      <EnhancedNodeToolbar\n        visible={isHovered && selected}\n        nodeId={nodeId}\n        actions={toolbarActions}\n        onActionClick={(actionId) => handleToolbarAction(actionId)}\n        theme={gmailTheme}\n      />\n\n      {/* Gmail Trigger Input Handle (Hidden - triggers don't have inputs) */}\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id=\"output_0\"\n        style={{\n          background: '#ea4335',\n          width: 12,\n          height: 12,\n          top: '50%',\n          border: '2px solid #fff',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        }}\n      />\n\n      <Card\n        size=\"small\"\n        variant=\"outlined\"\n        onDoubleClick={handleDoubleClick}\n        className={`\n          gmail-trigger-node\n          ${selected ? 'node-selected' : ''}\n          ${isConnected ? 'node-connected' : 'node-disconnected'}\n          transition-all duration-200 hover:shadow-md cursor-pointer\n        `}\n        style={{\n          minWidth: 280,\n          maxWidth: 320,\n          borderColor: selected ? '#ea4335' : isConnected ? '#34a853' : '#fbbc04',\n          borderWidth: selected ? 2 : 1,\n          backgroundColor: nodeData.disabled ? '#f8f9fa' : '#fff',\n          boxShadow: selected ? '0 4px 12px rgba(234, 67, 53, 0.15)' : undefined,\n        }}\n        styles={{ body: { padding: '16px' } }}\n      >\n        {/* Header Section */}\n        <div className=\"flex items-start gap-3 mb-3\">\n          {/* Gmail Logo Avatar */}\n          <Avatar\n            size={36}\n            style={{\n              backgroundColor: '#ea4335',\n              flexShrink: 0,\n            }}\n          >\n            <MailOutlined style={{ fontSize: '20px', color: '#fff' }} />\n          </Avatar>\n\n          {/* Node Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <div className=\"font-semibold text-sm truncate flex-1\">\n                {nodeData.name || 'Gmail Trigger'}\n              </div>\n              {isConnected ? (\n                <CheckCircleOutlined className=\"text-green-500 text-xs\" />\n              ) : (\n                <ExclamationCircleOutlined className=\"text-yellow-500 text-xs\" />\n              )}\n\n              {/* Standard Edit/Settings Buttons */}\n              <div className=\"flex gap-1 ml-2\">\n                <Tooltip title=\"Edit\">\n                  <Button\n                    size=\"small\"\n                    type=\"text\"\n                    icon={<EditOutlined />}\n                    onClick={handleEditClick}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  />\n                </Tooltip>\n                <Tooltip title=\"Settings\">\n                  <Button\n                    size=\"small\"\n                    type=\"text\"\n                    icon={<SettingOutlined />}\n                    onClick={handleSettingsClick}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  />\n                </Tooltip>\n              </div>\n            </div>\n\n            <div className=\"text-xs text-gray-500 mb-2\">\n              {isConnected ? 'Connected to Gmail' : 'Not connected'}\n            </div>\n\n            {/* Connection Status */}\n            <div className=\"flex gap-1 mb-2\">\n              <Tag color={isConnected ? 'green' : 'orange'} style={{ margin: 0, fontSize: '10px' }}>\n                {isConnected ? 'Connected' : 'Setup Required'}\n              </Tag>\n              {isConnected && (\n                <Tag color=\"blue\" style={{ margin: 0, fontSize: '10px' }}>\n                  <ClockCircleOutlined style={{ marginRight: '2px' }} />\n                  {pollFrequency}\n                </Tag>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Email Statistics */}\n        {isConnected && (\n          <div className=\"bg-gray-50 rounded-lg p-3 mb-3\">\n            <div className=\"grid grid-cols-3 gap-2 text-center\">\n              <div>\n                <div className=\"text-lg font-semibold text-blue-600\">{emailCount}</div>\n                <div className=\"text-xs text-gray-500\">Recent</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-red-600\">{unreadCount}</div>\n                <div className=\"text-xs text-gray-500\">Unread</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-green-600\">{activeFilters}</div>\n                <div className=\"text-xs text-gray-500\">Filters</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Configuration Summary */}\n        <div className=\"space-y-2\">\n          {/* Filters Summary */}\n          {activeFilters > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <FilterOutlined className=\"text-blue-500 text-xs\" />\n              <span className=\"text-xs text-gray-600\">\n                {activeFilters} filter{activeFilters !== 1 ? 's' : ''} active\n              </span>\n            </div>\n          )}\n\n          {/* Output Format */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs text-gray-500\">Output:</span>\n            <Badge\n              count={simplify ? 'Simplified' : 'Full'}\n              style={{\n                backgroundColor: simplify ? '#52c41a' : '#1890ff',\n                fontSize: '9px',\n                height: '16px',\n                lineHeight: '14px',\n              }}\n            />\n          </div>\n\n          {/* Advanced Options */}\n          {options.downloadAttachments && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs text-gray-500\">Attachments:</span>\n              <Badge\n                count=\"Download\"\n                style={{\n                  backgroundColor: '#fa8c16',\n                  fontSize: '9px',\n                  height: '16px',\n                  lineHeight: '14px',\n                }}\n              />\n            </div>\n          )}\n\n          {options.markAsRead && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs text-gray-500\">Auto-mark:</span>\n              <Badge\n                count=\"Read\"\n                style={{\n                  backgroundColor: '#13c2c2',\n                  fontSize: '9px',\n                  height: '16px',\n                  lineHeight: '14px',\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Last Sync Info */}\n        {isConnected && (\n          <div className=\"mt-3 pt-2 border-t border-gray-100\">\n            <div className=\"flex items-center justify-between text-xs text-gray-500\">\n              <span>Last sync:</span>\n              <span>{new Date(lastSync).toLocaleTimeString()}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Polling Status Indicator */}\n        {isConnected && (\n          <div className=\"absolute top-2 right-2\">\n            <Tooltip title=\"Polling active\">\n              <div className=\"w-2 h-2 rounded-full bg-green-400 animate-pulse\" />\n            </Tooltip>\n          </div>\n        )}\n\n        {/* Notes */}\n        {nodeData.notes && (\n          <div className=\"mt-3 p-2 bg-blue-50 rounded text-xs border border-blue-100\">\n            {nodeData.notes}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default GmailTriggerNodeBody;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx",
        "start": 15,
        "end": 359,
        "startLoc": {
          "line": 15,
          "column": 35,
          "position": 129
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2718
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailtriggernodebody/GmailTriggerNodeBody.tsx",
        "start": 18,
        "end": 362,
        "startLoc": {
          "line": 18,
          "column": 19,
          "position": 168
        },
        "endLoc": {
          "line": 362,
          "column": 2,
          "position": 2757
        }
      }
    },
    {
      "format": "javascript",
      "lines": 562,
      "fragment": "={<ExperimentOutlined />}\n            onClick={handleTestConnection}\n            loading={isTestingConnection}\n          >\n            Test\n          </Button>\n          <Button type=\"default\" onClick={onClose}>\n            Close\n          </Button>\n        </Space>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        <Form form={form} layout=\"vertical\" onValuesChange={handleFormChange} className=\"h-full\">\n          <Tabs\n            activeKey={activeTab}\n            onChange={setActiveTab}\n            className=\"h-full gmail-tabs\"\n            tabBarStyle={{\n              paddingLeft: '16px',\n              paddingRight: '16px',\n              marginBottom: 0,\n            }}\n          >\n            {/* Connection Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <MailOutlined />\n                  Connection\n                  {connectionStatus === 'connected' && (\n                    <CheckCircleOutlined className=\"text-green-500\" />\n                  )}\n                  {connectionStatus === 'error' && (\n                    <ExclamationCircleOutlined className=\"text-red-500\" />\n                  )}\n                </span>\n              }\n              key=\"connection\"\n            >\n              <div className=\"p-4 space-y-6\">\n                {/* Credential Selection */}\n                <PropertyField\n                  property={{\n                    name: 'credential',\n                    displayName: 'Gmail Credential',\n                    type: 'credentialsSelect',\n                    description: 'Gmail OAuth2 credentials for accessing the API',\n                    required: true,\n                    credentialTypes: ['gmailOAuth2'],\n                    default: '',\n                  }}\n                  value={formState?.credential}\n                  context={{ nodeData, formState }}\n                  onChange={(value) => handlePropertyChange('credential', value)}\n                />\n\n                {/* Connection Status */}\n                {connectionStatus !== 'unknown' && (\n                  <Alert\n                    message={\n                      connectionStatus === 'connected'\n                        ? 'Successfully connected to Gmail'\n                        : connectionStatus === 'error'\n                          ? 'Failed to connect to Gmail'\n                          : 'Testing connection...'\n                    }\n                    type={\n                      connectionStatus === 'connected'\n                        ? 'success'\n                        : connectionStatus === 'error'\n                          ? 'error'\n                          : 'info'\n                    }\n                    showIcon\n                    action={\n                      connectionStatus === 'error' && (\n                        <Button size=\"small\" onClick={handleTestConnection}>\n                          Retry\n                        </Button>\n                      )\n                    }\n                  />\n                )}\n\n                {/* Event Type */}\n                <Form.Item\n                  label=\"Trigger Event\"\n                  name={['event']}\n                  tooltip=\"The Gmail event that will trigger the workflow\"\n                >\n                  <Select placeholder=\"Select trigger event\" defaultValue=\"messageReceived\">\n                    <Option value=\"messageReceived\">Message Received</Option>\n                    <Option value=\"messageSent\">Message Sent</Option>\n                    <Option value=\"messageRead\">Message Read</Option>\n                    <Option value=\"messageStarred\">Message Starred</Option>\n                    <Option value=\"messageDeleted\">Message Deleted</Option>\n                    <Option value=\"newThread\">New Thread</Option>\n                    <Option value=\"labelAdded\">Label Added</Option>\n                    <Option value=\"labelRemoved\">Label Removed</Option>\n                  </Select>\n                </Form.Item>\n\n                {/* Simplify Response */}\n                <Form.Item\n                  label=\"Response Format\"\n                  name={['simplify']}\n                  tooltip=\"Choose between simplified or full email data\"\n                  valuePropName=\"checked\"\n                >\n                  <Switch\n                    checkedChildren=\"Simplified\"\n                    unCheckedChildren=\"Full Data\"\n                    defaultChecked={true}\n                  />\n                </Form.Item>\n              </div>\n            </TabPane>\n\n            {/* Polling Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <SyncOutlined />\n                  Polling\n                </span>\n              }\n              key=\"polling\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse defaultActiveKey={['basic']} ghost>\n                  <Panel header=\"Polling Configuration\" key=\"basic\">\n                    <div className=\"space-y-4\">\n                      {/* Polling Mode */}\n                      <Form.Item\n                        label=\"Polling Frequency\"\n                        name={['pollTimes', 'mode']}\n                        tooltip=\"How often to check for new emails\"\n                      >\n                        <Select placeholder=\"Select frequency\" defaultValue=\"everyMinute\">\n                          {pollModeOptions.map((option) => (\n                            <Option key={option.value} value={option.value}>\n                              {option.label}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      {/* Dynamic polling fields based on mode */}\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) =>\n                          prevValues.pollTimes?.mode !== currentValues.pollTimes?.mode\n                        }\n                      >\n                        {({ getFieldValue }) => {\n                          const mode = getFieldValue(['pollTimes', 'mode']);\n\n                          return (\n                            <div className=\"space-y-4\">\n                              {mode === 'customInterval' && (\n                                <Form.Item\n                                  label=\"Interval (Minutes)\"\n                                  name={['pollTimes', 'intervalMinutes']}\n                                  tooltip=\"Check every X minutes\"\n                                >\n                                  <InputNumber min={1} max={1440} defaultValue={5} />\n                                </Form.Item>\n                              )}\n\n                              {['everyHour', 'everyDay', 'everyWeek', 'everyMonth'].includes(\n                                mode\n                              ) && (\n                                <Form.Item\n                                  label=\"Minute\"\n                                  name={['pollTimes', 'minute']}\n                                  tooltip=\"Minute of the hour (0-59)\"\n                                >\n                                  <InputNumber min={0} max={59} defaultValue={0} />\n                                </Form.Item>\n                              )}\n\n                              {['everyDay', 'everyWeek', 'everyMonth'].includes(mode) && (\n                                <Form.Item\n                                  label=\"Hour\"\n                                  name={['pollTimes', 'hour']}\n                                  tooltip=\"Hour of the day (0-23)\"\n                                >\n                                  <InputNumber min={0} max={23} defaultValue={9} />\n                                </Form.Item>\n                              )}\n\n                              {mode === 'everyWeek' && (\n                                <Form.Item\n                                  label=\"Day of Week\"\n                                  name={['pollTimes', 'weekday']}\n                                  tooltip=\"Which day of the week\"\n                                >\n                                  <Select defaultValue={1}>\n                                    <Option value={1}>Monday</Option>\n                                    <Option value={2}>Tuesday</Option>\n                                    <Option value={3}>Wednesday</Option>\n                                    <Option value={4}>Thursday</Option>\n                                    <Option value={5}>Friday</Option>\n                                    <Option value={6}>Saturday</Option>\n                                    <Option value={0}>Sunday</Option>\n                                  </Select>\n                                </Form.Item>\n                              )}\n\n                              {mode === 'everyMonth' && (\n                                <Form.Item\n                                  label=\"Day of Month\"\n                                  name={['pollTimes', 'dayOfMonth']}\n                                  tooltip=\"Day of the month (1-31)\"\n                                >\n                                  <InputNumber min={1} max={31} defaultValue={1} />\n                                </Form.Item>\n                              )}\n\n                              {mode === 'customCron' && (\n                                <Form.Item\n                                  label=\"Cron Expression\"\n                                  name={['pollTimes', 'cronExpression']}\n                                  tooltip='Custom cron expression (e.g., \"0 9 * * MON\" for 9 AM every Monday)'\n                                >\n                                  <Input placeholder=\"0 9 * * MON\" />\n                                </Form.Item>\n                              )}\n                            </div>\n                          );\n                        }}\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Filters Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <FilterOutlined />\n                  Filters\n                  <Badge count={0} size=\"small\" />\n                </span>\n              }\n              key=\"filters\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse ghost>\n                  <Panel header=\"Basic Filters\" key=\"basic\">\n                    <div className=\"space-y-4\">\n                      {/* Gmail Labels */}\n                      <Form.Item\n                        label=\"Gmail Labels\"\n                        name={['filters', 'labelNamesOrIds']}\n                        tooltip=\"Filter by specific Gmail labels\"\n                      >\n                        <Select\n                          mode=\"multiple\"\n                          placeholder=\"Select labels\"\n                          defaultValue={['INBOX']}\n                          allowClear\n                        >\n                          {gmailLabels.map((label) => (\n                            <Option key={label.value} value={label.value}>\n                              {label.label}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      {/* Read Status */}\n                      <Form.Item\n                        label=\"Read Status\"\n                        name={['filters', 'readStatus']}\n                        tooltip=\"Filter by email read status\"\n                      >\n                        <Select placeholder=\"Select read status\" defaultValue=\"all\">\n                          <Option value=\"all\">All</Option>\n                          <Option value=\"unread\">Unread Only</Option>\n                          <Option value=\"read\">Read Only</Option>\n                        </Select>\n                      </Form.Item>\n\n                      {/* Has Attachment */}\n                      <Form.Item\n                        label=\"Attachment Filter\"\n                        name={['filters', 'hasAttachment']}\n                        tooltip=\"Filter by attachment presence\"\n                      >\n                        <Select placeholder=\"Select attachment filter\" defaultValue=\"any\">\n                          <Option value=\"any\">Any</Option>\n                          <Option value=\"true\">Has Attachments</Option>\n                          <Option value=\"false\">No Attachments</Option>\n                        </Select>\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Advanced Filters\" key=\"advanced\">\n                    <div className=\"space-y-4\">\n                      {/* Search Query */}\n                      <Form.Item\n                        label=\"Gmail Search Query\"\n                        name={['filters', 'search']}\n                        tooltip='Gmail search query (e.g., \"has:attachment from:support@company.com\")'\n                      >\n                        <Input.TextArea\n                          rows={3}\n                          placeholder='has:attachment from:user@example.com subject:\"urgent\"'\n                        />\n                      </Form.Item>\n\n                      {/* Sender Filter */}\n                      <Form.Item\n                        label=\"Sender Filter\"\n                        name={['filters', 'senderFilter']}\n                        tooltip=\"Filter by sender email or name (supports wildcards)\"\n                      >\n                        <Input placeholder=\"support@example.com or *@company.com\" />\n                      </Form.Item>\n\n                      {/* Subject Filter */}\n                      <Form.Item\n                        label=\"Subject Filter\"\n                        name={['filters', 'subjectFilter']}\n                        tooltip=\"Filter by email subject (case-insensitive)\"\n                      >\n                        <Input placeholder=\"Contains this text in subject\" />\n                      </Form.Item>\n\n                      {/* Date Range */}\n                      <Form.Item label=\"Date Range Filter\" tooltip=\"Filter emails by date range\">\n                        <div className=\"space-y-2\">\n                          <Form.Item\n                            name={['filters', 'dateRange', 'enabled']}\n                            valuePropName=\"checked\"\n                            style={{ marginBottom: 8 }}\n                          >\n                            <Switch size=\"small\" />\n                          </Form.Item>\n\n                          <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) =>\n                              prevValues.filters?.dateRange?.enabled !==\n                              currentValues.filters?.dateRange?.enabled\n                            }\n                          >\n                            {({ getFieldValue }) => {\n                              const enabled = getFieldValue(['filters', 'dateRange', 'enabled']);\n\n                              return enabled ? (\n                                <Form.Item\n                                  name={['filters', 'dateRange', 'range']}\n                                  style={{ marginBottom: 0 }}\n                                >\n                                  <RangePicker showTime />\n                                </Form.Item>\n                              ) : null;\n                            }}\n                          </Form.Item>\n                        </div>\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Inclusion Options\" key=\"inclusion\">\n                    <div className=\"space-y-4\">\n                      {/* Include Spam and Trash */}\n                      <Form.Item\n                        label=\"Include Spam and Trash\"\n                        name={['filters', 'includeSpamTrash']}\n                        tooltip=\"Include emails from spam and trash folders\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      {/* Include Drafts */}\n                      <Form.Item\n                        label=\"Include Drafts\"\n                        name={['filters', 'includeDrafts']}\n                        tooltip=\"Include draft emails\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Output Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <ExportOutlined />\n                  Output\n                </span>\n              }\n              key=\"output\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse defaultActiveKey={['processing']} ghost>\n                  <Panel header=\"Email Processing\" key=\"processing\">\n                    <div className=\"space-y-4\">\n                      {/* Max Results */}\n                      <Form.Item\n                        label=\"Max Results\"\n                        name={['options', 'maxResults']}\n                        tooltip=\"Maximum number of emails to process per poll\"\n                      >\n                        <InputNumber min={1} max={500} defaultValue={1} />\n                      </Form.Item>\n\n                      {/* Mark as Read */}\n                      <Form.Item\n                        label=\"Mark as Read\"\n                        name={['options', 'markAsRead']}\n                        tooltip=\"Automatically mark processed emails as read\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      {/* Add Label */}\n                      <Form.Item\n                        label=\"Add Label\"\n                        name={['options', 'addLabel']}\n                        tooltip=\"Label to add to processed emails\"\n                      >\n                        <Input placeholder=\"processed\" />\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Attachment Handling\" key=\"attachments\">\n                    <div className=\"space-y-4\">\n                      {/* Download Attachments */}\n                      <Form.Item\n                        label=\"Download Attachments\"\n                        name={['options', 'downloadAttachments']}\n                        tooltip=\"Automatically download email attachments\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) =>\n                          prevValues.options?.downloadAttachments !==\n                          currentValues.options?.downloadAttachments\n                        }\n                      >\n                        {({ getFieldValue }) => {\n                          const downloadAttachments = getFieldValue([\n                            'options',\n                            'downloadAttachments',\n                          ]);\n\n                          return downloadAttachments ? (\n                            <div className=\"space-y-4\">\n                              {/* Attachment Prefix */}\n                              <Form.Item\n                                label=\"Attachment Prefix\"\n                                name={['options', 'attachmentPrefix']}\n                                tooltip=\"Prefix to add to downloaded attachment filenames\"\n                              >\n                                <Input placeholder=\"gmail_\" />\n                              </Form.Item>\n\n                              {/* Max Attachment Size */}\n                              <Form.Item\n                                label=\"Max Attachment Size (MB)\"\n                                name={['options', 'maxAttachmentSize']}\n                                tooltip=\"Maximum size of attachments to download (in MB)\"\n                              >\n                                <InputNumber min={1} max={25} defaultValue={10} />\n                              </Form.Item>\n                            </div>\n                          ) : null;\n                        }}\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Test Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <ExperimentOutlined />\n                  Test\n                </span>\n              }\n              key=\"test\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <div className=\"text-center\">\n                  <Space direction=\"vertical\" size=\"large\">\n                    <Button\n                      type=\"primary\"\n                      size=\"large\"\n                      icon={<ExperimentOutlined />}\n                      onClick={handleTestConnection}\n                      loading={isTestingConnection}\n                    >\n                      Test Gmail Connection\n                    </Button>\n\n                    <Button\n                      type=\"default\"\n                      size=\"large\"\n                      icon={<MailOutlined />}\n                      onClick={handlePreviewEmails}\n                      disabled={connectionStatus !== 'connected'}\n                    >\n                      Preview Emails\n                    </Button>\n                  </Space>\n                </div>\n\n                {/* Test Results */}\n                {testResults && (\n                  <Card title=\"Test Results\" size=\"small\" variant=\"outlined\">\n                    {isTestingConnection ? (\n                      <div className=\"text-center\">\n                        <Spin size=\"large\" />\n                        <p className=\"mt-4 text-gray-600\">Testing connection...</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">Status:</span>\n                          <Tag color={testResults.success ? 'green' : 'red'}>\n                            {testResults.success ? 'Success' : 'Failed'}\n                          </Tag>\n                        </div>\n\n                        {testResults.message && (\n                          <div>\n                            <span className=\"font-medium\">Message:</span>\n                            <p className=\"mt-1 text-gray-600\">{testResults.message}</p>\n                          </div>\n                        )}\n\n                        {testResults.data && Array.isArray(testResults.data) && (\n                          <div>\n                            <span className=\"font-medium\">Emails Found:</span>\n                            <p className=\"mt-1 text-gray-600\">{testResults.data.length} emails</p>\n\n                            {testResults.data.slice(0, 3).map((email: any, index: number) => (\n                              <div key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx",
        "start": 142,
        "end": 703,
        "startLoc": {
          "line": 142,
          "column": 5,
          "position": 1199
        },
        "endLoc": {
          "line": 703,
          "column": 2,
          "position": 5078
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailpropertiespanel/GmailPropertiesPanel.tsx",
        "start": 145,
        "end": 706,
        "startLoc": {
          "line": 145,
          "column": 5,
          "position": 1238
        },
        "endLoc": {
          "line": 706,
          "column": 2,
          "position": 5117
        }
      }
    },
    {
      "format": "tsx",
      "lines": 32,
      "fragment": "import {\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ExperimentOutlined,\n  ExportOutlined,\n  FilterOutlined,\n  MailOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Collapse,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Select,\n  Space,\n  Spin,\n  Switch,\n  Tabs,\n  Tag,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { CustomPropertiesPanelProps } from '../../../../app/node-extensions/types';\nimport PropertyField from '../../common/PropertyField';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx",
        "start": 1,
        "end": 32,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 32,
          "column": 6,
          "position": 162
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailpropertiespanel/GmailPropertiesPanel.tsx",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 7,
          "position": 161
        }
      }
    },
    {
      "format": "tsx",
      "lines": 701,
      "fragment": ";\n\nconst { TabPane } = Tabs;\nconst { Panel } = Collapse;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\n/**\n * Gmail Properties Panel Component\n * Advanced tabbed configuration interface for Gmail trigger nodes\n */\nconst GmailPropertiesPanel: React.FC<CustomPropertiesPanelProps> = ({\n  nodeId: _nodeId,\n  nodeData,\n  onClose,\n  onTest,\n}) => {\n  const [form] = Form.useForm();\n  const [activeTab, setActiveTab] = useState('connection');\n  const [isTestingConnection, setIsTestingConnection] = useState(false);\n\n  // Mock state for form values (to be implemented)\n  const [formState] = useState<Record<string, any>>({});\n\n  // Mock function for property changes (to be implemented)\n  const handlePropertyChange = (_key: string, _value: any) => {};\n  const [connectionStatus, setConnectionStatus] = useState<\n    'unknown' | 'connected' | 'error' | 'testing'\n  >('unknown');\n  const [testResults, setTestResults] = useState<any>(null);\n\n  // Initialize form with current values\n  useEffect(() => {\n    if (formState) {\n      form.setFieldsValue(formState);\n    }\n  }, [formState, form]);\n\n  // Handle form value changes\n  const handleFormChange = (changedFields: any, _allFields: any) => {\n    Object.keys(changedFields).forEach((key) => {\n      handlePropertyChange(key, changedFields[key]);\n    });\n  };\n\n  // Test Gmail connection\n  const handleTestConnection = async () => {\n    setIsTestingConnection(true);\n    setConnectionStatus('testing');\n\n    try {\n      const result = await onTest?.();\n      if (result?.success) {\n        setConnectionStatus('connected');\n        setTestResults(result);\n      } else {\n        setConnectionStatus('error');\n        setTestResults(result);\n      }\n    } catch (_error) {\n      setConnectionStatus('error');\n      setTestResults({ success: false, message: 'Connection test failed' });\n    } finally {\n      setIsTestingConnection(false);\n    }\n  };\n\n  // Preview emails with current configuration\n  const handlePreviewEmails = async () => {\n    try {\n      const result = await onTest?.();\n      setTestResults(result);\n    } catch (_error) {}\n  };\n\n  // Polling frequency options\n  const pollModeOptions = [\n    { label: 'Every Minute', value: 'everyMinute' },\n    { label: 'Every Hour', value: 'everyHour' },\n    { label: 'Every Day', value: 'everyDay' },\n    { label: 'Every Week', value: 'everyWeek' },\n    { label: 'Every Month', value: 'everyMonth' },\n    { label: 'Custom Interval', value: 'customInterval' },\n    { label: 'Custom Cron', value: 'customCron' },\n  ];\n\n  // Gmail labels\n  const gmailLabels = [\n    { label: 'INBOX', value: 'INBOX' },\n    { label: 'SENT', value: 'SENT' },\n    { label: 'DRAFT', value: 'DRAFT' },\n    { label: 'SPAM', value: 'SPAM' },\n    { label: 'TRASH', value: 'TRASH' },\n    { label: 'IMPORTANT', value: 'IMPORTANT' },\n    { label: 'STARRED', value: 'STARRED' },\n    { label: 'UNREAD', value: 'UNREAD' },\n  ];\n\n  return (\n    <div className=\"gmail-properties-panel h-full flex flex-col bg-white\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3 p-4 border-b border-gray-200 bg-gradient-to-r from-red-50 to-orange-50\">\n        <div className=\"w-10 h-10 rounded-lg bg-red-500 flex items-center justify-center\">\n          <MailOutlined className=\"text-white text-lg\" />\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Gmail Trigger Configuration</h3>\n          <p className=\"text-sm text-gray-600\">Configure Gmail email monitoring and filtering</p>\n        </div>\n        <Space>\n          <Button\n            type=\"primary\"\n            icon={<ExperimentOutlined />}\n            onClick={handleTestConnection}\n            loading={isTestingConnection}\n          >\n            Test\n          </Button>\n          <Button type=\"default\" onClick={onClose}>\n            Close\n          </Button>\n        </Space>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        <Form form={form} layout=\"vertical\" onValuesChange={handleFormChange} className=\"h-full\">\n          <Tabs\n            activeKey={activeTab}\n            onChange={setActiveTab}\n            className=\"h-full gmail-tabs\"\n            tabBarStyle={{\n              paddingLeft: '16px',\n              paddingRight: '16px',\n              marginBottom: 0,\n            }}\n          >\n            {/* Connection Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <MailOutlined />\n                  Connection\n                  {connectionStatus === 'connected' && (\n                    <CheckCircleOutlined className=\"text-green-500\" />\n                  )}\n                  {connectionStatus === 'error' && (\n                    <ExclamationCircleOutlined className=\"text-red-500\" />\n                  )}\n                </span>\n              }\n              key=\"connection\"\n            >\n              <div className=\"p-4 space-y-6\">\n                {/* Credential Selection */}\n                <PropertyField\n                  property={{\n                    name: 'credential',\n                    displayName: 'Gmail Credential',\n                    type: 'credentialsSelect',\n                    description: 'Gmail OAuth2 credentials for accessing the API',\n                    required: true,\n                    credentialTypes: ['gmailOAuth2'],\n                    default: '',\n                  }}\n                  value={formState?.credential}\n                  context={{ nodeData, formState }}\n                  onChange={(value) => handlePropertyChange('credential', value)}\n                />\n\n                {/* Connection Status */}\n                {connectionStatus !== 'unknown' && (\n                  <Alert\n                    message={\n                      connectionStatus === 'connected'\n                        ? 'Successfully connected to Gmail'\n                        : connectionStatus === 'error'\n                          ? 'Failed to connect to Gmail'\n                          : 'Testing connection...'\n                    }\n                    type={\n                      connectionStatus === 'connected'\n                        ? 'success'\n                        : connectionStatus === 'error'\n                          ? 'error'\n                          : 'info'\n                    }\n                    showIcon\n                    action={\n                      connectionStatus === 'error' && (\n                        <Button size=\"small\" onClick={handleTestConnection}>\n                          Retry\n                        </Button>\n                      )\n                    }\n                  />\n                )}\n\n                {/* Event Type */}\n                <Form.Item\n                  label=\"Trigger Event\"\n                  name={['event']}\n                  tooltip=\"The Gmail event that will trigger the workflow\"\n                >\n                  <Select placeholder=\"Select trigger event\" defaultValue=\"messageReceived\">\n                    <Option value=\"messageReceived\">Message Received</Option>\n                    <Option value=\"messageSent\">Message Sent</Option>\n                    <Option value=\"messageRead\">Message Read</Option>\n                    <Option value=\"messageStarred\">Message Starred</Option>\n                    <Option value=\"messageDeleted\">Message Deleted</Option>\n                    <Option value=\"newThread\">New Thread</Option>\n                    <Option value=\"labelAdded\">Label Added</Option>\n                    <Option value=\"labelRemoved\">Label Removed</Option>\n                  </Select>\n                </Form.Item>\n\n                {/* Simplify Response */}\n                <Form.Item\n                  label=\"Response Format\"\n                  name={['simplify']}\n                  tooltip=\"Choose between simplified or full email data\"\n                  valuePropName=\"checked\"\n                >\n                  <Switch\n                    checkedChildren=\"Simplified\"\n                    unCheckedChildren=\"Full Data\"\n                    defaultChecked={true}\n                  />\n                </Form.Item>\n              </div>\n            </TabPane>\n\n            {/* Polling Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <SyncOutlined />\n                  Polling\n                </span>\n              }\n              key=\"polling\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse defaultActiveKey={['basic']} ghost>\n                  <Panel header=\"Polling Configuration\" key=\"basic\">\n                    <div className=\"space-y-4\">\n                      {/* Polling Mode */}\n                      <Form.Item\n                        label=\"Polling Frequency\"\n                        name={['pollTimes', 'mode']}\n                        tooltip=\"How often to check for new emails\"\n                      >\n                        <Select placeholder=\"Select frequency\" defaultValue=\"everyMinute\">\n                          {pollModeOptions.map((option) => (\n                            <Option key={option.value} value={option.value}>\n                              {option.label}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      {/* Dynamic polling fields based on mode */}\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) =>\n                          prevValues.pollTimes?.mode !== currentValues.pollTimes?.mode\n                        }\n                      >\n                        {({ getFieldValue }) => {\n                          const mode = getFieldValue(['pollTimes', 'mode']);\n\n                          return (\n                            <div className=\"space-y-4\">\n                              {mode === 'customInterval' && (\n                                <Form.Item\n                                  label=\"Interval (Minutes)\"\n                                  name={['pollTimes', 'intervalMinutes']}\n                                  tooltip=\"Check every X minutes\"\n                                >\n                                  <InputNumber min={1} max={1440} defaultValue={5} />\n                                </Form.Item>\n                              )}\n\n                              {['everyHour', 'everyDay', 'everyWeek', 'everyMonth'].includes(\n                                mode\n                              ) && (\n                                <Form.Item\n                                  label=\"Minute\"\n                                  name={['pollTimes', 'minute']}\n                                  tooltip=\"Minute of the hour (0-59)\"\n                                >\n                                  <InputNumber min={0} max={59} defaultValue={0} />\n                                </Form.Item>\n                              )}\n\n                              {['everyDay', 'everyWeek', 'everyMonth'].includes(mode) && (\n                                <Form.Item\n                                  label=\"Hour\"\n                                  name={['pollTimes', 'hour']}\n                                  tooltip=\"Hour of the day (0-23)\"\n                                >\n                                  <InputNumber min={0} max={23} defaultValue={9} />\n                                </Form.Item>\n                              )}\n\n                              {mode === 'everyWeek' && (\n                                <Form.Item\n                                  label=\"Day of Week\"\n                                  name={['pollTimes', 'weekday']}\n                                  tooltip=\"Which day of the week\"\n                                >\n                                  <Select defaultValue={1}>\n                                    <Option value={1}>Monday</Option>\n                                    <Option value={2}>Tuesday</Option>\n                                    <Option value={3}>Wednesday</Option>\n                                    <Option value={4}>Thursday</Option>\n                                    <Option value={5}>Friday</Option>\n                                    <Option value={6}>Saturday</Option>\n                                    <Option value={0}>Sunday</Option>\n                                  </Select>\n                                </Form.Item>\n                              )}\n\n                              {mode === 'everyMonth' && (\n                                <Form.Item\n                                  label=\"Day of Month\"\n                                  name={['pollTimes', 'dayOfMonth']}\n                                  tooltip=\"Day of the month (1-31)\"\n                                >\n                                  <InputNumber min={1} max={31} defaultValue={1} />\n                                </Form.Item>\n                              )}\n\n                              {mode === 'customCron' && (\n                                <Form.Item\n                                  label=\"Cron Expression\"\n                                  name={['pollTimes', 'cronExpression']}\n                                  tooltip='Custom cron expression (e.g., \"0 9 * * MON\" for 9 AM every Monday)'\n                                >\n                                  <Input placeholder=\"0 9 * * MON\" />\n                                </Form.Item>\n                              )}\n                            </div>\n                          );\n                        }}\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Filters Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <FilterOutlined />\n                  Filters\n                  <Badge count={0} size=\"small\" />\n                </span>\n              }\n              key=\"filters\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse ghost>\n                  <Panel header=\"Basic Filters\" key=\"basic\">\n                    <div className=\"space-y-4\">\n                      {/* Gmail Labels */}\n                      <Form.Item\n                        label=\"Gmail Labels\"\n                        name={['filters', 'labelNamesOrIds']}\n                        tooltip=\"Filter by specific Gmail labels\"\n                      >\n                        <Select\n                          mode=\"multiple\"\n                          placeholder=\"Select labels\"\n                          defaultValue={['INBOX']}\n                          allowClear\n                        >\n                          {gmailLabels.map((label) => (\n                            <Option key={label.value} value={label.value}>\n                              {label.label}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      {/* Read Status */}\n                      <Form.Item\n                        label=\"Read Status\"\n                        name={['filters', 'readStatus']}\n                        tooltip=\"Filter by email read status\"\n                      >\n                        <Select placeholder=\"Select read status\" defaultValue=\"all\">\n                          <Option value=\"all\">All</Option>\n                          <Option value=\"unread\">Unread Only</Option>\n                          <Option value=\"read\">Read Only</Option>\n                        </Select>\n                      </Form.Item>\n\n                      {/* Has Attachment */}\n                      <Form.Item\n                        label=\"Attachment Filter\"\n                        name={['filters', 'hasAttachment']}\n                        tooltip=\"Filter by attachment presence\"\n                      >\n                        <Select placeholder=\"Select attachment filter\" defaultValue=\"any\">\n                          <Option value=\"any\">Any</Option>\n                          <Option value=\"true\">Has Attachments</Option>\n                          <Option value=\"false\">No Attachments</Option>\n                        </Select>\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Advanced Filters\" key=\"advanced\">\n                    <div className=\"space-y-4\">\n                      {/* Search Query */}\n                      <Form.Item\n                        label=\"Gmail Search Query\"\n                        name={['filters', 'search']}\n                        tooltip='Gmail search query (e.g., \"has:attachment from:support@company.com\")'\n                      >\n                        <Input.TextArea\n                          rows={3}\n                          placeholder='has:attachment from:user@example.com subject:\"urgent\"'\n                        />\n                      </Form.Item>\n\n                      {/* Sender Filter */}\n                      <Form.Item\n                        label=\"Sender Filter\"\n                        name={['filters', 'senderFilter']}\n                        tooltip=\"Filter by sender email or name (supports wildcards)\"\n                      >\n                        <Input placeholder=\"support@example.com or *@company.com\" />\n                      </Form.Item>\n\n                      {/* Subject Filter */}\n                      <Form.Item\n                        label=\"Subject Filter\"\n                        name={['filters', 'subjectFilter']}\n                        tooltip=\"Filter by email subject (case-insensitive)\"\n                      >\n                        <Input placeholder=\"Contains this text in subject\" />\n                      </Form.Item>\n\n                      {/* Date Range */}\n                      <Form.Item label=\"Date Range Filter\" tooltip=\"Filter emails by date range\">\n                        <div className=\"space-y-2\">\n                          <Form.Item\n                            name={['filters', 'dateRange', 'enabled']}\n                            valuePropName=\"checked\"\n                            style={{ marginBottom: 8 }}\n                          >\n                            <Switch size=\"small\" />\n                          </Form.Item>\n\n                          <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) =>\n                              prevValues.filters?.dateRange?.enabled !==\n                              currentValues.filters?.dateRange?.enabled\n                            }\n                          >\n                            {({ getFieldValue }) => {\n                              const enabled = getFieldValue(['filters', 'dateRange', 'enabled']);\n\n                              return enabled ? (\n                                <Form.Item\n                                  name={['filters', 'dateRange', 'range']}\n                                  style={{ marginBottom: 0 }}\n                                >\n                                  <RangePicker showTime />\n                                </Form.Item>\n                              ) : null;\n                            }}\n                          </Form.Item>\n                        </div>\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Inclusion Options\" key=\"inclusion\">\n                    <div className=\"space-y-4\">\n                      {/* Include Spam and Trash */}\n                      <Form.Item\n                        label=\"Include Spam and Trash\"\n                        name={['filters', 'includeSpamTrash']}\n                        tooltip=\"Include emails from spam and trash folders\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      {/* Include Drafts */}\n                      <Form.Item\n                        label=\"Include Drafts\"\n                        name={['filters', 'includeDrafts']}\n                        tooltip=\"Include draft emails\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Output Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <ExportOutlined />\n                  Output\n                </span>\n              }\n              key=\"output\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <Collapse defaultActiveKey={['processing']} ghost>\n                  <Panel header=\"Email Processing\" key=\"processing\">\n                    <div className=\"space-y-4\">\n                      {/* Max Results */}\n                      <Form.Item\n                        label=\"Max Results\"\n                        name={['options', 'maxResults']}\n                        tooltip=\"Maximum number of emails to process per poll\"\n                      >\n                        <InputNumber min={1} max={500} defaultValue={1} />\n                      </Form.Item>\n\n                      {/* Mark as Read */}\n                      <Form.Item\n                        label=\"Mark as Read\"\n                        name={['options', 'markAsRead']}\n                        tooltip=\"Automatically mark processed emails as read\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      {/* Add Label */}\n                      <Form.Item\n                        label=\"Add Label\"\n                        name={['options', 'addLabel']}\n                        tooltip=\"Label to add to processed emails\"\n                      >\n                        <Input placeholder=\"processed\" />\n                      </Form.Item>\n                    </div>\n                  </Panel>\n\n                  <Panel header=\"Attachment Handling\" key=\"attachments\">\n                    <div className=\"space-y-4\">\n                      {/* Download Attachments */}\n                      <Form.Item\n                        label=\"Download Attachments\"\n                        name={['options', 'downloadAttachments']}\n                        tooltip=\"Automatically download email attachments\"\n                        valuePropName=\"checked\"\n                      >\n                        <Switch />\n                      </Form.Item>\n\n                      <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) =>\n                          prevValues.options?.downloadAttachments !==\n                          currentValues.options?.downloadAttachments\n                        }\n                      >\n                        {({ getFieldValue }) => {\n                          const downloadAttachments = getFieldValue([\n                            'options',\n                            'downloadAttachments',\n                          ]);\n\n                          return downloadAttachments ? (\n                            <div className=\"space-y-4\">\n                              {/* Attachment Prefix */}\n                              <Form.Item\n                                label=\"Attachment Prefix\"\n                                name={['options', 'attachmentPrefix']}\n                                tooltip=\"Prefix to add to downloaded attachment filenames\"\n                              >\n                                <Input placeholder=\"gmail_\" />\n                              </Form.Item>\n\n                              {/* Max Attachment Size */}\n                              <Form.Item\n                                label=\"Max Attachment Size (MB)\"\n                                name={['options', 'maxAttachmentSize']}\n                                tooltip=\"Maximum size of attachments to download (in MB)\"\n                              >\n                                <InputNumber min={1} max={25} defaultValue={10} />\n                              </Form.Item>\n                            </div>\n                          ) : null;\n                        }}\n                      </Form.Item>\n                    </div>\n                  </Panel>\n                </Collapse>\n              </div>\n            </TabPane>\n\n            {/* Test Tab */}\n            <TabPane\n              tab={\n                <span className=\"flex items-center gap-2\">\n                  <ExperimentOutlined />\n                  Test\n                </span>\n              }\n              key=\"test\"\n            >\n              <div className=\"p-4 space-y-6\">\n                <div className=\"text-center\">\n                  <Space direction=\"vertical\" size=\"large\">\n                    <Button\n                      type=\"primary\"\n                      size=\"large\"\n                      icon={<ExperimentOutlined />}\n                      onClick={handleTestConnection}\n                      loading={isTestingConnection}\n                    >\n                      Test Gmail Connection\n                    </Button>\n\n                    <Button\n                      type=\"default\"\n                      size=\"large\"\n                      icon={<MailOutlined />}\n                      onClick={handlePreviewEmails}\n                      disabled={connectionStatus !== 'connected'}\n                    >\n                      Preview Emails\n                    </Button>\n                  </Space>\n                </div>\n\n                {/* Test Results */}\n                {testResults && (\n                  <Card title=\"Test Results\" size=\"small\" variant=\"outlined\">\n                    {isTestingConnection ? (\n                      <div className=\"text-center\">\n                        <Spin size=\"large\" />\n                        <p className=\"mt-4 text-gray-600\">Testing connection...</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">Status:</span>\n                          <Tag color={testResults.success ? 'green' : 'red'}>\n                            {testResults.success ? 'Success' : 'Failed'}\n                          </Tag>\n                        </div>\n\n                        {testResults.message && (\n                          <div>\n                            <span className=\"font-medium\">Message:</span>\n                            <p className=\"mt-1 text-gray-600\">{testResults.message}</p>\n                          </div>\n                        )}\n\n                        {testResults.data && Array.isArray(testResults.data) && (\n                          <div>\n                            <span className=\"font-medium\">Emails Found:</span>\n                            <p className=\"mt-1 text-gray-600\">{testResults.data.length} emails</p>\n\n                            {testResults.data.slice(0, 3).map((email: any, index: number) => (\n                              <div key={index} className=\"mt-2 p-2 bg-gray-50 rounded text-sm\">\n                                <div>\n                                  <strong>From:</strong> {email.from || 'N/A'}\n                                </div>\n                                <div>\n                                  <strong>Subject:</strong> {email.subject || 'N/A'}\n                                </div>\n                                <div>\n                                  <strong>Date:</strong> {email.date || 'N/A'}\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </Card>\n                )}\n              </div>\n            </TabPane>\n          </Tabs>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default GmailPropertiesPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx",
        "start": 30,
        "end": 730,
        "startLoc": {
          "line": 30,
          "column": 29,
          "position": 159
        },
        "endLoc": {
          "line": 730,
          "column": 2,
          "position": 5257
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/gmailpropertiespanel/GmailPropertiesPanel.tsx",
        "start": 33,
        "end": 733,
        "startLoc": {
          "line": 33,
          "column": 19,
          "position": 198
        },
        "endLoc": {
          "line": 733,
          "column": 2,
          "position": 5296
        }
      }
    },
    {
      "format": "javascript",
      "lines": 187,
      "fragment": "={onMouseEnter} onMouseLeave={onMouseLeave}>\n      {/* Enhanced Node Toolbar */}\n      <EnhancedNodeToolbar\n        nodeId={nodeId}\n        visible={isHovered && selected}\n        onActionClick={(actionId, nodeId) => {\n          switch (actionId) {\n            case 'play':\n              handlePlay();\n              break;\n            case 'stop':\n              handleStop();\n              break;\n            case 'delete':\n              handleDelete();\n              break;\n            default:\n              handleMenuToggle(nodeId);\n          }\n        }}\n        theme={theme}\n      />\n\n      {/* Badges */}\n      {badges.map((badge) => (\n        <div\n          key={badge.id}\n          className=\"absolute z-10\"\n          style={{\n            ...{\n              'top-left': { top: '-6px', left: '-6px' },\n              'top-right': { top: '-6px', right: '-6px' },\n              'bottom-left': { bottom: '-6px', left: '-6px' },\n              'bottom-right': { bottom: '-6px', right: '-6px' },\n            }[badge.position],\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: badge.backgroundColor,\n              color: badge.color,\n              fontSize: theme.typography.fontSize.xs,\n              fontWeight: theme.typography.fontWeight.medium,\n              borderRadius: theme.borderRadius.sm,\n              padding: '2px 6px',\n              minWidth: '18px',\n              height: '18px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              boxShadow: theme.shadows.sm,\n            }}\n          >\n            {badge.icon && (\n              <span style={{ marginRight: badge.text ? '2px' : '0' }}>{badge.icon}</span>\n            )}\n            {badge.text && <span>{badge.text}</span>}\n          </div>\n        </div>\n      ))}\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        id=\"input_0\"\n        style={{\n          background: theme.colors.border,\n          width: 10,\n          height: 10,\n          top: '50%',\n        }}\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id=\"output_0\"\n        style={{\n          background: dbInfo.color,\n          width: 10,\n          height: 10,\n          top: '50%',\n        }}\n      />\n\n      <Card\n        size=\"small\"\n        bordered\n        style={{\n          minWidth: 220,\n          maxWidth: 350,\n          borderColor: selected ? dbInfo.color : theme.colors.border,\n          borderWidth: selected ? 2 : 1,\n          backgroundColor: nodeData.disabled ? theme.colors.background : '#fff',\n        }}\n        bodyStyle={{ padding: '12px 16px' }}\n      >\n        <div className=\"flex items-start gap-3\">\n          {/* Database Avatar */}\n          <Avatar\n            size={36}\n            style={{\n              backgroundColor: dbInfo.color,\n              fontSize: '20px',\n              flexShrink: 0,\n            }}\n          >\n            {dbInfo.icon}\n          </Avatar>\n\n          {/* Node Content */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <div className=\"font-semibold text-sm truncate\">{nodeData.name || 'Database'}</div>\n              <DatabaseOutlined className=\"text-blue-500 text-xs\" />\n            </div>\n\n            <div className=\"text-xs text-gray-500 mb-2\">\n              {dbInfo.name} • {operation}\n            </div>\n\n            {/* Connection Status */}\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span style={{ color: statusInfo.color, fontSize: '12px' }}>{statusInfo.icon}</span>\n              <span style={{ fontSize: '11px', color: statusInfo.color }}>{statusInfo.text}</span>\n            </div>\n\n            {/* Database Details */}\n            <div className=\"space-y-1\">\n              {table && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs text-gray-600\">Table:</span>\n                  <Tag color=\"blue\">{table}</Tag>\n                </div>\n              )}\n\n              {queryLimit && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs text-gray-600\">Limit:</span>\n                  <Tag color={queryLimit > 1000 ? 'orange' : 'green'}>\n                    {queryLimit.toLocaleString()}\n                  </Tag>\n                </div>\n              )}\n            </div>\n\n            {/* Connection Progress (when connecting) */}\n            {connectionStatus === 'connecting' && (\n              <div className=\"mt-2\">\n                <Progress\n                  percent={60}\n                  size=\"small\"\n                  status=\"active\"\n                  showInfo={false}\n                  strokeColor={theme.colors.info}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Execution Settings Indicators */}\n        <div className=\"mt-3 flex gap-1 flex-wrap\">\n          {nodeData.retryOnFail && (\n            <Badge\n              count={`Retry ${nodeData.maxTries || 3}x`}\n              style={{ backgroundColor: theme.colors.info, fontSize: '10px' }}\n            />\n          )}\n          {nodeData.continueOnFail && (\n            <Badge\n              count=\"Continue on fail\"\n              style={{\n                backgroundColor: theme.colors.warning,\n                fontSize: '10px',\n              }}\n            />\n          )}\n          {connectionString && (\n            <Badge\n              count=\"SSL\"\n              style={{\n                backgroundColor: theme.colors.success,\n                fontSize: '10px',\n              }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx",
        "start": 155,
        "end": 341,
        "startLoc": {
          "line": 155,
          "column": 13,
          "position": 1326
        },
        "endLoc": {
          "line": 341,
          "column": 2,
          "position": 2647
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/databasenodebody/DatabaseNodeBody.tsx",
        "start": 159,
        "end": 345,
        "startLoc": {
          "line": 159,
          "column": 13,
          "position": 1378
        },
        "endLoc": {
          "line": 345,
          "column": 2,
          "position": 2699
        }
      }
    },
    {
      "format": "tsx",
      "lines": 355,
      "fragment": "/**\n * Database Node Body Component\n * Specialized UI for database operation nodes with connection status and query visualization\n */\n\nimport {\n  CheckCircleOutlined,\n  DatabaseOutlined,\n  DisconnectOutlined,\n  ExclamationCircleOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport { Avatar, Badge, Card, Progress, Tag } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { useNodeTheme } from '../../../../app/node-extensions/themes';\nimport type { CustomNodeBodyProps } from '../../../../app/node-extensions/types';\nimport { createStatusBadge, createTextBadge, EnhancedNodeToolbar } from '../../common';\n\nconst DatabaseNodeBody: React.FC<CustomNodeBodyProps> = ({\n  nodeId,\n  nodeData,\n  selected,\n  isHovered,\n  onMouseEnter,\n  onMouseLeave,\n  onDelete,\n  onOpenProperties: _onOpenProperties,\n  theme: propTheme,\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [connectionStatus, setConnectionStatus] = useState<\n    'connected' | 'connecting' | 'disconnected' | 'error'\n  >('disconnected');\n\n  // Extract database-specific configuration\n  const operation = nodeData.parameters?.operation || 'select';\n  const database = nodeData.parameters?.database || 'PostgreSQL';\n  const table = nodeData.parameters?.table || 'users';\n  const queryLimit = nodeData.parameters?.limit || 100;\n  const connectionString = nodeData.parameters?.connection;\n\n  // Database type styling\n  const getDatabaseInfo = () => {\n    const dbType = database.toLowerCase();\n    if (dbType.includes('postgres')) {\n      return { color: '#336791', icon: '🐘', name: 'PostgreSQL' };\n    } else if (dbType.includes('mysql')) {\n      return { color: '#4479A1', icon: '🐬', name: 'MySQL' };\n    } else if (dbType.includes('mongo')) {\n      return { color: '#47A248', icon: '🍃', name: 'MongoDB' };\n    } else if (dbType.includes('redis')) {\n      return { color: '#DC382D', icon: '📦', name: 'Redis' };\n    } else if (dbType.includes('sqlite')) {\n      return { color: '#003B57', icon: '💾', name: 'SQLite' };\n    } else {\n      return { color: '#4169E1', icon: '🗃️', name: 'Database' };\n    }\n  };\n\n  const dbInfo = getDatabaseInfo();\n\n  // Connection status styling\n  const getConnectionStatusInfo = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return {\n          icon: <CheckCircleOutlined />,\n          color: theme.colors.success,\n          text: 'Connected',\n        };\n      case 'connecting':\n        return {\n          icon: <SyncOutlined spin />,\n          color: theme.colors.info,\n          text: 'Connecting',\n        };\n      case 'error':\n        return {\n          icon: <ExclamationCircleOutlined />,\n          color: theme.colors.error,\n          text: 'Error',\n        };\n      default:\n        return {\n          icon: <DisconnectOutlined />,\n          color: theme.colors.textSecondary,\n          text: 'Disconnected',\n        };\n    }\n  };\n\n  const statusInfo = getConnectionStatusInfo();\n\n  // Operation type styling\n  const getOperationColor = () => {\n    switch (operation.toLowerCase()) {\n      case 'select':\n      case 'find':\n      case 'get':\n        return theme.colors.info;\n      case 'insert':\n      case 'create':\n        return theme.colors.success;\n      case 'update':\n      case 'modify':\n        return theme.colors.warning;\n      case 'delete':\n      case 'remove':\n        return theme.colors.error;\n      default:\n        return theme.colors.primary;\n    }\n  };\n\n  // Toolbar handlers\n  const handlePlay = () => {\n    setConnectionStatus('connecting');\n    // Simulate connection process\n    setTimeout(() => {\n      setConnectionStatus(Math.random() > 0.2 ? 'connected' : 'error');\n    }, 2000);\n  };\n\n  const handleStop = () => {\n    setConnectionStatus('disconnected');\n  };\n\n  const handleDelete = () => {\n    onDelete?.();\n  };\n\n  const handleMenuToggle = (_nodeId: string) => {};\n\n  // Generate badges\n  const badges = [\n    createStatusBadge(\n      connectionStatus === 'connected'\n        ? 'success'\n        : connectionStatus === 'error'\n          ? 'error'\n          : 'info',\n      'top-right'\n    ),\n    createTextBadge(operation.toUpperCase(), 'top-left', '#ffffff', getOperationColor()),\n  ];\n\n  if (queryLimit > 1000) {\n    badges.push(createTextBadge('LARGE', 'bottom-right', '#ffffff', theme.colors.warning));\n  }\n\n  return (\n    <div className=\"relative\" onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n      {/* Enhanced Node Toolbar */}\n      <EnhancedNodeToolbar\n        nodeId={nodeId}\n        visible={isHovered && selected}\n        onActionClick={(actionId, nodeId) => {\n          switch (actionId) {\n            case 'play':\n              handlePlay();\n              break;\n            case 'stop':\n              handleStop();\n              break;\n            case 'delete':\n              handleDelete();\n              break;\n            default:\n              handleMenuToggle(nodeId);\n          }\n        }}\n        theme={theme}\n      />\n\n      {/* Badges */}\n      {badges.map((badge) => (\n        <div\n          key={badge.id}\n          className=\"absolute z-10\"\n          style={{\n            ...{\n              'top-left': { top: '-6px', left: '-6px' },\n              'top-right': { top: '-6px', right: '-6px' },\n              'bottom-left': { bottom: '-6px', left: '-6px' },\n              'bottom-right': { bottom: '-6px', right: '-6px' },\n            }[badge.position],\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: badge.backgroundColor,\n              color: badge.color,\n              fontSize: theme.typography.fontSize.xs,\n              fontWeight: theme.typography.fontWeight.medium,\n              borderRadius: theme.borderRadius.sm,\n              padding: '2px 6px',\n              minWidth: '18px',\n              height: '18px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              boxShadow: theme.shadows.sm,\n            }}\n          >\n            {badge.icon && (\n              <span style={{ marginRight: badge.text ? '2px' : '0' }}>{badge.icon}</span>\n            )}\n            {badge.text && <span>{badge.text}</span>}\n          </div>\n        </div>\n      ))}\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        id=\"input_0\"\n        style={{\n          background: theme.colors.border,\n          width: 10,\n          height: 10,\n          top: '50%',\n        }}\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id=\"output_0\"\n        style={{\n          background: dbInfo.color,\n          width: 10,\n          height: 10,\n          top: '50%',\n        }}\n      />\n\n      <Card\n        size=\"small\"\n        bordered\n        style={{\n          minWidth: 220,\n          maxWidth: 350,\n          borderColor: selected ? dbInfo.color : theme.colors.border,\n          borderWidth: selected ? 2 : 1,\n          backgroundColor: nodeData.disabled ? theme.colors.background : '#fff',\n        }}\n        bodyStyle={{ padding: '12px 16px' }}\n      >\n        <div className=\"flex items-start gap-3\">\n          {/* Database Avatar */}\n          <Avatar\n            size={36}\n            style={{\n              backgroundColor: dbInfo.color,\n              fontSize: '20px',\n              flexShrink: 0,\n            }}\n          >\n            {dbInfo.icon}\n          </Avatar>\n\n          {/* Node Content */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <div className=\"font-semibold text-sm truncate\">{nodeData.name || 'Database'}</div>\n              <DatabaseOutlined className=\"text-blue-500 text-xs\" />\n            </div>\n\n            <div className=\"text-xs text-gray-500 mb-2\">\n              {dbInfo.name} • {operation}\n            </div>\n\n            {/* Connection Status */}\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span style={{ color: statusInfo.color, fontSize: '12px' }}>{statusInfo.icon}</span>\n              <span style={{ fontSize: '11px', color: statusInfo.color }}>{statusInfo.text}</span>\n            </div>\n\n            {/* Database Details */}\n            <div className=\"space-y-1\">\n              {table && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs text-gray-600\">Table:</span>\n                  <Tag color=\"blue\">{table}</Tag>\n                </div>\n              )}\n\n              {queryLimit && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs text-gray-600\">Limit:</span>\n                  <Tag color={queryLimit > 1000 ? 'orange' : 'green'}>\n                    {queryLimit.toLocaleString()}\n                  </Tag>\n                </div>\n              )}\n            </div>\n\n            {/* Connection Progress (when connecting) */}\n            {connectionStatus === 'connecting' && (\n              <div className=\"mt-2\">\n                <Progress\n                  percent={60}\n                  size=\"small\"\n                  status=\"active\"\n                  showInfo={false}\n                  strokeColor={theme.colors.info}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Execution Settings Indicators */}\n        <div className=\"mt-3 flex gap-1 flex-wrap\">\n          {nodeData.retryOnFail && (\n            <Badge\n              count={`Retry ${nodeData.maxTries || 3}x`}\n              style={{ backgroundColor: theme.colors.info, fontSize: '10px' }}\n            />\n          )}\n          {nodeData.continueOnFail && (\n            <Badge\n              count=\"Continue on fail\"\n              style={{\n                backgroundColor: theme.colors.warning,\n                fontSize: '10px',\n              }}\n            />\n          )}\n          {connectionString && (\n            <Badge\n              count=\"SSL\"\n              style={{\n                backgroundColor: theme.colors.success,\n                fontSize: '10px',\n              }}\n            />\n          )}\n        </div>\n\n        {/* Notes */}\n        {nodeData.notes && (\n          <div className=\"mt-3 p-2 bg-yellow-50 rounded text-xs\">{nodeData.notes}</div>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default DatabaseNodeBody;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx",
        "start": 1,
        "end": 355,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 355,
          "column": 2,
          "position": 2722
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/databasenodebody/DatabaseNodeBody.tsx",
        "start": 5,
        "end": 359,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2774
        }
      }
    },
    {
      "format": "javascript",
      "lines": 18,
      "fragment": "}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 269,
        "end": 286,
        "startLoc": {
          "line": 269,
          "column": 2,
          "position": 2024
        },
        "endLoc": {
          "line": 286,
          "column": 14,
          "position": 2168
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 248,
        "end": 269,
        "startLoc": {
          "line": 248,
          "column": 8,
          "position": 1860
        },
        "endLoc": {
          "line": 269,
          "column": 15,
          "position": 2014
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "const inferType = (value: any): string => {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n  if (Array.isArray(value)) return 'array';\n  if (typeof value === 'object') return 'object';\n  if (typeof value === 'string') {\n    // Check if it's a date string",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/schemaview/SchemaView.tsx",
        "start": 77,
        "end": 83,
        "startLoc": {
          "line": 77,
          "column": 1,
          "position": 547
        },
        "endLoc": {
          "line": 83,
          "column": 31,
          "position": 650
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/tableview/TableView.tsx",
        "start": 31,
        "end": 37,
        "startLoc": {
          "line": 31,
          "column": 1,
          "position": 264
        },
        "endLoc": {
          "line": 37,
          "column": 3,
          "position": 367
        }
      }
    },
    {
      "format": "javascript",
      "lines": 58,
      "fragment": "={{ marginBottom: '16px' }}\n      />\n\n      <Collapse\n        items={[\n          {\n            key: 'performance',\n            label: (\n              <div className=\"flex items-center gap-2\">\n                <ExperimentOutlined />\n                <span>Performance & Sampling</span>\n              </div>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                {advancedProperties.map((property) => {\n                  const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      key={property.name}\n                      property={property}\n                      value={formValues[property.name]}\n                      onChange={(value) => handleFieldChange(property.name, value)}\n                      errors={errors[property.name]}\n                      theme={theme}\n                      context={formValues}\n                    />\n                  );\n                })}\n              </div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n\n  const renderTestingTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Test Your AI Agent\"\n        description=\"Test your AI agent configuration with sample data.\"\n        type=\"success\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Quick Test\">\n        <div className=\"space-y-4\">\n          <PropertyField\n            property={{\n              displayName",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 298,
        "end": 355,
        "startLoc": {
          "line": 298,
          "column": 6,
          "position": 2343
        },
        "endLoc": {
          "line": 355,
          "column": 26,
          "position": 2733
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 263,
        "end": 298,
        "startLoc": {
          "line": 263,
          "column": 6,
          "position": 2091
        },
        "endLoc": {
          "line": 298,
          "column": 14,
          "position": 2346
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 314,
        "end": 324,
        "startLoc": {
          "line": 314,
          "column": 19,
          "position": 2454
        },
        "endLoc": {
          "line": 324,
          "column": 23,
          "position": 2535
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 268,
        "end": 278,
        "startLoc": {
          "line": 268,
          "column": 9,
          "position": 2123
        },
        "endLoc": {
          "line": 278,
          "column": 13,
          "position": 2204
        }
      }
    },
    {
      "format": "javascript",
      "lines": 30,
      "fragment": "();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 152,
        "end": 181,
        "startLoc": {
          "line": 152,
          "column": 16,
          "position": 1072
        },
        "endLoc": {
          "line": 181,
          "column": 29,
          "position": 1249
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 143,
        "end": 162,
        "startLoc": {
          "line": 143,
          "column": 2,
          "position": 1018
        },
        "endLoc": {
          "line": 162,
          "column": 21,
          "position": 1129
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "className=\"w-6 h-6\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const fallback = target.nextElementSibling;\n                  if (fallback) {\n                    fallback.classList.remove('hidden');\n                  }\n                }}\n              />\n              <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 106,
        "end": 116,
        "startLoc": {
          "line": 106,
          "column": 17,
          "position": 742
        },
        "endLoc": {
          "line": 116,
          "column": 2,
          "position": 830
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 307,
        "end": 317,
        "startLoc": {
          "line": 307,
          "column": 19,
          "position": 2297
        },
        "endLoc": {
          "line": 317,
          "column": 2,
          "position": 2385
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "\n        value={currentValues}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 6. Text/TextArea Property Renderer",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 184,
        "end": 209,
        "startLoc": {
          "line": 184,
          "column": 2,
          "position": 1579
        },
        "endLoc": {
          "line": 209,
          "column": 38,
          "position": 1794
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 145,
        "end": 170,
        "startLoc": {
          "line": 145,
          "column": 7,
          "position": 1217
        },
        "endLoc": {
          "line": 170,
          "column": 38,
          "position": 1449
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 259,
        "end": 268,
        "startLoc": {
          "line": 259,
          "column": 14,
          "position": 2211
        },
        "endLoc": {
          "line": 268,
          "column": 4,
          "position": 2285
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 236,
        "end": 245,
        "startLoc": {
          "line": 236,
          "column": 17,
          "position": 2026
        },
        "endLoc": {
          "line": 245,
          "column": 11,
          "position": 2100
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "|| [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Filter",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 628,
        "end": 636,
        "startLoc": {
          "line": 628,
          "column": 2,
          "position": 5221
        },
        "endLoc": {
          "line": 636,
          "column": 7,
          "position": 5296
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 574,
        "end": 582,
        "startLoc": {
          "line": 574,
          "column": 2,
          "position": 4790
        },
        "endLoc": {
          "line": 582,
          "column": 6,
          "position": 4865
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 16-22. Additional Complex Property Renderers",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 664,
        "end": 683,
        "startLoc": {
          "line": 664,
          "column": 2,
          "position": 5591
        },
        "endLoc": {
          "line": 683,
          "column": 48,
          "position": 5692
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 607,
        "end": 626,
        "startLoc": {
          "line": 607,
          "column": 2,
          "position": 5072
        },
        "endLoc": {
          "line": 626,
          "column": 32,
          "position": 5173
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 684,
        "end": 693,
        "startLoc": {
          "line": 684,
          "column": 19,
          "position": 5699
        },
        "endLoc": {
          "line": 693,
          "column": 9,
          "position": 5773
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 236,
        "end": 245,
        "startLoc": {
          "line": 236,
          "column": 17,
          "position": 2026
        },
        "endLoc": {
          "line": 245,
          "column": 11,
          "position": 2100
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 709,
        "end": 718,
        "startLoc": {
          "line": 709,
          "column": 25,
          "position": 5906
        },
        "endLoc": {
          "line": 718,
          "column": 7,
          "position": 5980
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 236,
        "end": 245,
        "startLoc": {
          "line": 236,
          "column": 17,
          "position": 2026
        },
        "endLoc": {
          "line": 245,
          "column": 11,
          "position": 2100
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select node",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 734,
        "end": 746,
        "startLoc": {
          "line": 734,
          "column": 21,
          "position": 6104
        },
        "endLoc": {
          "line": 746,
          "column": 12,
          "position": 6195
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 236,
        "end": 721,
        "startLoc": {
          "line": 236,
          "column": 17,
          "position": 2026
        },
        "endLoc": {
          "line": 721,
          "column": 16,
          "position": 5997
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex space-x-2",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 759,
        "end": 768,
        "startLoc": {
          "line": 759,
          "column": 26,
          "position": 6300
        },
        "endLoc": {
          "line": 768,
          "column": 15,
          "position": 6379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 236,
        "end": 268,
        "startLoc": {
          "line": 236,
          "column": 17,
          "position": 2026
        },
        "endLoc": {
          "line": 268,
          "column": 28,
          "position": 2290
        }
      }
    },
    {
      "format": "javascript",
      "lines": 332,
      "fragment": "={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx",
        "start": 111,
        "end": 442,
        "startLoc": {
          "line": 111,
          "column": 6,
          "position": 928
        },
        "endLoc": {
          "line": 442,
          "column": 7,
          "position": 3284
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 109,
        "end": 440,
        "startLoc": {
          "line": 109,
          "column": 6,
          "position": 925
        },
        "endLoc": {
          "line": 440,
          "column": 5,
          "position": 3281
        }
      }
    },
    {
      "format": "tsx",
      "lines": 30,
      "fragment": "/**\n * PropertyField Component\n * Dynamic form field renderer for node properties with advanced features\n */\n\nimport {\n  EyeInvisibleOutlined,\n  EyeOutlined,\n  InfoCircleOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useNodeTheme } from '../themes'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx",
        "start": 5,
        "end": 34,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 41
        },
        "endLoc": {
          "line": 34,
          "column": 12,
          "position": 186
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 4,
        "end": 33,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 33,
          "column": 38,
          "position": 184
        }
      }
    },
    {
      "format": "tsx",
      "lines": 425,
      "fragment": ";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: NodeTheme;\n  context?: Record<string, any>;\n  errors?: string[];\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme: propTheme,\n\n  errors = [],\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [internalValue, setInternalValue] = useState(value);\n  const [showPassword, setShowPassword] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const handleChange = (newValue: any) => {\n    setInternalValue(newValue);\n\n    // Validate the new value\n    const error = validateValue(newValue);\n    setValidationError(error);\n\n    // Only call onChange if validation passes\n    if (!error) {\n      onChange(newValue);\n    }\n  };\n\n  const validateValue = (val: any): string | null => {\n    if (property.required && (val === undefined || val === null || val === '')) {\n      return `${property.displayName} is required`;\n    }\n\n    if (property.type === 'string' || property.type === 'text') {\n      if (property.typeOptions?.minValue && val.length < property.typeOptions.minValue) {\n        return `${property.displayName} must be at least ${property.typeOptions.minValue} characters`;\n      }\n      if (property.typeOptions?.maxValue && val.length > property.typeOptions.maxValue) {\n        return `${property.displayName} must be no more than ${property.typeOptions.maxValue} characters`;\n      }\n    }\n\n    if (property.type === 'number') {\n      if (property.min !== undefined && val < property.min) {\n        return `${property.displayName} must be at least ${property.min}`;\n      }\n      if (property.max !== undefined && val > property.max) {\n        return `${property.displayName} must be no more than ${property.max}`;\n      }\n    }\n\n    return null;\n  };\n\n  const renderLabel = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String(cred.value)} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}>\n      {renderLabel()}\n      {renderField()}\n      {renderError()}\n    </div>\n  );\n};\n\nexport default PropertyField;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx",
        "start": 35,
        "end": 459,
        "startLoc": {
          "line": 35,
          "column": 11,
          "position": 202
        },
        "endLoc": {
          "line": 459,
          "column": 2,
          "position": 3395
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 34,
        "end": 457,
        "startLoc": {
          "line": 34,
          "column": 37,
          "position": 200
        },
        "endLoc": {
          "line": 457,
          "column": 2,
          "position": 3389
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "const fieldNames = new Set<string>();\n    inputData.forEach((item) => {\n      if (item.json && typeof item.json === 'object') {\n        Object.keys(item.json).forEach((key) => fieldNames.add(key));\n      }\n    });\n\n    return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx",
        "start": 134,
        "end": 141,
        "startLoc": {
          "line": 134,
          "column": 5,
          "position": 1156
        },
        "endLoc": {
          "line": 141,
          "column": 7,
          "position": 1245
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx",
        "start": 299,
        "end": 306,
        "startLoc": {
          "line": 299,
          "column": 5,
          "position": 2337
        },
        "endLoc": {
          "line": 306,
          "column": 61,
          "position": 2426
        }
      }
    },
    {
      "format": "javascript",
      "lines": 60,
      "fragment": "={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 303,
        "end": 362,
        "startLoc": {
          "line": 303,
          "column": 6,
          "position": 2412
        },
        "endLoc": {
          "line": 362,
          "column": 2,
          "position": 2931
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 298,
        "end": 357,
        "startLoc": {
          "line": 298,
          "column": 6,
          "position": 2328
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2847
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "import { useEnter } from './hooks/useEnter';\nimport { useEnterDelay } from './hooks/useEnterDelay';\nimport { useEvent } from './hooks/useEvent';\nimport { useLeave } from './hooks/useLeave';\nimport { useNodeTheme } from './hooks/useNodeTheme';\nimport { useRef } from './hooks/useRef';\nimport { useState } from './hooks/useState';\n/**\n * Enhanced Node Toolbar\n * Advanced toolbar with customizable actions, themes, and interactions\n */\n\nimport {\n  BugOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  PlayCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { useNodeTheme } from '../themes'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 12,
          "position": 189
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 38,
          "position": 189
        }
      }
    },
    {
      "format": "tsx",
      "lines": 135,
      "fragment": ";\n\ninterface EnhancedNodeToolbarProps {\n  nodeId: string;\n  visible: boolean;\n  actions?: ToolbarAction[];\n  theme?: NodeTheme;\n  onActionClick: (actionId: string, nodeId: string) => void;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'default' | 'compact' | 'floating';\n}\n\nconst EnhancedNodeToolbar: React.FC<EnhancedNodeToolbarProps> = ({\n  nodeId,\n  visible,\n  actions = [],\n  theme: propTheme,\n  onActionClick,\n  position = 'top',\n  size = 'medium',\n  variant = 'default',\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [hoveredAction, setHoveredAction] = useState<string | null>(null);\n  const toolbarRef = useRef<HTMLDivElement>(null);\n\n  // Default actions if none provided\n  const defaultActions: ToolbarAction[] = [\n    {\n      id: 'play',\n      icon: 'PlayCircleOutlined',\n      label: 'Run Node',\n      action: 'execute',\n      shortcut: 'Ctrl+R',\n    },\n    {\n      id: 'stop',\n      icon: 'StopOutlined',\n      label: 'Stop Execution',\n      action: 'stop',\n    },\n    {\n      id: 'copy',\n      icon: 'CopyOutlined',\n      label: 'Duplicate Node',\n      action: 'duplicate',\n      shortcut: 'Ctrl+D',\n    },\n    {\n      id: 'edit',\n      icon: 'EditOutlined',\n      label: 'Edit Node',\n      action: 'edit',\n      shortcut: 'Enter',\n    },\n    {\n      id: 'delete',\n      icon: 'DeleteOutlined',\n      label: 'Delete Node',\n      action: 'delete',\n      shortcut: 'Del',\n    },\n    {\n      id: 'more',\n      icon: 'MoreOutlined',\n      label: 'More Actions',\n      action: 'menu',\n    },\n  ];\n\n  const finalActions = actions.length > 0 ? actions : defaultActions;\n\n  const getPositionStyles = (): React.CSSProperties => {\n    const offset = variant === 'floating' ? 12 : 8;\n    const baseStyles: React.CSSProperties = {\n      position: 'absolute',\n      zIndex: 9999,\n    };\n\n    switch (position) {\n      case 'top':\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'bottom':\n        return {\n          ...baseStyles,\n          bottom: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'left':\n        return {\n          ...baseStyles,\n          left: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      case 'right':\n        return {\n          ...baseStyles,\n          right: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n    }\n  };\n\n  const getSizeConfig = () => {\n    switch (size) {\n      case 'small':\n        return { buttonSize: 24, iconSize: 12, padding: '4px' };\n      case 'large':\n        return { buttonSize: 36, iconSize: 16, padding: '8px' };\n      default:\n        return { buttonSize: 28, iconSize: 14, padding: '6px' };\n    }\n  };\n\n  const getVariantStyles = (): React.CSSProperties => {\n    const { padding } = getSizeConfig();\n\n    // Defensive theme access with fallbacks",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 27,
        "end": 161,
        "startLoc": {
          "line": 27,
          "column": 11,
          "position": 208
        },
        "endLoc": {
          "line": 161,
          "column": 41,
          "position": 1250
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 27,
        "end": 161,
        "startLoc": {
          "line": 27,
          "column": 37,
          "position": 208
        },
        "endLoc": {
          "line": 161,
          "column": 6,
          "position": 1250
        }
      }
    },
    {
      "format": "tsx",
      "lines": 178,
      "fragment": ",\n        };\n    }\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const iconMap: Record<string, React.ComponentType<any>> = {\n      PlayCircleOutlined,\n      StopOutlined,\n      DeleteOutlined,\n      MoreOutlined,\n      CopyOutlined,\n      EditOutlined,\n      SettingOutlined,\n      BugOutlined,\n      ReloadOutlined,\n    };\n\n    const IconComponent = iconMap[iconName] || MoreOutlined;\n    return IconComponent;\n  };\n\n  const handleActionClick = (action: ToolbarAction, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    // Special handling for menu action\n    if (action.id === 'more') {\n      // Show additional actions menu\n      return;\n    }\n\n    onActionClick(action.id, nodeId);\n  };\n\n  const getButtonStyles = (actionId: string): React.CSSProperties => {\n    const { buttonSize, iconSize } = getSizeConfig();\n    const isHovered = hoveredAction === actionId;\n\n    const buttonColor = getActionColor(actionId);\n\n    return {\n      width: buttonSize,\n      height: buttonSize,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: theme.borderRadius.sm,\n      background: isHovered ? buttonColor : 'transparent',\n      color: isHovered ? theme.colors.background : getActionTextColor(actionId),\n      border: 'none',\n      cursor: 'pointer',\n      transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeOut}`,\n      fontSize: iconSize,\n      transform: isHovered ? 'scale(1.1)' : 'scale(1)',\n    };\n  };\n\n  const getActionColor = (actionId: string): string => {\n    switch (actionId) {\n      case 'play':\n        return theme.colors.success;\n      case 'stop':\n        return theme.colors.error;\n      case 'delete':\n        return theme.colors.error;\n      case 'copy':\n        return theme.colors.info;\n      case 'edit':\n        return theme.colors.primary;\n      default:\n        return theme.colors.textSecondary;\n    }\n  };\n\n  const getActionTextColor = (actionId: string): string => {\n    if (variant === 'floating') {\n      return getActionColor(actionId);\n    }\n    return theme.colors.background;\n  };\n\n  const renderMoreMenu = () => {\n    const moreActions: ToolbarAction[] = [\n      {\n        id: 'settings',\n        icon: 'SettingOutlined',\n        label: 'Node Settings',\n        action: 'settings',\n      },\n      {\n        id: 'debug',\n        icon: 'BugOutlined',\n        label: 'Debug Node',\n        action: 'debug',\n      },\n      {\n        id: 'reload',\n        icon: 'ReloadOutlined',\n        label: 'Reload Node',\n        action: 'reload',\n      },\n    ];\n\n    const menuItems = moreActions.map((action) => ({\n      key: action.id,\n      label: (\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}\n              >\n                {React.createElement(getIconComponent(action.icon))}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedNodeToolbar;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 197,
        "end": 374,
        "startLoc": {
          "line": 197,
          "column": 33,
          "position": 1605
        },
        "endLoc": {
          "line": 374,
          "column": 2,
          "position": 2992
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 192,
        "end": 369,
        "startLoc": {
          "line": 192,
          "column": 3,
          "position": 1521
        },
        "endLoc": {
          "line": 369,
          "column": 2,
          "position": 2908
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "if (displayOptions.show) {\n      Object.keys(displayOptions.show).forEach((field) => dependencies.add(field));\n    }\n\n    if (displayOptions.hide) {\n      Object.keys(displayOptions.hide).forEach((field) => dependencies.add(field));\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 483,
        "end": 491,
        "startLoc": {
          "line": 483,
          "column": 5,
          "position": 3832
        },
        "endLoc": {
          "line": 491,
          "column": 3,
          "position": 3916
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 312,
        "end": 320,
        "startLoc": {
          "line": 312,
          "column": 5,
          "position": 2566
        },
        "endLoc": {
          "line": 320,
          "column": 36,
          "position": 2650
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "if (displayOptions.showIf) {\n      displayOptions.showIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if (displayOptions.hideIf) {\n      displayOptions.hideIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 491,
        "end": 499,
        "startLoc": {
          "line": 491,
          "column": 5,
          "position": 3916
        },
        "endLoc": {
          "line": 499,
          "column": 3,
          "position": 3994
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 321,
        "end": 329,
        "startLoc": {
          "line": 321,
          "column": 5,
          "position": 2653
        },
        "endLoc": {
          "line": 329,
          "column": 34,
          "position": 2731
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "// Convert BackendWorkflow to WorkflowDefinition format\n        const workflowDefinition = {\n          name: `Test Workflow ${Date.now()}`,\n          version: 1,\n          nodes: workflowJson.nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: { x: node.position[0], y: node.position[1] },\n            data: {\n              label: node.name,\n              parameters: node.parameters,\n              credentials:\n                typeof node.credentials === 'object' && node.credentials\n                  ? Object.keys(node.credentials)[0] || undefined\n                  : (node.credentials as string | undefined),\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: [], // Convert connections to edges if needed\n          tags: ['test'],\n          isActive: true,\n        };\n        const result = await workflowApiService.testWorkflow(workflowDefinition);\n        setTestResult({\n          type: 'dry_run'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx",
        "start": 79,
        "end": 104,
        "startLoc": {
          "line": 79,
          "column": 9,
          "position": 809
        },
        "endLoc": {
          "line": 104,
          "column": 10,
          "position": 1075
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx",
        "start": 49,
        "end": 74,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 509
        },
        "endLoc": {
          "line": 74,
          "column": 13,
          "position": 775
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": ">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 435,
        "end": 440,
        "startLoc": {
          "line": 435,
          "column": 7,
          "position": 3859
        },
        "endLoc": {
          "line": 440,
          "column": 3,
          "position": 3922
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 412,
        "end": 417,
        "startLoc": {
          "line": 412,
          "column": 2,
          "position": 3612
        },
        "endLoc": {
          "line": 417,
          "column": 2,
          "position": 3675
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ",\n        nodes: workflowJson.nodes.map((node) => ({\n          id: node.id,\n          type: node.type,\n          position: { x: node.position[0], y: node.position[1] },\n          data: {\n            label: node.name,\n            parameters: node.parameters,\n            credentials:\n              typeof node.credentials === 'object' && node.credentials\n                ? Object.keys(node.credentials)[0] || undefined\n                : (node.credentials as string | undefined),\n            disabled: node.disabled,\n            notes: node.notes,\n          },\n        })),\n        edges: [], // Convert connections to edges if needed\n        version",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 113,
        "end": 130,
        "startLoc": {
          "line": 113,
          "column": 29,
          "position": 958
        },
        "endLoc": {
          "line": 130,
          "column": 8,
          "position": 1148
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx",
        "start": 52,
        "end": 69,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 540
        },
        "endLoc": {
          "line": 69,
          "column": 5,
          "position": 730
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 136,
        "end": 152,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 950
        },
        "endLoc": {
          "line": 152,
          "column": 11,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 117,
        "end": 133,
        "startLoc": {
          "line": 117,
          "column": 7,
          "position": 807
        },
        "endLoc": {
          "line": 133,
          "column": 14,
          "position": 933
        }
      }
    },
    {
      "format": "javascript",
      "lines": 114,
      "fragment": "} className=\"border-b border-gray-700 hover:bg-gray-700\">\n                <td className=\"py-2 px-3 text-blue-300 font-mono text-xs\">{key}</td>\n                <td className=\"py-2 px-3 text-gray-300 break-all\">\n                  {typeof value === 'string' && value.length > 100\n                    ? `${value.substring(0, 100)}...`\n                    : String(value)}\n                </td>\n                <td className=\"py-2 px-3 text-gray-400 text-xs\">{typeof value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render JSON view\n  const renderJsonView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    return (\n      <div className=\"overflow-auto\">\n        <pre className=\"text-sm text-gray-300 whitespace-pre-wrap p-4 bg-gray-900 rounded border border-gray-600 font-mono\">\n          {JSON.stringify(filteredData || selectedEmail, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    if (!selectedEmail) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📧</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">Select an email from the input column</p>\n          <p className=\"text-gray-400\">to view its detailed structure</p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            {filteredData ? (\n              Object.entries(filteredData).map(([key, value]) => renderSchemaItem(key, value, key))\n            ) : (\n              <div className=\"text-gray-400 text-center py-8\">No matching data found</div>\n            )}\n          </div>\n        );\n      case 'table':\n        return renderTableView();\n      case 'json':\n        return renderJsonView();\n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤</span>\n            OUTPUT\n            {selectedEmail && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Email selected</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {selectedEmail && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search email data\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 195,
        "end": 308,
        "startLoc": {
          "line": 195,
          "column": 4,
          "position": 2111
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 3071
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx",
        "start": 159,
        "end": 213,
        "startLoc": {
          "line": 159,
          "column": 8,
          "position": 1581
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1996
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ";\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 260,
        "end": 268,
        "startLoc": {
          "line": 260,
          "column": 5,
          "position": 2686
        },
        "endLoc": {
          "line": 268,
          "column": 3,
          "position": 2753
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx",
        "start": 165,
        "end": 173,
        "startLoc": {
          "line": 165,
          "column": 2,
          "position": 1609
        },
        "endLoc": {
          "line": 173,
          "column": 3,
          "position": 1676
        }
      }
    },
    {
      "format": "tsx",
      "lines": 29,
      "fragment": "\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 289,
        "end": 317,
        "startLoc": {
          "line": 289,
          "column": 18,
          "position": 2920
        },
        "endLoc": {
          "line": 317,
          "column": 2,
          "position": 3115
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx",
        "start": 194,
        "end": 223,
        "startLoc": {
          "line": 194,
          "column": 19,
          "position": 1845
        },
        "endLoc": {
          "line": 223,
          "column": 17,
          "position": 2040
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "};\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            INPUT",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 89,
        "end": 100,
        "startLoc": {
          "line": 89,
          "column": 3,
          "position": 786
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 874
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 258,
        "end": 174,
        "startLoc": {
          "line": 258,
          "column": 3,
          "position": 2671
        },
        "endLoc": {
          "line": 174,
          "column": 2,
          "position": 1682
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": "}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 250,
        "end": 264,
        "startLoc": {
          "line": 250,
          "column": 2,
          "position": 1888
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 1973
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 215,
        "end": 231,
        "startLoc": {
          "line": 215,
          "column": 7,
          "position": 1667
        },
        "endLoc": {
          "line": 231,
          "column": 7,
          "position": 1772
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 52,
        "end": 61,
        "startLoc": {
          "line": 52,
          "column": 5,
          "position": 438
        },
        "endLoc": {
          "line": 61,
          "column": 3,
          "position": 528
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 40,
        "end": 49,
        "startLoc": {
          "line": 40,
          "column": 6,
          "position": 316
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 406
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 463,
        "end": 474,
        "startLoc": {
          "line": 463,
          "column": 19,
          "position": 3486
        },
        "endLoc": {
          "line": 474,
          "column": 10,
          "position": 3571
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 442,
        "end": 453,
        "startLoc": {
          "line": 442,
          "column": 17,
          "position": 3306
        },
        "endLoc": {
          "line": 453,
          "column": 10,
          "position": 3391
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<div className=\"bg-blue-900/20 border border-blue-600/30 rounded p-4\">\n                      <div className=\"flex items-start space-x-2\">\n                        <svg\n                          className=\"w-5 h-5 text-blue-400 mt-0.5\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                        <div>\n                          <p className=\"text-sm text-blue-300\">\n                            <strong>{",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 484,
        "end": 499,
        "startLoc": {
          "line": 484,
          "column": 21,
          "position": 3872
        },
        "endLoc": {
          "line": 499,
          "column": 2,
          "position": 3966
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 404,
        "end": 419,
        "startLoc": {
          "line": 404,
          "column": 21,
          "position": 3243
        },
        "endLoc": {
          "line": 419,
          "column": 5,
          "position": 3337
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "<div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Credential Name <span className=\"text-red-400\">*</span>\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={credentialName}\n                        onChange={(e) => setCredentialName(e.target.value)}\n                        className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder={`e.g., ${credentialTypeDef.name} Account`}\n                      ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 507,
        "end": 517,
        "startLoc": {
          "line": 507,
          "column": 21,
          "position": 4014
        },
        "endLoc": {
          "line": 517,
          "column": 23,
          "position": 4105
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 454,
        "end": 463,
        "startLoc": {
          "line": 454,
          "column": 21,
          "position": 3636
        },
        "endLoc": {
          "line": 463,
          "column": 2,
          "position": 3717
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "}\n                    <div className=\"bg-blue-900/20 border border-blue-600/30 rounded p-4\">\n                      <div className=\"flex items-start space-x-2\">\n                        <svg\n                          className=\"w-5 h-5 text-blue-400 mt-0.5\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                        <div>\n                          <p className=\"text-sm text-blue-300\">\n                            Enterprise",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 711,
        "end": 727,
        "startLoc": {
          "line": 711,
          "column": 22,
          "position": 5566
        },
        "endLoc": {
          "line": 727,
          "column": 11,
          "position": 5660
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 403,
        "end": 419,
        "startLoc": {
          "line": 403,
          "column": 41,
          "position": 3240
        },
        "endLoc": {
          "line": 419,
          "column": 2,
          "position": 3334
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 361,
        "end": 370,
        "startLoc": {
          "line": 361,
          "column": 4,
          "position": 2738
        },
        "endLoc": {
          "line": 370,
          "column": 3,
          "position": 2823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 399,
        "end": 409,
        "startLoc": {
          "line": 399,
          "column": 19,
          "position": 3144
        },
        "endLoc": {
          "line": 409,
          "column": 2,
          "position": 3230
        }
      }
    },
    {
      "format": "javascript",
      "lines": 79,
      "fragment": "}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 410,
        "end": 488,
        "startLoc": {
          "line": 410,
          "column": 5,
          "position": 3620
        },
        "endLoc": {
          "line": 488,
          "column": 51,
          "position": 4319
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 334,
        "end": 438,
        "startLoc": {
          "line": 334,
          "column": 14,
          "position": 2886
        },
        "endLoc": {
          "line": 438,
          "column": 6,
          "position": 3901
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 451,
        "end": 460,
        "startLoc": {
          "line": 451,
          "column": 21,
          "position": 3971
        },
        "endLoc": {
          "line": 460,
          "column": 27,
          "position": 4075
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 392,
        "end": 401,
        "startLoc": {
          "line": 392,
          "column": 23,
          "position": 3442
        },
        "endLoc": {
          "line": 401,
          "column": 28,
          "position": 3546
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ");\n\n  // Convert workflow coordinates to screen coordinates\n  const workflowToScreen = useCallback(\n    (x: number, y: number) => ({\n      x: (x + transform.x) * transform.zoom,\n      y: (y + transform.y) * transform.zoom,\n    }),\n    [transform]\n  );\n\n  // Convert screen coordinates to workflow coordinates",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 66,
        "end": 77,
        "startLoc": {
          "line": 66,
          "column": 5,
          "position": 563
        },
        "endLoc": {
          "line": 77,
          "column": 54,
          "position": 657
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx",
        "start": 50,
        "end": 61,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 383
        },
        "endLoc": {
          "line": 61,
          "column": 36,
          "position": 477
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle canvas click for new comments",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 87,
        "end": 104,
        "startLoc": {
          "line": 87,
          "column": 3,
          "position": 745
        },
        "endLoc": {
          "line": 104,
          "column": 40,
          "position": 887
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx",
        "start": 35,
        "end": 52,
        "startLoc": {
          "line": 35,
          "column": 3,
          "position": 246
        },
        "endLoc": {
          "line": 52,
          "column": 54,
          "position": 388
        }
      }
    },
    {
      "format": "javascript",
      "lines": 28,
      "fragment": "}\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 401,
        "end": 428,
        "startLoc": {
          "line": 401,
          "column": 23,
          "position": 3239
        },
        "endLoc": {
          "line": 428,
          "column": 16,
          "position": 3451
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 238,
        "end": 256,
        "startLoc": {
          "line": 238,
          "column": 17,
          "position": 2039
        },
        "endLoc": {
          "line": 256,
          "column": 14,
          "position": 2156
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle adding a comment",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 91,
        "end": 108,
        "startLoc": {
          "line": 91,
          "column": 3,
          "position": 597
        },
        "endLoc": {
          "line": 108,
          "column": 27,
          "position": 739
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx",
        "start": 35,
        "end": 52,
        "startLoc": {
          "line": 35,
          "column": 3,
          "position": 246
        },
        "endLoc": {
          "line": 52,
          "column": 54,
          "position": 388
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Handle conflict resolution",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 128,
        "end": 141,
        "startLoc": {
          "line": 128,
          "column": 3,
          "position": 923
        },
        "endLoc": {
          "line": 141,
          "column": 30,
          "position": 1043
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 139,
        "end": 152,
        "startLoc": {
          "line": 139,
          "column": 3,
          "position": 1198
        },
        "endLoc": {
          "line": 152,
          "column": 25,
          "position": 1318
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ">\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 326,
        "end": 338,
        "startLoc": {
          "line": 326,
          "column": 21,
          "position": 2641
        },
        "endLoc": {
          "line": 338,
          "column": 4,
          "position": 2740
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 169,
        "end": 181,
        "startLoc": {
          "line": 169,
          "column": 2,
          "position": 1507
        },
        "endLoc": {
          "line": 181,
          "column": 7,
          "position": 1606
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 372,
        "end": 380,
        "startLoc": {
          "line": 372,
          "column": 2,
          "position": 3036
        },
        "endLoc": {
          "line": 380,
          "column": 41,
          "position": 3107
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 210,
        "end": 218,
        "startLoc": {
          "line": 210,
          "column": 7,
          "position": 1841
        },
        "endLoc": {
          "line": 218,
          "column": 46,
          "position": 1912
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 298,
        "end": 308,
        "startLoc": {
          "line": 298,
          "column": 4,
          "position": 2008
        },
        "endLoc": {
          "line": 308,
          "column": 14,
          "position": 2123
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 182,
        "end": 192,
        "startLoc": {
          "line": 182,
          "column": 4,
          "position": 1135
        },
        "endLoc": {
          "line": 192,
          "column": 11,
          "position": 1250
        }
      }
    },
    {
      "format": "javascript",
      "lines": 207,
      "fragment": "={Position.Left}\n          id=\"input_0\"\n          style={{\n            background: '#555',\n            width: 10,\n            height: 10,\n            // No top property - handle will be vertically centered by default\n          }}\n        />\n      );\n    }\n\n    // Output handles\n    if (nodeDefinition.outputs?.length > 0) {\n      nodeDefinition.outputs.forEach((_, index) => {\n        // For single output, don't set top (centers by default)\n        // For multiple outputs, calculate vertical distribution\n        const handleStyle: React.CSSProperties = {\n          background: '#555',\n          width: 10,\n          height: 10,\n        };\n\n        if (nodeDefinition.outputs.length > 1) {\n          handleStyle.top = `${((index + 1) / (nodeDefinition.outputs.length + 1)) * 100}%`;\n        }\n        // No top property for single output - centers by default\n\n        handles.push(\n          <Handle\n            key={`output-${index}`}\n            type=\"source\"\n            position={Position.Right}\n            id={`output_${index}`}\n            style={handleStyle}\n          />\n        );\n      });\n    }\n\n    return handles;\n  };\n\n  // Simple status indicator logic - integrated into main template\n\n  // Toolbar handlers\n  const handlePlay = (_nodeId: string) => {\n    // TODO: Implement play functionality\n  };\n\n  const handleStop = (_nodeId: string) => {\n    // TODO: Implement stop functionality\n  };\n\n  const handleDelete = (_nodeId: string) => {\n    data.onDelete?.();\n  };\n\n  const handleMenuToggle = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    // Handle double-click to open properties panel\n    event.stopPropagation();\n    data.onOpenProperties?.();\n  };\n\n  // Render shared node toolbar and menu\n  const renderToolbarAndMenu = () => {\n    const toolbarVisible = isHovered; // Show on hover only, not requiring selection\n\n    return (\n      <>\n        <NodeToolbar\n          visible={toolbarVisible}\n          onPlay={() => handlePlay(id)}\n          onStop={() => handleStop(id)}\n          onDelete={(e) => {\n            e.stopPropagation();\n            handleDelete(id);\n          }}\n          onMenuToggle={handleMenuToggle}\n          menuTriggerRef={menuTriggerRef as React.RefObject<HTMLButtonElement>}\n        />\n        {/* Custom dark-themed menu with smart positioning */}\n        {showMenu && (\n          <div\n            ref={menuRef}\n            className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n            style={positionStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                data.onOpenProperties?.();\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📂</span> Open\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement test functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🧪</span> Test\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement copy functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📄</span> Copy\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement duplicate functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📋</span> Duplicate\n            </button>\n            <hr className=\"my-1 border-gray-600\" />\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete(id);\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🗑️</span> Delete\n            </button>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  // Check for custom body component\n  const CustomBodyComponent = useMemo(() => {\n    if (!nodeDefinition?.customBodyComponent) return null;\n    return getCustomBodyComponent(nodeDefinition.customBodyComponent);\n  }, [nodeDefinition]);\n\n  // If custom body component exists, use it instead of default rendering\n  if (CustomBodyComponent) {\n    return (\n      <div\n        className={`registry-node ${selected ? 'selected' : ''} relative`}\n        style={{\n          opacity: data.disabled ? 0.5 : 1,\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onDoubleClick={handleDoubleClick}\n      >\n        {/* Custom body components handle their own handles and toolbars internally */}\n        <CustomBodyComponent\n          nodeId={id}\n          nodeData={data}\n          selected={selected}\n          isHovered={isHovered}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          onDelete={data.onDelete}\n          onEdit={data.onEdit}\n          onOpenProperties={data.onOpenProperties}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`registry-node ${selected ? 'selected' : ''} relative`}\n      style={{\n        opacity: data.disabled ? 0.5 : 1,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onDoubleClick={handleDoubleClick}\n    >\n      {renderHandles()}\n      {renderToolbarAndMenu()}\n\n      {/* Gmail-style Base Template for All Nodes */}\n      <div className=\"flex flex-col\">\n        <div className=\"relative\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 86,
        "end": 292,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 793
        },
        "endLoc": {
          "line": 292,
          "column": 2,
          "position": 2145
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 93,
        "end": 299,
        "startLoc": {
          "line": 93,
          "column": 9,
          "position": 884
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2236
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "import type React from 'react';\nimport { memo, useMemo, useRef, useState } from 'react';\nimport type { NodeProps } from 'reactflow';\nimport { Handle, Position } from 'reactflow';\nimport { getCustomBodyComponent } from '@/app/node-extensions/nodeUiRegistry';\nimport { nodeRegistry, type WorkflowNodeInstance } from '@/core';\nimport { useSmartMenuPosition } from '../../../hooks/useSmartMenuPosition';\nimport NodeToolbar from './BaseNode/NodeToolbar';\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 10,
          "position": 118
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 117
        }
      }
    },
    {
      "format": "tsx",
      "lines": 335,
      "fragment": ";\n\ninterface RegistryNodeData extends WorkflowNodeInstance {\n  onDelete?: () => void;\n  onEdit?: () => void;\n  onOpenProperties?: () => void;\n}\n\ninterface RegistryNodeProps extends NodeProps<RegistryNodeData> {}\n\n/**\n * RegistryNode - A React Flow node component that uses the Node Registry\n * This component looks up node definitions from the registry to render nodes\n */\nconst RegistryNode: React.FC<RegistryNodeProps> = ({ data, selected, id }) => {\n  // Hover state for custom toolbar\n  const [isHovered, setIsHovered] = useState(false);\n  // Menu state for NodeMenu\n  const [showMenu, setShowMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showMenu,\n    triggerRef: menuTriggerRef as React.RefObject<HTMLElement>,\n    menuRef: menuRef as React.RefObject<HTMLElement>,\n    offset: 4,\n    onClose: () => setShowMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n  // Look up the node definition from the registry\n  const nodeDefinition = useMemo(() => {\n    return nodeRegistry.getNodeTypeDescription(data.type);\n  }, [data.type]);\n\n  // Get visual configuration\n  const { icon, displayName, subtitle } = useMemo(() => {\n    if (!nodeDefinition) {\n      return {\n        icon: '❓',\n        displayName: data.type,\n        color: '#666',\n        subtitle: 'Unknown node type',\n      };\n    }\n\n    // Build subtitle from parameters if template exists\n    let subtitle = nodeDefinition.subtitle || '';\n    if (subtitle && data.parameters) {\n      subtitle = subtitle.replace(/\\{\\{[^}]+\\}\\}/g, (match) => {\n        const paramPath = match.replace('{{$parameter[\"', '').replace('\"]}}', '');\n        return data.parameters[paramPath] || '';\n      });\n    }\n\n    return {\n      icon: nodeDefinition.icon || nodeDefinition.iconUrl || '📦',\n      displayName: data.name || nodeDefinition.displayName,\n      color: nodeDefinition.defaults?.color || '#1890ff',\n      subtitle,\n    };\n  }, [nodeDefinition, data.name, data.parameters, data.type]);\n\n  // Determine node status\n\n  // Render handles based on node definition\n  const renderHandles = () => {\n    if (!nodeDefinition) return null;\n\n    const handles = [];\n\n    // Input handles\n    if (nodeDefinition.inputs?.length > 0) {\n      handles.push(\n        <Handle\n          key=\"input-main\"\n          type=\"target\"\n          position={Position.Left}\n          id=\"input_0\"\n          style={{\n            background: '#555',\n            width: 10,\n            height: 10,\n            // No top property - handle will be vertically centered by default\n          }}\n        />\n      );\n    }\n\n    // Output handles\n    if (nodeDefinition.outputs?.length > 0) {\n      nodeDefinition.outputs.forEach((_, index) => {\n        // For single output, don't set top (centers by default)\n        // For multiple outputs, calculate vertical distribution\n        const handleStyle: React.CSSProperties = {\n          background: '#555',\n          width: 10,\n          height: 10,\n        };\n\n        if (nodeDefinition.outputs.length > 1) {\n          handleStyle.top = `${((index + 1) / (nodeDefinition.outputs.length + 1)) * 100}%`;\n        }\n        // No top property for single output - centers by default\n\n        handles.push(\n          <Handle\n            key={`output-${index}`}\n            type=\"source\"\n            position={Position.Right}\n            id={`output_${index}`}\n            style={handleStyle}\n          />\n        );\n      });\n    }\n\n    return handles;\n  };\n\n  // Simple status indicator logic - integrated into main template\n\n  // Toolbar handlers\n  const handlePlay = (_nodeId: string) => {\n    // TODO: Implement play functionality\n  };\n\n  const handleStop = (_nodeId: string) => {\n    // TODO: Implement stop functionality\n  };\n\n  const handleDelete = (_nodeId: string) => {\n    data.onDelete?.();\n  };\n\n  const handleMenuToggle = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    // Handle double-click to open properties panel\n    event.stopPropagation();\n    data.onOpenProperties?.();\n  };\n\n  // Render shared node toolbar and menu\n  const renderToolbarAndMenu = () => {\n    const toolbarVisible = isHovered; // Show on hover only, not requiring selection\n\n    return (\n      <>\n        <NodeToolbar\n          visible={toolbarVisible}\n          onPlay={() => handlePlay(id)}\n          onStop={() => handleStop(id)}\n          onDelete={(e) => {\n            e.stopPropagation();\n            handleDelete(id);\n          }}\n          onMenuToggle={handleMenuToggle}\n          menuTriggerRef={menuTriggerRef as React.RefObject<HTMLButtonElement>}\n        />\n        {/* Custom dark-themed menu with smart positioning */}\n        {showMenu && (\n          <div\n            ref={menuRef}\n            className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n            style={positionStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                data.onOpenProperties?.();\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📂</span> Open\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement test functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🧪</span> Test\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement copy functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📄</span> Copy\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement duplicate functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📋</span> Duplicate\n            </button>\n            <hr className=\"my-1 border-gray-600\" />\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete(id);\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🗑️</span> Delete\n            </button>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  // Check for custom body component\n  const CustomBodyComponent = useMemo(() => {\n    if (!nodeDefinition?.customBodyComponent) return null;\n    return getCustomBodyComponent(nodeDefinition.customBodyComponent);\n  }, [nodeDefinition]);\n\n  // If custom body component exists, use it instead of default rendering\n  if (CustomBodyComponent) {\n    return (\n      <div\n        className={`registry-node ${selected ? 'selected' : ''} relative`}\n        style={{\n          opacity: data.disabled ? 0.5 : 1,\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onDoubleClick={handleDoubleClick}\n      >\n        {/* Custom body components handle their own handles and toolbars internally */}\n        <CustomBodyComponent\n          nodeId={id}\n          nodeData={data}\n          selected={selected}\n          isHovered={isHovered}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          onDelete={data.onDelete}\n          onEdit={data.onEdit}\n          onOpenProperties={data.onOpenProperties}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`registry-node ${selected ? 'selected' : ''} relative`}\n      style={{\n        opacity: data.disabled ? 0.5 : 1,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onDoubleClick={handleDoubleClick}\n    >\n      {renderHandles()}\n      {renderToolbarAndMenu()}\n\n      {/* Gmail-style Base Template for All Nodes */}\n      <div className=\"flex flex-col\">\n        <div className=\"relative\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}\n          >\n            {/* Dynamic Node Icon */}\n            <div className=\"flex items-center justify-center\">\n              {icon.startsWith('http') || icon.startsWith('/') ? (\n                <img\n                  src={icon}\n                  alt={displayName}\n                  className=\"w-6 h-6\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'none';\n                    const fallback = target.nextElementSibling;\n                    if (fallback) {\n                      fallback.classList.remove('hidden');\n                    }\n                  }}\n                />\n              ) : (\n                <span className=\"text-2xl\">{icon}</span>\n              )}\n              {/* Fallback icon for broken images */}\n              <span className=\"hidden text-xl\">📦</span>\n            </div>\n\n            {/* Status Indicators */}\n            {(data.disabled || data.retryOnFail || data.continueOnFail) && (\n              <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-xs\">\n                  {data.disabled ? '!' : data.retryOnFail ? 'R' : 'C'}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Node Label - Below the node */}\n        <div className=\"mt-2 text-white text-sm font-medium text-center max-w-[150px] truncate\">\n          {displayName}\n        </div>\n\n        {/* Subtitle if exists */}\n        {subtitle && (\n          <div className=\"text-xs text-gray-400 text-center max-w-[150px] truncate\">{subtitle}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RegistryNode);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 8,
        "end": 342,
        "startLoc": {
          "line": 8,
          "column": 25,
          "position": 115
        },
        "endLoc": {
          "line": 342,
          "column": 2,
          "position": 2535
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 15,
        "end": 349,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 206
        },
        "endLoc": {
          "line": 349,
          "column": 2,
          "position": 2626
        }
      }
    },
    {
      "format": "javascript",
      "lines": 216,
      "fragment": "={cn(\n          'relative border-2 rounded-lg transition-all duration-200',\n          selected && 'ring-2 ring-blue-500 ring-opacity-50',\n          isResizing && 'cursor-nw-resize'\n        )}\n        style={{\n          width: config.dimensions.width,\n          height: config.dimensions.height,\n          backgroundColor: config.style.backgroundColor,\n          borderColor: config.style.borderColor,\n          borderWidth: config.style.borderWidth,\n          borderRadius: config.style.borderRadius,\n          opacity: config.style.opacity,\n          zIndex: config.style.zIndex,\n        }}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {/* Container Header */}\n        <div className=\"absolute top-0 left-0 right-0 p-2 bg-gray-900 bg-opacity-80 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">{getContainerIcon()}</span>\n              <span className=\"text-sm font-semibold text-white\">{config.name}</span>\n              <Badge\n                count={config.children.length}\n                size=\"small\"\n                style={{ backgroundColor: '#1890ff' }}\n              />\n            </div>\n\n            <Space size=\"small\">\n              {state.status === 'running' ? (\n                <Tooltip title=\"Stop execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<StopOutlined />}\n                    onClick={handleStop}\n                    className=\"text-red-400 hover:text-red-300\"\n                  />\n                </Tooltip>\n              ) : (\n                <Tooltip title=\"Start execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<PlayCircleOutlined />}\n                    onClick={handleExecute}\n                    className=\"text-green-400 hover:text-green-300\"\n                  />\n                </Tooltip>\n              )}\n\n              <Dropdown menu={{ items: menuItems }} trigger={['click']} placement=\"bottomRight\">\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<MoreOutlined />}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </Dropdown>\n            </Space>\n          </div>\n        </div>\n\n        {/* Container Status */}\n        <div className=\"absolute top-8 left-2 right-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center gap-1\">\n              {getStatusIcon()}\n              <span className=\"text-gray-300 capitalize\">{state.status}</span>\n            </div>\n\n            {state.currentIteration !== undefined && (\n              <div className=\"text-gray-400\">\n                {state.currentIteration}/{state.totalIterations || '∞'}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Container Content Area */}\n        <div className=\"absolute top-16 left-2 right-2 bottom-2 bg-gray-800 bg-opacity-50 rounded border border-gray-600\">\n          <div className=\"p-2 h-full overflow-auto\">\n            {config.children.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl mb-2\">📁</div>\n                  <div className=\"text-sm\">Drop nodes here</div>\n                  <div className=\"text-xs\">to add them to this container</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {config.children.map((childId) => (\n                  <div key={childId} className=\"p-1 bg-gray-700 rounded text-xs text-gray-300\">\n                    {childId}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Resize Handle */}\n        <div\n          ref={resizeRef}\n          className=\"absolute bottom-0 right-0 w-3 h-3 cursor-nw-resize bg-blue-500 opacity-0 hover:opacity-100 transition-opacity\"\n          onMouseDown={handleMouseDown}\n        />\n\n        {/* Input Handle */}\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id=\"input\"\n          className=\"w-3 h-3 bg-blue-500 border-2 border-white\"\n        />\n\n        {/* Output Handles */}\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id=\"output\"\n          className=\"w-3 h-3 bg-green-500 border-2 border-white\"\n        />\n      </div>\n\n      {/* Configuration Modal */}\n      <Modal\n        title={`Configure ${config.name}`}\n        open={isConfigModalOpen}\n        onCancel={() => setIsConfigModalOpen(false)}\n        onOk={() => configForm.submit()}\n        width={600}\n      >\n        <Form\n          form={configForm}\n          layout=\"vertical\"\n          initialValues={config.executionConfig}\n          onFinish={handleConfigChange}\n        >\n          {config.type === 'loop' && (\n            <>\n              <Form.Item name=\"loopType\" label=\"Loop Type\">\n                <Select>\n                  <Select.Option value=\"for\">For Loop</Select.Option>\n                  <Select.Option value=\"while\">While Loop</Select.Option>\n                  <Select.Option value=\"foreach\">For Each</Select.Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\">\n                <InputNumber min={1} max={1000} />\n              </Form.Item>\n\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\">\n                <InputNumber min={1} max={20} />\n              </Form.Item>\n\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'conditional' && (\n            <Form.Item name=\"conditionExpression\" label=\"Condition Expression\">\n              <Input.TextArea\n                placeholder=\"Enter JavaScript expression, e.g., $input.value > 10\"\n                rows={3}\n              />\n            </Form.Item>\n          )}\n\n          {config.type === 'try-catch' && (\n            <>\n              <Form.Item name=\"retryAttempts\" label=\"Retry Attempts\">\n                <InputNumber min={0} max={10} />\n              </Form.Item>\n\n              <Form.Item name=\"retryDelay\" label=\"Retry Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"errorHandling\" label=\"Error Handling\">\n                <Select>\n                  <Select.Option value=\"stop\">Stop on Error</Select.Option>\n                  <Select.Option value=\"continue\">Continue on Error</Select.Option>\n                  <Select.Option value=\"retry\">Retry on Error</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'batch' && (\n            <>\n              <Form.Item name=\"batchSize\" label=\"Batch Size\">\n                <InputNumber min={1} max={100} />\n              </Form.Item>\n\n              <Form.Item name=\"batchDelay\" label=\"Batch Delay (ms)\">\n                <InputNumber min={0} max={10000}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx",
        "start": 221,
        "end": 436,
        "startLoc": {
          "line": 221,
          "column": 10,
          "position": 1742
        },
        "endLoc": {
          "line": 436,
          "column": 2,
          "position": 3460
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 230,
        "end": 445,
        "startLoc": {
          "line": 230,
          "column": 10,
          "position": 1859
        },
        "endLoc": {
          "line": 445,
          "column": 2,
          "position": 3577
        }
      }
    },
    {
      "format": "tsx",
      "lines": 453,
      "fragment": "/**\n * Container Node Component\n *\n * Advanced container nodes that can hold other nodes and provide\n * complex execution patterns like loops, parallel processing, and conditionals.\n */\n\nimport {\n  CompressOutlined,\n  DeleteOutlined,\n  ExpandOutlined,\n  MoreOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Select,\n  Space,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useRef, useState } from 'react';\nimport { Handle, type NodeProps, Position } from 'reactflow';\nimport type {\n  ContainerDropEvent,\n  ContainerExecutionState,\n  ContainerNodeConfig,\n  ContainerResizeEvent,\n} from '@/core/types/containerNodes';\nimport { cn } from '@/design-system/utils';\n\ninterface ContainerNodeProps extends NodeProps {\n  data: {\n    config: ContainerNodeConfig;\n    state: ContainerExecutionState;\n    onResize?: (event: ContainerResizeEvent) => void;\n    onDrop?: (event: ContainerDropEvent) => void;\n    onConfigChange?: (config: ContainerNodeConfig) => void;\n    onExecute?: (containerId: string) => void;\n    onStop?: (containerId: string) => void;\n  };\n}\n\nconst ContainerNode: React.FC<ContainerNodeProps> = ({ data, selected }) => {\n  const { config, state, onResize, onDrop, onConfigChange, onExecute, onStop } = data;\n  const [isResizing, setIsResizing] = useState(false);\n  const [isConfigModalOpen, setIsConfigModalOpen] = useState(false);\n  const [configForm] = Form.useForm();\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      if (e.target !== resizeRef.current) return;\n\n      e.preventDefault();\n      setIsResizing(true);\n\n      const startX = e.clientX;\n      const startY = e.clientY;\n      const startWidth = config.dimensions.width;\n      const startHeight = config.dimensions.height;\n\n      const handleMouseMove = (e: MouseEvent) => {\n        const deltaX = e.clientX - startX;\n        const deltaY = e.clientY - startY;\n\n        const newWidth = Math.max(200, startWidth + deltaX);\n        const newHeight = Math.max(150, startHeight + deltaY);\n\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: newWidth, height: newHeight },\n          childrenPositions: [], // Would be calculated based on children\n        });\n      };\n\n      const handleMouseUp = () => {\n        setIsResizing(false);\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    },\n    [config, onResize]\n  );\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n\n      const nodeData = e.dataTransfer.getData('application/reactflow');\n      if (!nodeData) return;\n\n      const nodeInfo = JSON.parse(nodeData);\n      const rect = e.currentTarget.getBoundingClientRect();\n      const position = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      };\n\n      onDrop?.({\n        containerId: config.id,\n        nodeId: nodeInfo.id,\n        position,\n      });\n    },\n    [config.id, onDrop]\n  );\n\n  const handleExecute = useCallback(() => {\n    onExecute?.(config.id);\n  }, [config.id, onExecute]);\n\n  const handleStop = useCallback(() => {\n    onStop?.(config.id);\n  }, [config.id, onStop]);\n\n  const handleConfigChange = useCallback(\n    (values: any) => {\n      const newConfig = {\n        ...config,\n        executionConfig: { ...config.executionConfig, ...values },\n      };\n      onConfigChange?.(newConfig);\n      setIsConfigModalOpen(false);\n    },\n    [config, onConfigChange]\n  );\n\n  const getStatusIcon = () => {\n    switch (state.status) {\n      case 'running':\n        return <PlayCircleOutlined className=\"text-green-500\" />;\n      case 'completed':\n        return <PlayCircleOutlined className=\"text-blue-500\" />;\n      case 'failed':\n        return <StopOutlined className=\"text-red-500\" />;\n      case 'paused':\n        return <PauseCircleOutlined className=\"text-yellow-500\" />;\n      default:\n        return <PlayCircleOutlined className=\"text-gray-500\" />;\n    }\n  };\n\n  const getContainerIcon = () => {\n    switch (config.type) {\n      case 'loop':\n        return '🔄';\n      case 'parallel':\n        return '⚡';\n      case 'conditional':\n        return '❓';\n      case 'try-catch':\n        return '🛡️';\n      case 'batch':\n        return '📦';\n      default:\n        return '📁';\n    }\n  };\n\n  const menuItems = [\n    {\n      key: 'config',\n      label: 'Configure',\n      icon: <SettingOutlined />,\n      onClick: () => setIsConfigModalOpen(true),\n    },\n    {\n      key: 'expand',\n      label: 'Expand',\n      icon: <ExpandOutlined />,\n      onClick: () => {\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: 600, height: 500 },\n          childrenPositions: [],\n        });\n      },\n    },\n    {\n      key: 'compress',\n      label: 'Compress',\n      icon: <CompressOutlined />,\n      onClick: () => {\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: 300, height: 200 },\n          childrenPositions: [],\n        });\n      },\n    },\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'delete',\n      label: 'Delete Container',\n      icon: <DeleteOutlined />,\n      danger: true,\n      onClick: () => {\n        // Handle container deletion\n      },\n    },\n  ];\n\n  return (\n    <>\n      <div\n        className={cn(\n          'relative border-2 rounded-lg transition-all duration-200',\n          selected && 'ring-2 ring-blue-500 ring-opacity-50',\n          isResizing && 'cursor-nw-resize'\n        )}\n        style={{\n          width: config.dimensions.width,\n          height: config.dimensions.height,\n          backgroundColor: config.style.backgroundColor,\n          borderColor: config.style.borderColor,\n          borderWidth: config.style.borderWidth,\n          borderRadius: config.style.borderRadius,\n          opacity: config.style.opacity,\n          zIndex: config.style.zIndex,\n        }}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {/* Container Header */}\n        <div className=\"absolute top-0 left-0 right-0 p-2 bg-gray-900 bg-opacity-80 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">{getContainerIcon()}</span>\n              <span className=\"text-sm font-semibold text-white\">{config.name}</span>\n              <Badge\n                count={config.children.length}\n                size=\"small\"\n                style={{ backgroundColor: '#1890ff' }}\n              />\n            </div>\n\n            <Space size=\"small\">\n              {state.status === 'running' ? (\n                <Tooltip title=\"Stop execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<StopOutlined />}\n                    onClick={handleStop}\n                    className=\"text-red-400 hover:text-red-300\"\n                  />\n                </Tooltip>\n              ) : (\n                <Tooltip title=\"Start execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<PlayCircleOutlined />}\n                    onClick={handleExecute}\n                    className=\"text-green-400 hover:text-green-300\"\n                  />\n                </Tooltip>\n              )}\n\n              <Dropdown menu={{ items: menuItems }} trigger={['click']} placement=\"bottomRight\">\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<MoreOutlined />}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </Dropdown>\n            </Space>\n          </div>\n        </div>\n\n        {/* Container Status */}\n        <div className=\"absolute top-8 left-2 right-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center gap-1\">\n              {getStatusIcon()}\n              <span className=\"text-gray-300 capitalize\">{state.status}</span>\n            </div>\n\n            {state.currentIteration !== undefined && (\n              <div className=\"text-gray-400\">\n                {state.currentIteration}/{state.totalIterations || '∞'}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Container Content Area */}\n        <div className=\"absolute top-16 left-2 right-2 bottom-2 bg-gray-800 bg-opacity-50 rounded border border-gray-600\">\n          <div className=\"p-2 h-full overflow-auto\">\n            {config.children.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl mb-2\">📁</div>\n                  <div className=\"text-sm\">Drop nodes here</div>\n                  <div className=\"text-xs\">to add them to this container</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {config.children.map((childId) => (\n                  <div key={childId} className=\"p-1 bg-gray-700 rounded text-xs text-gray-300\">\n                    {childId}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Resize Handle */}\n        <div\n          ref={resizeRef}\n          className=\"absolute bottom-0 right-0 w-3 h-3 cursor-nw-resize bg-blue-500 opacity-0 hover:opacity-100 transition-opacity\"\n          onMouseDown={handleMouseDown}\n        />\n\n        {/* Input Handle */}\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id=\"input\"\n          className=\"w-3 h-3 bg-blue-500 border-2 border-white\"\n        />\n\n        {/* Output Handles */}\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id=\"output\"\n          className=\"w-3 h-3 bg-green-500 border-2 border-white\"\n        />\n      </div>\n\n      {/* Configuration Modal */}\n      <Modal\n        title={`Configure ${config.name}`}\n        open={isConfigModalOpen}\n        onCancel={() => setIsConfigModalOpen(false)}\n        onOk={() => configForm.submit()}\n        width={600}\n      >\n        <Form\n          form={configForm}\n          layout=\"vertical\"\n          initialValues={config.executionConfig}\n          onFinish={handleConfigChange}\n        >\n          {config.type === 'loop' && (\n            <>\n              <Form.Item name=\"loopType\" label=\"Loop Type\">\n                <Select>\n                  <Select.Option value=\"for\">For Loop</Select.Option>\n                  <Select.Option value=\"while\">While Loop</Select.Option>\n                  <Select.Option value=\"foreach\">For Each</Select.Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\">\n                <InputNumber min={1} max={1000} />\n              </Form.Item>\n\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\">\n                <InputNumber min={1} max={20} />\n              </Form.Item>\n\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'conditional' && (\n            <Form.Item name=\"conditionExpression\" label=\"Condition Expression\">\n              <Input.TextArea\n                placeholder=\"Enter JavaScript expression, e.g., $input.value > 10\"\n                rows={3}\n              />\n            </Form.Item>\n          )}\n\n          {config.type === 'try-catch' && (\n            <>\n              <Form.Item name=\"retryAttempts\" label=\"Retry Attempts\">\n                <InputNumber min={0} max={10} />\n              </Form.Item>\n\n              <Form.Item name=\"retryDelay\" label=\"Retry Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"errorHandling\" label=\"Error Handling\">\n                <Select>\n                  <Select.Option value=\"stop\">Stop on Error</Select.Option>\n                  <Select.Option value=\"continue\">Continue on Error</Select.Option>\n                  <Select.Option value=\"retry\">Retry on Error</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'batch' && (\n            <>\n              <Form.Item name=\"batchSize\" label=\"Batch Size\">\n                <InputNumber min={1} max={100} />\n              </Form.Item>\n\n              <Form.Item name=\"batchDelay\" label=\"Batch Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"batchStrategy\" label=\"Batch Strategy\">\n                <Select>\n                  <Select.Option value=\"sequential\">Sequential</Select.Option>\n                  <Select.Option value=\"parallel\">Parallel</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContainerNode;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx",
        "start": 1,
        "end": 453,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 453,
          "column": 2,
          "position": 3569
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 10,
        "end": 462,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 117
        },
        "endLoc": {
          "line": 462,
          "column": 2,
          "position": 3686
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx",
        "start": 405,
        "end": 410,
        "startLoc": {
          "line": 405,
          "column": 2,
          "position": 2628
        },
        "endLoc": {
          "line": 410,
          "column": 3,
          "position": 2690
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx",
        "start": 403,
        "end": 409,
        "startLoc": {
          "line": 403,
          "column": 3,
          "position": 2612
        },
        "endLoc": {
          "line": 409,
          "column": 2,
          "position": 2676
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/infrastructure/repositories/PermissionRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/domain/repositories/IPermissionRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/infrastructure/repositories/OperationalTransformRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/domain/repositories/IOperationalTransformRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/infrastructure/repositories/EmbeddingsRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/domain/repositories/IEmbeddingsRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/infrastructure/repositories/DatabaseRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/domain/repositories/IDatabaseRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/infrastructure/repositories/CursorTrackingRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/domain/repositories/ICursorTrackingRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "{\n  async findById(id: string): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async findAll(): Promise<any[]> {\n    // TODO: Implement\n    return [];\n  }\n\n  async create(data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async update(id: string, data: any): Promise<any> {\n    // TODO: Implement\n    throw new Error('Not implemented');\n  }\n\n  async delete(id: string): Promise<boolean> {\n    // TODO: Implement\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/infrastructure/repositories/CollaborationRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/infrastructure/repositories/VersionControlRepository.ts",
        "start": 5,
        "end": 30,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 44
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/repositories/ICollaborationRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Error",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/gmail/GmailService.ts",
        "start": 38,
        "end": 53,
        "startLoc": {
          "line": 38,
          "column": 19,
          "position": 232
        },
        "endLoc": {
          "line": 53,
          "column": 6,
          "position": 342
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 11,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 20,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async split(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async map(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async trim(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/gmail/GmailService.ts",
        "start": 148,
        "end": 168,
        "startLoc": {
          "line": 148,
          "column": 10,
          "position": 1046
        },
        "endLoc": {
          "line": 168,
          "column": 7,
          "position": 1193
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflow/WorkflowService.ts",
        "start": 33,
        "end": 53,
        "startLoc": {
          "line": 33,
          "column": 3,
          "position": 195
        },
        "endLoc": {
          "line": 53,
          "column": 4,
          "position": 342
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async AppError(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async plan",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 43,
        "end": 58,
        "startLoc": {
          "line": 43,
          "column": 5,
          "position": 269
        },
        "endLoc": {
          "line": 58,
          "column": 5,
          "position": 379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 28,
        "end": 43,
        "startLoc": {
          "line": 28,
          "column": 12,
          "position": 158
        },
        "endLoc": {
          "line": 43,
          "column": 4,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async isValidObjectId(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async isValid(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getCredentials",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/credential/CredentialService.ts",
        "start": 13,
        "end": 28,
        "startLoc": {
          "line": 13,
          "column": 21,
          "position": 47
        },
        "endLoc": {
          "line": 28,
          "column": 15,
          "position": 157
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 18,
        "end": 33,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 33,
          "column": 17,
          "position": 194
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async gmail(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getProfile(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async list",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/credential/CredentialService.ts",
        "start": 243,
        "end": 258,
        "startLoc": {
          "line": 243,
          "column": 19,
          "position": 1749
        },
        "endLoc": {
          "line": 258,
          "column": 5,
          "position": 1859
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 15,
          "position": 713
        },
        "endLoc": {
          "line": 118,
          "column": 6,
          "position": 823
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async fetch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async json(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/credential/CredentialService.ts",
        "start": 258,
        "end": 273,
        "startLoc": {
          "line": 258,
          "column": 5,
          "position": 1860
        },
        "endLoc": {
          "line": 273,
          "column": 6,
          "position": 1968
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 468,
        "end": 482,
        "startLoc": {
          "line": 468,
          "column": 4,
          "position": 3414
        },
        "endLoc": {
          "line": 482,
          "column": 2,
          "position": 3520
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    // Check if user already reacted",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 90,
        "end": 106,
        "startLoc": {
          "line": 90,
          "column": 44,
          "position": 707
        },
        "endLoc": {
          "line": 106,
          "column": 33,
          "position": 832
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 42,
        "end": 58,
        "startLoc": {
          "line": 42,
          "column": 38,
          "position": 356
        },
        "endLoc": {
          "line": 58,
          "column": 6,
          "position": 481
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "= asyncHandler(async (req: Request, res: Response): Promise<void> =>\n{\n  const { commentId } = req.params;\n\n  if (!commentId) {\n    res.status(400).json(ApiResponse.error('Comment ID is required'));\n    return;\n  }\n\n  const userId",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 29,
        "end": 38,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 150
        },
        "endLoc": {
          "line": 38,
          "column": 7,
          "position": 236
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 2,
        "end": 11,
        "startLoc": {
          "line": 2,
          "column": 2,
          "position": 8
        },
        "endLoc": {
          "line": 11,
          "column": 8,
          "position": 94
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "));\n    return;\n  }\n\n  const userId = (req as any).user?.id;\n  if (!userId) {\n    res.status(401).json(ApiResponse.error('Authentication required'));\n    return;\n  }\n\n  const comment = await Comment.findById(commentId);\n  if (!comment) {\n    res.status(404).json(ApiResponse.error('Comment not found'));\n    return;\n  }\n\n  const reactionIndex",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 34,
        "end": 50,
        "startLoc": {
          "line": 34,
          "column": 25,
          "position": 221
        },
        "endLoc": {
          "line": 50,
          "column": 14,
          "position": 348
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 42,
        "end": 58,
        "startLoc": {
          "line": 42,
          "column": 38,
          "position": 356
        },
        "endLoc": {
          "line": 58,
          "column": 6,
          "position": 483
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ";\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 77,
        "end": 96,
        "startLoc": {
          "line": 77,
          "column": 5,
          "position": 550
        },
        "endLoc": {
          "line": 96,
          "column": 3,
          "position": 703
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 31,
        "end": 58,
        "startLoc": {
          "line": 31,
          "column": 7,
          "position": 193
        },
        "endLoc": {
          "line": 58,
          "column": 6,
          "position": 481
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n\n  if (!commentId) {\n    res.status(400).json(ApiResponse.error('Comment ID is required'));\n    return;\n  }\n\n  const comment = await Comment.findById(commentId);\n  if (!comment) {\n    res.status(404).json(ApiResponse.error('Comment not found'));\n    return;\n  }\n\n  // Check if user is author or has permission to edit",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-management.ts",
        "start": 53,
        "end": 66,
        "startLoc": {
          "line": 53,
          "column": 5,
          "position": 369
        },
        "endLoc": {
          "line": 66,
          "column": 53,
          "position": 464
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 4,
        "end": 17,
        "startLoc": {
          "line": 4,
          "column": 7,
          "position": 51
        },
        "endLoc": {
          "line": 17,
          "column": 6,
          "position": 146
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n    const userId = (req as any).user?.id;\n\n    const workflow = await this.workflowService.get(id);\n\n    if (!workflow) {\n      res.status(404).json({\n        success: false,\n        message: 'Workflow not found',\n      });\n      return;\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-sharing.ts",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 95
        },
        "endLoc": {
          "line": 26,
          "column": 3,
          "position": 189
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-versioning.ts",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 5,
          "position": 97
        },
        "endLoc": {
          "line": 26,
          "column": 24,
          "position": 191
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ".parse(req.body);\n    const userId = (req as any).user?.id;\n\n    const workflow = await this.workflowService.get(id);\n\n    if (!workflow) {\n      res.status(404).json({\n        success: false,\n        message: 'Workflow not found',\n      });\n      return;\n    }\n\n    if (!this.hasExecutePermission",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 22,
          "position": 327
        },
        "endLoc": {
          "line": 55,
          "column": 21,
          "position": 434
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-sharing.ts",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 20,
          "position": 88
        },
        "endLoc": {
          "line": 26,
          "column": 19,
          "position": 195
        }
      }
    },
    {
      "format": "javascript",
      "lines": 341,
      "fragment": "={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={cred.value} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 106,
        "end": 446,
        "startLoc": {
          "line": 106,
          "column": 6,
          "position": 886
        },
        "endLoc": {
          "line": 446,
          "column": 2,
          "position": 3308
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 109,
        "end": 449,
        "startLoc": {
          "line": 109,
          "column": 6,
          "position": 925
        },
        "endLoc": {
          "line": 449,
          "column": 2,
          "position": 3347
        }
      }
    },
    {
      "format": "tsx",
      "lines": 454,
      "fragment": "/**\n * PropertyField Component\n * Dynamic form field renderer for node properties with advanced features\n */\n\nimport {\n  EyeInvisibleOutlined,\n  EyeOutlined,\n  InfoCircleOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useNodeTheme } from '../../../app/node-extensions/themes';\nimport type { NodeTheme } from '../../../app/node-extensions/types';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: NodeTheme;\n  context?: Record<string, any>;\n  errors?: string[];\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme: propTheme,\n  errors = [],\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [internalValue, setInternalValue] = useState(value);\n  const [showPassword, setShowPassword] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const handleChange = (newValue: any) => {\n    setInternalValue(newValue);\n\n    // Validate the new value\n    const error = validateValue(newValue);\n    setValidationError(error);\n\n    // Only call onChange if validation passes\n    if (!error) {\n      onChange(newValue);\n    }\n  };\n\n  const validateValue = (val: any): string | null => {\n    if (property.required && (val === undefined || val === null || val === '')) {\n      return `${property.displayName} is required`;\n    }\n\n    if (property.type === 'string' || property.type === 'text') {\n      if (property.typeOptions?.minValue && val.length < property.typeOptions.minValue) {\n        return `${property.displayName} must be at least ${property.typeOptions.minValue} characters`;\n      }\n      if (property.typeOptions?.maxValue && val.length > property.typeOptions.maxValue) {\n        return `${property.displayName} must be no more than ${property.typeOptions.maxValue} characters`;\n      }\n    }\n\n    if (property.type === 'number') {\n      if (property.min !== undefined && val < property.min) {\n        return `${property.displayName} must be at least ${property.min}`;\n      }\n      if (property.max !== undefined && val > property.max) {\n        return `${property.displayName} must be no more than ${property.max}`;\n      }\n    }\n\n    return null;\n  };\n\n  const renderLabel = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={cred.value} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}>\n      {renderLabel()}\n      {renderField()}\n      {renderError()}\n    </div>\n  );\n};\n\nexport default PropertyField;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 1,
        "end": 454,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 454,
          "column": 2,
          "position": 3350
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 4,
        "end": 457,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 457,
          "column": 2,
          "position": 3389
        }
      }
    },
    {
      "format": "javascript",
      "lines": 60,
      "fragment": "={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 291,
        "end": 350,
        "startLoc": {
          "line": 291,
          "column": 6,
          "position": 2237
        },
        "endLoc": {
          "line": 350,
          "column": 2,
          "position": 2756
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 298,
        "end": 357,
        "startLoc": {
          "line": 298,
          "column": 6,
          "position": 2328
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2847
        }
      }
    },
    {
      "format": "tsx",
      "lines": 362,
      "fragment": "/**\n * Enhanced Node Toolbar\n * Advanced toolbar with customizable actions, themes, and interactions\n */\n\nimport {\n  BugOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  PlayCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { useNodeTheme } from '../../../app/node-extensions/themes';\nimport type { NodeTheme, ToolbarAction } from '../../../app/node-extensions/types';\n\ninterface EnhancedNodeToolbarProps {\n  nodeId: string;\n  visible: boolean;\n  actions?: ToolbarAction[];\n  theme?: NodeTheme;\n  onActionClick: (actionId: string, nodeId: string) => void;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'default' | 'compact' | 'floating';\n}\n\nconst EnhancedNodeToolbar: React.FC<EnhancedNodeToolbarProps> = ({\n  nodeId,\n  visible,\n  actions = [],\n  theme: propTheme,\n  onActionClick,\n  position = 'top',\n  size = 'medium',\n  variant = 'default',\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [hoveredAction, setHoveredAction] = useState<string | null>(null);\n  const toolbarRef = useRef<HTMLDivElement>(null);\n\n  // Default actions if none provided\n  const defaultActions: ToolbarAction[] = [\n    {\n      id: 'play',\n      icon: 'PlayCircleOutlined',\n      label: 'Run Node',\n      action: 'execute',\n      shortcut: 'Ctrl+R',\n    },\n    {\n      id: 'stop',\n      icon: 'StopOutlined',\n      label: 'Stop Execution',\n      action: 'stop',\n    },\n    {\n      id: 'copy',\n      icon: 'CopyOutlined',\n      label: 'Duplicate Node',\n      action: 'duplicate',\n      shortcut: 'Ctrl+D',\n    },\n    {\n      id: 'edit',\n      icon: 'EditOutlined',\n      label: 'Edit Node',\n      action: 'edit',\n      shortcut: 'Enter',\n    },\n    {\n      id: 'delete',\n      icon: 'DeleteOutlined',\n      label: 'Delete Node',\n      action: 'delete',\n      shortcut: 'Del',\n    },\n    {\n      id: 'more',\n      icon: 'MoreOutlined',\n      label: 'More Actions',\n      action: 'menu',\n    },\n  ];\n\n  const finalActions = actions.length > 0 ? actions : defaultActions;\n\n  const getPositionStyles = (): React.CSSProperties => {\n    const offset = variant === 'floating' ? 12 : 8;\n    const baseStyles: React.CSSProperties = {\n      position: 'absolute',\n      zIndex: 9999,\n    };\n\n    switch (position) {\n      case 'top':\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'bottom':\n        return {\n          ...baseStyles,\n          bottom: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'left':\n        return {\n          ...baseStyles,\n          left: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      case 'right':\n        return {\n          ...baseStyles,\n          right: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n    }\n  };\n\n  const getSizeConfig = () => {\n    switch (size) {\n      case 'small':\n        return { buttonSize: 24, iconSize: 12, padding: '4px' };\n      case 'large':\n        return { buttonSize: 36, iconSize: 16, padding: '8px' };\n      default:\n        return { buttonSize: 28, iconSize: 14, padding: '6px' };\n    }\n  };\n\n  const getVariantStyles = (): React.CSSProperties => {\n    const { padding } = getSizeConfig();\n\n    const baseStyles: React.CSSProperties = {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '2px',\n      borderRadius: theme.borderRadius.md,\n      transition: `all ${theme.animations.duration.normal} ${theme.animations.easing.easeOut}`,\n      opacity: visible ? 1 : 0,\n      transform: visible ? 'scale(1)' : 'scale(0.9)',\n      padding,\n    };\n\n    switch (variant) {\n      case 'compact':\n        return {\n          ...baseStyles,\n          background: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(8px)',\n          border: `1px solid ${theme.colors.border}40`,\n        };\n      case 'floating':\n        return {\n          ...baseStyles,\n          background: theme.colors.background,\n          border: `1px solid ${theme.colors.border}`,\n          boxShadow: theme.shadows.lg,\n        };\n      default:\n        return {\n          ...baseStyles,\n          background: 'rgba(0, 0, 0, 0.9)',\n          border: `1px solid ${theme.colors.border}60`,\n          boxShadow: theme.shadows.md,\n        };\n    }\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const iconMap: Record<string, React.ComponentType<any>> = {\n      PlayCircleOutlined,\n      StopOutlined,\n      DeleteOutlined,\n      MoreOutlined,\n      CopyOutlined,\n      EditOutlined,\n      SettingOutlined,\n      BugOutlined,\n      ReloadOutlined,\n    };\n\n    const IconComponent = iconMap[iconName] || MoreOutlined;\n    return IconComponent;\n  };\n\n  const handleActionClick = (action: ToolbarAction, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    // Special handling for menu action\n    if (action.id === 'more') {\n      // Show additional actions menu\n      return;\n    }\n\n    onActionClick(action.id, nodeId);\n  };\n\n  const getButtonStyles = (actionId: string): React.CSSProperties => {\n    const { buttonSize, iconSize } = getSizeConfig();\n    const isHovered = hoveredAction === actionId;\n\n    const buttonColor = getActionColor(actionId);\n\n    return {\n      width: buttonSize,\n      height: buttonSize,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: theme.borderRadius.sm,\n      background: isHovered ? buttonColor : 'transparent',\n      color: isHovered ? theme.colors.background : getActionTextColor(actionId),\n      border: 'none',\n      cursor: 'pointer',\n      transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeOut}`,\n      fontSize: iconSize,\n      transform: isHovered ? 'scale(1.1)' : 'scale(1)',\n    };\n  };\n\n  const getActionColor = (actionId: string): string => {\n    switch (actionId) {\n      case 'play':\n        return theme.colors.success;\n      case 'stop':\n        return theme.colors.error;\n      case 'delete':\n        return theme.colors.error;\n      case 'copy':\n        return theme.colors.info;\n      case 'edit':\n        return theme.colors.primary;\n      default:\n        return theme.colors.textSecondary;\n    }\n  };\n\n  const getActionTextColor = (actionId: string): string => {\n    if (variant === 'floating') {\n      return getActionColor(actionId);\n    }\n    return theme.colors.background;\n  };\n\n  const renderMoreMenu = () => {\n    const moreActions: ToolbarAction[] = [\n      {\n        id: 'settings',\n        icon: 'SettingOutlined',\n        label: 'Node Settings',\n        action: 'settings',\n      },\n      {\n        id: 'debug',\n        icon: 'BugOutlined',\n        label: 'Debug Node',\n        action: 'debug',\n      },\n      {\n        id: 'reload',\n        icon: 'ReloadOutlined',\n        label: 'Reload Node',\n        action: 'reload',\n      },\n    ];\n\n    const menuItems = moreActions.map((action) => ({\n      key: action.id,\n      label: (\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}\n              >\n                {React.createElement(getIconComponent(action.icon))}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedNodeToolbar;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 362,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 362,
          "column": 2,
          "position": 2817
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 8,
        "end": 369,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 369,
          "column": 2,
          "position": 2908
        }
      }
    },
    {
      "format": "javascript",
      "lines": 108,
      "fragment": "={getTypeColor(type)}>{type}</Tag>\n          {record.nullable && <Tag color=\"red\">nullable</Tag>}\n        </Space>\n      ),\n      filters: typeOptions.map((type) => ({ text: type, value: type })),\n      onFilter: (value: any, record: TableRow) => record.type === value,\n    },\n    {\n      title: 'Value',\n      dataIndex: 'displayValue',\n      key: 'value',\n      ellipsis: true,\n      render: (displayValue: string, record: TableRow) => {\n        const isLongValue = record.type === 'string' && record.size && record.size > 100;\n        const isComplexValue = record.type === 'object' || record.type === 'array';\n\n        return (\n          <div className=\"flex items-center justify-between\">\n            <Text\n              className={`${record.nullable ? 'text-gray-500 italic' : 'text-gray-300'}`}\n              style={{ maxWidth: compact ? 150 : 300 }}\n            >\n              {displayValue}\n            </Text>\n            <Space size=\"small\">\n              {(isLongValue || isComplexValue) && (\n                <Tooltip title=\"View full value\">\n                  <Button\n                    icon={<EyeOutlined />}\n                    size=\"small\"\n                    type=\"text\"\n                    onClick={() => viewFullValue(record)}\n                    className=\"text-gray-400 hover:text-white\"\n                  />\n                </Tooltip>\n              )}\n              <Tooltip title=\"Copy value\">\n                <Button\n                  icon={<CopyOutlined />}\n                  size=\"small\"\n                  type=\"text\"\n                  onClick={() => copyValue(record.value)}\n                  className=\"text-gray-400 hover:text-white\"\n                />\n              </Tooltip>\n              {onDataTransform && (\n                <Tooltip title=\"Use in transform\">\n                  <Button\n                    icon={<EditOutlined />}\n                    size=\"small\"\n                    type=\"text\"\n                    onClick={() => onDataTransform({ [record.field]: record.value })}\n                    className=\"text-gray-400 hover:text-white\"\n                  />\n                </Tooltip>\n              )}\n            </Space>\n          </div>\n        );\n      },\n    },\n  ];\n\n  if (compact) {\n    // Remove the path display and reduce column widths for compact mode\n    columns[0].width = 100;\n    columns[2].render = (displayValue: string, record: TableRow) => (\n      <Text\n        className={`${record.nullable ? 'text-gray-500 italic' : 'text-gray-300'}`}\n        ellipsis={{ tooltip: displayValue }}\n        style={{ maxWidth: 120 }}\n      >\n        {displayValue}\n      </Text>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <FilterOutlined className=\"text-4xl mb-2\" />\n        <div>No data to display</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Filters and Controls */}\n      <div\n        className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n      >\n        <Space wrap size={compact ? 'small' : 'middle'}>\n          <Input.Search\n            placeholder=\"Search fields and values...\"\n            value={searchText}\n            onChange={(e) => setSearchText(e.target.value)}\n            style={{ width: compact ? 150 : 200 }}\n          />\n          <Select\n            value={filterType}\n            onChange={setFilterType}\n            style={{ width: compact ? 100 : 120 }}\n          >\n            <Option value=\"all\">All Types</Option>\n            {typeOptions.map((type) => (\n              <Option key={type} value={type}>\n                <Tag color={getTypeColor(type)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx",
        "start": 192,
        "end": 299,
        "startLoc": {
          "line": 192,
          "column": 6,
          "position": 1909
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2868
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/tableview/TableView.tsx",
        "start": 194,
        "end": 301,
        "startLoc": {
          "line": 194,
          "column": 6,
          "position": 1935
        },
        "endLoc": {
          "line": 301,
          "column": 2,
          "position": 2894
        }
      }
    },
    {
      "format": "tsx",
      "lines": 329,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { CopyOutlined, EditOutlined, EyeOutlined, FilterOutlined } from '@ant-design/icons';\nimport { Button, Input, Select, Space, Table, Tag, Tooltip, Typography } from 'antd';\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\ninterface TableViewProps {\n  data: any;\n  onFieldClick?: (fieldPath: string) => void;\n  onDataTransform?: (transformedData: any) => void;\n  compact?: boolean;\n}\n\ninterface TableRow {\n  key: string;\n  field: string;\n  type: string;\n  value: any;\n  displayValue: string;\n  path: string;\n  nullable: boolean;\n  size?: number;\n}\n\nconst inferType = (value: any): string => {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n  if (Array.isArray(value)) return 'array';\n  if (typeof value === 'object') return 'object';\n  if (typeof value === 'string') {\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) return 'date';\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'email';\n    if (/^https?:\\/\\//.test(value)) return 'url';\n    return 'string';\n  }\n  return typeof value;\n};\n\nconst getTypeColor = (type: string) => {\n  const colors = {\n    string: 'green',\n    number: 'blue',\n    boolean: 'purple',\n    date: 'orange',\n    email: 'cyan',\n    url: 'magenta',\n    array: 'red',\n    object: 'yellow',\n    null: 'gray',\n    undefined: 'gray',\n  };\n  return colors[type as keyof typeof colors] || 'default';\n};\n\nconst formatDisplayValue = (value: any, type: string): string => {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n\n  switch (type) {\n    case 'string':\n      return value.length > 100 ? `${value.substring(0, 97)}...` : value;\n    case 'array':\n      return `Array(${value.length})`;\n    case 'object':\n      return `Object(${Object.keys(value).length} keys)`;\n    case 'date':\n      return new Date(value).toLocaleString();\n    case 'boolean':\n      return value ? 'true' : 'false';\n    case 'number':\n      return value.toLocaleString();\n    default:\n      return String(value);\n  }\n};\n\nconst flattenObject = (obj: any, prefix: string = ''): TableRow[] => {\n  const rows: TableRow[] = [];\n\n  if (!obj || typeof obj !== 'object') return rows;\n\n  Object.entries(obj).forEach(([key, value]) => {\n    const path = prefix ? `${prefix}.${key}` : key;\n    const type = inferType(value);\n    const displayValue = formatDisplayValue(value, type);\n    const nullable = value === null || value === undefined;\n\n    const row: TableRow = {\n      key: path,\n      field: key,\n      type,\n      value,\n      displayValue,\n      path,\n      nullable,\n      size: typeof value === 'string' ? value.length : undefined,\n    };\n\n    rows.push(row);\n\n    // Recursively add nested object properties\n    if (type === 'object' && value && Object.keys(value).length > 0) {\n      rows.push(...flattenObject(value, path));\n    }\n\n    // For arrays, show the first item's structure if it's an object\n    if (type === 'array' && Array.isArray(value) && value.length > 0) {\n      const firstItem = value[0];\n      if (firstItem && typeof firstItem === 'object') {\n        rows.push(...flattenObject(firstItem, `${path}[0]`));\n      }\n    }\n  });\n\n  return rows;\n};\n\nconst TableView: React.FC<TableViewProps> = ({\n  data,\n  onFieldClick,\n  onDataTransform,\n  compact = false,\n}) => {\n  const [filterType, setFilterType] = useState<string>('all');\n  const [searchText, setSearchText] = useState('');\n\n  const tableData = useMemo(() => {\n    return flattenObject(data);\n  }, [data]);\n\n  const filteredData = useMemo(() => {\n    let filtered = tableData;\n\n    // Filter by type\n    if (filterType !== 'all') {\n      filtered = filtered.filter((row) => row.type === filterType);\n    }\n\n    // Filter by search text\n    if (searchText) {\n      const search = searchText.toLowerCase();\n      filtered = filtered.filter(\n        (row) =>\n          row.field.toLowerCase().includes(search) ||\n          row.path.toLowerCase().includes(search) ||\n          String(row.displayValue).toLowerCase().includes(search)\n      );\n    }\n\n    return filtered;\n  }, [tableData, filterType, searchText]);\n\n  const typeOptions = useMemo(() => {\n    const types = new Set(tableData.map((row) => row.type));\n    return Array.from(types).sort();\n  }, [tableData]);\n\n  const copyValue = (value: any) => {\n    const text = typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value);\n    navigator.clipboard.writeText(text);\n  };\n\n  const viewFullValue = (row: TableRow) => {\n    onFieldClick?.(row.path);\n  };\n\n  const columns = [\n    {\n      title: 'Field',\n      dataIndex: 'field',\n      key: 'field',\n      width: compact ? 120 : 200,\n      render: (text: string, record: TableRow) => (\n        <div>\n          <Text className=\"text-white font-medium\">{text}</Text>\n          {!compact && <div className=\"text-xs text-gray-400 mt-1\">{record.path}</div>}\n        </div>\n      ),\n      sorter: (a: TableRow, b: TableRow) => a.field.localeCompare(b.field),\n    },\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      width: 80,\n      render: (type: string, record: TableRow) => (\n        <Space direction=\"vertical\" size=\"small\">\n          <Tag color={getTypeColor(type)}>{type}</Tag>\n          {record.nullable && <Tag color=\"red\">nullable</Tag>}\n        </Space>\n      ),\n      filters: typeOptions.map((type) => ({ text: type, value: type })),\n      onFilter: (value: any, record: TableRow) => record.type === value,\n    },\n    {\n      title: 'Value',\n      dataIndex: 'displayValue',\n      key: 'value',\n      ellipsis: true,\n      render: (displayValue: string, record: TableRow) => {\n        const isLongValue = record.type === 'string' && record.size && record.size > 100;\n        const isComplexValue = record.type === 'object' || record.type === 'array';\n\n        return (\n          <div className=\"flex items-center justify-between\">\n            <Text\n              className={`${record.nullable ? 'text-gray-500 italic' : 'text-gray-300'}`}\n              style={{ maxWidth: compact ? 150 : 300 }}\n            >\n              {displayValue}\n            </Text>\n            <Space size=\"small\">\n              {(isLongValue || isComplexValue) && (\n                <Tooltip title=\"View full value\">\n                  <Button\n                    icon={<EyeOutlined />}\n                    size=\"small\"\n                    type=\"text\"\n                    onClick={() => viewFullValue(record)}\n                    className=\"text-gray-400 hover:text-white\"\n                  />\n                </Tooltip>\n              )}\n              <Tooltip title=\"Copy value\">\n                <Button\n                  icon={<CopyOutlined />}\n                  size=\"small\"\n                  type=\"text\"\n                  onClick={() => copyValue(record.value)}\n                  className=\"text-gray-400 hover:text-white\"\n                />\n              </Tooltip>\n              {onDataTransform && (\n                <Tooltip title=\"Use in transform\">\n                  <Button\n                    icon={<EditOutlined />}\n                    size=\"small\"\n                    type=\"text\"\n                    onClick={() => onDataTransform({ [record.field]: record.value })}\n                    className=\"text-gray-400 hover:text-white\"\n                  />\n                </Tooltip>\n              )}\n            </Space>\n          </div>\n        );\n      },\n    },\n  ];\n\n  if (compact) {\n    // Remove the path display and reduce column widths for compact mode\n    columns[0].width = 100;\n    columns[2].render = (displayValue: string, record: TableRow) => (\n      <Text\n        className={`${record.nullable ? 'text-gray-500 italic' : 'text-gray-300'}`}\n        ellipsis={{ tooltip: displayValue }}\n        style={{ maxWidth: 120 }}\n      >\n        {displayValue}\n      </Text>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <FilterOutlined className=\"text-4xl mb-2\" />\n        <div>No data to display</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Filters and Controls */}\n      <div\n        className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n      >\n        <Space wrap size={compact ? 'small' : 'middle'}>\n          <Input.Search\n            placeholder=\"Search fields and values...\"\n            value={searchText}\n            onChange={(e) => setSearchText(e.target.value)}\n            style={{ width: compact ? 150 : 200 }}\n          />\n          <Select\n            value={filterType}\n            onChange={setFilterType}\n            style={{ width: compact ? 100 : 120 }}\n          >\n            <Option value=\"all\">All Types</Option>\n            {typeOptions.map((type) => (\n              <Option key={type} value={type}>\n                <Tag color={getTypeColor(type)}>{type}</Tag>\n              </Option>\n            ))}\n          </Select>\n          <Text className=\"text-gray-400 text-sm\">\n            {filteredData.length} of {tableData.length} fields\n          </Text>\n        </Space>\n      </div>\n\n      {/* Data Table */}\n      <div className=\"flex-1 overflow-hidden\">\n        <Table\n          dataSource={filteredData}\n          columns={columns}\n          pagination={{\n            pageSize: compact ? 8 : 15,\n            showSizeChanger: !compact,\n            showQuickJumper: !compact,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} fields`,\n            size: compact ? 'small' : 'default',\n          }}\n          className=\"dark-table ps-4\"\n          scroll={{ y: 'calc(100vh - 300px)' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TableView;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx",
        "start": 1,
        "end": 329,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 329,
          "column": 2,
          "position": 3106
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/tableview/TableView.tsx",
        "start": 3,
        "end": 331,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 331,
          "column": 2,
          "position": 3132
        }
      }
    },
    {
      "format": "javascript",
      "lines": 105,
      "fragment": "={() => onFieldClick?.(currentPath)}\n      >\n        <Space size=\"small\">\n          {getTypeIcon(type)}\n          <Text className=\"text-white font-medium\">{key}</Text>\n          <Tag color={getTypeColor(type)}>{type}</Tag>\n          {nullable && <Tag color=\"red\">nullable</Tag>}\n        </Space>\n        {preview && <Text className=\"text-gray-400 text-xs ml-2 max-w-xs truncate\">{preview}</Text>}\n      </div>\n    );\n\n    const node: SchemaNode = {\n      key: currentPath,\n      title: nodeTitle,\n      type,\n      nullable,\n      path: currentPath,\n      isLeaf: type !== 'object' && type !== 'array',\n    };\n\n    // Add children for objects and arrays\n    if (type === 'object' && value && Object.keys(value).length > 0) {\n      node.children = buildSchemaTree(value, currentPath, onFieldClick);\n    } else if (type === 'array' && Array.isArray(value) && value.length > 0) {\n      // For arrays, show the schema of the first item\n      const firstItem = value[0];\n      if (firstItem && typeof firstItem === 'object') {\n        node.children = buildSchemaTree(firstItem, `${currentPath}[0]`, onFieldClick);\n      }\n    }\n\n    return node;\n  });\n};\n\nconst SchemaView: React.FC<SchemaViewProps> = ({ data, onFieldClick, compact = false }) => {\n  const schemaTree = useMemo(() => {\n    return buildSchemaTree(data, '', onFieldClick);\n  }, [data, onFieldClick]);\n\n  const schemaStats = useMemo(() => {\n    const countTypes = (nodes: SchemaNode[]): Record<string, number> => {\n      const counts: Record<string, number> = {};\n\n      const traverse = (nodeList: SchemaNode[]) => {\n        nodeList.forEach((node) => {\n          counts[node.type] = (counts[node.type] || 0) + 1;\n          if (node.children) {\n            traverse(node.children);\n          }\n        });\n      };\n\n      traverse(nodes);\n      return counts;\n    };\n\n    return countTypes(schemaTree);\n  }, [schemaTree]);\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <DatabaseOutlined className=\"text-4xl mb-2\" />\n        <div>No data to analyze</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Schema Statistics Header */}\n      {(compact || !compact) && (\n        <div\n          className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n        >\n          <Text\n            className={`text-gray-300 ${compact ? 'text-xs' : 'text-sm'} font-medium mb-2 block`}\n          >\n            Type Distribution\n          </Text>\n          <div className=\"flex flex-wrap gap-1\">\n            {Object.entries(schemaStats).map(([type, count]) => (\n              <div key={type} className=\"flex items-center gap-1\">\n                {compact ? null : getTypeIcon(type)}\n                <Tag\n                  color={getTypeColor(type)}\n                  // size={compact ? 'small' : 'default'}\n                >\n                  {type} ({count})\n                </Tag>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Schema Tree */}\n      <div className={`${compact ? 'p-2' : 'p-4'} flex-1 overflow-hidden bg-gray-900`}>\n        <Tree\n          treeData={schemaTree}\n          defaultExpandAll={!compact}\n          showLine\n          showIcon={false}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx",
        "start": 132,
        "end": 236,
        "startLoc": {
          "line": 132,
          "column": 8,
          "position": 1120
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 2102
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/schemaview/SchemaView.tsx",
        "start": 133,
        "end": 237,
        "startLoc": {
          "line": 133,
          "column": 8,
          "position": 1133
        },
        "endLoc": {
          "line": 237,
          "column": 2,
          "position": 2115
        }
      }
    },
    {
      "format": "tsx",
      "lines": 244,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {\n  BranchesOutlined,\n  CalendarOutlined,\n  CheckSquareOutlined,\n  DatabaseOutlined,\n  FileTextOutlined,\n  NumberOutlined,\n  TableOutlined,\n} from '@ant-design/icons';\nimport { Space, Tag, Tree, Typography } from 'antd';\nimport type React from 'react';\nimport { useMemo } from 'react';\n\nconst { Text } = Typography;\n\ninterface SchemaNode {\n  key: string;\n  title: React.ReactNode;\n  children?: SchemaNode[];\n  isLeaf?: boolean;\n  type: string;\n  nullable: boolean;\n  path: string;\n}\n\ninterface SchemaViewProps {\n  data: any;\n  onFieldClick?: (fieldPath: string) => void;\n  compact?: boolean;\n}\n\nconst getTypeIcon = (type: string) => {\n  switch (type) {\n    case 'string':\n      return <FileTextOutlined className=\"text-green-400\" />;\n    case 'number':\n      return <NumberOutlined className=\"text-blue-400\" />;\n    case 'boolean':\n      return <CheckSquareOutlined className=\"text-purple-400\" />;\n    case 'date':\n      return <CalendarOutlined className=\"text-orange-400\" />;\n    case 'array':\n      return <TableOutlined className=\"text-red-400\" />;\n    case 'object':\n      return <BranchesOutlined className=\"text-yellow-400\" />;\n    case 'null':\n      return <DatabaseOutlined className=\"text-gray-400\" />;\n    default:\n      return <FileTextOutlined className=\"text-gray-400\" />;\n  }\n};\n\nconst getTypeColor = (type: string) => {\n  switch (type) {\n    case 'string':\n      return 'green';\n    case 'number':\n      return 'blue';\n    case 'boolean':\n      return 'purple';\n    case 'date':\n      return 'orange';\n    case 'array':\n      return 'red';\n    case 'object':\n      return 'yellow';\n    case 'null':\n      return 'gray';\n    default:\n      return 'default';\n  }\n};\n\nconst inferType = (value: any): string => {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n  if (Array.isArray(value)) return 'array';\n  if (typeof value === 'object') return 'object';\n  if (typeof value === 'string') {\n    // Check if it's a date string\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n      return 'date';\n    }\n    // Check if it's an email\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n      return 'email';\n    }\n    // Check if it's a URL\n    if (/^https?:\\/\\//.test(value)) {\n      return 'url';\n    }\n    return 'string';\n  }\n  return typeof value;\n};\n\nconst getValuePreview = (value: any, type: string): string => {\n  if (value === null || value === undefined) return '';\n\n  switch (type) {\n    case 'string':\n      return value.length > 50 ? `\"${value.substring(0, 47)}...\"` : `\"${value}\"`;\n    case 'array':\n      return `[${value.length} items]`;\n    case 'object':\n      return `{${Object.keys(value).length} fields}`;\n    case 'date':\n      return new Date(value).toLocaleDateString();\n    default:\n      return String(value);\n  }\n};\n\nconst buildSchemaTree = (\n  obj: any,\n  path: string = '',\n  onFieldClick?: (fieldPath: string) => void\n): SchemaNode[] => {\n  if (!obj || typeof obj !== 'object') return [];\n\n  return Object.entries(obj).map(([key, value]) => {\n    const currentPath = path ? `${path}.${key}` : key;\n    const type = inferType(value);\n    const nullable = value === null || value === undefined;\n    const preview = getValuePreview(value, type);\n\n    const nodeTitle = (\n      <div\n        className=\"flex items-center justify-between cursor-pointer hover:bg-gray-700 px-2 py-1 rounded\"\n        onClick={() => onFieldClick?.(currentPath)}\n      >\n        <Space size=\"small\">\n          {getTypeIcon(type)}\n          <Text className=\"text-white font-medium\">{key}</Text>\n          <Tag color={getTypeColor(type)}>{type}</Tag>\n          {nullable && <Tag color=\"red\">nullable</Tag>}\n        </Space>\n        {preview && <Text className=\"text-gray-400 text-xs ml-2 max-w-xs truncate\">{preview}</Text>}\n      </div>\n    );\n\n    const node: SchemaNode = {\n      key: currentPath,\n      title: nodeTitle,\n      type,\n      nullable,\n      path: currentPath,\n      isLeaf: type !== 'object' && type !== 'array',\n    };\n\n    // Add children for objects and arrays\n    if (type === 'object' && value && Object.keys(value).length > 0) {\n      node.children = buildSchemaTree(value, currentPath, onFieldClick);\n    } else if (type === 'array' && Array.isArray(value) && value.length > 0) {\n      // For arrays, show the schema of the first item\n      const firstItem = value[0];\n      if (firstItem && typeof firstItem === 'object') {\n        node.children = buildSchemaTree(firstItem, `${currentPath}[0]`, onFieldClick);\n      }\n    }\n\n    return node;\n  });\n};\n\nconst SchemaView: React.FC<SchemaViewProps> = ({ data, onFieldClick, compact = false }) => {\n  const schemaTree = useMemo(() => {\n    return buildSchemaTree(data, '', onFieldClick);\n  }, [data, onFieldClick]);\n\n  const schemaStats = useMemo(() => {\n    const countTypes = (nodes: SchemaNode[]): Record<string, number> => {\n      const counts: Record<string, number> = {};\n\n      const traverse = (nodeList: SchemaNode[]) => {\n        nodeList.forEach((node) => {\n          counts[node.type] = (counts[node.type] || 0) + 1;\n          if (node.children) {\n            traverse(node.children);\n          }\n        });\n      };\n\n      traverse(nodes);\n      return counts;\n    };\n\n    return countTypes(schemaTree);\n  }, [schemaTree]);\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <DatabaseOutlined className=\"text-4xl mb-2\" />\n        <div>No data to analyze</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Schema Statistics Header */}\n      {(compact || !compact) && (\n        <div\n          className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n        >\n          <Text\n            className={`text-gray-300 ${compact ? 'text-xs' : 'text-sm'} font-medium mb-2 block`}\n          >\n            Type Distribution\n          </Text>\n          <div className=\"flex flex-wrap gap-1\">\n            {Object.entries(schemaStats).map(([type, count]) => (\n              <div key={type} className=\"flex items-center gap-1\">\n                {compact ? null : getTypeIcon(type)}\n                <Tag\n                  color={getTypeColor(type)}\n                  // size={compact ? 'small' : 'default'}\n                >\n                  {type} ({count})\n                </Tag>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Schema Tree */}\n      <div className={`${compact ? 'p-2' : 'p-4'} flex-1 overflow-hidden bg-gray-900`}>\n        <Tree\n          treeData={schemaTree}\n          defaultExpandAll={!compact}\n          showLine\n          showIcon={false}\n          className=\"bg-gray-900\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SchemaView;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx",
        "start": 1,
        "end": 244,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 244,
          "column": 2,
          "position": 2135
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/schemaview/SchemaView.tsx",
        "start": 2,
        "end": 245,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 245,
          "column": 2,
          "position": 2148
        }
      }
    },
    {
      "format": "javascript",
      "lines": 287,
      "fragment": "={compact ? 'small' : 'middle'}>\n//             <Input\n//               placeholder=\"Search JSON...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               style={{ width: compact ? 150 : 200 }}\n//               size=\"small\"\n//               prefix={<SearchOutlined />}\n//             />\n//             {!compact && (\n//               <>\n//                 <Switch\n//                   checked={showLineNumbers}\n//                   onChange={setShowLineNumbers}\n//                   size=\"small\"\n//                 />\n//                 <Text className=\"text-gray-400 text-xs\">Line numbers</Text>\n//               </>\n//             )}\n//           </Space>\n\n//           <Space size=\"small\">\n//             <Tooltip title={collapsed ? \"Expand JSON\" : \"Collapse JSON\"}>\n//               <Button\n//                 icon={collapsed ? <ExpandOutlined /> : <CompressOutlined />}\n//                 size=\"small\"\n//                 onClick={handleFormat}\n//                 className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n//               />\n//             </Tooltip>\n//             <Tooltip title=\"Copy JSON\">\n//               <Button\n//                 icon={<CopyOutlined />}\n//                 size=\"small\"\n//                 onClick={handleCopy}\n//                 className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n//               />\n//             </Tooltip>\n//           </Space>\n//         </div>\n\n//         {searchTerm && (\n//           <div className=\"mt-2\">\n//             <Text className=\"text-gray-400 text-xs\">\n//               {filteredLines.length} matches found\n//             </Text>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* JSON Content */}\n//       <div className=\"p-2 overflow-auto flex-1\">\n//         {searchTerm ? (\n//           // Filtered view\n//           <div className=\"space-y-1\">\n//             {filteredLines.map(({ line, index }) => (\n//               <JsonLine\n//                 key={index}\n//                 line={line}\n//                 lineNumber={showLineNumbers ? index + 1 : 0}\n//                 isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n//                 onFieldClick={onFieldClick}\n//               />\n//             ))}\n//           </div>\n//         ) : (\n//           // Full JSON view\n//           <div className=\"space-y-1\">\n//             {jsonLines.map((line, index) => (\n//               <JsonLine\n//                 key={index}\n//                 line={line}\n//                 lineNumber={showLineNumbers ? index + 1 : 0}\n//                 isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n//                 onFieldClick={onFieldClick}\n//               />\n//             ))}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Footer Stats - hide in compact mode */}\n//       {!compact && (\n//         <div className=\"p-2 border-t border-gray-700 bg-gray-800 flex-shrink-0\">\n//           <div className=\"flex justify-between text-xs text-gray-400\">\n//             <span>{jsonLines.length} lines</span>\n//             <span>{(formattedJson.length / 1024).toFixed(1)} KB</span>\n//             <span>{Object.keys(data || {}).length} top-level fields</span>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default JsonView\n\nimport {\n  CompressOutlined,\n  CopyOutlined,\n  ExpandOutlined,\n  FormatPainterOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport { Button, Input, Space, Switch, Tooltip, Typography } from 'antd';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\n\nconst { Text } = Typography;\n\ninterface JsonViewProps {\n  data: any;\n  onFieldClick?: (fieldPath: string) => void;\n  compact?: boolean;\n  highlightPath?: string;\n}\n\ninterface JsonLineProps {\n  line: string;\n  lineNumber: number;\n  isHighlighted: boolean;\n  onFieldClick?: (fieldPath: string) => void;\n}\n\ninterface LineWithIndex {\n  line: string;\n  index: number;\n}\n\nconst JsonLine: React.FC<JsonLineProps> = ({ line, lineNumber, isHighlighted, onFieldClick }) => {\n  const handleClick = () => {\n    // Extract field path from JSON line (simplified)\n    const fieldMatch = line.match(/\"([^\"]+)\":\\s*/);\n    if (fieldMatch && onFieldClick) {\n      onFieldClick(fieldMatch[1]);\n    }\n  };\n\n  return (\n    <div\n      className={`flex items-start hover:bg-gray-700 ${isHighlighted ? 'bg-yellow-900' : ''}`}\n      onClick={handleClick}\n    >\n      <span className=\"text-gray-500 text-xs mr-4 select-none w-8 text-right\">{lineNumber}</span>\n      <pre className=\"text-sm text-gray-300 font-mono flex-1 whitespace-pre-wrap cursor-pointer\">\n        <code dangerouslySetInnerHTML={{ __html: syntaxHighlight(line) }} />\n      </pre>\n    </div>\n  );\n};\n\nconst syntaxHighlight = (json: string): string => {\n  return json\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(\n      /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g,\n      (match) => {\n        let cls = 'text-yellow-400'; // numbers\n        if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n            cls = 'text-blue-400'; // keys\n          } else {\n            cls = 'text-green-400'; // strings\n          }\n        } else if (/true|false/.test(match)) {\n          cls = 'text-purple-400'; // booleans\n        } else if (/null/.test(match)) {\n          cls = 'text-red-400'; // null\n        }\n        return `<span class=\"${cls}\">${match}</span>`;\n      }\n    );\n};\n\nconst JsonView: React.FC<JsonViewProps> = ({\n  data,\n  onFieldClick,\n  compact = false,\n  highlightPath,\n}) => {\n  const [collapsed, setCollapsed] = useState(compact);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showLineNumbers, setShowLineNumbers] = useState(true);\n\n  const formattedJson = useMemo(() => {\n    if (!data) return '';\n    return JSON.stringify(data, null, collapsed ? 0 : 2);\n  }, [data, collapsed]);\n\n  const jsonLines = useMemo(() => {\n    return formattedJson.split('\\n');\n  }, [formattedJson]);\n\n  // Fix: Always return the same type structure\n  const filteredLines = useMemo((): LineWithIndex[] => {\n    const linesWithIndex = jsonLines.map((line, index) => ({ line, index }));\n\n    if (!searchTerm) {\n      return linesWithIndex;\n    }\n\n    return linesWithIndex.filter(({ line }) =>\n      line.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [jsonLines, searchTerm]);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(formattedJson);\n  };\n\n  const handleFormat = () => {\n    setCollapsed(!collapsed);\n  };\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <FormatPainterOutlined className=\"text-4xl mb-2\" />\n        <div>No JSON data to display</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Header Controls */}\n      <div\n        className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n      >\n        <div className=\"flex items-center justify-between\">\n          <Space size={compact ? 'small' : 'middle'}>\n            <Input\n              placeholder=\"Search JSON...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              style={{ width: compact ? 150 : 200 }}\n              size=\"small\"\n              prefix={<SearchOutlined />}\n            />\n            {!compact && (\n              <>\n                <Switch checked={showLineNumbers} onChange={setShowLineNumbers} size=\"small\" />\n                <Text className=\"text-gray-400 text-xs\">Line numbers</Text>\n              </>\n            )}\n          </Space>\n\n          <Space size=\"small\">\n            <Tooltip title={collapsed ? 'Expand JSON' : 'Collapse JSON'}>\n              <Button\n                icon={collapsed ? <ExpandOutlined /> : <CompressOutlined />}\n                size=\"small\"\n                onClick={handleFormat}\n                className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Copy JSON\">\n              <Button\n                icon={<CopyOutlined />}\n                size=\"small\"\n                onClick={handleCopy}\n                className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        {searchTerm && (\n          <div className=\"mt-2\">\n            <Text className=\"text-gray-400 text-xs\">{filteredLines.length} matches found</Text>\n          </div>\n        )}\n      </div>\n\n      {/* JSON Content */}\n      <div className=\"p-2 overflow-auto flex-1\">\n        <div className=\"space-y-1\">\n          {filteredLines.map(({ line, index }) => (\n            <JsonLine\n              key={index}\n              line={line}\n              lineNumber={showLineNumbers ? index + 1 : 0}\n              isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n              onFieldClick={onFieldClick}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx",
        "start": 132,
        "end": 418,
        "startLoc": {
          "line": 132,
          "column": 5,
          "position": 507
        },
        "endLoc": {
          "line": 418,
          "column": 2,
          "position": 2563
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/jsonview/JsonView.tsx",
        "start": 134,
        "end": 420,
        "startLoc": {
          "line": 134,
          "column": 5,
          "position": 533
        },
        "endLoc": {
          "line": 420,
          "column": 2,
          "position": 2589
        }
      }
    },
    {
      "format": "tsx",
      "lines": 438,
      "fragment": "// /* eslint-disable @typescript-eslint/no-explicit-any */\n// import React, { useState, useMemo } from 'react'\n// import { Button, Space, Typography, Tooltip, Input, Switch } from 'antd'\n// import {\n//   CopyOutlined,\n//   CompressOutlined,\n//   ExpandOutlined,\n//   FormatPainterOutlined,\n//   SearchOutlined\n// } from '@ant-design/icons'\n\n// const { Text } = Typography\n\n// interface JsonViewProps {\n//   data: any\n//   onFieldClick?: (fieldPath: string) => void\n//   compact?: boolean\n//   highlightPath?: string\n// }\n\n// interface JsonLineProps {\n//   line: string\n//   lineNumber: number\n//   isHighlighted: boolean\n//   onFieldClick?: (fieldPath: string) => void\n// }\n\n// const JsonLine: React.FC<JsonLineProps> = ({\n//   line,\n//   lineNumber,\n//   isHighlighted,\n//   onFieldClick\n// }) => {\n//   const handleClick = () => {\n//     // Extract field path from JSON line (simplified)\n//     const fieldMatch = line.match(/\"([^\"]+)\":\\s*/)\n//     if (fieldMatch && onFieldClick) {\n//       onFieldClick(fieldMatch[1])\n//     }\n//   }\n\n//   return (\n//     <div\n//       className={`flex items-start hover:bg-gray-700 ${isHighlighted ? 'bg-yellow-900' : ''}`}\n//       onClick={handleClick}\n//     >\n//       <span className=\"text-gray-500 text-xs mr-4 select-none w-8 text-right\">\n//         {lineNumber}\n//       </span>\n//       <pre className=\"text-sm text-gray-300 font-mono flex-1 whitespace-pre-wrap cursor-pointer\">\n//         <code dangerouslySetInnerHTML={{ __html: syntaxHighlight(line) }} />\n//       </pre>\n//     </div>\n//   )\n// }\n\n// const syntaxHighlight = (json: string): string => {\n//   return json\n//     .replace(/&/g, \"&amp;\")\n//     .replace(/</g, \"&lt;\")\n//     .replace(/>/g, \"&gt;\")\n//     .replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g,\n//       function (match) {\n//         let cls = 'text-yellow-400' // numbers\n//         if (/^\"/.test(match)) {\n//           if (/:$/.test(match)) {\n//             cls = 'text-blue-400' // keys\n//           } else {\n//             cls = 'text-green-400' // strings\n//           }\n//         } else if (/true|false/.test(match)) {\n//           cls = 'text-purple-400' // booleans\n//         } else if (/null/.test(match)) {\n//           cls = 'text-red-400' // null\n//         }\n//         return `<span class=\"${cls}\">${match}</span>`\n//       }\n//     )\n// }\n\n// const JsonView: React.FC<JsonViewProps> = ({\n//   data,\n//   onFieldClick,\n//   compact = false,\n//   highlightPath\n// }) => {\n//   const [collapsed, setCollapsed] = useState(compact)\n//   const [searchTerm, setSearchTerm] = useState('')\n//   const [showLineNumbers, setShowLineNumbers] = useState(true)\n\n//   const formattedJson = useMemo(() => {\n//     if (!data) return ''\n//     return JSON.stringify(data, null, collapsed ? 0 : 2)\n//   }, [data, collapsed])\n\n//   const jsonLines = useMemo(() => {\n//     return formattedJson.split('\\n')\n//   }, [formattedJson])\n\n//   const filteredLines = useMemo(() => {\n//     if (!searchTerm) return jsonLines\n\n//     return jsonLines\n//       .map((line, index) => ({ line, index }))\n//       .filter(({ line }) =>\n//         line.toLowerCase().includes(searchTerm.toLowerCase())\n//       )\n//   }, [jsonLines, searchTerm])\n\n//   const handleCopy = () => {\n//     navigator.clipboard.writeText(formattedJson)\n//   }\n\n//   const handleFormat = () => {\n//     setCollapsed(!collapsed)\n//   }\n\n//   if (!data) {\n//     return (\n//       <div className=\"p-8 text-center text-gray-400\">\n//         <FormatPainterOutlined className=\"text-4xl mb-2\" />\n//         <div>No JSON data to display</div>\n//       </div>\n//     )\n//   }\n\n//   return (\n//     <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n//       {/* Header Controls */}\n//       <div className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}>\n//         <div className=\"flex items-center justify-between\">\n//           <Space size={compact ? 'small' : 'middle'}>\n//             <Input\n//               placeholder=\"Search JSON...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               style={{ width: compact ? 150 : 200 }}\n//               size=\"small\"\n//               prefix={<SearchOutlined />}\n//             />\n//             {!compact && (\n//               <>\n//                 <Switch\n//                   checked={showLineNumbers}\n//                   onChange={setShowLineNumbers}\n//                   size=\"small\"\n//                 />\n//                 <Text className=\"text-gray-400 text-xs\">Line numbers</Text>\n//               </>\n//             )}\n//           </Space>\n\n//           <Space size=\"small\">\n//             <Tooltip title={collapsed ? \"Expand JSON\" : \"Collapse JSON\"}>\n//               <Button\n//                 icon={collapsed ? <ExpandOutlined /> : <CompressOutlined />}\n//                 size=\"small\"\n//                 onClick={handleFormat}\n//                 className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n//               />\n//             </Tooltip>\n//             <Tooltip title=\"Copy JSON\">\n//               <Button\n//                 icon={<CopyOutlined />}\n//                 size=\"small\"\n//                 onClick={handleCopy}\n//                 className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n//               />\n//             </Tooltip>\n//           </Space>\n//         </div>\n\n//         {searchTerm && (\n//           <div className=\"mt-2\">\n//             <Text className=\"text-gray-400 text-xs\">\n//               {filteredLines.length} matches found\n//             </Text>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* JSON Content */}\n//       <div className=\"p-2 overflow-auto flex-1\">\n//         {searchTerm ? (\n//           // Filtered view\n//           <div className=\"space-y-1\">\n//             {filteredLines.map(({ line, index }) => (\n//               <JsonLine\n//                 key={index}\n//                 line={line}\n//                 lineNumber={showLineNumbers ? index + 1 : 0}\n//                 isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n//                 onFieldClick={onFieldClick}\n//               />\n//             ))}\n//           </div>\n//         ) : (\n//           // Full JSON view\n//           <div className=\"space-y-1\">\n//             {jsonLines.map((line, index) => (\n//               <JsonLine\n//                 key={index}\n//                 line={line}\n//                 lineNumber={showLineNumbers ? index + 1 : 0}\n//                 isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n//                 onFieldClick={onFieldClick}\n//               />\n//             ))}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Footer Stats - hide in compact mode */}\n//       {!compact && (\n//         <div className=\"p-2 border-t border-gray-700 bg-gray-800 flex-shrink-0\">\n//           <div className=\"flex justify-between text-xs text-gray-400\">\n//             <span>{jsonLines.length} lines</span>\n//             <span>{(formattedJson.length / 1024).toFixed(1)} KB</span>\n//             <span>{Object.keys(data || {}).length} top-level fields</span>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default JsonView\n\nimport {\n  CompressOutlined,\n  CopyOutlined,\n  ExpandOutlined,\n  FormatPainterOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport { Button, Input, Space, Switch, Tooltip, Typography } from 'antd';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\n\nconst { Text } = Typography;\n\ninterface JsonViewProps {\n  data: any;\n  onFieldClick?: (fieldPath: string) => void;\n  compact?: boolean;\n  highlightPath?: string;\n}\n\ninterface JsonLineProps {\n  line: string;\n  lineNumber: number;\n  isHighlighted: boolean;\n  onFieldClick?: (fieldPath: string) => void;\n}\n\ninterface LineWithIndex {\n  line: string;\n  index: number;\n}\n\nconst JsonLine: React.FC<JsonLineProps> = ({ line, lineNumber, isHighlighted, onFieldClick }) => {\n  const handleClick = () => {\n    // Extract field path from JSON line (simplified)\n    const fieldMatch = line.match(/\"([^\"]+)\":\\s*/);\n    if (fieldMatch && onFieldClick) {\n      onFieldClick(fieldMatch[1]);\n    }\n  };\n\n  return (\n    <div\n      className={`flex items-start hover:bg-gray-700 ${isHighlighted ? 'bg-yellow-900' : ''}`}\n      onClick={handleClick}\n    >\n      <span className=\"text-gray-500 text-xs mr-4 select-none w-8 text-right\">{lineNumber}</span>\n      <pre className=\"text-sm text-gray-300 font-mono flex-1 whitespace-pre-wrap cursor-pointer\">\n        <code dangerouslySetInnerHTML={{ __html: syntaxHighlight(line) }} />\n      </pre>\n    </div>\n  );\n};\n\nconst syntaxHighlight = (json: string): string => {\n  return json\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(\n      /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g,\n      (match) => {\n        let cls = 'text-yellow-400'; // numbers\n        if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n            cls = 'text-blue-400'; // keys\n          } else {\n            cls = 'text-green-400'; // strings\n          }\n        } else if (/true|false/.test(match)) {\n          cls = 'text-purple-400'; // booleans\n        } else if (/null/.test(match)) {\n          cls = 'text-red-400'; // null\n        }\n        return `<span class=\"${cls}\">${match}</span>`;\n      }\n    );\n};\n\nconst JsonView: React.FC<JsonViewProps> = ({\n  data,\n  onFieldClick,\n  compact = false,\n  highlightPath,\n}) => {\n  const [collapsed, setCollapsed] = useState(compact);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showLineNumbers, setShowLineNumbers] = useState(true);\n\n  const formattedJson = useMemo(() => {\n    if (!data) return '';\n    return JSON.stringify(data, null, collapsed ? 0 : 2);\n  }, [data, collapsed]);\n\n  const jsonLines = useMemo(() => {\n    return formattedJson.split('\\n');\n  }, [formattedJson]);\n\n  // Fix: Always return the same type structure\n  const filteredLines = useMemo((): LineWithIndex[] => {\n    const linesWithIndex = jsonLines.map((line, index) => ({ line, index }));\n\n    if (!searchTerm) {\n      return linesWithIndex;\n    }\n\n    return linesWithIndex.filter(({ line }) =>\n      line.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [jsonLines, searchTerm]);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(formattedJson);\n  };\n\n  const handleFormat = () => {\n    setCollapsed(!collapsed);\n  };\n\n  if (!data) {\n    return (\n      <div className=\"p-8 text-center text-gray-400\">\n        <FormatPainterOutlined className=\"text-4xl mb-2\" />\n        <div>No JSON data to display</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-900 rounded border border-gray-700 overflow-hidden h-full flex flex-col\">\n      {/* Header Controls */}\n      <div\n        className={`${compact ? 'p-2' : 'p-3'} border-b border-gray-700 bg-gray-800 flex-shrink-0`}\n      >\n        <div className=\"flex items-center justify-between\">\n          <Space size={compact ? 'small' : 'middle'}>\n            <Input\n              placeholder=\"Search JSON...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              style={{ width: compact ? 150 : 200 }}\n              size=\"small\"\n              prefix={<SearchOutlined />}\n            />\n            {!compact && (\n              <>\n                <Switch checked={showLineNumbers} onChange={setShowLineNumbers} size=\"small\" />\n                <Text className=\"text-gray-400 text-xs\">Line numbers</Text>\n              </>\n            )}\n          </Space>\n\n          <Space size=\"small\">\n            <Tooltip title={collapsed ? 'Expand JSON' : 'Collapse JSON'}>\n              <Button\n                icon={collapsed ? <ExpandOutlined /> : <CompressOutlined />}\n                size=\"small\"\n                onClick={handleFormat}\n                className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Copy JSON\">\n              <Button\n                icon={<CopyOutlined />}\n                size=\"small\"\n                onClick={handleCopy}\n                className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        {searchTerm && (\n          <div className=\"mt-2\">\n            <Text className=\"text-gray-400 text-xs\">{filteredLines.length} matches found</Text>\n          </div>\n        )}\n      </div>\n\n      {/* JSON Content */}\n      <div className=\"p-2 overflow-auto flex-1\">\n        <div className=\"space-y-1\">\n          {filteredLines.map(({ line, index }) => (\n            <JsonLine\n              key={index}\n              line={line}\n              lineNumber={showLineNumbers ? index + 1 : 0}\n              isHighlighted={highlightPath ? line.includes(highlightPath) : false}\n              onFieldClick={onFieldClick}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Footer Stats - hide in compact mode */}\n      {!compact && (\n        <div className=\"p-2 border-t border-gray-700 bg-gray-800 flex-shrink-0\">\n          <div className=\"flex justify-between text-xs text-gray-400\">\n            <span>{jsonLines.length} lines</span>\n            <span>{(formattedJson.length / 1024).toFixed(1)} KB</span>\n            <span>{Object.keys(data || {}).length} top-level fields</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JsonView;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx",
        "start": 1,
        "end": 438,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 438,
          "column": 2,
          "position": 2719
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/jsonview/JsonView.tsx",
        "start": 3,
        "end": 440,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 440,
          "column": 2,
          "position": 2745
        }
      }
    },
    {
      "format": "javascript",
      "lines": 127,
      "fragment": "={filteredData} onFieldClick={showFieldDetails} compact={compact} />\n          </div>\n        );\n      case 'table':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            <TableView\n              data={filteredData}\n              onFieldClick={showFieldDetails}\n              onDataTransform={onDataTransform}\n              compact={compact}\n            />\n          </div>\n        );\n      case 'json':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            <JsonView data={filteredData} onFieldClick={showFieldDetails} compact={compact} />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            {title}\n            {data && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Data loaded</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {data && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search data fields\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleCopyData}\n                className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\"\n                title=\"Copy JSON\"\n              >\n                <CopyOutlined className=\"w-4 h-4\" />\n              </button>\n              <button\n                onClick={handleDownloadData}\n                className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\"\n                title=\"Download JSON\"\n              >\n                <DownloadOutlined className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Data info */}\n        {data && dataStats && (\n          <div className=\"mt-3 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Fields:</span> {dataStats.totalFields}\n            </div>\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Size:</span> {(dataStats.dataSize / 1024).toFixed(1)}\n              KB\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">{renderContent()}</div>\n\n      {/* Field Details Modal */}\n      <Modal\n        title={`Field Details: ${selectedField}`}\n        open={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={null}\n        width={800}\n        className=\"dark-modal\"\n      >\n        {selectedField && (\n          <div className=\"bg-gray-900 p-4 rounded\">\n            <JsonView data={filteredData} highlightPath={selectedField} compact={false}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx",
        "start": 140,
        "end": 266,
        "startLoc": {
          "line": 140,
          "column": 5,
          "position": 1424
        },
        "endLoc": {
          "line": 266,
          "column": 2,
          "position": 2364
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx",
        "start": 142,
        "end": 268,
        "startLoc": {
          "line": 142,
          "column": 5,
          "position": 1450
        },
        "endLoc": {
          "line": 268,
          "column": 2,
          "position": 2390
        }
      }
    },
    {
      "format": "tsx",
      "lines": 274,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { CopyOutlined, DownloadOutlined } from '@ant-design/icons';\nimport { Modal } from 'antd';\nimport { CheckCircle, Search } from 'lucide-react';\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\nimport JsonView from './JsonView';\nimport SchemaView from './SchemaView';\nimport TableView from './TableView';\n\ntype DisplayMode = 'schema' | 'table' | 'json';\n\ninterface DataVisualizationPanelProps {\n  data: any;\n  title?: string;\n  description?: string;\n  nodeId?: string;\n  nodeType?: string;\n  onDataTransform?: (transformedData: any) => void;\n  compact?: boolean;\n}\n\nconst DataVisualizationPanel: React.FC<DataVisualizationPanelProps> = ({\n  data,\n  title = 'Input Data',\n  nodeId,\n  onDataTransform,\n  compact = false,\n}) => {\n  const [displayMode, setDisplayMode] = useState<DisplayMode>('schema');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedField, setSelectedField] = useState<string | null>(null);\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm || !data) return data;\n\n    const filterObject = (obj: any, term: string): any => {\n      if (typeof obj === 'string') {\n        return obj.toLowerCase().includes(term.toLowerCase()) ? obj : null;\n      }\n\n      if (Array.isArray(obj)) {\n        return obj.map((item) => filterObject(item, term)).filter((item) => item !== null);\n      }\n\n      if (typeof obj === 'object' && obj !== null) {\n        const filtered: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          if (key.toLowerCase().includes(term.toLowerCase())) {\n            filtered[key] = value;\n          } else {\n            const filteredValue = filterObject(value, term);\n            if (filteredValue !== null) {\n              filtered[key] = filteredValue;\n            }\n          }\n        }\n        return Object.keys(filtered).length > 0 ? filtered : null;\n      }\n\n      return obj;\n    };\n\n    return filterObject(data, searchTerm);\n  }, [data, searchTerm]);\n\n  // Data statistics\n  const dataStats = useMemo(() => {\n    if (!data) return null;\n\n    const countFields = (obj: any): number => {\n      if (typeof obj !== 'object' || obj === null) return 0;\n\n      let count = 0;\n      for (const [value] of Object.entries(obj)) {\n        count++;\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          count += countFields(value);\n        }\n      }\n      return count;\n    };\n\n    return {\n      totalFields: countFields(data),\n      topLevelFields: Object.keys(data || {}).length,\n      hasArrays: JSON.stringify(data).includes('['),\n      hasNested: JSON.stringify(data).includes('{', 1),\n      dataSize: JSON.stringify(data).length,\n    };\n  }, [data]);\n\n  const handleCopyData = () => {\n    navigator.clipboard.writeText(JSON.stringify(data, null, 2));\n  };\n\n  const handleDownloadData = () => {\n    const blob = new Blob([JSON.stringify(data, null, 2)], {\n      type: 'application/json',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${nodeId || 'data'}-output.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const showFieldDetails = (fieldPath: string) => {\n    setSelectedField(fieldPath);\n    setIsModalVisible(true);\n  };\n\n  const renderContent = () => {\n    if (!data) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📊</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">No input data available</p>\n          <p className=\"text-gray-400\">\n            Connect this node to a data source to see input data visualization\n          </p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            <SchemaView data={filteredData} onFieldClick={showFieldDetails} compact={compact} />\n          </div>\n        );\n      case 'table':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            <TableView\n              data={filteredData}\n              onFieldClick={showFieldDetails}\n              onDataTransform={onDataTransform}\n              compact={compact}\n            />\n          </div>\n        );\n      case 'json':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            <JsonView data={filteredData} onFieldClick={showFieldDetails} compact={compact} />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            {title}\n            {data && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Data loaded</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {data && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search data fields\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleCopyData}\n                className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\"\n                title=\"Copy JSON\"\n              >\n                <CopyOutlined className=\"w-4 h-4\" />\n              </button>\n              <button\n                onClick={handleDownloadData}\n                className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\"\n                title=\"Download JSON\"\n              >\n                <DownloadOutlined className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Data info */}\n        {data && dataStats && (\n          <div className=\"mt-3 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Fields:</span> {dataStats.totalFields}\n            </div>\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Size:</span> {(dataStats.dataSize / 1024).toFixed(1)}\n              KB\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">{renderContent()}</div>\n\n      {/* Field Details Modal */}\n      <Modal\n        title={`Field Details: ${selectedField}`}\n        open={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={null}\n        width={800}\n        className=\"dark-modal\"\n      >\n        {selectedField && (\n          <div className=\"bg-gray-900 p-4 rounded\">\n            <JsonView data={filteredData} highlightPath={selectedField} compact={false} />\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default DataVisualizationPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx",
        "start": 1,
        "end": 274,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 274,
          "column": 2,
          "position": 2400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/datavisualizationpanel/DataVisualizationPanel.tsx",
        "start": 3,
        "end": 276,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 276,
          "column": 2,
          "position": 2426
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toLowerCase(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async includes(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async some",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 43,
        "end": 58,
        "startLoc": {
          "line": 43,
          "column": 16,
          "position": 269
        },
        "endLoc": {
          "line": 58,
          "column": 5,
          "position": 379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 138,
        "end": 153,
        "startLoc": {
          "line": 138,
          "column": 8,
          "position": 972
        },
        "endLoc": {
          "line": 153,
          "column": 20,
          "position": 1082
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 163,
        "end": 178,
        "startLoc": {
          "line": 163,
          "column": 13,
          "position": 1157
        },
        "endLoc": {
          "line": 178,
          "column": 5,
          "position": 1267
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 13,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async reduce(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async round(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async strictness",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 178,
        "end": 193,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1268
        },
        "endLoc": {
          "line": 193,
          "column": 11,
          "position": 1378
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security/securityService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 10,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 3,
          "position": 305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async calculateNextExecution",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 38,
        "end": 53,
        "startLoc": {
          "line": 38,
          "column": 7,
          "position": 232
        },
        "endLoc": {
          "line": 53,
          "column": 23,
          "position": 342
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 13,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async some(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async includes(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async calculateRetryDelay",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 373,
        "end": 388,
        "startLoc": {
          "line": 373,
          "column": 12,
          "position": 2711
        },
        "endLoc": {
          "line": 388,
          "column": 20,
          "position": 2821
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/credential/CredentialService.ts",
        "start": 268,
        "end": 283,
        "startLoc": {
          "line": 268,
          "column": 5,
          "position": 1934
        },
        "endLoc": {
          "line": 283,
          "column": 11,
          "position": 2044
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async hasPermission",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 4,
          "position": 121
        },
        "endLoc": {
          "line": 38,
          "column": 14,
          "position": 231
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 8,
          "position": 1416
        },
        "endLoc": {
          "line": 213,
          "column": 8,
          "position": 1526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async RBACService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 193,
        "end": 218,
        "startLoc": {
          "line": 193,
          "column": 12,
          "position": 1379
        },
        "endLoc": {
          "line": 218,
          "column": 12,
          "position": 1563
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 43,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 18,
        "end": 43,
        "startLoc": {
          "line": 18,
          "column": 11,
          "position": 84
        },
        "endLoc": {
          "line": 43,
          "column": 4,
          "position": 268
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 43,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 9,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 5,
          "position": 416
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 4,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 13,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 53,
        "end": 68,
        "startLoc": {
          "line": 53,
          "column": 4,
          "position": 343
        },
        "endLoc": {
          "line": 68,
          "column": 12,
          "position": 453
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security/securityService.ts",
        "start": 43,
        "end": 58,
        "startLoc": {
          "line": 43,
          "column": 6,
          "position": 269
        },
        "endLoc": {
          "line": 58,
          "column": 7,
          "position": 379
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async generateNodeMetrics",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 58,
        "end": 73,
        "startLoc": {
          "line": 58,
          "column": 3,
          "position": 380
        },
        "endLoc": {
          "line": 73,
          "column": 20,
          "position": 490
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 13,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getActiveTraces",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 173,
        "end": 188,
        "startLoc": {
          "line": 173,
          "column": 18,
          "position": 1231
        },
        "endLoc": {
          "line": 188,
          "column": 16,
          "position": 1341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 22,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 23,
          "position": 1415
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async switch",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performance/PerformanceService.ts",
        "start": 173,
        "end": 188,
        "startLoc": {
          "line": 173,
          "column": 8,
          "position": 1231
        },
        "endLoc": {
          "line": 188,
          "column": 7,
          "position": 1341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 11,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 20,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async setupAutoFlush",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/logging/LoggingService.ts",
        "start": 13,
        "end": 38,
        "startLoc": {
          "line": 13,
          "column": 7,
          "position": 47
        },
        "endLoc": {
          "line": 38,
          "column": 15,
          "position": 231
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 43,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async generateFingerprint",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/logging/LoggingService.ts",
        "start": 93,
        "end": 108,
        "startLoc": {
          "line": 93,
          "column": 18,
          "position": 639
        },
        "endLoc": {
          "line": 108,
          "column": 20,
          "position": 749
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 13,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async addEventListener(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async setTimeout(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getEntriesByType(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async service",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/logging/LoggingService.ts",
        "start": 178,
        "end": 198,
        "startLoc": {
          "line": 178,
          "column": 12,
          "position": 1268
        },
        "endLoc": {
          "line": 198,
          "column": 8,
          "position": 1415
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performance/PerformanceService.ts",
        "start": 248,
        "end": 268,
        "startLoc": {
          "line": 248,
          "column": 7,
          "position": 1786
        },
        "endLoc": {
          "line": 268,
          "column": 18,
          "position": 1933
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async destroy(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async clearInterval(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Logger",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/logging/LoggingService.ts",
        "start": 283,
        "end": 298,
        "startLoc": {
          "line": 283,
          "column": 22,
          "position": 2045
        },
        "endLoc": {
          "line": 298,
          "column": 7,
          "position": 2155
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 263,
        "end": 278,
        "startLoc": {
          "line": 263,
          "column": 12,
          "position": 1897
        },
        "endLoc": {
          "line": 278,
          "column": 6,
          "position": 2007
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async reduce(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getReviews",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 5,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 11,
          "position": 1600
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 173,
        "end": 188,
        "startLoc": {
          "line": 173,
          "column": 12,
          "position": 1231
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async IntegrationMarketplaceService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 293,
        "end": 308,
        "startLoc": {
          "line": 293,
          "column": 4,
          "position": 2119
        },
        "endLoc": {
          "line": 308,
          "column": 30,
          "position": 2229
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 28,
        "end": 43,
        "startLoc": {
          "line": 28,
          "column": 7,
          "position": 158
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getClientIP",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 23,
        "end": 48,
        "startLoc": {
          "line": 23,
          "column": 14,
          "position": 121
        },
        "endLoc": {
          "line": 48,
          "column": 12,
          "position": 305
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 43,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async from(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async timestamp",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 13,
          "position": 713
        },
        "endLoc": {
          "line": 118,
          "column": 10,
          "position": 823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 123,
        "end": 138,
        "startLoc": {
          "line": 123,
          "column": 21,
          "position": 861
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 971
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async createSecurityPolicy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 118,
        "end": 133,
        "startLoc": {
          "line": 118,
          "column": 10,
          "position": 824
        },
        "endLoc": {
          "line": 133,
          "column": 21,
          "position": 934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 108,
        "end": 123,
        "startLoc": {
          "line": 108,
          "column": 24,
          "position": 750
        },
        "endLoc": {
          "line": 123,
          "column": 22,
          "position": 860
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 253,
        "end": 268,
        "startLoc": {
          "line": 253,
          "column": 10,
          "position": 1823
        },
        "endLoc": {
          "line": 268,
          "column": 7,
          "position": 1933
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 22,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 23,
          "position": 1415
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async stringify(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async btoa(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substring(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async evaluateRule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 283,
        "end": 303,
        "startLoc": {
          "line": 283,
          "column": 9,
          "position": 2045
        },
        "endLoc": {
          "line": 303,
          "column": 13,
          "position": 2192
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security/securityService.ts",
        "start": 18,
        "end": 38,
        "startLoc": {
          "line": 18,
          "column": 4,
          "position": 84
        },
        "endLoc": {
          "line": 38,
          "column": 7,
          "position": 231
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Map",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhanceddebugging/enhancedDebuggingService.ts",
        "start": 13,
        "end": 28,
        "startLoc": {
          "line": 13,
          "column": 15,
          "position": 47
        },
        "endLoc": {
          "line": 28,
          "column": 4,
          "position": 157
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/auth/AuthService.ts",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 14,
          "position": 121
        },
        "endLoc": {
          "line": 38,
          "column": 24,
          "position": 231
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhanceddebugging/enhancedDebuggingService.ts",
        "start": 103,
        "end": 123,
        "startLoc": {
          "line": 103,
          "column": 14,
          "position": 713
        },
        "endLoc": {
          "line": 123,
          "column": 4,
          "position": 860
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 23,
        "end": 43,
        "startLoc": {
          "line": 23,
          "column": 4,
          "position": 121
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Function(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async func(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getCallStack",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhanceddebugging/enhancedDebuggingService.ts",
        "start": 178,
        "end": 193,
        "startLoc": {
          "line": 178,
          "column": 13,
          "position": 1268
        },
        "endLoc": {
          "line": 193,
          "column": 13,
          "position": 1378
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 333,
        "end": 348,
        "startLoc": {
          "line": 333,
          "column": 10,
          "position": 2415
        },
        "endLoc": {
          "line": 348,
          "column": 11,
          "position": 2525
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async subscribe(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getDebugMetrics",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhanceddebugging/enhancedDebuggingService.ts",
        "start": 238,
        "end": 258,
        "startLoc": {
          "line": 238,
          "column": 7,
          "position": 1712
        },
        "endLoc": {
          "line": 258,
          "column": 16,
          "position": 1859
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 248,
        "end": 198,
        "startLoc": {
          "line": 248,
          "column": 23,
          "position": 1786
        },
        "endLoc": {
          "line": 198,
          "column": 23,
          "position": 1415
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async reduce(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async calculateCostBreakdown",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 28,
        "end": 43,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 158
        },
        "endLoc": {
          "line": 43,
          "column": 23,
          "position": 268
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 128,
        "end": 143,
        "startLoc": {
          "line": 128,
          "column": 5,
          "position": 898
        },
        "endLoc": {
          "line": 143,
          "column": 29,
          "position": 1008
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async subscribeToAlerts(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async groupExecutionsByDay",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 178,
        "end": 203,
        "startLoc": {
          "line": 178,
          "column": 20,
          "position": 1268
        },
        "endLoc": {
          "line": 203,
          "column": 21,
          "position": 1452
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 168,
        "end": 273,
        "startLoc": {
          "line": 168,
          "column": 24,
          "position": 1194
        },
        "endLoc": {
          "line": 273,
          "column": 5,
          "position": 1970
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async listener(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async CostOptimizerService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 333,
        "end": 348,
        "startLoc": {
          "line": 333,
          "column": 5,
          "position": 2415
        },
        "endLoc": {
          "line": 348,
          "column": 21,
          "position": 2525
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 338,
        "end": 353,
        "startLoc": {
          "line": 338,
          "column": 30,
          "position": 2452
        },
        "endLoc": {
          "line": 353,
          "column": 26,
          "position": 2562
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async while",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 78,
        "end": 93,
        "startLoc": {
          "line": 78,
          "column": 6,
          "position": 528
        },
        "endLoc": {
          "line": 93,
          "column": 6,
          "position": 638
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 4,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 13,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Function(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async func(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getCurrentResourceUsage",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 4,
          "position": 1416
        },
        "endLoc": {
          "line": 213,
          "column": 24,
          "position": 1526
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 333,
        "end": 348,
        "startLoc": {
          "line": 333,
          "column": 10,
          "position": 2415
        },
        "endLoc": {
          "line": 348,
          "column": 11,
          "position": 2525
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Promise(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async setTimeout(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async subscribe",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 213,
        "end": 228,
        "startLoc": {
          "line": 213,
          "column": 24,
          "position": 1527
        },
        "endLoc": {
          "line": 228,
          "column": 10,
          "position": 1637
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 278,
        "end": 293,
        "startLoc": {
          "line": 278,
          "column": 4,
          "position": 2008
        },
        "endLoc": {
          "line": 293,
          "column": 4,
          "position": 2118
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async listener(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async onConfigChange",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts",
        "start": 118,
        "end": 133,
        "startLoc": {
          "line": 118,
          "column": 13,
          "position": 824
        },
        "endLoc": {
          "line": 133,
          "column": 15,
          "position": 934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 233,
        "end": 248,
        "startLoc": {
          "line": 233,
          "column": 7,
          "position": 1675
        },
        "endLoc": {
          "line": 248,
          "column": 18,
          "position": 1785
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async variables",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts",
        "start": 133,
        "end": 153,
        "startLoc": {
          "line": 133,
          "column": 15,
          "position": 935
        },
        "endLoc": {
          "line": 153,
          "column": 10,
          "position": 1082
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 183,
        "end": 273,
        "startLoc": {
          "line": 183,
          "column": 22,
          "position": 1305
        },
        "endLoc": {
          "line": 273,
          "column": 5,
          "position": 1970
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async generateId(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async checkForSecurityAlerts",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 13,
        "end": 33,
        "startLoc": {
          "line": 13,
          "column": 9,
          "position": 47
        },
        "endLoc": {
          "line": 33,
          "column": 23,
          "position": 194
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 198,
        "end": 218,
        "startLoc": {
          "line": 198,
          "column": 6,
          "position": 1416
        },
        "endLoc": {
          "line": 218,
          "column": 7,
          "position": 1563
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async includes(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toLowerCase(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async stringify",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 98,
        "end": 118,
        "startLoc": {
          "line": 98,
          "column": 10,
          "position": 676
        },
        "endLoc": {
          "line": 118,
          "column": 10,
          "position": 823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 48,
        "end": 68,
        "startLoc": {
          "line": 48,
          "column": 3,
          "position": 306
        },
        "endLoc": {
          "line": 68,
          "column": 5,
          "position": 453
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async timestamp(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getTime",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 118,
        "end": 133,
        "startLoc": {
          "line": 118,
          "column": 10,
          "position": 824
        },
        "endLoc": {
          "line": 133,
          "column": 8,
          "position": 934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 7,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 6,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async some(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 173,
        "end": 193,
        "startLoc": {
          "line": 173,
          "column": 24,
          "position": 1231
        },
        "endLoc": {
          "line": 193,
          "column": 4,
          "position": 1378
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflow/WorkflowService.ts",
        "start": 153,
        "end": 173,
        "startLoc": {
          "line": 153,
          "column": 7,
          "position": 1083
        },
        "endLoc": {
          "line": 173,
          "column": 4,
          "position": 1230
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 4,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 4,
          "position": 1415
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 8,
          "position": 1416
        },
        "endLoc": {
          "line": 213,
          "column": 8,
          "position": 1526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getHours",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 188,
        "end": 203,
        "startLoc": {
          "line": 188,
          "column": 8,
          "position": 1342
        },
        "endLoc": {
          "line": 203,
          "column": 9,
          "position": 1452
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 83,
        "end": 98,
        "startLoc": {
          "line": 83,
          "column": 12,
          "position": 565
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 675
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async performDataRetention",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 248,
        "end": 268,
        "startLoc": {
          "line": 248,
          "column": 5,
          "position": 1786
        },
        "endLoc": {
          "line": 268,
          "column": 21,
          "position": 1933
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 23,
        "end": 43,
        "startLoc": {
          "line": 23,
          "column": 4,
          "position": 121
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async from(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/analytics/analyticsService.ts",
        "start": 78,
        "end": 93,
        "startLoc": {
          "line": 78,
          "column": 5,
          "position": 528
        },
        "endLoc": {
          "line": 93,
          "column": 12,
          "position": 638
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 123,
        "end": 138,
        "startLoc": {
          "line": 123,
          "column": 21,
          "position": 861
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 971
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/analytics/analyticsService.ts",
        "start": 118,
        "end": 133,
        "startLoc": {
          "line": 118,
          "column": 18,
          "position": 824
        },
        "endLoc": {
          "line": 133,
          "column": 8,
          "position": 934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 108,
        "end": 123,
        "startLoc": {
          "line": 108,
          "column": 24,
          "position": 750
        },
        "endLoc": {
          "line": 123,
          "column": 22,
          "position": 860
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async map",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/analytics/analyticsService.ts",
        "start": 183,
        "end": 203,
        "startLoc": {
          "line": 183,
          "column": 21,
          "position": 1305
        },
        "endLoc": {
          "line": 203,
          "column": 4,
          "position": 1452
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 183,
        "end": 273,
        "startLoc": {
          "line": 183,
          "column": 22,
          "position": 1305
        },
        "endLoc": {
          "line": 273,
          "column": 5,
          "position": 1970
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async createMultiModalWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 18,
        "end": 33,
        "startLoc": {
          "line": 18,
          "column": 17,
          "position": 84
        },
        "endLoc": {
          "line": 33,
          "column": 25,
          "position": 194
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 8,
          "position": 1416
        },
        "endLoc": {
          "line": 213,
          "column": 8,
          "position": 1526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async generateId(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async validateWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 25,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 17,
          "position": 305
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 6,
          "position": 1416
        },
        "endLoc": {
          "line": 213,
          "column": 5,
          "position": 1526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async optimizeWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 17,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 17,
          "position": 416
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/auth/AuthService.ts",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 14,
          "position": 121
        },
        "endLoc": {
          "line": 38,
          "column": 24,
          "position": 231
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async for(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async find",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 68,
        "end": 83,
        "startLoc": {
          "line": 68,
          "column": 5,
          "position": 454
        },
        "endLoc": {
          "line": 83,
          "column": 5,
          "position": 564
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 43,
        "end": 58,
        "startLoc": {
          "line": 43,
          "column": 13,
          "position": 269
        },
        "endLoc": {
          "line": 58,
          "column": 3,
          "position": 379
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async floor(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async switch",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 19,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 7,
          "position": 1415
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 263,
        "end": 278,
        "startLoc": {
          "line": 263,
          "column": 8,
          "position": 1897
        },
        "endLoc": {
          "line": 278,
          "column": 4,
          "position": 2007
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async from(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async some",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 203,
        "end": 218,
        "startLoc": {
          "line": 203,
          "column": 8,
          "position": 1453
        },
        "endLoc": {
          "line": 218,
          "column": 5,
          "position": 1563
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 123,
        "end": 138,
        "startLoc": {
          "line": 123,
          "column": 21,
          "position": 861
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 971
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async some(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async abs",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 208,
        "end": 223,
        "startLoc": {
          "line": 208,
          "column": 5,
          "position": 1490
        },
        "endLoc": {
          "line": 223,
          "column": 4,
          "position": 1600
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflow/WorkflowService.ts",
        "start": 148,
        "end": 163,
        "startLoc": {
          "line": 148,
          "column": 5,
          "position": 1046
        },
        "endLoc": {
          "line": 163,
          "column": 4,
          "position": 1156
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async hasPrivateAccess",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 238,
        "end": 253,
        "startLoc": {
          "line": 238,
          "column": 24,
          "position": 1712
        },
        "endLoc": {
          "line": 253,
          "column": 17,
          "position": 1822
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 173,
        "end": 188,
        "startLoc": {
          "line": 173,
          "column": 6,
          "position": 1231
        },
        "endLoc": {
          "line": 188,
          "column": 12,
          "position": 1341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Promise(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async setTimeout(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 263,
        "end": 278,
        "startLoc": {
          "line": 263,
          "column": 4,
          "position": 1897
        },
        "endLoc": {
          "line": 278,
          "column": 7,
          "position": 2007
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 278,
        "end": 293,
        "startLoc": {
          "line": 278,
          "column": 4,
          "position": 2008
        },
        "endLoc": {
          "line": 293,
          "column": 4,
          "position": 2118
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getAvailableModels",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/aiorchestration/aiOrchestrationService.ts",
        "start": 283,
        "end": 298,
        "startLoc": {
          "line": 283,
          "column": 8,
          "position": 2045
        },
        "endLoc": {
          "line": 298,
          "column": 19,
          "position": 2155
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 28,
        "end": 43,
        "startLoc": {
          "line": 28,
          "column": 7,
          "position": 158
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Date(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 18,
        "end": 53,
        "startLoc": {
          "line": 18,
          "column": 14,
          "position": 84
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 342
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 223,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async deactivateTrigger",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 73,
        "end": 88,
        "startLoc": {
          "line": 73,
          "column": 14,
          "position": 491
        },
        "endLoc": {
          "line": 88,
          "column": 18,
          "position": 601
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 73,
        "end": 88,
        "startLoc": {
          "line": 73,
          "column": 15,
          "position": 491
        },
        "endLoc": {
          "line": 88,
          "column": 19,
          "position": 601
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async reduce(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 123,
        "end": 138,
        "startLoc": {
          "line": 123,
          "column": 18,
          "position": 861
        },
        "endLoc": {
          "line": 138,
          "column": 8,
          "position": 971
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 128,
        "end": 143,
        "startLoc": {
          "line": 128,
          "column": 5,
          "position": 898
        },
        "endLoc": {
          "line": 143,
          "column": 29,
          "position": 1008
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async from(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async map(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 138,
        "end": 153,
        "startLoc": {
          "line": 138,
          "column": 8,
          "position": 972
        },
        "endLoc": {
          "line": 153,
          "column": 5,
          "position": 1082
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 218,
        "end": 233,
        "startLoc": {
          "line": 218,
          "column": 17,
          "position": 1564
        },
        "endLoc": {
          "line": 233,
          "column": 6,
          "position": 1674
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async map(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 143,
        "end": 158,
        "startLoc": {
          "line": 143,
          "column": 5,
          "position": 1009
        },
        "endLoc": {
          "line": 158,
          "column": 6,
          "position": 1119
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodeversioning/nodeVersioningService.ts",
        "start": 53,
        "end": 68,
        "startLoc": {
          "line": 53,
          "column": 5,
          "position": 343
        },
        "endLoc": {
          "line": 68,
          "column": 15,
          "position": 453
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async calculateVolumetrend",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 148,
        "end": 163,
        "startLoc": {
          "line": 148,
          "column": 4,
          "position": 1046
        },
        "endLoc": {
          "line": 163,
          "column": 21,
          "position": 1156
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 108,
        "end": 123,
        "startLoc": {
          "line": 108,
          "column": 24,
          "position": 750
        },
        "endLoc": {
          "line": 123,
          "column": 22,
          "position": 860
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async switch",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 188,
        "end": 203,
        "startLoc": {
          "line": 188,
          "column": 18,
          "position": 1342
        },
        "endLoc": {
          "line": 203,
          "column": 7,
          "position": 1452
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 22,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 23,
          "position": 1415
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async RegExp(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async test(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Number",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 353,
        "end": 368,
        "startLoc": {
          "line": 353,
          "column": 9,
          "position": 2563
        },
        "endLoc": {
          "line": 368,
          "column": 7,
          "position": 2673
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 443,
        "end": 458,
        "startLoc": {
          "line": 443,
          "column": 12,
          "position": 3229
        },
        "endLoc": {
          "line": 458,
          "column": 5,
          "position": 3339
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async callback(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async destroy(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async clear(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async canTrigger",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedtriggersystem/advancedTriggerSystemService.ts",
        "start": 443,
        "end": 463,
        "startLoc": {
          "line": 443,
          "column": 6,
          "position": 3229
        },
        "endLoc": {
          "line": 463,
          "column": 11,
          "position": 3376
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 408,
        "end": 428,
        "startLoc": {
          "line": 408,
          "column": 8,
          "position": 2970
        },
        "endLoc": {
          "line": 428,
          "column": 25,
          "position": 3117
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async generateMFAChallenge",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedauth/advancedAuthService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 17,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 21,
          "position": 416
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/auth/AuthService.ts",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 14,
          "position": 121
        },
        "endLoc": {
          "line": 38,
          "column": 24,
          "position": 231
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async checkPermission",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedauth/advancedAuthService.ts",
        "start": 153,
        "end": 173,
        "startLoc": {
          "line": 153,
          "column": 16,
          "position": 1083
        },
        "endLoc": {
          "line": 173,
          "column": 16,
          "position": 1230
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 23,
        "end": 43,
        "startLoc": {
          "line": 23,
          "column": 4,
          "position": 121
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 268
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async subscribe(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async return(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async delete(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getCurrentContext",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedauth/advancedAuthService.ts",
        "start": 298,
        "end": 323,
        "startLoc": {
          "line": 298,
          "column": 15,
          "position": 2156
        },
        "endLoc": {
          "line": 323,
          "column": 18,
          "position": 2340
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enterprisesecurity/enterpriseSecurityService.ts",
        "start": 248,
        "end": 273,
        "startLoc": {
          "line": 248,
          "column": 23,
          "position": 1786
        },
        "endLoc": {
          "line": 273,
          "column": 5,
          "position": 1970
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async listener(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async AdvancedAuthService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedauth/advancedAuthService.ts",
        "start": 358,
        "end": 373,
        "startLoc": {
          "line": 358,
          "column": 5,
          "position": 2600
        },
        "endLoc": {
          "line": 373,
          "column": 20,
          "position": 2710
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerexecution/containerExecutionService.ts",
        "start": 233,
        "end": 248,
        "startLoc": {
          "line": 233,
          "column": 7,
          "position": 1675
        },
        "endLoc": {
          "line": 248,
          "column": 18,
          "position": 1785
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ",\n        type: 'options',\n        default: 'pinecone',\n        required: true,\n        options: [\n          {\n            name: 'Pinecone',\n            value: 'pinecone',\n          },\n          {\n            name: 'Weaviate',\n            value: 'weaviate',\n          },\n          {\n            name: 'Qdrant',\n            value: 'qdrant',\n          },\n          {\n            name: 'Chroma',\n            value: 'chroma',\n          },\n          {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStore.node.ts",
        "start": 85,
        "end": 106,
        "startLoc": {
          "line": 85,
          "column": 11,
          "position": 512
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStoreTool.node.ts",
        "start": 76,
        "end": 97,
        "startLoc": {
          "line": 76,
          "column": 14,
          "position": 462
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 576
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ",\n        options: [\n          { name: 'GET', value: 'GET' },\n          { name: 'POST', value: 'POST' },\n          { name: 'PUT', value: 'PUT' },\n          { name: 'DELETE', value: 'DELETE' },\n          { name: 'PATCH', value: 'PATCH' },\n          {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 21,
          "position": 176
        },
        "endLoc": {
          "line": 31,
          "column": 2,
          "position": 270
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Trigger.node.ts",
        "start": 79,
        "end": 86,
        "startLoc": {
          "line": 79,
          "column": 26,
          "position": 495
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ",\n        description: 'HTTP method to use',\n        options: [\n          { name: 'GET', value: 'GET' },\n          { name: 'POST', value: 'POST' },\n          { name: 'PUT', value: 'PUT' },\n          { name: 'DELETE', value: 'DELETE' },\n          { name: 'PATCH', value: 'PATCH' },\n        ],\n        displayOptions: {\n          show: {\n            actionType",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Action.node.ts",
        "start": 67,
        "end": 78,
        "startLoc": {
          "line": 67,
          "column": 6,
          "position": 420
        },
        "endLoc": {
          "line": 78,
          "column": 11,
          "position": 537
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts",
        "start": 23,
        "end": 89,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 169
        },
        "endLoc": {
          "line": 89,
          "column": 12,
          "position": 605
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ",\n            timestamp: new Date().toISOString(),\n            tokenUsage: {\n              promptTokens: Math.floor(Math.random() * 100) + 50,\n              completionTokens: Math.floor(Math.random() * 200) + 100,\n              totalTokens: Math.floor(Math.random() * 300) + 150,\n            },\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/AIAgent.node.ts",
        "start": 385,
        "end": 392,
        "startLoc": {
          "line": 385,
          "column": 13,
          "position": 2978
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 3078
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/AIAgent.node.ts",
        "start": 366,
        "end": 373,
        "startLoc": {
          "line": 366,
          "column": 36,
          "position": 2804
        },
        "endLoc": {
          "line": 373,
          "column": 15,
          "position": 2904
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async isValidUrl",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/credentialapi/CredentialApiService.ts",
        "start": 168,
        "end": 183,
        "startLoc": {
          "line": 168,
          "column": 7,
          "position": 1194
        },
        "endLoc": {
          "line": 183,
          "column": 11,
          "position": 1304
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 98,
        "end": 113,
        "startLoc": {
          "line": 98,
          "column": 21,
          "position": 676
        },
        "endLoc": {
          "line": 113,
          "column": 5,
          "position": 786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async ApiClientError(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async register",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/authapi/AuthApiService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 8,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 9,
          "position": 305
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/credentialapi/CredentialApiService.ts",
        "start": 18,
        "end": 33,
        "startLoc": {
          "line": 18,
          "column": 4,
          "position": 84
        },
        "endLoc": {
          "line": 33,
          "column": 14,
          "position": 194
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async optional(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async string(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async enum",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/integration/integrationService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 4,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 5,
          "position": 305
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/authapi/AuthApiService.ts",
        "start": 173,
        "end": 188,
        "startLoc": {
          "line": 173,
          "column": 7,
          "position": 1231
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async ApiClientError(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getIntegrationStatus",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/integration/integrationService.ts",
        "start": 53,
        "end": 68,
        "startLoc": {
          "line": 53,
          "column": 6,
          "position": 343
        },
        "endLoc": {
          "line": 68,
          "column": 21,
          "position": 453
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/workflowapi/WorkflowApiService.ts",
        "start": 18,
        "end": 33,
        "startLoc": {
          "line": 18,
          "column": 4,
          "position": 84
        },
        "endLoc": {
          "line": 33,
          "column": 6,
          "position": 194
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n  constructor(\n    // Add dependencies here\n  ) {}\n\n  async Map(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async connect",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/executionmonitor/executionMonitorService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 8,
          "position": 120
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 21,
          "position": 120
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/executionmonitor/executionMonitorService.ts",
        "start": 83,
        "end": 98,
        "startLoc": {
          "line": 83,
          "column": 21,
          "position": 565
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 675
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/analytics/analyticsService.ts",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 23,
          "position": 121
        },
        "endLoc": {
          "line": 38,
          "column": 3,
          "position": 231
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 206,
        "end": 220,
        "startLoc": {
          "line": 206,
          "column": 2,
          "position": 1390
        },
        "endLoc": {
          "line": 220,
          "column": 2,
          "position": 1499
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 69,
        "end": 83,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 551
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "};\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Product",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx",
        "start": 259,
        "end": 273,
        "startLoc": {
          "line": 259,
          "column": 3,
          "position": 1843
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1953
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 206,
        "end": 83,
        "startLoc": {
          "line": 206,
          "column": 3,
          "position": 1389
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Privacy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/privacy/Privacy.tsx",
        "start": 81,
        "end": 98,
        "startLoc": {
          "line": 81,
          "column": 15,
          "position": 489
        },
        "endLoc": {
          "line": 98,
          "column": 8,
          "position": 617
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 67,
        "end": 221,
        "startLoc": {
          "line": 67,
          "column": 108,
          "position": 543
        },
        "endLoc": {
          "line": 221,
          "column": 5,
          "position": 1510
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Simple",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx",
        "start": 353,
        "end": 369,
        "startLoc": {
          "line": 353,
          "column": 172,
          "position": 1946
        },
        "endLoc": {
          "line": 369,
          "column": 7,
          "position": 2063
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 67,
        "end": 83,
        "startLoc": {
          "line": 67,
          "column": 108,
          "position": 543
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Join",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx",
        "start": 670,
        "end": 680,
        "startLoc": {
          "line": 670,
          "column": 13,
          "position": 4543
        },
        "endLoc": {
          "line": 680,
          "column": 5,
          "position": 4624
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 493,
        "end": 503,
        "startLoc": {
          "line": 493,
          "column": 13,
          "position": 5084
        },
        "endLoc": {
          "line": 503,
          "column": 3,
          "position": 5165
        }
      }
    },
    {
      "format": "javascript",
      "lines": 77,
      "fragment": "} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"current-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.password ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n                  {formErrors.password && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.password}</p>\n                  )}\n                </div>\n\n                {/* Remember Me & Forgot Password */}\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"rememberMe\"\n                      checked={formData",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 176,
        "end": 252,
        "startLoc": {
          "line": 176,
          "column": 13,
          "position": 1583
        },
        "endLoc": {
          "line": 252,
          "column": 9,
          "position": 2116
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 288,
        "end": 376,
        "startLoc": {
          "line": 288,
          "column": 2,
          "position": 2501
        },
        "endLoc": {
          "line": 376,
          "column": 10,
          "position": 3098
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "} from 'lucide-react';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '@/core/stores/authStore';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\nimport { useAuthStore } from './hooks/useAuthStore';\nimport { useEffect } from './hooks/useEffect';\nimport { useNavigate } from './hooks/useNavigate';\nimport { useState } from './hooks/useState';\n\nconst Login",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 13,
          "column": 6,
          "position": 171
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 12,
        "end": 24,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 44
        },
        "endLoc": {
          "line": 24,
          "column": 9,
          "position": 188
        }
      }
    },
    {
      "format": "tsx",
      "lines": 24,
      "fragment": "] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Animation trigger\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // Clear errors when component mounts\n  useEffect(() => {\n    clearError();\n  }, [clearError]);\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.email",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 24,
        "end": 47,
        "startLoc": {
          "line": 24,
          "column": 16,
          "position": 306
        },
        "endLoc": {
          "line": 47,
          "column": 6,
          "position": 483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 39,
        "end": 62,
        "startLoc": {
          "line": 39,
          "column": 23,
          "position": 362
        },
        "endLoc": {
          "line": 62,
          "column": 10,
          "position": 539
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "if (!formData.email) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = 'Email is invalid';\n    }\n\n    if (!formData.password) {\n      errors.password = 'Password is required';\n    }\n\n    setFormErrors",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 47,
        "end": 57,
        "startLoc": {
          "line": 47,
          "column": 5,
          "position": 477
        },
        "endLoc": {
          "line": 57,
          "column": 14,
          "position": 560
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 70,
        "end": 78,
        "startLoc": {
          "line": 70,
          "column": 5,
          "position": 593
        },
        "endLoc": {
          "line": 78,
          "column": 5,
          "position": 674
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 54,
        "end": 69,
        "startLoc": {
          "line": 54,
          "column": 23,
          "position": 553
        },
        "endLoc": {
          "line": 69,
          "column": 6,
          "position": 645
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 89,
        "end": 104,
        "startLoc": {
          "line": 89,
          "column": 43,
          "position": 783
        },
        "endLoc": {
          "line": 104,
          "column": 6,
          "position": 875
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": ");\n      navigate('/app/dashboard');\n    } catch (_error) {}\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    // Clear field error when user starts typing\n    if (formErrors[name]) {\n      setFormErrors((prev) => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 69,
        "end": 87,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 650
        },
        "endLoc": {
          "line": 87,
          "column": 7,
          "position": 822
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 105,
        "end": 123,
        "startLoc": {
          "line": 105,
          "column": 13,
          "position": 898
        },
        "endLoc": {
          "line": 123,
          "column": 6,
          "position": 1070
        }
      }
    },
    {
      "format": "tsx",
      "lines": 34,
      "fragment": ";\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Header */}\n      <Header />\n      {/* Background Elements - matching landing page */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n      <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n      {/* Animated Background Orbs */}\n      <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse delay-1000\" />\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-20 right-20 w-20 h-20 bg-blue-500/20 rounded-lg backdrop-blur-sm animate-float hidden lg:block\" />\n      <div className=\"absolute bottom-20 left-20 w-16 h-16 bg-purple-500/20 rounded-full backdrop-blur-sm animate-float delay-1000 hidden lg:block\" />\n\n      <div className=\"relative z-10 min-h-screen flex\">\n        {/* Left Side - Branding */}\n        <div className=\"hidden lg:flex lg:w-1/2 flex-col justify-center px-12\">\n          <div\n            className={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Logo */}\n            <Link to=\"/\" className=\"inline-flex items-center gap-3 mb-8 group\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold text-white\">Reporunner</span>\n            </Link>\n\n            <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n              Welcome",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 85,
        "end": 118,
        "startLoc": {
          "line": 85,
          "column": 2,
          "position": 818
        },
        "endLoc": {
          "line": 118,
          "column": 8,
          "position": 1075
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 139,
        "end": 172,
        "startLoc": {
          "line": 139,
          "column": 2,
          "position": 1348
        },
        "endLoc": {
          "line": 172,
          "column": 5,
          "position": 1605
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center px-6 py-12\">\n          <div\n            className={`w-full max-w-md transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center gap-3 group\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">Reporunner</span>\n              </Link>\n            </div>\n\n            {/* Form Card */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Welcome",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 154,
        "end": 172,
        "startLoc": {
          "line": 154,
          "column": 30,
          "position": 1375
        },
        "endLoc": {
          "line": 172,
          "column": 8,
          "position": 1535
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 209,
        "end": 227,
        "startLoc": {
          "line": 209,
          "column": 37,
          "position": 1929
        },
        "endLoc": {
          "line": 227,
          "column": 7,
          "position": 2089
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Email Field */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 173,
        "end": 184,
        "startLoc": {
          "line": 173,
          "column": 8,
          "position": 1565
        },
        "endLoc": {
          "line": 184,
          "column": 18,
          "position": 1645
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 228,
        "end": 239,
        "startLoc": {
          "line": 228,
          "column": 6,
          "position": 2117
        },
        "endLoc": {
          "line": 239,
          "column": 18,
          "position": 2197
        }
      }
    },
    {
      "format": "tsx",
      "lines": 41,
      "fragment": "{/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"current-password",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 184,
        "end": 224,
        "startLoc": {
          "line": 184,
          "column": 17,
          "position": 1644
        },
        "endLoc": {
          "line": 224,
          "column": 17,
          "position": 1910
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 298,
        "end": 338,
        "startLoc": {
          "line": 298,
          "column": 17,
          "position": 2561
        },
        "endLoc": {
          "line": 338,
          "column": 13,
          "position": 2827
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n                  {formErrors",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 231,
        "end": 241,
        "startLoc": {
          "line": 231,
          "column": 20,
          "position": 1953
        },
        "endLoc": {
          "line": 241,
          "column": 11,
          "position": 2033
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 345,
        "end": 356,
        "startLoc": {
          "line": 345,
          "column": 18,
          "position": 2870
        },
        "endLoc": {
          "line": 356,
          "column": 34,
          "position": 2951
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "}\n              <div className=\"mt-8\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-white/20\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-4 bg-transparent text-slate-400\">New",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 287,
        "end": 294,
        "startLoc": {
          "line": 287,
          "column": 20,
          "position": 2334
        },
        "endLoc": {
          "line": 294,
          "column": 4,
          "position": 2407
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 481,
        "end": 489,
        "startLoc": {
          "line": 481,
          "column": 17,
          "position": 3779
        },
        "endLoc": {
          "line": 489,
          "column": 8,
          "position": 3854
        }
      }
    },
    {
      "format": "tsx",
      "lines": 27,
      "fragment": "account\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Link>\n                </div>\n              </div>\n\n              {/* Back to home link */}\n              <div className=\"mt-6 text-center\">\n                <Link\n                  to=\"/\"\n                  className=\"text-sm text-slate-400 hover:text-slate-200 transition-colors inline-flex items-center gap-1\"\n                >\n                  ← Back to home\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Login",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 303,
        "end": 329,
        "startLoc": {
          "line": 303,
          "column": 2,
          "position": 2462
        },
        "endLoc": {
          "line": 329,
          "column": 6,
          "position": 2594
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 499,
        "end": 525,
        "startLoc": {
          "line": 499,
          "column": 2,
          "position": 3917
        },
        "endLoc": {
          "line": 525,
          "column": 9,
          "position": 4049
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                150",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx",
        "start": 262,
        "end": 277,
        "startLoc": {
          "line": 262,
          "column": 2,
          "position": 2068
        },
        "endLoc": {
          "line": 277,
          "column": 4,
          "position": 2188
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 69,
        "end": 221,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 551
        },
        "endLoc": {
          "line": 221,
          "column": 5,
          "position": 1510
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Features",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/features/Features.tsx",
        "start": 296,
        "end": 311,
        "startLoc": {
          "line": 296,
          "column": 2,
          "position": 1695
        },
        "endLoc": {
          "line": 311,
          "column": 9,
          "position": 1808
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx",
        "start": 258,
        "end": 83,
        "startLoc": {
          "line": 258,
          "column": 2,
          "position": 1840
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-6xl mx-auto",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/enterprise/Enterprise.tsx",
        "start": 220,
        "end": 233,
        "startLoc": {
          "line": 220,
          "column": 2,
          "position": 1387
        },
        "endLoc": {
          "line": 233,
          "column": 18,
          "position": 1484
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx",
        "start": 258,
        "end": 81,
        "startLoc": {
          "line": 258,
          "column": 2,
          "position": 1840
        },
        "endLoc": {
          "line": 81,
          "column": 30,
          "position": 644
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "};\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Documentation",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 289,
        "end": 304,
        "startLoc": {
          "line": 289,
          "column": 3,
          "position": 2015
        },
        "endLoc": {
          "line": 304,
          "column": 14,
          "position": 2136
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 206,
        "end": 221,
        "startLoc": {
          "line": 206,
          "column": 3,
          "position": 1389
        },
        "endLoc": {
          "line": 221,
          "column": 5,
          "position": 1510
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 606,
        "end": 616,
        "startLoc": {
          "line": 606,
          "column": 17,
          "position": 4635
        },
        "endLoc": {
          "line": 616,
          "column": 6,
          "position": 4706
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 491,
        "end": 501,
        "startLoc": {
          "line": 491,
          "column": 17,
          "position": 5074
        },
        "endLoc": {
          "line": 501,
          "column": 4,
          "position": 5145
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ".map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n                {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 247,
        "end": 257,
        "startLoc": {
          "line": 247,
          "column": 15,
          "position": 2194
        },
        "endLoc": {
          "line": 257,
          "column": 2,
          "position": 2299
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/executions/Executions.tsx",
        "start": 143,
        "end": 153,
        "startLoc": {
          "line": 143,
          "column": 2,
          "position": 1403
        },
        "endLoc": {
          "line": 153,
          "column": 3,
          "position": 1508
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "</h2>\n            <button\n              onClick={() => setShowCreateForm(true)}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading credentials",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/credentials/Credentials.tsx",
        "start": 256,
        "end": 269,
        "startLoc": {
          "line": 256,
          "column": 12,
          "position": 2244
        },
        "endLoc": {
          "line": 269,
          "column": 12,
          "position": 2350
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 274,
        "end": 288,
        "startLoc": {
          "line": 274,
          "column": 10,
          "position": 2456
        },
        "endLoc": {
          "line": 288,
          "column": 10,
          "position": 2555
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx",
        "start": 181,
        "end": 196,
        "startLoc": {
          "line": 181,
          "column": 5,
          "position": 1361
        },
        "endLoc": {
          "line": 196,
          "column": 4,
          "position": 1475
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 205,
        "end": 83,
        "startLoc": {
          "line": 205,
          "column": 5,
          "position": 1385
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx",
        "start": 540,
        "end": 550,
        "startLoc": {
          "line": 540,
          "column": 13,
          "position": 4068
        },
        "endLoc": {
          "line": 550,
          "column": 38,
          "position": 4144
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx",
        "start": 632,
        "end": 642,
        "startLoc": {
          "line": 632,
          "column": 13,
          "position": 4207
        },
        "endLoc": {
          "line": 642,
          "column": 38,
          "position": 4283
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ">\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Don't",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx",
        "start": 567,
        "end": 578,
        "startLoc": {
          "line": 567,
          "column": 7,
          "position": 4338
        },
        "endLoc": {
          "line": 578,
          "column": 6,
          "position": 4422
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 492,
        "end": 503,
        "startLoc": {
          "line": 492,
          "column": 4,
          "position": 5081
        },
        "endLoc": {
          "line": 503,
          "column": 3,
          "position": 5165
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                API",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx",
        "start": 338,
        "end": 355,
        "startLoc": {
          "line": 338,
          "column": 28,
          "position": 1560
        },
        "endLoc": {
          "line": 355,
          "column": 4,
          "position": 1687
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 287,
        "end": 221,
        "startLoc": {
          "line": 287,
          "column": 9,
          "position": 2009
        },
        "endLoc": {
          "line": 221,
          "column": 5,
          "position": 1510
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ".map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setActiveEndpoint(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            activeEndpoint === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx",
        "start": 493,
        "end": 509,
        "startLoc": {
          "line": 493,
          "column": 19,
          "position": 2903
        },
        "endLoc": {
          "line": 509,
          "column": 2,
          "position": 3033
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx",
        "start": 401,
        "end": 418,
        "startLoc": {
          "line": 401,
          "column": 11,
          "position": 3204
        },
        "endLoc": {
          "line": 418,
          "column": 29,
          "position": 3334
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start Building?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx",
        "start": 789,
        "end": 800,
        "startLoc": {
          "line": 789,
          "column": 15,
          "position": 5203
        },
        "endLoc": {
          "line": 800,
          "column": 4,
          "position": 5289
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 607,
        "end": 618,
        "startLoc": {
          "line": 607,
          "column": 15,
          "position": 4640
        },
        "endLoc": {
          "line": 618,
          "column": 7,
          "position": 4726
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "},\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Building",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/about/About.tsx",
        "start": 170,
        "end": 185,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 966
        },
        "endLoc": {
          "line": 185,
          "column": 9,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 68,
        "end": 83,
        "startLoc": {
          "line": 68,
          "column": 5,
          "position": 546
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 660
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": ",\n  },\n  typography: {\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    fontSize: {\n      xs: '10px',\n      sm: '12px',\n      md: '14px',\n      lg: '16px',\n      xl: '18px',\n    },\n    fontWeight: {\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700,\n    },\n    lineHeight: {\n      tight: 1.2,\n      normal: 1.5,\n      relaxed: 1.8,\n    },\n  },\n  spacing: {\n    xs: '4px',\n    sm: '8px',\n    md: '12px',\n    lg: '16px',\n    xl: '20px',\n    '2xl': '24px',\n  },\n  animations: {\n    duration: {\n      fast: '150ms',\n      normal: '250ms',\n      slow: '350ms',\n    },\n    easing: {\n      linear: 'linear',\n      ease: 'ease',\n      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n      easeOut: 'cubic-bezier(0, 0, 0.2, 1)',\n      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.15)'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/darkTheme.ts",
        "start": 21,
        "end": 68,
        "startLoc": {
          "line": 21,
          "column": 10,
          "position": 120
        },
        "endLoc": {
          "line": 68,
          "column": 34,
          "position": 406
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/defaultTheme.ts",
        "start": 21,
        "end": 68,
        "startLoc": {
          "line": 21,
          "column": 10,
          "position": 120
        },
        "endLoc": {
          "line": 68,
          "column": 34,
          "position": 406
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              const fallback = target.nextElementSibling;\n              if (fallback) {\n                fallback.classList.remove('hidden');\n              }\n            }}\n          />\n          <span className={`hidden ${sizeClasses[size].split(' ')[2]}`}>",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 234
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 340
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 308,
        "end": 116,
        "startLoc": {
          "line": 308,
          "column": 19,
          "position": 2302
        },
        "endLoc": {
          "line": 116,
          "column": 2,
          "position": 834
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 56,
        "end": 63,
        "startLoc": {
          "line": 56,
          "column": 9,
          "position": 343
        },
        "endLoc": {
          "line": 63,
          "column": 484,
          "position": 401
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 213
        },
        "endLoc": {
          "line": 42,
          "column": 119,
          "position": 271
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 88,
        "end": 95,
        "startLoc": {
          "line": 88,
          "column": 7,
          "position": 552
        },
        "endLoc": {
          "line": 95,
          "column": 125,
          "position": 610
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 213
        },
        "endLoc": {
          "line": 42,
          "column": 119,
          "position": 271
        }
      }
    },
    {
      "format": "javascript",
      "lines": 275,
      "fragment": "={{ marginBottom: '16px' }}\n      />\n\n      {aiAgentProperties.map((property) => {\n        // Check display conditions\n        const shouldShow =\n          !property.displayOptions?.show ||\n          Object.entries(property.displayOptions.show).every(([key, values]) =>\n            values?.includes(formValues[key])\n          );\n\n        if (!shouldShow) return null;\n\n        return (\n          <PropertyField\n            key={property.name}\n            property={property}\n            value={formValues[property.name]}\n            onChange={(value) => handleFieldChange(property.name, value)}\n            errors={errors[property.name]}\n            theme={theme}\n            context={formValues}\n          />\n        );\n      })}\n    </div>\n  );\n\n  const renderAdvancedTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Advanced Settings\"\n        description=\"Fine-tune AI model behavior and performance parameters.\"\n        type=\"warning\"\n        showIcon\n        style={{ marginBottom: '16px' }}\n      />\n\n      <Collapse\n        items={[\n          {\n            key: 'performance',\n            label: (\n              <div className=\"flex items-center gap-2\">\n                <ExperimentOutlined />\n                <span>Performance & Sampling</span>\n              </div>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                {advancedProperties.map((property) => {\n                  const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      key={property.name}\n                      property={property}\n                      value={formValues[property.name]}\n                      onChange={(value) => handleFieldChange(property.name, value)}\n                      errors={errors[property.name]}\n                      theme={theme}\n                      context={formValues}\n                    />\n                  );\n                })}\n              </div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n\n  const renderTestingTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Test Your AI Agent\"\n        description=\"Test your AI agent configuration with sample data.\"\n        type=\"success\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Quick Test\">\n        <div className=\"space-y-4\">\n          <PropertyField\n            property={{\n              displayName: 'Test Input',\n              name: 'testInput',\n              type: 'text',\n              description: 'Sample data to test with',\n              placeholder: 'Enter test data here...',\n              rows: 4,\n            }}\n            value={formValues.testInput || ''}\n            onChange={(value) => handleFieldChange('testInput', value)}\n            theme={theme}\n          />\n\n          <Button\n            type=\"primary\"\n            icon={<PlayCircleOutlined />}\n            loading={isTestMode}\n            onClick={handleTest}\n            block\n          >\n            {isTestMode ? 'Testing...' : 'Test AI Agent'}\n          </Button>\n\n          {isTestMode && (\n            <Card size=\"small\" loading>\n              <div>Running test with current configuration...</div>\n            </Card>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderDebugTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Debug Information\"\n        description=\"View current configuration and troubleshooting information.\"\n        type=\"info\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Current Configuration\">\n        <pre\n          style={{\n            fontSize: '11px',\n            background: '#f5f5f5',\n            padding: '12px',\n            borderRadius: '4px',\n            overflow: 'auto',\n            maxHeight: '300px',\n          }}\n        >\n          {JSON.stringify(formValues, null, 2)}\n        </pre>\n      </Card>\n\n      <Card size=\"small\" title=\"Provider Information\">\n        <div className=\"space-y-2\">\n          <div>\n            <strong>Provider:</strong> {formValues.provider || 'Not selected'}\n          </div>\n          <div>\n            <strong>Model:</strong> {formValues.model || formValues.ollamaModel || 'Not selected'}\n          </div>\n          <div>\n            <strong>Token Limit:</strong> {formValues.maxTokens || 1000}\n          </div>\n          <div>\n            <strong>Temperature:</strong> {formValues.temperature || 0.7}\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header */}\n      <div\n        style={{\n          padding: '16px',\n          borderBottom: `1px solid ${theme.colors.border}`,\n          backgroundColor: theme.colors.background,\n        }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <SettingOutlined style={{ color: theme.colors.primary }} />\n            <span\n              style={{\n                fontSize: theme.typography.fontSize.lg,\n                fontWeight: theme.typography.fontWeight.semibold,\n                color: theme.colors.text,\n              }}\n            >\n              AI Agent Properties\n            </span>\n            <Badge count={Object.keys(errors).length} showZero={false} />\n          </div>\n          <Button size=\"small\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div style={{ flex: 1, overflow: 'hidden' }}>\n        <Tabs activeKey={activeTab} onChange={setActiveTab} style={{ height: '100%' }}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Configuration\n              </span>\n            }\n            key=\"configuration\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderConfigurationTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ExperimentOutlined />\n                Advanced\n              </span>\n            }\n            key=\"advanced\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderAdvancedTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <PlayCircleOutlined />\n                Testing\n              </span>\n            }\n            key=\"testing\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderTestingTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BugOutlined />\n                Debug\n              </span>\n            }\n            key=\"debug\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderDebugTab()}\n            </div>\n          </TabPane>\n        </Tabs>\n      </div>\n\n      {/* Footer */}\n      <div\n        style={{\n          padding: '12px 16px',\n          borderTop: `1px solid ${theme.colors.border}`,\n          backgroundColor: theme.colors.background,\n        }}\n      >\n        <Space>\n          <Button size=\"small\" onClick={validateForm}>\n            Validate\n          </Button>\n          <Button size=\"small\" type=\"primary\" onClick={() => onChange(nodeData)}>\n            Apply Changes\n          </Button>\n          <Tooltip title=\"Get help with AI Agent configuration\">\n            <Button size=\"small\" icon={<InfoCircleOutlined />}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 261,
        "end": 535,
        "startLoc": {
          "line": 261,
          "column": 6,
          "position": 2065
        },
        "endLoc": {
          "line": 535,
          "column": 2,
          "position": 3990
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 263,
        "end": 537,
        "startLoc": {
          "line": 263,
          "column": 6,
          "position": 2091
        },
        "endLoc": {
          "line": 537,
          "column": 2,
          "position": 4016
        }
      }
    },
    {
      "format": "tsx",
      "lines": 545,
      "fragment": "/**\n * AI Agent Properties Panel\n * Advanced properties panel for AI Agent nodes with dynamic forms and real-time validation\n */\n\nimport {\n  BugOutlined,\n  ExperimentOutlined,\n  InfoCircleOutlined,\n  PlayCircleOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { Alert, Badge, Button, Card, Collapse, Space, Tabs, Tooltip } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { PropertyField } from '../components';\nimport { useNodeTheme } from '../themes';\nimport type { CustomPropertiesPanelProps } from '../types';\n\nconst { TabPane } = Tabs;\n\nconst AIAgentPropertiesPanel: React.FC<CustomPropertiesPanelProps> = ({\n  nodeData,\n  onChange,\n  onClose,\n  theme: propTheme,\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [activeTab, setActiveTab] = useState('configuration');\n  const [formValues, setFormValues] = useState(nodeData.parameters || {});\n  const [errors, setErrors] = useState<Record<string, string[]>>({});\n  const [isTestMode, setIsTestMode] = useState(false);\n\n  // AI Agent specific properties\n  const aiAgentProperties: INodeProperty[] = [\n    {\n      displayName: 'AI Provider',\n      name: 'provider',\n      type: 'select',\n      required: true,\n      description: 'Choose the AI service provider',\n      default: 'openai',\n      options: [\n        { name: 'OpenAI', value: 'openai' },\n        { name: 'Anthropic Claude', value: 'anthropic' },\n        { name: 'Google Gemini', value: 'google' },\n        { name: 'Ollama (Local)', value: 'ollama' },\n        { name: 'Azure OpenAI', value: 'azure_openai' },\n      ],\n    },\n    {\n      displayName: 'Model',\n      name: 'model',\n      type: 'select',\n      required: true,\n      description: 'AI model to use',\n      default: 'gpt-4',\n      options: getModelOptionsForProvider(formValues.provider || 'openai'),\n      displayOptions: {\n        show: {\n          provider: ['openai', 'anthropic', 'google', 'azure_openai'],\n        },\n      },\n    },\n    {\n      displayName: 'Local Model Name',\n      name: 'ollamaModel',\n      type: 'string',\n      required: true,\n      description: 'Ollama model name (e.g., llama3.2, mistral)',\n      default: 'llama3.2',\n      placeholder: 'llama3.2',\n      displayOptions: {\n        show: {\n          provider: ['ollama'],\n        },\n      },\n    },\n    {\n      displayName: 'System Prompt',\n      name: 'systemPrompt',\n      type: 'text',\n      description: 'System prompt to define AI behavior',\n      placeholder: 'You are a helpful assistant...',\n      rows: 4,\n    },\n    {\n      displayName: 'User Prompt',\n      name: 'userPrompt',\n      type: 'text',\n      required: true,\n      description: 'Main prompt for the AI. Use {{input}} for dynamic data',\n      placeholder: 'Analyze the following data: {{input}}',\n      rows: 6,\n    },\n    {\n      displayName: 'Temperature',\n      name: 'temperature',\n      type: 'number',\n      description: 'Controls randomness (0.0 = deterministic, 2.0 = very random)',\n      default: 0.7,\n      min: 0,\n      max: 2,\n      step: 0.1,\n    },\n    {\n      displayName: 'Max Tokens',\n      name: 'maxTokens',\n      type: 'number',\n      description: 'Maximum tokens in response',\n      default: 1000,\n      min: 1,\n      max: 4000,\n    },\n    {\n      displayName: 'Response Format',\n      name: 'responseFormat',\n      type: 'select',\n      description: 'Expected response format',\n      default: 'text',\n      options: [\n        { name: 'Plain Text', value: 'text' },\n        { name: 'JSON', value: 'json' },\n        { name: 'Markdown', value: 'markdown' },\n        { name: 'HTML', value: 'html' },\n      ],\n    },\n  ];\n\n  // Performance and advanced properties\n  const advancedProperties: INodeProperty[] = [\n    {\n      displayName: 'Enable Streaming',\n      name: 'streaming',\n      type: 'boolean',\n      description: 'Stream response in real-time',\n      default: false,\n    },\n    {\n      displayName: 'Top P',\n      name: 'topP',\n      type: 'number',\n      description: 'Nucleus sampling parameter',\n      default: 1.0,\n      min: 0.1,\n      max: 1.0,\n      step: 0.1,\n    },\n    {\n      displayName: 'Frequency Penalty',\n      name: 'frequencyPenalty',\n      type: 'number',\n      description: 'Reduce repetition (OpenAI only)',\n      default: 0,\n      min: -2.0,\n      max: 2.0,\n      step: 0.1,\n      displayOptions: {\n        show: {\n          provider: ['openai', 'azure_openai'],\n        },\n      },\n    },\n    {\n      displayName: 'Presence Penalty',\n      name: 'presencePenalty',\n      type: 'number',\n      description: 'Encourage new topics (OpenAI only)',\n      default: 0,\n      min: -2.0,\n      max: 2.0,\n      step: 0.1,\n      displayOptions: {\n        show: {\n          provider: ['openai', 'azure_openai'],\n        },\n      },\n    },\n  ];\n\n  function getModelOptionsForProvider(provider: string) {\n    const modelMap: Record<string, Array<{ name: string; value: string }>> = {\n      openai: [\n        { name: 'GPT-4o', value: 'gpt-4o' },\n        { name: 'GPT-4 Turbo', value: 'gpt-4-turbo' },\n        { name: 'GPT-4', value: 'gpt-4' },\n        { name: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\n      ],\n      anthropic: [\n        { name: 'Claude 3.5 Sonnet', value: 'claude-3-5-sonnet-20241022' },\n        { name: 'Claude 3.5 Haiku', value: 'claude-3-5-haiku-20241022' },\n        { name: 'Claude 3 Opus', value: 'claude-3-opus-20240229' },\n      ],\n      google: [\n        { name: 'Gemini 2.0 Flash', value: 'gemini-2.0-flash-exp' },\n        { name: 'Gemini 1.5 Pro', value: 'gemini-1.5-pro' },\n        { name: 'Gemini 1.5 Flash', value: 'gemini-1.5-flash' },\n      ],\n      azure_openai: [\n        { name: 'GPT-4', value: 'gpt-4' },\n        { name: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\n      ],\n    };\n\n    return modelMap[provider] || [];\n  }\n\n  const handleFieldChange = (fieldName: string, value: any) => {\n    const newValues = { ...formValues, [fieldName]: value };\n    setFormValues(newValues);\n\n    // Clear errors for this field\n    if (errors[fieldName]) {\n      const newErrors = { ...errors };\n      delete newErrors[fieldName];\n      setErrors(newErrors);\n    }\n\n    // Update parent immediately for real-time updates\n    onChange({ ...nodeData, parameters: newValues });\n  };\n\n  const handleTest = async () => {\n    setIsTestMode(true);\n    // Simulate API call\n    setTimeout(() => {\n      setIsTestMode(false);\n      // Could show test results here\n    }, 2000);\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string[]> = {};\n\n    // Required field validation\n    if (!formValues.provider) {\n      newErrors.provider = ['Provider is required'];\n    }\n    if (!formValues.userPrompt) {\n      newErrors.userPrompt = ['User prompt is required'];\n    }\n\n    // Provider-specific validation\n    if (formValues.provider === 'ollama' && !formValues.ollamaModel) {\n      newErrors.ollamaModel = ['Model name is required for Ollama'];\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const renderConfigurationTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"AI Agent Configuration\"\n        description=\"Configure your AI agent settings. Changes are applied in real-time.\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: '16px' }}\n      />\n\n      {aiAgentProperties.map((property) => {\n        // Check display conditions\n        const shouldShow =\n          !property.displayOptions?.show ||\n          Object.entries(property.displayOptions.show).every(([key, values]) =>\n            values?.includes(formValues[key])\n          );\n\n        if (!shouldShow) return null;\n\n        return (\n          <PropertyField\n            key={property.name}\n            property={property}\n            value={formValues[property.name]}\n            onChange={(value) => handleFieldChange(property.name, value)}\n            errors={errors[property.name]}\n            theme={theme}\n            context={formValues}\n          />\n        );\n      })}\n    </div>\n  );\n\n  const renderAdvancedTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Advanced Settings\"\n        description=\"Fine-tune AI model behavior and performance parameters.\"\n        type=\"warning\"\n        showIcon\n        style={{ marginBottom: '16px' }}\n      />\n\n      <Collapse\n        items={[\n          {\n            key: 'performance',\n            label: (\n              <div className=\"flex items-center gap-2\">\n                <ExperimentOutlined />\n                <span>Performance & Sampling</span>\n              </div>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                {advancedProperties.map((property) => {\n                  const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      key={property.name}\n                      property={property}\n                      value={formValues[property.name]}\n                      onChange={(value) => handleFieldChange(property.name, value)}\n                      errors={errors[property.name]}\n                      theme={theme}\n                      context={formValues}\n                    />\n                  );\n                })}\n              </div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n\n  const renderTestingTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Test Your AI Agent\"\n        description=\"Test your AI agent configuration with sample data.\"\n        type=\"success\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Quick Test\">\n        <div className=\"space-y-4\">\n          <PropertyField\n            property={{\n              displayName: 'Test Input',\n              name: 'testInput',\n              type: 'text',\n              description: 'Sample data to test with',\n              placeholder: 'Enter test data here...',\n              rows: 4,\n            }}\n            value={formValues.testInput || ''}\n            onChange={(value) => handleFieldChange('testInput', value)}\n            theme={theme}\n          />\n\n          <Button\n            type=\"primary\"\n            icon={<PlayCircleOutlined />}\n            loading={isTestMode}\n            onClick={handleTest}\n            block\n          >\n            {isTestMode ? 'Testing...' : 'Test AI Agent'}\n          </Button>\n\n          {isTestMode && (\n            <Card size=\"small\" loading>\n              <div>Running test with current configuration...</div>\n            </Card>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderDebugTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Debug Information\"\n        description=\"View current configuration and troubleshooting information.\"\n        type=\"info\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Current Configuration\">\n        <pre\n          style={{\n            fontSize: '11px',\n            background: '#f5f5f5',\n            padding: '12px',\n            borderRadius: '4px',\n            overflow: 'auto',\n            maxHeight: '300px',\n          }}\n        >\n          {JSON.stringify(formValues, null, 2)}\n        </pre>\n      </Card>\n\n      <Card size=\"small\" title=\"Provider Information\">\n        <div className=\"space-y-2\">\n          <div>\n            <strong>Provider:</strong> {formValues.provider || 'Not selected'}\n          </div>\n          <div>\n            <strong>Model:</strong> {formValues.model || formValues.ollamaModel || 'Not selected'}\n          </div>\n          <div>\n            <strong>Token Limit:</strong> {formValues.maxTokens || 1000}\n          </div>\n          <div>\n            <strong>Temperature:</strong> {formValues.temperature || 0.7}\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header */}\n      <div\n        style={{\n          padding: '16px',\n          borderBottom: `1px solid ${theme.colors.border}`,\n          backgroundColor: theme.colors.background,\n        }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <SettingOutlined style={{ color: theme.colors.primary }} />\n            <span\n              style={{\n                fontSize: theme.typography.fontSize.lg,\n                fontWeight: theme.typography.fontWeight.semibold,\n                color: theme.colors.text,\n              }}\n            >\n              AI Agent Properties\n            </span>\n            <Badge count={Object.keys(errors).length} showZero={false} />\n          </div>\n          <Button size=\"small\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div style={{ flex: 1, overflow: 'hidden' }}>\n        <Tabs activeKey={activeTab} onChange={setActiveTab} style={{ height: '100%' }}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Configuration\n              </span>\n            }\n            key=\"configuration\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderConfigurationTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ExperimentOutlined />\n                Advanced\n              </span>\n            }\n            key=\"advanced\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderAdvancedTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <PlayCircleOutlined />\n                Testing\n              </span>\n            }\n            key=\"testing\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderTestingTab()}\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BugOutlined />\n                Debug\n              </span>\n            }\n            key=\"debug\"\n          >\n            <div style={{ padding: '16px', height: '100%', overflow: 'auto' }}>\n              {renderDebugTab()}\n            </div>\n          </TabPane>\n        </Tabs>\n      </div>\n\n      {/* Footer */}\n      <div\n        style={{\n          padding: '12px 16px',\n          borderTop: `1px solid ${theme.colors.border}`,\n          backgroundColor: theme.colors.background,\n        }}\n      >\n        <Space>\n          <Button size=\"small\" onClick={validateForm}>\n            Validate\n          </Button>\n          <Button size=\"small\" type=\"primary\" onClick={() => onChange(nodeData)}>\n            Apply Changes\n          </Button>\n          <Tooltip title=\"Get help with AI Agent configuration\">\n            <Button size=\"small\" icon={<InfoCircleOutlined />}>\n              Help\n            </Button>\n          </Tooltip>\n        </Space>\n      </div>\n    </div>\n  );\n};\n\nexport default AIAgentPropertiesPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 1,
        "end": 545,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 545,
          "column": 2,
          "position": 4034
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/aiagentpropertiespanel/AIAgentPropertiesPanel.tsx",
        "start": 3,
        "end": 547,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 547,
          "column": 2,
          "position": 4060
        }
      }
    },
    {
      "format": "javascript",
      "lines": 119,
      "fragment": "={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Gmail Icon */}\n            <div className=\"flex items-center justify-center\">\n              <img\n                src={icon}\n                alt=\"Gmail\"\n                className=\"w-6 h-6\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const fallback = target.nextElementSibling;\n                  if (fallback) {\n                    fallback.classList.remove('hidden');\n                  }\n                }}\n              />\n              <span className=\"hidden text-xl\">📧</span>\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 59,
        "end": 177,
        "startLoc": {
          "line": 59,
          "column": 10,
          "position": 462
        },
        "endLoc": {
          "line": 177,
          "column": 2,
          "position": 1185
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 65,
        "end": 183,
        "startLoc": {
          "line": 65,
          "column": 10,
          "position": 540
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 1263
        }
      }
    },
    {
      "format": "tsx",
      "lines": 198,
      "fragment": ";\n\ninterface GmailNodeBodyProps extends CustomNodeBodyProps {\n  nodeData: any;\n  selected: boolean;\n  isHovered: boolean;\n  onMouseEnter: () => void;\n  onMouseLeave: () => void;\n  onDelete?: () => void;\n  onOpenProperties?: () => void;\n}\n\n/**\n * Custom Gmail Node Body Component\n * Replicates the old UI style with small, rounded design\n */\nconst GmailNodeBody: React.FC<GmailNodeBodyProps> = ({\n  nodeData,\n  selected,\n  isHovered = false,\n  onMouseEnter,\n  onMouseLeave,\n  onDelete,\n  onOpenProperties,\n}) => {\n  const displayName = nodeData.name || nodeData.label || 'Gmail';\n  const icon = 'https://upload.wikimedia.org/wikipedia/commons/7/7e/Gmail_icon_%282020%29.svg';\n\n  // Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Gmail Icon */}\n            <div className=\"flex items-center justify-center\">\n              <img\n                src={icon}\n                alt=\"Gmail\"\n                className=\"w-6 h-6\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const fallback = target.nextElementSibling;\n                  if (fallback) {\n                    fallback.classList.remove('hidden');\n                  }\n                }}\n              />\n              <span className=\"hidden text-xl\">📧</span>\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Indicators */}\n            {nodeData.disabled && (\n              <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-xs\">!</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Node Label - Below the node */}\n      <div className=\"mt-2 text-white text-sm font-medium text-center max-w-[100px] truncate\">\n        {displayName}\n      </div>\n    </div>\n  );\n};\n\nexport default GmailNodeBody;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 6,
        "end": 203,
        "startLoc": {
          "line": 6,
          "column": 20,
          "position": 78
        },
        "endLoc": {
          "line": 203,
          "column": 2,
          "position": 1331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 12,
        "end": 209,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 156
        },
        "endLoc": {
          "line": 209,
          "column": 2,
          "position": 1409
        }
      }
    },
    {
      "format": "javascript",
      "lines": 26,
      "fragment": " : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#22c55e'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 72,
        "end": 97,
        "startLoc": {
          "line": 72,
          "column": 92,
          "position": 644
        },
        "endLoc": {
          "line": 97,
          "column": 10,
          "position": 769
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 69,
        "end": 94,
        "startLoc": {
          "line": 69,
          "column": 89,
          "position": 559
        },
        "endLoc": {
          "line": 94,
          "column": 7,
          "position": 684
        }
      }
    },
    {
      "format": "javascript",
      "lines": 41,
      "fragment": ",\n              }}\n            >\n              F\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 142,
        "end": 182,
        "startLoc": {
          "line": 142,
          "column": 7,
          "position": 992
        },
        "endLoc": {
          "line": 182,
          "column": 21,
          "position": 1240
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 97,
        "end": 143,
        "startLoc": {
          "line": 97,
          "column": 2,
          "position": 701
        },
        "endLoc": {
          "line": 143,
          "column": 37,
          "position": 1015
        }
      }
    },
    {
      "format": "javascript",
      "lines": 57,
      "fragment": "}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badges */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n            {mode === 'rules' && rules.length > 0 && (\n              <StatusBadge type=\"count\" content={rules",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 167,
        "end": 223,
        "startLoc": {
          "line": 167,
          "column": 2,
          "position": 1149
        },
        "endLoc": {
          "line": 223,
          "column": 6,
          "position": 1537
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 145,
        "end": 169,
        "startLoc": {
          "line": 145,
          "column": 2,
          "position": 1029
        },
        "endLoc": {
          "line": 169,
          "column": 2,
          "position": 1170
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ";\n\n  // Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef:",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 31,
        "end": 41,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 295
        },
        "endLoc": {
          "line": 41,
          "column": 2,
          "position": 386
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 38,
        "end": 48,
        "startLoc": {
          "line": 38,
          "column": 80,
          "position": 331
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 422
        }
      }
    },
    {
      "format": "tsx",
      "lines": 34,
      "fragment": "const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 58,
        "end": 91,
        "startLoc": {
          "line": 58,
          "column": 3,
          "position": 542
        },
        "endLoc": {
          "line": 91,
          "column": 25,
          "position": 735
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 55,
        "end": 88,
        "startLoc": {
          "line": 55,
          "column": 3,
          "position": 457
        },
        "endLoc": {
          "line": 88,
          "column": 20,
          "position": 650
        }
      }
    },
    {
      "format": "css",
      "lines": 15,
      "fragment": "{`\n        .transform-assignment-collection {\n          max-width: 100%;\n        }\n        .assignment-item.dragging {\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n        .bulk-operations {\n          margin-bottom: 16px;\n          padding: 12px;\n          background: #fafafa;\n          border-radius: 6px;\n          border: 1px solid #d9d9d9;\n        }\n      `}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx",
        "start": 361,
        "end": 375,
        "startLoc": {
          "line": 361,
          "column": 2,
          "position": 2988
        },
        "endLoc": {
          "line": 375,
          "column": 2,
          "position": 3046
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx",
        "start": 366,
        "end": 380,
        "startLoc": {
          "line": 366,
          "column": 2,
          "position": 3053
        },
        "endLoc": {
          "line": 380,
          "column": 2,
          "position": 3111
        }
      }
    },
    {
      "format": "javascript",
      "lines": 387,
      "fragment": "={assignment.value || ''}\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            disabled={disabled}\n          />\n        );\n      case 'numberValue':\n        return (\n          <Input\n            type=\"number\"\n            placeholder=\"Numeric value\"\n            value={assignment.value ?? ''}\n            onChange={(e) => handleFieldChange('value', Number(e.target.value) || 0)}\n            disabled={disabled}\n          />\n        );\n      case 'booleanValue':\n        return (\n          <Switch\n            checked={assignment.value ?? false}\n            onChange={(value) => handleFieldChange('value', value)}\n            disabled={disabled}\n          />\n        );\n      case 'arrayValue':\n        return (\n          <Input.TextArea\n            placeholder='[\"item1\", \"item2\"] or JSON array'\n            value={\n              typeof assignment.value === 'string'\n                ? assignment.value\n                : JSON.stringify(assignment.value || [])\n            }\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            rows={2}\n            disabled={disabled}\n          />\n        );\n      case 'objectValue':\n        return (\n          <Input.TextArea\n            placeholder='{\"key\": \"value\"} or JSON object'\n            value={\n              typeof assignment.value === 'string'\n                ? assignment.value\n                : JSON.stringify(assignment.value || {})\n            }\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            rows={2}\n            disabled={disabled}\n          />\n        );\n      default:\n        return (\n          <Input\n            placeholder=\"Value\"\n            value={assignment.value || ''}\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            disabled={disabled}\n          />\n        );\n    }\n  };\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      size=\"small\"\n      className={`assignment-item ${isDragging ? 'dragging' : ''}`}\n      bodyStyle={{ padding: '12px' }}\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\n        {/* Header with drag handle and delete button */}\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n            <div {...attributes} {...listeners} style={{ cursor: 'grab', color: '#8c8c8c' }}>\n              <DragOutlined />\n            </div>\n            <Text strong style={{ fontSize: '12px' }}>\n              Assignment {assignment.id.slice(-3)}\n            </Text>\n          </div>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<DeleteOutlined />}\n            onClick={() => onDelete(assignment.id)}\n            disabled={disabled}\n            danger\n            style={{ minWidth: 'auto', padding: '4px' }}\n          />\n        </div>\n\n        {/* Field Name */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Field Name\n          </Text>\n          <Input\n            placeholder=\"e.g. user.name or address.city\"\n            value={assignment.name}\n            onChange={(e) => handleFieldChange('name', e.target.value)}\n            size=\"small\"\n            disabled={disabled}\n          />\n        </div>\n\n        {/* Field Type */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Field Type\n          </Text>\n          <Select\n            value={assignment.type}\n            onChange={(value) => handleFieldChange('type', value)}\n            size=\"small\"\n            style={{ width: '100%' }}\n            disabled={disabled}\n          >\n            <Option value=\"stringValue\">String</Option>\n            <Option value=\"numberValue\">Number</Option>\n            <Option value=\"booleanValue\">Boolean</Option>\n            <Option value=\"arrayValue\">Array</Option>\n            <Option value=\"objectValue\">Object</Option>\n          </Select>\n        </div>\n\n        {/* Field Value */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Value\n          </Text>\n          {renderValueInput()}\n        </div>\n      </Space>\n    </Card>\n  );\n};\n\n// Main Transform Assignment Collection Component\nconst TransformAssignmentCollection: React.FC<TransformAssignmentCollectionProps> = ({\n  assignments,\n  onChange,\n  inputData,\n  disabled,\n}) => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Generate unique ID for new assignments\n  const generateId = useCallback(() => {\n    return `assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  // Add new assignment\n  const handleAddAssignment = useCallback(() => {\n    const newAssignment: FieldAssignment = {\n      id: generateId(),\n      name: '',\n      type: 'stringValue',\n      value: '',\n    };\n    onChange([...assignments, newAssignment]);\n  }, [assignments, generateId, onChange]);\n\n  // Update assignment\n  const handleUpdateAssignment = useCallback(\n    (id: string, updates: Partial<FieldAssignment>) => {\n      const updatedAssignments = assignments.map((assignment) =>\n        assignment.id === id ? { ...assignment, ...updates } : assignment\n      );\n      onChange(updatedAssignments);\n    },\n    [assignments, onChange]\n  );\n\n  // Delete assignment\n  const handleDeleteAssignment = useCallback(\n    (id: string) => {\n      const filteredAssignments = assignments.filter((assignment) => assignment.id !== id);\n      onChange(filteredAssignments);\n    },\n    [assignments, onChange]\n  );\n\n  // Clear all assignments\n  const handleClearAll = useCallback(() => {\n    onChange([]);\n  }, [onChange]);\n\n  // Add all fields from input data\n  const handleAddAllFields = useCallback(() => {\n    if (!inputData || !inputData.length) return;\n\n    // Get all unique field names from input data\n    const fieldNames = new Set<string>();\n    inputData.forEach((item) => {\n      if (item.json && typeof item.json === 'object') {\n        Object.keys(item.json).forEach((key) => fieldNames.add(key));\n      }\n    });\n\n    // Create assignments for each field with auto-detected type\n    const newAssignments = Array.from(fieldNames).map((fieldName) => {\n      // Auto-detect type from first occurrence\n      let detectedType: FieldAssignment['type'] = 'stringValue';\n      for (const item of inputData) {\n        if (item.json && item.json[fieldName] !== undefined) {\n          const value = item.json[fieldName];\n          if (typeof value === 'number') detectedType = 'numberValue';\n          else if (typeof value === 'boolean') detectedType = 'booleanValue';\n          else if (Array.isArray(value)) detectedType = 'arrayValue';\n          else if (typeof value === 'object' && value !== null) detectedType = 'objectValue';\n          break;\n        }\n      }\n\n      return {\n        id: generateId(),\n        name: fieldName,\n        type: detectedType,\n        value: '', // Start with empty value for user to configure\n      };\n    });\n\n    // Merge with existing assignments (avoid duplicates)\n    const existingNames = new Set(assignments.map((a) => a.name));\n    const filteredNewAssignments = newAssignments.filter((a) => !existingNames.has(a.name));\n\n    onChange([...assignments, ...filteredNewAssignments]);\n  }, [inputData, assignments, generateId, onChange]);\n\n  // Handle drag and drop reordering\n  const handleDragEnd = useCallback(\n    (event: any) => {\n      const { active, over } = event;\n\n      if (active.id !== over?.id) {\n        const oldIndex = assignments.findIndex((item) => item.id === active.id);\n        const newIndex = assignments.findIndex((item) => item.id === over.id);\n        const reorderedAssignments = arrayMove(assignments, oldIndex, newIndex);\n        onChange(reorderedAssignments);\n      }\n    },\n    [assignments, onChange]\n  );\n\n  // Memoize assignment items for performance\n  const assignmentItems = useMemo(() => {\n    return assignments.map((assignment) => (\n      <SortableAssignmentItem\n        key={assignment.id}\n        assignment={assignment}\n        onUpdate={handleUpdateAssignment}\n        onDelete={handleDeleteAssignment}\n        disabled={disabled}\n      />\n    ));\n  }, [assignments, handleUpdateAssignment, handleDeleteAssignment, disabled]);\n\n  return (\n    <div className=\"transform-assignment-collection\">\n      <style>{`\n        .transform-assignment-collection {\n          max-width: 100%;\n        }\n        .assignment-item.dragging {\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n        .bulk-operations {\n          margin-bottom: 16px;\n          padding: 12px;\n          background: #fafafa;\n          border-radius: 6px;\n          border: 1px solid #d9d9d9;\n        }\n      `}</style>\n\n      {/* Header and Bulk Operations */}\n      <div className=\"bulk-operations\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '8px',\n          }}\n        >\n          <Title level={5} style={{ margin: 0 }}>\n            Field Assignments ({assignments.length})\n          </Title>\n          <Space size=\"small\">\n            {inputData && inputData.length > 0 && (\n              <Tooltip title=\"Add all fields from input data\">\n                <Button\n                  type=\"dashed\"\n                  size=\"small\"\n                  icon={<AppstoreAddOutlined />}\n                  onClick={handleAddAllFields}\n                  disabled={disabled}\n                >\n                  Add All\n                </Button>\n              </Tooltip>\n            )}\n            {assignments.length > 0 && (\n              <Tooltip title=\"Clear all assignments\">\n                <Button\n                  type=\"dashed\"\n                  size=\"small\"\n                  icon={<ClearOutlined />}\n                  onClick={handleClearAll}\n                  disabled={disabled}\n                  danger\n                >\n                  Clear\n                </Button>\n              </Tooltip>\n            )}\n          </Space>\n        </div>\n\n        <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n          Configure field assignments with type validation. Drag to reorder.\n        </Text>\n      </div>\n\n      {/* Assignment Items with Drag & Drop */}\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext\n          items={assignments.map((a) => a.id)}\n          strategy={verticalListSortingStrategy}\n        >\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\n            {assignmentItems}\n          </Space>\n        </SortableContext>\n      </DndContext>\n\n      {/* Add Assignment Button */}\n      <div style={{ marginTop: assignments.length > 0 ? '16px' : '0' }}>\n        <Button\n          type=\"dashed\"\n          onClick={handleAddAssignment}\n          icon={<PlusOutlined />}\n          style={{ width: '100%' }}\n          disabled={disabled}\n        >\n          Add Assignment\n        </Button>\n      </div>\n\n      {/* Empty State */}\n      {assignments.length === 0 && (\n        <div\n          style={{\n            textAlign: 'center',\n            padding: '24px',\n            color: '#8c8c8c',\n            backgroundColor: '#fafafa',\n            borderRadius: '6px',\n            border: '1px dashed #d9d9d9',\n            marginTop: '8px',\n          }}\n        >\n          <Text type=\"secondary\">No field assignments configured</Text>\n          <br />\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx",
        "start": 80,
        "end": 466,
        "startLoc": {
          "line": 80,
          "column": 6,
          "position": 618
        },
        "endLoc": {
          "line": 466,
          "column": 2,
          "position": 3708
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx",
        "start": 85,
        "end": 471,
        "startLoc": {
          "line": 85,
          "column": 6,
          "position": 683
        },
        "endLoc": {
          "line": 471,
          "column": 2,
          "position": 3773
        }
      }
    },
    {
      "format": "tsx",
      "lines": 475,
      "fragment": "/**\n * Enhanced Assignment Collection Component for Transform Node\n * Provides drag & drop reordering and bulk operations similar to n8n's EditFields\n */\n\nimport {\n  AppstoreAddOutlined,\n  ClearOutlined,\n  DeleteOutlined,\n  DragOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport {\n  closestCenter,\n  DndContext,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Button, Card, Input, Select, Space, Switch, Tooltip, Typography } from 'antd';\nimport type React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nconst { Text, Title } = Typography;\nconst { Option } = Select;\n\ninterface FieldAssignment {\n  id: string;\n  name: string;\n  type: 'stringValue' | 'numberValue' | 'booleanValue' | 'arrayValue' | 'objectValue';\n  value: any;\n}\n\ninterface TransformAssignmentCollectionProps {\n  assignments: FieldAssignment[];\n  onChange: (assignments: FieldAssignment[]) => void;\n  inputData?: any[]; // Sample input data for \"Add All Fields\" functionality\n  disabled?: boolean;\n}\n\n// Sortable Assignment Item Component\nconst SortableAssignmentItem: React.FC<{\n  assignment: FieldAssignment;\n  onUpdate: (id: string, updates: Partial<FieldAssignment>) => void;\n  onDelete: (id: string) => void;\n  disabled?: boolean;\n}> = ({ assignment, onUpdate, onDelete, disabled }) => {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id: assignment.id,\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  const handleFieldChange = useCallback(\n    (field: keyof FieldAssignment, value: any) => {\n      onUpdate(assignment.id, { [field]: value });\n    },\n    [assignment.id, onUpdate]\n  );\n\n  const renderValueInput = () => {\n    switch (assignment.type) {\n      case 'stringValue':\n        return (\n          <Input\n            placeholder=\"String value (supports expressions)\"\n            value={assignment.value || ''}\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            disabled={disabled}\n          />\n        );\n      case 'numberValue':\n        return (\n          <Input\n            type=\"number\"\n            placeholder=\"Numeric value\"\n            value={assignment.value ?? ''}\n            onChange={(e) => handleFieldChange('value', Number(e.target.value) || 0)}\n            disabled={disabled}\n          />\n        );\n      case 'booleanValue':\n        return (\n          <Switch\n            checked={assignment.value ?? false}\n            onChange={(value) => handleFieldChange('value', value)}\n            disabled={disabled}\n          />\n        );\n      case 'arrayValue':\n        return (\n          <Input.TextArea\n            placeholder='[\"item1\", \"item2\"] or JSON array'\n            value={\n              typeof assignment.value === 'string'\n                ? assignment.value\n                : JSON.stringify(assignment.value || [])\n            }\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            rows={2}\n            disabled={disabled}\n          />\n        );\n      case 'objectValue':\n        return (\n          <Input.TextArea\n            placeholder='{\"key\": \"value\"} or JSON object'\n            value={\n              typeof assignment.value === 'string'\n                ? assignment.value\n                : JSON.stringify(assignment.value || {})\n            }\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            rows={2}\n            disabled={disabled}\n          />\n        );\n      default:\n        return (\n          <Input\n            placeholder=\"Value\"\n            value={assignment.value || ''}\n            onChange={(e) => handleFieldChange('value', e.target.value)}\n            disabled={disabled}\n          />\n        );\n    }\n  };\n\n  return (\n    <Card\n      ref={setNodeRef}\n      style={style}\n      size=\"small\"\n      className={`assignment-item ${isDragging ? 'dragging' : ''}`}\n      bodyStyle={{ padding: '12px' }}\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\n        {/* Header with drag handle and delete button */}\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n            <div {...attributes} {...listeners} style={{ cursor: 'grab', color: '#8c8c8c' }}>\n              <DragOutlined />\n            </div>\n            <Text strong style={{ fontSize: '12px' }}>\n              Assignment {assignment.id.slice(-3)}\n            </Text>\n          </div>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<DeleteOutlined />}\n            onClick={() => onDelete(assignment.id)}\n            disabled={disabled}\n            danger\n            style={{ minWidth: 'auto', padding: '4px' }}\n          />\n        </div>\n\n        {/* Field Name */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Field Name\n          </Text>\n          <Input\n            placeholder=\"e.g. user.name or address.city\"\n            value={assignment.name}\n            onChange={(e) => handleFieldChange('name', e.target.value)}\n            size=\"small\"\n            disabled={disabled}\n          />\n        </div>\n\n        {/* Field Type */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Field Type\n          </Text>\n          <Select\n            value={assignment.type}\n            onChange={(value) => handleFieldChange('type', value)}\n            size=\"small\"\n            style={{ width: '100%' }}\n            disabled={disabled}\n          >\n            <Option value=\"stringValue\">String</Option>\n            <Option value=\"numberValue\">Number</Option>\n            <Option value=\"booleanValue\">Boolean</Option>\n            <Option value=\"arrayValue\">Array</Option>\n            <Option value=\"objectValue\">Object</Option>\n          </Select>\n        </div>\n\n        {/* Field Value */}\n        <div>\n          <Text\n            type=\"secondary\"\n            style={{ fontSize: '11px', marginBottom: '4px', display: 'block' }}\n          >\n            Value\n          </Text>\n          {renderValueInput()}\n        </div>\n      </Space>\n    </Card>\n  );\n};\n\n// Main Transform Assignment Collection Component\nconst TransformAssignmentCollection: React.FC<TransformAssignmentCollectionProps> = ({\n  assignments,\n  onChange,\n  inputData,\n  disabled,\n}) => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Generate unique ID for new assignments\n  const generateId = useCallback(() => {\n    return `assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  // Add new assignment\n  const handleAddAssignment = useCallback(() => {\n    const newAssignment: FieldAssignment = {\n      id: generateId(),\n      name: '',\n      type: 'stringValue',\n      value: '',\n    };\n    onChange([...assignments, newAssignment]);\n  }, [assignments, generateId, onChange]);\n\n  // Update assignment\n  const handleUpdateAssignment = useCallback(\n    (id: string, updates: Partial<FieldAssignment>) => {\n      const updatedAssignments = assignments.map((assignment) =>\n        assignment.id === id ? { ...assignment, ...updates } : assignment\n      );\n      onChange(updatedAssignments);\n    },\n    [assignments, onChange]\n  );\n\n  // Delete assignment\n  const handleDeleteAssignment = useCallback(\n    (id: string) => {\n      const filteredAssignments = assignments.filter((assignment) => assignment.id !== id);\n      onChange(filteredAssignments);\n    },\n    [assignments, onChange]\n  );\n\n  // Clear all assignments\n  const handleClearAll = useCallback(() => {\n    onChange([]);\n  }, [onChange]);\n\n  // Add all fields from input data\n  const handleAddAllFields = useCallback(() => {\n    if (!inputData || !inputData.length) return;\n\n    // Get all unique field names from input data\n    const fieldNames = new Set<string>();\n    inputData.forEach((item) => {\n      if (item.json && typeof item.json === 'object') {\n        Object.keys(item.json).forEach((key) => fieldNames.add(key));\n      }\n    });\n\n    // Create assignments for each field with auto-detected type\n    const newAssignments = Array.from(fieldNames).map((fieldName) => {\n      // Auto-detect type from first occurrence\n      let detectedType: FieldAssignment['type'] = 'stringValue';\n      for (const item of inputData) {\n        if (item.json && item.json[fieldName] !== undefined) {\n          const value = item.json[fieldName];\n          if (typeof value === 'number') detectedType = 'numberValue';\n          else if (typeof value === 'boolean') detectedType = 'booleanValue';\n          else if (Array.isArray(value)) detectedType = 'arrayValue';\n          else if (typeof value === 'object' && value !== null) detectedType = 'objectValue';\n          break;\n        }\n      }\n\n      return {\n        id: generateId(),\n        name: fieldName,\n        type: detectedType,\n        value: '', // Start with empty value for user to configure\n      };\n    });\n\n    // Merge with existing assignments (avoid duplicates)\n    const existingNames = new Set(assignments.map((a) => a.name));\n    const filteredNewAssignments = newAssignments.filter((a) => !existingNames.has(a.name));\n\n    onChange([...assignments, ...filteredNewAssignments]);\n  }, [inputData, assignments, generateId, onChange]);\n\n  // Handle drag and drop reordering\n  const handleDragEnd = useCallback(\n    (event: any) => {\n      const { active, over } = event;\n\n      if (active.id !== over?.id) {\n        const oldIndex = assignments.findIndex((item) => item.id === active.id);\n        const newIndex = assignments.findIndex((item) => item.id === over.id);\n        const reorderedAssignments = arrayMove(assignments, oldIndex, newIndex);\n        onChange(reorderedAssignments);\n      }\n    },\n    [assignments, onChange]\n  );\n\n  // Memoize assignment items for performance\n  const assignmentItems = useMemo(() => {\n    return assignments.map((assignment) => (\n      <SortableAssignmentItem\n        key={assignment.id}\n        assignment={assignment}\n        onUpdate={handleUpdateAssignment}\n        onDelete={handleDeleteAssignment}\n        disabled={disabled}\n      />\n    ));\n  }, [assignments, handleUpdateAssignment, handleDeleteAssignment, disabled]);\n\n  return (\n    <div className=\"transform-assignment-collection\">\n      <style>{`\n        .transform-assignment-collection {\n          max-width: 100%;\n        }\n        .assignment-item.dragging {\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n        .bulk-operations {\n          margin-bottom: 16px;\n          padding: 12px;\n          background: #fafafa;\n          border-radius: 6px;\n          border: 1px solid #d9d9d9;\n        }\n      `}</style>\n\n      {/* Header and Bulk Operations */}\n      <div className=\"bulk-operations\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '8px',\n          }}\n        >\n          <Title level={5} style={{ margin: 0 }}>\n            Field Assignments ({assignments.length})\n          </Title>\n          <Space size=\"small\">\n            {inputData && inputData.length > 0 && (\n              <Tooltip title=\"Add all fields from input data\">\n                <Button\n                  type=\"dashed\"\n                  size=\"small\"\n                  icon={<AppstoreAddOutlined />}\n                  onClick={handleAddAllFields}\n                  disabled={disabled}\n                >\n                  Add All\n                </Button>\n              </Tooltip>\n            )}\n            {assignments.length > 0 && (\n              <Tooltip title=\"Clear all assignments\">\n                <Button\n                  type=\"dashed\"\n                  size=\"small\"\n                  icon={<ClearOutlined />}\n                  onClick={handleClearAll}\n                  disabled={disabled}\n                  danger\n                >\n                  Clear\n                </Button>\n              </Tooltip>\n            )}\n          </Space>\n        </div>\n\n        <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n          Configure field assignments with type validation. Drag to reorder.\n        </Text>\n      </div>\n\n      {/* Assignment Items with Drag & Drop */}\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext\n          items={assignments.map((a) => a.id)}\n          strategy={verticalListSortingStrategy}\n        >\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\n            {assignmentItems}\n          </Space>\n        </SortableContext>\n      </DndContext>\n\n      {/* Add Assignment Button */}\n      <div style={{ marginTop: assignments.length > 0 ? '16px' : '0' }}>\n        <Button\n          type=\"dashed\"\n          onClick={handleAddAssignment}\n          icon={<PlusOutlined />}\n          style={{ width: '100%' }}\n          disabled={disabled}\n        >\n          Add Assignment\n        </Button>\n      </div>\n\n      {/* Empty State */}\n      {assignments.length === 0 && (\n        <div\n          style={{\n            textAlign: 'center',\n            padding: '24px',\n            color: '#8c8c8c',\n            backgroundColor: '#fafafa',\n            borderRadius: '6px',\n            border: '1px dashed #d9d9d9',\n            marginTop: '8px',\n          }}\n        >\n          <Text type=\"secondary\">No field assignments configured</Text>\n          <br />\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            Click \"Add Assignment\" or \"Add All\" to get started\n          </Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TransformAssignmentCollection;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx",
        "start": 1,
        "end": 475,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 475,
          "column": 2,
          "position": 3758
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/transformassignmentcollection/TransformAssignmentCollection.tsx",
        "start": 6,
        "end": 480,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 480,
          "column": 2,
          "position": 3823
        }
      }
    },
    {
      "format": "javascript",
      "lines": 745,
      "fragment": "={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={property.placeholder || `Enter ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 2. Number Property Renderer\nexport const NumberRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const typeOptions = property.typeOptions?.numberOptions;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Input\n        type=\"number\"\n        value={value ?? ''}\n        onChange={(e) => onChange(e.target.value ? Number(e.target.value) : undefined)}\n        placeholder={property.placeholder}\n        disabled={disabled}\n        min={typeOptions?.minValue}\n        max={typeOptions?.maxValue}\n        step={typeOptions?.numberStepSize || 1}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 3. Boolean Property Renderer\nexport const BooleanRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <label className=\"text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <Switch checked={Boolean(value)} onChange={onChange} disabled={disabled} />\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 4. Options/Select Property Renderer\nexport const OptionsRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const options = property.options || [];\n  const typeOptions = property.typeOptions;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch={typeOptions?.searchable !== false}\n        allowClear={!property.required}\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 5. Multi-Options Property Renderer\nexport const MultiOptionsRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const options = property.options || [];\n  const currentValues = Array.isArray(value) ? value : [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        mode=\"multiple\"\n        value={currentValues}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 6. Text/TextArea Property Renderer\nexport const TextRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const typeOptions = property.typeOptions?.textAreaOptions;\n  const rows = typeOptions?.rows || 4;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea\n        value={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={property.placeholder || `Enter ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        rows={rows}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 7. DateTime Property Renderer\nexport const DateTimeRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <DatePicker\n        value={value ? new Date(value) : null}\n        onChange={(date) => onChange(date?.toISOString())}\n        showTime\n        placeholder={property.placeholder}\n        disabled={disabled}\n        className=\"w-full bg-gray-800 border-gray-600\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 8. Color Property Renderer\nexport const ColorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"color\"\n          value={value || '#000000'}\n          onChange={(e) => onChange(e.target.value)}\n          disabled={disabled}\n          className=\"w-12 h-8 rounded border-2 border-gray-600 cursor-pointer disabled:cursor-not-allowed\"\n        />\n        <Input\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"#000000\"\n          disabled={disabled}\n          className=\"flex-1 bg-gray-800 border-gray-600 text-gray-200\"\n        />\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 9. File Property Renderer\nexport const FileRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const handleUpload = (file: File) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onChange({\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        content: e.target?.result,\n      });\n    };\n    reader.readAsDataURL(file);\n    return false; // Prevent automatic upload\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Upload beforeUpload={handleUpload} maxCount={1} disabled={disabled} className=\"w-full\">\n        <Button\n          icon={<PlusOutlined />}\n          disabled={disabled}\n          className=\"w-full bg-gray-700 border-gray-600 text-gray-200 hover:bg-gray-600\"\n        >\n          {value ? 'Replace File' : 'Upload File'}\n        </Button>\n      </Upload>\n      {value && (\n        <div className=\"text-xs text-gray-400\">\n          Selected: {value.name} ({Math.round(value.size / 1024)}KB)\n        </div>\n      )}\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 10. JSON Property Renderer\nexport const JsonRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const [jsonString, setJsonString] = useState(() => {\n    try {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, 2);\n    } catch {\n      return value || '';\n    }\n  });\n\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = useCallback(\n    (newValue: string) => {\n      setJsonString(newValue);\n\n      try {\n        const parsed = JSON.parse(newValue);\n        setIsValid(true);\n        onChange(parsed);\n      } catch (_error) {\n        setIsValid(false);\n        // Still update the string value for live editing\n        onChange(newValue);\n      }\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <Tag color={isValid ? 'green' : 'red'}>{isValid ? 'Valid JSON' : 'Invalid JSON'}</Tag>\n      </div>\n      <TextArea\n        value={jsonString}\n        onChange={(e) => handleChange(e.target.value)}\n        placeholder={property.placeholder || 'Enter valid JSON'}\n        disabled={disabled}\n        rows={6}\n        className={cn(\n          'bg-gray-800 border-gray-600 text-gray-200 font-mono',\n          !isValid && 'border-red-500'\n        )}\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 11. Expression Property Renderer\nexport const ExpressionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  context,\n  disabled,\n}) => {\n  const [showExpressionMode, setShowExpressionMode] = useState(\n    ExpressionUtils.hasExpressions(value)\n  );\n\n  const evaluator = useMemo(() => (context ? new ExpressionEvaluator(context) : null), [context]);\n\n  const [previewValue, setPreviewValue] = useState<any>(null);\n\n  const handleEvaluatePreview = useCallback(() => {\n    if (evaluator && ExpressionUtils.hasExpressions(value)) {\n      try {\n        const result = evaluator.evaluate(value);\n        setPreviewValue(result);\n      } catch (error) {\n        if (error instanceof Error) {\n          setPreviewValue(`Error: ${error.message}`);\n        } else {\n          setPreviewValue(`Error: ${String(error)}`);\n        }\n      }\n    }\n  }, [evaluator, value]);\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            size=\"small\"\n            type={showExpressionMode ? 'primary' : 'default'}\n            onClick={() => setShowExpressionMode(!showExpressionMode)}\n            className=\"text-xs\"\n          >\n            {`{{}}`}\n          </Button>\n          {showExpressionMode && (\n            <Button\n              size=\"small\"\n              onClick={handleEvaluatePreview}\n              disabled={!context}\n              className=\"text-xs\"\n            >\n              Preview\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showExpressionMode ? (\n        <TextArea\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"{{ $json.field }}\"\n          disabled={disabled}\n          rows={3}\n          className=\"bg-gray-800 border-gray-600 text-gray-200 font-mono\"\n        />\n      ) : (\n        <Input\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder={property.placeholder}\n          disabled={disabled}\n          className=\"bg-gray-800 border-gray-600 text-gray-200\"\n        />\n      )}\n\n      {previewValue !== null && (\n        <div className=\"text-xs bg-gray-700 p-2 rounded border border-gray-600\">\n          <div className=\"text-gray-400 mb-1\">Preview:</div>\n          <div className=\"text-gray-200 font-mono\">\n            {typeof previewValue === 'object'\n              ? JSON.stringify(previewValue, null, 2)\n              : String(previewValue)}\n          </div>\n        </div>\n      )}\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 12. Resource Locator Property Renderer\nexport const ResourceLocatorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const [mode, setMode] = useState(value?.mode || 'list');\n  const currentValue = value || { mode: 'list', value: '' };\n\n  const handleModeChange = (newMode: string) => {\n    setMode(newMode);\n    onChange({ ...currentValue, mode: newMode, value: '' });\n  };\n\n  const handleValueChange = (newValue: any) => {\n    onChange({ ...currentValue, value: newValue });\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"flex space-x-2\">\n        <Select\n          value={mode}\n          onChange={handleModeChange}\n          disabled={disabled}\n          className=\"w-32 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        >\n          <Option value=\"list\">List</Option>\n          <Option value=\"id\">ID</Option>\n          <Option value=\"url\">URL</Option>\n        </Select>\n\n        {mode === 'list' ? (\n          <Select\n            value={currentValue.value}\n            onChange={handleValueChange}\n            placeholder=\"Select resource\"\n            disabled={disabled}\n            className=\"flex-1 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n            showSearch\n          >\n            {/* Dynamic options based on resource type */}\n            <Option value=\"resource1\">Resource 1</Option>\n            <Option value=\"resource2\">Resource 2</Option>\n          </Select>\n        ) : (\n          <Input\n            value={currentValue.value}\n            onChange={(e) => handleValueChange(e.target.value)}\n            placeholder={mode === 'id' ? 'Enter resource ID' : 'Enter resource URL'}\n            disabled={disabled}\n            className=\"flex-1 bg-gray-800 border-gray-600 text-gray-200\"\n          />\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 13. Assignment Collection Property Renderer\nexport const AssignmentCollectionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n}) => {\n  const assignments = value?.values || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      {/* Import the AdvancedAssignmentCollection component we created */}\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"text-sm text-gray-400 mb-2\">\n          Assignment collection component would be rendered here\n        </div>\n        <div className=\"text-xs text-gray-500\">Current assignments: {assignments.length}</div>\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 14. Resource Mapper Property Renderer\nexport const ResourceMapperRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  disabled,\n}) => {\n  const mappings = value?.mappings || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Field Mappings</div>\n          <Button\n            size=\"small\"\n            icon={<PlusOutlined />}\n            disabled={disabled}\n            className=\"bg-gray-700 border-gray-600 text-gray-200\"\n          >\n            Add Mapping\n          </Button>\n        </div>\n\n        {mappings.length === 0 ? (\n          <div className=\"text-center py-4 text-gray-400\">No field mappings configured</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {mappings.map((mapping: any, index: number) => (\n              <div key={index} className=\"flex items-center space-x-2 p-2 bg-gray-700 rounded\">\n                <Input\n                  placeholder=\"Source field\"\n                  value={mapping.source}\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <div className=\"text-gray-400\">→</div>\n                <Input\n                  placeholder=\"Target field\"\n                  value={mapping.target}\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 15. Filter Property Renderer\nexport const FilterRenderer: React.FC<PropertyRendererProps> = ({ property, value, disabled }) => {\n  const conditions = value?.conditions || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Filter Conditions</div>\n          <Button\n            size=\"small\"\n            icon={<FilterOutlined />}\n            disabled={disabled}\n            className=\"bg-gray-700 border-gray-600 text-gray-200\"\n          >\n            Add Condition\n          </Button>\n        </div>\n\n        {conditions.length === 0 ? (\n          <div className=\"text-center py-4 text-gray-400\">No filter conditions set</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {conditions.map((condition: any, index: number) => (\n              <div key={index} className=\"flex items-center space-x-2 p-2 bg-gray-700 rounded\">\n                <Select value={condition.field} className=\"w-32\">\n                  <Option value=\"field1\">Field 1</Option>\n                  <Option value=\"field2\">Field 2</Option>\n                </Select>\n                <Select value={condition.operator} className=\"w-24\">\n                  <Option value=\"equals\">Equals</Option>\n                  <Option value=\"contains\">Contains</Option>\n                  <Option value=\"gt\">Greater than</Option>\n                </Select>\n                <Input\n                  value={condition.value}\n                  placeholder=\"Value\"\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 16-22. Additional Complex Property Renderers\nexport const CurlImportRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea\n        value={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder=\"curl -X GET https://api.example.com/data\"\n        rows={4}\n        disabled={disabled}\n        className=\"bg-gray-800 border-gray-600 text-gray-200 font-mono\"\n      />\n      <Button size=\"small\" disabled={!value || disabled}>\n        Import from cURL\n      </Button>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const WorkflowSelectorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select workflow\"\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n      >\n        <Option value=\"workflow1\">Sample Workflow 1</Option>\n        <Option value=\"workflow2\">Sample Workflow 2</Option>\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const NodeSelectorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select node\"\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n      >\n        <Option value=\"node1\">Transform Node</Option>\n        <Option value=\"node2\">HTTP Request Node</Option>\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const CredentialsSelectRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex space-x-2\">\n        <Select\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select credentials\"\n          disabled={disabled}\n          className=\"flex-1 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n          showSearch\n        >\n          <Option value=\"cred1\">API Key Credentials</Option>\n          <Option value=\"cred2\">OAuth2 Credentials</Option>\n        </Select>\n        <Button\n          size=\"small\"\n          icon={<PlusOutlined />}\n          disabled={disabled}\n          className=\"bg-gray-700 border-gray-600 text-gray-200\"\n        >\n          New\n        </Button>\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const HiddenRenderer: React.FC<PropertyRendererProps> = () => null;\n\n// Additional utility renderers for complex types\nexport const CollectionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  disabled,\n}) => {\n  const items = Array.isArray(value) ? value : [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Collapse>\n        <Panel header={`${items.length} items configured`} key=\"1\">\n          <div className=\"space-y-2\">\n            {items.map((_item: any, index: number) => (\n              <div key={index} className=\"p-2 bg-gray-700 rounded\">\n                <div className=\"text-sm text-gray-200\">Item {index + 1}</div>\n                {/* Render collection item properties */}\n              </div>\n            ))}\n            <Button\n              size=\"small\"\n              icon={<PlusOutlined />}\n              disabled={disabled}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 72,
        "end": 816,
        "startLoc": {
          "line": 72,
          "column": 6,
          "position": 563
        },
        "endLoc": {
          "line": 816,
          "column": 2,
          "position": 6774
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 75,
        "end": 819,
        "startLoc": {
          "line": 75,
          "column": 6,
          "position": 602
        },
        "endLoc": {
          "line": 819,
          "column": 2,
          "position": 6813
        }
      }
    },
    {
      "format": "tsx",
      "lines": 882,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Complete Property Renderers for all 22 n8n Property Types\n * Comprehensive implementation matching n8n's exact functionality\n */\n\nimport { DeleteOutlined, FilterOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Collapse, DatePicker, Input, Select, Switch, Tag, Upload } from 'antd';\nimport type React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\n// Simplified version without drag-and-drop for now\n// TODO: Add back @dnd-kit when needed for advanced assignment collection\nimport type { INodePropertyTypeOptions, NodePropertyType } from '@/core/nodes/types';\n\n// Define interfaces locally to avoid circular imports\n\nimport {\n  type IExpressionContext as CoreExpressionContext,\n  ExpressionEvaluator,\n  ExpressionUtils,\n} from '@/core/utils/expressionEvaluator';\nimport { cn } from '@/design-system/utils';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\n\n// Property Renderer Props Interface\nexport interface PropertyRendererProps {\n  property: {\n    displayName: string;\n    name: string;\n    type: NodePropertyType;\n    description?: string;\n    placeholder?: string;\n    default?: any;\n    required?: boolean;\n    options?: Array<{\n      name: string;\n      value?: string | number | boolean | undefined;\n      description?: string;\n    }>;\n    typeOptions?: INodePropertyTypeOptions;\n    displayOptions?: {\n      show?: Record<string, any[]>;\n      hide?: Record<string, any[]>;\n    };\n  };\n  value: any;\n  onChange: (value: any) => void;\n  context?: CoreExpressionContext;\n  disabled?: boolean;\n  nodeValues?: Record<string, any>;\n}\n\n// 1. String Property Renderer\nexport const StringRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const isExpression = ExpressionUtils.hasExpressions(value);\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n        {isExpression && <Tag color=\"blue\">Expression</Tag>}\n      </div>\n      <Input\n        value={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={property.placeholder || `Enter ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 2. Number Property Renderer\nexport const NumberRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const typeOptions = property.typeOptions?.numberOptions;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Input\n        type=\"number\"\n        value={value ?? ''}\n        onChange={(e) => onChange(e.target.value ? Number(e.target.value) : undefined)}\n        placeholder={property.placeholder}\n        disabled={disabled}\n        min={typeOptions?.minValue}\n        max={typeOptions?.maxValue}\n        step={typeOptions?.numberStepSize || 1}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 3. Boolean Property Renderer\nexport const BooleanRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <label className=\"text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <Switch checked={Boolean(value)} onChange={onChange} disabled={disabled} />\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 4. Options/Select Property Renderer\nexport const OptionsRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const options = property.options || [];\n  const typeOptions = property.typeOptions;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch={typeOptions?.searchable !== false}\n        allowClear={!property.required}\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 5. Multi-Options Property Renderer\nexport const MultiOptionsRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const options = property.options || [];\n  const currentValues = Array.isArray(value) ? value : [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        mode=\"multiple\"\n        value={currentValues}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 6. Text/TextArea Property Renderer\nexport const TextRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const typeOptions = property.typeOptions?.textAreaOptions;\n  const rows = typeOptions?.rows || 4;\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea\n        value={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={property.placeholder || `Enter ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        rows={rows}\n        className=\"bg-gray-800 border-gray-600 text-gray-200\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 7. DateTime Property Renderer\nexport const DateTimeRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <DatePicker\n        value={value ? new Date(value) : null}\n        onChange={(date) => onChange(date?.toISOString())}\n        showTime\n        placeholder={property.placeholder}\n        disabled={disabled}\n        className=\"w-full bg-gray-800 border-gray-600\"\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 8. Color Property Renderer\nexport const ColorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"color\"\n          value={value || '#000000'}\n          onChange={(e) => onChange(e.target.value)}\n          disabled={disabled}\n          className=\"w-12 h-8 rounded border-2 border-gray-600 cursor-pointer disabled:cursor-not-allowed\"\n        />\n        <Input\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"#000000\"\n          disabled={disabled}\n          className=\"flex-1 bg-gray-800 border-gray-600 text-gray-200\"\n        />\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 9. File Property Renderer\nexport const FileRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const handleUpload = (file: File) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onChange({\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        content: e.target?.result,\n      });\n    };\n    reader.readAsDataURL(file);\n    return false; // Prevent automatic upload\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Upload beforeUpload={handleUpload} maxCount={1} disabled={disabled} className=\"w-full\">\n        <Button\n          icon={<PlusOutlined />}\n          disabled={disabled}\n          className=\"w-full bg-gray-700 border-gray-600 text-gray-200 hover:bg-gray-600\"\n        >\n          {value ? 'Replace File' : 'Upload File'}\n        </Button>\n      </Upload>\n      {value && (\n        <div className=\"text-xs text-gray-400\">\n          Selected: {value.name} ({Math.round(value.size / 1024)}KB)\n        </div>\n      )}\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 10. JSON Property Renderer\nexport const JsonRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const [jsonString, setJsonString] = useState(() => {\n    try {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, 2);\n    } catch {\n      return value || '';\n    }\n  });\n\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = useCallback(\n    (newValue: string) => {\n      setJsonString(newValue);\n\n      try {\n        const parsed = JSON.parse(newValue);\n        setIsValid(true);\n        onChange(parsed);\n      } catch (_error) {\n        setIsValid(false);\n        // Still update the string value for live editing\n        onChange(newValue);\n      }\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <Tag color={isValid ? 'green' : 'red'}>{isValid ? 'Valid JSON' : 'Invalid JSON'}</Tag>\n      </div>\n      <TextArea\n        value={jsonString}\n        onChange={(e) => handleChange(e.target.value)}\n        placeholder={property.placeholder || 'Enter valid JSON'}\n        disabled={disabled}\n        rows={6}\n        className={cn(\n          'bg-gray-800 border-gray-600 text-gray-200 font-mono',\n          !isValid && 'border-red-500'\n        )}\n      />\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 11. Expression Property Renderer\nexport const ExpressionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  context,\n  disabled,\n}) => {\n  const [showExpressionMode, setShowExpressionMode] = useState(\n    ExpressionUtils.hasExpressions(value)\n  );\n\n  const evaluator = useMemo(() => (context ? new ExpressionEvaluator(context) : null), [context]);\n\n  const [previewValue, setPreviewValue] = useState<any>(null);\n\n  const handleEvaluatePreview = useCallback(() => {\n    if (evaluator && ExpressionUtils.hasExpressions(value)) {\n      try {\n        const result = evaluator.evaluate(value);\n        setPreviewValue(result);\n      } catch (error) {\n        if (error instanceof Error) {\n          setPreviewValue(`Error: ${error.message}`);\n        } else {\n          setPreviewValue(`Error: ${String(error)}`);\n        }\n      }\n    }\n  }, [evaluator, value]);\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            size=\"small\"\n            type={showExpressionMode ? 'primary' : 'default'}\n            onClick={() => setShowExpressionMode(!showExpressionMode)}\n            className=\"text-xs\"\n          >\n            {`{{}}`}\n          </Button>\n          {showExpressionMode && (\n            <Button\n              size=\"small\"\n              onClick={handleEvaluatePreview}\n              disabled={!context}\n              className=\"text-xs\"\n            >\n              Preview\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showExpressionMode ? (\n        <TextArea\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"{{ $json.field }}\"\n          disabled={disabled}\n          rows={3}\n          className=\"bg-gray-800 border-gray-600 text-gray-200 font-mono\"\n        />\n      ) : (\n        <Input\n          value={value || ''}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder={property.placeholder}\n          disabled={disabled}\n          className=\"bg-gray-800 border-gray-600 text-gray-200\"\n        />\n      )}\n\n      {previewValue !== null && (\n        <div className=\"text-xs bg-gray-700 p-2 rounded border border-gray-600\">\n          <div className=\"text-gray-400 mb-1\">Preview:</div>\n          <div className=\"text-gray-200 font-mono\">\n            {typeof previewValue === 'object'\n              ? JSON.stringify(previewValue, null, 2)\n              : String(previewValue)}\n          </div>\n        </div>\n      )}\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 12. Resource Locator Property Renderer\nexport const ResourceLocatorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  const [mode, setMode] = useState(value?.mode || 'list');\n  const currentValue = value || { mode: 'list', value: '' };\n\n  const handleModeChange = (newMode: string) => {\n    setMode(newMode);\n    onChange({ ...currentValue, mode: newMode, value: '' });\n  };\n\n  const handleValueChange = (newValue: any) => {\n    onChange({ ...currentValue, value: newValue });\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"flex space-x-2\">\n        <Select\n          value={mode}\n          onChange={handleModeChange}\n          disabled={disabled}\n          className=\"w-32 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        >\n          <Option value=\"list\">List</Option>\n          <Option value=\"id\">ID</Option>\n          <Option value=\"url\">URL</Option>\n        </Select>\n\n        {mode === 'list' ? (\n          <Select\n            value={currentValue.value}\n            onChange={handleValueChange}\n            placeholder=\"Select resource\"\n            disabled={disabled}\n            className=\"flex-1 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n            showSearch\n          >\n            {/* Dynamic options based on resource type */}\n            <Option value=\"resource1\">Resource 1</Option>\n            <Option value=\"resource2\">Resource 2</Option>\n          </Select>\n        ) : (\n          <Input\n            value={currentValue.value}\n            onChange={(e) => handleValueChange(e.target.value)}\n            placeholder={mode === 'id' ? 'Enter resource ID' : 'Enter resource URL'}\n            disabled={disabled}\n            className=\"flex-1 bg-gray-800 border-gray-600 text-gray-200\"\n          />\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 13. Assignment Collection Property Renderer\nexport const AssignmentCollectionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n}) => {\n  const assignments = value?.values || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      {/* Import the AdvancedAssignmentCollection component we created */}\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"text-sm text-gray-400 mb-2\">\n          Assignment collection component would be rendered here\n        </div>\n        <div className=\"text-xs text-gray-500\">Current assignments: {assignments.length}</div>\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 14. Resource Mapper Property Renderer\nexport const ResourceMapperRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  disabled,\n}) => {\n  const mappings = value?.mappings || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Field Mappings</div>\n          <Button\n            size=\"small\"\n            icon={<PlusOutlined />}\n            disabled={disabled}\n            className=\"bg-gray-700 border-gray-600 text-gray-200\"\n          >\n            Add Mapping\n          </Button>\n        </div>\n\n        {mappings.length === 0 ? (\n          <div className=\"text-center py-4 text-gray-400\">No field mappings configured</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {mappings.map((mapping: any, index: number) => (\n              <div key={index} className=\"flex items-center space-x-2 p-2 bg-gray-700 rounded\">\n                <Input\n                  placeholder=\"Source field\"\n                  value={mapping.source}\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <div className=\"text-gray-400\">→</div>\n                <Input\n                  placeholder=\"Target field\"\n                  value={mapping.target}\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 15. Filter Property Renderer\nexport const FilterRenderer: React.FC<PropertyRendererProps> = ({ property, value, disabled }) => {\n  const conditions = value?.conditions || [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Filter Conditions</div>\n          <Button\n            size=\"small\"\n            icon={<FilterOutlined />}\n            disabled={disabled}\n            className=\"bg-gray-700 border-gray-600 text-gray-200\"\n          >\n            Add Condition\n          </Button>\n        </div>\n\n        {conditions.length === 0 ? (\n          <div className=\"text-center py-4 text-gray-400\">No filter conditions set</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {conditions.map((condition: any, index: number) => (\n              <div key={index} className=\"flex items-center space-x-2 p-2 bg-gray-700 rounded\">\n                <Select value={condition.field} className=\"w-32\">\n                  <Option value=\"field1\">Field 1</Option>\n                  <Option value=\"field2\">Field 2</Option>\n                </Select>\n                <Select value={condition.operator} className=\"w-24\">\n                  <Option value=\"equals\">Equals</Option>\n                  <Option value=\"contains\">Contains</Option>\n                  <Option value=\"gt\">Greater than</Option>\n                </Select>\n                <Input\n                  value={condition.value}\n                  placeholder=\"Value\"\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 16-22. Additional Complex Property Renderers\nexport const CurlImportRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea\n        value={value || ''}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder=\"curl -X GET https://api.example.com/data\"\n        rows={4}\n        disabled={disabled}\n        className=\"bg-gray-800 border-gray-600 text-gray-200 font-mono\"\n      />\n      <Button size=\"small\" disabled={!value || disabled}>\n        Import from cURL\n      </Button>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const WorkflowSelectorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select workflow\"\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n      >\n        <Option value=\"workflow1\">Sample Workflow 1</Option>\n        <Option value=\"workflow2\">Sample Workflow 2</Option>\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const NodeSelectorRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select node\"\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n      >\n        <Option value=\"node1\">Transform Node</Option>\n        <Option value=\"node2\">HTTP Request Node</Option>\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const CredentialsSelectRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex space-x-2\">\n        <Select\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select credentials\"\n          disabled={disabled}\n          className=\"flex-1 [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n          showSearch\n        >\n          <Option value=\"cred1\">API Key Credentials</Option>\n          <Option value=\"cred2\">OAuth2 Credentials</Option>\n        </Select>\n        <Button\n          size=\"small\"\n          icon={<PlusOutlined />}\n          disabled={disabled}\n          className=\"bg-gray-700 border-gray-600 text-gray-200\"\n        >\n          New\n        </Button>\n      </div>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\nexport const HiddenRenderer: React.FC<PropertyRendererProps> = () => null;\n\n// Additional utility renderers for complex types\nexport const CollectionRenderer: React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  disabled,\n}) => {\n  const items = Array.isArray(value) ? value : [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Collapse>\n        <Panel header={`${items.length} items configured`} key=\"1\">\n          <div className=\"space-y-2\">\n            {items.map((_item: any, index: number) => (\n              <div key={index} className=\"p-2 bg-gray-700 rounded\">\n                <div className=\"text-sm text-gray-200\">Item {index + 1}</div>\n                {/* Render collection item properties */}\n              </div>\n            ))}\n            <Button\n              size=\"small\"\n              icon={<PlusOutlined />}\n              disabled={disabled}\n              className=\"bg-gray-700 border-gray-600 text-gray-200\"\n            >\n              Add Item\n            </Button>\n          </div>\n        </Panel>\n      </Collapse>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// Master Property Renderer Component\nexport const PropertyRenderer: React.FC<PropertyRendererProps> = (props) => {\n  const { property } = props;\n\n  switch (property.type) {\n    case 'string':\n      return <StringRenderer {...props} />;\n    case 'number':\n      return <NumberRenderer {...props} />;\n    case 'boolean':\n      return <BooleanRenderer {...props} />;\n    case 'options':\n    case 'select':\n      return <OptionsRenderer {...props} />;\n    case 'multiOptions':\n    case 'multiSelect':\n      return <MultiOptionsRenderer {...props} />;\n    case 'text':\n      return <TextRenderer {...props} />;\n    case 'dateTime':\n      return <DateTimeRenderer {...props} />;\n    case 'color':\n      return <ColorRenderer {...props} />;\n    case 'file':\n      return <FileRenderer {...props} />;\n    case 'json':\n      return <JsonRenderer {...props} />;\n    case 'expression':\n      return <ExpressionRenderer {...props} />;\n    case 'resourceLocator':\n      return <ResourceLocatorRenderer {...props} />;\n    case 'assignmentCollection':\n      return <AssignmentCollectionRenderer {...props} />;\n    case 'resourceMapper':\n      return <ResourceMapperRenderer {...props} />;\n    case 'filter':\n      return <FilterRenderer {...props} />;\n    case 'curlImport':\n      return <CurlImportRenderer {...props} />;\n    case 'workflowSelector':\n      return <WorkflowSelectorRenderer {...props} />;\n    case 'credentialsSelect':\n      return <CredentialsSelectRenderer {...props} />;\n    case 'hidden':\n      return <HiddenRenderer {...props} />;\n    case 'collection':\n    case 'fixedCollection':\n      return <CollectionRenderer {...props} />;\n    default:\n      return <StringRenderer {...props} />;\n  }\n};\n\nexport default PropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 1,
        "end": 882,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 882,
          "column": 2,
          "position": 7349
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyrenderers/PropertyRenderers.tsx",
        "start": 4,
        "end": 885,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 885,
          "column": 2,
          "position": 7388
        }
      }
    },
    {
      "format": "javascript",
      "lines": 341,
      "fragment": "={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String(cred.value)} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx",
        "start": 108,
        "end": 448,
        "startLoc": {
          "line": 108,
          "column": 6,
          "position": 889
        },
        "endLoc": {
          "line": 448,
          "column": 2,
          "position": 3314
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/propertyfield/PropertyField.tsx",
        "start": 109,
        "end": 451,
        "startLoc": {
          "line": 109,
          "column": 6,
          "position": 925
        },
        "endLoc": {
          "line": 451,
          "column": 2,
          "position": 3353
        }
      }
    },
    {
      "format": "tsx",
      "lines": 456,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * PropertyField Component\n * Dynamic form field renderer for node properties with advanced features\n */\n\nimport {\n  EyeInvisibleOutlined,\n  EyeOutlined,\n  InfoCircleOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useNodeTheme } from '../themes';\nimport type { NodeTheme } from '../types';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: NodeTheme;\n  context?: Record<string, any>;\n  errors?: string[];\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme: propTheme,\n\n  errors = [],\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [internalValue, setInternalValue] = useState(value);\n  const [showPassword, setShowPassword] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const handleChange = (newValue: any) => {\n    setInternalValue(newValue);\n\n    // Validate the new value\n    const error = validateValue(newValue);\n    setValidationError(error);\n\n    // Only call onChange if validation passes\n    if (!error) {\n      onChange(newValue);\n    }\n  };\n\n  const validateValue = (val: any): string | null => {\n    if (property.required && (val === undefined || val === null || val === '')) {\n      return `${property.displayName} is required`;\n    }\n\n    if (property.type === 'string' || property.type === 'text') {\n      if (property.typeOptions?.minValue && val.length < property.typeOptions.minValue) {\n        return `${property.displayName} must be at least ${property.typeOptions.minValue} characters`;\n      }\n      if (property.typeOptions?.maxValue && val.length > property.typeOptions.maxValue) {\n        return `${property.displayName} must be no more than ${property.typeOptions.maxValue} characters`;\n      }\n    }\n\n    if (property.type === 'number') {\n      if (property.min !== undefined && val < property.min) {\n        return `${property.displayName} must be at least ${property.min}`;\n      }\n      if (property.max !== undefined && val > property.max) {\n        return `${property.displayName} must be no more than ${property.max}`;\n      }\n    }\n\n    return null;\n  };\n\n  const renderLabel = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String(cred.value)} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}>\n      {renderLabel()}\n      {renderField()}\n      {renderError()}\n    </div>\n  );\n};\n\nexport default PropertyField;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx",
        "start": 1,
        "end": 456,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 456,
          "column": 2,
          "position": 3356
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/propertyfield/PropertyField.tsx",
        "start": 4,
        "end": 457,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 457,
          "column": 2,
          "position": 3389
        }
      }
    },
    {
      "format": "javascript",
      "lines": 58,
      "fragment": "={handle.type}\n      position={getPositionValue()}\n      id={handle.id}\n      style={getHandleStyles()}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleConnection}\n    />\n  );\n\n  if (showTooltip && handle.label) {\n    return (\n      <Tooltip\n        title={handle.label}\n        placement={handle.position === 'left' ? 'left' : 'right'}\n        mouseEnterDelay={0.5}\n      >\n        {renderHandle()}\n      </Tooltip>\n    );\n  }\n\n  return renderHandle();\n};\n\n/**\n * NodeHandleGroup Component\n * Manages multiple handles for a single node\n */\ninterface NodeHandleGroupProps {\n  handles: CustomHandle[];\n  nodeId: string;\n  theme?: NodeTheme;\n  connections?: Record<string, boolean>;\n  onConnect?: (handleId: string, nodeId: string) => void;\n  onDisconnect?: (handleId: string, nodeId: string) => void;\n}\n\nexport const NodeHandleGroup: React.FC<NodeHandleGroupProps> = ({\n  handles,\n  nodeId,\n  theme,\n  connections = {},\n  onConnect,\n  onDisconnect,\n}) => {\n  if (!handles || handles.length === 0) return null;\n\n  return (\n    <>\n      {handles.map((handle) => (\n        <NodeHandleComponent\n          key={handle.id}\n          handle={handle}\n          theme={theme}\n          connected={connections[handle.id] || false}\n          onConnect={onConnect ? (handleId) => onConnect(handleId, nodeId) : undefined}\n          onDisconnect={onDisconnect ? (handleId) => onDisconnect(handleId, nodeId) : undefined}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx",
        "start": 116,
        "end": 173,
        "startLoc": {
          "line": 116,
          "column": 5,
          "position": 904
        },
        "endLoc": {
          "line": 173,
          "column": 2,
          "position": 1331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodehandle/NodeHandle.tsx",
        "start": 121,
        "end": 178,
        "startLoc": {
          "line": 121,
          "column": 5,
          "position": 969
        },
        "endLoc": {
          "line": 178,
          "column": 2,
          "position": 1396
        }
      }
    },
    {
      "format": "tsx",
      "lines": 283,
      "fragment": "/**\n * NodeHandle Component\n * Advanced handle system with custom styling and interactive features\n */\n\nimport { Tooltip } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { useNodeTheme } from '../themes';\nimport type { CustomHandle, HandleStyle, NodeTheme } from '../types';\n\ninterface NodeHandleProps {\n  handle: CustomHandle;\n  theme?: NodeTheme;\n  connected?: boolean;\n  onConnect?: (handleId: string) => void;\n  onDisconnect?: (handleId: string) => void;\n  showTooltip?: boolean;\n}\n\nconst NodeHandleComponent: React.FC<NodeHandleProps> = ({\n  handle,\n  theme: propTheme,\n  connected = false,\n  onConnect,\n  onDisconnect,\n  showTooltip = true,\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [isHovered, setIsHovered] = useState(false);\n\n  const getHandleStyles = (): React.CSSProperties => {\n    const baseSize = handle.size || 10;\n    const size = isHovered ? baseSize * 1.2 : baseSize;\n\n    const baseStyles: React.CSSProperties = {\n      width: size,\n      height: size,\n      background: handle.color || theme.colors.border,\n      border: `2px solid ${connected ? theme.colors.success : 'transparent'}`,\n      transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeOut}`,\n      boxShadow: connected\n        ? `0 0 0 2px ${theme.colors.success}40`\n        : isHovered\n          ? theme.shadows.md\n          : 'none',\n    };\n\n    // Apply shape-specific styles\n    switch (handle.style) {\n      case 'circle':\n        return {\n          ...baseStyles,\n          borderRadius: theme.borderRadius.full,\n        };\n      case 'square':\n        return {\n          ...baseStyles,\n          borderRadius: '2px',\n        };\n      case 'diamond':\n        return {\n          ...baseStyles,\n          borderRadius: '2px',\n          transform: `rotate(45deg) scale(${isHovered ? 1.2 : 1})`,\n        };\n      case 'triangle':\n        return {\n          ...baseStyles,\n          borderRadius: '2px',\n          clipPath: 'polygon(50% 0%, 0% 100%, 100% 100%)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          borderRadius: theme.borderRadius.full,\n        };\n    }\n  };\n\n  const getPositionValue = (): Position => {\n    switch (handle.position) {\n      case 'top':\n        return Position.Top;\n      case 'right':\n        return Position.Right;\n      case 'bottom':\n        return Position.Bottom;\n      case 'left':\n        return Position.Left;\n      default:\n        return Position.Left;\n    }\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  const handleConnection = () => {\n    if (connected && onDisconnect) {\n      onDisconnect(handle.id);\n    } else if (!connected && onConnect) {\n      onConnect(handle.id);\n    }\n  };\n\n  const renderHandle = () => (\n    <Handle\n      type={handle.type}\n      position={getPositionValue()}\n      id={handle.id}\n      style={getHandleStyles()}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleConnection}\n    />\n  );\n\n  if (showTooltip && handle.label) {\n    return (\n      <Tooltip\n        title={handle.label}\n        placement={handle.position === 'left' ? 'left' : 'right'}\n        mouseEnterDelay={0.5}\n      >\n        {renderHandle()}\n      </Tooltip>\n    );\n  }\n\n  return renderHandle();\n};\n\n/**\n * NodeHandleGroup Component\n * Manages multiple handles for a single node\n */\ninterface NodeHandleGroupProps {\n  handles: CustomHandle[];\n  nodeId: string;\n  theme?: NodeTheme;\n  connections?: Record<string, boolean>;\n  onConnect?: (handleId: string, nodeId: string) => void;\n  onDisconnect?: (handleId: string, nodeId: string) => void;\n}\n\nexport const NodeHandleGroup: React.FC<NodeHandleGroupProps> = ({\n  handles,\n  nodeId,\n  theme,\n  connections = {},\n  onConnect,\n  onDisconnect,\n}) => {\n  if (!handles || handles.length === 0) return null;\n\n  return (\n    <>\n      {handles.map((handle) => (\n        <NodeHandleComponent\n          key={handle.id}\n          handle={handle}\n          theme={theme}\n          connected={connections[handle.id] || false}\n          onConnect={onConnect ? (handleId) => onConnect(handleId, nodeId) : undefined}\n          onDisconnect={onDisconnect ? (handleId) => onDisconnect(handleId, nodeId) : undefined}\n        />\n      ))}\n    </>\n  );\n};\n\n/**\n * Predefined Handle Creators\n */\nexport const createInputHandle = (\n  id: string = 'input',\n  style: HandleStyle = 'circle',\n  color?: string\n): CustomHandle => ({\n  id,\n  type: 'target',\n  position: 'left',\n  style,\n  color: color || '#666666',\n  size: 10,\n});\n\nexport const createOutputHandle = (\n  id: string = 'output',\n  style: HandleStyle = 'circle',\n  color?: string\n): CustomHandle => ({\n  id,\n  type: 'source',\n  position: 'right',\n  style,\n  color: color || '#666666',\n  size: 10,\n});\n\nexport const createAIHandle = (\n  type: 'ai_languageModel' | 'ai_memory' | 'ai_tool' | 'ai_vectorStore',\n  position: 'top' | 'right' | 'bottom' | 'left' = 'top'\n): CustomHandle => {\n  const colors = {\n    ai_languageModel: '#8b5cf6',\n    ai_memory: '#06b6d4',\n    ai_tool: '#10b981',\n    ai_vectorStore: '#f59e0b',\n  };\n\n  const labels = {\n    ai_languageModel: 'Language Model',\n    ai_memory: 'Memory',\n    ai_tool: 'Tool',\n    ai_vectorStore: 'Vector Store',\n  };\n\n  return {\n    id: type,\n    type: 'target',\n    position,\n    style: 'diamond',\n    color: colors[type],\n    size: 8,\n    label: labels[type],\n  };\n};\n\nexport const createConditionHandle = (\n  condition: string,\n  index: number,\n  color?: string\n): CustomHandle => {\n  const conditionColors = {\n    true: '#52c41a',\n    false: '#ff4d4f',\n    default: '#8c8c8c',\n  };\n\n  return {\n    id: `condition_${index}`,\n    type: 'source',\n    position: 'right',\n    style: 'circle',\n    color:\n      color ||\n      conditionColors[condition as keyof typeof conditionColors] ||\n      conditionColors.default,\n    size: 8,\n    label: condition,\n  };\n};\n\nexport const createWebhookHandle = (): CustomHandle => ({\n  id: 'webhook',\n  type: 'target',\n  position: 'left',\n  style: 'square',\n  color: '#722ed1',\n  size: 12,\n  label: 'Webhook',\n});\n\nexport const createTriggerHandle = (): CustomHandle => ({\n  id: 'trigger',\n  type: 'source',\n  position: 'right',\n  style: 'triangle',\n  color: '#1890ff',\n  size: 10,\n  label: 'Trigger',\n});\n\nexport default NodeHandleComponent;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx",
        "start": 1,
        "end": 283,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 283,
          "column": 2,
          "position": 2068
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodehandle/NodeHandle.tsx",
        "start": 6,
        "end": 288,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 288,
          "column": 2,
          "position": 2133
        }
      }
    },
    {
      "format": "javascript",
      "lines": 35,
      "fragment": "={badgeStyle}>\n        {badge.icon && <span style={{ marginRight: badge.text ? '2px' : '0' }}>{badge.icon}</span>}\n        {badge.text && <span>{badge.text}</span>}\n      </div>\n    </div>\n  );\n};\n\n/**\n * NodeBadgeGroup Component\n * Manages multiple badges for a single node\n */\ninterface NodeBadgeGroupProps {\n  badges: NodeBadge[];\n  nodeId: string;\n  theme?: NodeTheme;\n  onBadgeClick?: (badgeId: string, nodeId: string) => void;\n}\n\nexport const NodeBadgeGroup: React.FC<NodeBadgeGroupProps> = ({\n  badges,\n  nodeId,\n  theme,\n  onBadgeClick,\n}) => {\n  if (!badges || badges.length === 0) return null;\n\n  return (\n    <>\n      {badges.map((badge) => (\n        <NodeBadgeComponent\n          key={badge.id}\n          badge={badge}\n          theme={theme}\n          onClick={onBadgeClick ? (badgeId) => onBadgeClick(badgeId, nodeId) : undefined}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx",
        "start": 98,
        "end": 132,
        "startLoc": {
          "line": 98,
          "column": 6,
          "position": 868
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 1146
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodebadge/NodeBadge.tsx",
        "start": 102,
        "end": 136,
        "startLoc": {
          "line": 102,
          "column": 6,
          "position": 920
        },
        "endLoc": {
          "line": 136,
          "column": 2,
          "position": 1198
        }
      }
    },
    {
      "format": "tsx",
      "lines": 204,
      "fragment": "/**\n * NodeBadge Component\n * Reusable badge component for displaying status, counts, and indicators on nodes\n */\n\nimport type React from 'react';\nimport { useNodeTheme } from '../themes';\nimport type { BadgePosition, NodeBadge, NodeTheme } from '../types';\n\ninterface NodeBadgeProps {\n  badge: NodeBadge;\n  theme?: NodeTheme;\n  visible?: boolean;\n  onClick?: (badgeId: string) => void;\n}\n\nconst NodeBadgeComponent: React.FC<NodeBadgeProps> = ({\n  badge,\n  theme: propTheme,\n  visible = true,\n  onClick,\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n\n  if (!visible) return null;\n\n  const getPositionStyles = (position: BadgePosition): React.CSSProperties => {\n    const baseStyles: React.CSSProperties = {\n      position: 'absolute',\n      zIndex: 10,\n    };\n\n    switch (position) {\n      case 'top-left':\n        return { ...baseStyles, top: '-6px', left: '-6px' };\n      case 'top-right':\n        return { ...baseStyles, top: '-6px', right: '-6px' };\n      case 'bottom-left':\n        return { ...baseStyles, bottom: '-6px', left: '-6px' };\n      case 'bottom-right':\n        return { ...baseStyles, bottom: '-6px', right: '-6px' };\n      default:\n        return { ...baseStyles, top: '-6px', right: '-6px' };\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onClick) {\n      onClick(badge.id);\n    }\n  };\n\n  const badgeStyle: React.CSSProperties = {\n    backgroundColor: badge.backgroundColor || theme.colors.primary,\n    color: badge.color || theme.colors.background,\n    fontSize: theme.typography.fontSize.xs,\n    fontWeight: theme.typography.fontWeight.medium,\n    borderRadius: theme.borderRadius.sm,\n    padding: '2px 6px',\n    minWidth: '18px',\n    height: '18px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: onClick ? 'pointer' : 'default',\n    boxShadow: theme.shadows.sm,\n    transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeInOut}`,\n    transform: 'scale(1)',\n  };\n\n  const hoverStyles: React.CSSProperties = onClick\n    ? {\n        transform: 'scale(1.1)',\n        boxShadow: theme.shadows.md,\n      }\n    : {};\n\n  return (\n    <div\n      style={getPositionStyles(badge.position)}\n      onClick={onClick ? handleClick : undefined}\n      onMouseEnter={(e) => {\n        if (onClick) {\n          Object.assign((e.target as HTMLElement).style, hoverStyles);\n        }\n      }}\n      onMouseLeave={(e) => {\n        if (onClick) {\n          Object.assign((e.target as HTMLElement).style, {\n            transform: 'scale(1)',\n            boxShadow: theme.shadows.sm,\n          });\n        }\n      }}\n    >\n      <div style={badgeStyle}>\n        {badge.icon && <span style={{ marginRight: badge.text ? '2px' : '0' }}>{badge.icon}</span>}\n        {badge.text && <span>{badge.text}</span>}\n      </div>\n    </div>\n  );\n};\n\n/**\n * NodeBadgeGroup Component\n * Manages multiple badges for a single node\n */\ninterface NodeBadgeGroupProps {\n  badges: NodeBadge[];\n  nodeId: string;\n  theme?: NodeTheme;\n  onBadgeClick?: (badgeId: string, nodeId: string) => void;\n}\n\nexport const NodeBadgeGroup: React.FC<NodeBadgeGroupProps> = ({\n  badges,\n  nodeId,\n  theme,\n  onBadgeClick,\n}) => {\n  if (!badges || badges.length === 0) return null;\n\n  return (\n    <>\n      {badges.map((badge) => (\n        <NodeBadgeComponent\n          key={badge.id}\n          badge={badge}\n          theme={theme}\n          onClick={onBadgeClick ? (badgeId) => onBadgeClick(badgeId, nodeId) : undefined}\n        />\n      ))}\n    </>\n  );\n};\n\n/**\n * Predefined Badge Types\n */\nexport const createStatusBadge = (\n  status: 'success' | 'error' | 'warning' | 'info' | 'processing',\n  position: BadgePosition = 'top-right'\n): NodeBadge => {\n  const statusConfig = {\n    success: { icon: '✓', color: '#ffffff', backgroundColor: '#52c41a' },\n    error: { icon: '✗', color: '#ffffff', backgroundColor: '#ff4d4f' },\n    warning: { icon: '⚠', color: '#000000', backgroundColor: '#faad14' },\n    info: { icon: 'ℹ', color: '#ffffff', backgroundColor: '#1890ff' },\n    processing: { icon: '⟳', color: '#ffffff', backgroundColor: '#722ed1' },\n  };\n\n  const config = statusConfig[status];\n\n  return {\n    id: `status-${status}`,\n    text: '',\n    position,\n    ...config,\n  };\n};\n\nexport const createCountBadge = (\n  count: number,\n  position: BadgePosition = 'top-right',\n  color?: string,\n  backgroundColor?: string\n): NodeBadge => ({\n  id: `count-${count}`,\n  text: count.toString(),\n  color: color || '#ffffff',\n  backgroundColor: backgroundColor || '#ff4d4f',\n  position,\n});\n\nexport const createTextBadge = (\n  text: string,\n  position: BadgePosition = 'top-right',\n  color?: string,\n  backgroundColor?: string\n): NodeBadge => ({\n  id: `text-${text}`,\n  text,\n  color: color || '#ffffff',\n  backgroundColor: backgroundColor || '#1890ff',\n  position,\n});\n\nexport const createIconBadge = (\n  icon: string,\n  position: BadgePosition = 'top-right',\n  color?: string,\n  backgroundColor?: string\n): NodeBadge => ({\n  id: `icon-${icon}`,\n  text: '',\n  icon,\n  color: color || '#ffffff',\n  backgroundColor: backgroundColor || '#52c41a',\n  position,\n});\n\nexport default NodeBadgeComponent;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx",
        "start": 1,
        "end": 204,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 204,
          "column": 2,
          "position": 1736
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/nodebadge/NodeBadge.tsx",
        "start": 5,
        "end": 208,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 208,
          "column": 2,
          "position": 1788
        }
      }
    },
    {
      "format": "javascript",
      "lines": 302,
      "fragment": "={{ width: '100%' }} size=\"large\">\n            {/* Input Field Inclusion */}\n            <Card size=\"small\" title=\"Input Field Handling\">\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong>Include Input Fields</Text>\n                  <br />\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    Choose which input fields to include in the output\n                  </Text>\n                  <Select\n                    value={includeInputFields}\n                    onChange={(value) => updateParameter('includeInputFields', value)}\n                    style={{ width: '100%', marginTop: '8px' }}\n                    disabled={disabled}\n                  >\n                    <Option value=\"all\">Include All Input Fields</Option>\n                    <Option value=\"none\">Include No Input Fields</Option>\n                    <Option value=\"selected\">Include Selected Input Fields</Option>\n                    <Option value=\"except\">Include All Except Selected</Option>\n                  </Select>\n                </div>\n\n                {/* Conditional field selection */}\n                {(includeInputFields === 'selected' || includeInputFields === 'except') && (\n                  <div>\n                    <Text strong>Selected Input Fields</Text>\n                    <br />\n                    <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                      Comma-separated list of field names\n                    </Text>\n                    <Input\n                      placeholder=\"field1, field2, field3\"\n                      value={selectedInputFields}\n                      onChange={(e) => updateParameter('selectedInputFields', e.target.value)}\n                      style={{ marginTop: '8px' }}\n                      disabled={disabled}\n                    />\n                    {inputFieldSuggestions.length > 0 && (\n                      <div style={{ marginTop: '8px' }}>\n                        <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                          Available fields:{' '}\n                        </Text>\n                        {inputFieldSuggestions.map((field: string) => (\n                          <Tag\n                            key={field}\n                            style={{ cursor: 'pointer', margin: '2px' }}\n                            onClick={() => {\n                              const currentFields = selectedInputFields\n                                .split(',')\n                                .map((f: string) => f.trim())\n                                .filter((f: string) => f);\n                              if (!currentFields.includes(field)) {\n                                const newFields = [...currentFields, field].join(', ');\n                                updateParameter('selectedInputFields', newFields);\n                              }\n                            }}\n                          >\n                            {field}\n                          </Tag>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </Space>\n            </Card>\n\n            {/* Field Assignments */}\n            <Card size=\"small\" title=\"Field Assignments\">\n              <TransformAssignmentCollection\n                assignments={assignments}\n                onChange={(newAssignments) =>\n                  updateNestedParameter('assignments.values', newAssignments)\n                }\n                inputData={inputData}\n                disabled={disabled}\n              />\n            </Card>\n          </Space>\n        );\n\n      case 'json':\n        return (\n          <Card size=\"small\" title=\"JSON Object Definition\">\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <div>\n                <Text strong>JSON Object</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Define the output object structure using JSON with expressions\n                </Text>\n              </div>\n              <TextArea\n                value={jsonObject}\n                onChange={(e) => updateParameter('jsonObject', e.target.value)}\n                rows={8}\n                placeholder='{\\n  \"newField\": \"{{ $json.existingField }}\",\\n  \"computed\": \"{{ $json.value1 + $json.value2 }}\"\\n}'\n                disabled={disabled}\n                style={{\n                  fontFamily: 'Monaco, Consolas, monospace',\n                  fontSize: '12px',\n                }}\n              />\n              <Alert\n                message=\"Expression Support\"\n                description=\"Use {{ expression }} syntax to access input data and perform calculations\"\n                type=\"info\"\n                showIcon\n                icon={<BulbOutlined />}\n              />\n            </Space>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  // Render advanced options\n  const renderAdvancedOptions = () => (\n    <Collapse ghost>\n      <Panel header=\"Advanced Options\" key=\"advanced\">\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Row gutter={16}>\n            <Col span={12}>\n              <div>\n                <Text strong>Dot Notation</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Access nested object properties\n                </Text>\n                <br />\n                <Switch\n                  checked={options.dotNotation ?? true}\n                  onChange={(value) => updateNestedParameter('options.dotNotation', value)}\n                  disabled={disabled}\n                  style={{ marginTop: '4px' }}\n                />\n              </div>\n            </Col>\n            <Col span={12}>\n              <div>\n                <Text strong>Ignore Conversion Errors</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Continue on type conversion failures\n                </Text>\n                <br />\n                <Switch\n                  checked={options.ignoreConversionErrors ?? false}\n                  onChange={(value) =>\n                    updateNestedParameter('options.ignoreConversionErrors', value)\n                  }\n                  disabled={disabled}\n                  style={{ marginTop: '4px' }}\n                />\n              </div>\n            </Col>\n          </Row>\n\n          {mode === 'manual' && (\n            <div>\n              <Text strong>Keep Only Set Fields</Text>\n              <br />\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Only include explicitly set fields (overrides input field inclusion)\n              </Text>\n              <br />\n              <Switch\n                checked={options.keepOnlySet ?? false}\n                onChange={(value) => updateNestedParameter('options.keepOnlySet', value)}\n                disabled={disabled}\n                style={{ marginTop: '4px' }}\n              />\n            </div>\n          )}\n        </Space>\n      </Panel>\n    </Collapse>\n  );\n\n  return (\n    <div\n      className=\"enhanced-transform-property-panel\"\n      style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n    >\n      <style>{`\n        .enhanced-transform-property-panel {\n          background: #fff;\n        }\n        .ant-tabs-content-holder {\n          overflow-y: auto;\n          flex: 1;\n        }\n      `}</style>\n\n      {/* Header */}\n      <div style={{ padding: '16px 16px 0', borderBottom: '1px solid #f0f0f0' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '16px',\n          }}\n        >\n          <div>\n            <Title level={4} style={{ margin: 0 }}>\n              Transform Configuration\n            </Title>\n            <Text type=\"secondary\">Enhanced field transformation with type validation</Text>\n          </div>\n          {onTest && (\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={onTest}\n              disabled={disabled || validationErrors.length > 0}\n            >\n              Test\n            </Button>\n          )}\n        </div>\n\n        {/* Mode Selection */}\n        <div style={{ marginBottom: '16px' }}>\n          <Text strong>Transformation Mode</Text>\n          <Select\n            value={mode}\n            onChange={(value) => updateParameter('mode', value)}\n            style={{ width: '100%', marginTop: '8px' }}\n            disabled={disabled}\n          >\n            <Option value=\"manual\">\n              <div>\n                <div>Manual Field Assignment</div>\n                <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                  Configure individual field transformations with type validation\n                </Text>\n              </div>\n            </Option>\n            <Option value=\"json\">\n              <div>\n                <div>JSON Object</div>\n                <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                  Define transformations using a JSON object with expressions\n                </Text>\n              </div>\n            </Option>\n          </Select>\n        </div>\n      </div>\n\n      {/* Validation Errors */}\n      {validationErrors.length > 0 && (\n        <div style={{ padding: '0 16px' }}>\n          <Alert\n            message=\"Configuration Errors\"\n            description={\n              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>\n                {validationErrors.map((error: string, index: number) => (\n                  <li key={index} style={{ fontSize: '12px' }}>\n                    {error}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"error\"\n            showIcon\n            style={{ marginTop: '16px' }}\n          />\n        </div>\n      )}\n\n      {/* Main Configuration */}\n      <div style={{ padding: '16px', flex: 1, overflowY: 'auto' }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n          {renderModeConfiguration()}\n          {renderAdvancedOptions()}\n        </Space>\n      </div>\n\n      {/* Footer with stats */}\n      <div\n        style={{\n          padding: '12px 16px',\n          borderTop: '1px solid #f0f0f0',\n          backgroundColor: '#fafafa',\n          fontSize: '12px',\n          color: '#8c8c8c',\n        }}\n      >\n        <Row>\n          <Col span={8}>\n            <Text type=\"secondary\">Mode: {mode}</Text>\n          </Col>\n          <Col span={8}>\n            {mode === 'manual' && <Text type=\"secondary\">Assignments: {assignments.length}</Text>}\n          </Col>\n          <Col span={8} style={{ textAlign: 'right' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx",
        "start": 148,
        "end": 449,
        "startLoc": {
          "line": 148,
          "column": 6,
          "position": 1288
        },
        "endLoc": {
          "line": 449,
          "column": 2,
          "position": 3855
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx",
        "start": 151,
        "end": 452,
        "startLoc": {
          "line": 151,
          "column": 6,
          "position": 1327
        },
        "endLoc": {
          "line": 452,
          "column": 2,
          "position": 3894
        }
      }
    },
    {
      "format": "tsx",
      "lines": 458,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Enhanced Transform Property Panel\n * Comprehensive configuration panel for the enhanced Transform node with n8n-like features\n */\n\nimport { BulbOutlined } from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Collapse,\n  Input,\n  Row,\n  Select,\n  Space,\n  Switch,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport TransformAssignmentCollection from './TransformAssignmentCollection';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { Panel } = Collapse;\n\ninterface EnhancedTransformPropertyPanelProps {\n  nodeData: any;\n  onChange: (updates: any) => void;\n  inputData?: any[];\n  onTest?: () => void;\n  disabled?: boolean;\n}\n\nconst EnhancedTransformPropertyPanel: React.FC<EnhancedTransformPropertyPanelProps> = ({\n  nodeData,\n  onChange,\n  inputData,\n  onTest,\n  disabled,\n}) => {\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n  // Extract current parameters\n  const parameters = nodeData.parameters || {};\n  const mode = parameters.mode || 'manual';\n  const includeInputFields = parameters.includeInputFields || 'all';\n  const selectedInputFields = parameters.selectedInputFields || '';\n  const assignments = parameters.assignments?.values || [];\n  const jsonObject = parameters.jsonObject || '{\\n  \"newField\": \"{{ $json.existingField }}\"\\n}';\n  const options = parameters.options || {};\n\n  // Update parameter helper\n  const updateParameter = useCallback(\n    (key: string, value: any) => {\n      const newParameters = { ...parameters, [key]: value };\n      onChange({ parameters: newParameters });\n    },\n    [parameters, onChange]\n  );\n\n  // Update nested parameter helper\n  const updateNestedParameter = useCallback(\n    (path: string, value: any) => {\n      const keys = path.split('.');\n      const newParameters = { ...parameters };\n      let current = newParameters;\n\n      for (let i = 0; i < keys.length - 1; i++) {\n        if (!current[keys[i]]) current[keys[i]] = {};\n        current = current[keys[i]];\n      }\n\n      current[keys[keys.length - 1]] = value;\n      onChange({ parameters: newParameters });\n    },\n    [parameters, onChange]\n  );\n\n  // Validate configuration\n  const validateConfiguration = useCallback(() => {\n    const errors: string[] = [];\n\n    if (mode === 'manual') {\n      // Validate assignments\n      assignments.forEach((assignment: any, index: number) => {\n        if (!assignment.name?.trim()) {\n          errors.push(`Assignment ${index + 1}: Field name is required`);\n        }\n        if (assignment.name?.includes('..')) {\n          errors.push(`Assignment ${index + 1}: Invalid dot notation syntax`);\n        }\n      });\n\n      // Validate selected fields if needed\n      if (\n        (includeInputFields === 'selected' || includeInputFields === 'except') &&\n        !selectedInputFields.trim()\n      ) {\n        errors.push('Selected input fields list is required for this inclusion mode');\n      }\n    } else if (mode === 'json') {\n      // Validate JSON syntax\n      try {\n        JSON.parse(jsonObject);\n      } catch (error) {\n        errors.push(\n          'Invalid JSON syntax in JSON Object',\n          error instanceof Error ? error.message : String(error)\n        );\n      }\n    }\n\n    setValidationErrors(errors);\n    return errors.length === 0;\n  }, [mode, assignments, includeInputFields, selectedInputFields, jsonObject]);\n\n  // Validate on parameter changes\n  useEffect(() => {\n    validateConfiguration();\n  }, [validateConfiguration]);\n\n  // Get input field suggestions\n  const getInputFieldSuggestions = useCallback(() => {\n    if (!inputData || !inputData.length) return [];\n\n    const fieldNames = new Set<string>();\n    inputData.forEach((item) => {\n      if (item.json && typeof item.json === 'object') {\n        Object.keys(item.json).forEach((key) => fieldNames.add(key));\n      }\n    });\n\n    return Array.from(fieldNames);\n  }, [inputData]);\n\n  const inputFieldSuggestions = getInputFieldSuggestions();\n\n  // Render mode configuration\n  const renderModeConfiguration = () => {\n    switch (mode) {\n      case 'manual':\n        return (\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            {/* Input Field Inclusion */}\n            <Card size=\"small\" title=\"Input Field Handling\">\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong>Include Input Fields</Text>\n                  <br />\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    Choose which input fields to include in the output\n                  </Text>\n                  <Select\n                    value={includeInputFields}\n                    onChange={(value) => updateParameter('includeInputFields', value)}\n                    style={{ width: '100%', marginTop: '8px' }}\n                    disabled={disabled}\n                  >\n                    <Option value=\"all\">Include All Input Fields</Option>\n                    <Option value=\"none\">Include No Input Fields</Option>\n                    <Option value=\"selected\">Include Selected Input Fields</Option>\n                    <Option value=\"except\">Include All Except Selected</Option>\n                  </Select>\n                </div>\n\n                {/* Conditional field selection */}\n                {(includeInputFields === 'selected' || includeInputFields === 'except') && (\n                  <div>\n                    <Text strong>Selected Input Fields</Text>\n                    <br />\n                    <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                      Comma-separated list of field names\n                    </Text>\n                    <Input\n                      placeholder=\"field1, field2, field3\"\n                      value={selectedInputFields}\n                      onChange={(e) => updateParameter('selectedInputFields', e.target.value)}\n                      style={{ marginTop: '8px' }}\n                      disabled={disabled}\n                    />\n                    {inputFieldSuggestions.length > 0 && (\n                      <div style={{ marginTop: '8px' }}>\n                        <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                          Available fields:{' '}\n                        </Text>\n                        {inputFieldSuggestions.map((field: string) => (\n                          <Tag\n                            key={field}\n                            style={{ cursor: 'pointer', margin: '2px' }}\n                            onClick={() => {\n                              const currentFields = selectedInputFields\n                                .split(',')\n                                .map((f: string) => f.trim())\n                                .filter((f: string) => f);\n                              if (!currentFields.includes(field)) {\n                                const newFields = [...currentFields, field].join(', ');\n                                updateParameter('selectedInputFields', newFields);\n                              }\n                            }}\n                          >\n                            {field}\n                          </Tag>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </Space>\n            </Card>\n\n            {/* Field Assignments */}\n            <Card size=\"small\" title=\"Field Assignments\">\n              <TransformAssignmentCollection\n                assignments={assignments}\n                onChange={(newAssignments) =>\n                  updateNestedParameter('assignments.values', newAssignments)\n                }\n                inputData={inputData}\n                disabled={disabled}\n              />\n            </Card>\n          </Space>\n        );\n\n      case 'json':\n        return (\n          <Card size=\"small\" title=\"JSON Object Definition\">\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <div>\n                <Text strong>JSON Object</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Define the output object structure using JSON with expressions\n                </Text>\n              </div>\n              <TextArea\n                value={jsonObject}\n                onChange={(e) => updateParameter('jsonObject', e.target.value)}\n                rows={8}\n                placeholder='{\\n  \"newField\": \"{{ $json.existingField }}\",\\n  \"computed\": \"{{ $json.value1 + $json.value2 }}\"\\n}'\n                disabled={disabled}\n                style={{\n                  fontFamily: 'Monaco, Consolas, monospace',\n                  fontSize: '12px',\n                }}\n              />\n              <Alert\n                message=\"Expression Support\"\n                description=\"Use {{ expression }} syntax to access input data and perform calculations\"\n                type=\"info\"\n                showIcon\n                icon={<BulbOutlined />}\n              />\n            </Space>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  // Render advanced options\n  const renderAdvancedOptions = () => (\n    <Collapse ghost>\n      <Panel header=\"Advanced Options\" key=\"advanced\">\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Row gutter={16}>\n            <Col span={12}>\n              <div>\n                <Text strong>Dot Notation</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Access nested object properties\n                </Text>\n                <br />\n                <Switch\n                  checked={options.dotNotation ?? true}\n                  onChange={(value) => updateNestedParameter('options.dotNotation', value)}\n                  disabled={disabled}\n                  style={{ marginTop: '4px' }}\n                />\n              </div>\n            </Col>\n            <Col span={12}>\n              <div>\n                <Text strong>Ignore Conversion Errors</Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Continue on type conversion failures\n                </Text>\n                <br />\n                <Switch\n                  checked={options.ignoreConversionErrors ?? false}\n                  onChange={(value) =>\n                    updateNestedParameter('options.ignoreConversionErrors', value)\n                  }\n                  disabled={disabled}\n                  style={{ marginTop: '4px' }}\n                />\n              </div>\n            </Col>\n          </Row>\n\n          {mode === 'manual' && (\n            <div>\n              <Text strong>Keep Only Set Fields</Text>\n              <br />\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Only include explicitly set fields (overrides input field inclusion)\n              </Text>\n              <br />\n              <Switch\n                checked={options.keepOnlySet ?? false}\n                onChange={(value) => updateNestedParameter('options.keepOnlySet', value)}\n                disabled={disabled}\n                style={{ marginTop: '4px' }}\n              />\n            </div>\n          )}\n        </Space>\n      </Panel>\n    </Collapse>\n  );\n\n  return (\n    <div\n      className=\"enhanced-transform-property-panel\"\n      style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n    >\n      <style>{`\n        .enhanced-transform-property-panel {\n          background: #fff;\n        }\n        .ant-tabs-content-holder {\n          overflow-y: auto;\n          flex: 1;\n        }\n      `}</style>\n\n      {/* Header */}\n      <div style={{ padding: '16px 16px 0', borderBottom: '1px solid #f0f0f0' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '16px',\n          }}\n        >\n          <div>\n            <Title level={4} style={{ margin: 0 }}>\n              Transform Configuration\n            </Title>\n            <Text type=\"secondary\">Enhanced field transformation with type validation</Text>\n          </div>\n          {onTest && (\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={onTest}\n              disabled={disabled || validationErrors.length > 0}\n            >\n              Test\n            </Button>\n          )}\n        </div>\n\n        {/* Mode Selection */}\n        <div style={{ marginBottom: '16px' }}>\n          <Text strong>Transformation Mode</Text>\n          <Select\n            value={mode}\n            onChange={(value) => updateParameter('mode', value)}\n            style={{ width: '100%', marginTop: '8px' }}\n            disabled={disabled}\n          >\n            <Option value=\"manual\">\n              <div>\n                <div>Manual Field Assignment</div>\n                <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                  Configure individual field transformations with type validation\n                </Text>\n              </div>\n            </Option>\n            <Option value=\"json\">\n              <div>\n                <div>JSON Object</div>\n                <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                  Define transformations using a JSON object with expressions\n                </Text>\n              </div>\n            </Option>\n          </Select>\n        </div>\n      </div>\n\n      {/* Validation Errors */}\n      {validationErrors.length > 0 && (\n        <div style={{ padding: '0 16px' }}>\n          <Alert\n            message=\"Configuration Errors\"\n            description={\n              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>\n                {validationErrors.map((error: string, index: number) => (\n                  <li key={index} style={{ fontSize: '12px' }}>\n                    {error}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"error\"\n            showIcon\n            style={{ marginTop: '16px' }}\n          />\n        </div>\n      )}\n\n      {/* Main Configuration */}\n      <div style={{ padding: '16px', flex: 1, overflowY: 'auto' }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n          {renderModeConfiguration()}\n          {renderAdvancedOptions()}\n        </Space>\n      </div>\n\n      {/* Footer with stats */}\n      <div\n        style={{\n          padding: '12px 16px',\n          borderTop: '1px solid #f0f0f0',\n          backgroundColor: '#fafafa',\n          fontSize: '12px',\n          color: '#8c8c8c',\n        }}\n      >\n        <Row>\n          <Col span={8}>\n            <Text type=\"secondary\">Mode: {mode}</Text>\n          </Col>\n          <Col span={8}>\n            {mode === 'manual' && <Text type=\"secondary\">Assignments: {assignments.length}</Text>}\n          </Col>\n          <Col span={8} style={{ textAlign: 'right' }}>\n            {inputData && <Text type=\"secondary\">Input items: {inputData.length}</Text>}\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedTransformPropertyPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx",
        "start": 1,
        "end": 458,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 458,
          "column": 2,
          "position": 3921
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/enhancedtransformpropertypanel/EnhancedTransformPropertyPanel.tsx",
        "start": 4,
        "end": 461,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 461,
          "column": 2,
          "position": 3960
        }
      }
    },
    {
      "format": "javascript",
      "lines": 60,
      "fragment": "={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 296,
        "end": 355,
        "startLoc": {
          "line": 296,
          "column": 6,
          "position": 2321
        },
        "endLoc": {
          "line": 355,
          "column": 2,
          "position": 2840
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 298,
        "end": 357,
        "startLoc": {
          "line": 298,
          "column": 6,
          "position": 2328
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2847
        }
      }
    },
    {
      "format": "tsx",
      "lines": 367,
      "fragment": "/**\n * Enhanced Node Toolbar\n * Advanced toolbar with customizable actions, themes, and interactions\n */\n\nimport {\n  BugOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  PlayCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { useNodeTheme } from '../themes';\nimport type { NodeTheme, ToolbarAction } from '../types';\n\ninterface EnhancedNodeToolbarProps {\n  nodeId: string;\n  visible: boolean;\n  actions?: ToolbarAction[];\n  theme?: NodeTheme;\n  onActionClick: (actionId: string, nodeId: string) => void;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'default' | 'compact' | 'floating';\n}\n\nconst EnhancedNodeToolbar: React.FC<EnhancedNodeToolbarProps> = ({\n  nodeId,\n  visible,\n  actions = [],\n  theme: propTheme,\n  onActionClick,\n  position = 'top',\n  size = 'medium',\n  variant = 'default',\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [hoveredAction, setHoveredAction] = useState<string | null>(null);\n  const toolbarRef = useRef<HTMLDivElement>(null);\n\n  // Default actions if none provided\n  const defaultActions: ToolbarAction[] = [\n    {\n      id: 'play',\n      icon: 'PlayCircleOutlined',\n      label: 'Run Node',\n      action: 'execute',\n      shortcut: 'Ctrl+R',\n    },\n    {\n      id: 'stop',\n      icon: 'StopOutlined',\n      label: 'Stop Execution',\n      action: 'stop',\n    },\n    {\n      id: 'copy',\n      icon: 'CopyOutlined',\n      label: 'Duplicate Node',\n      action: 'duplicate',\n      shortcut: 'Ctrl+D',\n    },\n    {\n      id: 'edit',\n      icon: 'EditOutlined',\n      label: 'Edit Node',\n      action: 'edit',\n      shortcut: 'Enter',\n    },\n    {\n      id: 'delete',\n      icon: 'DeleteOutlined',\n      label: 'Delete Node',\n      action: 'delete',\n      shortcut: 'Del',\n    },\n    {\n      id: 'more',\n      icon: 'MoreOutlined',\n      label: 'More Actions',\n      action: 'menu',\n    },\n  ];\n\n  const finalActions = actions.length > 0 ? actions : defaultActions;\n\n  const getPositionStyles = (): React.CSSProperties => {\n    const offset = variant === 'floating' ? 12 : 8;\n    const baseStyles: React.CSSProperties = {\n      position: 'absolute',\n      zIndex: 9999,\n    };\n\n    switch (position) {\n      case 'top':\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'bottom':\n        return {\n          ...baseStyles,\n          bottom: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'left':\n        return {\n          ...baseStyles,\n          left: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      case 'right':\n        return {\n          ...baseStyles,\n          right: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n    }\n  };\n\n  const getSizeConfig = () => {\n    switch (size) {\n      case 'small':\n        return { buttonSize: 24, iconSize: 12, padding: '4px' };\n      case 'large':\n        return { buttonSize: 36, iconSize: 16, padding: '8px' };\n      default:\n        return { buttonSize: 28, iconSize: 14, padding: '6px' };\n    }\n  };\n\n  const getVariantStyles = (): React.CSSProperties => {\n    const { padding } = getSizeConfig();\n\n    // Defensive theme access with fallbacks\n    const borderRadius = theme?.borderRadius?.md || '6px';\n    const duration = theme?.animations?.duration?.normal || '150ms';\n    const easing = theme?.animations?.easing?.easeOut || 'ease-out';\n\n    const baseStyles: React.CSSProperties = {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '2px',\n      borderRadius,\n      transition: `all ${duration} ${easing}`,\n      opacity: visible ? 1 : 0,\n      transform: visible ? 'scale(1)' : 'scale(0.9)',\n      padding,\n    };\n\n    switch (variant) {\n      case 'compact':\n        return {\n          ...baseStyles,\n          background: 'rgba(0, 0, 0, 0.8)',\n          backdropFilter: 'blur(8px)',\n          border: `1px solid ${theme?.colors?.border || '#ddd'}40`,\n        };\n      case 'floating':\n        return {\n          ...baseStyles,\n          background: theme?.colors?.background || '#fff',\n          border: `1px solid ${theme?.colors?.border || '#ddd'}`,\n          boxShadow: theme?.shadows?.lg || '0 10px 25px rgba(0, 0, 0, 0.1)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          background: 'rgba(0, 0, 0, 0.9)',\n          border: `1px solid ${theme?.colors?.border || '#ddd'}60`,\n          boxShadow: theme?.shadows?.md || '0 4px 12px rgba(0, 0, 0, 0.05)',\n        };\n    }\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const iconMap: Record<string, React.ComponentType<any>> = {\n      PlayCircleOutlined,\n      StopOutlined,\n      DeleteOutlined,\n      MoreOutlined,\n      CopyOutlined,\n      EditOutlined,\n      SettingOutlined,\n      BugOutlined,\n      ReloadOutlined,\n    };\n\n    const IconComponent = iconMap[iconName] || MoreOutlined;\n    return IconComponent;\n  };\n\n  const handleActionClick = (action: ToolbarAction, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    // Special handling for menu action\n    if (action.id === 'more') {\n      // Show additional actions menu\n      return;\n    }\n\n    onActionClick(action.id, nodeId);\n  };\n\n  const getButtonStyles = (actionId: string): React.CSSProperties => {\n    const { buttonSize, iconSize } = getSizeConfig();\n    const isHovered = hoveredAction === actionId;\n\n    const buttonColor = getActionColor(actionId);\n\n    return {\n      width: buttonSize,\n      height: buttonSize,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: theme.borderRadius.sm,\n      background: isHovered ? buttonColor : 'transparent',\n      color: isHovered ? theme.colors.background : getActionTextColor(actionId),\n      border: 'none',\n      cursor: 'pointer',\n      transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeOut}`,\n      fontSize: iconSize,\n      transform: isHovered ? 'scale(1.1)' : 'scale(1)',\n    };\n  };\n\n  const getActionColor = (actionId: string): string => {\n    switch (actionId) {\n      case 'play':\n        return theme.colors.success;\n      case 'stop':\n        return theme.colors.error;\n      case 'delete':\n        return theme.colors.error;\n      case 'copy':\n        return theme.colors.info;\n      case 'edit':\n        return theme.colors.primary;\n      default:\n        return theme.colors.textSecondary;\n    }\n  };\n\n  const getActionTextColor = (actionId: string): string => {\n    if (variant === 'floating') {\n      return getActionColor(actionId);\n    }\n    return theme.colors.background;\n  };\n\n  const renderMoreMenu = () => {\n    const moreActions: ToolbarAction[] = [\n      {\n        id: 'settings',\n        icon: 'SettingOutlined',\n        label: 'Node Settings',\n        action: 'settings',\n      },\n      {\n        id: 'debug',\n        icon: 'BugOutlined',\n        label: 'Debug Node',\n        action: 'debug',\n      },\n      {\n        id: 'reload',\n        icon: 'ReloadOutlined',\n        label: 'Reload Node',\n        action: 'reload',\n      },\n    ];\n\n    const menuItems = moreActions.map((action) => ({\n      key: action.id,\n      label: (\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}\n              >\n                {React.createElement(getIconComponent(action.icon))}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedNodeToolbar;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 367,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 367,
          "column": 2,
          "position": 2901
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/enhancednodetoolbar/EnhancedNodeToolbar.tsx",
        "start": 8,
        "end": 369,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 369,
          "column": 2,
          "position": 2908
        }
      }
    },
    {
      "format": "javascript",
      "lines": 72,
      "fragment": "={`property-field ${displayState.disabled ? 'opacity-50' : ''}`}>\n      <PropertyRenderer\n        property={{\n          ...property,\n          required: displayState.required,\n        }}\n        value={value}\n        onChange={handleChange}\n        disabled={disabled || displayState.disabled}\n        context={context}\n        nodeValues={nodeValues}\n      />\n    </div>\n  );\n};\n\n// Property Group Renderer with Conditional Logic\nexport interface PropertyGroupRendererProps {\n  properties: Array<INodeProperty & { displayOptions?: EnhancedDisplayOptions }>;\n  values: Record<string, any>;\n  onChange: (field: string, value: any) => void;\n  evaluationContext?: any;\n  disabled?: boolean;\n  context?: any;\n}\n\nexport const PropertyGroupRenderer: React.FC<PropertyGroupRendererProps> = ({\n  properties,\n  values,\n  onChange,\n  disabled = false,\n  context,\n}) => {\n  // Dependency tracker\n  const dependencyTracker = useMemo(() => {\n    const tracker = new PropertyDependencyTracker();\n\n    // Register all dependencies\n    properties.forEach((property) => {\n      if (property.displayOptions) {\n        tracker.extractDependencies(property.name, property.displayOptions);\n      }\n    });\n\n    return tracker;\n  }, [properties]);\n\n  // Handle field changes with dependency re-evaluation\n  const handleFieldChange = useCallback(\n    (fieldName: string, value: any) => {\n      onChange(fieldName, value);\n\n      // Find and trigger re-evaluation of dependent properties\n      const dependentProperties = dependencyTracker.getDependents(fieldName);\n      if (dependentProperties.length > 0) {\n        // The parent component should handle this by updating its state\n      }\n    },\n    [onChange, dependencyTracker]\n  );\n\n  return (\n    <div className=\"property-group space-y-4\">\n      {properties.map((property) => (\n        <ConditionalPropertyRenderer\n          key={property.name}\n          property={property}\n          value={values[property.name]}\n          onChange={(value) => handleFieldChange(property.name, value)}\n          nodeValues={values}\n          disabled={disabled}\n          context={context}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 390,
        "end": 461,
        "startLoc": {
          "line": 390,
          "column": 10,
          "position": 3141
        },
        "endLoc": {
          "line": 461,
          "column": 2,
          "position": 3670
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 392,
        "end": 463,
        "startLoc": {
          "line": 392,
          "column": 10,
          "position": 3167
        },
        "endLoc": {
          "line": 463,
          "column": 2,
          "position": 3696
        }
      }
    },
    {
      "format": "tsx",
      "lines": 507,
      "fragment": "/**\n * Conditional Property Rendering System\n * Advanced displayOptions evaluation matching n8n's complex conditional logic\n */\n\nimport type React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport type { PropertyRendererProps } from './PropertyRenderers';\nimport { PropertyRenderer } from './PropertyRenderers';\n\n// Define display options interface locally\ninterface INodePropertyDisplayOptions {\n  show?: Record<string, any[]>;\n  hide?: Record<string, any[]>;\n}\n\n// Enhanced Display Options Interface\nexport interface EnhancedDisplayOptions extends INodePropertyDisplayOptions {\n  show?: Record<string, any[]>;\n  hide?: Record<string, any[]>;\n  // Advanced conditional operators\n  showIf?: {\n    field: string;\n    operator:\n      | 'equals'\n      | 'not_equals'\n      | 'contains'\n      | 'not_contains'\n      | 'greater_than'\n      | 'less_than'\n      | 'is_empty'\n      | 'is_not_empty';\n    value: any;\n  }[];\n  hideIf?: {\n    field: string;\n    operator:\n      | 'equals'\n      | 'not_equals'\n      | 'contains'\n      | 'not_contains'\n      | 'greater_than'\n      | 'less_than'\n      | 'is_empty'\n      | 'is_not_empty';\n    value: any;\n  }[];\n  // Nested conditions with AND/OR logic\n  conditions?: {\n    type: 'AND' | 'OR';\n    rules: Array<{\n      field: string;\n      operator: string;\n      value: any;\n    }>;\n  };\n  // Resource-dependent visibility\n  resourceDependent?: {\n    resource: string;\n    condition: (resource: any) => boolean;\n  };\n}\n\nexport interface ConditionalPropertyRendererProps extends Omit<PropertyRendererProps, 'property'> {\n  property: INodeProperty & {\n    displayOptions?: EnhancedDisplayOptions;\n  };\n  nodeValues: Record<string, any>;\n}\n\n// Conditional Logic Evaluator\nclass DisplayOptionsEvaluator {\n  private nodeValues: Record<string, any>;\n\n  constructor(nodeValues: Record<string, any>) {\n    this.nodeValues = nodeValues;\n  }\n\n  // Main evaluation method\n  evaluateDisplayOptions(displayOptions: EnhancedDisplayOptions): {\n    visible: boolean;\n    disabled: boolean;\n    required: boolean;\n  } {\n    let visible = true;\n    const disabled = false;\n    const required = false;\n\n    // Basic show/hide conditions (n8n standard)\n    if (displayOptions.show) {\n      visible = this.evaluateShowConditions(displayOptions.show);\n    }\n\n    if (displayOptions.hide && visible) {\n      visible = !this.evaluateHideConditions(displayOptions.hide);\n    }\n\n    // Advanced conditional logic\n    if (displayOptions.showIf && visible) {\n      visible = this.evaluateAdvancedConditions(displayOptions.showIf);\n    }\n\n    if (displayOptions.hideIf && visible) {\n      visible = !this.evaluateAdvancedConditions(displayOptions.hideIf);\n    }\n\n    // Complex nested conditions\n    if (displayOptions.conditions && visible) {\n      visible = this.evaluateNestedConditions(displayOptions.conditions);\n    }\n\n    // Resource-dependent visibility\n    if (displayOptions.resourceDependent && visible) {\n      visible = this.evaluateResourceDependentConditions(displayOptions.resourceDependent);\n    }\n\n    return { visible, disabled, required };\n  }\n\n  // Standard n8n show conditions\n  private evaluateShowConditions(showConditions: Record<string, any[]>): boolean {\n    return Object.entries(showConditions).every(([fieldName, expectedValues]) => {\n      const currentValue = this.getFieldValue(fieldName);\n      return this.matchesAnyValue(currentValue, expectedValues);\n    });\n  }\n\n  // Standard n8n hide conditions\n  private evaluateHideConditions(hideConditions: Record<string, any[]>): boolean {\n    return Object.entries(hideConditions).some(([fieldName, expectedValues]) => {\n      const currentValue = this.getFieldValue(fieldName);\n      return this.matchesAnyValue(currentValue, expectedValues);\n    });\n  }\n\n  // Advanced conditional logic with operators\n  private evaluateAdvancedConditions(\n    conditions: Array<{\n      field: string;\n      operator: string;\n      value: any;\n    }>\n  ): boolean {\n    return conditions.every((condition) => {\n      const fieldValue = this.getFieldValue(condition.field);\n      return this.evaluateCondition(fieldValue, condition.operator, condition.value);\n    });\n  }\n\n  // Nested conditions with AND/OR logic\n  private evaluateNestedConditions(conditions: {\n    type: 'AND' | 'OR';\n    rules: Array<{\n      field: string;\n      operator: string;\n      value: any;\n    }>;\n  }): boolean {\n    const results = conditions.rules.map((rule) => {\n      const fieldValue = this.getFieldValue(rule.field);\n      return this.evaluateCondition(fieldValue, rule.operator, rule.value);\n    });\n\n    return conditions.type === 'AND'\n      ? results.every((result) => result)\n      : results.some((result) => result);\n  }\n\n  // Resource-dependent conditions\n  private evaluateResourceDependentConditions(resourceDependent: {\n    resource: string;\n    condition: (resource: any) => boolean;\n  }): boolean {\n    const resource = this.getFieldValue(resourceDependent.resource);\n    try {\n      return resourceDependent.condition(resource);\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  // Single condition evaluation with operators\n  private evaluateCondition(fieldValue: any, operator: string, expectedValue: any): boolean {\n    switch (operator) {\n      case 'equals':\n        return fieldValue === expectedValue;\n      case 'not_equals':\n        return fieldValue !== expectedValue;\n      case 'contains':\n        return this.valueContains(fieldValue, expectedValue);\n      case 'not_contains':\n        return !this.valueContains(fieldValue, expectedValue);\n      case 'greater_than':\n        return Number(fieldValue) > Number(expectedValue);\n      case 'less_than':\n        return Number(fieldValue) < Number(expectedValue);\n      case 'is_empty':\n        return this.isEmpty(fieldValue);\n      case 'is_not_empty':\n        return !this.isEmpty(fieldValue);\n      case 'starts_with':\n        return String(fieldValue).startsWith(String(expectedValue));\n      case 'ends_with':\n        return String(fieldValue).endsWith(String(expectedValue));\n      case 'matches_regex':\n        try {\n          return new RegExp(String(expectedValue)).test(String(fieldValue));\n        } catch {\n          return false;\n        }\n      default:\n        return false;\n    }\n  }\n\n  // Helper: Check if value matches any of the expected values\n  private matchesAnyValue(currentValue: any, expectedValues: any[]): boolean {\n    return expectedValues.some((expectedValue) => {\n      // Handle array values\n      if (Array.isArray(currentValue)) {\n        return currentValue.includes(expectedValue);\n      }\n\n      // Handle object values\n      if (typeof currentValue === 'object' && currentValue !== null) {\n        return JSON.stringify(currentValue) === JSON.stringify(expectedValue);\n      }\n\n      // Standard equality check\n      return currentValue === expectedValue;\n    });\n  }\n\n  // Helper: Check if value contains expected value\n  private valueContains(fieldValue: any, expectedValue: any): boolean {\n    if (Array.isArray(fieldValue)) {\n      return fieldValue.includes(expectedValue);\n    }\n\n    if (typeof fieldValue === 'string' && typeof expectedValue === 'string') {\n      return fieldValue.toLowerCase().includes(expectedValue.toLowerCase());\n    }\n\n    if (typeof fieldValue === 'object' && fieldValue !== null) {\n      return JSON.stringify(fieldValue).includes(String(expectedValue));\n    }\n\n    return false;\n  }\n\n  // Helper: Check if value is empty\n  private isEmpty(value: any): boolean {\n    if (value === null || value === undefined) return true;\n    if (typeof value === 'string') return value.trim() === '';\n    if (Array.isArray(value)) return value.length === 0;\n    if (typeof value === 'object') return Object.keys(value).length === 0;\n    return false;\n  }\n\n  // Helper: Get field value with dot notation support\n  private getFieldValue(fieldPath: string): any {\n    // Handle dot notation: 'operation.type' -> operation.type\n    const pathParts = fieldPath.split('.');\n    let value = this.nodeValues;\n\n    for (const part of pathParts) {\n      if (value === null || value === undefined) {\n        return undefined;\n      }\n      value = value[part];\n    }\n\n    return value;\n  }\n}\n\n// Property Dependency Tracker\nclass PropertyDependencyTracker {\n  private dependencies = new Map<string, Set<string>>();\n\n  // Register that a property depends on other fields\n  registerDependency(propertyName: string, dependsOn: string[]): void {\n    if (!this.dependencies.has(propertyName)) {\n      this.dependencies.set(propertyName, new Set());\n    }\n\n    const deps = this.dependencies.get(propertyName)!;\n    dependsOn.forEach((dep) => deps.add(dep));\n  }\n\n  // Get all properties that depend on a given field\n  getDependents(fieldName: string): string[] {\n    const dependents: string[] = [];\n\n    this.dependencies.forEach((deps, propertyName) => {\n      if (deps.has(fieldName)) {\n        dependents.push(propertyName);\n      }\n    });\n\n    return dependents;\n  }\n\n  // Extract dependencies from display options\n  extractDependencies(propertyName: string, displayOptions: EnhancedDisplayOptions): void {\n    const dependencies = new Set<string>();\n\n    // Extract from show/hide conditions\n    if (displayOptions.show) {\n      Object.keys(displayOptions.show).forEach((field) => dependencies.add(field));\n    }\n\n    if (displayOptions.hide) {\n      Object.keys(displayOptions.hide).forEach((field) => dependencies.add(field));\n    }\n\n    // Extract from advanced conditions\n    if (displayOptions.showIf) {\n      displayOptions.showIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if (displayOptions.hideIf) {\n      displayOptions.hideIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    // Extract from nested conditions\n    if (displayOptions.conditions) {\n      displayOptions.conditions.rules.forEach((rule) => dependencies.add(rule.field));\n    }\n\n    // Extract from resource dependencies\n    if (displayOptions.resourceDependent) {\n      dependencies.add(displayOptions.resourceDependent.resource);\n    }\n\n    if (dependencies.size > 0) {\n      this.registerDependency(propertyName, Array.from(dependencies));\n    }\n  }\n}\n\n// Main Conditional Property Renderer Component\nexport const ConditionalPropertyRenderer: React.FC<ConditionalPropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  nodeValues,\n  disabled = false,\n  context,\n}) => {\n  // Memoize the evaluator to prevent unnecessary re-computations\n  const evaluator = useMemo(() => new DisplayOptionsEvaluator(nodeValues), [nodeValues]);\n\n  // Evaluate display conditions\n  const displayState = useMemo(() => {\n    if (!property.displayOptions) {\n      return {\n        visible: true,\n        disabled: false,\n        required: property.required || false,\n      };\n    }\n\n    const result = evaluator.evaluateDisplayOptions(property.displayOptions);\n    return {\n      ...result,\n      required: result.required || property.required || false,\n    };\n  }, [property.displayOptions, property.required, evaluator]);\n\n  // Handle property change with dependency tracking\n  const handleChange = useCallback(\n    (newValue: any) => {\n      onChange(newValue);\n\n      // Trigger re-evaluation of dependent properties\n      // This would be handled by the parent form component\n    },\n    [onChange]\n  );\n\n  // Don't render if not visible\n  if (!displayState.visible) {\n    return null;\n  }\n\n  // Render with conditional state\n  return (\n    <div className={`property-field ${displayState.disabled ? 'opacity-50' : ''}`}>\n      <PropertyRenderer\n        property={{\n          ...property,\n          required: displayState.required,\n        }}\n        value={value}\n        onChange={handleChange}\n        disabled={disabled || displayState.disabled}\n        context={context}\n        nodeValues={nodeValues}\n      />\n    </div>\n  );\n};\n\n// Property Group Renderer with Conditional Logic\nexport interface PropertyGroupRendererProps {\n  properties: Array<INodeProperty & { displayOptions?: EnhancedDisplayOptions }>;\n  values: Record<string, any>;\n  onChange: (field: string, value: any) => void;\n  evaluationContext?: any;\n  disabled?: boolean;\n  context?: any;\n}\n\nexport const PropertyGroupRenderer: React.FC<PropertyGroupRendererProps> = ({\n  properties,\n  values,\n  onChange,\n  disabled = false,\n  context,\n}) => {\n  // Dependency tracker\n  const dependencyTracker = useMemo(() => {\n    const tracker = new PropertyDependencyTracker();\n\n    // Register all dependencies\n    properties.forEach((property) => {\n      if (property.displayOptions) {\n        tracker.extractDependencies(property.name, property.displayOptions);\n      }\n    });\n\n    return tracker;\n  }, [properties]);\n\n  // Handle field changes with dependency re-evaluation\n  const handleFieldChange = useCallback(\n    (fieldName: string, value: any) => {\n      onChange(fieldName, value);\n\n      // Find and trigger re-evaluation of dependent properties\n      const dependentProperties = dependencyTracker.getDependents(fieldName);\n      if (dependentProperties.length > 0) {\n        // The parent component should handle this by updating its state\n      }\n    },\n    [onChange, dependencyTracker]\n  );\n\n  return (\n    <div className=\"property-group space-y-4\">\n      {properties.map((property) => (\n        <ConditionalPropertyRenderer\n          key={property.name}\n          property={property}\n          value={values[property.name]}\n          onChange={(value) => handleFieldChange(property.name, value)}\n          nodeValues={values}\n          disabled={disabled}\n          context={context}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Export utility functions for external use\nexport const displayOptionsUtils = {\n  evaluateDisplayOptions: (\n    displayOptions: EnhancedDisplayOptions,\n    nodeValues: Record<string, any>\n  ) => {\n    const evaluator = new DisplayOptionsEvaluator(nodeValues);\n    return evaluator.evaluateDisplayOptions(displayOptions);\n  },\n\n  extractDependencies: (displayOptions: EnhancedDisplayOptions): string[] => {\n    const dependencies = new Set<string>();\n\n    if (displayOptions.show) {\n      Object.keys(displayOptions.show).forEach((field) => dependencies.add(field));\n    }\n\n    if (displayOptions.hide) {\n      Object.keys(displayOptions.hide).forEach((field) => dependencies.add(field));\n    }\n\n    if (displayOptions.showIf) {\n      displayOptions.showIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if (displayOptions.hideIf) {\n      displayOptions.hideIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if (displayOptions.conditions) {\n      displayOptions.conditions.rules.forEach((rule) => dependencies.add(rule.field));\n    }\n\n    return Array.from(dependencies);\n  },\n};\n\nexport { DisplayOptionsEvaluator, PropertyDependencyTracker };\n\nexport default ConditionalPropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 1,
        "end": 507,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 507,
          "column": 2,
          "position": 4045
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/conditionalpropertyrenderer/ConditionalPropertyRenderer.tsx",
        "start": 3,
        "end": 509,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 509,
          "column": 2,
          "position": 4071
        }
      }
    },
    {
      "format": "javascript",
      "lines": 34,
      "fragment": " : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Database Icon */}\n            <NodeIcon icon={icon",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 59,
        "end": 92,
        "startLoc": {
          "line": 59,
          "column": 90,
          "position": 483
        },
        "endLoc": {
          "line": 92,
          "column": 5,
          "position": 645
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 69,
        "end": 121,
        "startLoc": {
          "line": 69,
          "column": 89,
          "position": 559
        },
        "endLoc": {
          "line": 121,
          "column": 10,
          "position": 862
        }
      }
    },
    {
      "format": "tsx",
      "lines": 49,
      "fragment": ";\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-blue-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-blue-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Database Icon */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 43,
        "end": 91,
        "startLoc": {
          "line": 43,
          "column": 2,
          "position": 377
        },
        "endLoc": {
          "line": 91,
          "column": 20,
          "position": 635
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 56,
        "end": 101,
        "startLoc": {
          "line": 56,
          "column": 2,
          "position": 538
        },
        "endLoc": {
          "line": 101,
          "column": 17,
          "position": 711
        }
      }
    },
    {
      "format": "javascript",
      "lines": 24,
      "fragment": ",\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* AI Agent Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={(",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 121,
        "end": 144,
        "startLoc": {
          "line": 121,
          "column": 6,
          "position": 803
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 920
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 74,
        "end": 95,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 564
        },
        "endLoc": {
          "line": 95,
          "column": 17,
          "position": 681
        }
      }
    },
    {
      "format": "javascript",
      "lines": 67,
      "fragment": "} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 139,
        "end": 205,
        "startLoc": {
          "line": 139,
          "column": 12,
          "position": 891
        },
        "endLoc": {
          "line": 205,
          "column": 2,
          "position": 1315
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 98,
        "end": 183,
        "startLoc": {
          "line": 98,
          "column": 2,
          "position": 704
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 1263
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "import type React from 'react';\nimport { useRef, useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport NodeToolbar from '../components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar';\nimport { useSmartMenuPosition } from '../hooks/useSmartMenuPosition';\nimport { useEnter } from './hooks/useEnter';\nimport { useEvent } from './hooks/useEvent';\nimport { useLeave } from './hooks/useLeave';\nimport { useRef } from './hooks/useRef';\nimport { useSmartMenuPosition } from './hooks/useSmartMenuPosition';\nimport { useState } from './hooks/useState';\nimport type { CustomNodeBodyProps } from './nodeUiRegistry';\nimport { NodeIcon, NodeLabel, StatusBadge } from './shared';\n\n/**\n * Custom AI Agent Node Body Component\n * Gmail-style UI with AI-specific features and handles\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 4,
          "position": 178
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 4,
          "position": 178
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "// Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef: menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 34,
        "end": 49,
        "startLoc": {
          "line": 34,
          "column": 3,
          "position": 292
        },
        "endLoc": {
          "line": 49,
          "column": 18,
          "position": 419
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 40,
        "end": 47,
        "startLoc": {
          "line": 40,
          "column": 3,
          "position": 335
        },
        "endLoc": {
          "line": 47,
          "column": 6,
          "position": 425
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": "menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Standard Input Handle */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 42,
        "end": 69,
        "startLoc": {
          "line": 42,
          "column": 2,
          "position": 381
        },
        "endLoc": {
          "line": 69,
          "column": 28,
          "position": 549
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 48,
        "end": 75,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 421
        },
        "endLoc": {
          "line": 75,
          "column": 19,
          "position": 589
        }
      }
    },
    {
      "format": "tsx",
      "lines": 73,
      "fragment": "{/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badge */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 141,
        "end": 213,
        "startLoc": {
          "line": 141,
          "column": 13,
          "position": 903
        },
        "endLoc": {
          "line": 213,
          "column": 19,
          "position": 1353
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/gmailnodebody/GmailNodeBody.tsx",
        "start": 119,
        "end": 191,
        "startLoc": {
          "line": 119,
          "column": 13,
          "position": 851
        },
        "endLoc": {
          "line": 191,
          "column": 24,
          "position": 1301
        }
      }
    },
    {
      "format": "javascript",
      "lines": 237,
      "fragment": "={index} className=\"text-red-600\">\n                      • {error}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            {result.warnings.length > 0 && (\n              <div>\n                <strong>Warnings:</strong>\n                <ul className=\"mt-1\">\n                  {result.warnings.map((warning: string, index: number) => (\n                    <li key={index} className=\"text-orange-600\">\n                      • {warning}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            {result.estimatedDuration && (\n              <div className=\"mt-2\">\n                <strong>Estimated Duration:</strong> {Math.round(result.estimatedDuration / 1000)}s\n              </div>\n            )}\n          </div>\n        }\n      />\n    </div>\n  );\n\n  const renderExecutionResult = (exec: WorkflowExecution) => (\n    <div>\n      <div className=\"mb-4\">\n        <Alert\n          type={\n            exec.status === 'completed' ? 'success' : exec.status === 'failed' ? 'error' : 'info'\n          }\n          message={`Execution ${exec.status}`}\n          description={\n            <div>\n              <div>\n                Started: {exec.startedAt ? new Date(exec.startedAt).toLocaleString() : 'N/A'}\n              </div>\n              {exec.completedAt && (\n                <div>Completed: {new Date(exec.completedAt).toLocaleString()}</div>\n              )}\n              {exec.duration && <div>Duration: {Math.round(exec.duration / 1000)}s</div>}\n              <div>\n                Progress: {exec.progress?.completedNodes?.length || 0} /{' '}\n                {exec.progress?.totalNodes || 0} nodes\n              </div>\n            </div>\n          }\n        />\n      </div>\n\n      <Card title=\"Node Execution Timeline\" size=\"small\">\n        <Timeline>\n          {exec.results?.map((result) => (\n            <Timeline.Item\n              key={result.nodeId}\n              color={\n                result.status === 'success' ? 'green' : result.status === 'error' ? 'red' : 'gray'\n              }\n              dot={\n                result.status === 'success' ? (\n                  <CheckCircleOutlined />\n                ) : result.status === 'error' ? (\n                  <ExclamationCircleOutlined />\n                ) : undefined\n              }\n            >\n              <div>\n                <Space>\n                  <strong>{result.nodeName}</strong>\n                  <Tag color={result.status === 'success' ? 'green' : 'red'}>{result.status}</Tag>\n                  <span className=\"text-gray-500\">{Math.round(result.duration)}ms</span>\n                </Space>\n\n                {result.error && <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>}\n\n                {result.output && Object.keys(result.output).length > 0 && (\n                  <details className=\"mt-1\">\n                    <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                      View Output ({Object.keys(result.output).length} fields)\n                    </summary>\n                    <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                      {JSON.stringify(result.output, null, 2)}\n                    </pre>\n                  </details>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n\n          {exec.progress?.currentNodeId && exec.status === 'running' && (\n            <Timeline.Item color=\"blue\" dot={<Spin size=\"small\" />}>\n              <div>\n                <strong>Currently executing...</strong>\n                <div className=\"text-gray-500 text-sm\">Node: {exec.progress?.currentNodeId}</div>\n              </div>\n            </Timeline.Item>\n          )}\n        </Timeline>\n      </Card>\n\n      {exec.error && (\n        <Card title=\"Execution Error\" className=\"mt-4 border-red-200\">\n          <Alert\n            type=\"error\"\n            message={exec.error.message}\n            description={\n              <div>\n                {exec.error.nodeId && (\n                  <div>\n                    Failed at node: <code>{exec.error.nodeId}</code>\n                  </div>\n                )}\n                {exec.error.code && (\n                  <div>\n                    Error code: <code>{exec.error.code}</code>\n                  </div>\n                )}\n              </div>\n            }\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  const currentExecution = execution || testResult?.execution;\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <BugOutlined />\n          Workflow Tester\n          {!isConnected && executionId && <Tag color=\"orange\">Disconnected</Tag>}\n        </Space>\n      }\n      open={true}\n      onCancel={onClose}\n      width={800}\n      footer={[\n        <Button key=\"close\" onClick={onClose}>\n          Close\n        </Button>,\n        currentExecution?.status === 'running' ? (\n          <Button key=\"stop\" danger onClick={stopTest}>\n            Stop Test\n          </Button>\n        ) : (\n          <Button\n            key=\"test\"\n            type=\"primary\"\n            icon={<PlayCircleOutlined />}\n            loading={testing}\n            onClick={runTest}\n          >\n            Run Test\n          </Button>\n        ),\n      ]}\n    >\n      <div className=\"workflow-tester\">\n        <div className=\"mb-4\">\n          <Steps\n            current={testMode === 'validate' ? 0 : testMode === 'dry_run' ? 1 : 2}\n            size=\"small\"\n          >\n            <Step\n              title=\"Validate\"\n              description=\"Check workflow structure\"\n              onClick={() => setTestMode('validate')}\n              style={{ cursor: 'pointer' }}\n            />\n            <Step\n              title=\"Dry Run\"\n              description=\"Simulate execution\"\n              onClick={() => setTestMode('dry_run')}\n              style={{ cursor: 'pointer' }}\n            />\n            <Step\n              title=\"Full Test\"\n              description=\"Real execution\"\n              onClick={() => setTestMode('full_test')}\n              style={{ cursor: 'pointer' }}\n            />\n          </Steps>\n        </div>\n\n        {testMode === 'full_test' && (\n          <Card title=\"Test Configuration\" size=\"small\" className=\"mb-4\">\n            <Form layout=\"vertical\">\n              <Form.Item\n                label=\"Trigger Data (JSON)\"\n                help=\"Optional test data to trigger the workflow\"\n              >\n                <TextArea\n                  rows={4}\n                  placeholder={`{\n  \"subject\": \"Test email\",\n  \"from\": \"test@example.com\",\n  \"body\": \"This is a test customer support email about my order status.\"\n}`}\n                  value={triggerData}\n                  onChange={(e) => setTriggerData(e.target.value)}\n                />\n              </Form.Item>\n            </Form>\n          </Card>\n        )}\n\n        <Card title=\"Test Results\" size=\"small\" extra={testing && <Spin size=\"small\" />}>\n          {!testResult && !testing && (\n            <div className=\"text-gray-500 text-center py-8\">\n              Configure your test settings and click \"Run Test\" to begin\n            </div>\n          )}\n\n          {testing && (\n            <div className=\"text-center py-8\">\n              <Spin size=\"large\" />\n              <div className=\"mt-2\">\n                {testMode === 'validate'\n                  ? 'Validating workflow...'\n                  : testMode === 'dry_run'\n                    ? 'Running simulation...'\n                    : 'Executing workflow...'}\n              </div>\n            </div>\n          )}\n\n          {testResult && testResult.type === 'error' && (\n            <Alert type=\"error\" message=\"Test Failed\" description={testResult.error}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx",
        "start": 152,
        "end": 388,
        "startLoc": {
          "line": 152,
          "column": 4,
          "position": 1461
        },
        "endLoc": {
          "line": 388,
          "column": 2,
          "position": 3407
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx",
        "start": 154,
        "end": 390,
        "startLoc": {
          "line": 154,
          "column": 4,
          "position": 1487
        },
        "endLoc": {
          "line": 390,
          "column": 2,
          "position": 3433
        }
      }
    },
    {
      "format": "tsx",
      "lines": 401,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Workflow Tester Component - Test workflows before execution\n\nimport {\n  BugOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  PlayCircleOutlined,\n} from '@ant-design/icons';\nimport { Alert, Button, Card, Form, Input, Modal, Space, Spin, Steps, Tag, Timeline } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { WorkflowApiService } from '@/core';\n\nconst workflowApiService = new WorkflowApiService();\n\nimport type { Edge, Node } from 'reactflow';\nimport { useExecutionMonitor } from '@/app/services/executionMonitor';\nimport type { WorkflowExecution } from '@/core/types/execution';\nimport { exportWorkflowToBackend } from '@/core/utils/workflowExporter';\n\nconst { TextArea } = Input;\nconst { Step } = Steps;\n\nexport const WorkflowTester: React.FC<{\n  nodes: Node[];\n  edges: Edge[];\n  onClose: () => void;\n}> = ({ nodes, edges, onClose }) => {\n  const [testResult, setTestResult] = useState<any>(null);\n  const [testing, setTesting] = useState(false);\n  const [executionId, setExecutionId] = useState<string | null>(null);\n  const [triggerData, setTriggerData] = useState('');\n  const [testMode, setTestMode] = useState<'validate' | 'dry_run' | 'full_test'>('validate');\n\n  const { execution, isConnected } = useExecutionMonitor(executionId);\n\n  const runTest = async () => {\n    setTesting(true);\n    setTestResult(null);\n\n    try {\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n\n      if (testMode === 'validate') {\n        // Just validate the workflow structure\n        // Convert BackendWorkflow to WorkflowDefinition format\n        const workflowDefinition = {\n          name: `Test Workflow ${Date.now()}`,\n          version: 1,\n          nodes: workflowJson.nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: { x: node.position[0], y: node.position[1] },\n            data: {\n              label: node.name,\n              parameters: node.parameters,\n              credentials:\n                typeof node.credentials === 'object' && node.credentials\n                  ? Object.keys(node.credentials)[0] || undefined\n                  : (node.credentials as string | undefined),\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: [], // Convert connections to edges if needed\n          tags: ['test'],\n          isActive: true,\n        };\n        const result = await workflowApiService.testWorkflow(workflowDefinition);\n        setTestResult({\n          type: 'validation',\n          ...result,\n        });\n      } else if (testMode === 'dry_run') {\n        // Dry run - validate and simulate execution\n        // Convert BackendWorkflow to WorkflowDefinition format\n        const workflowDefinition = {\n          name: `Test Workflow ${Date.now()}`,\n          version: 1,\n          nodes: workflowJson.nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: { x: node.position[0], y: node.position[1] },\n            data: {\n              label: node.name,\n              parameters: node.parameters,\n              credentials:\n                typeof node.credentials === 'object' && node.credentials\n                  ? Object.keys(node.credentials)[0] || undefined\n                  : (node.credentials as string | undefined),\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: [], // Convert connections to edges if needed\n          tags: ['test'],\n          isActive: true,\n        };\n        const result = await workflowApiService.testWorkflow(workflowDefinition);\n        setTestResult({\n          type: 'dry_run',\n          ...result,\n        });\n      } else {\n        // Full test execution\n        const triggerPayload = triggerData ? JSON.parse(triggerData) : undefined;\n        const result = await workflowApiService.executeWorkflow({\n          workflow: workflowJson,\n          triggerData: triggerPayload,\n          options: {\n            timeout: 300000, // 5 minutes\n          },\n        });\n\n        setExecutionId(result.id);\n        setTestResult({\n          type: 'full_execution',\n          execution: result,\n        });\n      }\n    } catch (error: any) {\n      setTestResult({\n        type: 'error',\n        error: error.message || 'Test execution failed',\n      });\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const stopTest = async () => {\n    if (executionId) {\n      try {\n        await workflowApiService.stopExecution(executionId);\n      } catch (_error) {}\n    }\n  };\n\n  const renderValidationResult = (result: any) => (\n    <div>\n      <Alert\n        type={result.isValid ? 'success' : 'error'}\n        message={result.isValid ? 'Workflow is valid' : 'Workflow validation failed'}\n        description={\n          <div>\n            {result.errors.length > 0 && (\n              <div className=\"mb-2\">\n                <strong>Errors:</strong>\n                <ul className=\"mt-1\">\n                  {result.errors.map((error: string, index: number) => (\n                    <li key={index} className=\"text-red-600\">\n                      • {error}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            {result.warnings.length > 0 && (\n              <div>\n                <strong>Warnings:</strong>\n                <ul className=\"mt-1\">\n                  {result.warnings.map((warning: string, index: number) => (\n                    <li key={index} className=\"text-orange-600\">\n                      • {warning}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            {result.estimatedDuration && (\n              <div className=\"mt-2\">\n                <strong>Estimated Duration:</strong> {Math.round(result.estimatedDuration / 1000)}s\n              </div>\n            )}\n          </div>\n        }\n      />\n    </div>\n  );\n\n  const renderExecutionResult = (exec: WorkflowExecution) => (\n    <div>\n      <div className=\"mb-4\">\n        <Alert\n          type={\n            exec.status === 'completed' ? 'success' : exec.status === 'failed' ? 'error' : 'info'\n          }\n          message={`Execution ${exec.status}`}\n          description={\n            <div>\n              <div>\n                Started: {exec.startedAt ? new Date(exec.startedAt).toLocaleString() : 'N/A'}\n              </div>\n              {exec.completedAt && (\n                <div>Completed: {new Date(exec.completedAt).toLocaleString()}</div>\n              )}\n              {exec.duration && <div>Duration: {Math.round(exec.duration / 1000)}s</div>}\n              <div>\n                Progress: {exec.progress?.completedNodes?.length || 0} /{' '}\n                {exec.progress?.totalNodes || 0} nodes\n              </div>\n            </div>\n          }\n        />\n      </div>\n\n      <Card title=\"Node Execution Timeline\" size=\"small\">\n        <Timeline>\n          {exec.results?.map((result) => (\n            <Timeline.Item\n              key={result.nodeId}\n              color={\n                result.status === 'success' ? 'green' : result.status === 'error' ? 'red' : 'gray'\n              }\n              dot={\n                result.status === 'success' ? (\n                  <CheckCircleOutlined />\n                ) : result.status === 'error' ? (\n                  <ExclamationCircleOutlined />\n                ) : undefined\n              }\n            >\n              <div>\n                <Space>\n                  <strong>{result.nodeName}</strong>\n                  <Tag color={result.status === 'success' ? 'green' : 'red'}>{result.status}</Tag>\n                  <span className=\"text-gray-500\">{Math.round(result.duration)}ms</span>\n                </Space>\n\n                {result.error && <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>}\n\n                {result.output && Object.keys(result.output).length > 0 && (\n                  <details className=\"mt-1\">\n                    <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                      View Output ({Object.keys(result.output).length} fields)\n                    </summary>\n                    <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                      {JSON.stringify(result.output, null, 2)}\n                    </pre>\n                  </details>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n\n          {exec.progress?.currentNodeId && exec.status === 'running' && (\n            <Timeline.Item color=\"blue\" dot={<Spin size=\"small\" />}>\n              <div>\n                <strong>Currently executing...</strong>\n                <div className=\"text-gray-500 text-sm\">Node: {exec.progress?.currentNodeId}</div>\n              </div>\n            </Timeline.Item>\n          )}\n        </Timeline>\n      </Card>\n\n      {exec.error && (\n        <Card title=\"Execution Error\" className=\"mt-4 border-red-200\">\n          <Alert\n            type=\"error\"\n            message={exec.error.message}\n            description={\n              <div>\n                {exec.error.nodeId && (\n                  <div>\n                    Failed at node: <code>{exec.error.nodeId}</code>\n                  </div>\n                )}\n                {exec.error.code && (\n                  <div>\n                    Error code: <code>{exec.error.code}</code>\n                  </div>\n                )}\n              </div>\n            }\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  const currentExecution = execution || testResult?.execution;\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <BugOutlined />\n          Workflow Tester\n          {!isConnected && executionId && <Tag color=\"orange\">Disconnected</Tag>}\n        </Space>\n      }\n      open={true}\n      onCancel={onClose}\n      width={800}\n      footer={[\n        <Button key=\"close\" onClick={onClose}>\n          Close\n        </Button>,\n        currentExecution?.status === 'running' ? (\n          <Button key=\"stop\" danger onClick={stopTest}>\n            Stop Test\n          </Button>\n        ) : (\n          <Button\n            key=\"test\"\n            type=\"primary\"\n            icon={<PlayCircleOutlined />}\n            loading={testing}\n            onClick={runTest}\n          >\n            Run Test\n          </Button>\n        ),\n      ]}\n    >\n      <div className=\"workflow-tester\">\n        <div className=\"mb-4\">\n          <Steps\n            current={testMode === 'validate' ? 0 : testMode === 'dry_run' ? 1 : 2}\n            size=\"small\"\n          >\n            <Step\n              title=\"Validate\"\n              description=\"Check workflow structure\"\n              onClick={() => setTestMode('validate')}\n              style={{ cursor: 'pointer' }}\n            />\n            <Step\n              title=\"Dry Run\"\n              description=\"Simulate execution\"\n              onClick={() => setTestMode('dry_run')}\n              style={{ cursor: 'pointer' }}\n            />\n            <Step\n              title=\"Full Test\"\n              description=\"Real execution\"\n              onClick={() => setTestMode('full_test')}\n              style={{ cursor: 'pointer' }}\n            />\n          </Steps>\n        </div>\n\n        {testMode === 'full_test' && (\n          <Card title=\"Test Configuration\" size=\"small\" className=\"mb-4\">\n            <Form layout=\"vertical\">\n              <Form.Item\n                label=\"Trigger Data (JSON)\"\n                help=\"Optional test data to trigger the workflow\"\n              >\n                <TextArea\n                  rows={4}\n                  placeholder={`{\n  \"subject\": \"Test email\",\n  \"from\": \"test@example.com\",\n  \"body\": \"This is a test customer support email about my order status.\"\n}`}\n                  value={triggerData}\n                  onChange={(e) => setTriggerData(e.target.value)}\n                />\n              </Form.Item>\n            </Form>\n          </Card>\n        )}\n\n        <Card title=\"Test Results\" size=\"small\" extra={testing && <Spin size=\"small\" />}>\n          {!testResult && !testing && (\n            <div className=\"text-gray-500 text-center py-8\">\n              Configure your test settings and click \"Run Test\" to begin\n            </div>\n          )}\n\n          {testing && (\n            <div className=\"text-center py-8\">\n              <Spin size=\"large\" />\n              <div className=\"mt-2\">\n                {testMode === 'validate'\n                  ? 'Validating workflow...'\n                  : testMode === 'dry_run'\n                    ? 'Running simulation...'\n                    : 'Executing workflow...'}\n              </div>\n            </div>\n          )}\n\n          {testResult && testResult.type === 'error' && (\n            <Alert type=\"error\" message=\"Test Failed\" description={testResult.error} />\n          )}\n\n          {testResult &&\n            (testResult.type === 'validation' || testResult.type === 'dry_run') &&\n            renderValidationResult(testResult)}\n\n          {(testResult?.type === 'full_execution' || currentExecution) &&\n            renderExecutionResult(currentExecution)}\n        </Card>\n      </div>\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx",
        "start": 1,
        "end": 401,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 401,
          "column": 2,
          "position": 3499
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/workflowtester/WorkflowTester.tsx",
        "start": 3,
        "end": 403,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 403,
          "column": 2,
          "position": 3525
        }
      }
    },
    {
      "format": "javascript",
      "lines": 463,
      "fragment": "={template.id}\n          actions={[\n            <Button\n              type=\"link\"\n              icon={isFavorite ? <HeartFilled /> : <HeartOutlined />}\n              onClick={() => handleToggleFavorite(template.id)}\n              style={{ color: isFavorite ? colors.error[500] : undefined }}\n            />,\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedTemplate(template);\n                setTemplateModalVisible(true);\n              }}\n            >\n              Preview\n            </Button>,\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => handleCreateFromTemplate(template)}\n            >\n              Use Template\n            </Button>,\n          ]}\n        >\n          <List.Item.Meta\n            avatar={<Avatar>{getCategoryIcon(template.category)}</Avatar>}\n            title={\n              <Space>\n                {template.name}\n                <Tag color={getDifficultyColor(template.difficulty)}>{template.difficulty}</Tag>\n                <Rate disabled defaultValue={template.metadata.rating} />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {template.description}\n                <Space>\n                  <Tag>{template.category}</Tag>\n                  <Text type=\"secondary\">\n                    <ClockCircleOutlined /> {template.estimatedSetupTime} min\n                  </Text>\n                  <Text type=\"secondary\">\n                    <EyeOutlined /> {template.metadata.usageCount} uses\n                  </Text>\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      );\n    }\n\n    return (\n      <Card\n        key={template.id}\n        hoverable\n        className=\"template-card\"\n        cover={\n          <div className=\"h-32 bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center text-4xl\">\n            {getCategoryIcon(template.category)}\n          </div>\n        }\n        actions={[\n          <Button\n            type=\"link\"\n            icon={isFavorite ? <HeartFilled /> : <HeartOutlined />}\n            onClick={() => handleToggleFavorite(template.id)}\n            style={{ color: isFavorite ? colors.error[500] : undefined }}\n          />,\n          <Button\n            type=\"link\"\n            icon={<EyeOutlined />}\n            onClick={() => {\n              setSelectedTemplate(template);\n              setTemplateModalVisible(true);\n            }}\n          />,\n          <Button\n            type=\"primary\"\n            icon={<DownloadOutlined />}\n            onClick={() => handleCreateFromTemplate(template)}\n          />,\n        ]}\n      >\n        <Meta\n          title={\n            <Space direction=\"vertical\" size=\"small\">\n              <Text strong>{template.name}</Text>\n              <Space>\n                <Tag color={getDifficultyColor(template.difficulty)}>{template.difficulty}</Tag>\n                <Rate disabled defaultValue={template.metadata.rating} />\n              </Space>\n            </Space>\n          }\n          description={\n            <Space direction=\"vertical\" size=\"small\">\n              <Text ellipsis={{ tooltip: template.description }}>{template.description}</Text>\n              <Space>\n                <Text type=\"secondary\">\n                  <ClockCircleOutlined /> {template.estimatedSetupTime} min\n                </Text>\n                <Text type=\"secondary\">\n                  <EyeOutlined /> {template.metadata.usageCount}\n                </Text>\n              </Space>\n            </Space>\n          }\n        />\n      </Card>\n    );\n  };\n\n  const renderTemplateModal = () => {\n    if (!selectedTemplate) return null;\n\n    return (\n      <Modal\n        title={selectedTemplate.name}\n        open={templateModalVisible}\n        onCancel={() => setTemplateModalVisible(false)}\n        footer={[\n          <Button key=\"close\" onClick={() => setTemplateModalVisible(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"use\"\n            type=\"primary\"\n            icon={<DownloadOutlined />}\n            onClick={() => {\n              handleCreateFromTemplate(selectedTemplate);\n              setTemplateModalVisible(false);\n            }}\n          >\n            Use This Template\n          </Button>,\n        ]}\n        width={800}\n      >\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          <div>\n            <Paragraph>{selectedTemplate.description}</Paragraph>\n            <Space wrap>\n              {selectedTemplate.tags.map((tag) => (\n                <Tag key={tag}>{tag}</Tag>\n              ))}\n            </Space>\n          </div>\n\n          <Row gutter={16}>\n            <Col span={8}>\n              <Statistic\n                title=\"Difficulty\"\n                value={selectedTemplate.difficulty}\n                valueStyle={{\n                  color: getDifficultyColor(selectedTemplate.difficulty),\n                }}\n              />\n            </Col>\n            <Col span={8}>\n              <Statistic\n                title=\"Setup Time\"\n                value={selectedTemplate.estimatedSetupTime}\n                suffix=\"min\"\n              />\n            </Col>\n            <Col span={8}>\n              <Statistic\n                title=\"Rating\"\n                value={selectedTemplate.metadata.rating}\n                suffix={<StarOutlined />}\n              />\n            </Col>\n          </Row>\n\n          <div>\n            <Title level={5}>Required Integrations</Title>\n            <Space wrap>\n              {selectedTemplate.configuration.requiredIntegrations.map((integration) => (\n                <Tag key={integration} color=\"blue\">\n                  {integration}\n                </Tag>\n              ))}\n            </Space>\n          </div>\n\n          <div>\n            <Title level={5}>Workflow Structure</Title>\n            <Text>\n              {selectedTemplate.nodes.length} nodes, {selectedTemplate.edges.length} connections\n            </Text>\n            {selectedTemplate.configuration.conditionalBranches > 0 && (\n              <Tag color=\"orange\" style={{ marginLeft: 8 }}>\n                <BranchesOutlined /> {selectedTemplate.configuration.conditionalBranches} branches\n              </Tag>\n            )}\n            {selectedTemplate.configuration.schedulingRequired && (\n              <Tag color=\"purple\" style={{ marginLeft: 8 }}>\n                <ClockCircleOutlined /> Scheduling\n              </Tag>\n            )}\n            {selectedTemplate.configuration.triggersRequired && (\n              <Tag color=\"green\" style={{ marginLeft: 8 }}>\n                <ThunderboltOutlined /> Triggers\n              </Tag>\n            )}\n          </div>\n\n          <div>\n            <Title level={5}>Resource Requirements</Title>\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <div>\n                <Text>Memory: </Text>\n                <Progress\n                  percent={\n                    selectedTemplate.configuration.resourceRequirements.memory === 'low'\n                      ? 25\n                      : selectedTemplate.configuration.resourceRequirements.memory === 'medium'\n                        ? 50\n                        : 75\n                  }\n                  size=\"small\"\n                  status=\"active\"\n                />\n              </div>\n              <div>\n                <Text>CPU: </Text>\n                <Progress\n                  percent={\n                    selectedTemplate.configuration.resourceRequirements.cpu === 'low'\n                      ? 25\n                      : selectedTemplate.configuration.resourceRequirements.cpu === 'medium'\n                        ? 50\n                        : 75\n                  }\n                  size=\"small\"\n                  status=\"active\"\n                />\n              </div>\n            </Space>\n          </div>\n\n          {selectedTemplate.variables.length > 0 && (\n            <div>\n              <Title level={5}>Configuration Variables</Title>\n              <List\n                size=\"small\"\n                dataSource={selectedTemplate.variables}\n                renderItem={(variable) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      title={`${variable.name} (${variable.type})`}\n                      description={variable.description}\n                    />\n                    {variable.required && <Tag color=\"red\">Required</Tag>}\n                  </List.Item>\n                )}\n              />\n            </div>\n          )}\n        </Space>\n      </Modal>\n    );\n  };\n\n  const renderPatternsList = () => (\n    <List\n      dataSource={patterns}\n      renderItem={(pattern) => (\n        <List.Item\n          actions={[\n            <Button type=\"link\" icon={<InfoCircleOutlined />}>\n              Learn More\n            </Button>,\n          ]}\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar>\n                {pattern.pattern === 'sequential'\n                  ? '→'\n                  : pattern.pattern === 'parallel'\n                    ? '⚡'\n                    : '🔀'}\n              </Avatar>\n            }\n            title={pattern.name}\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {pattern.description}\n                <Space>\n                  <Tag\n                    color={\n                      pattern.complexity === 'simple'\n                        ? 'green'\n                        : pattern.complexity === 'moderate'\n                          ? 'orange'\n                          : 'red'\n                    }\n                  >\n                    {pattern.complexity}\n                  </Tag>\n                  <Text type=\"secondary\">Applicable to: {pattern.applicableNodes.join(', ')}</Text>\n                </Space>\n                <div>\n                  <Text strong>Benefits: </Text>\n                  {pattern.benefits.map((benefit, index) => (\n                    <Tag key={index} color=\"blue\">\n                      {benefit}\n                    </Tag>\n                  ))}\n                </div>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n\n  const categories: Array<{ value: TemplateCategory | 'all'; label: string }> = [\n    { value: 'all', label: 'All Categories' },\n    { value: 'communication', label: 'Communication' },\n    { value: 'data-processing', label: 'Data Processing' },\n    { value: 'automation', label: 'Automation' },\n    { value: 'ai-ml', label: 'AI & ML' },\n    { value: 'business', label: 'Business' },\n    { value: 'development', label: 'Development' },\n    { value: 'monitoring', label: 'Monitoring' },\n    { value: 'integration', label: 'Integration' },\n    { value: 'social-media', label: 'Social Media' },\n    { value: 'ecommerce', label: 'E-commerce' },\n  ];\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <AppstoreOutlined />\n          Workflow Templates\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className={cn('workflow-templates-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <AppstoreOutlined />\n              Browse Templates ({filteredTemplates.length})\n            </span>\n          }\n          key=\"browse\"\n        >\n          <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n            {/* Filters and Search */}\n            <Row gutter={16} align=\"middle\">\n              <Col flex=\"auto\">\n                <Search\n                  placeholder=\"Search templates...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  style={{ width: '100%' }}\n                />\n              </Col>\n              <Col>\n                <Select\n                  value={selectedCategory}\n                  onChange={setSelectedCategory}\n                  style={{ width: 180 }}\n                >\n                  {categories.map((cat) => (\n                    <Option key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n              <Col>\n                <Select value={sortBy} onChange={setSortBy} style={{ width: 120 }}>\n                  <Option value=\"rating\">Rating</Option>\n                  <Option value=\"usage\">Usage</Option>\n                  <Option value=\"name\">Name</Option>\n                  <Option value=\"recent\">Recent</Option>\n                </Select>\n              </Col>\n              <Col>\n                <Button.Group>\n                  <Button\n                    icon={<AppstoreOutlined />}\n                    type={viewMode === 'grid' ? 'primary' : 'default'}\n                    onClick={() => setViewMode('grid')}\n                  />\n                  <Button\n                    icon={<OrderedListOutlined />}\n                    type={viewMode === 'list' ? 'primary' : 'default'}\n                    onClick={() => setViewMode('list')}\n                  />\n                </Button.Group>\n              </Col>\n            </Row>\n\n            {/* Templates Grid/List */}\n            {filteredTemplates.length === 0 ? (\n              <Empty description=\"No templates found\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n            ) : viewMode === 'grid' ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {filteredTemplates.map(renderTemplateCard)}\n              </div>\n            ) : (\n              <List\n                dataSource={filteredTemplates}\n                renderItem={renderTemplateCard}\n                pagination={{\n                  pageSize: 10,\n                  showSizeChanger: false,\n                }}\n              />\n            )}\n          </Space>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <HeartOutlined />\n              Favorites ({workflowTemplates.getFavoriteTemplates().length})\n            </span>\n          }\n          key=\"favorites\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {workflowTemplates.getFavoriteTemplates().map(renderTemplateCard)}\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ClockCircleOutlined />\n              Recent\n            </span>\n          }\n          key=\"recent\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {workflowTemplates.getRecentlyUsedTemplates().map(renderTemplateCard)}\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Patterns ({patterns.length})\n            </span>\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx",
        "start": 208,
        "end": 670,
        "startLoc": {
          "line": 208,
          "column": 4,
          "position": 1705
        },
        "endLoc": {
          "line": 670,
          "column": 2,
          "position": 5123
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/workflowtemplatespanel/WorkflowTemplatesPanel.tsx",
        "start": 211,
        "end": 673,
        "startLoc": {
          "line": 211,
          "column": 4,
          "position": 1744
        },
        "endLoc": {
          "line": 673,
          "column": 2,
          "position": 5162
        }
      }
    },
    {
      "format": "tsx",
      "lines": 680,
      "fragment": "/**\n * Workflow Templates Panel\n *\n * Template library browser with categories, search, favorites,\n * and quick workflow creation from pre-built templates.\n */\n\nimport {\n  AppstoreOutlined,\n  BranchesOutlined,\n  ClockCircleOutlined,\n  DownloadOutlined,\n  EyeOutlined,\n  HeartFilled,\n  HeartOutlined,\n  InfoCircleOutlined,\n  OrderedListOutlined,\n  StarOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Avatar,\n  Button,\n  Card,\n  Col,\n  Empty,\n  Input,\n  List,\n  Modal,\n  message,\n  Progress,\n  Rate,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Tabs,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type AutomationPattern,\n  type TemplateCategory,\n  type WorkflowTemplate,\n  workflowTemplates,\n} from '@/core/services/workflowTemplates';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { Search } = Input;\nconst { Text, Title, Paragraph } = Typography;\nconst { Meta } = Card;\n\ninterface WorkflowTemplatesPanelProps {\n  visible: boolean;\n  onClose: () => void;\n  onCreateFromTemplate: (templateId: string, variables?: Record<string, any>) => void;\n}\n\nexport const WorkflowTemplatesPanel: React.FC<WorkflowTemplatesPanelProps> = ({\n  visible,\n  onClose,\n  onCreateFromTemplate,\n}) => {\n  const { importWorkflow } = useLeanWorkflowStore();\n  const [templates, setTemplates] = useState<WorkflowTemplate[]>([]);\n  const [patterns, setPatterns] = useState<AutomationPattern[]>([]);\n  const [filteredTemplates, setFilteredTemplates] = useState<WorkflowTemplate[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<TemplateCategory | 'all'>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState<WorkflowTemplate | null>(null);\n  const [templateModalVisible, setTemplateModalVisible] = useState(false);\n  const [activeTab, setActiveTab] = useState('browse');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState<'name' | 'rating' | 'usage' | 'recent'>('rating');\n\n  useEffect(() => {\n    if (visible) {\n      loadTemplatesAndPatterns();\n    }\n  }, [visible, loadTemplatesAndPatterns]);\n\n  useEffect(() => {\n    filterTemplates();\n  }, [filterTemplates]);\n\n  const loadTemplatesAndPatterns = () => {\n    const allTemplates = workflowTemplates.getAllTemplates();\n    const allPatterns = workflowTemplates.getAutomationPatterns();\n\n    setTemplates(allTemplates);\n    setPatterns(allPatterns);\n  };\n\n  const filterTemplates = () => {\n    let filtered = [...templates];\n\n    // Category filter\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter((template) => template.category === selectedCategory);\n    }\n\n    // Search filter\n    if (searchQuery) {\n      filtered = workflowTemplates.searchTemplates(searchQuery);\n      if (selectedCategory !== 'all') {\n        filtered = filtered.filter((template) => template.category === selectedCategory);\n      }\n    }\n\n    // Sort\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'rating':\n          return b.metadata.rating - a.metadata.rating;\n        case 'usage':\n          return b.metadata.usageCount - a.metadata.usageCount;\n        case 'recent':\n          return (\n            new Date(b.metadata.updatedAt).getTime() - new Date(a.metadata.updatedAt).getTime()\n          );\n        default:\n          return 0;\n      }\n    });\n\n    setFilteredTemplates(filtered);\n  };\n\n  const handleCreateFromTemplate = async (template: WorkflowTemplate) => {\n    try {\n      const result = workflowTemplates.createWorkflowFromTemplate(template.id);\n      if (result) {\n        importWorkflow({\n          id: `template_${template.id}_${Date.now()}`,\n          name: template.name,\n          description: template.description,\n          nodes: result.nodes,\n          connections: {},\n        } as any);\n        onCreateFromTemplate(template.id);\n        message.success(`Created workflow from \"${template.name}\" template`);\n        onClose();\n      }\n    } catch (_error) {\n      message.error('Failed to create workflow from template');\n    }\n  };\n\n  const handleToggleFavorite = (templateId: string) => {\n    const favorites = workflowTemplates.getFavoriteTemplates();\n    const isFavorite = favorites.some((t) => t.id === templateId);\n\n    if (isFavorite) {\n      workflowTemplates.removeFromFavorites(templateId);\n      message.success('Removed from favorites');\n    } else {\n      workflowTemplates.addToFavorites(templateId);\n      message.success('Added to favorites');\n    }\n\n    loadTemplatesAndPatterns(); // Refresh to update favorites\n  };\n\n  const getCategoryIcon = (category: TemplateCategory) => {\n    const iconMap = {\n      communication: '💬',\n      'data-processing': '📊',\n      automation: '🤖',\n      'ai-ml': '🧠',\n      business: '💼',\n      development: '⚙️',\n      monitoring: '📈',\n      integration: '🔗',\n      'social-media': '📱',\n      ecommerce: '🛒',\n    };\n    return iconMap[category] || '📄';\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner':\n        return 'green';\n      case 'intermediate':\n        return 'orange';\n      case 'advanced':\n        return 'red';\n      default:\n        return 'default';\n    }\n  };\n\n  const renderTemplateCard = (template: WorkflowTemplate) => {\n    const favorites = workflowTemplates.getFavoriteTemplates();\n    const isFavorite = favorites.some((t) => t.id === template.id);\n\n    if (viewMode === 'list') {\n      return (\n        <List.Item\n          key={template.id}\n          actions={[\n            <Button\n              type=\"link\"\n              icon={isFavorite ? <HeartFilled /> : <HeartOutlined />}\n              onClick={() => handleToggleFavorite(template.id)}\n              style={{ color: isFavorite ? colors.error[500] : undefined }}\n            />,\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedTemplate(template);\n                setTemplateModalVisible(true);\n              }}\n            >\n              Preview\n            </Button>,\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => handleCreateFromTemplate(template)}\n            >\n              Use Template\n            </Button>,\n          ]}\n        >\n          <List.Item.Meta\n            avatar={<Avatar>{getCategoryIcon(template.category)}</Avatar>}\n            title={\n              <Space>\n                {template.name}\n                <Tag color={getDifficultyColor(template.difficulty)}>{template.difficulty}</Tag>\n                <Rate disabled defaultValue={template.metadata.rating} />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {template.description}\n                <Space>\n                  <Tag>{template.category}</Tag>\n                  <Text type=\"secondary\">\n                    <ClockCircleOutlined /> {template.estimatedSetupTime} min\n                  </Text>\n                  <Text type=\"secondary\">\n                    <EyeOutlined /> {template.metadata.usageCount} uses\n                  </Text>\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      );\n    }\n\n    return (\n      <Card\n        key={template.id}\n        hoverable\n        className=\"template-card\"\n        cover={\n          <div className=\"h-32 bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center text-4xl\">\n            {getCategoryIcon(template.category)}\n          </div>\n        }\n        actions={[\n          <Button\n            type=\"link\"\n            icon={isFavorite ? <HeartFilled /> : <HeartOutlined />}\n            onClick={() => handleToggleFavorite(template.id)}\n            style={{ color: isFavorite ? colors.error[500] : undefined }}\n          />,\n          <Button\n            type=\"link\"\n            icon={<EyeOutlined />}\n            onClick={() => {\n              setSelectedTemplate(template);\n              setTemplateModalVisible(true);\n            }}\n          />,\n          <Button\n            type=\"primary\"\n            icon={<DownloadOutlined />}\n            onClick={() => handleCreateFromTemplate(template)}\n          />,\n        ]}\n      >\n        <Meta\n          title={\n            <Space direction=\"vertical\" size=\"small\">\n              <Text strong>{template.name}</Text>\n              <Space>\n                <Tag color={getDifficultyColor(template.difficulty)}>{template.difficulty}</Tag>\n                <Rate disabled defaultValue={template.metadata.rating} />\n              </Space>\n            </Space>\n          }\n          description={\n            <Space direction=\"vertical\" size=\"small\">\n              <Text ellipsis={{ tooltip: template.description }}>{template.description}</Text>\n              <Space>\n                <Text type=\"secondary\">\n                  <ClockCircleOutlined /> {template.estimatedSetupTime} min\n                </Text>\n                <Text type=\"secondary\">\n                  <EyeOutlined /> {template.metadata.usageCount}\n                </Text>\n              </Space>\n            </Space>\n          }\n        />\n      </Card>\n    );\n  };\n\n  const renderTemplateModal = () => {\n    if (!selectedTemplate) return null;\n\n    return (\n      <Modal\n        title={selectedTemplate.name}\n        open={templateModalVisible}\n        onCancel={() => setTemplateModalVisible(false)}\n        footer={[\n          <Button key=\"close\" onClick={() => setTemplateModalVisible(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"use\"\n            type=\"primary\"\n            icon={<DownloadOutlined />}\n            onClick={() => {\n              handleCreateFromTemplate(selectedTemplate);\n              setTemplateModalVisible(false);\n            }}\n          >\n            Use This Template\n          </Button>,\n        ]}\n        width={800}\n      >\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          <div>\n            <Paragraph>{selectedTemplate.description}</Paragraph>\n            <Space wrap>\n              {selectedTemplate.tags.map((tag) => (\n                <Tag key={tag}>{tag}</Tag>\n              ))}\n            </Space>\n          </div>\n\n          <Row gutter={16}>\n            <Col span={8}>\n              <Statistic\n                title=\"Difficulty\"\n                value={selectedTemplate.difficulty}\n                valueStyle={{\n                  color: getDifficultyColor(selectedTemplate.difficulty),\n                }}\n              />\n            </Col>\n            <Col span={8}>\n              <Statistic\n                title=\"Setup Time\"\n                value={selectedTemplate.estimatedSetupTime}\n                suffix=\"min\"\n              />\n            </Col>\n            <Col span={8}>\n              <Statistic\n                title=\"Rating\"\n                value={selectedTemplate.metadata.rating}\n                suffix={<StarOutlined />}\n              />\n            </Col>\n          </Row>\n\n          <div>\n            <Title level={5}>Required Integrations</Title>\n            <Space wrap>\n              {selectedTemplate.configuration.requiredIntegrations.map((integration) => (\n                <Tag key={integration} color=\"blue\">\n                  {integration}\n                </Tag>\n              ))}\n            </Space>\n          </div>\n\n          <div>\n            <Title level={5}>Workflow Structure</Title>\n            <Text>\n              {selectedTemplate.nodes.length} nodes, {selectedTemplate.edges.length} connections\n            </Text>\n            {selectedTemplate.configuration.conditionalBranches > 0 && (\n              <Tag color=\"orange\" style={{ marginLeft: 8 }}>\n                <BranchesOutlined /> {selectedTemplate.configuration.conditionalBranches} branches\n              </Tag>\n            )}\n            {selectedTemplate.configuration.schedulingRequired && (\n              <Tag color=\"purple\" style={{ marginLeft: 8 }}>\n                <ClockCircleOutlined /> Scheduling\n              </Tag>\n            )}\n            {selectedTemplate.configuration.triggersRequired && (\n              <Tag color=\"green\" style={{ marginLeft: 8 }}>\n                <ThunderboltOutlined /> Triggers\n              </Tag>\n            )}\n          </div>\n\n          <div>\n            <Title level={5}>Resource Requirements</Title>\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <div>\n                <Text>Memory: </Text>\n                <Progress\n                  percent={\n                    selectedTemplate.configuration.resourceRequirements.memory === 'low'\n                      ? 25\n                      : selectedTemplate.configuration.resourceRequirements.memory === 'medium'\n                        ? 50\n                        : 75\n                  }\n                  size=\"small\"\n                  status=\"active\"\n                />\n              </div>\n              <div>\n                <Text>CPU: </Text>\n                <Progress\n                  percent={\n                    selectedTemplate.configuration.resourceRequirements.cpu === 'low'\n                      ? 25\n                      : selectedTemplate.configuration.resourceRequirements.cpu === 'medium'\n                        ? 50\n                        : 75\n                  }\n                  size=\"small\"\n                  status=\"active\"\n                />\n              </div>\n            </Space>\n          </div>\n\n          {selectedTemplate.variables.length > 0 && (\n            <div>\n              <Title level={5}>Configuration Variables</Title>\n              <List\n                size=\"small\"\n                dataSource={selectedTemplate.variables}\n                renderItem={(variable) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      title={`${variable.name} (${variable.type})`}\n                      description={variable.description}\n                    />\n                    {variable.required && <Tag color=\"red\">Required</Tag>}\n                  </List.Item>\n                )}\n              />\n            </div>\n          )}\n        </Space>\n      </Modal>\n    );\n  };\n\n  const renderPatternsList = () => (\n    <List\n      dataSource={patterns}\n      renderItem={(pattern) => (\n        <List.Item\n          actions={[\n            <Button type=\"link\" icon={<InfoCircleOutlined />}>\n              Learn More\n            </Button>,\n          ]}\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar>\n                {pattern.pattern === 'sequential'\n                  ? '→'\n                  : pattern.pattern === 'parallel'\n                    ? '⚡'\n                    : '🔀'}\n              </Avatar>\n            }\n            title={pattern.name}\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {pattern.description}\n                <Space>\n                  <Tag\n                    color={\n                      pattern.complexity === 'simple'\n                        ? 'green'\n                        : pattern.complexity === 'moderate'\n                          ? 'orange'\n                          : 'red'\n                    }\n                  >\n                    {pattern.complexity}\n                  </Tag>\n                  <Text type=\"secondary\">Applicable to: {pattern.applicableNodes.join(', ')}</Text>\n                </Space>\n                <div>\n                  <Text strong>Benefits: </Text>\n                  {pattern.benefits.map((benefit, index) => (\n                    <Tag key={index} color=\"blue\">\n                      {benefit}\n                    </Tag>\n                  ))}\n                </div>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n    />\n  );\n\n  const categories: Array<{ value: TemplateCategory | 'all'; label: string }> = [\n    { value: 'all', label: 'All Categories' },\n    { value: 'communication', label: 'Communication' },\n    { value: 'data-processing', label: 'Data Processing' },\n    { value: 'automation', label: 'Automation' },\n    { value: 'ai-ml', label: 'AI & ML' },\n    { value: 'business', label: 'Business' },\n    { value: 'development', label: 'Development' },\n    { value: 'monitoring', label: 'Monitoring' },\n    { value: 'integration', label: 'Integration' },\n    { value: 'social-media', label: 'Social Media' },\n    { value: 'ecommerce', label: 'E-commerce' },\n  ];\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <AppstoreOutlined />\n          Workflow Templates\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className={cn('workflow-templates-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <AppstoreOutlined />\n              Browse Templates ({filteredTemplates.length})\n            </span>\n          }\n          key=\"browse\"\n        >\n          <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n            {/* Filters and Search */}\n            <Row gutter={16} align=\"middle\">\n              <Col flex=\"auto\">\n                <Search\n                  placeholder=\"Search templates...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  style={{ width: '100%' }}\n                />\n              </Col>\n              <Col>\n                <Select\n                  value={selectedCategory}\n                  onChange={setSelectedCategory}\n                  style={{ width: 180 }}\n                >\n                  {categories.map((cat) => (\n                    <Option key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n              <Col>\n                <Select value={sortBy} onChange={setSortBy} style={{ width: 120 }}>\n                  <Option value=\"rating\">Rating</Option>\n                  <Option value=\"usage\">Usage</Option>\n                  <Option value=\"name\">Name</Option>\n                  <Option value=\"recent\">Recent</Option>\n                </Select>\n              </Col>\n              <Col>\n                <Button.Group>\n                  <Button\n                    icon={<AppstoreOutlined />}\n                    type={viewMode === 'grid' ? 'primary' : 'default'}\n                    onClick={() => setViewMode('grid')}\n                  />\n                  <Button\n                    icon={<OrderedListOutlined />}\n                    type={viewMode === 'list' ? 'primary' : 'default'}\n                    onClick={() => setViewMode('list')}\n                  />\n                </Button.Group>\n              </Col>\n            </Row>\n\n            {/* Templates Grid/List */}\n            {filteredTemplates.length === 0 ? (\n              <Empty description=\"No templates found\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n            ) : viewMode === 'grid' ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {filteredTemplates.map(renderTemplateCard)}\n              </div>\n            ) : (\n              <List\n                dataSource={filteredTemplates}\n                renderItem={renderTemplateCard}\n                pagination={{\n                  pageSize: 10,\n                  showSizeChanger: false,\n                }}\n              />\n            )}\n          </Space>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <HeartOutlined />\n              Favorites ({workflowTemplates.getFavoriteTemplates().length})\n            </span>\n          }\n          key=\"favorites\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {workflowTemplates.getFavoriteTemplates().map(renderTemplateCard)}\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ClockCircleOutlined />\n              Recent\n            </span>\n          }\n          key=\"recent\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {workflowTemplates.getRecentlyUsedTemplates().map(renderTemplateCard)}\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Patterns ({patterns.length})\n            </span>\n          }\n          key=\"patterns\"\n        >\n          {renderPatternsList()}\n        </TabPane>\n      </Tabs>\n\n      {renderTemplateModal()}\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx",
        "start": 1,
        "end": 680,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 680,
          "column": 2,
          "position": 5168
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/workflowtemplatespanel/WorkflowTemplatesPanel.tsx",
        "start": 4,
        "end": 683,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 683,
          "column": 2,
          "position": 5207
        }
      }
    },
    {
      "format": "javascript",
      "lines": 180,
      "fragment": "={`cursor-${presence.userId}`}\n          className=\"absolute pointer-events-none z-50 transition-all duration-200\"\n          style={{\n            left: screenPos.x,\n            top: screenPos.y,\n            transform: 'translate(-2px, -2px)',\n          }}\n        >\n          {/* Cursor pointer */}\n          <div\n            className=\"relative\"\n            style={{\n              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))',\n            }}\n          >\n            <svg width=\"16\" height=\"20\" viewBox=\"0 0 16 20\" fill=\"none\" className=\"cursor-pointer\">\n              <path\n                d=\"M0 0L0 16L4.5 11.5L7 16.5L9.5 15L7 10L12 10L0 0Z\"\n                fill={userColor}\n                stroke=\"white\"\n                strokeWidth=\"1\"\n              />\n            </svg>\n\n            {/* User label */}\n            <div\n              className=\"absolute top-5 left-4 px-2 py-1 rounded text-xs font-medium text-white whitespace-nowrap\"\n              style={{\n                backgroundColor: userColor,\n                boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n              }}\n            >\n              {presence.user.name}\n            </div>\n          </div>\n        </div>\n      );\n    },\n    [showUserCursors, workflowToScreen, getUserColor]\n  );\n\n  // Render user selection highlights\n  const renderUserSelections = useCallback(\n    (presence: UserPresence) => {\n      if (!presence.selection?.nodeIds || !showUserSelections) return null;\n\n      const userColor = getUserColor(presence.userId);\n\n      return presence.selection.nodeIds\n        .map((nodeId) => {\n          const bounds = getNodeBounds(nodeId);\n          if (!bounds) return null;\n\n          return (\n            <div\n              key={`selection-${presence.userId}-${nodeId}`}\n              className=\"absolute pointer-events-none z-40 transition-all duration-200\"\n              style={{\n                left: bounds.x - 2,\n                top: bounds.y - 2,\n                width: bounds.width + 4,\n                height: bounds.height + 4,\n                border: `2px solid ${userColor}`,\n                borderRadius: '8px',\n                backgroundColor: `${userColor}20`,\n                boxShadow: `0 0 0 1px ${userColor}40`,\n              }}\n            >\n              {/* User avatar in corner */}\n              <div\n                className=\"absolute -top-3 -right-3\"\n                style={{\n                  filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',\n                }}\n              >\n                <Tooltip title={`${presence.user.name} selected this node`}>\n                  <Avatar\n                    size={20}\n                    src={presence.user.avatar}\n                    style={{\n                      backgroundColor: userColor,\n                      border: '2px solid white',\n                      fontSize: '10px',\n                    }}\n                  >\n                    {presence.user.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                </Tooltip>\n              </div>\n            </div>\n          );\n        })\n        .filter(Boolean);\n    },\n    [showUserSelections, getNodeBounds, getUserColor]\n  );\n\n  // Render viewport indicators (mini rectangles showing what other users see)\n  const renderViewportIndicators = useCallback(\n    (presence: UserPresence) => {\n      if (!presence.viewport) return null;\n\n      const userColor = getUserColor(presence.userId);\n      const viewport = presence.viewport;\n\n      // Calculate the viewport rectangle in screen coordinates\n      const viewportWidth = 400; // Approximate viewport width\n      const viewportHeight = 300; // Approximate viewport height\n\n      const screenPos = workflowToScreen(viewport.x, viewport.y);\n\n      return (\n        <div\n          key={`viewport-${presence.userId}`}\n          className=\"absolute pointer-events-none z-30 transition-all duration-500\"\n          style={{\n            left: screenPos.x,\n            top: screenPos.y,\n            width: viewportWidth * viewport.zoom * transform.zoom,\n            height: viewportHeight * viewport.zoom * transform.zoom,\n            border: `1px dashed ${userColor}60`,\n            borderRadius: '4px',\n          }}\n        >\n          {/* User label for viewport */}\n          <div\n            className=\"absolute -top-6 left-0 px-2 py-1 rounded text-xs text-white\"\n            style={{\n              backgroundColor: userColor,\n              opacity: 0.8,\n            }}\n          >\n            {presence.user.name}'s view\n          </div>\n        </div>\n      );\n    },\n    [workflowToScreen, getUserColor, transform.zoom]\n  );\n\n  // Don't render if container is not available\n  if (!containerRef.current) return null;\n\n  return (\n    <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n      {userPresences.map((presence) => (\n        <React.Fragment key={presence.userId}>\n          {renderUserCursor(presence)}\n          {renderUserSelections(presence)}\n          {renderViewportIndicators(presence)}\n        </React.Fragment>\n      ))}\n\n      {/* Connection status indicator */}\n      {userPresences.length > 0 && (\n        <div className=\"absolute top-4 right-4 pointer-events-auto z-50\">\n          <div className=\"flex items-center space-x-2 bg-white dark:bg-gray-800 px-3 py-2 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex -space-x-2\">\n              {userPresences.slice(0, 3).map((presence) => (\n                <Avatar\n                  key={presence.userId}\n                  size={24}\n                  src={presence.user.avatar}\n                  style={{\n                    backgroundColor: getUserColor(presence.userId),\n                    border: '2px solid white',\n                  }}\n                  className=\"shadow-sm\"\n                >\n                  {presence.user.name.charAt(0).toUpperCase()}\n                </Avatar>\n              ))}\n              {userPresences.length > 3 && (\n                <Avatar\n                  size={24}\n                  style={{\n                    backgroundColor: '#f0f0f0',\n                    color: '#666',\n                    border: '2px solid white',\n                  }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx",
        "start": 85,
        "end": 264,
        "startLoc": {
          "line": 85,
          "column": 4,
          "position": 702
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 1962
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx",
        "start": 88,
        "end": 267,
        "startLoc": {
          "line": 88,
          "column": 4,
          "position": 741
        },
        "endLoc": {
          "line": 267,
          "column": 2,
          "position": 2001
        }
      }
    },
    {
      "format": "tsx",
      "lines": 308,
      "fragment": "/**\n * User Presence Overlay\n *\n * Real-time visualization of user cursors, selections, and viewport indicators.\n * Shows collaborative user activity with smooth animations and clear visual cues.\n */\n\nimport { Avatar, Tooltip } from 'antd';\nimport React, { useCallback } from 'react';\nimport type { UserPresence } from '../../../core/services/collaborationService';\nimport { useCollaborationStore } from '../../../core/stores/collaborationStore';\nimport { useLeanWorkflowStore } from '../../../core/stores/leanWorkflowStore';\n\ninterface UserPresenceOverlayProps {\n  containerRef: React.RefObject<HTMLDivElement>;\n  transform: {\n    x: number;\n    y: number;\n    zoom: number;\n  };\n}\n\nexport const UserPresenceOverlay: React.FC<UserPresenceOverlayProps> = ({\n  containerRef,\n  transform,\n}) => {\n  const { userPresences, showUserCursors, showUserSelections } = useCollaborationStore();\n\n  const { nodes } = useLeanWorkflowStore();\n\n  // Generate consistent user colors\n  const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Convert workflow coordinates to screen coordinates\n  const workflowToScreen = useCallback(\n    (x: number, y: number) => ({\n      x: (x + transform.x) * transform.zoom,\n      y: (y + transform.y) * transform.zoom,\n    }),\n    [transform]\n  );\n\n  // Get node position and dimensions\n  const getNodeBounds = useCallback(\n    (nodeId: string) => {\n      const node = nodes.find((n) => n.id === nodeId);\n      if (!node) return null;\n\n      const screenPos = workflowToScreen(node.position.x, node.position.y);\n      return {\n        x: screenPos.x,\n        y: screenPos.y,\n        width: 240 * transform.zoom, // Standard node width\n        height: 100 * transform.zoom, // Standard node height\n      };\n    },\n    [nodes, workflowToScreen, transform.zoom]\n  );\n\n  // Render user cursor\n  const renderUserCursor = useCallback(\n    (presence: UserPresence) => {\n      if (!presence.cursor || !showUserCursors) return null;\n\n      const screenPos = workflowToScreen(presence.cursor.x, presence.cursor.y);\n      const userColor = getUserColor(presence.userId);\n\n      return (\n        <div\n          key={`cursor-${presence.userId}`}\n          className=\"absolute pointer-events-none z-50 transition-all duration-200\"\n          style={{\n            left: screenPos.x,\n            top: screenPos.y,\n            transform: 'translate(-2px, -2px)',\n          }}\n        >\n          {/* Cursor pointer */}\n          <div\n            className=\"relative\"\n            style={{\n              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))',\n            }}\n          >\n            <svg width=\"16\" height=\"20\" viewBox=\"0 0 16 20\" fill=\"none\" className=\"cursor-pointer\">\n              <path\n                d=\"M0 0L0 16L4.5 11.5L7 16.5L9.5 15L7 10L12 10L0 0Z\"\n                fill={userColor}\n                stroke=\"white\"\n                strokeWidth=\"1\"\n              />\n            </svg>\n\n            {/* User label */}\n            <div\n              className=\"absolute top-5 left-4 px-2 py-1 rounded text-xs font-medium text-white whitespace-nowrap\"\n              style={{\n                backgroundColor: userColor,\n                boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n              }}\n            >\n              {presence.user.name}\n            </div>\n          </div>\n        </div>\n      );\n    },\n    [showUserCursors, workflowToScreen, getUserColor]\n  );\n\n  // Render user selection highlights\n  const renderUserSelections = useCallback(\n    (presence: UserPresence) => {\n      if (!presence.selection?.nodeIds || !showUserSelections) return null;\n\n      const userColor = getUserColor(presence.userId);\n\n      return presence.selection.nodeIds\n        .map((nodeId) => {\n          const bounds = getNodeBounds(nodeId);\n          if (!bounds) return null;\n\n          return (\n            <div\n              key={`selection-${presence.userId}-${nodeId}`}\n              className=\"absolute pointer-events-none z-40 transition-all duration-200\"\n              style={{\n                left: bounds.x - 2,\n                top: bounds.y - 2,\n                width: bounds.width + 4,\n                height: bounds.height + 4,\n                border: `2px solid ${userColor}`,\n                borderRadius: '8px',\n                backgroundColor: `${userColor}20`,\n                boxShadow: `0 0 0 1px ${userColor}40`,\n              }}\n            >\n              {/* User avatar in corner */}\n              <div\n                className=\"absolute -top-3 -right-3\"\n                style={{\n                  filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',\n                }}\n              >\n                <Tooltip title={`${presence.user.name} selected this node`}>\n                  <Avatar\n                    size={20}\n                    src={presence.user.avatar}\n                    style={{\n                      backgroundColor: userColor,\n                      border: '2px solid white',\n                      fontSize: '10px',\n                    }}\n                  >\n                    {presence.user.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                </Tooltip>\n              </div>\n            </div>\n          );\n        })\n        .filter(Boolean);\n    },\n    [showUserSelections, getNodeBounds, getUserColor]\n  );\n\n  // Render viewport indicators (mini rectangles showing what other users see)\n  const renderViewportIndicators = useCallback(\n    (presence: UserPresence) => {\n      if (!presence.viewport) return null;\n\n      const userColor = getUserColor(presence.userId);\n      const viewport = presence.viewport;\n\n      // Calculate the viewport rectangle in screen coordinates\n      const viewportWidth = 400; // Approximate viewport width\n      const viewportHeight = 300; // Approximate viewport height\n\n      const screenPos = workflowToScreen(viewport.x, viewport.y);\n\n      return (\n        <div\n          key={`viewport-${presence.userId}`}\n          className=\"absolute pointer-events-none z-30 transition-all duration-500\"\n          style={{\n            left: screenPos.x,\n            top: screenPos.y,\n            width: viewportWidth * viewport.zoom * transform.zoom,\n            height: viewportHeight * viewport.zoom * transform.zoom,\n            border: `1px dashed ${userColor}60`,\n            borderRadius: '4px',\n          }}\n        >\n          {/* User label for viewport */}\n          <div\n            className=\"absolute -top-6 left-0 px-2 py-1 rounded text-xs text-white\"\n            style={{\n              backgroundColor: userColor,\n              opacity: 0.8,\n            }}\n          >\n            {presence.user.name}'s view\n          </div>\n        </div>\n      );\n    },\n    [workflowToScreen, getUserColor, transform.zoom]\n  );\n\n  // Don't render if container is not available\n  if (!containerRef.current) return null;\n\n  return (\n    <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n      {userPresences.map((presence) => (\n        <React.Fragment key={presence.userId}>\n          {renderUserCursor(presence)}\n          {renderUserSelections(presence)}\n          {renderViewportIndicators(presence)}\n        </React.Fragment>\n      ))}\n\n      {/* Connection status indicator */}\n      {userPresences.length > 0 && (\n        <div className=\"absolute top-4 right-4 pointer-events-auto z-50\">\n          <div className=\"flex items-center space-x-2 bg-white dark:bg-gray-800 px-3 py-2 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex -space-x-2\">\n              {userPresences.slice(0, 3).map((presence) => (\n                <Avatar\n                  key={presence.userId}\n                  size={24}\n                  src={presence.user.avatar}\n                  style={{\n                    backgroundColor: getUserColor(presence.userId),\n                    border: '2px solid white',\n                  }}\n                  className=\"shadow-sm\"\n                >\n                  {presence.user.name.charAt(0).toUpperCase()}\n                </Avatar>\n              ))}\n              {userPresences.length > 3 && (\n                <Avatar\n                  size={24}\n                  style={{\n                    backgroundColor: '#f0f0f0',\n                    color: '#666',\n                    border: '2px solid white',\n                  }}\n                  className=\"shadow-sm\"\n                >\n                  +{userPresences.length - 3}\n                </Avatar>\n              )}\n            </div>\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              {userPresences.length} other{userPresences.length !== 1 ? 's' : ''} online\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// CSS styles for smooth cursor animations\nexport const userPresenceStyles = `\n  .cursor-pointer {\n    animation: cursor-pulse 2s infinite;\n  }\n\n  @keyframes cursor-pulse {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n  }\n\n  .user-selection-highlight {\n    animation: selection-pulse 3s infinite;\n  }\n\n  @keyframes selection-pulse {\n    0%, 100% {\n      box-shadow: 0 0 0 0 currentColor;\n    }\n    50% {\n      box-shadow: 0 0 0 4px currentColor;\n    }\n  }\n`;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx",
        "start": 1,
        "end": 308,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2080
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/userpresenceoverlay/UserPresenceOverlay.tsx",
        "start": 4,
        "end": 311,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 311,
          "column": 2,
          "position": 2119
        }
      }
    },
    {
      "format": "javascript",
      "lines": 675,
      "fragment": "={form}\n      layout=\"vertical\"\n      onFinish={handleCreateTrigger}\n      initialValues={{\n        enabled: true,\n        triggerType: 'webhook',\n        rateLimitEnabled: false,\n        retryEnabled: false,\n        requireHttps: true,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Trigger Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"API webhook trigger\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Receives webhooks from external API\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"triggerType\" label=\"Trigger Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"webhook\">\n            <Space>\n              <GlobalOutlined />\n              Webhook\n            </Space>\n          </Option>\n          <Option value=\"http_request\">\n            <Space>\n              <ApiOutlined />\n              HTTP Request\n            </Space>\n          </Option>\n          <Option value=\"email\">\n            <Space>\n              <MailOutlined />\n              Email\n            </Space>\n          </Option>\n          <Option value=\"file_change\">\n            <Space>\n              <FileTextOutlined />\n              File Change\n            </Space>\n          </Option>\n          <Option value=\"database_change\">\n            <Space>\n              <DatabaseOutlined />\n              Database Change\n            </Space>\n          </Option>\n          <Option value=\"api_poll\">\n            <Space>\n              <ApiOutlined />\n              API Polling\n            </Space>\n          </Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['triggerType']} noStyle>\n        {({ getFieldValue }) => {\n          const triggerType = getFieldValue('triggerType');\n          return renderTriggerTypeFields(triggerType);\n        }}\n      </Form.Item>\n\n      <Collapse ghost>\n        <Panel header=\"Advanced Configuration\" key=\"advanced\">\n          {renderAdvancedFields()}\n        </Panel>\n      </Collapse>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingTrigger ? 'Update Trigger' : 'Create Trigger'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingTrigger(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderTriggerTypeFields = (triggerType: string) => {\n    switch (triggerType) {\n      case 'webhook':\n        return (\n          <>\n            <Form.Item name=\"methods\" label=\"HTTP Methods\">\n              <Select mode=\"multiple\" placeholder=\"Select methods\">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n                <Option value=\"PATCH\">PATCH</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"contentTypes\" label=\"Content Types (comma-separated)\">\n              <Input placeholder=\"application/json, application/xml\" />\n            </Form.Item>\n            <Form.Item name=\"secretKey\" label=\"Secret Key (optional)\">\n              <Input.Password placeholder=\"For webhook signature validation\" />\n            </Form.Item>\n          </>\n        );\n      case 'http_request':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/status\" />\n            </Form.Item>\n            <Form.Item name=\"method\" label=\"HTTP Method\">\n              <Select>\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"changeDetection\" label=\"Change Detection\">\n              <Select>\n                <Option value=\"hash\">Content Hash</Option>\n                <Option value=\"content\">Full Content</Option>\n                <Option value=\"headers\">Headers</Option>\n                <Option value=\"size\">Content Size</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'email':\n        return (\n          <>\n            <Form.Item name=\"provider\" label=\"Email Provider\">\n              <Select>\n                <Option value=\"gmail\">Gmail</Option>\n                <Option value=\"outlook\">Outlook</Option>\n                <Option value=\"imap\">IMAP</Option>\n                <Option value=\"exchange\">Exchange</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"mailbox\" label=\"Mailbox\">\n              <Input placeholder=\"INBOX\" />\n            </Form.Item>\n            <Form.Item name=\"fromEmails\" label=\"From Emails (comma-separated)\">\n              <Input placeholder=\"user@example.com, alerts@service.com\" />\n            </Form.Item>\n            <Form.Item name=\"subjectFilter\" label=\"Subject Filter\">\n              <Input placeholder=\"Alert: \" />\n            </Form.Item>\n          </>\n        );\n      case 'file_change':\n        return (\n          <>\n            <Form.Item name=\"path\" label=\"Path to Monitor\" rules={[{ required: true }]}>\n              <Input placeholder=\"/data/uploads\" />\n            </Form.Item>\n            <Form.Item name=\"recursive\" label=\"Recursive\" valuePropName=\"checked\">\n              <Switch />\n            </Form.Item>\n            <Form.Item name=\"events\" label=\"File Events\">\n              <Select mode=\"multiple\" placeholder=\"Select events\">\n                <Option value=\"created\">Created</Option>\n                <Option value=\"modified\">Modified</Option>\n                <Option value=\"deleted\">Deleted</Option>\n                <Option value=\"moved\">Moved</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"patterns\" label=\"File Patterns (comma-separated)\">\n              <Input placeholder=\"*.pdf, *.docx\" />\n            </Form.Item>\n          </>\n        );\n      case 'database_change':\n        return (\n          <>\n            <Form.Item\n              name=\"connectionString\"\n              label=\"Connection String\"\n              rules={[{ required: true }]}\n            >\n              <Input.Password placeholder=\"mongodb://localhost:27017/mydb\" />\n            </Form.Item>\n            <Form.Item name=\"database\" label=\"Database\">\n              <Input placeholder=\"myapp\" />\n            </Form.Item>\n            <Form.Item name=\"table\" label=\"Table/Collection\">\n              <Input placeholder=\"users\" />\n            </Form.Item>\n            <Form.Item name=\"operation\" label=\"Operation\">\n              <Select>\n                <Option value=\"insert\">Insert</Option>\n                <Option value=\"update\">Update</Option>\n                <Option value=\"delete\">Delete</Option>\n                <Option value=\"any\">Any</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'api_poll':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"API URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/data\" />\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"responseField\" label=\"Response Field to Monitor\">\n              <Input placeholder=\"data.status\" />\n            </Form.Item>\n            <Form.Item name=\"changeThreshold\" label=\"Change Threshold (for numbers)\">\n              <InputNumber min={0} step={0.1} />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderAdvancedFields = () => (\n    <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n      <Divider>Rate Limiting</Divider>\n      <Form.Item name=\"rateLimitEnabled\" label=\"Enable Rate Limiting\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item dependencies={['rateLimitEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('rateLimitEnabled')) return null;\n          return (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Form.Item name=\"maxTriggersPerMinute\" label=\"Max/Minute\">\n                <InputNumber min={1} />\n              </Form.Item>\n              <Form.Item name=\"maxTriggersPerHour\" label=\"Max/Hour\">\n                <InputNumber min={1} />\n              </Form.Item>\n            </div>\n          );\n        }}\n      </Form.Item>\n\n      <Divider>Security</Divider>\n      <Form.Item name=\"requireHttps\" label=\"Require HTTPS\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item name=\"allowedIPs\" label=\"Allowed IPs (comma-separated)\">\n        <Input placeholder=\"192.168.1.1, 10.0.0.0/8\" />\n      </Form.Item>\n      <Form.Item name=\"maxPayloadSize\" label=\"Max Payload Size (bytes)\">\n        <InputNumber min={1024} placeholder=\"1048576\" />\n      </Form.Item>\n\n      <Divider>Headers</Divider>\n      <Form.Item name=\"headers\" label=\"Custom Headers (key:value per line)\">\n        <TextArea\n          placeholder=\"Authorization: Bearer token&#10;Content-Type: application/json\"\n          rows={3}\n        />\n      </Form.Item>\n    </Space>\n  );\n\n  const renderTriggersList = () => (\n    <List\n      dataSource={triggers}\n      renderItem={(trigger) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={trigger.enabled}\n              onChange={(checked) => handleToggleTrigger(trigger.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => {\n                setSelectedTrigger(trigger);\n                setTestModalVisible(true);\n              }}\n            >\n              Test\n            </Button>,\n            trigger.triggerType === 'webhook' && (\n              <Button\n                type=\"link\"\n                icon={<CopyOutlined />}\n                onClick={() => {\n                  const config = trigger.configuration as any;\n                  navigator.clipboard.writeText(config.endpoint);\n                  message.success('Webhook URL copied');\n                }}\n              >\n                Copy URL\n              </Button>\n            ),\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingTrigger(trigger.id);\n                // Populate form with existing values\n                form.setFieldsValue({\n                  name: trigger.name,\n                  description: trigger.description,\n                  enabled: trigger.enabled,\n                  triggerType: trigger.triggerType,\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteTrigger(trigger.id)}\n            />,\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {getTriggerIcon(trigger.triggerType)}\n                {trigger.name}\n                <Tag color={trigger.enabled ? 'green' : 'default'}>{trigger.triggerType}</Tag>\n                <Badge\n                  count={trigger.triggerCount}\n                  style={{ backgroundColor: colors.primary[500] }}\n                />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {trigger.description}\n                <Space>\n                  <Badge status={trigger.enabled ? 'success' : 'default'} />\n                  {trigger.enabled ? 'Active' : 'Inactive'}\n                  {trigger.lastTriggered && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(trigger.lastTriggered).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n                {trigger.triggerType === 'webhook' && (\n                  <Text code style={{ fontSize: '12px' }}>\n                    {(trigger.configuration as any).endpoint}\n                  </Text>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No triggers configured' }}\n    />\n  );\n\n  const renderEventsList = () => (\n    <Table\n      dataSource={recentEvents}\n      size=\"small\"\n      pagination={{ pageSize: 20 }}\n      columns={[\n        {\n          title: 'Time',\n          dataIndex: 'timestamp',\n          key: 'timestamp',\n          width: 150,\n          render: (timestamp) => new Date(timestamp).toLocaleString(),\n        },\n        {\n          title: 'Trigger',\n          dataIndex: 'triggerId',\n          key: 'triggerId',\n          width: 200,\n          render: (triggerId) => {\n            const trigger = triggers.find((t) => t.id === triggerId);\n            return trigger ? trigger.name : triggerId;\n          },\n        },\n        {\n          title: 'Status',\n          dataIndex: 'status',\n          key: 'status',\n          width: 100,\n          render: (status) => <Tag color={getEventStatusColor(status)}>{status}</Tag>,\n        },\n        {\n          title: 'Processing Time',\n          dataIndex: 'processingTimeMs',\n          key: 'processingTimeMs',\n          width: 120,\n          render: (time) => `${time.toFixed(2)}ms`,\n        },\n        {\n          title: 'Source',\n          dataIndex: ['metadata', 'source'],\n          key: 'source',\n          width: 120,\n        },\n        {\n          title: 'Actions',\n          key: 'actions',\n          width: 100,\n          render: (_, event) => (\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                Modal.info({\n                  title: 'Event Details',\n                  content: (\n                    <div>\n                      <Paragraph>\n                        <Text strong>ID:</Text> {event.id}\n                      </Paragraph>\n                      <Paragraph>\n                        <Text strong>Raw Data:</Text>\n                        <pre\n                          style={{\n                            marginTop: 8,\n                            background: colors.gray[50],\n                            padding: 12,\n                            borderRadius: 4,\n                          }}\n                        >\n                          {JSON.stringify(event.rawData, null, 2)}\n                        </pre>\n                      </Paragraph>\n                      {event.error && (\n                        <Paragraph>\n                          <Text strong>Error:</Text>\n                          <pre\n                            style={{\n                              marginTop: 8,\n                              background: colors.error[50],\n                              padding: 12,\n                              borderRadius: 4,\n                              color: colors.error[600],\n                            }}\n                          >\n                            {event.error}\n                          </pre>\n                        </Paragraph>\n                      )}\n                    </div>\n                  ),\n                  width: 600,\n                });\n              }}\n            />\n          ),\n        },\n      ]}\n    />\n  );\n\n  const renderMetrics = () => {\n    if (!metrics) return <div>Select a trigger to view metrics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic title=\"Total Events\" value={metrics.totalEvents} />\n          <Statistic\n            title=\"Processed Events\"\n            value={metrics.processedEvents}\n            valueStyle={{ color: colors.success[600] }}\n          />\n          <Statistic\n            title=\"Error Rate\"\n            value={metrics.errorRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: metrics.errorRate > 5 ? colors.error[600] : colors.success[600],\n            }}\n          />\n          <Statistic\n            title=\"Avg Processing Time\"\n            value={metrics.averageProcessingTime}\n            precision={2}\n            suffix=\"ms\"\n          />\n        </div>\n\n        {metrics.topSources.length > 0 && (\n          <Card title=\"Top Sources\" size=\"small\">\n            <List\n              dataSource={metrics.topSources}\n              renderItem={(source) => (\n                <List.Item>\n                  <List.Item.Meta title={source.source} description={`${source.count} events`} />\n                  <Progress\n                    percent={(source.count / metrics.totalEvents) * 100}\n                    size=\"small\"\n                    style={{ width: 100 }}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getTriggerIcon = (triggerType: string) => {\n    const iconMap = {\n      webhook: <GlobalOutlined />,\n      http_request: <ApiOutlined />,\n      email: <MailOutlined />,\n      file_change: <FileTextOutlined />,\n      database_change: <DatabaseOutlined />,\n      api_poll: <ApiOutlined />,\n      calendar_event: <CalendarOutlined />,\n    };\n    return iconMap[triggerType as keyof typeof iconMap] || <SettingOutlined />;\n  };\n\n  const getEventStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'filtered':\n        return 'orange';\n      case 'rate_limited':\n        return 'purple';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <ThunderboltOutlined />\n            Advanced Triggers\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1200}\n        footer={null}\n        className={cn('trigger-management-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Triggers ({triggers.length})\n              </span>\n            }\n            key=\"triggers\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card title=\"Create Trigger\" size=\"small\">\n                {renderTriggerForm()}\n                {webhookUrl && (\n                  <Alert\n                    message=\"Webhook URL\"\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Text code>{webhookUrl}</Text>\n                        <Button\n                          size=\"small\"\n                          icon={<CopyOutlined />}\n                          onClick={() => {\n                            navigator.clipboard.writeText(webhookUrl);\n                            message.success('URL copied');\n                          }}\n                        >\n                          Copy URL\n                        </Button>\n                      </Space>\n                    }\n                    type=\"success\"\n                    style={{ marginTop: 16 }}\n                  />\n                )}\n              </Card>\n              <Card title=\"Active Triggers\" size=\"small\">\n                {renderTriggersList()}\n              </Card>\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CheckCircleOutlined />\n                Events\n              </span>\n            }\n            key=\"events\"\n          >\n            {renderEventsList()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <div>📊</div>\n                Metrics\n              </span>\n            }\n            key=\"metrics\"\n          >\n            <div className=\"mb-4\">\n              <Select\n                placeholder=\"Select a trigger to view metrics\"\n                value={selectedTrigger?.id}\n                onChange={(triggerId) => {\n                  const trigger = triggers.find((t) => t.id === triggerId);\n                  setSelectedTrigger(trigger || null);\n                }}\n                style={{ width: 300 }}\n              >\n                {triggers.map((trigger) => (\n                  <Option key={trigger.id} value={trigger.id}>\n                    {trigger.name}\n                  </Option>\n                ))}\n              </Select>\n            </div>\n            {renderMetrics()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Trigger\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedTrigger) {\n            handleTestTrigger(selectedTrigger.id);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                { test: true, timestamp: new Date().toISOString() },\n                null,\n                2\n              )}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx",
        "start": 304,
        "end": 978,
        "startLoc": {
          "line": 304,
          "column": 5,
          "position": 2835
        },
        "endLoc": {
          "line": 978,
          "column": 2,
          "position": 8117
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 307,
        "end": 981,
        "startLoc": {
          "line": 307,
          "column": 5,
          "position": 2874
        },
        "endLoc": {
          "line": 981,
          "column": 2,
          "position": 8156
        }
      }
    },
    {
      "format": "tsx",
      "lines": 985,
      "fragment": "/**\n * Advanced Trigger Management Panel\n *\n * Comprehensive trigger configuration interface for webhooks, API polling,\n * file monitoring, email triggers, and event-driven workflow execution.\n */\n\nimport {\n  ApiOutlined,\n  CalendarOutlined,\n  CheckCircleOutlined,\n  CopyOutlined,\n  DatabaseOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  FileTextOutlined,\n  GlobalOutlined,\n  MailOutlined,\n  PlayCircleOutlined,\n  SettingOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Collapse,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Progress,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  advancedTriggerSystem,\n  type TriggerConfiguration,\n  type TriggerEvent,\n  type TriggerMetrics,\n} from '@/core/services/advancedTriggerSystem';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { Text, Paragraph } = Typography;\nconst { Panel } = Collapse;\n\ninterface TriggerPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const TriggerPanel: React.FC<TriggerPanelProps> = ({ workflowId, visible, onClose }) => {\n  const [triggers, setTriggers] = useState<TriggerConfiguration[]>([]);\n  const [recentEvents, setRecentEvents] = useState<TriggerEvent[]>([]);\n  const [selectedTrigger, setSelectedTrigger] = useState<TriggerConfiguration | null>(null);\n  const [metrics, setMetrics] = useState<TriggerMetrics | null>(null);\n  const [activeTab, setActiveTab] = useState('triggers');\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingTrigger, setEditingTrigger] = useState<string | null>(null);\n  const [testModalVisible, setTestModalVisible] = useState(false);\n  const [webhookUrl, setWebhookUrl] = useState('');\n\n  useEffect(() => {\n    if (visible) {\n      loadTriggers();\n      loadRecentEvents();\n    }\n  }, [visible, loadRecentEvents, loadTriggers]);\n\n  useEffect(() => {\n    if (selectedTrigger) {\n      loadMetrics(selectedTrigger.id);\n    }\n  }, [selectedTrigger, loadMetrics]);\n\n  const loadTriggers = () => {\n    const allTriggers = advancedTriggerSystem.getAllTriggers();\n    const workflowTriggers = allTriggers.filter((t) => t.workflowId === workflowId);\n    setTriggers(workflowTriggers);\n  };\n\n  const loadRecentEvents = () => {\n    const allTriggers = advancedTriggerSystem.getAllTriggers();\n    const workflowTriggers = allTriggers.filter((t) => t.workflowId === workflowId);\n\n    const events: TriggerEvent[] = [];\n    workflowTriggers.forEach((trigger) => {\n      const triggerEvents = advancedTriggerSystem.getRecentEvents(trigger.id, 50);\n      events.push(...triggerEvents);\n    });\n\n    // Sort by timestamp descending\n    events.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    setRecentEvents(events.slice(0, 100));\n  };\n\n  const loadMetrics = (triggerId: string) => {\n    try {\n      const triggerMetrics = advancedTriggerSystem.getTriggerMetrics(triggerId);\n      setMetrics(triggerMetrics);\n    } catch (_error) {}\n  };\n\n  const handleCreateTrigger = async (values: any) => {\n    setLoading(true);\n    try {\n      const triggerConfig = {\n        workflowId,\n        name: values.name,\n        description: values.description,\n        enabled: values.enabled ?? true,\n        triggerType: values.triggerType,\n        configuration: buildTriggerConfiguration(values),\n        filters: values.filters || [],\n        transformations: values.transformations || [],\n        authentication: values.authentication,\n        rateLimit: {\n          enabled: values.rateLimitEnabled ?? false,\n          maxTriggersPerMinute: values.maxTriggersPerMinute ?? 60,\n          maxTriggersPerHour: values.maxTriggersPerHour ?? 1000,\n          maxTriggersPerDay: values.maxTriggersPerDay ?? 10000,\n          burstLimit: values.burstLimit ?? 10,\n        },\n        retryPolicy: {\n          enabled: values.retryEnabled ?? false,\n          maxAttempts: values.maxAttempts ?? 3,\n          backoffMs: values.backoffMs ?? 1000,\n          exponentialBackoff: values.exponentialBackoff ?? true,\n        },\n        security: {\n          allowedIPs: values.allowedIPs?.split(',').map((ip: string) => ip.trim()) ?? [],\n          blockedIPs: values.blockedIPs?.split(',').map((ip: string) => ip.trim()) ?? [],\n          requireHttps: values.requireHttps ?? true,\n          validateSignature: values.validateSignature ?? false,\n          maxPayloadSize: values.maxPayloadSize ?? 1048576, // 1MB\n        },\n        metadata: {},\n      };\n\n      const created = advancedTriggerSystem.createTrigger(triggerConfig);\n\n      if (created.triggerType === 'webhook') {\n        const config = created.configuration as any;\n        setWebhookUrl(config.endpoint);\n      }\n\n      message.success('Trigger created successfully');\n      loadTriggers();\n      form.resetFields();\n      setEditingTrigger(null);\n    } catch (_error) {\n      message.error('Failed to create trigger');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buildTriggerConfiguration = (values: any) => {\n    switch (values.triggerType) {\n      case 'webhook':\n        return {\n          endpoint: '', // Auto-generated\n          methods: values.methods || ['POST'],\n          contentTypes: values.contentTypes?.split(',').map((t: string) => t.trim()) || [\n            'application/json',\n          ],\n          headers: parseKeyValuePairs(values.headers),\n          responseTemplate: values.responseTemplate,\n          secretKey: values.secretKey,\n        };\n      case 'http_request':\n        return {\n          url: values.url,\n          method: values.method || 'GET',\n          headers: parseKeyValuePairs(values.headers),\n          body: values.body,\n          pollIntervalMs: values.pollIntervalMs || 300000,\n          changeDetection: values.changeDetection || 'hash',\n        };\n      case 'email':\n        return {\n          provider: values.provider || 'gmail',\n          mailbox: values.mailbox || 'INBOX',\n          filters: {\n            from: values.fromEmails?.split(',').map((e: string) => e.trim()),\n            subject: values.subjectFilter,\n            body: values.bodyFilter,\n            hasAttachment: values.hasAttachment,\n          },\n          markAsRead: values.markAsRead ?? false,\n          moveToFolder: values.moveToFolder,\n        };\n      case 'file_change':\n        return {\n          path: values.path,\n          recursive: values.recursive ?? true,\n          events: values.events || ['created', 'modified'],\n          patterns: values.patterns?.split(',').map((p: string) => p.trim()) || ['*'],\n          ignorePatterns: values.ignorePatterns?.split(',').map((p: string) => p.trim()) || [],\n          debounceMs: values.debounceMs || 1000,\n        };\n      case 'database_change':\n        return {\n          connectionString: values.connectionString,\n          database: values.database,\n          table: values.table,\n          operation: values.operation || 'any',\n          columns: values.columns?.split(',').map((c: string) => c.trim()),\n          conditions: parseKeyValuePairs(values.conditions),\n          pollIntervalMs: values.pollIntervalMs || 60000,\n        };\n      case 'api_poll':\n        return {\n          url: values.url || '',\n          method: values.method || 'GET',\n          headers: parseKeyValuePairs(values.headers),\n          body: values.body,\n          pollIntervalMs: values.pollIntervalMs || 300000,\n          responseField: values.responseField,\n          changeThreshold: values.changeThreshold,\n        };\n      default:\n        // Fallback to webhook config for unknown types\n        return {\n          endpoint: '',\n          methods: ['POST'],\n          contentTypes: ['application/json'],\n          headers: {},\n          responseTemplate: '',\n          secretKey: '',\n        };\n    }\n  };\n\n  const parseKeyValuePairs = (input: string): Record<string, string> => {\n    if (!input) return {};\n\n    const pairs: Record<string, string> = {};\n    input.split('\\n').forEach((line) => {\n      const [key, ...valueParts] = line.split(':');\n      if (key && valueParts.length > 0) {\n        pairs[key.trim()] = valueParts.join(':').trim();\n      }\n    });\n    return pairs;\n  };\n\n  const handleToggleTrigger = (triggerId: string, enabled: boolean) => {\n    try {\n      advancedTriggerSystem.toggleTrigger(triggerId, enabled);\n      message.success(`Trigger ${enabled ? 'enabled' : 'disabled'}`);\n      loadTriggers();\n    } catch (_error) {\n      message.error('Failed to toggle trigger');\n    }\n  };\n\n  const handleDeleteTrigger = (triggerId: string) => {\n    try {\n      advancedTriggerSystem.deleteTrigger(triggerId);\n      message.success('Trigger deleted');\n      loadTriggers();\n      if (selectedTrigger?.id === triggerId) {\n        setSelectedTrigger(null);\n        setMetrics(null);\n      }\n    } catch (_error) {\n      message.error('Failed to delete trigger');\n    }\n  };\n\n  const handleTestTrigger = async (triggerId: string, testData?: any) => {\n    try {\n      await advancedTriggerSystem.testTrigger(triggerId, testData);\n      message.success('Trigger test completed');\n      loadRecentEvents();\n      setTestModalVisible(false);\n    } catch (_error) {\n      message.error('Trigger test failed');\n    }\n  };\n\n  const renderTriggerForm = () => (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleCreateTrigger}\n      initialValues={{\n        enabled: true,\n        triggerType: 'webhook',\n        rateLimitEnabled: false,\n        retryEnabled: false,\n        requireHttps: true,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Trigger Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"API webhook trigger\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Receives webhooks from external API\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"triggerType\" label=\"Trigger Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"webhook\">\n            <Space>\n              <GlobalOutlined />\n              Webhook\n            </Space>\n          </Option>\n          <Option value=\"http_request\">\n            <Space>\n              <ApiOutlined />\n              HTTP Request\n            </Space>\n          </Option>\n          <Option value=\"email\">\n            <Space>\n              <MailOutlined />\n              Email\n            </Space>\n          </Option>\n          <Option value=\"file_change\">\n            <Space>\n              <FileTextOutlined />\n              File Change\n            </Space>\n          </Option>\n          <Option value=\"database_change\">\n            <Space>\n              <DatabaseOutlined />\n              Database Change\n            </Space>\n          </Option>\n          <Option value=\"api_poll\">\n            <Space>\n              <ApiOutlined />\n              API Polling\n            </Space>\n          </Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['triggerType']} noStyle>\n        {({ getFieldValue }) => {\n          const triggerType = getFieldValue('triggerType');\n          return renderTriggerTypeFields(triggerType);\n        }}\n      </Form.Item>\n\n      <Collapse ghost>\n        <Panel header=\"Advanced Configuration\" key=\"advanced\">\n          {renderAdvancedFields()}\n        </Panel>\n      </Collapse>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingTrigger ? 'Update Trigger' : 'Create Trigger'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingTrigger(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderTriggerTypeFields = (triggerType: string) => {\n    switch (triggerType) {\n      case 'webhook':\n        return (\n          <>\n            <Form.Item name=\"methods\" label=\"HTTP Methods\">\n              <Select mode=\"multiple\" placeholder=\"Select methods\">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n                <Option value=\"PATCH\">PATCH</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"contentTypes\" label=\"Content Types (comma-separated)\">\n              <Input placeholder=\"application/json, application/xml\" />\n            </Form.Item>\n            <Form.Item name=\"secretKey\" label=\"Secret Key (optional)\">\n              <Input.Password placeholder=\"For webhook signature validation\" />\n            </Form.Item>\n          </>\n        );\n      case 'http_request':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/status\" />\n            </Form.Item>\n            <Form.Item name=\"method\" label=\"HTTP Method\">\n              <Select>\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"changeDetection\" label=\"Change Detection\">\n              <Select>\n                <Option value=\"hash\">Content Hash</Option>\n                <Option value=\"content\">Full Content</Option>\n                <Option value=\"headers\">Headers</Option>\n                <Option value=\"size\">Content Size</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'email':\n        return (\n          <>\n            <Form.Item name=\"provider\" label=\"Email Provider\">\n              <Select>\n                <Option value=\"gmail\">Gmail</Option>\n                <Option value=\"outlook\">Outlook</Option>\n                <Option value=\"imap\">IMAP</Option>\n                <Option value=\"exchange\">Exchange</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"mailbox\" label=\"Mailbox\">\n              <Input placeholder=\"INBOX\" />\n            </Form.Item>\n            <Form.Item name=\"fromEmails\" label=\"From Emails (comma-separated)\">\n              <Input placeholder=\"user@example.com, alerts@service.com\" />\n            </Form.Item>\n            <Form.Item name=\"subjectFilter\" label=\"Subject Filter\">\n              <Input placeholder=\"Alert: \" />\n            </Form.Item>\n          </>\n        );\n      case 'file_change':\n        return (\n          <>\n            <Form.Item name=\"path\" label=\"Path to Monitor\" rules={[{ required: true }]}>\n              <Input placeholder=\"/data/uploads\" />\n            </Form.Item>\n            <Form.Item name=\"recursive\" label=\"Recursive\" valuePropName=\"checked\">\n              <Switch />\n            </Form.Item>\n            <Form.Item name=\"events\" label=\"File Events\">\n              <Select mode=\"multiple\" placeholder=\"Select events\">\n                <Option value=\"created\">Created</Option>\n                <Option value=\"modified\">Modified</Option>\n                <Option value=\"deleted\">Deleted</Option>\n                <Option value=\"moved\">Moved</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"patterns\" label=\"File Patterns (comma-separated)\">\n              <Input placeholder=\"*.pdf, *.docx\" />\n            </Form.Item>\n          </>\n        );\n      case 'database_change':\n        return (\n          <>\n            <Form.Item\n              name=\"connectionString\"\n              label=\"Connection String\"\n              rules={[{ required: true }]}\n            >\n              <Input.Password placeholder=\"mongodb://localhost:27017/mydb\" />\n            </Form.Item>\n            <Form.Item name=\"database\" label=\"Database\">\n              <Input placeholder=\"myapp\" />\n            </Form.Item>\n            <Form.Item name=\"table\" label=\"Table/Collection\">\n              <Input placeholder=\"users\" />\n            </Form.Item>\n            <Form.Item name=\"operation\" label=\"Operation\">\n              <Select>\n                <Option value=\"insert\">Insert</Option>\n                <Option value=\"update\">Update</Option>\n                <Option value=\"delete\">Delete</Option>\n                <Option value=\"any\">Any</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'api_poll':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"API URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/data\" />\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"responseField\" label=\"Response Field to Monitor\">\n              <Input placeholder=\"data.status\" />\n            </Form.Item>\n            <Form.Item name=\"changeThreshold\" label=\"Change Threshold (for numbers)\">\n              <InputNumber min={0} step={0.1} />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderAdvancedFields = () => (\n    <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n      <Divider>Rate Limiting</Divider>\n      <Form.Item name=\"rateLimitEnabled\" label=\"Enable Rate Limiting\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item dependencies={['rateLimitEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('rateLimitEnabled')) return null;\n          return (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Form.Item name=\"maxTriggersPerMinute\" label=\"Max/Minute\">\n                <InputNumber min={1} />\n              </Form.Item>\n              <Form.Item name=\"maxTriggersPerHour\" label=\"Max/Hour\">\n                <InputNumber min={1} />\n              </Form.Item>\n            </div>\n          );\n        }}\n      </Form.Item>\n\n      <Divider>Security</Divider>\n      <Form.Item name=\"requireHttps\" label=\"Require HTTPS\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item name=\"allowedIPs\" label=\"Allowed IPs (comma-separated)\">\n        <Input placeholder=\"192.168.1.1, 10.0.0.0/8\" />\n      </Form.Item>\n      <Form.Item name=\"maxPayloadSize\" label=\"Max Payload Size (bytes)\">\n        <InputNumber min={1024} placeholder=\"1048576\" />\n      </Form.Item>\n\n      <Divider>Headers</Divider>\n      <Form.Item name=\"headers\" label=\"Custom Headers (key:value per line)\">\n        <TextArea\n          placeholder=\"Authorization: Bearer token&#10;Content-Type: application/json\"\n          rows={3}\n        />\n      </Form.Item>\n    </Space>\n  );\n\n  const renderTriggersList = () => (\n    <List\n      dataSource={triggers}\n      renderItem={(trigger) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={trigger.enabled}\n              onChange={(checked) => handleToggleTrigger(trigger.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => {\n                setSelectedTrigger(trigger);\n                setTestModalVisible(true);\n              }}\n            >\n              Test\n            </Button>,\n            trigger.triggerType === 'webhook' && (\n              <Button\n                type=\"link\"\n                icon={<CopyOutlined />}\n                onClick={() => {\n                  const config = trigger.configuration as any;\n                  navigator.clipboard.writeText(config.endpoint);\n                  message.success('Webhook URL copied');\n                }}\n              >\n                Copy URL\n              </Button>\n            ),\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingTrigger(trigger.id);\n                // Populate form with existing values\n                form.setFieldsValue({\n                  name: trigger.name,\n                  description: trigger.description,\n                  enabled: trigger.enabled,\n                  triggerType: trigger.triggerType,\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteTrigger(trigger.id)}\n            />,\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {getTriggerIcon(trigger.triggerType)}\n                {trigger.name}\n                <Tag color={trigger.enabled ? 'green' : 'default'}>{trigger.triggerType}</Tag>\n                <Badge\n                  count={trigger.triggerCount}\n                  style={{ backgroundColor: colors.primary[500] }}\n                />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {trigger.description}\n                <Space>\n                  <Badge status={trigger.enabled ? 'success' : 'default'} />\n                  {trigger.enabled ? 'Active' : 'Inactive'}\n                  {trigger.lastTriggered && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(trigger.lastTriggered).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n                {trigger.triggerType === 'webhook' && (\n                  <Text code style={{ fontSize: '12px' }}>\n                    {(trigger.configuration as any).endpoint}\n                  </Text>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No triggers configured' }}\n    />\n  );\n\n  const renderEventsList = () => (\n    <Table\n      dataSource={recentEvents}\n      size=\"small\"\n      pagination={{ pageSize: 20 }}\n      columns={[\n        {\n          title: 'Time',\n          dataIndex: 'timestamp',\n          key: 'timestamp',\n          width: 150,\n          render: (timestamp) => new Date(timestamp).toLocaleString(),\n        },\n        {\n          title: 'Trigger',\n          dataIndex: 'triggerId',\n          key: 'triggerId',\n          width: 200,\n          render: (triggerId) => {\n            const trigger = triggers.find((t) => t.id === triggerId);\n            return trigger ? trigger.name : triggerId;\n          },\n        },\n        {\n          title: 'Status',\n          dataIndex: 'status',\n          key: 'status',\n          width: 100,\n          render: (status) => <Tag color={getEventStatusColor(status)}>{status}</Tag>,\n        },\n        {\n          title: 'Processing Time',\n          dataIndex: 'processingTimeMs',\n          key: 'processingTimeMs',\n          width: 120,\n          render: (time) => `${time.toFixed(2)}ms`,\n        },\n        {\n          title: 'Source',\n          dataIndex: ['metadata', 'source'],\n          key: 'source',\n          width: 120,\n        },\n        {\n          title: 'Actions',\n          key: 'actions',\n          width: 100,\n          render: (_, event) => (\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                Modal.info({\n                  title: 'Event Details',\n                  content: (\n                    <div>\n                      <Paragraph>\n                        <Text strong>ID:</Text> {event.id}\n                      </Paragraph>\n                      <Paragraph>\n                        <Text strong>Raw Data:</Text>\n                        <pre\n                          style={{\n                            marginTop: 8,\n                            background: colors.gray[50],\n                            padding: 12,\n                            borderRadius: 4,\n                          }}\n                        >\n                          {JSON.stringify(event.rawData, null, 2)}\n                        </pre>\n                      </Paragraph>\n                      {event.error && (\n                        <Paragraph>\n                          <Text strong>Error:</Text>\n                          <pre\n                            style={{\n                              marginTop: 8,\n                              background: colors.error[50],\n                              padding: 12,\n                              borderRadius: 4,\n                              color: colors.error[600],\n                            }}\n                          >\n                            {event.error}\n                          </pre>\n                        </Paragraph>\n                      )}\n                    </div>\n                  ),\n                  width: 600,\n                });\n              }}\n            />\n          ),\n        },\n      ]}\n    />\n  );\n\n  const renderMetrics = () => {\n    if (!metrics) return <div>Select a trigger to view metrics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic title=\"Total Events\" value={metrics.totalEvents} />\n          <Statistic\n            title=\"Processed Events\"\n            value={metrics.processedEvents}\n            valueStyle={{ color: colors.success[600] }}\n          />\n          <Statistic\n            title=\"Error Rate\"\n            value={metrics.errorRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: metrics.errorRate > 5 ? colors.error[600] : colors.success[600],\n            }}\n          />\n          <Statistic\n            title=\"Avg Processing Time\"\n            value={metrics.averageProcessingTime}\n            precision={2}\n            suffix=\"ms\"\n          />\n        </div>\n\n        {metrics.topSources.length > 0 && (\n          <Card title=\"Top Sources\" size=\"small\">\n            <List\n              dataSource={metrics.topSources}\n              renderItem={(source) => (\n                <List.Item>\n                  <List.Item.Meta title={source.source} description={`${source.count} events`} />\n                  <Progress\n                    percent={(source.count / metrics.totalEvents) * 100}\n                    size=\"small\"\n                    style={{ width: 100 }}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getTriggerIcon = (triggerType: string) => {\n    const iconMap = {\n      webhook: <GlobalOutlined />,\n      http_request: <ApiOutlined />,\n      email: <MailOutlined />,\n      file_change: <FileTextOutlined />,\n      database_change: <DatabaseOutlined />,\n      api_poll: <ApiOutlined />,\n      calendar_event: <CalendarOutlined />,\n    };\n    return iconMap[triggerType as keyof typeof iconMap] || <SettingOutlined />;\n  };\n\n  const getEventStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'filtered':\n        return 'orange';\n      case 'rate_limited':\n        return 'purple';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <ThunderboltOutlined />\n            Advanced Triggers\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1200}\n        footer={null}\n        className={cn('trigger-management-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Triggers ({triggers.length})\n              </span>\n            }\n            key=\"triggers\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card title=\"Create Trigger\" size=\"small\">\n                {renderTriggerForm()}\n                {webhookUrl && (\n                  <Alert\n                    message=\"Webhook URL\"\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Text code>{webhookUrl}</Text>\n                        <Button\n                          size=\"small\"\n                          icon={<CopyOutlined />}\n                          onClick={() => {\n                            navigator.clipboard.writeText(webhookUrl);\n                            message.success('URL copied');\n                          }}\n                        >\n                          Copy URL\n                        </Button>\n                      </Space>\n                    }\n                    type=\"success\"\n                    style={{ marginTop: 16 }}\n                  />\n                )}\n              </Card>\n              <Card title=\"Active Triggers\" size=\"small\">\n                {renderTriggersList()}\n              </Card>\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CheckCircleOutlined />\n                Events\n              </span>\n            }\n            key=\"events\"\n          >\n            {renderEventsList()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <div>📊</div>\n                Metrics\n              </span>\n            }\n            key=\"metrics\"\n          >\n            <div className=\"mb-4\">\n              <Select\n                placeholder=\"Select a trigger to view metrics\"\n                value={selectedTrigger?.id}\n                onChange={(triggerId) => {\n                  const trigger = triggers.find((t) => t.id === triggerId);\n                  setSelectedTrigger(trigger || null);\n                }}\n                style={{ width: 300 }}\n              >\n                {triggers.map((trigger) => (\n                  <Option key={trigger.id} value={trigger.id}>\n                    {trigger.name}\n                  </Option>\n                ))}\n              </Select>\n            </div>\n            {renderMetrics()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Trigger\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedTrigger) {\n            handleTestTrigger(selectedTrigger.id);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                { test: true, timestamp: new Date().toISOString() },\n                null,\n                2\n              )}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx",
        "start": 1,
        "end": 985,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 985,
          "column": 2,
          "position": 8146
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 4,
        "end": 988,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 988,
          "column": 2,
          "position": 8185
        }
      }
    },
    {
      "format": "javascript",
      "lines": 468,
      "fragment": "={form}\n      layout=\"vertical\"\n      onFinish={handleCreateSchedule}\n      initialValues={{\n        enabled: true,\n        scheduleType: 'cron',\n        timezone: 'UTC',\n        retryEnabled: false,\n        maxAttempts: 3,\n        backoffStrategy: 'exponential',\n        maxConcurrent: 1,\n        queueStrategy: 'fifo',\n        skipIfRunning: false,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Schedule Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"Daily data sync\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Optional description of what this schedule does\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"scheduleType\" label=\"Schedule Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"cron\">Cron Expression</Option>\n          <Option value=\"interval\">Fixed Interval</Option>\n          <Option value=\"once\">One Time</Option>\n          <Option value=\"event-driven\">Event Driven</Option>\n          <Option value=\"conditional\">Conditional</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['scheduleType']} noStyle>\n        {({ getFieldValue }) => {\n          const scheduleType = getFieldValue('scheduleType');\n          return renderScheduleTypeFields(scheduleType);\n        }}\n      </Form.Item>\n\n      <Divider>Advanced Settings</Divider>\n\n      <Form.Item name=\"timezone\" label=\"Timezone\">\n        <Select showSearch>\n          <Option value=\"UTC\">UTC</Option>\n          <Option value=\"America/New_York\">America/New_York</Option>\n          <Option value=\"America/Los_Angeles\">America/Los_Angeles</Option>\n          <Option value=\"Europe/London\">Europe/London</Option>\n          <Option value=\"Asia/Tokyo\">Asia/Tokyo</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"maxConcurrent\" label=\"Max Concurrent Executions\">\n        <InputNumber min={1} max={10} />\n      </Form.Item>\n\n      <Form.Item name=\"queueStrategy\" label=\"Queue Strategy\">\n        <Select>\n          <Option value=\"fifo\">First In, First Out</Option>\n          <Option value=\"lifo\">Last In, First Out</Option>\n          <Option value=\"priority\">Priority Based</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"skipIfRunning\" label=\"Skip If Already Running\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Divider>Retry Policy</Divider>\n\n      <Form.Item name=\"retryEnabled\" label=\"Enable Retries\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item dependencies={['retryEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('retryEnabled')) return null;\n          return (\n            <>\n              <Form.Item name=\"maxAttempts\" label=\"Max Retry Attempts\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n              <Form.Item name=\"backoffStrategy\" label=\"Backoff Strategy\">\n                <Select>\n                  <Option value=\"linear\">Linear</Option>\n                  <Option value=\"exponential\">Exponential</Option>\n                  <Option value=\"fixed\">Fixed</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item name=\"initialDelay\" label=\"Initial Delay (ms)\">\n                <InputNumber min={100} />\n              </Form.Item>\n            </>\n          );\n        }}\n      </Form.Item>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingSchedule ? 'Update Schedule' : 'Create Schedule'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingSchedule(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderScheduleTypeFields = (scheduleType: string) => {\n    switch (scheduleType) {\n      case 'cron':\n        return (\n          <>\n            <Form.Item\n              name=\"cronExpression\"\n              label={\n                <Space>\n                  Cron Expression\n                  <Tooltip title=\"Format: second minute hour day month weekday\">\n                    <InfoCircleOutlined />\n                  </Tooltip>\n                </Space>\n              }\n              rules={[{ required: true, message: 'Please enter a cron expression' }]}\n            >\n              <Input placeholder=\"0 0 9 * * *\" />\n            </Form.Item>\n            <Form.Item name=\"cronDescription\" label=\"Description\">\n              <Input placeholder=\"Every day at 9:00 AM\" />\n            </Form.Item>\n          </>\n        );\n      case 'interval':\n        return (\n          <>\n            <Form.Item name=\"intervalMs\" label=\"Interval (milliseconds)\">\n              <InputNumber min={1000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"maxExecutions\" label=\"Max Executions (optional)\">\n              <InputNumber min={1} />\n            </Form.Item>\n          </>\n        );\n      case 'once':\n        return (\n          <Form.Item name=\"executeAt\" label=\"Execute At\">\n            <DatePicker showTime />\n          </Form.Item>\n        );\n      case 'event-driven':\n        return (\n          <>\n            <Form.Item name=\"eventType\" label=\"Event Type\">\n              <Input placeholder=\"webhook\" />\n            </Form.Item>\n            <Form.Item name=\"eventSource\" label=\"Event Source\">\n              <Input placeholder=\"api.example.com\" />\n            </Form.Item>\n          </>\n        );\n      case 'conditional':\n        return (\n          <>\n            <Form.Item name=\"condition\" label=\"JavaScript Condition\">\n              <TextArea placeholder=\"return data.status === 'ready'\" rows={3} />\n            </Form.Item>\n            <Form.Item name=\"checkIntervalMs\" label=\"Check Interval (ms)\">\n              <InputNumber min={1000} placeholder=\"60000\" />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderSchedulesList = () => (\n    <List\n      dataSource={schedules}\n      renderItem={(schedule) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={schedule.enabled}\n              onChange={(checked) => handleToggleSchedule(schedule.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => handleTriggerSchedule(schedule.id)}\n              disabled={!schedule.enabled}\n            >\n              Trigger\n            </Button>,\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingSchedule(schedule.id);\n                form.setFieldsValue({\n                  name: schedule.name,\n                  description: schedule.description,\n                  enabled: schedule.enabled,\n                  scheduleType: schedule.scheduleType,\n                  // Add other fields based on schedule type\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteSchedule(schedule.id)}\n            />,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {schedule.name}\n                <Tag color={schedule.enabled ? 'green' : 'default'}>{schedule.scheduleType}</Tag>\n                {schedule.nextExecution && (\n                  <Tag color=\"blue\">Next: {new Date(schedule.nextExecution).toLocaleString()}</Tag>\n                )}\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {schedule.description}\n                <Space>\n                  <Badge status={schedule.enabled ? 'success' : 'default'} />\n                  {schedule.enabled ? 'Active' : 'Inactive'}\n                  {schedule.lastExecuted && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(schedule.lastExecuted).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No schedules configured' }}\n    />\n  );\n\n  const renderExecutionsList = () => (\n    <List\n      dataSource={activeExecutions}\n      renderItem={(execution) => (\n        <List.Item\n          actions={[\n            execution.status === 'running' && (\n              <Button\n                type=\"link\"\n                danger\n                icon={<PauseCircleOutlined />}\n                onClick={() => handleCancelExecution(execution.id)}\n              >\n                Cancel\n              </Button>\n            ),\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                Execution {execution.id.split('_')[1]}\n                <Tag color={getExecutionStatusColor(execution.status)}>{execution.status}</Tag>\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                <div>Scheduled: {new Date(execution.scheduledAt).toLocaleString()}</div>\n                {execution.startedAt && (\n                  <div>Started: {new Date(execution.startedAt).toLocaleString()}</div>\n                )}\n                {execution.duration && (\n                  <div>Duration: {(execution.duration / 1000).toFixed(2)}s</div>\n                )}\n                {execution.error && (\n                  <div style={{ color: colors.error[500] }}>Error: {execution.error}</div>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No active executions' }}\n    />\n  );\n\n  const renderAnalytics = () => {\n    if (!analytics) return <div>Select a schedule to view analytics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic\n            title=\"Success Rate\"\n            value={analytics.successRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: analytics.successRate > 90 ? colors.success[600] : colors.warning[600],\n            }}\n          />\n          <Statistic title=\"Total Executions\" value={analytics.totalExecutions} />\n          <Statistic\n            title=\"Average Duration\"\n            value={analytics.averageDuration / 1000}\n            precision={2}\n            suffix=\"s\"\n          />\n          <Statistic\n            title=\"Failed Executions\"\n            value={analytics.failedExecutions}\n            valueStyle={{\n              color: analytics.failedExecutions > 0 ? colors.error[600] : colors.success[600],\n            }}\n          />\n        </div>\n\n        {analytics.recommendations.length > 0 && (\n          <Card title=\"Recommendations\" size=\"small\">\n            <List\n              dataSource={analytics.recommendations}\n              renderItem={(rec) => (\n                <List.Item>\n                  <List.Item.Meta\n                    title={\n                      <Space>\n                        {rec.description}\n                        <Tag\n                          color={\n                            rec.priority === 'high'\n                              ? 'red'\n                              : rec.priority === 'medium'\n                                ? 'orange'\n                                : 'green'\n                          }\n                        >\n                          {rec.priority}\n                        </Tag>\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <div>\n                          <strong>Implementation:</strong> {rec.implementation}\n                        </div>\n                        <div>\n                          <strong>Impact:</strong> {rec.estimatedImpact}\n                        </div>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getExecutionStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'blue';\n      case 'completed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'cancelled':\n        return 'orange';\n      case 'skipped':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <ClockCircleOutlined />\n          Workflow Scheduling\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1000}\n      footer={null}\n      className={cn('workflow-scheduling-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <CalendarOutlined />\n              Schedules ({schedules.length})\n            </span>\n          }\n          key=\"schedules\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card title=\"Create Schedule\" size=\"small\">\n              {renderScheduleForm()}\n            </Card>\n            <Card title=\"Active Schedules\" size=\"small\">\n              {renderSchedulesList()}\n            </Card>\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Executions ({activeExecutions.length})\n            </span>\n          }\n          key=\"executions\"\n        >\n          {renderExecutionsList()}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Analytics\n            </span>\n          }\n          key=\"analytics\"\n        >\n          <div className=\"mb-4\">\n            <Select\n              placeholder=\"Select a schedule to view analytics\"\n              value={selectedSchedule?.id}\n              onChange={(scheduleId) => {\n                const schedule = schedules.find((s) => s.id === scheduleId);\n                setSelectedSchedule(schedule || null);\n              }}\n              style={{ width: 300 }}\n            >\n              {schedules.map((schedule) => (\n                <Option key={schedule.id} value={schedule.id}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx",
        "start": 244,
        "end": 711,
        "startLoc": {
          "line": 244,
          "column": 5,
          "position": 1984
        },
        "endLoc": {
          "line": 711,
          "column": 2,
          "position": 5581
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx",
        "start": 248,
        "end": 715,
        "startLoc": {
          "line": 248,
          "column": 5,
          "position": 2036
        },
        "endLoc": {
          "line": 715,
          "column": 2,
          "position": 5633
        }
      }
    },
    {
      "format": "tsx",
      "lines": 722,
      "fragment": "/**\n * Workflow Scheduling Panel\n *\n * Provides comprehensive workflow scheduling interface with cron expressions,\n * interval scheduling, conditional execution, and advanced configuration options.\n */\n\nimport {\n  BarChartOutlined,\n  CalendarOutlined,\n  ClockCircleOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  InfoCircleOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  DatePicker,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Tabs,\n  Tag,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type ScheduleAnalytics,\n  type ScheduleConfiguration,\n  type ScheduledExecution,\n  workflowScheduler,\n} from '@/core/services/workflowScheduler';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface SchedulingPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const SchedulingPanel: React.FC<SchedulingPanelProps> = ({\n  workflowId,\n  visible,\n  onClose,\n}) => {\n  const [schedules, setSchedules] = useState<ScheduleConfiguration[]>([]);\n  const [activeExecutions, setActiveExecutions] = useState<ScheduledExecution[]>([]);\n  const [selectedSchedule, setSelectedSchedule] = useState<ScheduleConfiguration | null>(null);\n  const [analytics, setAnalytics] = useState<ScheduleAnalytics | null>(null);\n  const [activeTab, setActiveTab] = useState('schedules');\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (visible) {\n      loadSchedules();\n      loadActiveExecutions();\n    }\n  }, [visible, loadActiveExecutions, loadSchedules]);\n\n  useEffect(() => {\n    if (selectedSchedule) {\n      loadAnalytics(selectedSchedule.id);\n    }\n  }, [selectedSchedule, loadAnalytics]);\n\n  const loadSchedules = () => {\n    const allSchedules = workflowScheduler.getAllSchedules();\n    const workflowSchedules = allSchedules.filter((s) => s.workflowId === workflowId);\n    setSchedules(workflowSchedules);\n  };\n\n  const loadActiveExecutions = () => {\n    const allExecutions = workflowScheduler.getActiveExecutions();\n    const workflowExecutions = allExecutions.filter((e) => e.workflowId === workflowId);\n    setActiveExecutions(workflowExecutions);\n  };\n\n  const loadAnalytics = async (scheduleId: string) => {\n    try {\n      const analytics = await workflowScheduler.getScheduleAnalytics(scheduleId);\n      setAnalytics(analytics);\n    } catch (_error) {}\n  };\n\n  const handleCreateSchedule = async (values: any) => {\n    setLoading(true);\n    try {\n      const scheduleConfig = {\n        workflowId,\n        name: values.name,\n        description: values.description,\n        enabled: values.enabled ?? true,\n        scheduleType: values.scheduleType,\n        configuration: buildScheduleConfiguration(values),\n        timezone: values.timezone || 'UTC',\n        retryPolicy: {\n          enabled: values.retryEnabled ?? false,\n          maxAttempts: values.maxAttempts ?? 3,\n          backoffStrategy: values.backoffStrategy ?? 'exponential',\n          initialDelayMs: values.initialDelay ?? 1000,\n          maxDelayMs: values.maxDelay ?? 300000,\n          retryConditions: values.retryConditions?.split(',').map((c: string) => c.trim()) ?? [],\n        },\n        concurrency: {\n          maxConcurrent: values.maxConcurrent ?? 1,\n          queueStrategy: values.queueStrategy ?? 'fifo',\n          skipIfRunning: values.skipIfRunning ?? false,\n          timeout: values.timeout ?? 3600000,\n        },\n        conditions: [],\n        notifications: {\n          onSuccess: [],\n          onFailure: [],\n          onSkip: [],\n          onRetry: [],\n        },\n        metadata: {},\n      };\n\n      workflowScheduler.createSchedule(scheduleConfig);\n      message.success('Schedule created successfully');\n      loadSchedules();\n      form.resetFields();\n      setEditingSchedule(null);\n    } catch (_error) {\n      message.error('Failed to create schedule');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buildScheduleConfiguration = (values: any) => {\n    switch (values.scheduleType) {\n      case 'cron':\n        return {\n          expression: values.cronExpression,\n          description: values.cronDescription,\n        };\n      case 'interval':\n        return {\n          intervalMs: values.intervalMs,\n          maxExecutions: values.maxExecutions,\n          startTime: values.startTime?.toISOString(),\n          endTime: values.endTime?.toISOString(),\n        };\n      case 'once':\n        return {\n          executeAt: values.executeAt?.toISOString(),\n          delay: values.delay,\n        };\n      case 'event-driven':\n        return {\n          eventType: values.eventType,\n          eventSource: values.eventSource,\n          filters: [],\n          debounceMs: values.debounceMs,\n          maxEventsPerWindow: values.maxEventsPerWindow,\n        };\n      case 'conditional':\n        return {\n          condition: values.condition,\n          checkIntervalMs: values.checkIntervalMs,\n          maxChecks: values.maxChecks,\n          dependencies: values.dependencies?.split(',').map((d: string) => d.trim()) ?? [],\n        };\n      default:\n        return {\n          eventType: '',\n          eventSource: '',\n          filters: [],\n          debounceMs: 0,\n          maxEventsPerWindow: 0,\n        };\n    }\n  };\n\n  const handleToggleSchedule = async (scheduleId: string, enabled: boolean) => {\n    try {\n      workflowScheduler.toggleSchedule(scheduleId, enabled);\n      message.success(`Schedule ${enabled ? 'enabled' : 'disabled'}`);\n      loadSchedules();\n    } catch (_error) {\n      message.error('Failed to toggle schedule');\n    }\n  };\n\n  const handleDeleteSchedule = async (scheduleId: string) => {\n    try {\n      workflowScheduler.deleteSchedule(scheduleId);\n      message.success('Schedule deleted');\n      loadSchedules();\n      if (selectedSchedule?.id === scheduleId) {\n        setSelectedSchedule(null);\n        setAnalytics(null);\n      }\n    } catch (_error) {\n      message.error('Failed to delete schedule');\n    }\n  };\n\n  const handleTriggerSchedule = async (scheduleId: string) => {\n    try {\n      await workflowScheduler.triggerSchedule(scheduleId, true);\n      message.success('Schedule triggered successfully');\n      loadActiveExecutions();\n    } catch (_error) {\n      message.error('Failed to trigger schedule');\n    }\n  };\n\n  const handleCancelExecution = (executionId: string) => {\n    try {\n      workflowScheduler.cancelExecution(executionId);\n      message.success('Execution cancelled');\n      loadActiveExecutions();\n    } catch (_error) {\n      message.error('Failed to cancel execution');\n    }\n  };\n\n  const renderScheduleForm = () => (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleCreateSchedule}\n      initialValues={{\n        enabled: true,\n        scheduleType: 'cron',\n        timezone: 'UTC',\n        retryEnabled: false,\n        maxAttempts: 3,\n        backoffStrategy: 'exponential',\n        maxConcurrent: 1,\n        queueStrategy: 'fifo',\n        skipIfRunning: false,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Schedule Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"Daily data sync\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Optional description of what this schedule does\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"scheduleType\" label=\"Schedule Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"cron\">Cron Expression</Option>\n          <Option value=\"interval\">Fixed Interval</Option>\n          <Option value=\"once\">One Time</Option>\n          <Option value=\"event-driven\">Event Driven</Option>\n          <Option value=\"conditional\">Conditional</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['scheduleType']} noStyle>\n        {({ getFieldValue }) => {\n          const scheduleType = getFieldValue('scheduleType');\n          return renderScheduleTypeFields(scheduleType);\n        }}\n      </Form.Item>\n\n      <Divider>Advanced Settings</Divider>\n\n      <Form.Item name=\"timezone\" label=\"Timezone\">\n        <Select showSearch>\n          <Option value=\"UTC\">UTC</Option>\n          <Option value=\"America/New_York\">America/New_York</Option>\n          <Option value=\"America/Los_Angeles\">America/Los_Angeles</Option>\n          <Option value=\"Europe/London\">Europe/London</Option>\n          <Option value=\"Asia/Tokyo\">Asia/Tokyo</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"maxConcurrent\" label=\"Max Concurrent Executions\">\n        <InputNumber min={1} max={10} />\n      </Form.Item>\n\n      <Form.Item name=\"queueStrategy\" label=\"Queue Strategy\">\n        <Select>\n          <Option value=\"fifo\">First In, First Out</Option>\n          <Option value=\"lifo\">Last In, First Out</Option>\n          <Option value=\"priority\">Priority Based</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"skipIfRunning\" label=\"Skip If Already Running\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Divider>Retry Policy</Divider>\n\n      <Form.Item name=\"retryEnabled\" label=\"Enable Retries\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item dependencies={['retryEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('retryEnabled')) return null;\n          return (\n            <>\n              <Form.Item name=\"maxAttempts\" label=\"Max Retry Attempts\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n              <Form.Item name=\"backoffStrategy\" label=\"Backoff Strategy\">\n                <Select>\n                  <Option value=\"linear\">Linear</Option>\n                  <Option value=\"exponential\">Exponential</Option>\n                  <Option value=\"fixed\">Fixed</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item name=\"initialDelay\" label=\"Initial Delay (ms)\">\n                <InputNumber min={100} />\n              </Form.Item>\n            </>\n          );\n        }}\n      </Form.Item>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingSchedule ? 'Update Schedule' : 'Create Schedule'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingSchedule(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderScheduleTypeFields = (scheduleType: string) => {\n    switch (scheduleType) {\n      case 'cron':\n        return (\n          <>\n            <Form.Item\n              name=\"cronExpression\"\n              label={\n                <Space>\n                  Cron Expression\n                  <Tooltip title=\"Format: second minute hour day month weekday\">\n                    <InfoCircleOutlined />\n                  </Tooltip>\n                </Space>\n              }\n              rules={[{ required: true, message: 'Please enter a cron expression' }]}\n            >\n              <Input placeholder=\"0 0 9 * * *\" />\n            </Form.Item>\n            <Form.Item name=\"cronDescription\" label=\"Description\">\n              <Input placeholder=\"Every day at 9:00 AM\" />\n            </Form.Item>\n          </>\n        );\n      case 'interval':\n        return (\n          <>\n            <Form.Item name=\"intervalMs\" label=\"Interval (milliseconds)\">\n              <InputNumber min={1000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"maxExecutions\" label=\"Max Executions (optional)\">\n              <InputNumber min={1} />\n            </Form.Item>\n          </>\n        );\n      case 'once':\n        return (\n          <Form.Item name=\"executeAt\" label=\"Execute At\">\n            <DatePicker showTime />\n          </Form.Item>\n        );\n      case 'event-driven':\n        return (\n          <>\n            <Form.Item name=\"eventType\" label=\"Event Type\">\n              <Input placeholder=\"webhook\" />\n            </Form.Item>\n            <Form.Item name=\"eventSource\" label=\"Event Source\">\n              <Input placeholder=\"api.example.com\" />\n            </Form.Item>\n          </>\n        );\n      case 'conditional':\n        return (\n          <>\n            <Form.Item name=\"condition\" label=\"JavaScript Condition\">\n              <TextArea placeholder=\"return data.status === 'ready'\" rows={3} />\n            </Form.Item>\n            <Form.Item name=\"checkIntervalMs\" label=\"Check Interval (ms)\">\n              <InputNumber min={1000} placeholder=\"60000\" />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderSchedulesList = () => (\n    <List\n      dataSource={schedules}\n      renderItem={(schedule) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={schedule.enabled}\n              onChange={(checked) => handleToggleSchedule(schedule.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => handleTriggerSchedule(schedule.id)}\n              disabled={!schedule.enabled}\n            >\n              Trigger\n            </Button>,\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingSchedule(schedule.id);\n                form.setFieldsValue({\n                  name: schedule.name,\n                  description: schedule.description,\n                  enabled: schedule.enabled,\n                  scheduleType: schedule.scheduleType,\n                  // Add other fields based on schedule type\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteSchedule(schedule.id)}\n            />,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {schedule.name}\n                <Tag color={schedule.enabled ? 'green' : 'default'}>{schedule.scheduleType}</Tag>\n                {schedule.nextExecution && (\n                  <Tag color=\"blue\">Next: {new Date(schedule.nextExecution).toLocaleString()}</Tag>\n                )}\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {schedule.description}\n                <Space>\n                  <Badge status={schedule.enabled ? 'success' : 'default'} />\n                  {schedule.enabled ? 'Active' : 'Inactive'}\n                  {schedule.lastExecuted && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(schedule.lastExecuted).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No schedules configured' }}\n    />\n  );\n\n  const renderExecutionsList = () => (\n    <List\n      dataSource={activeExecutions}\n      renderItem={(execution) => (\n        <List.Item\n          actions={[\n            execution.status === 'running' && (\n              <Button\n                type=\"link\"\n                danger\n                icon={<PauseCircleOutlined />}\n                onClick={() => handleCancelExecution(execution.id)}\n              >\n                Cancel\n              </Button>\n            ),\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                Execution {execution.id.split('_')[1]}\n                <Tag color={getExecutionStatusColor(execution.status)}>{execution.status}</Tag>\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                <div>Scheduled: {new Date(execution.scheduledAt).toLocaleString()}</div>\n                {execution.startedAt && (\n                  <div>Started: {new Date(execution.startedAt).toLocaleString()}</div>\n                )}\n                {execution.duration && (\n                  <div>Duration: {(execution.duration / 1000).toFixed(2)}s</div>\n                )}\n                {execution.error && (\n                  <div style={{ color: colors.error[500] }}>Error: {execution.error}</div>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No active executions' }}\n    />\n  );\n\n  const renderAnalytics = () => {\n    if (!analytics) return <div>Select a schedule to view analytics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic\n            title=\"Success Rate\"\n            value={analytics.successRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: analytics.successRate > 90 ? colors.success[600] : colors.warning[600],\n            }}\n          />\n          <Statistic title=\"Total Executions\" value={analytics.totalExecutions} />\n          <Statistic\n            title=\"Average Duration\"\n            value={analytics.averageDuration / 1000}\n            precision={2}\n            suffix=\"s\"\n          />\n          <Statistic\n            title=\"Failed Executions\"\n            value={analytics.failedExecutions}\n            valueStyle={{\n              color: analytics.failedExecutions > 0 ? colors.error[600] : colors.success[600],\n            }}\n          />\n        </div>\n\n        {analytics.recommendations.length > 0 && (\n          <Card title=\"Recommendations\" size=\"small\">\n            <List\n              dataSource={analytics.recommendations}\n              renderItem={(rec) => (\n                <List.Item>\n                  <List.Item.Meta\n                    title={\n                      <Space>\n                        {rec.description}\n                        <Tag\n                          color={\n                            rec.priority === 'high'\n                              ? 'red'\n                              : rec.priority === 'medium'\n                                ? 'orange'\n                                : 'green'\n                          }\n                        >\n                          {rec.priority}\n                        </Tag>\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <div>\n                          <strong>Implementation:</strong> {rec.implementation}\n                        </div>\n                        <div>\n                          <strong>Impact:</strong> {rec.estimatedImpact}\n                        </div>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getExecutionStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'blue';\n      case 'completed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'cancelled':\n        return 'orange';\n      case 'skipped':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <ClockCircleOutlined />\n          Workflow Scheduling\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1000}\n      footer={null}\n      className={cn('workflow-scheduling-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <CalendarOutlined />\n              Schedules ({schedules.length})\n            </span>\n          }\n          key=\"schedules\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card title=\"Create Schedule\" size=\"small\">\n              {renderScheduleForm()}\n            </Card>\n            <Card title=\"Active Schedules\" size=\"small\">\n              {renderSchedulesList()}\n            </Card>\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Executions ({activeExecutions.length})\n            </span>\n          }\n          key=\"executions\"\n        >\n          {renderExecutionsList()}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Analytics\n            </span>\n          }\n          key=\"analytics\"\n        >\n          <div className=\"mb-4\">\n            <Select\n              placeholder=\"Select a schedule to view analytics\"\n              value={selectedSchedule?.id}\n              onChange={(scheduleId) => {\n                const schedule = schedules.find((s) => s.id === scheduleId);\n                setSelectedSchedule(schedule || null);\n              }}\n              style={{ width: 300 }}\n            >\n              {schedules.map((schedule) => (\n                <Option key={schedule.id} value={schedule.id}>\n                  {schedule.name}\n                </Option>\n              ))}\n            </Select>\n          </div>\n          {renderAnalytics()}\n        </TabPane>\n      </Tabs>\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx",
        "start": 1,
        "end": 722,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 722,
          "column": 2,
          "position": 5638
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx",
        "start": 5,
        "end": 726,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 726,
          "column": 2,
          "position": 5690
        }
      }
    },
    {
      "format": "javascript",
      "lines": 193,
      "fragment": "={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors flex items-center space-x-2\"\n          >\n            <span>←</span>\n            <span>Back to canvas</span>\n          </button>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <span>/</span>\n            <span>{nodeDefinition.displayName}</span>\n            <span className=\"text-xs px-2 py-1 bg-gray-700 rounded\">{currentNode.type}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={handleSaveWorkflow}\n            disabled={isSaving || !currentWorkflow}\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm rounded transition-colors\"\n            title=\"Save workflow without closing modal\"\n          >\n            <SaveOutlined className={isSaving ? 'animate-spin' : ''} />\n            <span>{isSaving ? 'Saving...' : 'Save'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left Column: Input Data */}\n        <div\n          className=\"bg-gray-900 border-r border-gray-600 flex flex-col\"\n          style={{ width: `${leftWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📥</span>\n              INPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {(enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n            testResults?.data &&\n            Array.isArray(testResults.data) &&\n            testResults.data.length > 0 ? (\n              <EmailInputPanel\n                emails={testResults.data}\n                selectedEmailId={selectedEmail?.id}\n                onEmailSelect={setSelectedEmail}\n              />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent input data would appear here</div>\n            ) : currentNode?.type === 'condition' ? (\n              <div className=\"text-gray-400 text-sm\">Condition input data would appear here</div>\n            ) : (\n              <DataVisualizationPanel\n                data={inputData}\n                title=\"Input Data\"\n                description=\"Data from connected nodes\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Middle Column: Parameters & Settings */}\n        <div\n          className=\"bg-gray-800 flex flex-col border-l border-r border-gray-600\"\n          style={{ width: `${middleWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-700 flex items-center justify-between flex-shrink-0\">\n            <div\n              className=\"cursor-col-resize p-2 hover:bg-gray-600 rounded mr-2 flex items-center\"\n              onMouseDown={handleMouseDown}\n              title=\"Drag to resize column width\"\n            >\n              <div className=\"text-gray-300 text-xs font-mono\">⋮⋮</div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <h2 className=\"text-lg font-semibold text-white\">{nodeDefinition.displayName}</h2>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleTestNode}\n                disabled={isTestingNode}\n                className={`px-3 py-1 rounded text-sm transition-colors ${\n                  isTestingNode\n                    ? 'bg-yellow-600 text-white cursor-wait'\n                    : 'bg-green-600 hover:bg-green-700 text-white'\n                }`}\n              >\n                {isTestingNode ? '⏳ Testing...' : '🧪 Test step'}\n              </button>\n\n              {/* Debug: Test credential modal button */}\n              <button\n                onClick={() => {\n                  handleCreateCredential('gmailOAuth2');\n                }}\n                className=\"px-2 py-1 rounded text-xs bg-purple-600 hover:bg-purple-700 text-white transition-colors\"\n              >\n                🔧 Test Modal\n              </button>\n            </div>\n          </div>\n          <div className=\"flex-1 p-6 overflow-y-auto\">\n            {/* Use enhanced property rendering for Transform nodes and other enhanced types */}\n            {currentNode?.type === 'transform' || enhancedNodeType?.id ? (\n              <PropertyGroupRenderer\n                properties={\n                  registryProperties as Array<\n                    INodeProperty & { displayOptions?: EnhancedDisplayOptions }\n                  >\n                }\n                values={formState}\n                onChange={handleParameterChange}\n                evaluationContext={{\n                  $json: inputData,\n                  $node: {},\n                  $vars: {},\n                  $parameters: formState,\n                }}\n                context={evaluationContext}\n              />\n            ) : (\n              <DynamicPropertyRenderer\n                properties={registryProperties as INodeProperty[]}\n                formState={formState}\n                onChange={handleParameterChange}\n                context={evaluationContext}\n              />\n            )}\n\n            {/* Display test results */}\n            {testResults && (\n              <div className=\"mt-6 p-4 rounded border-l-4 border-l-blue-500 bg-gray-700\">\n                <h4 className=\"text-white font-medium mb-2\">Test Results</h4>\n                <div\n                  className={`text-sm ${testResults.success ? 'text-green-400' : 'text-red-400'}`}\n                >\n                  {testResults.message}\n                </div>\n                {testResults.data && (\n                  <div className=\"mt-2 text-xs text-gray-300\">\n                    {Array.isArray(testResults.data)\n                      ? `Found ${testResults.data.length} items`\n                      : 'Data received'}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Column: Output Data */}\n        <div\n          className=\"bg-gray-900 border-l border-gray-600 flex flex-col\"\n          style={{ width: rightWidth, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📤</span>\n              OUTPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail') ? (\n              <EmailOutputPanel selectedEmail={selectedEmail} />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent output data would appear here</div>\n            ) : currentNode?.type === 'transform' ? (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Transform Output\"\n                description=\"Transformed data output\"\n              />\n            ) : (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Output Data\"\n                description=\"Output from node execution\"\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Credential Modal */}\n      <CredentialModal\n        isOpen={isCredentialModalOpen}\n        onClose={() => {\n          setIsCredentialModalOpen(false);\n        }}\n        credentialType={currentCredentialType}\n        onSave={handleSaveCredential}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx",
        "start": 342,
        "end": 534,
        "startLoc": {
          "line": 342,
          "column": 8,
          "position": 3019
        },
        "endLoc": {
          "line": 534,
          "column": 2,
          "position": 4513
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx",
        "start": 352,
        "end": 544,
        "startLoc": {
          "line": 352,
          "column": 8,
          "position": 3149
        },
        "endLoc": {
          "line": 544,
          "column": 2,
          "position": 4643
        }
      }
    },
    {
      "format": "tsx",
      "lines": 547,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { message } from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { EnhancedDisplayOptions } from '@/app/node-extensions/components/ConditionalPropertyRenderer';\nimport { PropertyGroupRenderer } from '@/app/node-extensions/components/ConditionalPropertyRenderer';\nimport { CredentialApiService, nodeRegistry, useLeanWorkflowStore } from '@/core';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useCredentialStore } from '@/core/stores/credentialStore';\nimport type {\n  PropertyEvaluationContext,\n  PropertyFormState,\n  PropertyValue,\n} from '@/core/types/dynamicProperties';\nimport DataVisualizationPanel from '@/design-system/components/DataVisualization/DataVisualizationPanel';\nimport CredentialModal from './CredentialModal';\nimport DynamicPropertyRenderer from './DynamicPropertyRenderer';\nimport EmailInputPanel from './EmailInputPanel';\nimport EmailOutputPanel from './EmailOutputPanel';\n\nconst credentialApiService = new CredentialApiService();\n\nimport { gmailEnhancedProperties } from '@/app/data/nodes/communication/gmail/enhanced-properties';\nimport { nodeMigrationService } from '@/core/utils/nodeVersioning';\n\ninterface NodeConfigurationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  nodeId?: string;\n}\n\nconst NodeConfigurationPanel: React.FC<NodeConfigurationPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const { getNodeById, updateNodeParameters, saveWorkflow, currentWorkflow, nodes, edges } =\n    useLeanWorkflowStore();\n  const { credentials, loadCredentials, credentialTypes } = useCredentialStore();\n\n  const [leftWidth, setLeftWidth] = useState(700);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isTestingNode, setIsTestingNode] = useState(false);\n  const [testResults, setTestResults] = useState<any>(null);\n  const [selectedEmail, setSelectedEmail] = useState<any>(null);\n  const [isCredentialModalOpen, setIsCredentialModalOpen] = useState(false);\n  const [currentCredentialType, setCurrentCredentialType] = useState('');\n\n  const middleWidth = 550;\n\n  const currentNode = useMemo(() => {\n    if (!nodeId) return null;\n    return getNodeById(nodeId);\n  }, [nodeId, getNodeById]);\n\n  const nodeDefinition = useMemo(() => {\n    if (!currentNode) return null;\n    return nodeRegistry.getNodeTypeDescription(currentNode.type);\n  }, [currentNode]);\n\n  // Get enhanced node type from node data (Gmail-specific)\n  const enhancedNodeType = useMemo(() => {\n    if (!currentNode) return null;\n\n    // For registry-based system, derive node type from node.type\n    if (currentNode.type === 'gmail-enhanced' || currentNode.type?.includes('gmail')) {\n      return { id: 'gmail-enhanced' };\n    }\n    if (currentNode.type === 'ai-agent') {\n      return { id: 'ai-agent' };\n    }\n\n    return null;\n  }, [currentNode]);\n\n  // Get connected input nodes for display\n  const connectedInputNodes = useMemo(() => {\n    if (!currentNode || !Array.isArray(nodes) || !Array.isArray(edges)) return [];\n    return edges\n      .filter((edge) => edge.target === currentNode.id)\n      .map((edge) => nodes.find((node) => node.id === edge.source))\n      .filter(Boolean);\n  }, [currentNode, edges, nodes]);\n\n  // Extract input data from connected nodes\n  const inputData = useMemo(() => {\n    const data: any = {};\n    connectedInputNodes.forEach((node: any, index) => {\n      if (node?.parameters?.outputData) {\n        data[`input_${index}`] = node.parameters.outputData;\n      }\n    });\n    return data;\n  }, [connectedInputNodes]);\n\n  useEffect(() => {\n    if (currentNode) {\n      setFormState(currentNode.parameters || {});\n    }\n  }, [currentNode]);\n\n  // Auto-select first email when Gmail test results come in\n  useEffect(() => {\n    if (\n      testResults?.success &&\n      (enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n      testResults?.data &&\n      Array.isArray(testResults.data) &&\n      testResults.data.length > 0\n    ) {\n      setSelectedEmail(testResults.data[0]);\n    }\n  }, [testResults, enhancedNodeType?.id, currentNode?.type]);\n\n  // Load credentials on mount\n  useEffect(() => {\n    loadCredentials();\n  }, [loadCredentials]);\n\n  // Debug modal state changes\n  useEffect(() => {}, []);\n\n  const handleParameterChange = useCallback(\n    (parameterName: string, value: PropertyValue) => {\n      const newFormState = { ...formState, [parameterName]: value };\n      setFormState(newFormState);\n      if (currentNode) {\n        updateNodeParameters(currentNode.id, newFormState);\n      }\n    },\n    [formState, currentNode, updateNodeParameters]\n  );\n\n  // Gmail-specific test functionality\n  const handleTestNode = useCallback(async () => {\n    if (!currentNode || !nodeDefinition) return;\n\n    setIsTestingNode(true);\n    setTestResults(null);\n\n    try {\n      // Check if this is a Gmail enhanced node\n      if (currentNode.type?.includes('gmail') || enhancedNodeType?.id === 'gmail-enhanced') {\n        // Use the registry test method for Gmail trigger\n        const result = await nodeRegistry.testNodeType(\n          currentNode.type,\n          formState,\n          currentNode.credentials || {}\n        );\n\n        setTestResults({\n          success: result.success,\n          message: result.message || 'Gmail test completed',\n          data: result.data,\n        });\n      } else {\n        // Generic node testing\n        const result = await nodeRegistry.testNodeType(\n          currentNode.type,\n          formState,\n          currentNode.credentials || {}\n        );\n\n        setTestResults({\n          success: result.success,\n          message: result.message || 'Test completed',\n          data: result.data,\n        });\n      }\n    } catch (error: any) {\n      setTestResults({\n        success: false,\n        message: error.message || 'Test failed',\n      });\n    } finally {\n      setIsTestingNode(false);\n    }\n  }, [currentNode, nodeDefinition, formState, enhancedNodeType]);\n\n  // Credential management handlers\n  const handleCreateCredential = useCallback((type: string) => {\n    setCurrentCredentialType(type);\n    setIsCredentialModalOpen(true);\n  }, []);\n\n  const handleCredentialSelect = useCallback(\n    (credential: any) => {\n      // Handle credential selection\n      const credentialId = credential.id;\n      handleParameterChange('credential', credentialId);\n    },\n    [handleParameterChange]\n  );\n\n  const handleCredentialChange = useCallback(\n    (credentialId: string) => {\n      handleParameterChange('credential', credentialId);\n    },\n    [handleParameterChange]\n  );\n\n  const handleSaveCredential = useCallback(\n    async (credentialData: any) => {\n      try {\n        await credentialApiService.createCredential(credentialData);\n        await loadCredentials();\n        setIsCredentialModalOpen(false);\n        message.success('Credential saved successfully');\n      } catch (error: any) {\n        message.error(`Failed to save credential: ${error.message}`);\n      }\n    },\n    [loadCredentials]\n  );\n\n  // Create evaluation context for dynamic properties\n  const evaluationContext: PropertyEvaluationContext = useMemo(\n    () => ({\n      formState,\n      nodeData: currentNode ? { ...currentNode } : undefined,\n      credentials: credentials as Array<Record<string, unknown>>,\n      credentialTypes: credentialTypes as unknown as Array<Record<string, unknown>>,\n      onCreateCredential: handleCreateCredential,\n      onCredentialSelect: handleCredentialSelect,\n      onCredentialChange: handleCredentialChange,\n    }),\n    [\n      formState,\n      currentNode,\n      credentials,\n      credentialTypes,\n      handleCreateCredential,\n      handleCredentialSelect,\n      handleCredentialChange,\n    ]\n  );\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging) return;\n      const containerWidth = window.innerWidth;\n      const minLeftWidth = 200;\n      const maxLeftWidth = containerWidth - middleWidth - 200;\n      setLeftWidth((prevWidth) =>\n        Math.max(minLeftWidth, Math.min(maxLeftWidth, prevWidth + e.movementX))\n      );\n    },\n    [isDragging]\n  );\n\n  useEffect(() => {\n    if (isDragging) {\n      document.body.style.cursor = 'col-resize';\n      document.body.style.userSelect = 'none';\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const handleSaveWorkflow = useCallback(async () => {\n    if (!currentWorkflow) {\n      message.error('No workflow to save');\n      return;\n    }\n    setIsSaving(true);\n    try {\n      await saveWorkflow();\n      message.success('Workflow saved successfully');\n    } catch (error: any) {\n      message.error(`Failed to save workflow: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [currentWorkflow, saveWorkflow]);\n\n  // Enhanced property resolution with Transform node support\n  const registryProperties = useMemo(() => {\n    // For enhanced nodes like Gmail, get properties from enhanced node type\n    if (enhancedNodeType?.id === 'gmail-enhanced') {\n      // Use directly imported Gmail enhanced properties for comprehensive form\n      return gmailEnhancedProperties;\n    }\n\n    // For Transform nodes, check if migration is needed and use enhanced version\n    if (currentNode?.type === 'transform') {\n      try {\n        const currentVersion = currentNode.typeVersion || currentNode.version || 1;\n        const latestVersion = nodeMigrationService.getLatestVersion('transform');\n\n        if (currentVersion < latestVersion) {\n          // Migrate the node instance\n          const migratedNode = nodeMigrationService.migrateNodeInstance(currentNode, latestVersion);\n\n          // Update the node with migrated parameters\n          if (migratedNode.parameters !== currentNode.parameters) {\n            updateNodeParameters(currentNode.id, migratedNode.parameters);\n          }\n        }\n\n        // Get the enhanced transform node properties (synchronously)\n        const enhancedTransformNode = nodeRegistry.getEnhancedNodeTypeSync('transform');\n        if (enhancedTransformNode?.configuration?.properties) {\n          return enhancedTransformNode.configuration.properties;\n        }\n      } catch (_error) {}\n    }\n\n    if (!nodeDefinition?.properties) return [];\n    return nodeDefinition.properties;\n  }, [nodeDefinition, enhancedNodeType, currentNode, updateNodeParameters]);\n\n  if (!isOpen || !currentNode || !nodeDefinition) {\n    return null;\n  }\n\n  const rightWidth = `calc(100vw - ${leftWidth}px - ${middleWidth}px)`;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col bg-gray-900\">\n      <div className=\"w-full p-4 border-b border-gray-700 bg-gray-900 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors flex items-center space-x-2\"\n          >\n            <span>←</span>\n            <span>Back to canvas</span>\n          </button>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <span>/</span>\n            <span>{nodeDefinition.displayName}</span>\n            <span className=\"text-xs px-2 py-1 bg-gray-700 rounded\">{currentNode.type}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={handleSaveWorkflow}\n            disabled={isSaving || !currentWorkflow}\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm rounded transition-colors\"\n            title=\"Save workflow without closing modal\"\n          >\n            <SaveOutlined className={isSaving ? 'animate-spin' : ''} />\n            <span>{isSaving ? 'Saving...' : 'Save'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left Column: Input Data */}\n        <div\n          className=\"bg-gray-900 border-r border-gray-600 flex flex-col\"\n          style={{ width: `${leftWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📥</span>\n              INPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {(enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n            testResults?.data &&\n            Array.isArray(testResults.data) &&\n            testResults.data.length > 0 ? (\n              <EmailInputPanel\n                emails={testResults.data}\n                selectedEmailId={selectedEmail?.id}\n                onEmailSelect={setSelectedEmail}\n              />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent input data would appear here</div>\n            ) : currentNode?.type === 'condition' ? (\n              <div className=\"text-gray-400 text-sm\">Condition input data would appear here</div>\n            ) : (\n              <DataVisualizationPanel\n                data={inputData}\n                title=\"Input Data\"\n                description=\"Data from connected nodes\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Middle Column: Parameters & Settings */}\n        <div\n          className=\"bg-gray-800 flex flex-col border-l border-r border-gray-600\"\n          style={{ width: `${middleWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-700 flex items-center justify-between flex-shrink-0\">\n            <div\n              className=\"cursor-col-resize p-2 hover:bg-gray-600 rounded mr-2 flex items-center\"\n              onMouseDown={handleMouseDown}\n              title=\"Drag to resize column width\"\n            >\n              <div className=\"text-gray-300 text-xs font-mono\">⋮⋮</div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <h2 className=\"text-lg font-semibold text-white\">{nodeDefinition.displayName}</h2>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleTestNode}\n                disabled={isTestingNode}\n                className={`px-3 py-1 rounded text-sm transition-colors ${\n                  isTestingNode\n                    ? 'bg-yellow-600 text-white cursor-wait'\n                    : 'bg-green-600 hover:bg-green-700 text-white'\n                }`}\n              >\n                {isTestingNode ? '⏳ Testing...' : '🧪 Test step'}\n              </button>\n\n              {/* Debug: Test credential modal button */}\n              <button\n                onClick={() => {\n                  handleCreateCredential('gmailOAuth2');\n                }}\n                className=\"px-2 py-1 rounded text-xs bg-purple-600 hover:bg-purple-700 text-white transition-colors\"\n              >\n                🔧 Test Modal\n              </button>\n            </div>\n          </div>\n          <div className=\"flex-1 p-6 overflow-y-auto\">\n            {/* Use enhanced property rendering for Transform nodes and other enhanced types */}\n            {currentNode?.type === 'transform' || enhancedNodeType?.id ? (\n              <PropertyGroupRenderer\n                properties={\n                  registryProperties as Array<\n                    INodeProperty & { displayOptions?: EnhancedDisplayOptions }\n                  >\n                }\n                values={formState}\n                onChange={handleParameterChange}\n                evaluationContext={{\n                  $json: inputData,\n                  $node: {},\n                  $vars: {},\n                  $parameters: formState,\n                }}\n                context={evaluationContext}\n              />\n            ) : (\n              <DynamicPropertyRenderer\n                properties={registryProperties as INodeProperty[]}\n                formState={formState}\n                onChange={handleParameterChange}\n                context={evaluationContext}\n              />\n            )}\n\n            {/* Display test results */}\n            {testResults && (\n              <div className=\"mt-6 p-4 rounded border-l-4 border-l-blue-500 bg-gray-700\">\n                <h4 className=\"text-white font-medium mb-2\">Test Results</h4>\n                <div\n                  className={`text-sm ${testResults.success ? 'text-green-400' : 'text-red-400'}`}\n                >\n                  {testResults.message}\n                </div>\n                {testResults.data && (\n                  <div className=\"mt-2 text-xs text-gray-300\">\n                    {Array.isArray(testResults.data)\n                      ? `Found ${testResults.data.length} items`\n                      : 'Data received'}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Column: Output Data */}\n        <div\n          className=\"bg-gray-900 border-l border-gray-600 flex flex-col\"\n          style={{ width: rightWidth, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📤</span>\n              OUTPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail') ? (\n              <EmailOutputPanel selectedEmail={selectedEmail} />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent output data would appear here</div>\n            ) : currentNode?.type === 'transform' ? (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Transform Output\"\n                description=\"Transformed data output\"\n              />\n            ) : (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Output Data\"\n                description=\"Output from node execution\"\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Credential Modal */}\n      <CredentialModal\n        isOpen={isCredentialModalOpen}\n        onClose={() => {\n          setIsCredentialModalOpen(false);\n        }}\n        credentialType={currentCredentialType}\n        onSave={handleSaveCredential}\n      />\n\n      {/* Debug info - commented out for production */}\n      {/* {console.log('🔧 Modal state debug:', {\n        isCredentialModalOpen,\n        currentCredentialType,\n        credentials: credentials?.length\n      })} */}\n    </div>\n  );\n};\n\nexport default NodeConfigurationPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx",
        "start": 1,
        "end": 547,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 547,
          "column": 2,
          "position": 4546
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx",
        "start": 11,
        "end": 557,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 130
        },
        "endLoc": {
          "line": 557,
          "column": 2,
          "position": 4676
        }
      }
    },
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "={<StopOutlined />} onClick={handleStop} size=\"small\">\n              Stop\n            </Button>\n          ) : (\n            <Dropdown\n              menu={{ items: runMenuItems }}\n              trigger={['click']}\n              disabled={nodes.length === 0}\n            >\n              <Button type=\"primary\" icon={<PlayCircleOutlined />} loading={testing} size=\"small\">\n                Run <DownOutlined />\n              </Button>\n            </Dropdown>\n          )}\n\n          {/* Test button */}\n          <Button\n            icon={<BugOutlined />}\n            onClick={handleTest}\n            disabled={nodes.length === 0}\n            size=\"small\"\n          >\n            Test\n          </Button>\n\n          {/* Execution status */}\n          {currentExecution && (\n            <Badge\n              status={\n                currentExecution.status === 'running'\n                  ? 'processing'\n                  : currentExecution.status === 'completed'\n                    ? 'success'\n                    : currentExecution.status === 'failed'\n                      ? 'error'\n                      : 'default'\n              }\n              text={\n                <span className=\"text-sm\">\n                  {currentExecution.status === 'running'\n                    ? `Running (${(currentExecution as any).progress?.completedNodes?.length || 0}/${(currentExecution as any).progress?.totalNodes || 0})`\n                    : `${currentExecution.status} - ${Math.round((currentExecution.duration || 0) / 1000)}s`}\n                </span>\n              }\n            />\n          )}\n        </Space>\n\n        <Space>\n          {/* Workflow info */}\n          <span className=\"text-sm text-gray-500\">\n            {nodes.length} nodes • {edges.length} connections\n          </span>\n\n          {/* More actions */}\n          <Dropdown menu={{ items: moreMenuItems }} trigger={['click']}>\n            <Button icon={<SettingOutlined />} size=\"small\">\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Space>\n      </div>\n\n      {/* Workflow Tester Modal */}\n      {showTester && (\n        <WorkflowTester nodes={nodes} edges={edges} onClose={() => setShowTester(false)} />\n      )}\n\n      {/* Execution History Modal */}\n      {showHistory && <ExecutionHistory onClose={() => setShowHistory(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx",
        "start": 211,
        "end": 280,
        "startLoc": {
          "line": 211,
          "column": 5,
          "position": 1761
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 2332
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 212,
        "end": 281,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 1774
        },
        "endLoc": {
          "line": 281,
          "column": 2,
          "position": 2345
        }
      }
    },
    {
      "format": "tsx",
      "lines": 283,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Execution Toolbar Component - Controls for running workflows\n\nimport {\n  BugOutlined,\n  DownOutlined,\n  ExportOutlined,\n  HistoryOutlined,\n  PlayCircleOutlined,\n  SaveOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Badge, Button, Dropdown, message, Space } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { Edge, Node } from 'reactflow';\nimport { WorkflowApiService } from '@/core';\nimport type { WorkflowExecution } from '@/core/schemas';\nimport { exportWorkflowToBackend, validateWorkflowForExport } from '@/core/utils/workflowExporter';\nimport { ExecutionHistory } from '../ExecutionHistory/ExecutionHistory';\nimport { WorkflowTester } from '../WorkflowTester/WorkflowTester';\n\nconst workflowApiService = new WorkflowApiService();\n\ninterface ExecutionToolbarProps {\n  nodes: Node[];\n  edges: Edge[];\n  currentExecution?: WorkflowExecution | null;\n  onExecutionStart?: (executionId: string) => void;\n  onExecutionStop?: () => void;\n}\n\nexport const ExecutionToolbar: React.FC<ExecutionToolbarProps> = ({\n  nodes,\n  edges,\n  currentExecution,\n  onExecutionStart,\n  onExecutionStop,\n}) => {\n  const [testing, setTesting] = useState(false);\n  const [showTester, setShowTester] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [, setSaving] = useState(false);\n\n  const isRunning = currentExecution?.status === 'running';\n  const canRun = nodes.length > 0 && !isRunning;\n\n  const handleTest = () => {\n    setShowTester(true);\n  };\n\n  const handleRun = async () => {\n    if (!canRun) return;\n\n    // Validate workflow first\n    const validation = validateWorkflowForExport(nodes, edges);\n    if (!validation.isValid) {\n      message.error(`Cannot run workflow: ${validation.errors.join(', ')}`);\n      return;\n    }\n\n    if (validation.warnings.length > 0) {\n      message.warning(`Warnings: ${validation.warnings.join(', ')}`);\n    }\n\n    try {\n      setTesting(true);\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n\n      const execution = await workflowApiService.executeWorkflow({\n        workflow: workflowJson,\n        triggerData: {},\n        options: {\n          timeout: 600000, // 10 minutes\n        },\n      });\n\n      message.success('Workflow execution started');\n      onExecutionStart?.(execution.id);\n    } catch (error: any) {\n      message.error(`Failed to start workflow: ${error.message}`);\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const handleStop = async () => {\n    if (!currentExecution) return;\n\n    try {\n      await workflowApiService.stopExecution(currentExecution.id);\n      message.success('Workflow execution stopped');\n      onExecutionStop?.();\n    } catch (error: any) {\n      message.error(`Failed to stop workflow: ${error.message}`);\n    }\n  };\n\n  const handleSave = async () => {\n    if (nodes.length === 0) {\n      message.warning('Cannot save empty workflow');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n\n      await workflowApiService.createWorkflow({\n        name: `Workflow ${new Date().toLocaleDateString()}`,\n        description: 'Saved from workflow editor',\n        nodes: workflowJson.nodes.map((node) => ({\n          id: node.id,\n          type: node.type,\n          position: { x: node.position[0], y: node.position[1] },\n          data: {\n            label: node.name,\n            parameters: node.parameters,\n            credentials:\n              typeof node.credentials === 'object' && node.credentials\n                ? Object.keys(node.credentials)[0] || undefined\n                : (node.credentials as string | undefined),\n            disabled: node.disabled,\n            notes: node.notes,\n          },\n        })),\n        edges: [], // Convert connections to edges if needed\n        version: 1,\n        isActive: true,\n        tags: ['editor'],\n      });\n\n      message.success('Workflow saved successfully');\n    } catch (error: any) {\n      message.error(`Failed to save workflow: ${error.message}`);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleExport = () => {\n    if (nodes.length === 0) {\n      message.warning('Cannot export empty workflow');\n      return;\n    }\n\n    try {\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n      const blob = new Blob([JSON.stringify(workflowJson, null, 2)], {\n        type: 'application/json',\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `workflow-${Date.now()}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      message.success('Workflow exported successfully');\n    } catch (error: any) {\n      message.error(`Failed to export workflow: ${error.message}`);\n    }\n  };\n\n  const runMenuItems = [\n    {\n      key: 'run',\n      label: 'Run Workflow',\n      icon: <PlayCircleOutlined />,\n      onClick: handleRun,\n      disabled: !canRun,\n    },\n    {\n      key: 'test',\n      label: 'Test Workflow',\n      icon: <BugOutlined />,\n      onClick: handleTest,\n    },\n  ];\n\n  const moreMenuItems = [\n    {\n      key: 'save',\n      label: 'Save Workflow',\n      icon: <SaveOutlined />,\n      onClick: handleSave,\n    },\n    {\n      key: 'export',\n      label: 'Export JSON',\n      icon: <ExportOutlined />,\n      onClick: handleExport,\n    },\n    {\n      key: 'history',\n      label: 'Execution History',\n      icon: <HistoryOutlined />,\n      onClick: () => setShowHistory(true),\n    },\n  ];\n\n  return (\n    <div className=\"execution-toolbar\">\n      <div className=\"bg-white border-b border-gray-200 px-4 py-2 flex items-center justify-between\">\n        <Space>\n          {/* Primary execution controls */}\n          {isRunning ? (\n            <Button danger icon={<StopOutlined />} onClick={handleStop} size=\"small\">\n              Stop\n            </Button>\n          ) : (\n            <Dropdown\n              menu={{ items: runMenuItems }}\n              trigger={['click']}\n              disabled={nodes.length === 0}\n            >\n              <Button type=\"primary\" icon={<PlayCircleOutlined />} loading={testing} size=\"small\">\n                Run <DownOutlined />\n              </Button>\n            </Dropdown>\n          )}\n\n          {/* Test button */}\n          <Button\n            icon={<BugOutlined />}\n            onClick={handleTest}\n            disabled={nodes.length === 0}\n            size=\"small\"\n          >\n            Test\n          </Button>\n\n          {/* Execution status */}\n          {currentExecution && (\n            <Badge\n              status={\n                currentExecution.status === 'running'\n                  ? 'processing'\n                  : currentExecution.status === 'completed'\n                    ? 'success'\n                    : currentExecution.status === 'failed'\n                      ? 'error'\n                      : 'default'\n              }\n              text={\n                <span className=\"text-sm\">\n                  {currentExecution.status === 'running'\n                    ? `Running (${(currentExecution as any).progress?.completedNodes?.length || 0}/${(currentExecution as any).progress?.totalNodes || 0})`\n                    : `${currentExecution.status} - ${Math.round((currentExecution.duration || 0) / 1000)}s`}\n                </span>\n              }\n            />\n          )}\n        </Space>\n\n        <Space>\n          {/* Workflow info */}\n          <span className=\"text-sm text-gray-500\">\n            {nodes.length} nodes • {edges.length} connections\n          </span>\n\n          {/* More actions */}\n          <Dropdown menu={{ items: moreMenuItems }} trigger={['click']}>\n            <Button icon={<SettingOutlined />} size=\"small\">\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Space>\n      </div>\n\n      {/* Workflow Tester Modal */}\n      {showTester && (\n        <WorkflowTester nodes={nodes} edges={edges} onClose={() => setShowTester(false)} />\n      )}\n\n      {/* Execution History Modal */}\n      {showHistory && <ExecutionHistory onClose={() => setShowHistory(false)} />}\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx",
        "start": 1,
        "end": 283,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 283,
          "column": 2,
          "position": 2347
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 2,
        "end": 284,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 284,
          "column": 2,
          "position": 2360
        }
      }
    },
    {
      "format": "javascript",
      "lines": 247,
      "fragment": "={() => setAutoScroll(!autoScroll)}\n              className={cn(\n                'text-xs px-2 py-1 rounded',\n                autoScroll ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'\n              )}\n            >\n              Auto-scroll\n            </button>\n            <button\n              onClick={() => {\n                // Clear logs implementation\n              }}\n              className=\"text-xs px-2 py-1 rounded bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n        <div\n          ref={consoleRef}\n          className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto text-xs font-mono\"\n        >\n          {logs.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No logs yet. Execute a workflow to see real-time logs.\n            </div>\n          ) : (\n            logs.map((log, index) => (\n              <div\n                key={index}\n                className={cn(\n                  'mb-1 p-1 rounded',\n                  log.level === 'error' && 'bg-red-900 text-red-200',\n                  log.level === 'warn' && 'bg-yellow-900 text-yellow-200',\n                  log.level === 'info' && 'text-gray-300',\n                  log.level === 'debug' && 'text-gray-500'\n                )}\n              >\n                <span className=\"text-gray-500\">\n                  [{new Date(log.timestamp).toLocaleTimeString()}]\n                </span>\n                <span className=\"ml-2 text-blue-400\">[{log.nodeId}]</span>\n                <span className=\"ml-2\">{log.message}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderVariablesTab = () => {\n    const variables = getExecutionVariables();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Variables</h3>\n        <div className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto\">\n          {Object.keys(variables).length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No variables available. Execute nodes to see output data.\n            </div>\n          ) : (\n            Object.entries(variables).map(([key, value]) => (\n              <div key={key} className=\"mb-3 p-2 bg-gray-800 rounded\">\n                <div className=\"text-blue-400 text-xs font-mono mb-1\">{key}</div>\n                <div className=\"text-gray-300 text-xs break-all\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}\n                  </pre>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetricsTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Performance Metrics</h3>\n        <div className=\"flex-1 space-y-3\">\n          {/* Execution time metrics */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Node Execution Times</h4>\n            {performanceMetrics.nodeExecutionTimes.size === 0 ? (\n              <div className=\"text-gray-500 text-xs\">No timing data available</div>\n            ) : (\n              <div className=\"space-y-1\">\n                {Array.from(performanceMetrics.nodeExecutionTimes.entries()).map(\n                  ([nodeId, time]) => (\n                    <div key={nodeId} className=\"flex justify-between text-xs\">\n                      <span className=\"text-blue-400\">{nodeId}</span>\n                      <span className=\"text-gray-300\">\n                        {time < 1000 ? `${time}ms` : `${(time / 1000).toFixed(2)}s`}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Resource usage */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Resource Usage</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Peak Memory:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.peakMemory\n                    ? `${(performanceMetrics.resourceUsage.peakMemory / 1024 / 1024).toFixed(1)} MB`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">CPU Time:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.totalCpuTime\n                    ? `${performanceMetrics.resourceUsage.totalCpuTime}ms`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Network Requests:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.networkRequests || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderHistoryTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Execution History</h3>\n        <div className=\"flex-1 space-y-2 overflow-y-auto\">\n          {executionHistory.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">No execution history</div>\n          ) : (\n            executionHistory.slice(0, 10).map((execution) => (\n              <div\n                key={execution.id}\n                className=\"bg-gray-900 rounded border border-gray-700 p-2 hover:bg-gray-800 cursor-pointer\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div\n                      className={cn(\n                        'text-xs font-medium',\n                        execution.status === 'completed' && 'text-green-400',\n                        execution.status === 'failed' && 'text-red-400',\n                        execution.status === 'running' && 'text-blue-400'\n                      )}\n                    >\n                      {execution.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-1\">\n                      {execution.startTime && new Date(execution.startTime).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {execution.duration && `${(execution.duration / 1000).toFixed(1)}s`}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!isVisible) {\n    return (\n      <button\n        onClick={onToggle}\n        className={cn(\n          'fixed z-40 bg-gray-800 text-white p-2 rounded-l shadow-lg hover:bg-gray-700 transition-colors',\n          position === 'right'\n            ? 'right-0 top-1/2 -translate-y-1/2'\n            : 'bottom-0 left-1/2 -translate-x-1/2 rounded-t'\n        )}\n        title=\"Show execution panel\"\n      >\n        {position === 'right' ? '←' : '↑'} Execution\n      </button>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-30 bg-gray-800 border-l border-gray-700 shadow-xl',\n        position === 'right' ? 'right-0 top-0 h-full w-80' : 'bottom-0 left-0 right-0 h-80 border-t'\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-sm font-semibold text-white\">Execution Monitor</h2>\n          <div\n            className={cn('w-2 h-2 rounded-full', isConnected ? 'bg-green-500' : 'bg-red-500')}\n            title={isConnected ? 'Connected' : 'Disconnected'}\n          />\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setDebugMode(!debugMode)}\n            className={cn(\n              'text-xs px-2 py-1 rounded',\n              debugMode ? 'bg-yellow-600 text-white' : 'bg-gray-700 text-gray-300'\n            )}\n          >\n            Debug\n          </button>\n          <button onClick={onToggle} className=\"text-gray-400 hover:text-white\">\n            ✕\n          </button>\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      {currentExecution && (\n        <div className=\"p-3 border-b border-gray-700\">{renderProgressBar()}</div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-700\">\n        {(['console', 'variables', 'metrics', 'history'] as const).map((tab) => (\n          <button\n            key={tab}\n            onClick={() => setActiveTab(tab)}\n            className={cn(\n              'px-3 py-2 text-xs font-medium border-b-2 transition-colors',\n              activeTab === tab\n                ? 'border-blue-500 text-blue-400'\n                : 'border-transparent text-gray-400 hover:text-gray-200'\n            )}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx",
        "start": 131,
        "end": 377,
        "startLoc": {
          "line": 131,
          "column": 8,
          "position": 1026
        },
        "endLoc": {
          "line": 377,
          "column": 2,
          "position": 3053
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx",
        "start": 135,
        "end": 381,
        "startLoc": {
          "line": 135,
          "column": 8,
          "position": 1078
        },
        "endLoc": {
          "line": 381,
          "column": 2,
          "position": 3105
        }
      }
    },
    {
      "format": "tsx",
      "lines": 395,
      "fragment": "/**\n * Execution Panel\n *\n * Real-time execution monitoring panel inspired by SIM's copilot panel\n * and n8n's execution monitoring. Provides execution console, variables,\n * and performance metrics in a collapsible side panel.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { useEnhancedExecutionStore } from '@/core/stores/enhancedExecutionStore';\nimport { cn } from '@/design-system/utils';\n\ninterface ExecutionPanelProps {\n  isVisible: boolean;\n  onToggle: () => void;\n  position?: 'right' | 'bottom';\n}\n\nexport const ExecutionPanel: React.FC<ExecutionPanelProps> = ({\n  isVisible,\n  onToggle,\n  position = 'right',\n}) => {\n  const [activeTab, setActiveTab] = useState<'console' | 'variables' | 'metrics' | 'history'>(\n    'console'\n  );\n  const [autoScroll, setAutoScroll] = useState(true);\n\n  const {\n    currentExecution,\n    progress,\n    nodeStates,\n    performanceMetrics,\n    executionHistory,\n    isConnected,\n    lastUpdateTimestamp,\n    debugMode,\n    setDebugMode,\n  } = useEnhancedExecutionStore();\n\n  // Auto-scroll to bottom for console logs\n  const consoleRef = React.useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (autoScroll && consoleRef.current) {\n      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;\n    }\n  }, [autoScroll]);\n\n  // Get all logs from all nodes\n  const getAllLogs = () => {\n    const logs: Array<{\n      nodeId: string;\n      level: string;\n      message: string;\n      timestamp: string;\n    }> = [];\n\n    nodeStates.forEach((state, nodeId) => {\n      if (state.debugInfo?.logs) {\n        state.debugInfo.logs.forEach((log) => {\n          logs.push({\n            nodeId,\n            ...log,\n          });\n        });\n      }\n    });\n\n    return logs.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  };\n\n  // Get current execution variables\n  const getExecutionVariables = () => {\n    const variables: Record<string, any> = {};\n\n    nodeStates.forEach((state, nodeId) => {\n      if (state.outputData) {\n        variables[`${nodeId}_output`] = state.outputData;\n      }\n      if (state.debugInfo?.watchedVariables) {\n        Object.entries(state.debugInfo.watchedVariables).forEach(([key, value]) => {\n          variables[`${nodeId}_${key}`] = value;\n        });\n      }\n    });\n\n    return variables;\n  };\n\n  const renderProgressBar = () => {\n    if (!progress) return null;\n\n    const { progressPercentage, completedNodes, totalNodes, failedNodes } = progress;\n\n    return (\n      <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-medium text-gray-300\">Execution Progress</span>\n          <span className=\"text-sm text-gray-400\">\n            {completedNodes}/{totalNodes} nodes\n          </span>\n        </div>\n\n        <div className=\"w-full bg-gray-700 rounded-full h-2\">\n          <div\n            className={cn(\n              'h-2 rounded-full transition-all duration-300',\n              failedNodes > 0 ? 'bg-red-500' : 'bg-blue-500'\n            )}\n            style={{ width: `${progressPercentage}%` }}\n          />\n        </div>\n\n        {failedNodes > 0 && (\n          <div className=\"mt-2 text-xs text-red-400\">{failedNodes} node(s) failed</div>\n        )}\n      </div>\n    );\n  };\n\n  const renderConsoleTab = () => {\n    const logs = getAllLogs();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h3 className=\"text-sm font-medium text-gray-300\">Console</h3>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setAutoScroll(!autoScroll)}\n              className={cn(\n                'text-xs px-2 py-1 rounded',\n                autoScroll ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'\n              )}\n            >\n              Auto-scroll\n            </button>\n            <button\n              onClick={() => {\n                // Clear logs implementation\n              }}\n              className=\"text-xs px-2 py-1 rounded bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n        <div\n          ref={consoleRef}\n          className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto text-xs font-mono\"\n        >\n          {logs.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No logs yet. Execute a workflow to see real-time logs.\n            </div>\n          ) : (\n            logs.map((log, index) => (\n              <div\n                key={index}\n                className={cn(\n                  'mb-1 p-1 rounded',\n                  log.level === 'error' && 'bg-red-900 text-red-200',\n                  log.level === 'warn' && 'bg-yellow-900 text-yellow-200',\n                  log.level === 'info' && 'text-gray-300',\n                  log.level === 'debug' && 'text-gray-500'\n                )}\n              >\n                <span className=\"text-gray-500\">\n                  [{new Date(log.timestamp).toLocaleTimeString()}]\n                </span>\n                <span className=\"ml-2 text-blue-400\">[{log.nodeId}]</span>\n                <span className=\"ml-2\">{log.message}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderVariablesTab = () => {\n    const variables = getExecutionVariables();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Variables</h3>\n        <div className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto\">\n          {Object.keys(variables).length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No variables available. Execute nodes to see output data.\n            </div>\n          ) : (\n            Object.entries(variables).map(([key, value]) => (\n              <div key={key} className=\"mb-3 p-2 bg-gray-800 rounded\">\n                <div className=\"text-blue-400 text-xs font-mono mb-1\">{key}</div>\n                <div className=\"text-gray-300 text-xs break-all\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}\n                  </pre>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetricsTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Performance Metrics</h3>\n        <div className=\"flex-1 space-y-3\">\n          {/* Execution time metrics */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Node Execution Times</h4>\n            {performanceMetrics.nodeExecutionTimes.size === 0 ? (\n              <div className=\"text-gray-500 text-xs\">No timing data available</div>\n            ) : (\n              <div className=\"space-y-1\">\n                {Array.from(performanceMetrics.nodeExecutionTimes.entries()).map(\n                  ([nodeId, time]) => (\n                    <div key={nodeId} className=\"flex justify-between text-xs\">\n                      <span className=\"text-blue-400\">{nodeId}</span>\n                      <span className=\"text-gray-300\">\n                        {time < 1000 ? `${time}ms` : `${(time / 1000).toFixed(2)}s`}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Resource usage */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Resource Usage</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Peak Memory:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.peakMemory\n                    ? `${(performanceMetrics.resourceUsage.peakMemory / 1024 / 1024).toFixed(1)} MB`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">CPU Time:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.totalCpuTime\n                    ? `${performanceMetrics.resourceUsage.totalCpuTime}ms`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Network Requests:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.networkRequests || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderHistoryTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Execution History</h3>\n        <div className=\"flex-1 space-y-2 overflow-y-auto\">\n          {executionHistory.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">No execution history</div>\n          ) : (\n            executionHistory.slice(0, 10).map((execution) => (\n              <div\n                key={execution.id}\n                className=\"bg-gray-900 rounded border border-gray-700 p-2 hover:bg-gray-800 cursor-pointer\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div\n                      className={cn(\n                        'text-xs font-medium',\n                        execution.status === 'completed' && 'text-green-400',\n                        execution.status === 'failed' && 'text-red-400',\n                        execution.status === 'running' && 'text-blue-400'\n                      )}\n                    >\n                      {execution.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-1\">\n                      {execution.startTime && new Date(execution.startTime).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {execution.duration && `${(execution.duration / 1000).toFixed(1)}s`}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!isVisible) {\n    return (\n      <button\n        onClick={onToggle}\n        className={cn(\n          'fixed z-40 bg-gray-800 text-white p-2 rounded-l shadow-lg hover:bg-gray-700 transition-colors',\n          position === 'right'\n            ? 'right-0 top-1/2 -translate-y-1/2'\n            : 'bottom-0 left-1/2 -translate-x-1/2 rounded-t'\n        )}\n        title=\"Show execution panel\"\n      >\n        {position === 'right' ? '←' : '↑'} Execution\n      </button>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-30 bg-gray-800 border-l border-gray-700 shadow-xl',\n        position === 'right' ? 'right-0 top-0 h-full w-80' : 'bottom-0 left-0 right-0 h-80 border-t'\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-sm font-semibold text-white\">Execution Monitor</h2>\n          <div\n            className={cn('w-2 h-2 rounded-full', isConnected ? 'bg-green-500' : 'bg-red-500')}\n            title={isConnected ? 'Connected' : 'Disconnected'}\n          />\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setDebugMode(!debugMode)}\n            className={cn(\n              'text-xs px-2 py-1 rounded',\n              debugMode ? 'bg-yellow-600 text-white' : 'bg-gray-700 text-gray-300'\n            )}\n          >\n            Debug\n          </button>\n          <button onClick={onToggle} className=\"text-gray-400 hover:text-white\">\n            ✕\n          </button>\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      {currentExecution && (\n        <div className=\"p-3 border-b border-gray-700\">{renderProgressBar()}</div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-700\">\n        {(['console', 'variables', 'metrics', 'history'] as const).map((tab) => (\n          <button\n            key={tab}\n            onClick={() => setActiveTab(tab)}\n            className={cn(\n              'px-3 py-2 text-xs font-medium border-b-2 transition-colors',\n              activeTab === tab\n                ? 'border-blue-500 text-blue-400'\n                : 'border-transparent text-gray-400 hover:text-gray-200'\n            )}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 p-3 overflow-hidden\">\n        {activeTab === 'console' && renderConsoleTab()}\n        {activeTab === 'variables' && renderVariablesTab()}\n        {activeTab === 'metrics' && renderMetricsTab()}\n        {activeTab === 'history' && renderHistoryTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default ExecutionPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx",
        "start": 1,
        "end": 395,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 395,
          "column": 2,
          "position": 3195
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx",
        "start": 5,
        "end": 399,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 399,
          "column": 2,
          "position": 3247
        }
      }
    },
    {
      "format": "javascript",
      "lines": 402,
      "fragment": "={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            rows={4}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'boolean':\n        return <Switch checked={value || false} onChange={onChange} disabled={disabled} />;\n\n      case 'select':\n        return (\n          <Select\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n        return (\n          <Select\n            mode=\"multiple\"\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            showTime\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={value}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={disabled}\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            beforeUpload={() => false}\n            onChange={(info) => {\n              if (info.file) {\n                onChange(info.file);\n              }\n            }}\n            disabled={disabled}\n          >\n            <Button icon={<PlusOutlined />} disabled={disabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <div>\n            <TextArea\n              value={typeof value === 'string' ? value : JSON.stringify(value, null, 2)}\n              onChange={(e) => {\n                try {\n                  const parsed = JSON.parse(e.target.value);\n                  onChange(parsed);\n                } catch {\n                  onChange(e.target.value);\n                }\n              }}\n              placeholder={property.placeholder}\n              disabled={disabled}\n              rows={6}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            {value && typeof value === 'object' && (\n              <div className=\"mt-2\">\n                <Button size=\"small\" onClick={() => setIsExpanded(!isExpanded)} type=\"text\">\n                  {isExpanded ? 'Collapse' : 'Expand'} JSON\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'expression':\n        return (\n          <div>\n            <TextArea\n              value={value || ''}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder={property.placeholder || 'Enter JavaScript expression...'}\n              disabled={disabled}\n              rows={3}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Use $input to reference input data, e.g., $input.user.name\n            </div>\n          </div>\n        );\n\n      case 'collection':\n        return (\n          <div className=\"space-y-2\">\n            {(value || []).map((item: any, index: number) => (\n              <Card\n                key={index}\n                size=\"small\"\n                className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n                title={`Item ${index + 1}`}\n                extra={\n                  <Button\n                    type=\"text\"\n                    danger\n                    size=\"small\"\n                    icon={<DeleteOutlined />}\n                    onClick={() => {\n                      const newValue = [...(value || [])];\n                      newValue.splice(index, 1);\n                      onChange(newValue);\n                    }}\n                    disabled={disabled}\n                  />\n                }\n              >\n                <div className=\"space-y-2\">\n                  {property.collectionSchema?.map((field: any) => (\n                    <div key={field.name}>\n                      <label className=\"text-sm font-medium text-gray-300\">\n                        {field.label || field.name}\n                      </label>\n                      <PropertyField\n                        property={field}\n                        value={item[field.name]}\n                        onChange={(fieldValue) => {\n                          const newValue = [...(value || [])];\n                          newValue[index] = { ...newValue[index], [field.name]: fieldValue };\n                          onChange(newValue);\n                        }}\n                        disabled={disabled}\n                        theme={theme}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            ))}\n            <Button\n              type=\"dashed\"\n              onClick={() => {\n                const newValue = [...(value || []), {}];\n                onChange(newValue);\n              }}\n              disabled={disabled}\n              className=\"w-full\"\n            >\n              <PlusOutlined /> Add Item\n            </Button>\n          </div>\n        );\n\n      case 'credentialsSelect':\n        return (\n          <div className=\"space-y-2\">\n            <Select\n              value={value?.credentialId}\n              onChange={(credentialId) => onChange({ ...value, credentialId })}\n              placeholder=\"Select credential\"\n              disabled={disabled}\n              className=\"w-full\"\n              style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n            >\n              {/* This would be populated with available credentials */}\n              <Option value=\"gmail-oauth\">Gmail OAuth</Option>\n              <Option value=\"openai-api\">OpenAI API Key</Option>\n            </Select>\n            {value?.credentialId && (\n              <div className=\"flex items-center gap-2\">\n                <Tag color=\"green\">Connected</Tag>\n                <Button size=\"small\" type=\"link\">\n                  Test Connection\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      default:\n        return (\n          <Alert message={`Unsupported property type: ${property.type}`} type=\"warning\" showIcon />\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-1\">\n      {renderField()}\n      {property.description && (\n        <div className=\"text-xs text-gray-500 flex items-center gap-1\">\n          <InfoCircleOutlined />\n          {property.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const EnhancedPropertyRenderer: React.FC<EnhancedPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  onValidationChange,\n  theme = 'dark',\n  disabled = false,\n}) => {\n  const [validationErrors, setValidationErrors] = useState<Map<string, string>>(new Map());\n\n  const validateProperty = useCallback((property: INodeProperty, value: any): string | null => {\n    // Required validation\n    if (property.required && (!value || value === '')) {\n      return `${property.label || property.name} is required`;\n    }\n\n    // Type-specific validation\n    switch (property.type) {\n      case 'string':\n      case 'text':\n        if (property.maxLength && value && value.length > property.maxLength) {\n          return `Maximum length is ${property.maxLength} characters`;\n        }\n        if (property.minLength && value && value.length < property.minLength) {\n          return `Minimum length is ${property.minLength} characters`;\n        }\n        if (property.pattern && value && !new RegExp(property.pattern).test(value)) {\n          return `Value must match pattern: ${property.pattern}`;\n        }\n        break;\n\n      case 'number':\n        if (property.min !== undefined && value < property.min) {\n          return `Minimum value is ${property.min}`;\n        }\n        if (property.max !== undefined && value > property.max) {\n          return `Maximum value is ${property.max}`;\n        }\n        break;\n\n      case 'json':\n        if (value && typeof value === 'string') {\n          try {\n            JSON.parse(value);\n          } catch {\n            return 'Invalid JSON format';\n          }\n        }\n        break;\n    }\n\n    return null;\n  }, []);\n\n  const validateAll = useCallback(() => {\n    const errors = new Map<string, string>();\n\n    properties.forEach((property) => {\n      const value = formState[property.name];\n      const error = validateProperty(property, value);\n      if (error) {\n        errors.set(property.name, error);\n      }\n    });\n\n    setValidationErrors(errors);\n    onValidationChange?.({\n      isValid: errors.size === 0,\n      errors,\n    });\n\n    return errors.size === 0;\n  }, [properties, formState, validateProperty, onValidationChange]);\n\n  // Validate on form state change\n  React.useEffect(() => {\n    validateAll();\n  }, [validateAll]);\n\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      onChange(name, value);\n    },\n    [onChange]\n  );\n\n  const visibleProperties = useMemo(() => {\n    return properties.filter((property) => {\n      // Simple visibility logic - can be enhanced with complex conditions\n      if (property.displayOptions?.show) {\n        const conditions = property.displayOptions.show;\n        return Object.entries(conditions).every(([key, values]) => {\n          const formValue = formState[key];\n          return (values as any[]).includes(formValue);\n        });\n      }\n      return true;\n    });\n  }, [properties, formState]);\n\n  return (\n    <div className=\"space-y-4\">\n      {visibleProperties.map((property) => {\n        const error = validationErrors.get(property.name);\n        const value = formState[property.name];\n\n        return (\n          <div key={property.name} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-300 flex items-center gap-2\">\n                {property.label || property.name}\n                {property.required && <span className=\"text-red-400\">*</span>}\n                {property.description && (\n                  <Tooltip title={property.description}>\n                    <InfoCircleOutlined className=\"text-gray-500\" />\n                  </Tooltip>\n                )}\n              </label>\n              {error && (\n                <Tooltip title={error}>\n                  <ExclamationCircleOutlined className=\"text-red-400\" />\n                </Tooltip>\n              )}\n            </div>\n\n            <PropertyField\n              property={property}\n              value={value}\n              onChange={(newValue) => handlePropertyChange(property.name, newValue)}\n              disabled={disabled}\n              theme={theme}\n            />\n\n            {error && <Alert message={error}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx",
        "start": 76,
        "end": 477,
        "startLoc": {
          "line": 76,
          "column": 6,
          "position": 478
        },
        "endLoc": {
          "line": 477,
          "column": 2,
          "position": 3757
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 80,
        "end": 481,
        "startLoc": {
          "line": 80,
          "column": 6,
          "position": 530
        },
        "endLoc": {
          "line": 481,
          "column": 2,
          "position": 3809
        }
      }
    },
    {
      "format": "tsx",
      "lines": 493,
      "fragment": "/**\n * Enhanced Property Renderer\n *\n * Advanced property form rendering with conditional logic, validation,\n * and dynamic field types. Supports 22+ property types with real-time\n * validation and dependency management.\n */\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InfoCircleOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tag,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { cn } from '@/design-system/utils';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nexport interface PropertyFormState {\n  [key: string]: any;\n}\n\nexport interface PropertyValidationResult {\n  isValid: boolean;\n  errors: Map<string, string>;\n}\n\nexport interface EnhancedPropertyRendererProps {\n  properties: INodeProperty[];\n  formState: PropertyFormState;\n  onChange: (name: string, value: any) => void;\n  onValidationChange?: (result: PropertyValidationResult) => void;\n  theme?: 'light' | 'dark';\n  disabled?: boolean;\n}\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const renderField = () => {\n    switch (property.type) {\n      case 'string':\n        return (\n          <Input\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            rows={4}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'boolean':\n        return <Switch checked={value || false} onChange={onChange} disabled={disabled} />;\n\n      case 'select':\n        return (\n          <Select\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n        return (\n          <Select\n            mode=\"multiple\"\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            showTime\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={value}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={disabled}\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            beforeUpload={() => false}\n            onChange={(info) => {\n              if (info.file) {\n                onChange(info.file);\n              }\n            }}\n            disabled={disabled}\n          >\n            <Button icon={<PlusOutlined />} disabled={disabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <div>\n            <TextArea\n              value={typeof value === 'string' ? value : JSON.stringify(value, null, 2)}\n              onChange={(e) => {\n                try {\n                  const parsed = JSON.parse(e.target.value);\n                  onChange(parsed);\n                } catch {\n                  onChange(e.target.value);\n                }\n              }}\n              placeholder={property.placeholder}\n              disabled={disabled}\n              rows={6}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            {value && typeof value === 'object' && (\n              <div className=\"mt-2\">\n                <Button size=\"small\" onClick={() => setIsExpanded(!isExpanded)} type=\"text\">\n                  {isExpanded ? 'Collapse' : 'Expand'} JSON\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'expression':\n        return (\n          <div>\n            <TextArea\n              value={value || ''}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder={property.placeholder || 'Enter JavaScript expression...'}\n              disabled={disabled}\n              rows={3}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Use $input to reference input data, e.g., $input.user.name\n            </div>\n          </div>\n        );\n\n      case 'collection':\n        return (\n          <div className=\"space-y-2\">\n            {(value || []).map((item: any, index: number) => (\n              <Card\n                key={index}\n                size=\"small\"\n                className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n                title={`Item ${index + 1}`}\n                extra={\n                  <Button\n                    type=\"text\"\n                    danger\n                    size=\"small\"\n                    icon={<DeleteOutlined />}\n                    onClick={() => {\n                      const newValue = [...(value || [])];\n                      newValue.splice(index, 1);\n                      onChange(newValue);\n                    }}\n                    disabled={disabled}\n                  />\n                }\n              >\n                <div className=\"space-y-2\">\n                  {property.collectionSchema?.map((field: any) => (\n                    <div key={field.name}>\n                      <label className=\"text-sm font-medium text-gray-300\">\n                        {field.label || field.name}\n                      </label>\n                      <PropertyField\n                        property={field}\n                        value={item[field.name]}\n                        onChange={(fieldValue) => {\n                          const newValue = [...(value || [])];\n                          newValue[index] = { ...newValue[index], [field.name]: fieldValue };\n                          onChange(newValue);\n                        }}\n                        disabled={disabled}\n                        theme={theme}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            ))}\n            <Button\n              type=\"dashed\"\n              onClick={() => {\n                const newValue = [...(value || []), {}];\n                onChange(newValue);\n              }}\n              disabled={disabled}\n              className=\"w-full\"\n            >\n              <PlusOutlined /> Add Item\n            </Button>\n          </div>\n        );\n\n      case 'credentialsSelect':\n        return (\n          <div className=\"space-y-2\">\n            <Select\n              value={value?.credentialId}\n              onChange={(credentialId) => onChange({ ...value, credentialId })}\n              placeholder=\"Select credential\"\n              disabled={disabled}\n              className=\"w-full\"\n              style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n            >\n              {/* This would be populated with available credentials */}\n              <Option value=\"gmail-oauth\">Gmail OAuth</Option>\n              <Option value=\"openai-api\">OpenAI API Key</Option>\n            </Select>\n            {value?.credentialId && (\n              <div className=\"flex items-center gap-2\">\n                <Tag color=\"green\">Connected</Tag>\n                <Button size=\"small\" type=\"link\">\n                  Test Connection\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      default:\n        return (\n          <Alert message={`Unsupported property type: ${property.type}`} type=\"warning\" showIcon />\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-1\">\n      {renderField()}\n      {property.description && (\n        <div className=\"text-xs text-gray-500 flex items-center gap-1\">\n          <InfoCircleOutlined />\n          {property.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const EnhancedPropertyRenderer: React.FC<EnhancedPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  onValidationChange,\n  theme = 'dark',\n  disabled = false,\n}) => {\n  const [validationErrors, setValidationErrors] = useState<Map<string, string>>(new Map());\n\n  const validateProperty = useCallback((property: INodeProperty, value: any): string | null => {\n    // Required validation\n    if (property.required && (!value || value === '')) {\n      return `${property.label || property.name} is required`;\n    }\n\n    // Type-specific validation\n    switch (property.type) {\n      case 'string':\n      case 'text':\n        if (property.maxLength && value && value.length > property.maxLength) {\n          return `Maximum length is ${property.maxLength} characters`;\n        }\n        if (property.minLength && value && value.length < property.minLength) {\n          return `Minimum length is ${property.minLength} characters`;\n        }\n        if (property.pattern && value && !new RegExp(property.pattern).test(value)) {\n          return `Value must match pattern: ${property.pattern}`;\n        }\n        break;\n\n      case 'number':\n        if (property.min !== undefined && value < property.min) {\n          return `Minimum value is ${property.min}`;\n        }\n        if (property.max !== undefined && value > property.max) {\n          return `Maximum value is ${property.max}`;\n        }\n        break;\n\n      case 'json':\n        if (value && typeof value === 'string') {\n          try {\n            JSON.parse(value);\n          } catch {\n            return 'Invalid JSON format';\n          }\n        }\n        break;\n    }\n\n    return null;\n  }, []);\n\n  const validateAll = useCallback(() => {\n    const errors = new Map<string, string>();\n\n    properties.forEach((property) => {\n      const value = formState[property.name];\n      const error = validateProperty(property, value);\n      if (error) {\n        errors.set(property.name, error);\n      }\n    });\n\n    setValidationErrors(errors);\n    onValidationChange?.({\n      isValid: errors.size === 0,\n      errors,\n    });\n\n    return errors.size === 0;\n  }, [properties, formState, validateProperty, onValidationChange]);\n\n  // Validate on form state change\n  React.useEffect(() => {\n    validateAll();\n  }, [validateAll]);\n\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      onChange(name, value);\n    },\n    [onChange]\n  );\n\n  const visibleProperties = useMemo(() => {\n    return properties.filter((property) => {\n      // Simple visibility logic - can be enhanced with complex conditions\n      if (property.displayOptions?.show) {\n        const conditions = property.displayOptions.show;\n        return Object.entries(conditions).every(([key, values]) => {\n          const formValue = formState[key];\n          return (values as any[]).includes(formValue);\n        });\n      }\n      return true;\n    });\n  }, [properties, formState]);\n\n  return (\n    <div className=\"space-y-4\">\n      {visibleProperties.map((property) => {\n        const error = validationErrors.get(property.name);\n        const value = formState[property.name];\n\n        return (\n          <div key={property.name} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-300 flex items-center gap-2\">\n                {property.label || property.name}\n                {property.required && <span className=\"text-red-400\">*</span>}\n                {property.description && (\n                  <Tooltip title={property.description}>\n                    <InfoCircleOutlined className=\"text-gray-500\" />\n                  </Tooltip>\n                )}\n              </label>\n              {error && (\n                <Tooltip title={error}>\n                  <ExclamationCircleOutlined className=\"text-red-400\" />\n                </Tooltip>\n              )}\n            </div>\n\n            <PropertyField\n              property={property}\n              value={value}\n              onChange={(newValue) => handlePropertyChange(property.name, newValue)}\n              disabled={disabled}\n              theme={theme}\n            />\n\n            {error && <Alert message={error} type=\"error\" showIcon className=\"text-xs\" />}\n          </div>\n        );\n      })}\n\n      {visibleProperties.length === 0 && (\n        <div className=\"text-center text-gray-500 py-8\">\n          <div className=\"text-2xl mb-2\">⚙️</div>\n          <div>No properties to configure</div>\n          <div className=\"text-xs mt-2\">All properties are hidden by conditional logic</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedPropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx",
        "start": 1,
        "end": 493,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 493,
          "column": 2,
          "position": 3900
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 5,
        "end": 497,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 497,
          "column": 2,
          "position": 3952
        }
      }
    },
    {
      "format": "javascript",
      "lines": 214,
      "fragment": "={path} className=\"border-b border-gray-700 last:border-b-0\">\n        <div\n          className={`flex items-center py-2 px-3 hover:bg-gray-700 transition-colors ${nestLevel > 0 ? 'pl-8' : ''}`}\n          style={{ paddingLeft: `${nestLevel * 24 + 12}px` }}\n        >\n          {/* Toggle button for expandable items */}\n          {hasChildren && (\n            <button\n              onClick={() => toggleExpanded(path)}\n              className=\"mr-2 p-1 hover:bg-gray-600 rounded\"\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"w-3 h-3 text-gray-400\" />\n              ) : (\n                <ChevronRight className=\"w-3 h-3 text-gray-400\" />\n              )}\n            </button>\n          )}\n          {!hasChildren && <div className=\"w-6 mr-2\" />}\n\n          {/* Property name pill */}\n          <div className=\"flex items-center bg-gray-600 rounded px-2 py-1 mr-3 min-w-0\">\n            <div className=\"mr-2 flex-shrink-0\">{getTypeIcon(value)}</div>\n            <span className=\"text-sm font-medium text-white truncate\">\n              {Array.isArray(value) ? `${key}` : key}\n            </span>\n          </div>\n\n          {/* Value display */}\n          <div className=\"flex-1 min-w-0\">\n            {!hasChildren ? (\n              <span className=\"text-sm text-gray-300 break-all\">\n                {typeof value === 'string' && value.includes('\\n') ? (\n                  <div className=\"whitespace-pre-wrap\">{value}</div>\n                ) : (\n                  String(value)\n                )}\n              </span>\n            ) : (\n              <span className=\"text-sm text-gray-400\">\n                {Array.isArray(value) ? `Array (${value.length} items)` : 'Object'}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Render children if expanded */}\n        {hasChildren && isExpanded && (\n          <div>\n            {Array.isArray(value)\n              ? value.map((item, index) =>\n                  renderSchemaItem(`[${index}]`, item, `${path}[${index}]`, nestLevel + 1)\n                )\n              : Object.entries(value).map(([childKey, childValue]) =>\n                  renderSchemaItem(childKey, childValue, `${path}.${childKey}`, nestLevel + 1)\n                )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render table view\n  const renderTableView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    const flattenObject = (obj: any, prefix = ''): Record<string, any> => {\n      const result: Record<string, any> = {};\n\n      for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (Array.isArray(value)) {\n          result[newKey] = value.join(', ');\n        } else if (typeof value === 'object' && value !== null) {\n          // For nested objects, show a preview\n          result[newKey] = `Object (${Object.keys(value).length} properties)`;\n        } else {\n          result[newKey] = value;\n        }\n      }\n\n      return result;\n    };\n\n    const flatData = flattenObject(selectedEmail);\n\n    return (\n      <div className=\"overflow-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-gray-600\">\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Property</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Value</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(flatData).map(([key, value]) => (\n              <tr key={key} className=\"border-b border-gray-700 hover:bg-gray-700\">\n                <td className=\"py-2 px-3 text-blue-300 font-mono text-xs\">{key}</td>\n                <td className=\"py-2 px-3 text-gray-300 break-all\">\n                  {typeof value === 'string' && value.length > 100\n                    ? `${value.substring(0, 100)}...`\n                    : String(value)}\n                </td>\n                <td className=\"py-2 px-3 text-gray-400 text-xs\">{typeof value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render JSON view\n  const renderJsonView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    return (\n      <div className=\"overflow-auto\">\n        <pre className=\"text-sm text-gray-300 whitespace-pre-wrap p-4 bg-gray-900 rounded border border-gray-600 font-mono\">\n          {JSON.stringify(filteredData || selectedEmail, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    if (!selectedEmail) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📧</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">Select an email from the input column</p>\n          <p className=\"text-gray-400\">to view its detailed structure</p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            {filteredData ? (\n              Object.entries(filteredData).map(([key, value]) => renderSchemaItem(key, value, key))\n            ) : (\n              <div className=\"text-gray-400 text-center py-8\">No matching data found</div>\n            )}\n          </div>\n        );\n      case 'table':\n        return renderTableView();\n      case 'json':\n        return renderJsonView();\n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤</span>\n            OUTPUT\n            {selectedEmail && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Email selected</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {selectedEmail && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search email data\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx",
        "start": 93,
        "end": 306,
        "startLoc": {
          "line": 93,
          "column": 4,
          "position": 1088
        },
        "endLoc": {
          "line": 306,
          "column": 2,
          "position": 3045
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 95,
        "end": 213,
        "startLoc": {
          "line": 95,
          "column": 4,
          "position": 1114
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1996
        }
      }
    },
    {
      "format": "tsx",
      "lines": 346,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { CheckCircle, ChevronDown, ChevronRight, Edit, Pin, Search } from 'lucide-react';\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\n\ntype DisplayMode = 'schema' | 'table' | 'json';\n\ninterface EmailOutputPanelProps {\n  selectedEmail?: any;\n  isVisible?: boolean;\n}\n\nconst EmailOutputPanel: React.FC<EmailOutputPanelProps> = ({ selectedEmail, isVisible = true }) => {\n  const [displayMode, setDisplayMode] = useState<DisplayMode>('schema');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(\n    new Set(['labelIds', 'headers', 'from', 'to'])\n  );\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm || !selectedEmail) return selectedEmail;\n\n    const filterObject = (obj: any, path = ''): any => {\n      if (typeof obj === 'string') {\n        return obj.toLowerCase().includes(searchTerm.toLowerCase()) ? obj : null;\n      }\n      if (typeof obj === 'number') {\n        return obj.toString().includes(searchTerm) ? obj : null;\n      }\n      if (Array.isArray(obj)) {\n        const filtered = obj.filter((item, index) => {\n          const result = filterObject(item, `${path}[${index}]`);\n          return result !== null;\n        });\n        return filtered.length > 0 ? filtered : null;\n      }\n      if (typeof obj === 'object' && obj !== null) {\n        const filtered: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          const newPath = path ? `${path}.${key}` : key;\n          if (key.toLowerCase().includes(searchTerm.toLowerCase())) {\n            filtered[key] = value;\n          } else {\n            const result = filterObject(value, newPath);\n            if (result !== null) {\n              filtered[key] = result;\n            }\n          }\n        }\n        return Object.keys(filtered).length > 0 ? filtered : null;\n      }\n      return null;\n    };\n\n    return filterObject(selectedEmail);\n  }, [selectedEmail, searchTerm]);\n\n  const toggleExpanded = (path: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  // Get data type icon\n  const getTypeIcon = (value: any) => {\n    if (typeof value === 'string') {\n      return <span className=\"text-blue-400\">Aa</span>;\n    }\n    if (typeof value === 'number') {\n      return <span className=\"text-green-400\">#</span>;\n    }\n    if (Array.isArray(value)) {\n      return <span className=\"text-purple-400\">[]</span>;\n    }\n    if (typeof value === 'object') {\n      return <span className=\"text-yellow-400\">{}</span>;\n    }\n    return <span className=\"text-gray-400\">?</span>;\n  };\n\n  // Render schema view\n  const renderSchemaItem = (key: string, value: any, path: string, nestLevel: number = 0) => {\n    const isExpanded = expandedItems.has(path);\n    const hasChildren = Array.isArray(value) || (typeof value === 'object' && value !== null);\n\n    return (\n      <div key={path} className=\"border-b border-gray-700 last:border-b-0\">\n        <div\n          className={`flex items-center py-2 px-3 hover:bg-gray-700 transition-colors ${nestLevel > 0 ? 'pl-8' : ''}`}\n          style={{ paddingLeft: `${nestLevel * 24 + 12}px` }}\n        >\n          {/* Toggle button for expandable items */}\n          {hasChildren && (\n            <button\n              onClick={() => toggleExpanded(path)}\n              className=\"mr-2 p-1 hover:bg-gray-600 rounded\"\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"w-3 h-3 text-gray-400\" />\n              ) : (\n                <ChevronRight className=\"w-3 h-3 text-gray-400\" />\n              )}\n            </button>\n          )}\n          {!hasChildren && <div className=\"w-6 mr-2\" />}\n\n          {/* Property name pill */}\n          <div className=\"flex items-center bg-gray-600 rounded px-2 py-1 mr-3 min-w-0\">\n            <div className=\"mr-2 flex-shrink-0\">{getTypeIcon(value)}</div>\n            <span className=\"text-sm font-medium text-white truncate\">\n              {Array.isArray(value) ? `${key}` : key}\n            </span>\n          </div>\n\n          {/* Value display */}\n          <div className=\"flex-1 min-w-0\">\n            {!hasChildren ? (\n              <span className=\"text-sm text-gray-300 break-all\">\n                {typeof value === 'string' && value.includes('\\n') ? (\n                  <div className=\"whitespace-pre-wrap\">{value}</div>\n                ) : (\n                  String(value)\n                )}\n              </span>\n            ) : (\n              <span className=\"text-sm text-gray-400\">\n                {Array.isArray(value) ? `Array (${value.length} items)` : 'Object'}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Render children if expanded */}\n        {hasChildren && isExpanded && (\n          <div>\n            {Array.isArray(value)\n              ? value.map((item, index) =>\n                  renderSchemaItem(`[${index}]`, item, `${path}[${index}]`, nestLevel + 1)\n                )\n              : Object.entries(value).map(([childKey, childValue]) =>\n                  renderSchemaItem(childKey, childValue, `${path}.${childKey}`, nestLevel + 1)\n                )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render table view\n  const renderTableView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    const flattenObject = (obj: any, prefix = ''): Record<string, any> => {\n      const result: Record<string, any> = {};\n\n      for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (Array.isArray(value)) {\n          result[newKey] = value.join(', ');\n        } else if (typeof value === 'object' && value !== null) {\n          // For nested objects, show a preview\n          result[newKey] = `Object (${Object.keys(value).length} properties)`;\n        } else {\n          result[newKey] = value;\n        }\n      }\n\n      return result;\n    };\n\n    const flatData = flattenObject(selectedEmail);\n\n    return (\n      <div className=\"overflow-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-gray-600\">\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Property</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Value</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(flatData).map(([key, value]) => (\n              <tr key={key} className=\"border-b border-gray-700 hover:bg-gray-700\">\n                <td className=\"py-2 px-3 text-blue-300 font-mono text-xs\">{key}</td>\n                <td className=\"py-2 px-3 text-gray-300 break-all\">\n                  {typeof value === 'string' && value.length > 100\n                    ? `${value.substring(0, 100)}...`\n                    : String(value)}\n                </td>\n                <td className=\"py-2 px-3 text-gray-400 text-xs\">{typeof value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render JSON view\n  const renderJsonView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    return (\n      <div className=\"overflow-auto\">\n        <pre className=\"text-sm text-gray-300 whitespace-pre-wrap p-4 bg-gray-900 rounded border border-gray-600 font-mono\">\n          {JSON.stringify(filteredData || selectedEmail, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    if (!selectedEmail) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📧</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">Select an email from the input column</p>\n          <p className=\"text-gray-400\">to view its detailed structure</p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            {filteredData ? (\n              Object.entries(filteredData).map(([key, value]) => renderSchemaItem(key, value, key))\n            ) : (\n              <div className=\"text-gray-400 text-center py-8\">No matching data found</div>\n            )}\n          </div>\n        );\n      case 'table':\n        return renderTableView();\n      case 'json':\n        return renderJsonView();\n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤</span>\n            OUTPUT\n            {selectedEmail && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Email selected</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {selectedEmail && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search email data\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\">\n                <Edit className=\"w-4 h-4\" />\n                edit\n              </button>\n              <button className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\">\n                <Pin className=\"w-4 h-4\" /> pin\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Email info */}\n        {selectedEmail && (\n          <div className=\"mt-3 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">From:</span> {selectedEmail.from || 'Unknown'}\n            </div>\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Subject:</span>{' '}\n              {selectedEmail.subject || 'No subject'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">{renderContent()}</div>\n    </div>\n  );\n};\n\nexport default EmailOutputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx",
        "start": 1,
        "end": 346,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 346,
          "column": 2,
          "position": 3331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 3,
        "end": 348,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 348,
          "column": 2,
          "position": 3357
        }
      }
    },
    {
      "format": "javascript",
      "lines": 125,
      "fragment": "={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search emails...\"\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Email List */}\n      <div className=\"flex-1 overflow-auto\">\n        {emails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n                <Mail className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </div>\n            <p className=\"mb-2\">No emails loaded</p>\n            <p className=\"text-gray-400\">Test the Gmail trigger to see emails</p>\n          </div>\n        ) : filteredEmails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <p>No emails match your search</p>\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredEmails.map((email, index) => {\n              const isSelected = selectedEmailId === email.id;\n              const senderName = getSenderName(email.from);\n              const avatarColor = getAvatarColor(email.from);\n\n              return (\n                <div\n                  key={email.id || index}\n                  onClick={() => onEmailSelect(email)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                    isSelected\n                      ? 'bg-blue-600 border-blue-500 text-white'\n                      : 'bg-gray-800 border-gray-700 hover:bg-gray-700 hover:border-gray-600 text-gray-100'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center flex-shrink-0 text-white text-sm font-medium`}\n                    >\n                      {senderName.charAt(0).toUpperCase()}\n                    </div>\n\n                    {/* Email Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header */}\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-2 min-w-0\">\n                          <span\n                            className={`font-medium text-sm truncate ${\n                              isSelected ? 'text-white' : 'text-gray-200'\n                            }`}\n                          >\n                            {senderName}\n                          </span>\n\n                          {/* Indicators */}\n                          <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                            {email.hasAttachments && (\n                              <Paperclip className=\"w-3 h-3 text-gray-400\" />\n                            )}\n                            {email.isUnread && (\n                              <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                            )}\n                            {email.labels?.includes('STARRED') && (\n                              <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          <Clock className=\"w-3 h-3 text-gray-400\" />\n                          <span\n                            className={`text-xs ${isSelected ? 'text-blue-100' : 'text-gray-400'}`}\n                          >\n                            {formatDate(email.date)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Subject */}\n                      <div\n                        className={`text-sm font-medium mb-1 truncate ${\n                          isSelected ? 'text-white' : 'text-gray-100'\n                        }`}\n                      >\n                        {email.subject || '(No subject)'}\n                      </div>\n\n                      {/* Snippet */}\n                      <div\n                        className={`text-xs leading-relaxed line-clamp-2 ${\n                          isSelected ? 'text-blue-100' : 'text-gray-400'\n                        }`}\n                      >\n                        {email.snippet || email.body || 'No content preview available'}\n                      </div>\n\n                      {/* Labels */}\n                      {email.labels && email.labels.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {email.labels.slice(0, 3).map((label: string) => (\n                            <span\n                              key={label}\n                              className={`px-2 py-1 text-xs rounded-full ${\n                                isSelected\n                                  ? 'bg-blue-700 text-blue-100'\n                                  : 'bg-gray-700 text-gray-300'\n                              }`}\n                            >\n                              {label}\n                            </span>\n                          ))}\n                          {email.labels.length > 3 && (\n                            <span\n                              className={`text-xs ${\n                                isSelected ? 'text-blue-200' : 'text-gray-400'\n                              }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx",
        "start": 112,
        "end": 236,
        "startLoc": {
          "line": 112,
          "column": 6,
          "position": 952
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 1885
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 113,
        "end": 237,
        "startLoc": {
          "line": 113,
          "column": 6,
          "position": 965
        },
        "endLoc": {
          "line": 237,
          "column": 2,
          "position": 1898
        }
      }
    },
    {
      "format": "tsx",
      "lines": 255,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Clock, Mail, Paperclip, Search, Star } from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\ninterface EmailInputPanelProps {\n  emails?: any[];\n  selectedEmailId?: string;\n  onEmailSelect: (email: any) => void;\n  isVisible?: boolean;\n}\n\nconst EmailInputPanel: React.FC<EmailInputPanelProps> = ({\n  emails = [],\n  selectedEmailId,\n  onEmailSelect,\n  isVisible = true,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Filter emails based on search term\n  const filteredEmails = emails.filter((email) => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      email.subject?.toLowerCase().includes(searchLower) ||\n      email.from?.toLowerCase().includes(searchLower) ||\n      email.snippet?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    try {\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffHours < 1) {\n        return 'Just now';\n      } else if (diffHours < 24) {\n        return `${diffHours}h ago`;\n      } else if (diffDays < 7) {\n        return `${diffDays}d ago`;\n      } else {\n        return date.toLocaleDateString();\n      }\n    } catch {\n      return dateString;\n    }\n  };\n\n  // Extract sender name from email\n  const getSenderName = (from: string) => {\n    if (!from) return 'Unknown';\n\n    // Handle \"Name <email@domain.com>\" format\n    const match = from.match(/^(.+?)\\s*<(.+)>$/);\n    if (match) {\n      return match[1].trim();\n    }\n\n    // Handle plain email format\n    if (from.includes('@')) {\n      return from.split('@')[0];\n    }\n\n    return from;\n  };\n\n  // Get sender avatar color based on email\n  const getAvatarColor = (from: string) => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-yellow-500',\n      'bg-red-500',\n      'bg-purple-500',\n      'bg-pink-500',\n      'bg-indigo-500',\n      'bg-teal-500',\n    ];\n    const hash = from.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            INPUT\n            <span className=\"ml-2 text-xs bg-blue-600 text-white px-2 py-1 rounded-full\">\n              {filteredEmails.length} emails\n            </span>\n          </h3>\n        </div>\n\n        {/* Search */}\n        {emails.length > 0 && (\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search emails...\"\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Email List */}\n      <div className=\"flex-1 overflow-auto\">\n        {emails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n                <Mail className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </div>\n            <p className=\"mb-2\">No emails loaded</p>\n            <p className=\"text-gray-400\">Test the Gmail trigger to see emails</p>\n          </div>\n        ) : filteredEmails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <p>No emails match your search</p>\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredEmails.map((email, index) => {\n              const isSelected = selectedEmailId === email.id;\n              const senderName = getSenderName(email.from);\n              const avatarColor = getAvatarColor(email.from);\n\n              return (\n                <div\n                  key={email.id || index}\n                  onClick={() => onEmailSelect(email)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                    isSelected\n                      ? 'bg-blue-600 border-blue-500 text-white'\n                      : 'bg-gray-800 border-gray-700 hover:bg-gray-700 hover:border-gray-600 text-gray-100'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center flex-shrink-0 text-white text-sm font-medium`}\n                    >\n                      {senderName.charAt(0).toUpperCase()}\n                    </div>\n\n                    {/* Email Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header */}\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-2 min-w-0\">\n                          <span\n                            className={`font-medium text-sm truncate ${\n                              isSelected ? 'text-white' : 'text-gray-200'\n                            }`}\n                          >\n                            {senderName}\n                          </span>\n\n                          {/* Indicators */}\n                          <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                            {email.hasAttachments && (\n                              <Paperclip className=\"w-3 h-3 text-gray-400\" />\n                            )}\n                            {email.isUnread && (\n                              <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                            )}\n                            {email.labels?.includes('STARRED') && (\n                              <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          <Clock className=\"w-3 h-3 text-gray-400\" />\n                          <span\n                            className={`text-xs ${isSelected ? 'text-blue-100' : 'text-gray-400'}`}\n                          >\n                            {formatDate(email.date)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Subject */}\n                      <div\n                        className={`text-sm font-medium mb-1 truncate ${\n                          isSelected ? 'text-white' : 'text-gray-100'\n                        }`}\n                      >\n                        {email.subject || '(No subject)'}\n                      </div>\n\n                      {/* Snippet */}\n                      <div\n                        className={`text-xs leading-relaxed line-clamp-2 ${\n                          isSelected ? 'text-blue-100' : 'text-gray-400'\n                        }`}\n                      >\n                        {email.snippet || email.body || 'No content preview available'}\n                      </div>\n\n                      {/* Labels */}\n                      {email.labels && email.labels.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {email.labels.slice(0, 3).map((label: string) => (\n                            <span\n                              key={label}\n                              className={`px-2 py-1 text-xs rounded-full ${\n                                isSelected\n                                  ? 'bg-blue-700 text-blue-100'\n                                  : 'bg-gray-700 text-gray-300'\n                              }`}\n                            >\n                              {label}\n                            </span>\n                          ))}\n                          {email.labels.length > 3 && (\n                            <span\n                              className={`text-xs ${\n                                isSelected ? 'text-blue-200' : 'text-gray-400'\n                              }`}\n                            >\n                              +{email.labels.length - 3} more\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmailInputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx",
        "start": 1,
        "end": 255,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 255,
          "column": 2,
          "position": 1979
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 2,
        "end": 256,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 256,
          "column": 2,
          "position": 1992
        }
      }
    },
    {
      "format": "javascript",
      "lines": 585,
      "fragment": "={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n            rows={property.rows || 4}\n            autoSize={{ minRows: property.rows || 4, maxRows: 10 }}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            value={value as number}\n            onChange={(val) => onChange(val)}\n            min={property.min}\n            max={property.max}\n            step={property.step || 1}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch checked={(value as boolean) || false} onChange={onChange} disabled={isDisabled} />\n        );\n\n      case 'select':\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={onChange}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={(value as string[]) || []}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(props) => {\n              const { label, closable, onClose } = props;\n              return (\n                <span\n                  style={{\n                    backgroundColor: '#1f2937',\n                    border: '1px solid #4b5563',\n                    color: '#ffffff',\n                    borderRadius: '4px',\n                    padding: '2px 8px',\n                    margin: '2px',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    fontSize: '12px',\n                  }}\n                >\n                  {label}\n                  {closable && (\n                    <span\n                      onClick={onClose}\n                      style={{\n                        marginLeft: '4px',\n                        cursor: 'pointer',\n                        color: '#9ca3af',\n                      }}\n                      onMouseEnter={(e) => (e.currentTarget.style.color = '#ffffff')}\n                      onMouseLeave={(e) => (e.currentTarget.style.color = '#9ca3af')}\n                    >\n                      ×\n                    </span>\n                  )}\n                </span>\n              );\n            }}\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'credentialsSelect': {\n        // Get available credentials from context (registry system)\n        const credentialTypes = property.credentialTypes || [];\n        const availableCredentials =\n          context.credentials?.filter(\n            (cred: any) => credentialTypes.length === 0 || credentialTypes.includes(cred.type)\n          ) || [];\n\n        // Debug logging for credential filtering\n        if (property.name === 'credential' && credentialTypes.includes('gmailOAuth2')) {\n        }\n\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={(selectedValue) => {\n              onChange(selectedValue);\n\n              // Sync with the other credential field\n              if (context.onCredentialChange) {\n                context.onCredentialChange(selectedValue);\n              }\n\n              // Trigger auto-population if a credential is selected\n              if (selectedValue && context.onCredentialSelect) {\n                const selectedCredential = availableCredentials.find(\n                  (cred: any) => cred.id === selectedValue\n                );\n                if (selectedCredential) {\n                  context.onCredentialSelect(selectedCredential);\n                }\n              }\n            }}\n            placeholder=\"Select a credential...\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            dropdownRender={(menu) => (\n              <div>\n                {menu}\n                {credentialTypes.length > 0 && (\n                  <div\n                    style={{\n                      padding: '8px',\n                      borderTop: '1px solid #6b7280',\n                      backgroundColor: '#374151',\n                    }}\n                  >\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      onClick={() => {\n                        // Trigger credential creation modal\n                        if (context.onCreateCredential) {\n                          context.onCreateCredential(credentialTypes[0]);\n                        } else {\n                        }\n                      }}\n                      style={{\n                        color: '#3b82f6',\n                        padding: '2px 8px',\n                        height: 'auto',\n                      }}\n                    >\n                      + Create New Credential\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          >\n            <Option value=\"\" style={{ backgroundColor: '#374151', color: '#ffffff' }}>\n              No credential selected\n            </Option>\n            {availableCredentials.map((credential: any) => {\n              const credTypeDef = context.credentialTypes?.find(\n                (ct: any) => ct.name === credential.type\n              );\n              const icon =\n                credTypeDef?.icon && typeof credTypeDef.icon === 'string'\n                  ? credTypeDef.icon\n                  : getCredentialIcon(credential.type);\n              const displayName =\n                credential.name || `${credTypeDef?.displayName || credential.type} Credential`;\n\n              return (\n                <Option\n                  key={credential.id}\n                  value={credential.id}\n                  style={{ backgroundColor: '#374151', color: '#ffffff' }}\n                >\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px',\n                    }}\n                  >\n                    <span style={{ fontSize: '14px' }}>{icon}</span>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 500 }}>{displayName}</div>\n                      <div style={{ fontSize: '11px', color: '#9ca3af' }}>\n                        {credential.testedAt\n                          ? credential.isValid\n                            ? '✓ Tested'\n                            : '⚠ Test failed'\n                          : 'Not tested'}\n                        {credential.updatedAt && (\n                          <span style={{ marginLeft: '8px' }}>\n                            {new Date(credential.updatedAt).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div style={{ display: 'flex', gap: '4px' }}>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onEditCredential) {\n                            context.onEditCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#3b82f6')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Edit credential\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onDeleteCredential && confirm(`Delete \"${displayName}\"?`)) {\n                            context.onDeleteCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Delete credential\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </div>\n                </Option>\n              );\n            })}\n          </Select>\n        );\n      }\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            {...commonProps}\n            showTime\n            value={value ? new Date(value as string) : null}\n            onChange={(date) => onChange(date?.toISOString() || null)}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={(value as string) || '#000000'}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={isDisabled}\n          />\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || '{}'}\n            onChange={(e) => onChange(e.target.value)}\n            rows={6}\n            placeholder=\"Enter valid JSON...\"\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            {...commonProps}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                onChange(info.file.response?.url || info.file.name);\n              }\n            }}\n          >\n            <Button icon={<UploadOutlined />} disabled={isDisabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const collectionValue = (value as any[]) || [];\n    const isMultiple = property.typeOptions?.multipleValues;\n\n    if (!isMultiple) {\n      // Single collection item\n      const itemValue = collectionValue[0] || {};\n      return (\n        <Card\n          size=\"small\"\n          style={{\n            marginBottom: 8,\n            backgroundColor: themeStyles.backgroundColor,\n            borderColor: themeStyles.borderColor,\n            color: themeStyles.color,\n          }}\n        >\n          {property.values?.map((valueProperty: any) => (\n            <PropertyField\n              key={valueProperty.name}\n              property={valueProperty as INodeProperty}\n              value={itemValue[valueProperty.name]}\n              onChange={(newValue) => {\n                const newItem = {\n                  ...itemValue,\n                  [valueProperty.name]: newValue,\n                };\n                onChange([newItem]);\n              }}\n              context={context}\n              disabled={isDisabled}\n              theme={theme}\n            />\n          ))}\n        </Card>\n      );\n    }\n\n    // Multiple collection items\n    return (\n      <div>\n        {collectionValue.map((item, index) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: 8,\n              backgroundColor: themeStyles.backgroundColor,\n              borderColor: themeStyles.borderColor,\n              color: themeStyles.color,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  const newValue = collectionValue.filter((_, i) => i !== index);\n                  onChange(newValue);\n                }}\n                disabled={isDisabled}\n              />\n            }\n          >\n            {property.values?.map((valueProperty: any) => (\n              <PropertyField\n                key={`${index}-${valueProperty.name}`}\n                property={valueProperty as INodeProperty}\n                value={item[valueProperty.name]}\n                onChange={(newValue) => {\n                  const newItems = [...collectionValue];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [valueProperty.name]: newValue,\n                  };\n                  onChange(newItems);\n                }}\n                context={context}\n                disabled={isDisabled}\n                theme={theme}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const defaultItem: Record<string, any> = {};\n            property.values?.forEach((valueProperty: any) => {\n              defaultItem[valueProperty.name] =\n                valueProperty.default !== undefined ? valueProperty.default : '';\n            });\n            onChange([...collectionValue, defaultItem]);\n          }}\n          disabled={isDisabled}\n          block\n          style={{\n            backgroundColor: '#4b5563', // Darker background\n            borderColor: '#6b7280', // Lighter border\n            color: '#ffffff', // Pure white text\n          }}\n        >\n          {property.typeOptions?.multipleValueButtonText || `Add ${property.displayName}`}\n        </Button>\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    if (property.type === 'collection' || property.type === 'fixedCollection') {\n      return renderCollectionField();\n    }\n    return renderBasicField();\n  };\n\n  return (\n    <div className=\"mb-4\">\n      {/* Custom label for dark theme */}\n      <label className=\"block text-sm font-medium text-gray-100 mb-2\">\n        {property.displayName}\n        {evaluation.required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      {/* Form field */}\n      {renderField()}\n\n      {/* Description */}\n      {property.description && (\n        <div className=\"text-xs text-gray-300 mt-1\">{property.description}</div>\n      )}\n\n      {/* Error messages */}\n      {hasErrors && (\n        <div className=\"mt-1\">\n          <div className=\"text-xs text-red-300\">Validation error occurred</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DynamicPropertyRenderer: React.FC<DynamicPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  context = {},\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const credentialProp = properties.find((p) => p.name === 'credential');\n  if (credentialProp) {\n  }\n\n  const [localFormState, setLocalFormState] = useState<PropertyFormState>(formState);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalFormState(formState);\n  }, [formState]);\n\n  const evaluationContext: PropertyEvaluationContext = {\n    formState: localFormState,\n    nodeData: context.nodeData,\n    credentials: context.credentials,\n    workflow: context.workflow,\n  };\n\n  const handleChange = useCallback(\n    (name: string, value: PropertyValue) => {\n      const newFormState = { ...localFormState, [name]: value };\n      setLocalFormState(newFormState);\n      onChange(name, value);\n    },\n    [localFormState, onChange]\n  );\n\n  // Group properties if they have grouping information\n  const groupedProperties = properties.reduce(\n    (groups, property) => {\n      const groupName = 'default'; // Can be extended to support property groups\n      if (!groups[groupName]) {\n        groups[groupName] = [];\n      }\n      groups[groupName].push(property);\n      return groups;\n    },\n    {} as Record<string, INodeProperty[]>\n  );\n\n  return (\n    <div className=\"dynamic-property-renderer\">\n      {Object.entries(groupedProperties).map(([groupName, groupProperties]) => (\n        <div key={groupName}>\n          {(groupProperties as INodeProperty[]).map((property: any, index: number) => (\n            <PropertyField\n              key={`${property.name}-${index}`}\n              property={property}\n              value={localFormState[property.name]}\n              onChange={(value) => handleChange(property.name, value)}\n              context={evaluationContext}\n              disabled={disabled}\n              theme={theme}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx",
        "start": 167,
        "end": 751,
        "startLoc": {
          "line": 167,
          "column": 6,
          "position": 1275
        },
        "endLoc": {
          "line": 751,
          "column": 2,
          "position": 5646
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 172,
        "end": 756,
        "startLoc": {
          "line": 172,
          "column": 6,
          "position": 1340
        },
        "endLoc": {
          "line": 756,
          "column": 2,
          "position": 5711
        }
      }
    },
    {
      "format": "tsx",
      "lines": 760,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { DeleteOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport type {\n  INodeProperty,\n  PropertyEvaluationContext,\n  PropertyFormState,\n  PropertyValue,\n} from '@/core';\n\n// Simple property evaluation for INodeProperty (registry system)\nconst evaluateINodeProperty = (property: INodeProperty, context: PropertyEvaluationContext) => {\n  // For registry system, we use simpler logic\n  const formState = context.formState || {};\n  const displayOptions = property.displayOptions;\n\n  let visible = true;\n  const disabled = false;\n  const required = property.required || false;\n\n  if (displayOptions?.show) {\n    visible = Object.entries(displayOptions.show).every(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n  }\n\n  if (displayOptions?.hide) {\n    const shouldHide = Object.entries(displayOptions.hide).some(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n    if (shouldHide) visible = false;\n  }\n\n  return { visible, disabled, required };\n};\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\ninterface DynamicPropertyRendererProps {\n  properties: INodeProperty[];\n  formState: PropertyFormState;\n  onChange: (name: string, value: PropertyValue) => void;\n  context?: Partial<PropertyEvaluationContext>;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: PropertyValue;\n  onChange: (value: PropertyValue) => void;\n  context: PropertyEvaluationContext;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\n// Theme-based styling helper\nconst getThemeStyles = (theme: 'light' | 'dark', hasErrors: boolean = false) => {\n  if (theme === 'light') {\n    return {\n      backgroundColor: '#ffffff',\n      borderColor: hasErrors ? '#ff4d4f' : '#d1d5db',\n      color: '#1f2937',\n      dropdownStyle: {\n        backgroundColor: '#ffffff',\n        border: '1px solid #d1d5db',\n      },\n    };\n  } else {\n    return {\n      backgroundColor: '#4b5563',\n      borderColor: hasErrors ? '#ff4d4f' : '#6b7280',\n      color: '#ffffff',\n      dropdownStyle: {\n        backgroundColor: '#374151',\n        border: '1px solid #6b7280',\n      },\n    };\n  }\n};\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  context,\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const evaluation = evaluateINodeProperty(property, context);\n\n  if (!evaluation.visible) {\n    return null;\n  }\n\n  const hasErrors = false; // Simplified validation for registry system\n  const isDisabled = disabled || evaluation.disabled;\n  const themeStyles = getThemeStyles(theme, hasErrors);\n\n  const commonProps = {\n    placeholder: property.placeholder,\n    disabled: isDisabled,\n    style: {\n      backgroundColor: themeStyles.backgroundColor,\n      borderColor: themeStyles.borderColor,\n      color: themeStyles.color,\n      ...(hasErrors ? { borderColor: '#ff4d4f' } : {}),\n    },\n  };\n\n  // Helper function to get credential icons\n  const getCredentialIcon = (type: string) => {\n    switch (type) {\n      case 'openaiApi':\n        return '🤖';\n      case 'anthropicApi':\n        return '🧠';\n      case 'googleAiApi':\n        return '🔷';\n      case 'azureOpenAiApi':\n        return '☁️';\n      case 'awsBedrockApi':\n        return '🟠';\n      case 'gmailOAuth2':\n        return '📧';\n      case 'postgres':\n        return '🐘';\n      case 'mysql':\n        return '🐬';\n      default:\n        return '🔑';\n    }\n  };\n\n  const renderBasicField = () => {\n    switch (property.type) {\n      case 'string':\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n            rows={property.rows || 4}\n            autoSize={{ minRows: property.rows || 4, maxRows: 10 }}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            value={value as number}\n            onChange={(val) => onChange(val)}\n            min={property.min}\n            max={property.max}\n            step={property.step || 1}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch checked={(value as boolean) || false} onChange={onChange} disabled={isDisabled} />\n        );\n\n      case 'select':\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={onChange}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={(value as string[]) || []}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(props) => {\n              const { label, closable, onClose } = props;\n              return (\n                <span\n                  style={{\n                    backgroundColor: '#1f2937',\n                    border: '1px solid #4b5563',\n                    color: '#ffffff',\n                    borderRadius: '4px',\n                    padding: '2px 8px',\n                    margin: '2px',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    fontSize: '12px',\n                  }}\n                >\n                  {label}\n                  {closable && (\n                    <span\n                      onClick={onClose}\n                      style={{\n                        marginLeft: '4px',\n                        cursor: 'pointer',\n                        color: '#9ca3af',\n                      }}\n                      onMouseEnter={(e) => (e.currentTarget.style.color = '#ffffff')}\n                      onMouseLeave={(e) => (e.currentTarget.style.color = '#9ca3af')}\n                    >\n                      ×\n                    </span>\n                  )}\n                </span>\n              );\n            }}\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'credentialsSelect': {\n        // Get available credentials from context (registry system)\n        const credentialTypes = property.credentialTypes || [];\n        const availableCredentials =\n          context.credentials?.filter(\n            (cred: any) => credentialTypes.length === 0 || credentialTypes.includes(cred.type)\n          ) || [];\n\n        // Debug logging for credential filtering\n        if (property.name === 'credential' && credentialTypes.includes('gmailOAuth2')) {\n        }\n\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={(selectedValue) => {\n              onChange(selectedValue);\n\n              // Sync with the other credential field\n              if (context.onCredentialChange) {\n                context.onCredentialChange(selectedValue);\n              }\n\n              // Trigger auto-population if a credential is selected\n              if (selectedValue && context.onCredentialSelect) {\n                const selectedCredential = availableCredentials.find(\n                  (cred: any) => cred.id === selectedValue\n                );\n                if (selectedCredential) {\n                  context.onCredentialSelect(selectedCredential);\n                }\n              }\n            }}\n            placeholder=\"Select a credential...\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            dropdownRender={(menu) => (\n              <div>\n                {menu}\n                {credentialTypes.length > 0 && (\n                  <div\n                    style={{\n                      padding: '8px',\n                      borderTop: '1px solid #6b7280',\n                      backgroundColor: '#374151',\n                    }}\n                  >\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      onClick={() => {\n                        // Trigger credential creation modal\n                        if (context.onCreateCredential) {\n                          context.onCreateCredential(credentialTypes[0]);\n                        } else {\n                        }\n                      }}\n                      style={{\n                        color: '#3b82f6',\n                        padding: '2px 8px',\n                        height: 'auto',\n                      }}\n                    >\n                      + Create New Credential\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          >\n            <Option value=\"\" style={{ backgroundColor: '#374151', color: '#ffffff' }}>\n              No credential selected\n            </Option>\n            {availableCredentials.map((credential: any) => {\n              const credTypeDef = context.credentialTypes?.find(\n                (ct: any) => ct.name === credential.type\n              );\n              const icon =\n                credTypeDef?.icon && typeof credTypeDef.icon === 'string'\n                  ? credTypeDef.icon\n                  : getCredentialIcon(credential.type);\n              const displayName =\n                credential.name || `${credTypeDef?.displayName || credential.type} Credential`;\n\n              return (\n                <Option\n                  key={credential.id}\n                  value={credential.id}\n                  style={{ backgroundColor: '#374151', color: '#ffffff' }}\n                >\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px',\n                    }}\n                  >\n                    <span style={{ fontSize: '14px' }}>{icon}</span>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 500 }}>{displayName}</div>\n                      <div style={{ fontSize: '11px', color: '#9ca3af' }}>\n                        {credential.testedAt\n                          ? credential.isValid\n                            ? '✓ Tested'\n                            : '⚠ Test failed'\n                          : 'Not tested'}\n                        {credential.updatedAt && (\n                          <span style={{ marginLeft: '8px' }}>\n                            {new Date(credential.updatedAt).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div style={{ display: 'flex', gap: '4px' }}>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onEditCredential) {\n                            context.onEditCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#3b82f6')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Edit credential\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onDeleteCredential && confirm(`Delete \"${displayName}\"?`)) {\n                            context.onDeleteCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Delete credential\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </div>\n                </Option>\n              );\n            })}\n          </Select>\n        );\n      }\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            {...commonProps}\n            showTime\n            value={value ? new Date(value as string) : null}\n            onChange={(date) => onChange(date?.toISOString() || null)}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={(value as string) || '#000000'}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={isDisabled}\n          />\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || '{}'}\n            onChange={(e) => onChange(e.target.value)}\n            rows={6}\n            placeholder=\"Enter valid JSON...\"\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            {...commonProps}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                onChange(info.file.response?.url || info.file.name);\n              }\n            }}\n          >\n            <Button icon={<UploadOutlined />} disabled={isDisabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const collectionValue = (value as any[]) || [];\n    const isMultiple = property.typeOptions?.multipleValues;\n\n    if (!isMultiple) {\n      // Single collection item\n      const itemValue = collectionValue[0] || {};\n      return (\n        <Card\n          size=\"small\"\n          style={{\n            marginBottom: 8,\n            backgroundColor: themeStyles.backgroundColor,\n            borderColor: themeStyles.borderColor,\n            color: themeStyles.color,\n          }}\n        >\n          {property.values?.map((valueProperty: any) => (\n            <PropertyField\n              key={valueProperty.name}\n              property={valueProperty as INodeProperty}\n              value={itemValue[valueProperty.name]}\n              onChange={(newValue) => {\n                const newItem = {\n                  ...itemValue,\n                  [valueProperty.name]: newValue,\n                };\n                onChange([newItem]);\n              }}\n              context={context}\n              disabled={isDisabled}\n              theme={theme}\n            />\n          ))}\n        </Card>\n      );\n    }\n\n    // Multiple collection items\n    return (\n      <div>\n        {collectionValue.map((item, index) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: 8,\n              backgroundColor: themeStyles.backgroundColor,\n              borderColor: themeStyles.borderColor,\n              color: themeStyles.color,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  const newValue = collectionValue.filter((_, i) => i !== index);\n                  onChange(newValue);\n                }}\n                disabled={isDisabled}\n              />\n            }\n          >\n            {property.values?.map((valueProperty: any) => (\n              <PropertyField\n                key={`${index}-${valueProperty.name}`}\n                property={valueProperty as INodeProperty}\n                value={item[valueProperty.name]}\n                onChange={(newValue) => {\n                  const newItems = [...collectionValue];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [valueProperty.name]: newValue,\n                  };\n                  onChange(newItems);\n                }}\n                context={context}\n                disabled={isDisabled}\n                theme={theme}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const defaultItem: Record<string, any> = {};\n            property.values?.forEach((valueProperty: any) => {\n              defaultItem[valueProperty.name] =\n                valueProperty.default !== undefined ? valueProperty.default : '';\n            });\n            onChange([...collectionValue, defaultItem]);\n          }}\n          disabled={isDisabled}\n          block\n          style={{\n            backgroundColor: '#4b5563', // Darker background\n            borderColor: '#6b7280', // Lighter border\n            color: '#ffffff', // Pure white text\n          }}\n        >\n          {property.typeOptions?.multipleValueButtonText || `Add ${property.displayName}`}\n        </Button>\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    if (property.type === 'collection' || property.type === 'fixedCollection') {\n      return renderCollectionField();\n    }\n    return renderBasicField();\n  };\n\n  return (\n    <div className=\"mb-4\">\n      {/* Custom label for dark theme */}\n      <label className=\"block text-sm font-medium text-gray-100 mb-2\">\n        {property.displayName}\n        {evaluation.required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      {/* Form field */}\n      {renderField()}\n\n      {/* Description */}\n      {property.description && (\n        <div className=\"text-xs text-gray-300 mt-1\">{property.description}</div>\n      )}\n\n      {/* Error messages */}\n      {hasErrors && (\n        <div className=\"mt-1\">\n          <div className=\"text-xs text-red-300\">Validation error occurred</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DynamicPropertyRenderer: React.FC<DynamicPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  context = {},\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const credentialProp = properties.find((p) => p.name === 'credential');\n  if (credentialProp) {\n  }\n\n  const [localFormState, setLocalFormState] = useState<PropertyFormState>(formState);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalFormState(formState);\n  }, [formState]);\n\n  const evaluationContext: PropertyEvaluationContext = {\n    formState: localFormState,\n    nodeData: context.nodeData,\n    credentials: context.credentials,\n    workflow: context.workflow,\n  };\n\n  const handleChange = useCallback(\n    (name: string, value: PropertyValue) => {\n      const newFormState = { ...localFormState, [name]: value };\n      setLocalFormState(newFormState);\n      onChange(name, value);\n    },\n    [localFormState, onChange]\n  );\n\n  // Group properties if they have grouping information\n  const groupedProperties = properties.reduce(\n    (groups, property) => {\n      const groupName = 'default'; // Can be extended to support property groups\n      if (!groups[groupName]) {\n        groups[groupName] = [];\n      }\n      groups[groupName].push(property);\n      return groups;\n    },\n    {} as Record<string, INodeProperty[]>\n  );\n\n  return (\n    <div className=\"dynamic-property-renderer\">\n      {Object.entries(groupedProperties).map(([groupName, groupProperties]) => (\n        <div key={groupName}>\n          {(groupProperties as INodeProperty[]).map((property: any, index: number) => (\n            <PropertyField\n              key={`${property.name}-${index}`}\n              property={property}\n              value={localFormState[property.name]}\n              onChange={(value) => handleChange(property.name, value)}\n              context={evaluationContext}\n              disabled={disabled}\n              theme={theme}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default DynamicPropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx",
        "start": 1,
        "end": 760,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 760,
          "column": 2,
          "position": 5684
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 6,
        "end": 765,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 765,
          "column": 2,
          "position": 5749
        }
      }
    },
    {
      "format": "javascript",
      "lines": 552,
      "fragment": "={5} className=\"text-white mb-0\">\n              Debug Controls\n            </Title>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge\n              status={getStatusColor() as any}\n              text={getStatusText()}\n              className=\"text-gray-300\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {!isDebugging ? (\n            <Button\n              type=\"primary\"\n              icon={<PlayCircleOutlined />}\n              onClick={startDebugging}\n              disabled={!workflowId || !executionId}\n            >\n              Start Debugging\n            </Button>\n          ) : (\n            <>\n              {isPaused ? (\n                <Button type=\"primary\" icon={<PlayCircleOutlined />} onClick={resumeExecution}>\n                  Resume\n                </Button>\n              ) : (\n                <Button icon={<PauseCircleOutlined />} onClick={pauseExecution}>\n                  Pause\n                </Button>\n              )}\n\n              <Button\n                icon={<StepForwardOutlined />}\n                onClick={stepOver}\n                disabled={!isPaused}\n                title=\"Step Over\"\n              />\n\n              <Button\n                icon={<StepBackwardOutlined />}\n                onClick={stepInto}\n                disabled={!isPaused}\n                title=\"Step Into\"\n              />\n\n              <Button\n                icon={<StopOutlined />}\n                onClick={stepOut}\n                disabled={!isPaused}\n                title=\"Step Out\"\n              />\n\n              <Button danger icon={<StopOutlined />} onClick={stopDebugging}>\n                Stop\n              </Button>\n            </>\n          )}\n        </div>\n\n        {session && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <Text className=\"text-gray-400\">Session ID:</Text>\n              <div className=\"text-white font-mono\">{session.id}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Step Count:</Text>\n              <div className=\"text-white\">{session.stepCount}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Duration:</Text>\n              <div className=\"text-white\">\n                {Math.round((Date.now() - session.startTime) / 1000)}s\n              </div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Current Node:</Text>\n              <div className=\"text-white\">{session.currentNodeId || 'None'}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n\n  const renderBreakpoints = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Breakpoints\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsBreakpointModalOpen(true)}\n        >\n          Add Breakpoint\n        </Button>\n      </div>\n\n      {session && session.breakpoints.size === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <BugOutlined className=\"text-4xl mb-2\" />\n          <div>No breakpoints set</div>\n          <div className=\"text-xs mt-2\">Add breakpoints to pause execution at specific nodes</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Array.from(session?.breakpoints.entries() || []).map(([nodeId, breakpoints]) =>\n            breakpoints.map((breakpoint) => (\n              <Card key={breakpoint.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      size=\"small\"\n                      checked={breakpoint.enabled}\n                      onChange={() => toggleBreakpoint(nodeId, breakpoint.id)}\n                    />\n                    <div>\n                      <div className=\"text-white text-sm font-medium\">Node: {nodeId}</div>\n                      {breakpoint.condition && (\n                        <div className=\"text-gray-400 text-xs\">\n                          Condition: {breakpoint.condition}\n                        </div>\n                      )}\n                      <div className=\"text-gray-500 text-xs\">Hits: {breakpoint.hitCount}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Badge\n                      count={breakpoint.hitCount}\n                      size=\"small\"\n                      style={{ backgroundColor: '#1890ff' }}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeBreakpoint(nodeId, breakpoint.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                    />\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderWatchExpressions = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Watch Expressions\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsWatchModalOpen(true)}\n        >\n          Add Watch\n        </Button>\n      </div>\n\n      {watchExpressions.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <EyeOutlined className=\"text-4xl mb-2\" />\n          <div>No watch expressions</div>\n          <div className=\"text-xs mt-2\">Add expressions to monitor variable values</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {watchExpressions.map((watch) => (\n            <Card key={watch.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"text-white text-sm font-mono\">{watch.expression}</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">\n                    {watch.error ? (\n                      <span className=\"text-red-400\">Error: {watch.error}</span>\n                    ) : (\n                      <>\n                        <span className=\"text-green-400\">Value: </span>\n                        <span className=\"font-mono\">\n                          {typeof watch.value === 'object'\n                            ? JSON.stringify(watch.value)\n                            : String(watch.value)}\n                        </span>\n                        <span className=\"text-gray-500 ml-2\">({watch.type})</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  onClick={() => removeWatchExpression(watch.id)}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCallStack = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Call Stack\n      </Title>\n\n      {callStack.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <CodeOutlined className=\"text-4xl mb-2\" />\n          <div>Call stack is empty</div>\n          <div className=\"text-xs mt-2\">Start debugging to see the call stack</div>\n        </div>\n      ) : (\n        <Timeline\n          items={callStack.map((frame, index) => ({\n            color: index === callStack.length - 1 ? 'blue' : 'gray',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white font-medium\">{frame.nodeName}</div>\n                <div className=\"text-gray-400 text-sm\">{frame.nodeType}</div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(frame.timestamp).toLocaleTimeString()}\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderVariables = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Variables\n      </Title>\n\n      {Object.keys(variables).length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <InfoCircleOutlined className=\"text-4xl mb-2\" />\n          <div>No variables available</div>\n          <div className=\"text-xs mt-2\">Variables will appear during execution</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Object.entries(variables).map(([key, value]) => (\n            <Card key={key} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"space-y-2\">\n                <div className=\"text-white font-medium\">{key}</div>\n                <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"200px\" />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderExecutionHistory = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Execution History\n      </Title>\n\n      {executionHistory.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <HistoryOutlined className=\"text-4xl mb-2\" />\n          <div>No execution history</div>\n          <div className=\"text-xs mt-2\">Execution steps will appear here</div>\n        </div>\n      ) : (\n        <Timeline\n          items={executionHistory.map((step) => ({\n            color:\n              step.action === 'error' ? 'red' : step.action === 'breakpoint' ? 'orange' : 'blue',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-white font-medium\">{step.nodeId}</span>\n                  <Tag\n                    color={\n                      step.action === 'error'\n                        ? 'red'\n                        : step.action === 'breakpoint'\n                          ? 'orange'\n                          : step.action === 'start'\n                            ? 'blue'\n                            : 'green'\n                    }\n                  >\n                    {step.action}\n                  </Tag>\n                </div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(step.timestamp).toLocaleTimeString()}\n                  {step.duration && ` (${step.duration}ms)`}\n                </div>\n                {step.error && (\n                  <div className=\"text-red-400 text-xs\">Error: {step.error.message}</div>\n                )}\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderMetrics = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Debug Metrics\n      </Title>\n\n      {!metrics ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <SettingOutlined className=\"text-4xl mb-2\" />\n          <div>No metrics available</div>\n          <div className=\"text-xs mt-2\">Start debugging to see performance metrics</div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-400\">{metrics.totalSteps}</div>\n              <div className=\"text-gray-400 text-sm\">Total Steps</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-400\">{metrics.breakpointHits}</div>\n              <div className=\"text-gray-400 text-sm\">Breakpoint Hits</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-400\">{metrics.errors}</div>\n              <div className=\"text-gray-400 text-sm\">Errors</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                {Math.round(metrics.averageStepTime)}ms\n              </div>\n              <div className=\"text-gray-400 text-sm\">Avg Step Time</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-400\">{metrics.callStackDepth}</div>\n              <div className=\"text-gray-400 text-sm\">Call Stack Depth</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {Math.round(metrics.memoryUsage)}MB\n              </div>\n              <div className=\"text-gray-400 text-sm\">Memory Usage</div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <BugOutlined className=\"text-red-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Debug Panel\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced debugging tools for workflow execution\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        {renderDebugControls()}\n\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"debug-tabs\"\n          items={[\n            {\n              key: 'breakpoints',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Breakpoints\n                  {session && session.breakpoints.size > 0 && (\n                    <Badge\n                      count={Array.from(session.breakpoints.values()).flat().length}\n                      size=\"small\"\n                      className=\"ml-2\"\n                    />\n                  )}\n                </span>\n              ),\n              children: renderBreakpoints(),\n            },\n            {\n              key: 'watch',\n              label: (\n                <span>\n                  <EyeOutlined className=\"mr-1\" />\n                  Watch\n                  {watchExpressions.length > 0 && (\n                    <Badge count={watchExpressions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderWatchExpressions(),\n            },\n            {\n              key: 'callstack',\n              label: (\n                <span>\n                  <CodeOutlined className=\"mr-1\" />\n                  Call Stack\n                  {callStack.length > 0 && (\n                    <Badge count={callStack.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderCallStack(),\n            },\n            {\n              key: 'variables',\n              label: (\n                <span>\n                  <InfoCircleOutlined className=\"mr-1\" />\n                  Variables\n                  {Object.keys(variables).length > 0 && (\n                    <Badge count={Object.keys(variables).length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderVariables(),\n            },\n            {\n              key: 'history',\n              label: (\n                <span>\n                  <HistoryOutlined className=\"mr-1\" />\n                  History\n                  {executionHistory.length > 0 && (\n                    <Badge count={executionHistory.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderExecutionHistory(),\n            },\n            {\n              key: 'metrics',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Metrics\n                </span>\n              ),\n              children: renderMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Add Breakpoint Modal */}\n      <Modal\n        title=\"Add Breakpoint\"\n        open={isBreakpointModalOpen}\n        onCancel={() => setIsBreakpointModalOpen(false)}\n        onOk={() => {\n          if (selectedNodeId) {\n            addBreakpoint(selectedNodeId);\n            setIsBreakpointModalOpen(false);\n            setSelectedNodeId('');\n          }\n        }}\n        width={400}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Node ID\" required>\n            <Input\n              value={selectedNodeId}\n              onChange={(e) => setSelectedNodeId(e.target.value)}\n              placeholder=\"Enter node ID\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Add Watch Expression Modal */}\n      <Modal\n        title=\"Add Watch Expression\"\n        open={isWatchModalOpen}\n        onCancel={() => setIsWatchModalOpen(false)}\n        onOk={addWatchExpression}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Expression\" required>\n            <Input\n              value={newWatchExpression}\n              onChange={(e) => setNewWatchExpression(e.target.value)}\n              placeholder=\"e.g., $input.user.name, variables.count, $output.result\"\n            />\n          </Form.Item>\n          <Alert\n            message=\"Expression Examples\"\n            description={\n              <ul className=\"mt-2 text-sm\">\n                <li>\n                  <code>$input.user.name</code> - Access input data\n                </li>\n                <li>\n                  <code>$output.result</code> - Access output data\n                </li>\n                <li>\n                  <code>variables.count</code> - Access workflow variables\n                </li>\n                <li>\n                  <code>JSON.stringify($input)</code> - Convert to JSON\n                </li>\n              </ul>\n            }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx",
        "start": 235,
        "end": 786,
        "startLoc": {
          "line": 235,
          "column": 6,
          "position": 1845
        },
        "endLoc": {
          "line": 786,
          "column": 2,
          "position": 6483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx",
        "start": 240,
        "end": 791,
        "startLoc": {
          "line": 240,
          "column": 6,
          "position": 1910
        },
        "endLoc": {
          "line": 791,
          "column": 2,
          "position": 6548
        }
      }
    },
    {
      "format": "tsx",
      "lines": 796,
      "fragment": "/**\n * Debug Panel Component\n *\n * Comprehensive debugging interface providing:\n * - Breakpoint management and execution control\n * - Step-through debugging with call stack visualization\n * - Data inspection and variable watching\n * - Execution history and replay functionality\n * - Performance profiling and metrics\n */\n\nimport {\n  BugOutlined,\n  CodeOutlined,\n  DeleteOutlined,\n  EyeOutlined,\n  HistoryOutlined,\n  InfoCircleOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  PlusOutlined,\n  SettingOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Form,\n  Input,\n  Modal,\n  Switch,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { enhancedDebuggingService } from '@/core/services/enhancedDebuggingService';\nimport type {\n  CallStackFrame,\n  DebugEvent,\n  DebugMetrics,\n  DebugSession,\n  ExecutionStep,\n  WatchExpression,\n} from '@/core/types/debugging';\nimport { JsonViewer } from '@/design-system';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\n\ninterface DebugPanelProps {\n  workflowId?: string;\n  executionId?: string;\n  className?: string;\n}\n\nconst DebugPanel: React.FC<DebugPanelProps> = ({ workflowId, executionId, className }) => {\n  const [activeTab, setActiveTab] = useState('controls');\n  const [session, setSession] = useState<DebugSession | null>(null);\n  const [isDebugging, setIsDebugging] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [_currentStep, _setCurrentStep] = useState<ExecutionStep | null>(null);\n\n  const [watchExpressions, _setWatchExpressions] = useState<WatchExpression[]>([]);\n  const [callStack, setCallStack] = useState<CallStackFrame[]>([]);\n  const [variables, setVariables] = useState<Record<string, any>>({});\n  const [executionHistory, _setExecutionHistory] = useState<ExecutionStep[]>([]);\n  const [metrics, setMetrics] = useState<DebugMetrics | null>(null);\n  const [isBreakpointModalOpen, setIsBreakpointModalOpen] = useState(false);\n  const [isWatchModalOpen, setIsWatchModalOpen] = useState(false);\n  const [selectedNodeId, setSelectedNodeId] = useState<string>('');\n  const [newWatchExpression, setNewWatchExpression] = useState('');\n\n  // Subscribe to debug events\n  useEffect(() => {\n    const unsubscribe = enhancedDebuggingService.subscribe((event: DebugEvent) => {\n      handleDebugEvent(event);\n    });\n\n    return unsubscribe;\n  }, [handleDebugEvent]);\n\n  const handleDebugEvent = useCallback(\n    (event: DebugEvent) => {\n      switch (event.type) {\n        case 'session-started':\n          setIsDebugging(true);\n          break;\n        case 'session-ended':\n          setIsDebugging(false);\n          setIsPaused(false);\n          setSession(null);\n          break;\n        case 'step-completed':\n          _setCurrentStep(event.data);\n          updateSessionData();\n          break;\n        case 'breakpoint-hit':\n          setIsPaused(true);\n          updateSessionData();\n          break;\n        case 'error-occurred':\n          setIsPaused(true);\n          updateSessionData();\n          break;\n      }\n    },\n    [updateSessionData]\n  );\n\n  const updateSessionData = useCallback(() => {\n    const currentSession = enhancedDebuggingService.getCurrentSession();\n    if (currentSession) {\n      setSession(currentSession);\n      setCallStack(enhancedDebuggingService.getCallStack());\n      setVariables(enhancedDebuggingService.getVariables());\n      setMetrics(enhancedDebuggingService.getDebugMetrics());\n    }\n  }, []);\n\n  const startDebugging = useCallback(async () => {\n    if (!workflowId || !executionId) return;\n\n    try {\n      await enhancedDebuggingService.startDebugging(workflowId, executionId);\n      setIsDebugging(true);\n      updateSessionData();\n    } catch (_error) {}\n  }, [workflowId, executionId, updateSessionData]);\n\n  const stopDebugging = useCallback(() => {\n    enhancedDebuggingService.stopDebugging();\n    setIsDebugging(false);\n    setIsPaused(false);\n    setSession(null);\n  }, []);\n\n  const pauseExecution = useCallback(() => {\n    enhancedDebuggingService.pauseExecution();\n    setIsPaused(true);\n  }, []);\n\n  const resumeExecution = useCallback(() => {\n    enhancedDebuggingService.resumeExecution();\n    setIsPaused(false);\n  }, []);\n\n  const stepOver = useCallback(() => {\n    enhancedDebuggingService.stepOver();\n    setIsPaused(true);\n  }, []);\n\n  const stepInto = useCallback(() => {\n    enhancedDebuggingService.stepInto();\n    setIsPaused(true);\n  }, []);\n\n  const stepOut = useCallback(() => {\n    enhancedDebuggingService.stepOut();\n    setIsPaused(true);\n  }, []);\n\n  const addBreakpoint = useCallback(\n    (nodeId: string, condition?: string) => {\n      enhancedDebuggingService.addBreakpoint(nodeId, {\n        nodeId,\n        enabled: true,\n        hitCount: 0,\n        condition,\n        actions: [{ type: 'pause' }],\n        createdAt: Date.now(),\n      });\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const removeBreakpoint = useCallback(\n    (nodeId: string, breakpointId: string) => {\n      enhancedDebuggingService.removeBreakpoint(nodeId, breakpointId);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const toggleBreakpoint = useCallback(\n    (nodeId: string, breakpointId: string) => {\n      enhancedDebuggingService.toggleBreakpoint(nodeId, breakpointId);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const addWatchExpression = useCallback(() => {\n    if (newWatchExpression.trim()) {\n      enhancedDebuggingService.addWatchExpression(newWatchExpression.trim());\n      setNewWatchExpression('');\n      setIsWatchModalOpen(false);\n      updateSessionData();\n    }\n  }, [newWatchExpression, updateSessionData]);\n\n  const removeWatchExpression = useCallback(\n    (id: string) => {\n      enhancedDebuggingService.removeWatchExpression(id);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const getStatusColor = () => {\n    if (!isDebugging) return 'gray';\n    if (isPaused) return 'orange';\n    return 'green';\n  };\n\n  const getStatusText = () => {\n    if (!isDebugging) return 'Not Debugging';\n    if (isPaused) return 'Paused';\n    return 'Running';\n  };\n\n  const renderDebugControls = () => (\n    <Card size=\"small\" className=\"bg-gray-800 border-gray-600 mb-4\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <BugOutlined className=\"text-blue-400\" />\n            <Title level={5} className=\"text-white mb-0\">\n              Debug Controls\n            </Title>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge\n              status={getStatusColor() as any}\n              text={getStatusText()}\n              className=\"text-gray-300\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {!isDebugging ? (\n            <Button\n              type=\"primary\"\n              icon={<PlayCircleOutlined />}\n              onClick={startDebugging}\n              disabled={!workflowId || !executionId}\n            >\n              Start Debugging\n            </Button>\n          ) : (\n            <>\n              {isPaused ? (\n                <Button type=\"primary\" icon={<PlayCircleOutlined />} onClick={resumeExecution}>\n                  Resume\n                </Button>\n              ) : (\n                <Button icon={<PauseCircleOutlined />} onClick={pauseExecution}>\n                  Pause\n                </Button>\n              )}\n\n              <Button\n                icon={<StepForwardOutlined />}\n                onClick={stepOver}\n                disabled={!isPaused}\n                title=\"Step Over\"\n              />\n\n              <Button\n                icon={<StepBackwardOutlined />}\n                onClick={stepInto}\n                disabled={!isPaused}\n                title=\"Step Into\"\n              />\n\n              <Button\n                icon={<StopOutlined />}\n                onClick={stepOut}\n                disabled={!isPaused}\n                title=\"Step Out\"\n              />\n\n              <Button danger icon={<StopOutlined />} onClick={stopDebugging}>\n                Stop\n              </Button>\n            </>\n          )}\n        </div>\n\n        {session && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <Text className=\"text-gray-400\">Session ID:</Text>\n              <div className=\"text-white font-mono\">{session.id}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Step Count:</Text>\n              <div className=\"text-white\">{session.stepCount}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Duration:</Text>\n              <div className=\"text-white\">\n                {Math.round((Date.now() - session.startTime) / 1000)}s\n              </div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Current Node:</Text>\n              <div className=\"text-white\">{session.currentNodeId || 'None'}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n\n  const renderBreakpoints = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Breakpoints\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsBreakpointModalOpen(true)}\n        >\n          Add Breakpoint\n        </Button>\n      </div>\n\n      {session && session.breakpoints.size === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <BugOutlined className=\"text-4xl mb-2\" />\n          <div>No breakpoints set</div>\n          <div className=\"text-xs mt-2\">Add breakpoints to pause execution at specific nodes</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Array.from(session?.breakpoints.entries() || []).map(([nodeId, breakpoints]) =>\n            breakpoints.map((breakpoint) => (\n              <Card key={breakpoint.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      size=\"small\"\n                      checked={breakpoint.enabled}\n                      onChange={() => toggleBreakpoint(nodeId, breakpoint.id)}\n                    />\n                    <div>\n                      <div className=\"text-white text-sm font-medium\">Node: {nodeId}</div>\n                      {breakpoint.condition && (\n                        <div className=\"text-gray-400 text-xs\">\n                          Condition: {breakpoint.condition}\n                        </div>\n                      )}\n                      <div className=\"text-gray-500 text-xs\">Hits: {breakpoint.hitCount}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Badge\n                      count={breakpoint.hitCount}\n                      size=\"small\"\n                      style={{ backgroundColor: '#1890ff' }}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeBreakpoint(nodeId, breakpoint.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                    />\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderWatchExpressions = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Watch Expressions\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsWatchModalOpen(true)}\n        >\n          Add Watch\n        </Button>\n      </div>\n\n      {watchExpressions.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <EyeOutlined className=\"text-4xl mb-2\" />\n          <div>No watch expressions</div>\n          <div className=\"text-xs mt-2\">Add expressions to monitor variable values</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {watchExpressions.map((watch) => (\n            <Card key={watch.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"text-white text-sm font-mono\">{watch.expression}</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">\n                    {watch.error ? (\n                      <span className=\"text-red-400\">Error: {watch.error}</span>\n                    ) : (\n                      <>\n                        <span className=\"text-green-400\">Value: </span>\n                        <span className=\"font-mono\">\n                          {typeof watch.value === 'object'\n                            ? JSON.stringify(watch.value)\n                            : String(watch.value)}\n                        </span>\n                        <span className=\"text-gray-500 ml-2\">({watch.type})</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  onClick={() => removeWatchExpression(watch.id)}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCallStack = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Call Stack\n      </Title>\n\n      {callStack.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <CodeOutlined className=\"text-4xl mb-2\" />\n          <div>Call stack is empty</div>\n          <div className=\"text-xs mt-2\">Start debugging to see the call stack</div>\n        </div>\n      ) : (\n        <Timeline\n          items={callStack.map((frame, index) => ({\n            color: index === callStack.length - 1 ? 'blue' : 'gray',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white font-medium\">{frame.nodeName}</div>\n                <div className=\"text-gray-400 text-sm\">{frame.nodeType}</div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(frame.timestamp).toLocaleTimeString()}\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderVariables = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Variables\n      </Title>\n\n      {Object.keys(variables).length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <InfoCircleOutlined className=\"text-4xl mb-2\" />\n          <div>No variables available</div>\n          <div className=\"text-xs mt-2\">Variables will appear during execution</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Object.entries(variables).map(([key, value]) => (\n            <Card key={key} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"space-y-2\">\n                <div className=\"text-white font-medium\">{key}</div>\n                <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"200px\" />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderExecutionHistory = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Execution History\n      </Title>\n\n      {executionHistory.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <HistoryOutlined className=\"text-4xl mb-2\" />\n          <div>No execution history</div>\n          <div className=\"text-xs mt-2\">Execution steps will appear here</div>\n        </div>\n      ) : (\n        <Timeline\n          items={executionHistory.map((step) => ({\n            color:\n              step.action === 'error' ? 'red' : step.action === 'breakpoint' ? 'orange' : 'blue',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-white font-medium\">{step.nodeId}</span>\n                  <Tag\n                    color={\n                      step.action === 'error'\n                        ? 'red'\n                        : step.action === 'breakpoint'\n                          ? 'orange'\n                          : step.action === 'start'\n                            ? 'blue'\n                            : 'green'\n                    }\n                  >\n                    {step.action}\n                  </Tag>\n                </div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(step.timestamp).toLocaleTimeString()}\n                  {step.duration && ` (${step.duration}ms)`}\n                </div>\n                {step.error && (\n                  <div className=\"text-red-400 text-xs\">Error: {step.error.message}</div>\n                )}\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderMetrics = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Debug Metrics\n      </Title>\n\n      {!metrics ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <SettingOutlined className=\"text-4xl mb-2\" />\n          <div>No metrics available</div>\n          <div className=\"text-xs mt-2\">Start debugging to see performance metrics</div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-400\">{metrics.totalSteps}</div>\n              <div className=\"text-gray-400 text-sm\">Total Steps</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-400\">{metrics.breakpointHits}</div>\n              <div className=\"text-gray-400 text-sm\">Breakpoint Hits</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-400\">{metrics.errors}</div>\n              <div className=\"text-gray-400 text-sm\">Errors</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                {Math.round(metrics.averageStepTime)}ms\n              </div>\n              <div className=\"text-gray-400 text-sm\">Avg Step Time</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-400\">{metrics.callStackDepth}</div>\n              <div className=\"text-gray-400 text-sm\">Call Stack Depth</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {Math.round(metrics.memoryUsage)}MB\n              </div>\n              <div className=\"text-gray-400 text-sm\">Memory Usage</div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <BugOutlined className=\"text-red-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Debug Panel\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced debugging tools for workflow execution\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        {renderDebugControls()}\n\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"debug-tabs\"\n          items={[\n            {\n              key: 'breakpoints',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Breakpoints\n                  {session && session.breakpoints.size > 0 && (\n                    <Badge\n                      count={Array.from(session.breakpoints.values()).flat().length}\n                      size=\"small\"\n                      className=\"ml-2\"\n                    />\n                  )}\n                </span>\n              ),\n              children: renderBreakpoints(),\n            },\n            {\n              key: 'watch',\n              label: (\n                <span>\n                  <EyeOutlined className=\"mr-1\" />\n                  Watch\n                  {watchExpressions.length > 0 && (\n                    <Badge count={watchExpressions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderWatchExpressions(),\n            },\n            {\n              key: 'callstack',\n              label: (\n                <span>\n                  <CodeOutlined className=\"mr-1\" />\n                  Call Stack\n                  {callStack.length > 0 && (\n                    <Badge count={callStack.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderCallStack(),\n            },\n            {\n              key: 'variables',\n              label: (\n                <span>\n                  <InfoCircleOutlined className=\"mr-1\" />\n                  Variables\n                  {Object.keys(variables).length > 0 && (\n                    <Badge count={Object.keys(variables).length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderVariables(),\n            },\n            {\n              key: 'history',\n              label: (\n                <span>\n                  <HistoryOutlined className=\"mr-1\" />\n                  History\n                  {executionHistory.length > 0 && (\n                    <Badge count={executionHistory.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderExecutionHistory(),\n            },\n            {\n              key: 'metrics',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Metrics\n                </span>\n              ),\n              children: renderMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Add Breakpoint Modal */}\n      <Modal\n        title=\"Add Breakpoint\"\n        open={isBreakpointModalOpen}\n        onCancel={() => setIsBreakpointModalOpen(false)}\n        onOk={() => {\n          if (selectedNodeId) {\n            addBreakpoint(selectedNodeId);\n            setIsBreakpointModalOpen(false);\n            setSelectedNodeId('');\n          }\n        }}\n        width={400}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Node ID\" required>\n            <Input\n              value={selectedNodeId}\n              onChange={(e) => setSelectedNodeId(e.target.value)}\n              placeholder=\"Enter node ID\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Add Watch Expression Modal */}\n      <Modal\n        title=\"Add Watch Expression\"\n        open={isWatchModalOpen}\n        onCancel={() => setIsWatchModalOpen(false)}\n        onOk={addWatchExpression}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Expression\" required>\n            <Input\n              value={newWatchExpression}\n              onChange={(e) => setNewWatchExpression(e.target.value)}\n              placeholder=\"e.g., $input.user.name, variables.count, $output.result\"\n            />\n          </Form.Item>\n          <Alert\n            message=\"Expression Examples\"\n            description={\n              <ul className=\"mt-2 text-sm\">\n                <li>\n                  <code>$input.user.name</code> - Access input data\n                </li>\n                <li>\n                  <code>$output.result</code> - Access output data\n                </li>\n                <li>\n                  <code>variables.count</code> - Access workflow variables\n                </li>\n                <li>\n                  <code>JSON.stringify($input)</code> - Convert to JSON\n                </li>\n              </ul>\n            }\n            type=\"info\"\n            showIcon\n          />\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DebugPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx",
        "start": 1,
        "end": 796,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 796,
          "column": 2,
          "position": 6523
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx",
        "start": 6,
        "end": 801,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 801,
          "column": 2,
          "position": 6588
        }
      }
    },
    {
      "format": "javascript",
      "lines": 458,
      "fragment": "={node.key}\n        title={\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-white\">{node.title}</span>\n            <Tag color={getTypeColor(node.type)}>{node.type}</Tag>\n            <span className=\"text-gray-400 text-xs\">{formatSize(node.size)}</span>\n          </div>\n        }\n        isLeaf={node.isLeaf}\n      >\n        {node.children && renderTreeNodes(node.children)}\n      </TreeNode>\n    ));\n  }, []);\n\n  const renderDataTable = useCallback(() => {\n    if (!Array.isArray(selectedData)) {\n      return <Alert message=\"Table view only available for arrays\" type=\"info\" showIcon />;\n    }\n\n    const columns = getTableColumns(selectedData);\n    const tableData = selectedData.map((item, index) => ({\n      key: index,\n      index,\n      ...item,\n    }));\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        pagination={{ pageSize: 10 }}\n        size=\"small\"\n        className=\"bg-gray-800\"\n        scroll={{ x: 'max-content' }}\n      />\n    );\n  }, [selectedData]);\n\n  const renderDataAnalysis = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white\">\n        Data Analysis\n      </Title>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-400\">{dataStats.totalSize}</div>\n            <div className=\"text-gray-400 text-sm\">Total Size</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-400\">{dataStats.depth}</div>\n            <div className=\"text-gray-400 text-sm\">Max Depth</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-400\">{dataStats.keyCount}</div>\n            <div className=\"text-gray-400 text-sm\">Total Keys</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-400\">{dataStats.arrayCount}</div>\n            <div className=\"text-gray-400 text-sm\">Arrays</div>\n          </div>\n        </Card>\n      </div>\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-3\">\n          Type Distribution\n        </Title>\n        <div className=\"space-y-2\">\n          {Object.entries(dataStats.typeDistribution).map(([type, count]) => (\n            <div key={type} className=\"flex items-center justify-between\">\n              <span className=\"text-gray-300\">{type}</span>\n              <div className=\"flex items-center gap-2\">\n                <Progress\n                  percent={(count / dataStats.keyCount) * 100}\n                  strokeColor={getTypeColor(type)}\n                  showInfo={false}\n                  size=\"small\"\n                  className=\"flex-1\"\n                />\n                <span className=\"text-gray-400 text-sm w-8\">{count}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const content = (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <EyeOutlined className=\"text-blue-400 text-lg\" />\n            <Title level={4} className=\"text-white mb-0\">\n              Data Inspector\n            </Title>\n          </div>\n          <Space>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={isFullscreen ? <CompressOutlined /> : <ExpandOutlined />}\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n            {onClose && (\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-300\"\n              >\n                Close\n              </Button>\n            )}\n          </Space>\n        </div>\n\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div>\n            <Text className=\"text-gray-400\">Node:</Text>\n            <span className=\"text-white ml-1\">{nodeId}</span>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Type:</Text>\n            <Tag color={getTypeColor(type)} className=\"ml-1\">\n              {type}\n            </Tag>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Size:</Text>\n            <span className=\"text-white ml-1\">{formatSize(dataStats.totalSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <Search\n            placeholder=\"Search data...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n            prefix={<SearchOutlined className=\"text-gray-400\" />}\n          />\n\n          <Select value={filterType} onChange={setFilterType} className=\"w-32\">\n            <Option value=\"all\">All Types</Option>\n            <Option value=\"string\">String</Option>\n            <Option value=\"number\">Number</Option>\n            <Option value=\"boolean\">Boolean</Option>\n            <Option value=\"object\">Object</Option>\n            <Option value=\"array\">Array</Option>\n          </Select>\n\n          <Select value={viewMode} onChange={setViewMode} className=\"w-24\">\n            <Option value=\"tree\">Tree</Option>\n            <Option value=\"json\">JSON</Option>\n            <Option value=\"table\">Table</Option>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Text className=\"text-gray-400\">Selected Path:</Text>\n            <Text className=\"text-white font-mono text-sm\">{selectedPath || 'root'}</Text>\n          </div>\n\n          <Space>\n            <Tooltip title=\"Copy Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CopyOutlined />}\n                onClick={handleCopyData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Export Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<DownloadOutlined />}\n                onClick={handleExportData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        <Tabs\n          activeKey={viewMode}\n          onChange={(key) => setViewMode(key as 'tree' | 'json' | 'table')}\n          items={[\n            {\n              key: 'tree',\n              label: 'Tree View',\n              children: (\n                <div className=\"h-96 overflow-auto border border-gray-600 rounded bg-gray-800\">\n                  <Tree\n                    showLine\n                    defaultExpandAll={false}\n                    expandedKeys={expandedKeys}\n                    selectedKeys={selectedPath ? [selectedPath] : []}\n                    onSelect={handleTreeSelect}\n                    onExpand={handleExpand}\n                    className=\"p-4\"\n                  >\n                    {renderTreeNodes(filteredTree)}\n                  </Tree>\n                </div>\n              ),\n            },\n            {\n              key: 'json',\n              label: 'JSON View',\n              children: (\n                <div className=\"h-96 overflow-auto\">\n                  <JsonViewer\n                    data={selectedData}\n                    theme=\"dark\"\n                    collapsed={2}\n                    maxHeight=\"100%\"\n                    enableClipboard\n                  />\n                </div>\n              ),\n            },\n            {\n              key: 'table',\n              label: 'Table View',\n              children: <div className=\"h-96 overflow-auto\">{renderDataTable()}</div>,\n            },\n          ]}\n        />\n\n        <Divider className=\"my-4\" />\n\n        {renderDataAnalysis()}\n      </div>\n    </div>\n  );\n\n  if (isFullscreen) {\n    return (\n      <Modal\n        title=\"Data Inspector - Fullscreen\"\n        open={isFullscreen}\n        onCancel={() => setIsFullscreen(false)}\n        footer={null}\n        width=\"90vw\"\n        style={{ top: 20 }}\n        bodyStyle={{ height: '80vh', padding: 0 }}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};\n\n// Helper functions\n\nfunction convertToTree(data: any, path: string, _key: string): DataNode[] {\n  if (data === null || data === undefined) {\n    return [\n      {\n        key: path || 'root',\n        title: 'null',\n        value: data,\n        type: 'null',\n        size: 0,\n        path: path || 'root',\n        isLeaf: true,\n      },\n    ];\n  }\n\n  if (Array.isArray(data)) {\n    return [\n      {\n        key: path || 'root',\n        title: `Array (${data.length} items)`,\n        value: data,\n        type: 'array',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: data.flatMap((item, index) =>\n          convertToTree(item, `${path}[${index}]`, `[${index}]`)\n        ),\n      },\n    ];\n  }\n\n  if (typeof data === 'object') {\n    const entries = Object.entries(data);\n    return [\n      {\n        key: path || 'root',\n        title: `Object (${entries.length} properties)`,\n        value: data,\n        type: 'object',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: entries.flatMap(([key, value]) =>\n          convertToTree(value, path ? `${path}.${key}` : key, key)\n        ),\n      },\n    ];\n  }\n\n  return [\n    {\n      key: path || 'root',\n      title: String(data),\n      value: data,\n      type: typeof data,\n      size: JSON.stringify(data).length,\n      path: path || 'root',\n      isLeaf: true,\n    },\n  ];\n}\n\nfunction filterTree(nodes: DataNode[], searchTerm: string, filterType: string): DataNode[] {\n  if (!searchTerm && filterType === 'all') return nodes;\n\n  return nodes\n    .filter((node) => {\n      const matchesSearch =\n        !searchTerm ||\n        node.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.path.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesType = filterType === 'all' || node.type === filterType;\n\n      return matchesSearch && matchesType;\n    })\n    .map((node) => ({\n      ...node,\n      children: node.children ? filterTree(node.children, searchTerm, filterType) : undefined,\n    }));\n}\n\nfunction getDataByPath(data: any, path: string): any {\n  if (path === 'root' || !path) return data;\n\n  try {\n    return path.split('.').reduce((obj, key) => {\n      if (key.includes('[') && key.includes(']')) {\n        const arrayKey = key.substring(0, key.indexOf('['));\n        const index = parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')), 10);\n        return obj[arrayKey][index];\n      }\n      return obj[key];\n    }, data);\n  } catch (_error) {\n    return undefined;\n  }\n}\n\nfunction analyzeData(data: any): {\n  totalSize: number;\n  depth: number;\n  keyCount: number;\n  arrayCount: number;\n  typeDistribution: Record<string, number>;\n} {\n  const stats = {\n    totalSize: JSON.stringify(data).length,\n    depth: 0,\n    keyCount: 0,\n    arrayCount: 0,\n    typeDistribution: {} as Record<string, number>,\n  };\n\n  function analyze(obj: any, currentDepth: number = 0) {\n    stats.depth = Math.max(stats.depth, currentDepth);\n\n    if (Array.isArray(obj)) {\n      stats.arrayCount++;\n      stats.typeDistribution.array = (stats.typeDistribution.array || 0) + 1;\n      obj.forEach((item) => analyze(item, currentDepth + 1));\n    } else if (obj !== null && typeof obj === 'object') {\n      stats.typeDistribution.object = (stats.typeDistribution.object || 0) + 1;\n      Object.entries(obj).forEach(([_key, value]) => {\n        stats.keyCount++;\n        analyze(value, currentDepth + 1);\n      });\n    } else {\n      const type = typeof obj;\n      stats.typeDistribution[type] = (stats.typeDistribution[type] || 0) + 1;\n    }\n  }\n\n  analyze(data);\n  return stats;\n}\n\nfunction getTypeColor(type: string): string {\n  switch (type) {\n    case 'string':\n      return 'green';\n    case 'number':\n      return 'blue';\n    case 'boolean':\n      return 'orange';\n    case 'object':\n      return 'purple';\n    case 'array':\n      return 'cyan';\n    case 'null':\n      return 'gray';\n    case 'undefined':\n      return 'red';\n    default:\n      return 'default';\n  }\n}\n\nfunction formatSize(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n}\n\nfunction getTableColumns(data: any[]): any[] {\n  if (data.length === 0) return [];\n\n  const sample = data[0];\n  if (typeof sample !== 'object' || Array.isArray(sample)) {\n    return [\n      { title: 'Index', dataIndex: 'index', key: 'index' },\n      { title: 'Value', dataIndex: '0', key: 'value' },\n    ];\n  }\n\n  return Object.keys(sample).map((key) => ({\n    title: key,\n    dataIndex: key,\n    key,\n    render: (value: any) => {\n      if (typeof value === 'object') {\n        return <JsonViewer data={value} theme=\"dark\" collapsed={1}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx",
        "start": 138,
        "end": 595,
        "startLoc": {
          "line": 138,
          "column": 4,
          "position": 1163
        },
        "endLoc": {
          "line": 595,
          "column": 2,
          "position": 5205
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx",
        "start": 141,
        "end": 598,
        "startLoc": {
          "line": 141,
          "column": 4,
          "position": 1202
        },
        "endLoc": {
          "line": 598,
          "column": 2,
          "position": 5244
        }
      }
    },
    {
      "format": "tsx",
      "lines": 602,
      "fragment": "/**\n * Data Inspector Component\n *\n * Advanced data inspection tool providing:\n * - Hierarchical data visualization\n * - JSONPath navigation\n * - Data type analysis\n * - Size and performance metrics\n * - Export and copy functionality\n * - Search and filtering\n */\n\nimport {\n  CompressOutlined,\n  CopyOutlined,\n  DownloadOutlined,\n  ExpandOutlined,\n  EyeOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Divider,\n  Input,\n  Modal,\n  Progress,\n  Select,\n  Space,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Tree,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport type { DataInspector } from '@/core/types/debugging';\nimport { JsonViewer } from '@/design-system';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { Option } = Select;\nconst { TreeNode } = Tree;\n\ninterface DataInspectorProps {\n  data: any;\n  nodeId: string;\n  type: DataInspector['type'];\n  onClose?: () => void;\n  className?: string;\n}\n\ninterface DataNode {\n  key: string;\n  title: string;\n  value: any;\n  type: string;\n  size: number;\n  path: string;\n  children?: DataNode[];\n  isLeaf?: boolean;\n}\n\nconst DataInspector: React.FC<DataInspectorProps> = ({\n  data,\n  nodeId,\n  type,\n  onClose,\n  className,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPath, setSelectedPath] = useState<string>('');\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<'tree' | 'json' | 'table'>('tree');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // Convert data to tree structure\n  const dataTree = useMemo(() => {\n    return convertToTree(data, '', 'root');\n  }, [data]);\n\n  // Filter tree based on search and type\n  const filteredTree = useMemo(() => {\n    return filterTree(dataTree, searchTerm, filterType);\n  }, [dataTree, searchTerm, filterType]);\n\n  // Get data statistics\n  const dataStats = useMemo(() => {\n    return analyzeData(data);\n  }, [data]);\n\n  // Get selected data\n  const selectedData = useMemo(() => {\n    if (!selectedPath) return data;\n    return getDataByPath(data, selectedPath);\n  }, [data, selectedPath]);\n\n  const handleCopyData = useCallback(async () => {\n    try {\n      const text =\n        typeof selectedData === 'string' ? selectedData : JSON.stringify(selectedData, null, 2);\n      await navigator.clipboard.writeText(text);\n    } catch (_error) {}\n  }, [selectedData]);\n\n  const handleExportData = useCallback(() => {\n    const blob = new Blob([JSON.stringify(selectedData, null, 2)], {\n      type: 'application/json',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `data_${nodeId}_${type}_${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [selectedData, nodeId, type]);\n\n  const handleTreeSelect = useCallback((selectedKeys: React.Key[]) => {\n    if (selectedKeys.length > 0) {\n      setSelectedPath(selectedKeys[0] as string);\n    }\n  }, []);\n\n  const handleExpand = useCallback((expandedKeys: React.Key[]) => {\n    setExpandedKeys(expandedKeys as string[]);\n  }, []);\n\n  const renderTreeNodes = useCallback((nodes: DataNode[]): React.ReactNode => {\n    return nodes.map((node) => (\n      <TreeNode\n        key={node.key}\n        title={\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-white\">{node.title}</span>\n            <Tag color={getTypeColor(node.type)}>{node.type}</Tag>\n            <span className=\"text-gray-400 text-xs\">{formatSize(node.size)}</span>\n          </div>\n        }\n        isLeaf={node.isLeaf}\n      >\n        {node.children && renderTreeNodes(node.children)}\n      </TreeNode>\n    ));\n  }, []);\n\n  const renderDataTable = useCallback(() => {\n    if (!Array.isArray(selectedData)) {\n      return <Alert message=\"Table view only available for arrays\" type=\"info\" showIcon />;\n    }\n\n    const columns = getTableColumns(selectedData);\n    const tableData = selectedData.map((item, index) => ({\n      key: index,\n      index,\n      ...item,\n    }));\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        pagination={{ pageSize: 10 }}\n        size=\"small\"\n        className=\"bg-gray-800\"\n        scroll={{ x: 'max-content' }}\n      />\n    );\n  }, [selectedData]);\n\n  const renderDataAnalysis = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white\">\n        Data Analysis\n      </Title>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-400\">{dataStats.totalSize}</div>\n            <div className=\"text-gray-400 text-sm\">Total Size</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-400\">{dataStats.depth}</div>\n            <div className=\"text-gray-400 text-sm\">Max Depth</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-400\">{dataStats.keyCount}</div>\n            <div className=\"text-gray-400 text-sm\">Total Keys</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-400\">{dataStats.arrayCount}</div>\n            <div className=\"text-gray-400 text-sm\">Arrays</div>\n          </div>\n        </Card>\n      </div>\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-3\">\n          Type Distribution\n        </Title>\n        <div className=\"space-y-2\">\n          {Object.entries(dataStats.typeDistribution).map(([type, count]) => (\n            <div key={type} className=\"flex items-center justify-between\">\n              <span className=\"text-gray-300\">{type}</span>\n              <div className=\"flex items-center gap-2\">\n                <Progress\n                  percent={(count / dataStats.keyCount) * 100}\n                  strokeColor={getTypeColor(type)}\n                  showInfo={false}\n                  size=\"small\"\n                  className=\"flex-1\"\n                />\n                <span className=\"text-gray-400 text-sm w-8\">{count}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const content = (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <EyeOutlined className=\"text-blue-400 text-lg\" />\n            <Title level={4} className=\"text-white mb-0\">\n              Data Inspector\n            </Title>\n          </div>\n          <Space>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={isFullscreen ? <CompressOutlined /> : <ExpandOutlined />}\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n            {onClose && (\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-300\"\n              >\n                Close\n              </Button>\n            )}\n          </Space>\n        </div>\n\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div>\n            <Text className=\"text-gray-400\">Node:</Text>\n            <span className=\"text-white ml-1\">{nodeId}</span>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Type:</Text>\n            <Tag color={getTypeColor(type)} className=\"ml-1\">\n              {type}\n            </Tag>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Size:</Text>\n            <span className=\"text-white ml-1\">{formatSize(dataStats.totalSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <Search\n            placeholder=\"Search data...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n            prefix={<SearchOutlined className=\"text-gray-400\" />}\n          />\n\n          <Select value={filterType} onChange={setFilterType} className=\"w-32\">\n            <Option value=\"all\">All Types</Option>\n            <Option value=\"string\">String</Option>\n            <Option value=\"number\">Number</Option>\n            <Option value=\"boolean\">Boolean</Option>\n            <Option value=\"object\">Object</Option>\n            <Option value=\"array\">Array</Option>\n          </Select>\n\n          <Select value={viewMode} onChange={setViewMode} className=\"w-24\">\n            <Option value=\"tree\">Tree</Option>\n            <Option value=\"json\">JSON</Option>\n            <Option value=\"table\">Table</Option>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Text className=\"text-gray-400\">Selected Path:</Text>\n            <Text className=\"text-white font-mono text-sm\">{selectedPath || 'root'}</Text>\n          </div>\n\n          <Space>\n            <Tooltip title=\"Copy Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CopyOutlined />}\n                onClick={handleCopyData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Export Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<DownloadOutlined />}\n                onClick={handleExportData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        <Tabs\n          activeKey={viewMode}\n          onChange={(key) => setViewMode(key as 'tree' | 'json' | 'table')}\n          items={[\n            {\n              key: 'tree',\n              label: 'Tree View',\n              children: (\n                <div className=\"h-96 overflow-auto border border-gray-600 rounded bg-gray-800\">\n                  <Tree\n                    showLine\n                    defaultExpandAll={false}\n                    expandedKeys={expandedKeys}\n                    selectedKeys={selectedPath ? [selectedPath] : []}\n                    onSelect={handleTreeSelect}\n                    onExpand={handleExpand}\n                    className=\"p-4\"\n                  >\n                    {renderTreeNodes(filteredTree)}\n                  </Tree>\n                </div>\n              ),\n            },\n            {\n              key: 'json',\n              label: 'JSON View',\n              children: (\n                <div className=\"h-96 overflow-auto\">\n                  <JsonViewer\n                    data={selectedData}\n                    theme=\"dark\"\n                    collapsed={2}\n                    maxHeight=\"100%\"\n                    enableClipboard\n                  />\n                </div>\n              ),\n            },\n            {\n              key: 'table',\n              label: 'Table View',\n              children: <div className=\"h-96 overflow-auto\">{renderDataTable()}</div>,\n            },\n          ]}\n        />\n\n        <Divider className=\"my-4\" />\n\n        {renderDataAnalysis()}\n      </div>\n    </div>\n  );\n\n  if (isFullscreen) {\n    return (\n      <Modal\n        title=\"Data Inspector - Fullscreen\"\n        open={isFullscreen}\n        onCancel={() => setIsFullscreen(false)}\n        footer={null}\n        width=\"90vw\"\n        style={{ top: 20 }}\n        bodyStyle={{ height: '80vh', padding: 0 }}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};\n\n// Helper functions\n\nfunction convertToTree(data: any, path: string, _key: string): DataNode[] {\n  if (data === null || data === undefined) {\n    return [\n      {\n        key: path || 'root',\n        title: 'null',\n        value: data,\n        type: 'null',\n        size: 0,\n        path: path || 'root',\n        isLeaf: true,\n      },\n    ];\n  }\n\n  if (Array.isArray(data)) {\n    return [\n      {\n        key: path || 'root',\n        title: `Array (${data.length} items)`,\n        value: data,\n        type: 'array',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: data.flatMap((item, index) =>\n          convertToTree(item, `${path}[${index}]`, `[${index}]`)\n        ),\n      },\n    ];\n  }\n\n  if (typeof data === 'object') {\n    const entries = Object.entries(data);\n    return [\n      {\n        key: path || 'root',\n        title: `Object (${entries.length} properties)`,\n        value: data,\n        type: 'object',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: entries.flatMap(([key, value]) =>\n          convertToTree(value, path ? `${path}.${key}` : key, key)\n        ),\n      },\n    ];\n  }\n\n  return [\n    {\n      key: path || 'root',\n      title: String(data),\n      value: data,\n      type: typeof data,\n      size: JSON.stringify(data).length,\n      path: path || 'root',\n      isLeaf: true,\n    },\n  ];\n}\n\nfunction filterTree(nodes: DataNode[], searchTerm: string, filterType: string): DataNode[] {\n  if (!searchTerm && filterType === 'all') return nodes;\n\n  return nodes\n    .filter((node) => {\n      const matchesSearch =\n        !searchTerm ||\n        node.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.path.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesType = filterType === 'all' || node.type === filterType;\n\n      return matchesSearch && matchesType;\n    })\n    .map((node) => ({\n      ...node,\n      children: node.children ? filterTree(node.children, searchTerm, filterType) : undefined,\n    }));\n}\n\nfunction getDataByPath(data: any, path: string): any {\n  if (path === 'root' || !path) return data;\n\n  try {\n    return path.split('.').reduce((obj, key) => {\n      if (key.includes('[') && key.includes(']')) {\n        const arrayKey = key.substring(0, key.indexOf('['));\n        const index = parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')), 10);\n        return obj[arrayKey][index];\n      }\n      return obj[key];\n    }, data);\n  } catch (_error) {\n    return undefined;\n  }\n}\n\nfunction analyzeData(data: any): {\n  totalSize: number;\n  depth: number;\n  keyCount: number;\n  arrayCount: number;\n  typeDistribution: Record<string, number>;\n} {\n  const stats = {\n    totalSize: JSON.stringify(data).length,\n    depth: 0,\n    keyCount: 0,\n    arrayCount: 0,\n    typeDistribution: {} as Record<string, number>,\n  };\n\n  function analyze(obj: any, currentDepth: number = 0) {\n    stats.depth = Math.max(stats.depth, currentDepth);\n\n    if (Array.isArray(obj)) {\n      stats.arrayCount++;\n      stats.typeDistribution.array = (stats.typeDistribution.array || 0) + 1;\n      obj.forEach((item) => analyze(item, currentDepth + 1));\n    } else if (obj !== null && typeof obj === 'object') {\n      stats.typeDistribution.object = (stats.typeDistribution.object || 0) + 1;\n      Object.entries(obj).forEach(([_key, value]) => {\n        stats.keyCount++;\n        analyze(value, currentDepth + 1);\n      });\n    } else {\n      const type = typeof obj;\n      stats.typeDistribution[type] = (stats.typeDistribution[type] || 0) + 1;\n    }\n  }\n\n  analyze(data);\n  return stats;\n}\n\nfunction getTypeColor(type: string): string {\n  switch (type) {\n    case 'string':\n      return 'green';\n    case 'number':\n      return 'blue';\n    case 'boolean':\n      return 'orange';\n    case 'object':\n      return 'purple';\n    case 'array':\n      return 'cyan';\n    case 'null':\n      return 'gray';\n    case 'undefined':\n      return 'red';\n    default:\n      return 'default';\n  }\n}\n\nfunction formatSize(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n}\n\nfunction getTableColumns(data: any[]): any[] {\n  if (data.length === 0) return [];\n\n  const sample = data[0];\n  if (typeof sample !== 'object' || Array.isArray(sample)) {\n    return [\n      { title: 'Index', dataIndex: 'index', key: 'index' },\n      { title: 'Value', dataIndex: '0', key: 'value' },\n    ];\n  }\n\n  return Object.keys(sample).map((key) => ({\n    title: key,\n    dataIndex: key,\n    key,\n    render: (value: any) => {\n      if (typeof value === 'object') {\n        return <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"100px\" />;\n      }\n      return String(value);\n    },\n  }));\n}\n\nexport default DataInspector;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx",
        "start": 1,
        "end": 602,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 602,
          "column": 2,
          "position": 5246
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx",
        "start": 4,
        "end": 605,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 605,
          "column": 2,
          "position": 5285
        }
      }
    },
    {
      "format": "javascript",
      "lines": 93,
      "fragment": "={bringToFront ? 'bring-to-front' : ''}\n      style={{ zIndex: bringToFront ? 1 : 0 }}\n    >\n      {/* Arrow marker definition */}\n      <defs>\n        <marker\n          id={`arrowhead-${id}`}\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={delayedHovered || isHovered ? '#3b82f6' : getEdgeColor()}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <React.Fragment key={`${id}-${index}`}>\n          {/* Invisible wider path for easier hover detection */}\n          <path\n            d={segment[0]}\n            style={{\n              stroke: 'transparent',\n              strokeWidth: 40,\n              fill: 'none',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          />\n\n          {/* Visible edge path */}\n          <path\n            d={segment[0]}\n            style={getEdgeStyle()}\n            className={`react-flow__edge-path ${isHovered || delayedHovered ? 'hovered' : ''}`}\n            markerEnd={`url(#arrowhead-${id})`}\n            pointerEvents=\"none\"\n          />\n        </React.Fragment>\n      ))}\n\n      <EdgeLabelRenderer>\n        {/* Toolbar with delete button */}\n        {renderToolbar && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1]}px)`,\n              pointerEvents: 'all',\n              zIndex: delayedHovered || isHovered ? 1 : 0,\n            }}\n            className=\"nodrag nopan\"\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <button\n              onMouseDown={handleDelete}\n              className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg transition-all duration-200 border-2 border-white hover:scale-110\"\n              title=\"Delete connection\"\n              style={{\n                cursor: 'pointer',\n                fontSize: '20px',\n                fontWeight: 'bold',\n              }}\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        {/* Connection status indicator */}\n        {status && status !== 'success' && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1] - (isConnectorStraight ? 20 : 0)}px)`,\n              pointerEvents: 'none',\n              zIndex: 999,\n            }}\n          >\n            <div\n              className={`\n              w-2 h-2 rounded-full\n              ${status === 'error' ? 'bg-red-500' : ''}\n              ${status === 'running' ? 'bg-yellow-500 animate-pulse' : ''}\n              ${status === 'pinned' ? 'bg-purple-500' : ''}\n            `}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx",
        "start": 198,
        "end": 290,
        "startLoc": {
          "line": 198,
          "column": 10,
          "position": 1601
        },
        "endLoc": {
          "line": 290,
          "column": 2,
          "position": 2226
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 207,
        "end": 299,
        "startLoc": {
          "line": 207,
          "column": 10,
          "position": 1718
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2343
        }
      }
    },
    {
      "format": "tsx",
      "lines": 296,
      "fragment": ";\n\n// Edge rendering constants\nconst EDGE_PADDING_BOTTOM = 80;\nconst EDGE_PADDING_X = 10;\nconst EDGE_BORDER_RADIUS = 6;\nconst HANDLE_SIZE = 20;\n\n// Check if connection is backwards (target is to the left of source)\nconst isRightOfSourceHandle = (sourceX: number, targetX: number) => sourceX - HANDLE_SIZE > targetX;\n\n// Get edge render data with path selection logic\nconst getEdgeRenderData = (props: {\n  sourceX: number;\n  sourceY: number;\n  sourcePosition: Position;\n  targetX: number;\n  targetY: number;\n  targetPosition: Position;\n  connectionType?: ConnectionTypeValue;\n}) => {\n  const {\n    targetX,\n    targetY,\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetPosition,\n    connectionType = ConnectionType.Main,\n  } = props;\n  const isConnectorStraight = sourceY === targetY;\n\n  // Use Bezier path for normal connections or non-main connections\n  if (!isRightOfSourceHandle(sourceX, targetX) || connectionType !== ConnectionType.Main) {\n    const segment = getBezierPath(props);\n    return {\n      segments: [segment],\n      labelPosition: [segment[1], segment[2]],\n      isConnectorStraight,\n    };\n  }\n\n  // Connection is backwards and the source is on the right side\n  // Use smooth step path to avoid overlapping the source node\n  const firstSegmentTargetX = (sourceX + targetX) / 2;\n  const firstSegmentTargetY = sourceY + EDGE_PADDING_BOTTOM;\n  const firstSegment = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    targetX: firstSegmentTargetX,\n    targetY: firstSegmentTargetY,\n    sourcePosition,\n    targetPosition: Position.Right,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  const secondSegment = getSmoothStepPath({\n    sourceX: firstSegmentTargetX,\n    sourceY: firstSegmentTargetY,\n    targetX,\n    targetY,\n    sourcePosition: Position.Left,\n    targetPosition,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  return {\n    segments: [firstSegment, secondSegment],\n    labelPosition: [firstSegmentTargetX, firstSegmentTargetY],\n    isConnectorStraight,\n  };\n};\n\nconst CustomEdge: React.FC<CustomEdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  selected = false,\n  hovered = false,\n  bringToFront = false,\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [delayedHovered, setDelayedHovered] = useState(hovered);\n  const delayedHoveredTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const visibilityTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connectionType = data?.connectionType || ConnectionType.Main;\n  const status = data?.status;\n  const isMainConnection = connectionType === ConnectionType.Main;\n\n  // Implement visibility delay to prevent flickering\n  useEffect(() => {\n    visibilityTimeoutRef.current = setTimeout(() => {\n      setIsVisible(true);\n    }, 30);\n\n    return () => {\n      if (visibilityTimeoutRef.current) {\n        clearTimeout(visibilityTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Implement delayed hover state\n  useEffect(() => {\n    if (hovered) {\n      if (delayedHoveredTimeoutRef.current) {\n        clearTimeout(delayedHoveredTimeoutRef.current);\n      }\n      setDelayedHovered(true);\n    } else {\n      delayedHoveredTimeoutRef.current = setTimeout(() => {\n        setDelayedHovered(false);\n      }, 100);\n    }\n\n    return () => {\n      if (delayedHoveredTimeoutRef.current) {\n        clearTimeout(delayedHoveredTimeoutRef.current);\n      }\n    };\n  }, [hovered]);\n\n  // Calculate edge render data\n  const renderData = useMemo(\n    () =>\n      getEdgeRenderData({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        connectionType,\n      }),\n    [sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition, connectionType]\n  );\n\n  const { segments, labelPosition, isConnectorStraight } = renderData;\n\n  // Dynamic edge styling\n  const getEdgeColor = () => {\n    if (status === 'success') return '#10b981'; // green\n    if (status === 'error') return '#ef4444'; // red\n    if (status === 'running') return '#f59e0b'; // yellow\n    if (status === 'pinned') return '#8b5cf6'; // purple\n    if (!isMainConnection) return '#6b7280'; // gray for supplemental\n    if (selected) return '#1f2937'; // dark gray for selected\n    return '#E2DFD0'; // default dark gray\n  };\n\n  const getEdgeStyle = () => ({\n    ...style,\n    ...(isMainConnection ? {} : { strokeDasharray: '8,8' }),\n    strokeWidth: delayedHovered || isHovered ? 2 : 1,\n    stroke: delayedHovered || isHovered ? '#3b82f6' : getEdgeColor(), // blue on hover\n    fill: 'none',\n    transition: 'stroke 0.3s ease, opacity 0.3s ease, stroke-width 0.3s ease',\n    opacity: isVisible ? 1 : 0,\n  });\n\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true);\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false);\n  }, []);\n\n  const handleDelete = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation();\n      event.preventDefault();\n      if (data?.onDelete) {\n        data.onDelete(id);\n      }\n    },\n    [id, data]\n  );\n\n  const renderToolbar = (selected || delayedHovered || isHovered) && data?.onDelete;\n\n  return (\n    <g\n      data-testid=\"edge\"\n      className={bringToFront ? 'bring-to-front' : ''}\n      style={{ zIndex: bringToFront ? 1 : 0 }}\n    >\n      {/* Arrow marker definition */}\n      <defs>\n        <marker\n          id={`arrowhead-${id}`}\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={delayedHovered || isHovered ? '#3b82f6' : getEdgeColor()}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <React.Fragment key={`${id}-${index}`}>\n          {/* Invisible wider path for easier hover detection */}\n          <path\n            d={segment[0]}\n            style={{\n              stroke: 'transparent',\n              strokeWidth: 40,\n              fill: 'none',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          />\n\n          {/* Visible edge path */}\n          <path\n            d={segment[0]}\n            style={getEdgeStyle()}\n            className={`react-flow__edge-path ${isHovered || delayedHovered ? 'hovered' : ''}`}\n            markerEnd={`url(#arrowhead-${id})`}\n            pointerEvents=\"none\"\n          />\n        </React.Fragment>\n      ))}\n\n      <EdgeLabelRenderer>\n        {/* Toolbar with delete button */}\n        {renderToolbar && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1]}px)`,\n              pointerEvents: 'all',\n              zIndex: delayedHovered || isHovered ? 1 : 0,\n            }}\n            className=\"nodrag nopan\"\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <button\n              onMouseDown={handleDelete}\n              className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg transition-all duration-200 border-2 border-white hover:scale-110\"\n              title=\"Delete connection\"\n              style={{\n                cursor: 'pointer',\n                fontSize: '20px',\n                fontWeight: 'bold',\n              }}\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        {/* Connection status indicator */}\n        {status && status !== 'success' && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1] - (isConnectorStraight ? 20 : 0)}px)`,\n              pointerEvents: 'none',\n              zIndex: 999,\n            }}\n          >\n            <div\n              className={`\n              w-2 h-2 rounded-full\n              ${status === 'error' ? 'bg-red-500' : ''}\n              ${status === 'running' ? 'bg-yellow-500 animate-pulse' : ''}\n              ${status === 'pinned' ? 'bg-purple-500' : ''}\n            `}\n            />\n          </div>\n        )}\n      </EdgeLabelRenderer>\n    </g>\n  );\n};\n\nexport default CustomEdge;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx",
        "start": 4,
        "end": 299,
        "startLoc": {
          "line": 4,
          "column": 20,
          "position": 73
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2262
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 13,
        "end": 308,
        "startLoc": {
          "line": 13,
          "column": 19,
          "position": 190
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2379
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": ") {\n      case 'gmail':\n        return '📧';\n      case 'google':\n        return '🔍';\n      case 'openaiApi':\n        return '🤖';\n      case 'anthropicApi':\n        return '🧠';\n      case 'googleAiApi':\n        return '🔷';\n      case 'azureOpenAiApi':\n        return '☁️';\n      case 'awsBedrockApi':\n        return '🟠';\n      default:\n        return '🔑';\n    }\n  };\n\n  // Tab content components",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx",
        "start": 76,
        "end": 96,
        "startLoc": {
          "line": 76,
          "column": 15,
          "position": 493
        },
        "endLoc": {
          "line": 96,
          "column": 26,
          "position": 600
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 285,
        "end": 305,
        "startLoc": {
          "line": 285,
          "column": 5,
          "position": 2414
        },
        "endLoc": {
          "line": 305,
          "column": 7,
          "position": 2521
        }
      }
    },
    {
      "format": "javascript",
      "lines": 211,
      "fragment": "={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Title level={4} className=\"text-white mb-0\">\n            Container Nodes\n          </Title>\n          <Tooltip title=\"Add custom container\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                // Open custom container creation\n              }}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Tooltip>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced workflow structures for complex automation patterns\n        </Text>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <Collapse ghost defaultActiveKey={['containers']} className=\"bg-transparent\">\n          <Panel\n            header={\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-white font-medium\">Container Types</span>\n                <Badge count={containerTemplates.length} size=\"small\" />\n              </div>\n            }\n            key=\"containers\"\n            className=\"bg-gray-800\"\n          >\n            <div className=\"space-y-2\">\n              {containerTemplates.map((template) => (\n                <Card\n                  key={template.id}\n                  size=\"small\"\n                  className=\"bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors cursor-pointer\"\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, template)}\n                  onClick={() => openCreateModal(template)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center text-lg\"\n                      style={{ backgroundColor: `${template.color}20` }}\n                    >\n                      {template.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-white font-medium text-sm\">{template.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{template.description}</div>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Tooltip title=\"Drag to canvas\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<ReloadOutlined />}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                      <Tooltip title=\"Create directly\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<PlusOutlined />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            openCreateModal(template);\n                          }}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div className=\"space-y-2\">\n          <Title level={5} className=\"text-white mb-2\">\n            Quick Actions\n          </Title>\n\n          <Space direction=\"vertical\" className=\"w-full\">\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple loop container\n                const container = createLoopContainer(`loop_${Date.now()}`, 'Quick Loop', {\n                  x: 200,\n                  y: 200,\n                });\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ReloadOutlined className=\"text-blue-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Loop</div>\n                  <div className=\"text-gray-400 text-xs\">10 iterations, 1s delay</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple parallel container\n                const container = createParallelContainer(\n                  `parallel_${Date.now()}`,\n                  'Quick Parallel',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ThunderboltOutlined className=\"text-green-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Parallel</div>\n                  <div className=\"text-gray-400 text-xs\">5 concurrent executions</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple conditional container\n                const container = createConditionalContainer(\n                  `conditional_${Date.now()}`,\n                  'Quick Conditional',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <QuestionCircleOutlined className=\"text-yellow-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Conditional</div>\n                  <div className=\"text-gray-400 text-xs\">Basic if-then logic</div>\n                </div>\n              </div>\n            </Button>\n          </Space>\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-700\">\n          <div className=\"flex items-center gap-2 text-gray-400 text-xs\">\n            <InfoCircleOutlined />\n            <span>Drag containers to canvas or click to create directly</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Container Modal */}\n      <Modal\n        title={`Create ${selectedTemplate?.name || 'Container'}`}\n        open={isCreateModalOpen}\n        onCancel={() => {\n          setIsCreateModalOpen(false);\n          setSelectedTemplate(null);\n        }}\n        onOk={() => createForm.submit()}\n        width={500}\n      >\n        <Form form={createForm} layout=\"vertical\" onFinish={handleCreateContainer}>\n          <Form.Item\n            name=\"name\"\n            label=\"Container Name\"\n            rules={[{ required: true, message: 'Please enter a container name' }]}\n          >\n            <Input placeholder=\"Enter container name\" />\n          </Form.Item>\n\n          {selectedTemplate && (\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-lg\">{selectedTemplate.icon}</span>\n                <span className=\"font-medium\">{selectedTemplate.name}</span>\n              </div>\n              <div className=\"text-gray-600 text-sm\">{selectedTemplate.description}</div>\n            </div>\n          )}\n\n          {selectedTemplate?.id === 'loop' && (\n            <>\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\" initialValue={10}>\n                <InputNumber min={1} max={1000} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\" initialValue={1000}>\n                <InputNumber min={0} max={10000} className=\"w-full\" />\n              </Form.Item>\n            </>\n          )}\n\n          {selectedTemplate?.id === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\" initialValue={5}>\n                <InputNumber min={1} max={20}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx",
        "start": 147,
        "end": 357,
        "startLoc": {
          "line": 147,
          "column": 10,
          "position": 955
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2677
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 149,
        "end": 359,
        "startLoc": {
          "line": 149,
          "column": 10,
          "position": 981
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2703
        }
      }
    },
    {
      "format": "tsx",
      "lines": 374,
      "fragment": "/**\n * Container Node Panel\n *\n * Side panel for adding and managing container nodes in the workflow editor.\n * Provides drag-and-drop functionality for creating loop, parallel, conditional,\n * try-catch, and batch containers.\n */\n\nimport {\n  InfoCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  Collapse,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport {\n  type ContainerNodeConfig,\n  createBatchContainer,\n  createConditionalContainer,\n  createLoopContainer,\n  createParallelContainer,\n  createTryCatchContainer,\n} from '@/core/types/containerNodes';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Panel } = Collapse;\n\ninterface ContainerNodePanelProps {\n  onAddContainer: (container: ContainerNodeConfig) => void;\n  className?: string;\n}\n\ninterface ContainerTemplate {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  createFunction: (\n    id: string,\n    name: string,\n    position: { x: number; y: number }\n  ) => ContainerNodeConfig;\n}\n\nconst ContainerNodePanel: React.FC<ContainerNodePanelProps> = ({ onAddContainer, className }) => {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<ContainerTemplate | null>(null);\n  const [createForm] = Form.useForm();\n\n  const containerTemplates: ContainerTemplate[] = [\n    {\n      id: 'loop',\n      name: 'Loop Container',\n      description: 'Execute child nodes repeatedly based on conditions',\n      icon: '🔄',\n      color: '#3b82f6',\n      createFunction: createLoopContainer,\n    },\n    {\n      id: 'parallel',\n      name: 'Parallel Container',\n      description: 'Execute child nodes simultaneously with concurrency control',\n      icon: '⚡',\n      color: '#22c55e',\n      createFunction: createParallelContainer,\n    },\n    {\n      id: 'conditional',\n      name: 'Conditional Container',\n      description: 'Execute child nodes based on conditional logic',\n      icon: '❓',\n      color: '#f59e0b',\n      createFunction: createConditionalContainer,\n    },\n    {\n      id: 'try-catch',\n      name: 'Try-Catch Container',\n      description: 'Handle errors and retry logic for child nodes',\n      icon: '🛡️',\n      color: '#ef4444',\n      createFunction: createTryCatchContainer,\n    },\n    {\n      id: 'batch',\n      name: 'Batch Container',\n      description: 'Process data in batches with size and delay controls',\n      icon: '📦',\n      color: '#a855f7',\n      createFunction: createBatchContainer,\n    },\n  ];\n\n  const handleDragStart = (event: React.DragEvent, template: ContainerTemplate) => {\n    event.dataTransfer.setData(\n      'application/reactflow',\n      JSON.stringify({\n        type: 'container',\n        template: template.id,\n        name: template.name,\n      })\n    );\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleCreateContainer = (values: any) => {\n    if (!selectedTemplate) return;\n\n    const container = selectedTemplate.createFunction(\n      `container_${Date.now()}`,\n      values.name,\n      { x: 100, y: 100 } // Default position\n    );\n\n    onAddContainer(container);\n    setIsCreateModalOpen(false);\n    createForm.resetFields();\n    setSelectedTemplate(null);\n  };\n\n  const openCreateModal = (template: ContainerTemplate) => {\n    setSelectedTemplate(template);\n    setIsCreateModalOpen(true);\n    createForm.setFieldsValue({\n      name: template.name,\n    });\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Title level={4} className=\"text-white mb-0\">\n            Container Nodes\n          </Title>\n          <Tooltip title=\"Add custom container\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                // Open custom container creation\n              }}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Tooltip>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced workflow structures for complex automation patterns\n        </Text>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <Collapse ghost defaultActiveKey={['containers']} className=\"bg-transparent\">\n          <Panel\n            header={\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-white font-medium\">Container Types</span>\n                <Badge count={containerTemplates.length} size=\"small\" />\n              </div>\n            }\n            key=\"containers\"\n            className=\"bg-gray-800\"\n          >\n            <div className=\"space-y-2\">\n              {containerTemplates.map((template) => (\n                <Card\n                  key={template.id}\n                  size=\"small\"\n                  className=\"bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors cursor-pointer\"\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, template)}\n                  onClick={() => openCreateModal(template)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center text-lg\"\n                      style={{ backgroundColor: `${template.color}20` }}\n                    >\n                      {template.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-white font-medium text-sm\">{template.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{template.description}</div>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Tooltip title=\"Drag to canvas\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<ReloadOutlined />}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                      <Tooltip title=\"Create directly\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<PlusOutlined />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            openCreateModal(template);\n                          }}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div className=\"space-y-2\">\n          <Title level={5} className=\"text-white mb-2\">\n            Quick Actions\n          </Title>\n\n          <Space direction=\"vertical\" className=\"w-full\">\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple loop container\n                const container = createLoopContainer(`loop_${Date.now()}`, 'Quick Loop', {\n                  x: 200,\n                  y: 200,\n                });\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ReloadOutlined className=\"text-blue-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Loop</div>\n                  <div className=\"text-gray-400 text-xs\">10 iterations, 1s delay</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple parallel container\n                const container = createParallelContainer(\n                  `parallel_${Date.now()}`,\n                  'Quick Parallel',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ThunderboltOutlined className=\"text-green-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Parallel</div>\n                  <div className=\"text-gray-400 text-xs\">5 concurrent executions</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple conditional container\n                const container = createConditionalContainer(\n                  `conditional_${Date.now()}`,\n                  'Quick Conditional',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <QuestionCircleOutlined className=\"text-yellow-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Conditional</div>\n                  <div className=\"text-gray-400 text-xs\">Basic if-then logic</div>\n                </div>\n              </div>\n            </Button>\n          </Space>\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-700\">\n          <div className=\"flex items-center gap-2 text-gray-400 text-xs\">\n            <InfoCircleOutlined />\n            <span>Drag containers to canvas or click to create directly</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Container Modal */}\n      <Modal\n        title={`Create ${selectedTemplate?.name || 'Container'}`}\n        open={isCreateModalOpen}\n        onCancel={() => {\n          setIsCreateModalOpen(false);\n          setSelectedTemplate(null);\n        }}\n        onOk={() => createForm.submit()}\n        width={500}\n      >\n        <Form form={createForm} layout=\"vertical\" onFinish={handleCreateContainer}>\n          <Form.Item\n            name=\"name\"\n            label=\"Container Name\"\n            rules={[{ required: true, message: 'Please enter a container name' }]}\n          >\n            <Input placeholder=\"Enter container name\" />\n          </Form.Item>\n\n          {selectedTemplate && (\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-lg\">{selectedTemplate.icon}</span>\n                <span className=\"font-medium\">{selectedTemplate.name}</span>\n              </div>\n              <div className=\"text-gray-600 text-sm\">{selectedTemplate.description}</div>\n            </div>\n          )}\n\n          {selectedTemplate?.id === 'loop' && (\n            <>\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\" initialValue={10}>\n                <InputNumber min={1} max={1000} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\" initialValue={1000}>\n                <InputNumber min={0} max={10000} className=\"w-full\" />\n              </Form.Item>\n            </>\n          )}\n\n          {selectedTemplate?.id === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\" initialValue={5}>\n                <InputNumber min={1} max={20} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\" initialValue=\"all\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ContainerNodePanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx",
        "start": 1,
        "end": 374,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 374,
          "column": 2,
          "position": 2824
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 3,
        "end": 376,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 376,
          "column": 2,
          "position": 2850
        }
      }
    },
    {
      "format": "tsx",
      "lines": 64,
      "fragment": "= (props: {\n  sourceX: number;\n  sourceY: number;\n  sourcePosition: Position;\n  targetX: number;\n  targetY: number;\n  targetPosition: Position;\n  connectionType?: ConnectionTypeValue;\n}) => {\n  const {\n    targetX,\n    targetY,\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetPosition,\n    connectionType = ConnectionType.Main,\n  } = props;\n  const isConnectorStraight = sourceY === targetY;\n\n  // Use Bezier path for normal connections or non-main connections\n  if (!isRightOfSourceHandle(sourceX, targetX) || connectionType !== ConnectionType.Main) {\n    const segment = getBezierPath(props);\n    return {\n      segments: [segment],\n      labelPosition: [segment[1], segment[2]],\n      isConnectorStraight,\n    };\n  }\n\n  // Connection is backwards and the source is on the right side\n  // Use smooth step path to avoid overlapping the source node\n  const firstSegmentTargetX = (sourceX + targetX) / 2;\n  const firstSegmentTargetY = sourceY + EDGE_PADDING_BOTTOM;\n  const firstSegment = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    targetX: firstSegmentTargetX,\n    targetY: firstSegmentTargetY,\n    sourcePosition,\n    targetPosition: Position.Right,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  const secondSegment = getSmoothStepPath({\n    sourceX: firstSegmentTargetX,\n    sourceY: firstSegmentTargetY,\n    targetX,\n    targetY,\n    sourcePosition: Position.Left,\n    targetPosition,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  return {\n    segments: [firstSegment, secondSegment],\n    labelPosition: [firstSegmentTargetX, firstSegmentTargetY],\n    isConnectorStraight,\n  };\n};\n\nconst ConnectionLine",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx",
        "start": 28,
        "end": 91,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 230
        },
        "endLoc": {
          "line": 91,
          "column": 15,
          "position": 658
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 25,
        "end": 88,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 273
        },
        "endLoc": {
          "line": 88,
          "column": 11,
          "position": 701
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={isMainConnection ? '#374151' : '#6b7280'}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <path",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx",
        "start": 146,
        "end": 163,
        "startLoc": {
          "line": 146,
          "column": 2,
          "position": 1077
        },
        "endLoc": {
          "line": 163,
          "column": 5,
          "position": 1177
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 213,
        "end": 230,
        "startLoc": {
          "line": 213,
          "column": 2,
          "position": 1773
        },
        "endLoc": {
          "line": 230,
          "column": 15,
          "position": 1877
        }
      }
    },
    {
      "format": "javascript",
      "lines": 389,
      "fragment": "={form}\n          layout=\"vertical\"\n          onFinish={handleCreateBranch}\n          initialValues={{\n            logicalOperator: 'AND',\n            defaultBranch: false,\n            priority: 1,\n            conditions: [],\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Branch Name\"\n            rules={[{ required: true, message: 'Please enter a branch name' }]}\n          >\n            <Input placeholder=\"Success path\" />\n          </Form.Item>\n\n          <Form.Item name=\"description\" label=\"Description\">\n            <TextArea placeholder=\"Handles successful API responses\" rows={2} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"sourceNodeId\"\n            label=\"Source Node\"\n            rules={[{ required: true, message: 'Please select a source node' }]}\n          >\n            <Select placeholder=\"Select node to branch from\">\n              {nodes.map((node) => (\n                <Option key={node.id} value={node.id}>\n                  {node.parameters?.name || node.name || node.id}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item name=\"logicalOperator\" label=\"Condition Logic\">\n            <Radio.Group>\n              <Radio value=\"AND\">ALL conditions must be true (AND)</Radio>\n              <Radio value=\"OR\">ANY condition must be true (OR)</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Divider>Conditions</Divider>\n\n          <Form.Item dependencies={['conditions']} noStyle>\n            {({ getFieldValue }) => {\n              const conditions: BranchCondition[] = getFieldValue('conditions') || [];\n              return (\n                <div className=\"space-y-2\">\n                  {conditions.map((condition) => (\n                    <Card key={condition.id} size=\"small\" className=\"border-l-4 border-l-blue-500\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <Space direction=\"vertical\" size=\"small\">\n                            <Text strong>{condition.field}</Text>\n                            <Tag color=\"blue\">{condition.operator}</Tag>\n                            <Text code>{JSON.stringify(condition.value)}</Text>\n                            {condition.negate && <Tag color=\"orange\">NEGATED</Tag>}\n                          </Space>\n                        </div>\n                        <Button\n                          type=\"link\"\n                          danger\n                          icon={<DeleteOutlined />}\n                          onClick={() => handleRemoveCondition(condition.id)}\n                        />\n                      </div>\n                    </Card>\n                  ))}\n                  {conditions.length === 0 && (\n                    <Alert\n                      message=\"No conditions defined\"\n                      description=\"Add conditions to control when this branch should be taken\"\n                      type=\"info\"\n                      showIcon\n                    />\n                  )}\n                </div>\n              );\n            }}\n          </Form.Item>\n\n          <Card title=\"Add Condition\" size=\"small\" className=\"mt-4\">\n            <Form form={conditionForm} layout=\"vertical\" onFinish={handleAddCondition}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"field\" label=\"Field Path\" rules={[{ required: true }]}>\n                    <Input placeholder=\"data.status\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"dataType\" label=\"Data Type\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"string\">String</Option>\n                      <Option value=\"number\">Number</Option>\n                      <Option value=\"boolean\">Boolean</Option>\n                      <Option value=\"date\">Date</Option>\n                      <Option value=\"array\">Array</Option>\n                      <Option value=\"object\">Object</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"operator\" label=\"Operator\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"equals\">Equals (=)</Option>\n                      <Option value=\"not_equals\">Not Equals (≠)</Option>\n                      <Option value=\"greater_than\">Greater Than (&gt;)</Option>\n                      <Option value=\"less_than\">Less Than (&lt;)</Option>\n                      <Option value=\"greater_equal\">Greater Equal (≥)</Option>\n                      <Option value=\"less_equal\">Less Equal (≤)</Option>\n                      <Option value=\"contains\">Contains</Option>\n                      <Option value=\"starts_with\">Starts With</Option>\n                      <Option value=\"ends_with\">Ends With</Option>\n                      <Option value=\"regex\">Regex Match</Option>\n                      <Option value=\"in_array\">In Array</Option>\n                      <Option value=\"is_empty\">Is Empty</Option>\n                      <Option value=\"is_not_empty\">Is Not Empty</Option>\n                      <Option value=\"exists\">Exists</Option>\n                      <Option value=\"not_exists\">Not Exists</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}>\n                    <Input placeholder=\"success\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"negate\" valuePropName=\"checked\">\n                    <Switch checkedChildren=\"Negate\" unCheckedChildren=\"Normal\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"caseSensitive\" valuePropName=\"checked\" initialValue={true}>\n                    <Switch checkedChildren=\"Case Sensitive\" unCheckedChildren=\"Ignore Case\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Form.Item>\n                <Button type=\"dashed\" htmlType=\"submit\" icon={<PlusOutlined />} block>\n                  Add Condition\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n\n          <Divider>Advanced Settings</Divider>\n\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"priority\" label=\"Priority\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"defaultBranch\" label=\"Default Branch\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                {editingBranch ? 'Update Branch' : 'Create Branch'}\n              </Button>\n              <Button\n                onClick={() => {\n                  form.resetFields();\n                  setEditingBranch(null);\n                }}\n              >\n                Cancel\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Card>\n\n      <Card title=\"Existing Branches\" size=\"small\">\n        <List\n          dataSource={branches}\n          renderItem={(branch) => (\n            <List.Item\n              actions={[\n                <Button\n                  type=\"link\"\n                  icon={<PlayCircleOutlined />}\n                  onClick={() => {\n                    setSelectedBranch(branch);\n                    setTestModalVisible(true);\n                  }}\n                >\n                  Test\n                </Button>,\n                <Button\n                  type=\"link\"\n                  icon={<EditOutlined />}\n                  onClick={() => {\n                    setEditingBranch(branch.id);\n                    form.setFieldsValue(branch);\n                  }}\n                />,\n                <Button\n                  type=\"link\"\n                  danger\n                  icon={<DeleteOutlined />}\n                  onClick={() => {\n                    setBranches((prev) => prev.filter((b) => b.id !== branch.id));\n                    message.success('Branch deleted');\n                  }}\n                />,\n              ]}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <BranchesOutlined />\n                    {branch.name}\n                    <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n                      {branch.logicalOperator}\n                    </Tag>\n                    {branch.defaultBranch && <Tag color=\"gold\">DEFAULT</Tag>}\n                  </Space>\n                }\n                description={\n                  <Space direction=\"vertical\" size=\"small\">\n                    {branch.description}\n                    <Text type=\"secondary\">\n                      {branch.conditions.length} condition(s) • Priority: {branch.priority}\n                    </Text>\n                    <div>\n                      {branch.conditions.map((condition) => (\n                        <Tag key={condition.id} color=\"geekblue\" style={{ marginBottom: 4 }}>\n                          {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n                        </Tag>\n                      ))}\n                    </div>\n                  </Space>\n                }\n              />\n            </List.Item>\n          )}\n          locale={{ emptyText: 'No branches configured' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderExpressionBuilder = () => (\n    <Card title=\"JavaScript Expression Builder\" size=\"small\">\n      <Alert\n        message=\"Advanced Expression Mode\"\n        description=\"Write custom JavaScript expressions for complex conditional logic. Use 'data' object to access workflow data.\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: 16 }}\n      />\n\n      <Form layout=\"vertical\">\n        <Form.Item label=\"Expression\">\n          <TextArea\n            rows={10}\n            placeholder={`// Example expressions:\nreturn data.status === 'success' && data.count > 10;\n\n// Multi-line logic\nif (data.user && data.user.role === 'admin') {\n  return data.permissions.includes('write');\n}\nreturn false;\n\n// Array operations\nreturn data.items.filter(item => item.active).length > 0;\n\n// Date comparisons\nconst today = new Date();\nconst itemDate = new Date(data.createdAt);\nreturn (today.getTime() - itemDate.getTime()) < (24 * 60 * 60 * 1000);`}\n            style={{ fontFamily: 'monospace' }}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" icon={<PlayCircleOutlined />}>\n              Test Expression\n            </Button>\n            <Button icon={<CodeOutlined />}>Validate Syntax</Button>\n            <Button>Save as Template</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n\n  const renderVisualFlowChart = () => {\n    const treeData = branches.map((branch) => ({\n      title: (\n        <Space>\n          <BranchesOutlined />\n          {branch.name}\n          <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n            {branch.conditions.length} conditions\n          </Tag>\n        </Space>\n      ),\n      key: branch.id,\n      children: branch.conditions.map((condition) => ({\n        title: (\n          <Space>\n            <QuestionCircleOutlined />\n            {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n            {condition.negate && <Tag color=\"orange\">NOT</Tag>}\n          </Space>\n        ),\n        key: condition.id,\n        icon: condition.negate ? <CloseCircleOutlined /> : <CheckCircleOutlined />,\n      })),\n    }));\n\n    return (\n      <Card title=\"Branch Flow Visualization\" size=\"small\">\n        <Tree\n          showIcon\n          defaultExpandAll\n          treeData={treeData}\n          style={{ background: colors.gray[50], padding: 16, borderRadius: 8 }}\n        />\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <BranchesOutlined />\n            Conditional Branching\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1400}\n        footer={null}\n        className={cn('conditional-branching-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Branch Builder\n              </span>\n            }\n            key=\"builder\"\n          >\n            {renderBranchBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CodeOutlined />\n                Expression Builder\n              </span>\n            }\n            key=\"expression\"\n          >\n            {renderExpressionBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BranchesOutlined />\n                Flow Visualization\n              </span>\n            }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx",
        "start": 344,
        "end": 732,
        "startLoc": {
          "line": 344,
          "column": 5,
          "position": 3156
        },
        "endLoc": {
          "line": 732,
          "column": 2,
          "position": 6275
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx",
        "start": 348,
        "end": 736,
        "startLoc": {
          "line": 348,
          "column": 5,
          "position": 3208
        },
        "endLoc": {
          "line": 736,
          "column": 2,
          "position": 6327
        }
      }
    },
    {
      "format": "tsx",
      "lines": 772,
      "fragment": "/**\n * Conditional Workflow Branching Panel\n *\n * Advanced conditional logic builder with visual branch creation,\n * dynamic routing, expression builder, and complex condition handling.\n */\n\nimport {\n  BranchesOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  CodeOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlayCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Radio,\n  Row,\n  Select,\n  Space,\n  Switch,\n  Tabs,\n  Tag,\n  Tree,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { WorkflowNodeInstance } from '@/core/nodes/types';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { Text } = Typography;\n\ninterface ConditionalBranchingPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n  onAddBranch: (branchConfig: BranchConfiguration) => void;\n}\n\nexport interface BranchConfiguration {\n  id: string;\n  name: string;\n  description?: string;\n  sourceNodeId: string;\n  conditions: BranchCondition[];\n  logicalOperator: 'AND' | 'OR';\n  defaultBranch: boolean;\n  priority: number;\n  targetNodes: string[];\n  metadata: Record<string, any>;\n}\n\nexport interface BranchCondition {\n  id: string;\n  field: string;\n  operator: ComparisonOperator;\n  value: any;\n  dataType: 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object';\n  negate?: boolean;\n  caseSensitive?: boolean;\n}\n\ntype ComparisonOperator =\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'less_than'\n  | 'greater_equal'\n  | 'less_equal'\n  | 'contains'\n  | 'starts_with'\n  | 'ends_with'\n  | 'regex'\n  | 'in_array'\n  | 'is_empty'\n  | 'is_not_empty'\n  | 'exists'\n  | 'not_exists';\n\nexport const ConditionalBranchingPanel: React.FC<ConditionalBranchingPanelProps> = ({\n  workflowId,\n  visible,\n  onClose,\n  onAddBranch,\n}) => {\n  const { nodes, edges } = useLeanWorkflowStore();\n  const [branches, setBranches] = useState<BranchConfiguration[]>([]);\n  const [selectedBranch, setSelectedBranch] = useState<BranchConfiguration | null>(null);\n  const [activeTab, setActiveTab] = useState('builder');\n  const [form] = Form.useForm();\n  const [conditionForm] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingBranch, setEditingBranch] = useState<string | null>(null);\n  const [testModalVisible, setTestModalVisible] = useState(false);\n\n  useEffect(() => {\n    if (visible) {\n      loadExistingBranches();\n    }\n  }, [visible, loadExistingBranches]);\n\n  const loadExistingBranches = () => {\n    // Extract conditional branches from existing workflow\n    const conditionNodes = nodes.filter(\n      (node) =>\n        node.parameters?.type === 'condition' ||\n        node.parameters?.integrationData?.id === 'condition' ||\n        node.type === 'condition'\n    );\n\n    const extractedBranches: BranchConfiguration[] = conditionNodes.map((node) => ({\n      id: node.id,\n      name: node.parameters?.name || node.name || `Branch from ${node.id}`,\n      description: node.parameters?.description || '',\n      sourceNodeId: node.id,\n      conditions: extractConditionsFromNode(node),\n      logicalOperator: 'AND',\n      defaultBranch: false,\n      priority: 1,\n      targetNodes: getTargetNodes(node.id),\n      metadata: {},\n    }));\n\n    setBranches(extractedBranches);\n  };\n\n  const extractConditionsFromNode = (node: WorkflowNodeInstance): BranchCondition[] => {\n    const properties = node.parameters?.properties || node.parameters || {};\n    const conditions: BranchCondition[] = [];\n\n    // Extract conditions from node properties\n    if (properties.condition) {\n      // Simple condition\n      conditions.push({\n        id: `condition_${Date.now()}`,\n        field: properties.field || 'data',\n        operator: properties.operator || 'equals',\n        value: properties.value,\n        dataType: properties.dataType || 'string',\n        negate: properties.negate || false,\n        caseSensitive: properties.caseSensitive !== false,\n      });\n    } else if (properties.conditions) {\n      // Multiple conditions\n      properties.conditions.forEach((cond: any, index: number) => {\n        conditions.push({\n          id: `condition_${Date.now()}_${index}`,\n          field: cond.field,\n          operator: cond.operator,\n          value: cond.value,\n          dataType: cond.dataType || 'string',\n          negate: cond.negate || false,\n          caseSensitive: cond.caseSensitive !== false,\n        });\n      });\n    }\n\n    return conditions;\n  };\n\n  const getTargetNodes = (sourceNodeId: string): string[] => {\n    return edges.filter((edge) => edge.source === sourceNodeId).map((edge) => edge.target);\n  };\n\n  const handleCreateBranch = async (values: any) => {\n    setLoading(true);\n    try {\n      const branchConfig: BranchConfiguration = {\n        id: editingBranch || `branch_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n        name: values.name,\n        description: values.description,\n        sourceNodeId: values.sourceNodeId,\n        conditions: values.conditions || [],\n        logicalOperator: values.logicalOperator || 'AND',\n        defaultBranch: values.defaultBranch || false,\n        priority: values.priority || 1,\n        targetNodes: values.targetNodes || [],\n        metadata: {\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        },\n      };\n\n      if (editingBranch) {\n        setBranches((prev) => prev.map((b) => (b.id === editingBranch ? branchConfig : b)));\n        message.success('Branch updated successfully');\n      } else {\n        setBranches((prev) => [...prev, branchConfig]);\n        message.success('Branch created successfully');\n      }\n\n      onAddBranch(branchConfig);\n      form.resetFields();\n      setEditingBranch(null);\n    } catch (_error) {\n      message.error('Failed to create branch');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddCondition = (values: any) => {\n    const condition: BranchCondition = {\n      id: `condition_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n      field: values.field,\n      operator: values.operator,\n      value: values.value,\n      dataType: values.dataType,\n      negate: values.negate || false,\n      caseSensitive: values.caseSensitive !== false,\n    };\n\n    const currentConditions = form.getFieldValue('conditions') || [];\n    form.setFieldsValue({ conditions: [...currentConditions, condition] });\n    conditionForm.resetFields();\n  };\n\n  const handleRemoveCondition = (conditionId: string) => {\n    const currentConditions = form.getFieldValue('conditions') || [];\n    const updatedConditions = currentConditions.filter(\n      (c: BranchCondition) => c.id !== conditionId\n    );\n    form.setFieldsValue({ conditions: updatedConditions });\n  };\n\n  const handleTestBranch = async (branch: BranchConfiguration, testData: any) => {\n    try {\n      const result = evaluateBranchConditions(branch, testData);\n      message.success(`Branch evaluation result: ${result ? 'TRUE' : 'FALSE'}`);\n      return result;\n    } catch (_error) {\n      message.error('Branch test failed');\n      return false;\n    }\n  };\n\n  const evaluateBranchConditions = (branch: BranchConfiguration, data: any): boolean => {\n    if (branch.conditions.length === 0) return true;\n\n    const results = branch.conditions.map((condition) => evaluateCondition(condition, data));\n\n    return branch.logicalOperator === 'AND' ? results.every(Boolean) : results.some(Boolean);\n  };\n\n  const evaluateCondition = (condition: BranchCondition, data: any): boolean => {\n    const fieldValue = getNestedValue(data, condition.field);\n    let result = false;\n\n    switch (condition.operator) {\n      case 'equals':\n        result = fieldValue === condition.value;\n        break;\n      case 'not_equals':\n        result = fieldValue !== condition.value;\n        break;\n      case 'greater_than':\n        result = Number(fieldValue) > Number(condition.value);\n        break;\n      case 'less_than':\n        result = Number(fieldValue) < Number(condition.value);\n        break;\n      case 'greater_equal':\n        result = Number(fieldValue) >= Number(condition.value);\n        break;\n      case 'less_equal':\n        result = Number(fieldValue) <= Number(condition.value);\n        break;\n      case 'contains': {\n        const searchValue = condition.caseSensitive\n          ? condition.value\n          : condition.value.toLowerCase();\n        const searchIn = condition.caseSensitive\n          ? String(fieldValue)\n          : String(fieldValue).toLowerCase();\n        result = searchIn.includes(searchValue);\n        break;\n      }\n      case 'starts_with':\n        result = String(fieldValue).startsWith(String(condition.value));\n        break;\n      case 'ends_with':\n        result = String(fieldValue).endsWith(String(condition.value));\n        break;\n      case 'regex':\n        result = new RegExp(condition.value).test(String(fieldValue));\n        break;\n      case 'in_array':\n        result = Array.isArray(condition.value) && condition.value.includes(fieldValue);\n        break;\n      case 'is_empty':\n        result =\n          !fieldValue ||\n          fieldValue === '' ||\n          (Array.isArray(fieldValue) && fieldValue.length === 0);\n        break;\n      case 'is_not_empty':\n        result =\n          !!fieldValue &&\n          fieldValue !== '' &&\n          (!Array.isArray(fieldValue) || fieldValue.length > 0);\n        break;\n      case 'exists':\n        result = fieldValue !== undefined && fieldValue !== null;\n        break;\n      case 'not_exists':\n        result = fieldValue === undefined || fieldValue === null;\n        break;\n      default:\n        result = false;\n    }\n\n    return condition.negate ? !result : result;\n  };\n\n  const getNestedValue = (obj: any, path: string): any => {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  };\n\n  const renderBranchBuilder = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Card title=\"Branch Configuration\" size=\"small\">\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleCreateBranch}\n          initialValues={{\n            logicalOperator: 'AND',\n            defaultBranch: false,\n            priority: 1,\n            conditions: [],\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Branch Name\"\n            rules={[{ required: true, message: 'Please enter a branch name' }]}\n          >\n            <Input placeholder=\"Success path\" />\n          </Form.Item>\n\n          <Form.Item name=\"description\" label=\"Description\">\n            <TextArea placeholder=\"Handles successful API responses\" rows={2} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"sourceNodeId\"\n            label=\"Source Node\"\n            rules={[{ required: true, message: 'Please select a source node' }]}\n          >\n            <Select placeholder=\"Select node to branch from\">\n              {nodes.map((node) => (\n                <Option key={node.id} value={node.id}>\n                  {node.parameters?.name || node.name || node.id}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item name=\"logicalOperator\" label=\"Condition Logic\">\n            <Radio.Group>\n              <Radio value=\"AND\">ALL conditions must be true (AND)</Radio>\n              <Radio value=\"OR\">ANY condition must be true (OR)</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Divider>Conditions</Divider>\n\n          <Form.Item dependencies={['conditions']} noStyle>\n            {({ getFieldValue }) => {\n              const conditions: BranchCondition[] = getFieldValue('conditions') || [];\n              return (\n                <div className=\"space-y-2\">\n                  {conditions.map((condition) => (\n                    <Card key={condition.id} size=\"small\" className=\"border-l-4 border-l-blue-500\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <Space direction=\"vertical\" size=\"small\">\n                            <Text strong>{condition.field}</Text>\n                            <Tag color=\"blue\">{condition.operator}</Tag>\n                            <Text code>{JSON.stringify(condition.value)}</Text>\n                            {condition.negate && <Tag color=\"orange\">NEGATED</Tag>}\n                          </Space>\n                        </div>\n                        <Button\n                          type=\"link\"\n                          danger\n                          icon={<DeleteOutlined />}\n                          onClick={() => handleRemoveCondition(condition.id)}\n                        />\n                      </div>\n                    </Card>\n                  ))}\n                  {conditions.length === 0 && (\n                    <Alert\n                      message=\"No conditions defined\"\n                      description=\"Add conditions to control when this branch should be taken\"\n                      type=\"info\"\n                      showIcon\n                    />\n                  )}\n                </div>\n              );\n            }}\n          </Form.Item>\n\n          <Card title=\"Add Condition\" size=\"small\" className=\"mt-4\">\n            <Form form={conditionForm} layout=\"vertical\" onFinish={handleAddCondition}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"field\" label=\"Field Path\" rules={[{ required: true }]}>\n                    <Input placeholder=\"data.status\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"dataType\" label=\"Data Type\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"string\">String</Option>\n                      <Option value=\"number\">Number</Option>\n                      <Option value=\"boolean\">Boolean</Option>\n                      <Option value=\"date\">Date</Option>\n                      <Option value=\"array\">Array</Option>\n                      <Option value=\"object\">Object</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"operator\" label=\"Operator\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"equals\">Equals (=)</Option>\n                      <Option value=\"not_equals\">Not Equals (≠)</Option>\n                      <Option value=\"greater_than\">Greater Than (&gt;)</Option>\n                      <Option value=\"less_than\">Less Than (&lt;)</Option>\n                      <Option value=\"greater_equal\">Greater Equal (≥)</Option>\n                      <Option value=\"less_equal\">Less Equal (≤)</Option>\n                      <Option value=\"contains\">Contains</Option>\n                      <Option value=\"starts_with\">Starts With</Option>\n                      <Option value=\"ends_with\">Ends With</Option>\n                      <Option value=\"regex\">Regex Match</Option>\n                      <Option value=\"in_array\">In Array</Option>\n                      <Option value=\"is_empty\">Is Empty</Option>\n                      <Option value=\"is_not_empty\">Is Not Empty</Option>\n                      <Option value=\"exists\">Exists</Option>\n                      <Option value=\"not_exists\">Not Exists</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}>\n                    <Input placeholder=\"success\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"negate\" valuePropName=\"checked\">\n                    <Switch checkedChildren=\"Negate\" unCheckedChildren=\"Normal\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"caseSensitive\" valuePropName=\"checked\" initialValue={true}>\n                    <Switch checkedChildren=\"Case Sensitive\" unCheckedChildren=\"Ignore Case\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Form.Item>\n                <Button type=\"dashed\" htmlType=\"submit\" icon={<PlusOutlined />} block>\n                  Add Condition\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n\n          <Divider>Advanced Settings</Divider>\n\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"priority\" label=\"Priority\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"defaultBranch\" label=\"Default Branch\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                {editingBranch ? 'Update Branch' : 'Create Branch'}\n              </Button>\n              <Button\n                onClick={() => {\n                  form.resetFields();\n                  setEditingBranch(null);\n                }}\n              >\n                Cancel\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Card>\n\n      <Card title=\"Existing Branches\" size=\"small\">\n        <List\n          dataSource={branches}\n          renderItem={(branch) => (\n            <List.Item\n              actions={[\n                <Button\n                  type=\"link\"\n                  icon={<PlayCircleOutlined />}\n                  onClick={() => {\n                    setSelectedBranch(branch);\n                    setTestModalVisible(true);\n                  }}\n                >\n                  Test\n                </Button>,\n                <Button\n                  type=\"link\"\n                  icon={<EditOutlined />}\n                  onClick={() => {\n                    setEditingBranch(branch.id);\n                    form.setFieldsValue(branch);\n                  }}\n                />,\n                <Button\n                  type=\"link\"\n                  danger\n                  icon={<DeleteOutlined />}\n                  onClick={() => {\n                    setBranches((prev) => prev.filter((b) => b.id !== branch.id));\n                    message.success('Branch deleted');\n                  }}\n                />,\n              ]}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <BranchesOutlined />\n                    {branch.name}\n                    <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n                      {branch.logicalOperator}\n                    </Tag>\n                    {branch.defaultBranch && <Tag color=\"gold\">DEFAULT</Tag>}\n                  </Space>\n                }\n                description={\n                  <Space direction=\"vertical\" size=\"small\">\n                    {branch.description}\n                    <Text type=\"secondary\">\n                      {branch.conditions.length} condition(s) • Priority: {branch.priority}\n                    </Text>\n                    <div>\n                      {branch.conditions.map((condition) => (\n                        <Tag key={condition.id} color=\"geekblue\" style={{ marginBottom: 4 }}>\n                          {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n                        </Tag>\n                      ))}\n                    </div>\n                  </Space>\n                }\n              />\n            </List.Item>\n          )}\n          locale={{ emptyText: 'No branches configured' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderExpressionBuilder = () => (\n    <Card title=\"JavaScript Expression Builder\" size=\"small\">\n      <Alert\n        message=\"Advanced Expression Mode\"\n        description=\"Write custom JavaScript expressions for complex conditional logic. Use 'data' object to access workflow data.\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: 16 }}\n      />\n\n      <Form layout=\"vertical\">\n        <Form.Item label=\"Expression\">\n          <TextArea\n            rows={10}\n            placeholder={`// Example expressions:\nreturn data.status === 'success' && data.count > 10;\n\n// Multi-line logic\nif (data.user && data.user.role === 'admin') {\n  return data.permissions.includes('write');\n}\nreturn false;\n\n// Array operations\nreturn data.items.filter(item => item.active).length > 0;\n\n// Date comparisons\nconst today = new Date();\nconst itemDate = new Date(data.createdAt);\nreturn (today.getTime() - itemDate.getTime()) < (24 * 60 * 60 * 1000);`}\n            style={{ fontFamily: 'monospace' }}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" icon={<PlayCircleOutlined />}>\n              Test Expression\n            </Button>\n            <Button icon={<CodeOutlined />}>Validate Syntax</Button>\n            <Button>Save as Template</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n\n  const renderVisualFlowChart = () => {\n    const treeData = branches.map((branch) => ({\n      title: (\n        <Space>\n          <BranchesOutlined />\n          {branch.name}\n          <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n            {branch.conditions.length} conditions\n          </Tag>\n        </Space>\n      ),\n      key: branch.id,\n      children: branch.conditions.map((condition) => ({\n        title: (\n          <Space>\n            <QuestionCircleOutlined />\n            {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n            {condition.negate && <Tag color=\"orange\">NOT</Tag>}\n          </Space>\n        ),\n        key: condition.id,\n        icon: condition.negate ? <CloseCircleOutlined /> : <CheckCircleOutlined />,\n      })),\n    }));\n\n    return (\n      <Card title=\"Branch Flow Visualization\" size=\"small\">\n        <Tree\n          showIcon\n          defaultExpandAll\n          treeData={treeData}\n          style={{ background: colors.gray[50], padding: 16, borderRadius: 8 }}\n        />\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <BranchesOutlined />\n            Conditional Branching\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1400}\n        footer={null}\n        className={cn('conditional-branching-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Branch Builder\n              </span>\n            }\n            key=\"builder\"\n          >\n            {renderBranchBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CodeOutlined />\n                Expression Builder\n              </span>\n            }\n            key=\"expression\"\n          >\n            {renderExpressionBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BranchesOutlined />\n                Flow Visualization\n              </span>\n            }\n            key=\"visualization\"\n          >\n            {renderVisualFlowChart()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Branch Logic\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedBranch) {\n            const testData = { status: 'success', count: 15 }; // Example test data\n            handleTestBranch(selectedBranch, testData);\n            setTestModalVisible(false);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                {\n                  status: 'success',\n                  count: 15,\n                  user: { role: 'admin' },\n                  timestamp: new Date().toISOString(),\n                },\n                null,\n                2\n              )}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx",
        "start": 1,
        "end": 772,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 772,
          "column": 2,
          "position": 6543
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx",
        "start": 5,
        "end": 776,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 776,
          "column": 2,
          "position": 6595
        }
      }
    },
    {
      "format": "javascript",
      "lines": 442,
      "fragment": "={connectedInputNodes}\n            onFieldSelect={setSelectedField}\n          />\n        </div>\n      )}\n\n      {/* === CONNECTED INPUT NODES === */}\n      <div className=\"space-y-3\">\n        <div className=\"text-sm font-semibold text-gray-100 flex items-center space-x-2\">\n          <span>📥</span>\n          <span>Input Data Sources</span>\n        </div>\n\n        {connectedInputNodes.map((node, index) => {\n          // More robust data detection\n          const outputData = node?.data?.outputData;\n          const testResultsData = node?.data?.testResults?.data;\n          const hasOutputData = outputData || testResultsData;\n\n          // Prefer outputData over testResults, but use either if available\n          let nodeData = null;\n          if (outputData) {\n            nodeData = outputData;\n          } else if (testResultsData) {\n            nodeData = testResultsData;\n          }\n\n          const isExpanded = expandedNode === node?.id;\n\n          return (\n            <div\n              key={node?.id || index}\n              className=\"bg-gray-800 rounded-lg border border-gray-600 overflow-hidden\"\n            >\n              {/* === NODE HEADER === */}\n              <div\n                className=\"p-3 border-b border-gray-600 bg-gray-750 cursor-pointer hover:bg-gray-700 transition-colors\"\n                onClick={() => setExpandedNode(isExpanded ? null : node?.id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\" title={node?.data?.label || 'Node Icon'}>\n                      {getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Available</span>\n                      </span>\n                    ) : (\n                      <span className=\"px-2 py-1 bg-yellow-800 text-yellow-200 rounded text-xs flex items-center space-x-1\">\n                        <span>⏳</span>\n                        <span>No Data</span>\n                      </span>\n                    )}\n                    <span\n                      className={`transform transition-transform text-gray-400 ${isExpanded ? 'rotate-180' : ''}`}\n                    >\n                      ▼\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* === EXPANDABLE DATA CONTENT === */}\n              {isExpanded && (\n                <div className=\"p-3\">\n                  {hasOutputData ? (\n                    <div className=\"space-y-3\">\n                      {/* Enhanced JSON viewer for raw data */}\n                      <JsonViewer data={nodeData} maxHeight=\"400px\" enableClipboard={true} />\n\n                      {/* Then show the formatted renderer */}\n                      <ConditionDataRenderer\n                        data={nodeData}\n                        nodeType={getNodeType(node)}\n                        selectedField={selectedField}\n                        onFieldSelect={setSelectedField}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4 text-gray-400\">\n                      <div className=\"text-sm\">No output data available</div>\n                      <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* === CONDITION EVALUATION TIPS === */}\n      <div className=\"mt-6 p-3 bg-gray-800 rounded-lg border border-gray-600\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">💡</span>\n          <div className=\"text-sm font-medium text-gray-200\">Condition Tips</div>\n        </div>\n        <div className=\"space-y-2 text-xs text-gray-400\">\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Reference data fields directly in conditions (e.g.,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">subject</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">priority</code>)\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Use comparison operators:{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">==</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">!=</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&gt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&lt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">contains</code>\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Combine conditions with{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&&</code> (and) or{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">||</code> (or)\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Component to show summary of all available data fields\nconst DataFieldsSummary: React.FC<{\n  connectedInputNodes: any[];\n  onFieldSelect: (field: string) => void;\n}> = ({ connectedInputNodes, onFieldSelect }) => {\n  const allFields = new Set<string>();\n\n  // Collect all unique fields from connected nodes\n  connectedInputNodes.forEach((node, _index) => {\n    const outputData = node?.data?.outputData;\n    const testResultsData = node?.data?.testResults?.data;\n    const data = outputData || testResultsData;\n\n    if (data && typeof data === 'object') {\n      if (Array.isArray(data)) {\n        // Handle arrays (like emails)\n        if (data.length > 0 && typeof data[0] === 'object') {\n          Object.keys(data[0]).forEach((key) => allFields.add(key));\n        }\n      } else {\n        // Handle objects\n        Object.keys(data).forEach((key) => allFields.add(key));\n      }\n    }\n  });\n\n  const fieldsArray = Array.from(allFields).sort();\n\n  if (fieldsArray.length === 0) {\n    return (\n      <div className=\"text-xs text-gray-400\">\n        No structured fields available. Test connected nodes to analyze data fields.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {fieldsArray.map((field) => (\n        <button\n          key={field}\n          onClick={() => onFieldSelect(field)}\n          className=\"px-2 py-1 bg-purple-800 hover:bg-purple-700 text-purple-200 rounded text-xs transition-colors\"\n          title={`Click to highlight ${field} in data`}\n        >\n          {field}\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// Component to render data specifically for condition evaluation\nconst ConditionDataRenderer: React.FC<{\n  data: any;\n  nodeType: string;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, nodeType, selectedField, onFieldSelect }) => {\n  if (!data) {\n    return <div className=\"text-gray-400 text-sm\">No data available</div>;\n  }\n\n  // Handle different data structures\n\n  // Check if it's an array (like emails)\n  if (Array.isArray(data)) {\n    if (data.length > 0) {\n      const firstItem = data[0];\n      if (nodeType === 'gmail' || nodeType === 'gmail-trigger') {\n        return (\n          <EmailConditionView\n            email={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      } else {\n        // Generic array handling - show first item\n        return (\n          <GenericConditionView\n            data={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      }\n    }\n  }\n\n  // Handle email data (from Gmail triggers)\n  if ((nodeType === 'gmail' || nodeType === 'gmail-trigger') && typeof data === 'object') {\n    return (\n      <EmailConditionView\n        email={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle transformed data\n  if (nodeType === 'transform' && typeof data === 'object') {\n    return (\n      <TransformConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle AI Agent data\n  if (nodeType === 'ai-agent' && typeof data === 'object') {\n    return (\n      <AIConditionView data={data} selectedField={selectedField} onFieldSelect={onFieldSelect} />\n    );\n  }\n\n  // Generic structured data\n  if (typeof data === 'object' && data !== null) {\n    return (\n      <GenericConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-yellow-400\">Debug: {nodeType} node data (fallback renderer)</div>\n      <div className=\"bg-gray-900 p-3 rounded border border-gray-600\">\n        <div className=\"text-xs text-gray-400 mb-2\">\n          Type: {typeof data} {Array.isArray(data) && `(array with ${data.length} items)`}\n        </div>\n        <div className=\"font-mono text-xs text-gray-200 max-h-40 overflow-y-auto\">\n          {typeof data === 'string' ? data : JSON.stringify(data, null, 2)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Email-specific condition view\nconst EmailConditionView: React.FC<{\n  email: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ email, selectedField, onFieldSelect }) => {\n  const emailFields = [\n    { key: 'from', label: 'From', value: email.from },\n    { key: 'subject', label: 'Subject', value: email.subject },\n    { key: 'body', label: 'Body', value: email.body },\n    { key: 'isUnread', label: 'Unread', value: email.isUnread },\n    {\n      key: 'hasAttachments',\n      label: 'Has Attachments',\n      value: email.hasAttachments,\n    },\n    { key: 'labels', label: 'Labels', value: email.labels },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-blue-400 mb-2\">📧 Email fields available for conditions:</div>\n      {emailFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Transform data condition view\nconst TransformConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-green-400 mb-2\">\n        🔄 Transformed fields available for conditions:\n      </div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ${\n        isSelected\n          ? 'border-purple-500 bg-purple-900/20'\n          : 'border-gray-600 hover:border-gray-500 bg-gray-750'\n      }`}\n      onClick={() => onSelect(fieldKey)}\n    >\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className={`text-sm font-medium ${isSelected ? 'text-purple-200' : 'text-gray-200'}`}>\n          {label}\n        </span>\n        <code\n          className={`text-xs px-2 py-1 rounded ${\n            isSelected ? 'bg-purple-800 text-purple-200' : 'bg-gray-700 text-gray-300'\n          }`}\n        >\n          {fieldKey}\n        </code>\n      </div>\n      <div className={`text-xs ${isSelected ? 'text-purple-300' : 'text-gray-400'}`}>\n        Type: {typeof value} {Array.isArray(value) && '(array)'}\n      </div>\n      <div className={`text-sm mt-2 ${isSelected ? 'text-purple-100' : 'text-gray-300'}`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx",
        "start": 67,
        "end": 508,
        "startLoc": {
          "line": 67,
          "column": 20,
          "position": 649
        },
        "endLoc": {
          "line": 508,
          "column": 2,
          "position": 4475
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 69,
        "end": 510,
        "startLoc": {
          "line": 69,
          "column": 20,
          "position": 675
        },
        "endLoc": {
          "line": 510,
          "column": 2,
          "position": 4501
        }
      }
    },
    {
      "format": "tsx",
      "lines": 561,
      "fragment": ";\n\ninterface ConditionInputPanelProps {\n  connectedInputNodes: any[];\n  selectedNode?: any;\n  testResults?: any;\n}\n\nconst ConditionInputPanel: React.FC<ConditionInputPanelProps> = ({ connectedInputNodes }) => {\n  // Default to expanding the first node that has data\n  const [expandedNode, setExpandedNode] = useState<string | null>(() => {\n    const firstNodeWithData = connectedInputNodes.find(\n      (node) => node?.data?.outputData || node?.data?.testResults?.data\n    );\n    return firstNodeWithData?.id || null;\n  });\n  const [selectedField, setSelectedField] = useState<string | null>(null);\n\n  // Debug logging\n  React.useEffect(() => {}, []);\n\n  if (connectedInputNodes.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-gray-400\">\n        <div className=\"text-center space-y-3\">\n          <div className=\"text-3xl\">⚖️</div>\n          <div className=\"text-sm font-medium\">No Input Connections</div>\n          <div className=\"text-xs text-gray-500 max-w-48\">\n            Connect nodes to provide data for condition evaluation\n          </div>\n          <div className=\"mt-4 text-xs text-blue-400\">\n            💡 Conditions evaluate input data to make decisions\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* === CONDITION OVERVIEW === */}\n      <div className=\"bg-purple-900/20 border border-purple-600/30 rounded-lg p-3\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">⚖️</span>\n          <div className=\"text-sm font-medium text-purple-200\">Condition Evaluation</div>\n          <span className=\"px-2 py-1 bg-purple-800 text-purple-100 rounded text-xs\">\n            {connectedInputNodes.length} input\n            {connectedInputNodes.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n        <div className=\"text-xs text-purple-300\">\n          This data will be evaluated by the condition logic. Use field references in your condition\n          expressions.\n        </div>\n      </div>\n\n      {/* === DATA ANALYSIS SUMMARY === */}\n      {connectedInputNodes.length > 0 && (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-3\">\n          <div className=\"text-sm font-medium text-gray-200 mb-3 flex items-center space-x-2\">\n            <span>📊</span>\n            <span>Available Data Fields</span>\n          </div>\n          <DataFieldsSummary\n            connectedInputNodes={connectedInputNodes}\n            onFieldSelect={setSelectedField}\n          />\n        </div>\n      )}\n\n      {/* === CONNECTED INPUT NODES === */}\n      <div className=\"space-y-3\">\n        <div className=\"text-sm font-semibold text-gray-100 flex items-center space-x-2\">\n          <span>📥</span>\n          <span>Input Data Sources</span>\n        </div>\n\n        {connectedInputNodes.map((node, index) => {\n          // More robust data detection\n          const outputData = node?.data?.outputData;\n          const testResultsData = node?.data?.testResults?.data;\n          const hasOutputData = outputData || testResultsData;\n\n          // Prefer outputData over testResults, but use either if available\n          let nodeData = null;\n          if (outputData) {\n            nodeData = outputData;\n          } else if (testResultsData) {\n            nodeData = testResultsData;\n          }\n\n          const isExpanded = expandedNode === node?.id;\n\n          return (\n            <div\n              key={node?.id || index}\n              className=\"bg-gray-800 rounded-lg border border-gray-600 overflow-hidden\"\n            >\n              {/* === NODE HEADER === */}\n              <div\n                className=\"p-3 border-b border-gray-600 bg-gray-750 cursor-pointer hover:bg-gray-700 transition-colors\"\n                onClick={() => setExpandedNode(isExpanded ? null : node?.id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\" title={node?.data?.label || 'Node Icon'}>\n                      {getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Available</span>\n                      </span>\n                    ) : (\n                      <span className=\"px-2 py-1 bg-yellow-800 text-yellow-200 rounded text-xs flex items-center space-x-1\">\n                        <span>⏳</span>\n                        <span>No Data</span>\n                      </span>\n                    )}\n                    <span\n                      className={`transform transition-transform text-gray-400 ${isExpanded ? 'rotate-180' : ''}`}\n                    >\n                      ▼\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* === EXPANDABLE DATA CONTENT === */}\n              {isExpanded && (\n                <div className=\"p-3\">\n                  {hasOutputData ? (\n                    <div className=\"space-y-3\">\n                      {/* Enhanced JSON viewer for raw data */}\n                      <JsonViewer data={nodeData} maxHeight=\"400px\" enableClipboard={true} />\n\n                      {/* Then show the formatted renderer */}\n                      <ConditionDataRenderer\n                        data={nodeData}\n                        nodeType={getNodeType(node)}\n                        selectedField={selectedField}\n                        onFieldSelect={setSelectedField}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4 text-gray-400\">\n                      <div className=\"text-sm\">No output data available</div>\n                      <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* === CONDITION EVALUATION TIPS === */}\n      <div className=\"mt-6 p-3 bg-gray-800 rounded-lg border border-gray-600\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">💡</span>\n          <div className=\"text-sm font-medium text-gray-200\">Condition Tips</div>\n        </div>\n        <div className=\"space-y-2 text-xs text-gray-400\">\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Reference data fields directly in conditions (e.g.,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">subject</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">priority</code>)\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Use comparison operators:{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">==</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">!=</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&gt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&lt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">contains</code>\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Combine conditions with{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&&</code> (and) or{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">||</code> (or)\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Component to show summary of all available data fields\nconst DataFieldsSummary: React.FC<{\n  connectedInputNodes: any[];\n  onFieldSelect: (field: string) => void;\n}> = ({ connectedInputNodes, onFieldSelect }) => {\n  const allFields = new Set<string>();\n\n  // Collect all unique fields from connected nodes\n  connectedInputNodes.forEach((node, _index) => {\n    const outputData = node?.data?.outputData;\n    const testResultsData = node?.data?.testResults?.data;\n    const data = outputData || testResultsData;\n\n    if (data && typeof data === 'object') {\n      if (Array.isArray(data)) {\n        // Handle arrays (like emails)\n        if (data.length > 0 && typeof data[0] === 'object') {\n          Object.keys(data[0]).forEach((key) => allFields.add(key));\n        }\n      } else {\n        // Handle objects\n        Object.keys(data).forEach((key) => allFields.add(key));\n      }\n    }\n  });\n\n  const fieldsArray = Array.from(allFields).sort();\n\n  if (fieldsArray.length === 0) {\n    return (\n      <div className=\"text-xs text-gray-400\">\n        No structured fields available. Test connected nodes to analyze data fields.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {fieldsArray.map((field) => (\n        <button\n          key={field}\n          onClick={() => onFieldSelect(field)}\n          className=\"px-2 py-1 bg-purple-800 hover:bg-purple-700 text-purple-200 rounded text-xs transition-colors\"\n          title={`Click to highlight ${field} in data`}\n        >\n          {field}\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// Component to render data specifically for condition evaluation\nconst ConditionDataRenderer: React.FC<{\n  data: any;\n  nodeType: string;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, nodeType, selectedField, onFieldSelect }) => {\n  if (!data) {\n    return <div className=\"text-gray-400 text-sm\">No data available</div>;\n  }\n\n  // Handle different data structures\n\n  // Check if it's an array (like emails)\n  if (Array.isArray(data)) {\n    if (data.length > 0) {\n      const firstItem = data[0];\n      if (nodeType === 'gmail' || nodeType === 'gmail-trigger') {\n        return (\n          <EmailConditionView\n            email={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      } else {\n        // Generic array handling - show first item\n        return (\n          <GenericConditionView\n            data={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      }\n    }\n  }\n\n  // Handle email data (from Gmail triggers)\n  if ((nodeType === 'gmail' || nodeType === 'gmail-trigger') && typeof data === 'object') {\n    return (\n      <EmailConditionView\n        email={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle transformed data\n  if (nodeType === 'transform' && typeof data === 'object') {\n    return (\n      <TransformConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle AI Agent data\n  if (nodeType === 'ai-agent' && typeof data === 'object') {\n    return (\n      <AIConditionView data={data} selectedField={selectedField} onFieldSelect={onFieldSelect} />\n    );\n  }\n\n  // Generic structured data\n  if (typeof data === 'object' && data !== null) {\n    return (\n      <GenericConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-yellow-400\">Debug: {nodeType} node data (fallback renderer)</div>\n      <div className=\"bg-gray-900 p-3 rounded border border-gray-600\">\n        <div className=\"text-xs text-gray-400 mb-2\">\n          Type: {typeof data} {Array.isArray(data) && `(array with ${data.length} items)`}\n        </div>\n        <div className=\"font-mono text-xs text-gray-200 max-h-40 overflow-y-auto\">\n          {typeof data === 'string' ? data : JSON.stringify(data, null, 2)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Email-specific condition view\nconst EmailConditionView: React.FC<{\n  email: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ email, selectedField, onFieldSelect }) => {\n  const emailFields = [\n    { key: 'from', label: 'From', value: email.from },\n    { key: 'subject', label: 'Subject', value: email.subject },\n    { key: 'body', label: 'Body', value: email.body },\n    { key: 'isUnread', label: 'Unread', value: email.isUnread },\n    {\n      key: 'hasAttachments',\n      label: 'Has Attachments',\n      value: email.hasAttachments,\n    },\n    { key: 'labels', label: 'Labels', value: email.labels },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-blue-400 mb-2\">📧 Email fields available for conditions:</div>\n      {emailFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Transform data condition view\nconst TransformConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-green-400 mb-2\">\n        🔄 Transformed fields available for conditions:\n      </div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ${\n        isSelected\n          ? 'border-purple-500 bg-purple-900/20'\n          : 'border-gray-600 hover:border-gray-500 bg-gray-750'\n      }`}\n      onClick={() => onSelect(fieldKey)}\n    >\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className={`text-sm font-medium ${isSelected ? 'text-purple-200' : 'text-gray-200'}`}>\n          {label}\n        </span>\n        <code\n          className={`text-xs px-2 py-1 rounded ${\n            isSelected ? 'bg-purple-800 text-purple-200' : 'bg-gray-700 text-gray-300'\n          }`}\n        >\n          {fieldKey}\n        </code>\n      </div>\n      <div className={`text-xs ${isSelected ? 'text-purple-300' : 'text-gray-400'}`}>\n        Type: {typeof value} {Array.isArray(value) && '(array)'}\n      </div>\n      <div className={`text-sm mt-2 ${isSelected ? 'text-purple-100' : 'text-gray-300'}`}>\n        {typeof displayValue === 'object'\n          ? JSON.stringify(displayValue, null, 2)\n          : String(displayValue || 'null')}\n      </div>\n    </div>\n  );\n};\n\n// Helper functions (same as in other panels)\nconst getNodeIcon = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return '📧';\n  }\n  if (node?.type === 'transform') {\n    return '🔄';\n  }\n  if (node?.type === 'ai-agent' || node?.data?.integrationData?.id === 'ai-agent') {\n    return '🤖';\n  }\n  if (node?.type === 'trigger') {\n    return '⚡';\n  }\n  return '📊';\n};\n\nconst getNodeType = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return 'gmail-trigger';\n  }\n  if (node?.type === 'transform') {\n    return 'transform';\n  }\n  if (node?.type === 'ai-agent' || node?.data?.integrationData?.id === 'ai-agent') {\n    return 'ai-agent';\n  }\n  return node?.type || 'unknown';\n};\n\nconst getNodeTypeDisplay = (node: any): string => {\n  return (\n    node?.data?.enhancedNodeType?.displayName ||\n    node?.data?.nodeTypeData?.displayName ||\n    node?.data?.nodeTypeData?.name ||\n    node?.type ||\n    'Unknown Node Type'\n  );\n};\n\nexport default ConditionInputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx",
        "start": 3,
        "end": 563,
        "startLoc": {
          "line": 3,
          "column": 18,
          "position": 29
        },
        "endLoc": {
          "line": 563,
          "column": 2,
          "position": 4960
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 5,
        "end": 565,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 55
        },
        "endLoc": {
          "line": 565,
          "column": 2,
          "position": 4986
        }
      }
    },
    {
      "format": "javascript",
      "lines": 266,
      "fragment": "={{ padding: 12 }}>\n        <div className=\"space-y-3\">\n          {/* Comment header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar size={24} src={comment.author.avatar} style={{ backgroundColor: userColor }}>\n                {comment.author.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div>\n                <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                  {comment.author.name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(comment.timestamp).toLocaleString()}\n                </div>\n              </div>\n            </div>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                onResolve();\n              }}\n              className=\"text-green-600 hover:bg-green-50\"\n            >\n              Resolve\n            </Button>\n          </div>\n\n          {/* Comment content */}\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">{comment.content}</div>\n\n          {/* Replies */}\n          {comment.replies.length > 0 && (\n            <div className=\"space-y-2 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n              {comment.replies.map((reply) => (\n                <div key={reply.id} className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={16}\n                      src={reply.author.avatar}\n                      style={{ backgroundColor: getUserColor(reply.author.id) }}\n                    >\n                      {reply.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                      {reply.author.name}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(reply.timestamp).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300 pl-6\">\n                    {reply.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Reply input */}\n          <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex space-x-2\">\n              <Input\n                size=\"small\"\n                placeholder=\"Reply...\"\n                value={replyContents[comment.id] || ''}\n                onChange={(e) =>\n                  setReplyContents({\n                    ...replyContents,\n                    [comment.id]: e.target.value,\n                  })\n                }\n                onPressEnter={() => handleReplyToComment(comment.id)}\n              />\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={() => handleReplyToComment(comment.id)}\n                disabled={!replyContents[comment.id]?.trim()}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n    );\n\n    return (\n      <Popover\n        content={commentThread}\n        title={null}\n        trigger=\"click\"\n        placement=\"topLeft\"\n        overlayClassName=\"comment-thread-popover\"\n      >\n        <div\n          className={`absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 z-40 ${\n            isSelected ? 'scale-110' : 'scale-100'\n          }`}\n          style={{\n            left: screenPosition.x,\n            top: screenPosition.y,\n          }}\n          onClick={onClick}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {/* Comment pin */}\n          <div\n            className={`relative w-8 h-8 rounded-full border-2 border-white shadow-lg flex items-center justify-center ${\n              isSelected || isHovered ? 'transform scale-110' : ''\n            }`}\n            style={{\n              backgroundColor: userColor,\n              boxShadow: isSelected ? `0 0 0 3px ${userColor}40` : '0 2px 8px rgba(0,0,0,0.15)',\n            }}\n          >\n            <CommentOutlined className=\"text-white text-sm\" />\n\n            {/* Unread replies indicator */}\n            {comment.replies.length > 0 && (\n              <Badge\n                count={comment.replies.length}\n                size=\"small\"\n                className=\"absolute -top-1 -right-1\"\n              />\n            )}\n          </div>\n\n          {/* Connection line to author avatar */}\n          {(isSelected || isHovered) && (\n            <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-white dark:bg-gray-800 px-2 py-1 rounded shadow-md border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-1\">\n                  <Avatar\n                    size={16}\n                    src={comment.author.avatar}\n                    style={{ backgroundColor: userColor }}\n                  >\n                    {comment.author.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                  <span className=\"text-xs font-medium text-gray-900 dark:text-gray-100\">\n                    {comment.author.name}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Popover>\n    );\n  };\n\n  // Pending comment input\n  const PendingCommentInput: React.FC<{ position: { x: number; y: number } }> = ({ position }) => {\n    const screenPos = workflowToScreen(position.x, position.y);\n\n    return (\n      <div\n        className=\"absolute z-50\"\n        style={{\n          left: screenPos.x + 20,\n          top: screenPos.y,\n        }}\n      >\n        <Card size=\"small\" className=\"w-80 shadow-lg\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar\n                size={24}\n                src={currentUser?.avatar}\n                style={{\n                  backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n                }}\n              >\n                {currentUser?.name.charAt(0).toUpperCase() || '?'}\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                Add a comment\n              </span>\n            </div>\n\n            <TextArea\n              rows={3}\n              placeholder=\"What do you think about this?\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n              autoFocus\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setPendingCommentPosition(null);\n                  setNewCommentContent('');\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim()}\n              >\n                Post\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Pin indicator */}\n        <div\n          className=\"absolute w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center\"\n          style={{\n            left: -20,\n            top: 20,\n            backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n          }}\n        >\n          <CommentOutlined className=\"text-white text-xs\" />\n        </div>\n      </div>\n    );\n  };\n\n  if (!showComments || !containerRef.current) return null;\n\n  return (\n    <>\n      {/* Canvas click handler for comment mode */}\n      {commentMode && (\n        <div\n          className=\"absolute inset-0 z-30 cursor-crosshair\"\n          onClick={handleCanvasClick}\n          style={{\n            background: commentMode\n              ? 'linear-gradient(45deg, transparent 40%, rgba(24, 144, 255, 0.1) 50%, transparent 60%)'\n              : 'transparent',\n          }}\n        />\n      )}\n\n      {/* Existing comments */}\n      {activeComments.map((comment) => {\n        const screenPos = workflowToScreen(comment.position.x, comment.position.y);\n\n        return (\n          <CommentPin\n            key={comment.id}\n            comment={comment}\n            screenPosition={screenPos}\n            isSelected={selectedCommentId === comment.id}\n            onClick={() => selectComment(comment.id)}\n            onResolve={() => resolveComment(comment.id)}\n          />\n        );\n      })}\n\n      {/* Pending comment input */}\n      {pendingCommentPosition && <PendingCommentInput position={pendingCommentPosition}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx",
        "start": 157,
        "end": 422,
        "startLoc": {
          "line": 157,
          "column": 10,
          "position": 1337
        },
        "endLoc": {
          "line": 422,
          "column": 2,
          "position": 3216
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 164,
        "end": 429,
        "startLoc": {
          "line": 164,
          "column": 10,
          "position": 1428
        },
        "endLoc": {
          "line": 429,
          "column": 2,
          "position": 3307
        }
      }
    },
    {
      "format": "tsx",
      "lines": 435,
      "fragment": "/**\n * Comment Annotations\n *\n * Visual comment pins and thread overlays for workflow canvas,\n * providing contextual commenting system similar to Figma's comments.\n */\n\nimport { CheckOutlined, CommentOutlined, SendOutlined } from '@ant-design/icons';\nimport { Avatar, Badge, Button, Card, Input, Popover } from 'antd';\nimport type React from 'react';\nimport { useCallback, useState } from 'react';\nimport type { CollaborationComment } from '../../../core/services/collaborationService';\nimport { useCollaborationStore } from '../../../core/stores/collaborationStore';\nimport { useLeanWorkflowStore } from '../../../core/stores/leanWorkflowStore';\n\nconst { TextArea } = Input;\n\ninterface CommentAnnotationsProps {\n  containerRef: React.RefObject<HTMLDivElement>;\n  transform: {\n    x: number;\n    y: number;\n    zoom: number;\n  };\n  onCommentClick?: (position: { x: number; y: number }) => void;\n}\n\ninterface CommentPinProps {\n  comment: CollaborationComment;\n  screenPosition: { x: number; y: number };\n  isSelected: boolean;\n  onClick: () => void;\n  onResolve: () => void;\n}\n\nexport const CommentAnnotations: React.FC<CommentAnnotationsProps> = ({\n  containerRef,\n  transform,\n  onCommentClick,\n}) => {\n  const {\n    activeComments,\n    selectedCommentId,\n    currentUser,\n    showComments,\n    commentMode,\n    selectComment,\n    resolveComment,\n    addComment,\n    replyToComment,\n  } = useCollaborationStore();\n  const { currentWorkflow } = useLeanWorkflowStore();\n\n  const [replyContents, setReplyContents] = useState<Record<string, string>>({});\n  const [newCommentContent, setNewCommentContent] = useState('');\n  const [pendingCommentPosition, setPendingCommentPosition] = useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n\n  // Convert workflow coordinates to screen coordinates\n  const workflowToScreen = useCallback(\n    (x: number, y: number) => ({\n      x: (x + transform.x) * transform.zoom,\n      y: (y + transform.y) * transform.zoom,\n    }),\n    [transform]\n  );\n\n  // Convert screen coordinates to workflow coordinates\n  const screenToWorkflow = useCallback(\n    (x: number, y: number) => ({\n      x: x / transform.zoom - transform.x,\n      y: y / transform.zoom - transform.y,\n    }),\n    [transform]\n  );\n\n  // Generate user colors\n  const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle canvas click for new comments\n  const handleCanvasClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (!commentMode || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      const workflowPos = screenToWorkflow(x, y);\n      setPendingCommentPosition(workflowPos);\n      onCommentClick?.(workflowPos);\n    },\n    [commentMode, containerRef, screenToWorkflow, onCommentClick]\n  );\n\n  // Handle adding new comment\n  const handleAddComment = useCallback(async () => {\n    if (!newCommentContent.trim() || !pendingCommentPosition) return;\n\n    try {\n      await addComment({\n        workflowId: currentWorkflow?.id || '',\n        content: newCommentContent,\n        position: pendingCommentPosition,\n        resolved: false,\n        mentions: [], // TODO: Parse mentions from content\n      });\n\n      setNewCommentContent('');\n      setPendingCommentPosition(null);\n    } catch (_error) {}\n  }, [newCommentContent, pendingCommentPosition, addComment, currentWorkflow?.id]);\n\n  // Handle replying to comment\n  const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Comment Pin Component\n  const CommentPin: React.FC<CommentPinProps> = ({\n    comment,\n    screenPosition,\n    isSelected,\n    onClick,\n    onResolve,\n  }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const userColor = getUserColor(comment.author.id);\n\n    const commentThread = (\n      <Card size=\"small\" className=\"w-80 max-h-96 overflow-auto\" bodyStyle={{ padding: 12 }}>\n        <div className=\"space-y-3\">\n          {/* Comment header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar size={24} src={comment.author.avatar} style={{ backgroundColor: userColor }}>\n                {comment.author.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div>\n                <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                  {comment.author.name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(comment.timestamp).toLocaleString()}\n                </div>\n              </div>\n            </div>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                onResolve();\n              }}\n              className=\"text-green-600 hover:bg-green-50\"\n            >\n              Resolve\n            </Button>\n          </div>\n\n          {/* Comment content */}\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">{comment.content}</div>\n\n          {/* Replies */}\n          {comment.replies.length > 0 && (\n            <div className=\"space-y-2 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n              {comment.replies.map((reply) => (\n                <div key={reply.id} className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={16}\n                      src={reply.author.avatar}\n                      style={{ backgroundColor: getUserColor(reply.author.id) }}\n                    >\n                      {reply.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                      {reply.author.name}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(reply.timestamp).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300 pl-6\">\n                    {reply.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Reply input */}\n          <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex space-x-2\">\n              <Input\n                size=\"small\"\n                placeholder=\"Reply...\"\n                value={replyContents[comment.id] || ''}\n                onChange={(e) =>\n                  setReplyContents({\n                    ...replyContents,\n                    [comment.id]: e.target.value,\n                  })\n                }\n                onPressEnter={() => handleReplyToComment(comment.id)}\n              />\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={() => handleReplyToComment(comment.id)}\n                disabled={!replyContents[comment.id]?.trim()}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n    );\n\n    return (\n      <Popover\n        content={commentThread}\n        title={null}\n        trigger=\"click\"\n        placement=\"topLeft\"\n        overlayClassName=\"comment-thread-popover\"\n      >\n        <div\n          className={`absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 z-40 ${\n            isSelected ? 'scale-110' : 'scale-100'\n          }`}\n          style={{\n            left: screenPosition.x,\n            top: screenPosition.y,\n          }}\n          onClick={onClick}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {/* Comment pin */}\n          <div\n            className={`relative w-8 h-8 rounded-full border-2 border-white shadow-lg flex items-center justify-center ${\n              isSelected || isHovered ? 'transform scale-110' : ''\n            }`}\n            style={{\n              backgroundColor: userColor,\n              boxShadow: isSelected ? `0 0 0 3px ${userColor}40` : '0 2px 8px rgba(0,0,0,0.15)',\n            }}\n          >\n            <CommentOutlined className=\"text-white text-sm\" />\n\n            {/* Unread replies indicator */}\n            {comment.replies.length > 0 && (\n              <Badge\n                count={comment.replies.length}\n                size=\"small\"\n                className=\"absolute -top-1 -right-1\"\n              />\n            )}\n          </div>\n\n          {/* Connection line to author avatar */}\n          {(isSelected || isHovered) && (\n            <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-white dark:bg-gray-800 px-2 py-1 rounded shadow-md border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-1\">\n                  <Avatar\n                    size={16}\n                    src={comment.author.avatar}\n                    style={{ backgroundColor: userColor }}\n                  >\n                    {comment.author.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                  <span className=\"text-xs font-medium text-gray-900 dark:text-gray-100\">\n                    {comment.author.name}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Popover>\n    );\n  };\n\n  // Pending comment input\n  const PendingCommentInput: React.FC<{ position: { x: number; y: number } }> = ({ position }) => {\n    const screenPos = workflowToScreen(position.x, position.y);\n\n    return (\n      <div\n        className=\"absolute z-50\"\n        style={{\n          left: screenPos.x + 20,\n          top: screenPos.y,\n        }}\n      >\n        <Card size=\"small\" className=\"w-80 shadow-lg\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar\n                size={24}\n                src={currentUser?.avatar}\n                style={{\n                  backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n                }}\n              >\n                {currentUser?.name.charAt(0).toUpperCase() || '?'}\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                Add a comment\n              </span>\n            </div>\n\n            <TextArea\n              rows={3}\n              placeholder=\"What do you think about this?\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n              autoFocus\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setPendingCommentPosition(null);\n                  setNewCommentContent('');\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim()}\n              >\n                Post\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Pin indicator */}\n        <div\n          className=\"absolute w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center\"\n          style={{\n            left: -20,\n            top: 20,\n            backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n          }}\n        >\n          <CommentOutlined className=\"text-white text-xs\" />\n        </div>\n      </div>\n    );\n  };\n\n  if (!showComments || !containerRef.current) return null;\n\n  return (\n    <>\n      {/* Canvas click handler for comment mode */}\n      {commentMode && (\n        <div\n          className=\"absolute inset-0 z-30 cursor-crosshair\"\n          onClick={handleCanvasClick}\n          style={{\n            background: commentMode\n              ? 'linear-gradient(45deg, transparent 40%, rgba(24, 144, 255, 0.1) 50%, transparent 60%)'\n              : 'transparent',\n          }}\n        />\n      )}\n\n      {/* Existing comments */}\n      {activeComments.map((comment) => {\n        const screenPos = workflowToScreen(comment.position.x, comment.position.y);\n\n        return (\n          <CommentPin\n            key={comment.id}\n            comment={comment}\n            screenPosition={screenPos}\n            isSelected={selectedCommentId === comment.id}\n            onClick={() => selectComment(comment.id)}\n            onResolve={() => resolveComment(comment.id)}\n          />\n        );\n      })}\n\n      {/* Pending comment input */}\n      {pendingCommentPosition && <PendingCommentInput position={pendingCommentPosition} />}\n\n      {/* Comment mode instructions */}\n      {commentMode && (\n        <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-4 py-2 rounded-lg shadow-md border border-blue-200 dark:border-blue-700\">\n            <CommentOutlined className=\"mr-2\" />\n            Click anywhere on the canvas to add a comment\n          </div>\n        </div>\n      )}\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx",
        "start": 1,
        "end": 435,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 435,
          "column": 2,
          "position": 3312
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 8,
        "end": 442,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 442,
          "column": 2,
          "position": 3403
        }
      }
    },
    {
      "format": "javascript",
      "lines": 499,
      "fragment": "={isConnected ? 'processing' : 'error'}\n          text={connectionStatus}\n          className=\"capitalize\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        {/* Current user */}\n        {currentUser && (\n          <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={currentUser.avatar}\n                style={{ backgroundColor: getUserColor(currentUser.id) }}\n              >\n                {currentUser.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {currentUser.name} (You)\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">{currentUser.email}</div>\n              </div>\n              <Badge status=\"processing\" />\n            </div>\n          </Card>\n        )}\n\n        {/* Other users */}\n        {userPresences.map((presence) => (\n          <Card key={presence.userId} size=\"small\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={presence.user.avatar}\n                style={{ backgroundColor: getUserColor(presence.userId) }}\n              >\n                {presence.user.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {presence.user.name}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {presence.user.email}\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end\">\n                <Badge\n                  status={presence.user.status === 'online' ? 'success' : 'default'}\n                  text={presence.user.status}\n                />\n                {presence.cursor && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Cursor: {Math.round(presence.cursor.x)}, {Math.round(presence.cursor.y)}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {userPresences.length === 0 && !currentUser && (\n        <Empty description=\"No active users\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n\n      <Divider />\n\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Presence Settings</h4>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Cursors</span>\n          <Switch size=\"small\" checked={showUserCursors} onChange={toggleUserCursors} />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Selections</span>\n          <Switch size=\"small\" checked={showUserSelections} onChange={toggleUserSelections} />\n        </div>\n      </div>\n    </div>\n  );\n\n  // Comments Tab\n  const CommentsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Comments ({activeComments.length})\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"small\"\n            type={commentMode ? 'primary' : 'default'}\n            icon={<CommentOutlined />}\n            onClick={toggleCommentMode}\n          >\n            {commentMode ? 'Cancel' : 'Add Comment'}\n          </Button>\n          <Switch\n            size=\"small\"\n            checked={showComments}\n            onChange={toggleComments}\n            checkedChildren=\"Show\"\n            unCheckedChildren=\"Hide\"\n          />\n        </div>\n      </div>\n\n      {commentMode && (\n        <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n          <div className=\"space-y-2\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Click on the canvas to place a comment, or add a general comment below.\n            </div>\n            <TextArea\n              rows={3}\n              placeholder=\"Add your comment...\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => setNewCommentPosition({ x: 100, y: 100 })}\n                disabled={!newCommentContent.trim()}\n              >\n                Add General Comment\n              </Button>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim() || !newCommentPosition}\n              >\n                Post Comment\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"space-y-3\">\n        {activeComments.length === 0 ? (\n          <Empty description=\"No active comments\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n        ) : (\n          activeComments.map((comment) => (\n            <Card\n              key={comment.id}\n              size=\"small\"\n              className={selectedCommentId === comment.id ? 'border-blue-500 shadow-md' : ''}\n              onClick={() => selectComment(comment.id)}\n            >\n              <div className=\"space-y-2\">\n                {/* Comment header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={24}\n                      src={comment.author.avatar}\n                      style={{ backgroundColor: getUserColor(comment.author.id) }}\n                    >\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    {comment.nodeId && <Tag color=\"blue\">Node Comment</Tag>}\n                    <Tooltip title=\"Resolve Comment\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<CheckOutlined />}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          resolveComment(comment.id);\n                        }}\n                      />\n                    </Tooltip>\n                  </div>\n                </div>\n\n                {/* Comment content */}\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 ml-8\">\n                  {comment.content}\n                </div>\n\n                {/* Replies */}\n                {comment.replies.length > 0 && (\n                  <div className=\"ml-8 space-y-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    {comment.replies.map((reply) => (\n                      <div key={reply.id} className=\"flex space-x-2\">\n                        <Avatar\n                          size={20}\n                          src={reply.author.avatar}\n                          style={{ backgroundColor: getUserColor(reply.author.id) }}\n                        >\n                          {reply.author.name.charAt(0).toUpperCase()}\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            {reply.content}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Reply input */}\n                <div className=\"ml-8 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      size=\"small\"\n                      placeholder=\"Reply...\"\n                      value={replyContents[comment.id] || ''}\n                      onChange={(e) =>\n                        setReplyContents({\n                          ...replyContents,\n                          [comment.id]: e.target.value,\n                        })\n                      }\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts.length} status=\"error\" />}\n      </div>\n\n      {activeConflicts.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <CheckOutlined className=\"text-4xl text-green-500 mb-2\" />\n          <div className=\"text-gray-600 dark:text-gray-400\">No conflicts detected</div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {activeConflicts.map((conflict) => (\n            <Card\n              key={conflict.id}\n              size=\"small\"\n              className=\"border-red-200 bg-red-50 dark:bg-red-900/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <ExclamationCircleOutlined className=\"text-red-500\" />\n                      <span className=\"font-medium text-red-700 dark:text-red-300\">\n                        {conflict.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      Affected nodes: {conflict.affectedNodes.join(', ')}\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(conflict.timestamp).toLocaleString()}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"small\"\n                    type=\"primary\"\n                    danger\n                    onClick={() => {\n                      setSelectedConflict(conflict);\n                      setConflictModalVisible(true);\n                    }}\n                  >\n                    Resolve\n                  </Button>\n                </div>\n\n                <div className=\"pl-6\">\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    {conflict.operations.length} conflicting operations\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  // Activity Tab\n  const ActivityTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Recent Activity</h3>\n\n      <Timeline className=\"mt-4\">\n        {operationHistory\n          .slice(-10)\n          .reverse()\n          .map((operation) => (\n            <Timeline.Item\n              key={operation.id}\n              dot={\n                <Avatar size={20} style={{ backgroundColor: getUserColor(operation.userId) }}>\n                  {operation.userId.charAt(0).toUpperCase()}\n                </Avatar>\n              }\n            >\n              <div className=\"space-y-1\">\n                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {operation.type.replace('_', ' ')}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(operation.timestamp).toLocaleString()}\n                </div>\n                {operation.data?.nodeId && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Node: {operation.data.nodeId}\n                  </div>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n      </Timeline>\n\n      {operationHistory.length === 0 && (\n        <Empty description=\"No recent activity\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      <Drawer\n        title=\"Collaboration\"\n        placement=\"right\"\n        onClose={onToggle}\n        open={isVisible}\n        width={400}\n        className=\"collaboration-drawer\"\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"h-full\">\n          <TabPane\n            tab={\n              <span>\n                <TeamOutlined />\n                Users\n              </span>\n            }\n            key=\"users\"\n          >\n            <UsersTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CommentOutlined />\n                Comments\n                {activeComments.length > 0 && (\n                  <Badge count={activeComments.length} size=\"small\" style={{ marginLeft: 4 }} />\n                )}\n              </span>\n            }\n            key=\"comments\"\n          >\n            <CommentsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <WarningOutlined />\n                Conflicts\n                {activeConflicts.length > 0 && (\n                  <Badge\n                    count={activeConflicts.length}\n                    size=\"small\"\n                    status=\"error\"\n                    style={{ marginLeft: 4 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"conflicts\"\n          >\n            <ConflictsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ClockCircleOutlined />\n                Activity\n              </span>\n            }\n            key=\"activity\"\n          >\n            <ActivityTab />\n          </TabPane>\n        </Tabs>\n      </Drawer>\n\n      {/* Conflict Resolution Modal */}\n      <Modal\n        title=\"Resolve Conflict\"\n        open={conflictModalVisible}\n        onCancel={() => {\n          setConflictModalVisible(false);\n          setSelectedConflict(null);\n        }}\n        footer={null}\n        width={600}\n      >\n        {selectedConflict && (\n          <div className=\"space-y-4\">\n            <Alert\n              type=\"warning\"\n              message={`${selectedConflict.type.replace('_', ' ')} Conflict`}\n              description={`This conflict involves ${selectedConflict.operations.length} operations affecting ${selectedConflict.affectedNodes.length} nodes.`}\n            />\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Choose Resolution Strategy:</h4>\n\n              <Radio.Group className=\"w-full\" size=\"small\">\n                <div className=\"space-y-2\">\n                  <Radio value=\"last_write_wins\">\n                    <div>\n                      <div className=\"font-medium\">Last Write Wins</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Keep the most recent changes and discard older ones\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"merge\">\n                    <div>\n                      <div className=\"font-medium\">Smart Merge</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Attempt to automatically merge compatible changes\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"manual\">\n                    <div>\n                      <div className=\"font-medium\">Manual Resolution</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Review each change individually and decide\n                      </div>\n                    </div>\n                  </Radio>\n                </div>\n              </Radio.Group>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button onClick={() => setConflictModalVisible(false)}>Cancel</Button>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  handleResolveConflict(selectedConflict, {\n                    strategy: 'last_write_wins',\n                  })\n                }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx",
        "start": 157,
        "end": 655,
        "startLoc": {
          "line": 157,
          "column": 7,
          "position": 1174
        },
        "endLoc": {
          "line": 655,
          "column": 2,
          "position": 5029
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 161,
        "end": 659,
        "startLoc": {
          "line": 161,
          "column": 7,
          "position": 1226
        },
        "endLoc": {
          "line": 659,
          "column": 2,
          "position": 5081
        }
      }
    },
    {
      "format": "tsx",
      "lines": 665,
      "fragment": "/**\n * Collaboration Panel\n *\n * Real-time collaboration interface with user presence, comments,\n * conflict resolution, and collaboration settings. Inspired by\n * Figma's collaboration features and Google Docs comments.\n */\n\nimport {\n  CheckOutlined,\n  ClockCircleOutlined,\n  CommentOutlined,\n  ExclamationCircleOutlined,\n  SendOutlined,\n  TeamOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Divider,\n  Drawer,\n  Empty,\n  Input,\n  Modal,\n  Radio,\n  Switch,\n  Tabs,\n  Tag,\n  Timeline,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useState } from 'react';\nimport type { CollaborationConflict } from '../../../core/services/collaborationService';\nimport { useCollaborationStore } from '../../../core/stores/collaborationStore';\nimport { useLeanWorkflowStore } from '../../../core/stores/leanWorkflowStore';\n\nconst { TextArea } = Input;\nconst { TabPane } = Tabs;\n\ninterface CollaborationPanelProps {\n  isVisible: boolean;\n  onToggle: () => void;\n}\n\nexport const CollaborationPanel: React.FC<CollaborationPanelProps> = ({ isVisible, onToggle }) => {\n  const [activeTab, setActiveTab] = useState('users');\n  const [newCommentContent, setNewCommentContent] = useState('');\n  const [newCommentPosition, setNewCommentPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n  const [replyContents, setReplyContents] = useState<Record<string, string>>({});\n  const [conflictModalVisible, setConflictModalVisible] = useState(false);\n  const [selectedConflict, setSelectedConflict] = useState<CollaborationConflict | null>(null);\n\n  const {\n    isConnected,\n    connectionStatus,\n    currentUser,\n    userPresences,\n    operationHistory,\n    activeComments,\n    activeConflicts,\n    selectedCommentId,\n    showUserCursors,\n    showUserSelections,\n    showComments,\n    commentMode,\n    addComment,\n    replyToComment,\n    resolveComment,\n    resolveConflict,\n    selectComment,\n    toggleCommentMode,\n    toggleUserCursors,\n    toggleUserSelections,\n    toggleComments,\n  } = useCollaborationStore();\n\n  const { selectedNodeIds, currentWorkflow } = useLeanWorkflowStore();\n\n  // Generate user colors for consistent display\n  const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle adding a comment\n  const handleAddComment = useCallback(async () => {\n    if (!newCommentContent.trim() || !newCommentPosition) return;\n\n    try {\n      await addComment({\n        workflowId: currentWorkflow?.id || '',\n        content: newCommentContent,\n        position: newCommentPosition,\n        nodeId: selectedNodeIds.length === 1 ? selectedNodeIds[0] : undefined,\n        resolved: false,\n        mentions: [], // TODO: Parse mentions from content\n      });\n\n      setNewCommentContent('');\n      setNewCommentPosition(null);\n    } catch (_error) {}\n  }, [newCommentContent, newCommentPosition, selectedNodeIds, addComment, currentWorkflow?.id]);\n\n  // Handle replying to a comment\n  const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Handle conflict resolution\n  const handleResolveConflict = useCallback(\n    async (conflict: CollaborationConflict, resolution: any) => {\n      try {\n        await resolveConflict(conflict.id, resolution);\n        setConflictModalVisible(false);\n        setSelectedConflict(null);\n      } catch (_error) {}\n    },\n    [resolveConflict]\n  );\n\n  // Users Tab\n  const UsersTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Active Users ({userPresences.length + (currentUser ? 1 : 0)})\n        </h3>\n        <Badge\n          status={isConnected ? 'processing' : 'error'}\n          text={connectionStatus}\n          className=\"capitalize\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        {/* Current user */}\n        {currentUser && (\n          <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={currentUser.avatar}\n                style={{ backgroundColor: getUserColor(currentUser.id) }}\n              >\n                {currentUser.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {currentUser.name} (You)\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">{currentUser.email}</div>\n              </div>\n              <Badge status=\"processing\" />\n            </div>\n          </Card>\n        )}\n\n        {/* Other users */}\n        {userPresences.map((presence) => (\n          <Card key={presence.userId} size=\"small\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={presence.user.avatar}\n                style={{ backgroundColor: getUserColor(presence.userId) }}\n              >\n                {presence.user.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {presence.user.name}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {presence.user.email}\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end\">\n                <Badge\n                  status={presence.user.status === 'online' ? 'success' : 'default'}\n                  text={presence.user.status}\n                />\n                {presence.cursor && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Cursor: {Math.round(presence.cursor.x)}, {Math.round(presence.cursor.y)}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {userPresences.length === 0 && !currentUser && (\n        <Empty description=\"No active users\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n\n      <Divider />\n\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Presence Settings</h4>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Cursors</span>\n          <Switch size=\"small\" checked={showUserCursors} onChange={toggleUserCursors} />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Selections</span>\n          <Switch size=\"small\" checked={showUserSelections} onChange={toggleUserSelections} />\n        </div>\n      </div>\n    </div>\n  );\n\n  // Comments Tab\n  const CommentsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Comments ({activeComments.length})\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"small\"\n            type={commentMode ? 'primary' : 'default'}\n            icon={<CommentOutlined />}\n            onClick={toggleCommentMode}\n          >\n            {commentMode ? 'Cancel' : 'Add Comment'}\n          </Button>\n          <Switch\n            size=\"small\"\n            checked={showComments}\n            onChange={toggleComments}\n            checkedChildren=\"Show\"\n            unCheckedChildren=\"Hide\"\n          />\n        </div>\n      </div>\n\n      {commentMode && (\n        <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n          <div className=\"space-y-2\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Click on the canvas to place a comment, or add a general comment below.\n            </div>\n            <TextArea\n              rows={3}\n              placeholder=\"Add your comment...\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => setNewCommentPosition({ x: 100, y: 100 })}\n                disabled={!newCommentContent.trim()}\n              >\n                Add General Comment\n              </Button>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim() || !newCommentPosition}\n              >\n                Post Comment\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"space-y-3\">\n        {activeComments.length === 0 ? (\n          <Empty description=\"No active comments\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n        ) : (\n          activeComments.map((comment) => (\n            <Card\n              key={comment.id}\n              size=\"small\"\n              className={selectedCommentId === comment.id ? 'border-blue-500 shadow-md' : ''}\n              onClick={() => selectComment(comment.id)}\n            >\n              <div className=\"space-y-2\">\n                {/* Comment header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={24}\n                      src={comment.author.avatar}\n                      style={{ backgroundColor: getUserColor(comment.author.id) }}\n                    >\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    {comment.nodeId && <Tag color=\"blue\">Node Comment</Tag>}\n                    <Tooltip title=\"Resolve Comment\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<CheckOutlined />}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          resolveComment(comment.id);\n                        }}\n                      />\n                    </Tooltip>\n                  </div>\n                </div>\n\n                {/* Comment content */}\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 ml-8\">\n                  {comment.content}\n                </div>\n\n                {/* Replies */}\n                {comment.replies.length > 0 && (\n                  <div className=\"ml-8 space-y-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    {comment.replies.map((reply) => (\n                      <div key={reply.id} className=\"flex space-x-2\">\n                        <Avatar\n                          size={20}\n                          src={reply.author.avatar}\n                          style={{ backgroundColor: getUserColor(reply.author.id) }}\n                        >\n                          {reply.author.name.charAt(0).toUpperCase()}\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            {reply.content}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Reply input */}\n                <div className=\"ml-8 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      size=\"small\"\n                      placeholder=\"Reply...\"\n                      value={replyContents[comment.id] || ''}\n                      onChange={(e) =>\n                        setReplyContents({\n                          ...replyContents,\n                          [comment.id]: e.target.value,\n                        })\n                      }\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts.length} status=\"error\" />}\n      </div>\n\n      {activeConflicts.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <CheckOutlined className=\"text-4xl text-green-500 mb-2\" />\n          <div className=\"text-gray-600 dark:text-gray-400\">No conflicts detected</div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {activeConflicts.map((conflict) => (\n            <Card\n              key={conflict.id}\n              size=\"small\"\n              className=\"border-red-200 bg-red-50 dark:bg-red-900/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <ExclamationCircleOutlined className=\"text-red-500\" />\n                      <span className=\"font-medium text-red-700 dark:text-red-300\">\n                        {conflict.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      Affected nodes: {conflict.affectedNodes.join(', ')}\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(conflict.timestamp).toLocaleString()}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"small\"\n                    type=\"primary\"\n                    danger\n                    onClick={() => {\n                      setSelectedConflict(conflict);\n                      setConflictModalVisible(true);\n                    }}\n                  >\n                    Resolve\n                  </Button>\n                </div>\n\n                <div className=\"pl-6\">\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    {conflict.operations.length} conflicting operations\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  // Activity Tab\n  const ActivityTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Recent Activity</h3>\n\n      <Timeline className=\"mt-4\">\n        {operationHistory\n          .slice(-10)\n          .reverse()\n          .map((operation) => (\n            <Timeline.Item\n              key={operation.id}\n              dot={\n                <Avatar size={20} style={{ backgroundColor: getUserColor(operation.userId) }}>\n                  {operation.userId.charAt(0).toUpperCase()}\n                </Avatar>\n              }\n            >\n              <div className=\"space-y-1\">\n                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {operation.type.replace('_', ' ')}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(operation.timestamp).toLocaleString()}\n                </div>\n                {operation.data?.nodeId && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Node: {operation.data.nodeId}\n                  </div>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n      </Timeline>\n\n      {operationHistory.length === 0 && (\n        <Empty description=\"No recent activity\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      <Drawer\n        title=\"Collaboration\"\n        placement=\"right\"\n        onClose={onToggle}\n        open={isVisible}\n        width={400}\n        className=\"collaboration-drawer\"\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"h-full\">\n          <TabPane\n            tab={\n              <span>\n                <TeamOutlined />\n                Users\n              </span>\n            }\n            key=\"users\"\n          >\n            <UsersTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CommentOutlined />\n                Comments\n                {activeComments.length > 0 && (\n                  <Badge count={activeComments.length} size=\"small\" style={{ marginLeft: 4 }} />\n                )}\n              </span>\n            }\n            key=\"comments\"\n          >\n            <CommentsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <WarningOutlined />\n                Conflicts\n                {activeConflicts.length > 0 && (\n                  <Badge\n                    count={activeConflicts.length}\n                    size=\"small\"\n                    status=\"error\"\n                    style={{ marginLeft: 4 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"conflicts\"\n          >\n            <ConflictsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ClockCircleOutlined />\n                Activity\n              </span>\n            }\n            key=\"activity\"\n          >\n            <ActivityTab />\n          </TabPane>\n        </Tabs>\n      </Drawer>\n\n      {/* Conflict Resolution Modal */}\n      <Modal\n        title=\"Resolve Conflict\"\n        open={conflictModalVisible}\n        onCancel={() => {\n          setConflictModalVisible(false);\n          setSelectedConflict(null);\n        }}\n        footer={null}\n        width={600}\n      >\n        {selectedConflict && (\n          <div className=\"space-y-4\">\n            <Alert\n              type=\"warning\"\n              message={`${selectedConflict.type.replace('_', ' ')} Conflict`}\n              description={`This conflict involves ${selectedConflict.operations.length} operations affecting ${selectedConflict.affectedNodes.length} nodes.`}\n            />\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Choose Resolution Strategy:</h4>\n\n              <Radio.Group className=\"w-full\" size=\"small\">\n                <div className=\"space-y-2\">\n                  <Radio value=\"last_write_wins\">\n                    <div>\n                      <div className=\"font-medium\">Last Write Wins</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Keep the most recent changes and discard older ones\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"merge\">\n                    <div>\n                      <div className=\"font-medium\">Smart Merge</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Attempt to automatically merge compatible changes\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"manual\">\n                    <div>\n                      <div className=\"font-medium\">Manual Resolution</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Review each change individually and decide\n                      </div>\n                    </div>\n                  </Radio>\n                </div>\n              </Radio.Group>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button onClick={() => setConflictModalVisible(false)}>Cancel</Button>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  handleResolveConflict(selectedConflict, {\n                    strategy: 'last_write_wins',\n                  })\n                }\n              >\n                Resolve Conflict\n              </Button>\n            </div>\n          </div>\n        )}\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx",
        "start": 1,
        "end": 665,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 665,
          "column": 2,
          "position": 5072
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 5,
        "end": 669,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 669,
          "column": 2,
          "position": 5124
        }
      }
    },
    {
      "format": "javascript",
      "lines": 615,
      "fragment": "={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Executions\"\n              value={executionSummary?.totalExecutions || 0}\n              prefix={<ThunderboltOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Success Rate\"\n              value={executionSummary?.successRate || 0}\n              suffix=\"%\"\n              precision={1}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{\n                color: (executionSummary?.successRate || 0) >= 95 ? '#3f8600' : '#cf1322',\n              }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Duration\"\n              value={formatDuration(executionSummary?.avgDuration || 0)}\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Efficiency Score\"\n              value={executionSummary?.efficiency || 0}\n              suffix=\"/100\"\n              precision={0}\n              prefix={<BarChartOutlined />}\n              valueStyle={{\n                color: (executionSummary?.efficiency || 0) >= 80 ? '#3f8600' : '#faad14',\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Performance Trend Chart */}\n      <Card title=\"Performance Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={performanceHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Duration']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.primary}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Alerts and Insights Row */}\n      <Row gutter={[16, 16]}>\n        {/* Top Bottlenecks */}\n        <Col span={12}>\n          <Card title=\"Top Performance Issues\" size=\"small\">\n            {topBottlenecks.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={topBottlenecks}\n                renderItem={(bottleneck) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={\n                        <Badge status={bottleneck.severity === 'critical' ? 'error' : 'warning'} />\n                      }\n                      title={\n                        <span>\n                          {bottleneck.description}\n                          <Tag\n                            color={\n                              bottleneck.severity === 'critical'\n                                ? 'red'\n                                : bottleneck.severity === 'high'\n                                  ? 'orange'\n                                  : 'yellow'\n                            }\n                            className=\"ml-2\"\n                          >\n                            {bottleneck.severity}\n                          </Tag>\n                        </span>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">{bottleneck.impact}</div>\n                          <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No performance issues detected\" />\n            )}\n          </Card>\n        </Col>\n\n        {/* Predictive Insights */}\n        <Col span={12}>\n          <Card title=\"AI Predictions\" size=\"small\">\n            {predictiveInsights.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={predictiveInsights}\n                renderItem={(insight) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={<RobotOutlined className=\"text-blue-500\" />}\n                      title={\n                        <div className=\"flex items-center\">\n                          <span>{insight.description}</span>\n                          <Tag color=\"blue\" className=\"ml-2\">\n                            {Math.round(insight.confidence * 100)}% confidence\n                          </Tag>\n                        </div>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">Impact: {insight.predictedImpact}</div>\n                          <div className=\"text-green-600 mt-1\">Timeframe: {insight.timeframe}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No predictions available\" />\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  // Performance Tab Component\n  const PerformanceTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Performance Charts Row */}\n      <Row gutter={[16, 16]}>\n        <Col span={12}>\n          <Card title=\"Execution Performance\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance']}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.primary}\n                  fill={chartColors.primary}\n                  fillOpacity={0.6}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n\n        <Col span={12}>\n          <Card title=\"Reliability Trend\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={reliabilityHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis domain={[0, 100]} />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(1)}%`, 'Success Rate']}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.success}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Node Performance Table */}\n      <Card title=\"Node Performance Analysis\" size=\"small\">\n        <Table\n          size=\"small\"\n          dataSource={currentAnalytics?.nodePerformance || []}\n          rowKey=\"nodeId\"\n          pagination={{ pageSize: 10 }}\n          columns={[\n            {\n              title: 'Node',\n              dataIndex: 'nodeName',\n              key: 'nodeName',\n              render: (name: string, record: NodePerformanceStats) => (\n                <div>\n                  <div className=\"font-medium\">{name}</div>\n                  <div className=\"text-xs text-gray-500\">{record.nodeType}</div>\n                </div>\n              ),\n            },\n            {\n              title: 'Executions',\n              dataIndex: 'executionCount',\n              key: 'executionCount',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.executionCount - b.executionCount,\n            },\n            {\n              title: 'Avg Duration',\n              dataIndex: 'averageDuration',\n              key: 'averageDuration',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.averageDuration - b.averageDuration,\n              render: (duration: number) => formatDuration(duration),\n            },\n            {\n              title: 'Success Rate',\n              dataIndex: 'failureRate',\n              key: 'failureRate',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.failureRate - b.failureRate,\n              render: (failureRate: number) => (\n                <span style={{ color: failureRate > 0.1 ? '#ff4d4f' : '#52c41a' }}>\n                  {((1 - failureRate) * 100).toFixed(1)}%\n                </span>\n              ),\n            },\n            {\n              title: 'Trend',\n              dataIndex: 'trend',\n              key: 'trend',\n              render: (trend: string) => (\n                <Tag\n                  color={trend === 'improving' ? 'green' : trend === 'degrading' ? 'red' : 'blue'}\n                >\n                  {trend}\n                </Tag>\n              ),\n            },\n            {\n              title: 'Actions',\n              key: 'actions',\n              render: (_, record: NodePerformanceStats) => (\n                <Button type=\"link\" size=\"small\" onClick={() => setSelectedNode(record.nodeId)}>\n                  Analyze\n                </Button>\n              ),\n            },\n          ]}\n        />\n      </Card>\n    </div>\n  );\n\n  // Cost Tab Component\n  const CostTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Cost Overview */}\n      <Row gutter={[16, 16]}>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Current Period Cost\"\n              value={costOptimization?.currentCost || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<DollarCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Potential Savings\"\n              value={costOptimization?.savings || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<RiseOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Cost Trend\"\n              value={costTrend}\n              suffix=\"%\"\n              precision={1}\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: costTrend > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Cost Chart */}\n      <Card title=\"Cost Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={costHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis tickFormatter={(value) => formatCurrency(value)} />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [formatCurrency(value), 'Cost']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.warning}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Cost Optimization Recommendations */}\n      {costOptimization && (\n        <Card title=\"Optimization Recommendations\" size=\"small\">\n          <List\n            dataSource={costOptimization.recommendations}\n            renderItem={(recommendation) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={<DollarCircleOutlined className=\"text-green-500\" />}\n                  title={\n                    <div className=\"flex items-center justify-between\">\n                      <span>{recommendation.description}</span>\n                      <Tag color=\"green\">\n                        Save {formatCurrency(recommendation.estimatedSavings)}\n                      </Tag>\n                    </div>\n                  }\n                  description={\n                    <div className=\"text-sm\">\n                      <div className=\"text-gray-600\">{recommendation.implementation}</div>\n                      <Tag\n                        color={\n                          recommendation.impact === 'high'\n                            ? 'red'\n                            : recommendation.impact === 'medium'\n                              ? 'orange'\n                              : 'blue'\n                        }\n                        className=\"mt-1\"\n                      >\n                        {recommendation.impact} impact\n                      </Tag>\n                    </div>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  // Insights Tab Component\n  const InsightsTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Predictive Insights */}\n      <Card title=\"Predictive Analytics\" size=\"small\">\n        {predictiveInsights.length > 0 ? (\n          <List\n            dataSource={predictiveInsights}\n            renderItem={(insight) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <RobotOutlined className=\"text-blue-500 mr-2\" />\n                        {insight.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag color=\"blue\">{Math.round(insight.confidence * 100)}% confidence</Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{insight.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Timeframe:</span>\n                        <div>{insight.timeframe}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Expected Impact:</span>\n                        <div>{insight.predictedImpact}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommended Actions:</span>\n                      <ul className=\"mt-2 space-y-1\">\n                        {insight.recommendedActions.map((action, index) => (\n                          <li key={index} className=\"text-sm text-green-600\">\n                            • {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"text-xs text-gray-500\">\n                      Based on: {insight.basedOn.join(', ')}\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No predictive insights available\" />\n        )}\n      </Card>\n\n      {/* Bottleneck Analysis */}\n      <Card title=\"Bottleneck Analysis\" size=\"small\">\n        {bottlenecks.length > 0 ? (\n          <List\n            dataSource={bottlenecks}\n            renderItem={(bottleneck) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <WarningOutlined\n                          className={`mr-2 ${\n                            bottleneck.severity === 'critical'\n                              ? 'text-red-500'\n                              : bottleneck.severity === 'high'\n                                ? 'text-orange-500'\n                                : 'text-yellow-500'\n                          }`}\n                        />\n                        {bottleneck.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag\n                        color={\n                          bottleneck.severity === 'critical'\n                            ? 'red'\n                            : bottleneck.severity === 'high'\n                              ? 'orange'\n                              : 'yellow'\n                        }\n                      >\n                        {bottleneck.severity}\n                      </Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{bottleneck.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Impact:</span>\n                        <div>{bottleneck.impact}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Improvement:</span>\n                        <div className=\"text-green-600\">{bottleneck.estimatedImprovement}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommendation:</span>\n                      <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No bottlenecks detected\" />\n        )}\n      </Card>\n    </div>\n  );\n\n  // Settings and Controls\n  const AnalyticsHeader: React.FC = () => (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex items-center space-x-4\">\n        <Select value={analyticsPeriod} onChange={setAnalyticsPeriod} style={{ width: 120 }}>\n          <Option value={1}>Last 24h</Option>\n          <Option value={7}>Last 7 days</Option>\n          <Option value={30}>Last 30 days</Option>\n          <Option value={90}>Last 90 days</Option>\n        </Select>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-600\">Auto-refresh:</span>\n          <Switch size=\"small\" checked={autoRefresh} onChange={toggleAutoRefresh} />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {lastUpdated && (\n          <span className=\"text-xs text-gray-500\">\n            Updated: {new Date(lastUpdated).toLocaleTimeString()}\n          </span>\n        )}\n\n        <Button\n          type=\"text\"\n          icon={<ReloadOutlined />}\n          onClick={refreshAnalytics}\n          loading={isLoading}\n        >\n          Refresh\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      title=\"Workflow Analytics Dashboard\"\n      open={isOpen}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className=\"analytics-dashboard-modal\"\n    >\n      <AnalyticsHeader />\n\n      <Tabs\n        activeKey={selectedTab}\n        onChange={(key) => setSelectedTab(key as any)}\n        className=\"analytics-tabs\"\n      >\n        <TabPane\n          tab={\n            <span>\n              <DashboardOutlined />\n              Overview\n            </span>\n          }\n          key=\"overview\"\n        >\n          <OverviewTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Performance\n            </span>\n          }\n          key=\"performance\"\n        >\n          <PerformanceTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <DollarCircleOutlined />\n              Costs\n            </span>\n          }\n          key=\"costs\"\n        >\n          <CostTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BulbOutlined />\n              Insights\n            </span>\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx",
        "start": 128,
        "end": 742,
        "startLoc": {
          "line": 128,
          "column": 7,
          "position": 714
        },
        "endLoc": {
          "line": 742,
          "column": 2,
          "position": 5361
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 131,
        "end": 745,
        "startLoc": {
          "line": 131,
          "column": 7,
          "position": 753
        },
        "endLoc": {
          "line": 745,
          "column": 2,
          "position": 5400
        }
      }
    },
    {
      "format": "tsx",
      "lines": 750,
      "fragment": "/**\n * Analytics Dashboard\n *\n * Comprehensive analytics and performance monitoring dashboard providing\n * insights, bottleneck detection, cost optimization, and predictive analytics.\n * Inspired by DataDog, New Relic, and Grafana dashboards.\n */\n\nimport {\n  BarChartOutlined,\n  BulbOutlined,\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  DashboardOutlined,\n  DollarCircleOutlined,\n  ReloadOutlined,\n  RiseOutlined,\n  RobotOutlined,\n  ThunderboltOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  Col,\n  Empty,\n  List,\n  Modal,\n  Row,\n  Select,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useMemo } from 'react';\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport type { NodePerformanceStats } from '../../../core/services/analyticsService';\nimport {\n  formatCurrency,\n  formatDuration,\n  getCostTrend,\n  getExecutionSummary,\n  getTopBottlenecks,\n  useAnalyticsStore,\n} from '../../../core/stores/analyticsStore';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\ninterface AnalyticsDashboardProps {\n  isOpen: boolean;\n  onClose: () => void;\n  workflowId?: string;\n}\n\nexport const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({\n  isOpen,\n  onClose,\n  workflowId,\n}) => {\n  const {\n    currentAnalytics,\n    isLoading,\n    lastUpdated,\n    bottlenecks,\n    predictiveInsights,\n    costOptimization,\n    performanceHistory,\n    costHistory,\n    reliabilityHistory,\n    selectedTab,\n    analyticsPeriod,\n    // showPredictions,  // TODO: Implement predictions UI\n    // showCostAnalysis, // TODO: Implement cost analysis UI\n    autoRefresh,\n    // selectedNodeId,   // TODO: Implement node selection\n    setSelectedTab,\n    setAnalyticsPeriod,\n    toggleAutoRefresh,\n    // togglePredictions,  // TODO: Implement predictions toggle\n    // toggleCostAnalysis, // TODO: Implement cost analysis toggle\n    setSelectedNode,\n    loadAnalytics,\n    refreshAnalytics,\n  } = useAnalyticsStore();\n\n  // Load analytics when modal opens\n  useEffect(() => {\n    if (isOpen && workflowId && workflowId !== currentAnalytics?.workflowId) {\n      loadAnalytics(workflowId);\n    }\n  }, [isOpen, workflowId, loadAnalytics, currentAnalytics?.workflowId]);\n\n  const executionSummary = useMemo(() => getExecutionSummary(currentAnalytics), [currentAnalytics]);\n\n  const topBottlenecks = useMemo(() => getTopBottlenecks(bottlenecks, 5), [bottlenecks]);\n\n  const costTrend = useMemo(() => getCostTrend(costHistory), [costHistory]);\n\n  // Chart colors\n  const chartColors = {\n    primary: '#1890ff',\n    success: '#52c41a',\n    warning: '#faad14',\n    danger: '#ff4d4f',\n    purple: '#722ed1',\n    cyan: '#13c2c2',\n  };\n\n  // Overview Tab Component\n  const OverviewTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Executions\"\n              value={executionSummary?.totalExecutions || 0}\n              prefix={<ThunderboltOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Success Rate\"\n              value={executionSummary?.successRate || 0}\n              suffix=\"%\"\n              precision={1}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{\n                color: (executionSummary?.successRate || 0) >= 95 ? '#3f8600' : '#cf1322',\n              }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Duration\"\n              value={formatDuration(executionSummary?.avgDuration || 0)}\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Efficiency Score\"\n              value={executionSummary?.efficiency || 0}\n              suffix=\"/100\"\n              precision={0}\n              prefix={<BarChartOutlined />}\n              valueStyle={{\n                color: (executionSummary?.efficiency || 0) >= 80 ? '#3f8600' : '#faad14',\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Performance Trend Chart */}\n      <Card title=\"Performance Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={performanceHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Duration']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.primary}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Alerts and Insights Row */}\n      <Row gutter={[16, 16]}>\n        {/* Top Bottlenecks */}\n        <Col span={12}>\n          <Card title=\"Top Performance Issues\" size=\"small\">\n            {topBottlenecks.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={topBottlenecks}\n                renderItem={(bottleneck) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={\n                        <Badge status={bottleneck.severity === 'critical' ? 'error' : 'warning'} />\n                      }\n                      title={\n                        <span>\n                          {bottleneck.description}\n                          <Tag\n                            color={\n                              bottleneck.severity === 'critical'\n                                ? 'red'\n                                : bottleneck.severity === 'high'\n                                  ? 'orange'\n                                  : 'yellow'\n                            }\n                            className=\"ml-2\"\n                          >\n                            {bottleneck.severity}\n                          </Tag>\n                        </span>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">{bottleneck.impact}</div>\n                          <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No performance issues detected\" />\n            )}\n          </Card>\n        </Col>\n\n        {/* Predictive Insights */}\n        <Col span={12}>\n          <Card title=\"AI Predictions\" size=\"small\">\n            {predictiveInsights.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={predictiveInsights}\n                renderItem={(insight) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={<RobotOutlined className=\"text-blue-500\" />}\n                      title={\n                        <div className=\"flex items-center\">\n                          <span>{insight.description}</span>\n                          <Tag color=\"blue\" className=\"ml-2\">\n                            {Math.round(insight.confidence * 100)}% confidence\n                          </Tag>\n                        </div>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">Impact: {insight.predictedImpact}</div>\n                          <div className=\"text-green-600 mt-1\">Timeframe: {insight.timeframe}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No predictions available\" />\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  // Performance Tab Component\n  const PerformanceTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Performance Charts Row */}\n      <Row gutter={[16, 16]}>\n        <Col span={12}>\n          <Card title=\"Execution Performance\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance']}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.primary}\n                  fill={chartColors.primary}\n                  fillOpacity={0.6}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n\n        <Col span={12}>\n          <Card title=\"Reliability Trend\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={reliabilityHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis domain={[0, 100]} />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(1)}%`, 'Success Rate']}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.success}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Node Performance Table */}\n      <Card title=\"Node Performance Analysis\" size=\"small\">\n        <Table\n          size=\"small\"\n          dataSource={currentAnalytics?.nodePerformance || []}\n          rowKey=\"nodeId\"\n          pagination={{ pageSize: 10 }}\n          columns={[\n            {\n              title: 'Node',\n              dataIndex: 'nodeName',\n              key: 'nodeName',\n              render: (name: string, record: NodePerformanceStats) => (\n                <div>\n                  <div className=\"font-medium\">{name}</div>\n                  <div className=\"text-xs text-gray-500\">{record.nodeType}</div>\n                </div>\n              ),\n            },\n            {\n              title: 'Executions',\n              dataIndex: 'executionCount',\n              key: 'executionCount',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.executionCount - b.executionCount,\n            },\n            {\n              title: 'Avg Duration',\n              dataIndex: 'averageDuration',\n              key: 'averageDuration',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.averageDuration - b.averageDuration,\n              render: (duration: number) => formatDuration(duration),\n            },\n            {\n              title: 'Success Rate',\n              dataIndex: 'failureRate',\n              key: 'failureRate',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.failureRate - b.failureRate,\n              render: (failureRate: number) => (\n                <span style={{ color: failureRate > 0.1 ? '#ff4d4f' : '#52c41a' }}>\n                  {((1 - failureRate) * 100).toFixed(1)}%\n                </span>\n              ),\n            },\n            {\n              title: 'Trend',\n              dataIndex: 'trend',\n              key: 'trend',\n              render: (trend: string) => (\n                <Tag\n                  color={trend === 'improving' ? 'green' : trend === 'degrading' ? 'red' : 'blue'}\n                >\n                  {trend}\n                </Tag>\n              ),\n            },\n            {\n              title: 'Actions',\n              key: 'actions',\n              render: (_, record: NodePerformanceStats) => (\n                <Button type=\"link\" size=\"small\" onClick={() => setSelectedNode(record.nodeId)}>\n                  Analyze\n                </Button>\n              ),\n            },\n          ]}\n        />\n      </Card>\n    </div>\n  );\n\n  // Cost Tab Component\n  const CostTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Cost Overview */}\n      <Row gutter={[16, 16]}>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Current Period Cost\"\n              value={costOptimization?.currentCost || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<DollarCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Potential Savings\"\n              value={costOptimization?.savings || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<RiseOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Cost Trend\"\n              value={costTrend}\n              suffix=\"%\"\n              precision={1}\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: costTrend > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Cost Chart */}\n      <Card title=\"Cost Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={costHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis tickFormatter={(value) => formatCurrency(value)} />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [formatCurrency(value), 'Cost']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.warning}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Cost Optimization Recommendations */}\n      {costOptimization && (\n        <Card title=\"Optimization Recommendations\" size=\"small\">\n          <List\n            dataSource={costOptimization.recommendations}\n            renderItem={(recommendation) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={<DollarCircleOutlined className=\"text-green-500\" />}\n                  title={\n                    <div className=\"flex items-center justify-between\">\n                      <span>{recommendation.description}</span>\n                      <Tag color=\"green\">\n                        Save {formatCurrency(recommendation.estimatedSavings)}\n                      </Tag>\n                    </div>\n                  }\n                  description={\n                    <div className=\"text-sm\">\n                      <div className=\"text-gray-600\">{recommendation.implementation}</div>\n                      <Tag\n                        color={\n                          recommendation.impact === 'high'\n                            ? 'red'\n                            : recommendation.impact === 'medium'\n                              ? 'orange'\n                              : 'blue'\n                        }\n                        className=\"mt-1\"\n                      >\n                        {recommendation.impact} impact\n                      </Tag>\n                    </div>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  // Insights Tab Component\n  const InsightsTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Predictive Insights */}\n      <Card title=\"Predictive Analytics\" size=\"small\">\n        {predictiveInsights.length > 0 ? (\n          <List\n            dataSource={predictiveInsights}\n            renderItem={(insight) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <RobotOutlined className=\"text-blue-500 mr-2\" />\n                        {insight.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag color=\"blue\">{Math.round(insight.confidence * 100)}% confidence</Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{insight.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Timeframe:</span>\n                        <div>{insight.timeframe}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Expected Impact:</span>\n                        <div>{insight.predictedImpact}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommended Actions:</span>\n                      <ul className=\"mt-2 space-y-1\">\n                        {insight.recommendedActions.map((action, index) => (\n                          <li key={index} className=\"text-sm text-green-600\">\n                            • {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"text-xs text-gray-500\">\n                      Based on: {insight.basedOn.join(', ')}\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No predictive insights available\" />\n        )}\n      </Card>\n\n      {/* Bottleneck Analysis */}\n      <Card title=\"Bottleneck Analysis\" size=\"small\">\n        {bottlenecks.length > 0 ? (\n          <List\n            dataSource={bottlenecks}\n            renderItem={(bottleneck) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <WarningOutlined\n                          className={`mr-2 ${\n                            bottleneck.severity === 'critical'\n                              ? 'text-red-500'\n                              : bottleneck.severity === 'high'\n                                ? 'text-orange-500'\n                                : 'text-yellow-500'\n                          }`}\n                        />\n                        {bottleneck.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag\n                        color={\n                          bottleneck.severity === 'critical'\n                            ? 'red'\n                            : bottleneck.severity === 'high'\n                              ? 'orange'\n                              : 'yellow'\n                        }\n                      >\n                        {bottleneck.severity}\n                      </Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{bottleneck.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Impact:</span>\n                        <div>{bottleneck.impact}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Improvement:</span>\n                        <div className=\"text-green-600\">{bottleneck.estimatedImprovement}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommendation:</span>\n                      <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No bottlenecks detected\" />\n        )}\n      </Card>\n    </div>\n  );\n\n  // Settings and Controls\n  const AnalyticsHeader: React.FC = () => (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex items-center space-x-4\">\n        <Select value={analyticsPeriod} onChange={setAnalyticsPeriod} style={{ width: 120 }}>\n          <Option value={1}>Last 24h</Option>\n          <Option value={7}>Last 7 days</Option>\n          <Option value={30}>Last 30 days</Option>\n          <Option value={90}>Last 90 days</Option>\n        </Select>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-600\">Auto-refresh:</span>\n          <Switch size=\"small\" checked={autoRefresh} onChange={toggleAutoRefresh} />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {lastUpdated && (\n          <span className=\"text-xs text-gray-500\">\n            Updated: {new Date(lastUpdated).toLocaleTimeString()}\n          </span>\n        )}\n\n        <Button\n          type=\"text\"\n          icon={<ReloadOutlined />}\n          onClick={refreshAnalytics}\n          loading={isLoading}\n        >\n          Refresh\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      title=\"Workflow Analytics Dashboard\"\n      open={isOpen}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className=\"analytics-dashboard-modal\"\n    >\n      <AnalyticsHeader />\n\n      <Tabs\n        activeKey={selectedTab}\n        onChange={(key) => setSelectedTab(key as any)}\n        className=\"analytics-tabs\"\n      >\n        <TabPane\n          tab={\n            <span>\n              <DashboardOutlined />\n              Overview\n            </span>\n          }\n          key=\"overview\"\n        >\n          <OverviewTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Performance\n            </span>\n          }\n          key=\"performance\"\n        >\n          <PerformanceTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <DollarCircleOutlined />\n              Costs\n            </span>\n          }\n          key=\"costs\"\n        >\n          <CostTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BulbOutlined />\n              Insights\n            </span>\n          }\n          key=\"insights\"\n        >\n          <InsightsTab />\n        </TabPane>\n      </Tabs>\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx",
        "start": 1,
        "end": 750,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 750,
          "column": 2,
          "position": 5397
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 4,
        "end": 753,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 753,
          "column": 2,
          "position": 5436
        }
      }
    },
    {
      "format": "javascript",
      "lines": 382,
      "fragment": "={{ width }}>\n      {/* Panel Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700 bg-gray-900\">\n        <div className=\"flex items-center gap-2\">\n          <h3 className=\"text-sm font-semibold text-white\">{title}</h3>\n          {badge && (\n            <Badge count={badge} className=\"text-xs\" style={{ backgroundColor: '#1890ff' }} />\n          )}\n        </div>\n        {actions && <Space size=\"small\">{actions}</Space>}\n      </div>\n\n      {/* Panel Content */}\n      <div className=\"flex-1 overflow-auto\">{children}</div>\n\n      {/* Resize Handle */}\n      {onResize && (\n        <div\n          className={cn(\n            'absolute top-0 right-0 w-1 h-full cursor-col-resize bg-transparent hover:bg-blue-500 transition-colors',\n            isResizing && 'bg-blue-500'\n          )}\n          onMouseDown={handleMouseDown}\n        />\n      )}\n    </div>\n  );\n};\n\nconst InputDataPanel: React.FC<{\n  nodeId: string;\n  width: number;\n  onResize: (width: number) => void;\n}> = ({ nodeId, width, onResize }) => {\n  const { edges } = useLeanWorkflowStore();\n  const { getNodeState } = useEnhancedExecutionStore();\n\n  // Find incoming connections to this node\n  const incomingData = useMemo(() => {\n    const incomingEdges = edges.filter((edge) => edge.target === nodeId);\n    const data: Record<string, any> = {};\n\n    incomingEdges.forEach((edge) => {\n      const sourceNodeState = getNodeState(edge.source);\n      if (sourceNodeState?.outputData) {\n        data[edge.source] = sourceNodeState.outputData;\n      }\n    });\n\n    return data;\n  }, [edges, nodeId, getNodeState]);\n\n  const actions = [\n    <Tooltip key=\"refresh\" title=\"Refresh data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<SyncOutlined />}\n        onClick={() => {\n          // Refresh input data\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"copy\" title=\"Copy data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          navigator.clipboard.writeText(JSON.stringify(incomingData, null, 2));\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  return (\n    <ResizablePanel\n      title=\"Input Data\"\n      width={width}\n      onResize={onResize}\n      actions={actions}\n      badge={Object.keys(incomingData).length || undefined}\n    >\n      <div className=\"p-4\">\n        {Object.keys(incomingData).length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📥</div>\n            <div>No input data available</div>\n            <div className=\"text-xs mt-2\">\n              Connect nodes or execute the workflow to see input data\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(incomingData).map(([sourceNodeId, data]) => (\n              <Card\n                key={sourceNodeId}\n                size=\"small\"\n                title={`From: ${sourceNodeId}`}\n                className=\"bg-gray-900 border-gray-600\"\n              >\n                <JsonViewer data={data} theme=\"dark\" collapsed={1} enableClipboard />\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nconst ConfigurationPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeById, updateNodeParameters } = useLeanWorkflowStore();\n  const [activeTab, setActiveTab] = useState('properties');\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isValid, setIsValid] = useState(true);\n  const [errors, setErrors] = useState<Map<string, string>>(new Map());\n\n  const node = getNodeById(nodeId);\n  const nodeDefinition = node ? nodeRegistry.getNodeTypeDescription(node.type) : null;\n\n  // Get enhanced properties for this node\n  const enhancedProperties = useMemo(() => {\n    if (!nodeDefinition) return [];\n\n    // Use basic properties for now, can be enhanced later\n    return nodeDefinition.properties || [];\n  }, [nodeDefinition]);\n\n  // Initialize form state from node parameters\n  React.useEffect(() => {\n    if (node) {\n      setFormState(node.parameters || {});\n    }\n  }, [node]);\n\n  // Property change handlers\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      const newFormState = { ...formState, [name]: value };\n      setFormState(newFormState);\n      updateNodeParameters(nodeId, { [name]: value });\n    },\n    [formState, nodeId, updateNodeParameters]\n  );\n\n  const handleValidationChange = useCallback((result: PropertyValidationResult) => {\n    setIsValid(result.isValid);\n    setErrors(result.errors);\n  }, []);\n\n  const handleTest = useCallback(async () => {}, []);\n\n  const handleSave = useCallback(async () => {}, []);\n\n  const actions = [\n    <Tooltip key=\"test\" title=\"Test node\">\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        icon={<PlayCircleOutlined />}\n        onClick={handleTest}\n        disabled={!isValid}\n      >\n        Test\n      </Button>\n    </Tooltip>,\n    <Tooltip key=\"debug\" title=\"Debug mode\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<BugOutlined />}\n        onClick={() => {\n          // Toggle debug mode for this node\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"save\" title=\"Save configuration\">\n      <Button type=\"text\" size=\"small\" icon={<SaveOutlined />} onClick={handleSave} />\n    </Tooltip>,\n  ];\n\n  const tabItems = [\n    {\n      key: 'properties',\n      label: (\n        <span>\n          Properties\n          {errors.size > 0 && (\n            <Badge\n              count={errors.size}\n              size=\"small\"\n              style={{ backgroundColor: '#ff4d4f', marginLeft: 8 }}\n            />\n          )}\n        </span>\n      ),\n      children: (\n        <div className=\"p-4\">\n          {enhancedProperties.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              <div className=\"text-2xl mb-2\">⚙️</div>\n              <div>No properties available</div>\n              <div className=\"text-xs mt-2\">\n                This node type doesn't have configurable properties\n              </div>\n            </div>\n          ) : (\n            <EnhancedPropertyRenderer\n              properties={enhancedProperties}\n              formState={formState}\n              onChange={handlePropertyChange}\n              onValidationChange={handleValidationChange}\n              theme=\"dark\"\n            />\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'credentials',\n      label: 'Credentials',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">🔐</div>\n            <div>Credential management</div>\n            <div className=\"text-xs mt-2\">Configure authentication for this node</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'settings',\n      label: 'Settings',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">⚙️</div>\n            <div>Node settings</div>\n            <div className=\"text-xs mt-2\">Advanced configuration options</div>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <ResizablePanel title=\"Configuration\" width={550} actions={actions}>\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n        className=\"h-full\"\n        tabBarStyle={{ margin: 0, paddingLeft: 16, paddingRight: 16 }}\n      />\n    </ResizablePanel>\n  );\n};\n\nconst OutputPreviewPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeState } = useEnhancedExecutionStore();\n  const nodeState = getNodeState(nodeId);\n\n  const actions = [\n    <Tooltip key=\"copy\" title=\"Copy output\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          if (nodeState?.outputData) {\n            navigator.clipboard.writeText(JSON.stringify(nodeState.outputData, null, 2));\n          }\n        }}\n        disabled={!nodeState?.outputData}\n      />\n    </Tooltip>,\n    <Tooltip key=\"fullscreen\" title=\"Fullscreen view\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<FullscreenOutlined />}\n        onClick={() => {\n          // Open fullscreen view\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  const hasOutput = nodeState?.outputData;\n  const hasError = nodeState?.error;\n\n  return (\n    <ResizablePanel\n      title=\"Output Preview\"\n      width={400}\n      actions={actions}\n      badge={hasOutput ? '✓' : hasError ? '✗' : undefined}\n    >\n      <div className=\"p-4\">\n        {hasError && nodeState?.error ? (\n          <Card className=\"bg-red-900 border-red-600\" title=\"Execution Error\" size=\"small\">\n            <div className=\"text-red-200 text-sm\">\n              <div className=\"font-semibold mb-2\">{nodeState.error.message}</div>\n              {nodeState.error.stack && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer\">Stack Trace</summary>\n                  <pre className=\"text-xs mt-2 overflow-x-auto\">{nodeState.error.stack}</pre>\n                </details>\n              )}\n            </div>\n          </Card>\n        ) : hasOutput ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm font-medium text-green-400\">Output Data</span>\n              {nodeState.duration && (\n                <span className=\"text-xs text-gray-500\">\n                  {nodeState.duration < 1000\n                    ? `${nodeState.duration}ms`\n                    : `${(nodeState.duration / 1000).toFixed(2)}s`}\n                </span>\n              )}\n            </div>\n            <JsonViewer data={nodeState.outputData} theme=\"dark\" collapsed={1} enableClipboard />\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📤</div>\n            <div>No output data</div>\n            <div className=\"text-xs mt-2\">Execute this node to see output data</div>\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nexport const AdvancedPropertyPanel: React.FC<AdvancedPropertyPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const [inputPanelWidth, setInputPanelWidth] = useState(700);\n  const { getNodeById } = useLeanWorkflowStore();\n\n  const node = nodeId ? getNodeById(nodeId) : null;\n\n  if (!isOpen || !nodeId || !node) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      title={\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <SettingOutlined />\n            <span>{node.name || node.type}</span>\n            <Badge status=\"processing\" text={node.type} />\n          </div>\n          <Button type=\"text\" icon={<CloseOutlined />} onClick={onClose} size=\"small\" />\n        </div>\n      }\n      placement=\"bottom\"\n      height=\"80vh\"\n      open={isOpen}\n      onClose={onClose}\n      closable={false}\n      className=\"advanced-property-panel\"\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"flex h-full bg-gray-800\">\n        {/* INPUT Column */}\n        <InputDataPanel nodeId={nodeId} width={inputPanelWidth} onResize={setInputPanelWidth} />\n\n        {/* CONFIGURATION Column */}\n        <ConfigurationPanel nodeId={nodeId} />\n\n        {/* OUTPUT Column */}\n        <OutputPreviewPanel nodeId={nodeId}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx",
        "start": 100,
        "end": 481,
        "startLoc": {
          "line": 100,
          "column": 6,
          "position": 773
        },
        "endLoc": {
          "line": 481,
          "column": 2,
          "position": 4089
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx",
        "start": 110,
        "end": 491,
        "startLoc": {
          "line": 110,
          "column": 6,
          "position": 903
        },
        "endLoc": {
          "line": 491,
          "column": 2,
          "position": 4219
        }
      }
    },
    {
      "format": "tsx",
      "lines": 487,
      "fragment": "/**\n * Advanced Property Panel\n *\n * Three-column layout inspired by SIM's property panel:\n * - INPUT column (700px, resizable): Connected node data visualization\n * - CONFIGURATION column (550px): Dynamic property forms with enhanced features\n * - OUTPUT column: Real-time preview and execution results\n */\n\nimport {\n  BugOutlined,\n  CloseOutlined,\n  CopyOutlined,\n  FullscreenOutlined,\n  PlayCircleOutlined,\n  SaveOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport { Badge, Button, Card, Drawer, Space, Tabs, Tooltip } from 'antd';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { nodeRegistry } from '@/core/nodes';\nimport { useEnhancedExecutionStore } from '@/core/stores/enhancedExecutionStore';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { cn, JsonViewer } from '@/design-system';\nimport type { PropertyValidationResult } from './EnhancedPropertyRenderer';\nimport EnhancedPropertyRenderer from './EnhancedPropertyRenderer';\n\n// Simple type definition for property form state\ntype PropertyFormState = Record<string, any>;\n\ninterface AdvancedPropertyPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  nodeId?: string;\n}\n\ninterface ResizablePanelProps {\n  children: React.ReactNode;\n  title: string;\n  width: number;\n  minWidth?: number;\n  maxWidth?: number;\n  onResize?: (width: number) => void;\n  actions?: React.ReactNode[];\n  badge?: string | number;\n}\n\nconst ResizablePanel: React.FC<ResizablePanelProps> = ({\n  children,\n  title,\n  width,\n  minWidth = 200,\n  maxWidth = 1000,\n  onResize,\n  actions,\n  badge,\n}) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [startWidth, setStartWidth] = useState(width);\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      setIsResizing(true);\n      setStartX(e.clientX);\n      setStartWidth(width);\n    },\n    [width]\n  );\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isResizing) return;\n\n      const deltaX = e.clientX - startX;\n      const newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth + deltaX));\n      onResize?.(newWidth);\n    },\n    [isResizing, startX, startWidth, minWidth, maxWidth, onResize]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    setIsResizing(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isResizing, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div className=\"h-full border-r border-gray-700 bg-gray-800 flex flex-col\" style={{ width }}>\n      {/* Panel Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700 bg-gray-900\">\n        <div className=\"flex items-center gap-2\">\n          <h3 className=\"text-sm font-semibold text-white\">{title}</h3>\n          {badge && (\n            <Badge count={badge} className=\"text-xs\" style={{ backgroundColor: '#1890ff' }} />\n          )}\n        </div>\n        {actions && <Space size=\"small\">{actions}</Space>}\n      </div>\n\n      {/* Panel Content */}\n      <div className=\"flex-1 overflow-auto\">{children}</div>\n\n      {/* Resize Handle */}\n      {onResize && (\n        <div\n          className={cn(\n            'absolute top-0 right-0 w-1 h-full cursor-col-resize bg-transparent hover:bg-blue-500 transition-colors',\n            isResizing && 'bg-blue-500'\n          )}\n          onMouseDown={handleMouseDown}\n        />\n      )}\n    </div>\n  );\n};\n\nconst InputDataPanel: React.FC<{\n  nodeId: string;\n  width: number;\n  onResize: (width: number) => void;\n}> = ({ nodeId, width, onResize }) => {\n  const { edges } = useLeanWorkflowStore();\n  const { getNodeState } = useEnhancedExecutionStore();\n\n  // Find incoming connections to this node\n  const incomingData = useMemo(() => {\n    const incomingEdges = edges.filter((edge) => edge.target === nodeId);\n    const data: Record<string, any> = {};\n\n    incomingEdges.forEach((edge) => {\n      const sourceNodeState = getNodeState(edge.source);\n      if (sourceNodeState?.outputData) {\n        data[edge.source] = sourceNodeState.outputData;\n      }\n    });\n\n    return data;\n  }, [edges, nodeId, getNodeState]);\n\n  const actions = [\n    <Tooltip key=\"refresh\" title=\"Refresh data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<SyncOutlined />}\n        onClick={() => {\n          // Refresh input data\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"copy\" title=\"Copy data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          navigator.clipboard.writeText(JSON.stringify(incomingData, null, 2));\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  return (\n    <ResizablePanel\n      title=\"Input Data\"\n      width={width}\n      onResize={onResize}\n      actions={actions}\n      badge={Object.keys(incomingData).length || undefined}\n    >\n      <div className=\"p-4\">\n        {Object.keys(incomingData).length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📥</div>\n            <div>No input data available</div>\n            <div className=\"text-xs mt-2\">\n              Connect nodes or execute the workflow to see input data\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(incomingData).map(([sourceNodeId, data]) => (\n              <Card\n                key={sourceNodeId}\n                size=\"small\"\n                title={`From: ${sourceNodeId}`}\n                className=\"bg-gray-900 border-gray-600\"\n              >\n                <JsonViewer data={data} theme=\"dark\" collapsed={1} enableClipboard />\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nconst ConfigurationPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeById, updateNodeParameters } = useLeanWorkflowStore();\n  const [activeTab, setActiveTab] = useState('properties');\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isValid, setIsValid] = useState(true);\n  const [errors, setErrors] = useState<Map<string, string>>(new Map());\n\n  const node = getNodeById(nodeId);\n  const nodeDefinition = node ? nodeRegistry.getNodeTypeDescription(node.type) : null;\n\n  // Get enhanced properties for this node\n  const enhancedProperties = useMemo(() => {\n    if (!nodeDefinition) return [];\n\n    // Use basic properties for now, can be enhanced later\n    return nodeDefinition.properties || [];\n  }, [nodeDefinition]);\n\n  // Initialize form state from node parameters\n  React.useEffect(() => {\n    if (node) {\n      setFormState(node.parameters || {});\n    }\n  }, [node]);\n\n  // Property change handlers\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      const newFormState = { ...formState, [name]: value };\n      setFormState(newFormState);\n      updateNodeParameters(nodeId, { [name]: value });\n    },\n    [formState, nodeId, updateNodeParameters]\n  );\n\n  const handleValidationChange = useCallback((result: PropertyValidationResult) => {\n    setIsValid(result.isValid);\n    setErrors(result.errors);\n  }, []);\n\n  const handleTest = useCallback(async () => {}, []);\n\n  const handleSave = useCallback(async () => {}, []);\n\n  const actions = [\n    <Tooltip key=\"test\" title=\"Test node\">\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        icon={<PlayCircleOutlined />}\n        onClick={handleTest}\n        disabled={!isValid}\n      >\n        Test\n      </Button>\n    </Tooltip>,\n    <Tooltip key=\"debug\" title=\"Debug mode\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<BugOutlined />}\n        onClick={() => {\n          // Toggle debug mode for this node\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"save\" title=\"Save configuration\">\n      <Button type=\"text\" size=\"small\" icon={<SaveOutlined />} onClick={handleSave} />\n    </Tooltip>,\n  ];\n\n  const tabItems = [\n    {\n      key: 'properties',\n      label: (\n        <span>\n          Properties\n          {errors.size > 0 && (\n            <Badge\n              count={errors.size}\n              size=\"small\"\n              style={{ backgroundColor: '#ff4d4f', marginLeft: 8 }}\n            />\n          )}\n        </span>\n      ),\n      children: (\n        <div className=\"p-4\">\n          {enhancedProperties.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              <div className=\"text-2xl mb-2\">⚙️</div>\n              <div>No properties available</div>\n              <div className=\"text-xs mt-2\">\n                This node type doesn't have configurable properties\n              </div>\n            </div>\n          ) : (\n            <EnhancedPropertyRenderer\n              properties={enhancedProperties}\n              formState={formState}\n              onChange={handlePropertyChange}\n              onValidationChange={handleValidationChange}\n              theme=\"dark\"\n            />\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'credentials',\n      label: 'Credentials',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">🔐</div>\n            <div>Credential management</div>\n            <div className=\"text-xs mt-2\">Configure authentication for this node</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'settings',\n      label: 'Settings',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">⚙️</div>\n            <div>Node settings</div>\n            <div className=\"text-xs mt-2\">Advanced configuration options</div>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <ResizablePanel title=\"Configuration\" width={550} actions={actions}>\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n        className=\"h-full\"\n        tabBarStyle={{ margin: 0, paddingLeft: 16, paddingRight: 16 }}\n      />\n    </ResizablePanel>\n  );\n};\n\nconst OutputPreviewPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeState } = useEnhancedExecutionStore();\n  const nodeState = getNodeState(nodeId);\n\n  const actions = [\n    <Tooltip key=\"copy\" title=\"Copy output\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          if (nodeState?.outputData) {\n            navigator.clipboard.writeText(JSON.stringify(nodeState.outputData, null, 2));\n          }\n        }}\n        disabled={!nodeState?.outputData}\n      />\n    </Tooltip>,\n    <Tooltip key=\"fullscreen\" title=\"Fullscreen view\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<FullscreenOutlined />}\n        onClick={() => {\n          // Open fullscreen view\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  const hasOutput = nodeState?.outputData;\n  const hasError = nodeState?.error;\n\n  return (\n    <ResizablePanel\n      title=\"Output Preview\"\n      width={400}\n      actions={actions}\n      badge={hasOutput ? '✓' : hasError ? '✗' : undefined}\n    >\n      <div className=\"p-4\">\n        {hasError && nodeState?.error ? (\n          <Card className=\"bg-red-900 border-red-600\" title=\"Execution Error\" size=\"small\">\n            <div className=\"text-red-200 text-sm\">\n              <div className=\"font-semibold mb-2\">{nodeState.error.message}</div>\n              {nodeState.error.stack && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer\">Stack Trace</summary>\n                  <pre className=\"text-xs mt-2 overflow-x-auto\">{nodeState.error.stack}</pre>\n                </details>\n              )}\n            </div>\n          </Card>\n        ) : hasOutput ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm font-medium text-green-400\">Output Data</span>\n              {nodeState.duration && (\n                <span className=\"text-xs text-gray-500\">\n                  {nodeState.duration < 1000\n                    ? `${nodeState.duration}ms`\n                    : `${(nodeState.duration / 1000).toFixed(2)}s`}\n                </span>\n              )}\n            </div>\n            <JsonViewer data={nodeState.outputData} theme=\"dark\" collapsed={1} enableClipboard />\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📤</div>\n            <div>No output data</div>\n            <div className=\"text-xs mt-2\">Execute this node to see output data</div>\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nexport const AdvancedPropertyPanel: React.FC<AdvancedPropertyPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const [inputPanelWidth, setInputPanelWidth] = useState(700);\n  const { getNodeById } = useLeanWorkflowStore();\n\n  const node = nodeId ? getNodeById(nodeId) : null;\n\n  if (!isOpen || !nodeId || !node) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      title={\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <SettingOutlined />\n            <span>{node.name || node.type}</span>\n            <Badge status=\"processing\" text={node.type} />\n          </div>\n          <Button type=\"text\" icon={<CloseOutlined />} onClick={onClose} size=\"small\" />\n        </div>\n      }\n      placement=\"bottom\"\n      height=\"80vh\"\n      open={isOpen}\n      onClose={onClose}\n      closable={false}\n      className=\"advanced-property-panel\"\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"flex h-full bg-gray-800\">\n        {/* INPUT Column */}\n        <InputDataPanel nodeId={nodeId} width={inputPanelWidth} onResize={setInputPanelWidth} />\n\n        {/* CONFIGURATION Column */}\n        <ConfigurationPanel nodeId={nodeId} />\n\n        {/* OUTPUT Column */}\n        <OutputPreviewPanel nodeId={nodeId} />\n      </div>\n    </Drawer>\n  );\n};\n\nexport default AdvancedPropertyPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx",
        "start": 1,
        "end": 487,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 487,
          "column": 2,
          "position": 4116
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx",
        "start": 11,
        "end": 497,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 130
        },
        "endLoc": {
          "line": 497,
          "column": 2,
          "position": 4246
        }
      }
    },
    {
      "format": "javascript",
      "lines": 165,
      "fragment": "={suggestion.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, suggestion);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAISuggestionAdd(suggestion);\n        }}\n        className=\"group p-2.5 border border-blue-200 bg-blue-50 rounded-md cursor-move hover:bg-blue-100 hover:border-blue-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm bg-blue-500\">\n            {suggestion.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-blue-900 truncate\">{suggestion.displayName}</p>\n              <span className=\"bg-blue-200 text-blue-800 text-xs px-1.5 py-0.5 rounded-full font-medium\">\n                AI\n              </span>\n            </div>\n            <p className=\"text-xs text-blue-700 truncate mt-0.5 leading-tight\">\n              {suggestion.description}\n            </p>\n            {suggestion.aiSuggestion && (\n              <div className=\"mt-1\">\n                <p className=\"text-xs text-blue-600 italic\">\n                  💡 {suggestion.aiSuggestion.reasoning}\n                </p>\n                <span className=\"bg-blue-200 text-blue-700 text-xs px-1.5 py-0.5 rounded mt-1 inline-block\">\n                  Confidence: {Math.round(suggestion.aiSuggestion.confidence * 100)}%\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAISuggestionAdd]\n  );\n\n  // Render function for node items in virtualized list\n  const renderNodeItem = useCallback(\n    (node: (typeof allAvailableNodes)[0], _index: number) => (\n      <div\n        key={node.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, node);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAddNode(node);\n        }}\n        className=\"group p-2.5 border border-gray-200 rounded-md cursor-move hover:bg-gray-50 hover:border-gray-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div\n            className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm\"\n            style={{ backgroundColor: node.color }}\n          >\n            {node.icon || node.displayName.charAt(0)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">{node.displayName}</p>\n            </div>\n            <p className=\"text-xs text-gray-500 truncate mt-0.5 leading-tight\">\n              {node.description}\n            </p>\n            <div className=\"mt-1.5\">\n              <span className=\"bg-gray-100 text-gray-600 text-xs px-1.5 py-0.5 rounded\">\n                {getCategoryMetadata(node.category || '')?.icon || ''} {node.category}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAddNode]\n  );\n\n  return (\n    <div\n      className={`${isCollapsed ? 'w-16' : 'w-80'} h-full bg-white border-r border-gray-200 flex flex-col transition-all duration-300 ease-in-out`}\n    >\n      {/* Toggle Button */}\n      <div className=\"flex justify-end p-4\">\n        <button\n          onClick={onToggle}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n          title={isCollapsed ? 'Expand node panel' : 'Collapse node panel'}\n        >\n          <span className=\"text-lg\">{isCollapsed ? '→' : '←'}</span>\n        </button>\n      </div>\n\n      {!isCollapsed && (\n        <div className=\"px-4 pb-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Nodes</h2>\n            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n              {allAvailableNodes.length}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600\">Drag to add to workflow</p>\n        </div>\n      )}\n\n      {/* Search and Filter */}\n      {!isCollapsed && (\n        <div className=\"p-4 border-b border-gray-200 space-y-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          />\n\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            aria-label=\"Select category\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          >\n            {categories.map((category) => {\n              const metadata = category !== 'all' ? getCategoryMetadata(category) : null;\n              return (\n                <option key={category} value={category}>\n                  {category === 'all' ? 'All Categories' : `${metadata?.icon || ''} ${category}`}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      )}\n\n      {/* AI Suggestions Section */}\n      {!isCollapsed && isAIEnabled && aiSuggestedNodes.length > 0 && showAISuggestions && (\n        <div className=\"border-b border-gray-200\">\n          <div className=\"px-4 py-3 bg-blue-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white text-xs\">🤖</span>\n                </div>\n                <h3 className=\"text-sm font-medium text-blue-900\">AI Suggestions</h3>\n                <span className=\"bg-blue-200 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n                  {aiSuggestedNodes.length}\n                </span>\n              </div>\n              <button\n                onClick={() => setShowAISuggestions(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 302,
        "end": 466,
        "startLoc": {
          "line": 302,
          "column": 4,
          "position": 2838
        },
        "endLoc": {
          "line": 466,
          "column": 2,
          "position": 4167
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 307,
        "end": 471,
        "startLoc": {
          "line": 307,
          "column": 4,
          "position": 2903
        },
        "endLoc": {
          "line": 471,
          "column": 2,
          "position": 4232
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "import type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { CONTAINER_TEMPLATES, ContainerFactory } from '@/app/services/containerFactory';\nimport { nodeRegistry, useLeanWorkflowStore } from '@/core';\nimport {\n  CATEGORY_DESCRIPTIONS,\n  CATEGORY_ICONS,\n  UNIFIED_CATEGORIES,\n} from '@/core/constants/categories';\nimport { useAIAssistantStore } from '@/core/stores/aiAssistantStore';\nimport { VirtualizedList } from '@/design-system';\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 10,
          "position": 112
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 7,
          "position": 111
        }
      }
    },
    {
      "format": "tsx",
      "lines": 512,
      "fragment": ";\n\ninterface AdvancedNodePanelProps {\n  isCollapsed: boolean;\n  onToggle: () => void;\n}\n\n// Helper function to get category metadata\nconst getCategoryMetadata = (category: string) => {\n  const icon = CATEGORY_ICONS[category as keyof typeof CATEGORY_ICONS];\n  const info = CATEGORY_DESCRIPTIONS[category as keyof typeof CATEGORY_DESCRIPTIONS];\n  return { icon, info };\n};\n\nconst AdvancedNodePanel: React.FC<AdvancedNodePanelProps> = ({ isCollapsed, onToggle }) => {\n  const { addNode, addEdge, nodes, edges } = useLeanWorkflowStore();\n  const { isEnabled: isAIEnabled, nodeSuggestions, getNodeSuggestions } = useAIAssistantStore();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [showAISuggestions, setShowAISuggestions] = useState(true);\n\n  // Get all nodes from the registry (replacing hardcoded array)\n  const allRegistryDescriptions = nodeRegistry.getAllNodeTypeDescriptions();\n\n  const registryNodes = allRegistryDescriptions\n    .map((description) => ({\n      id: `registry-${description.name || 'unknown'}`,\n      displayName: description.displayName || description.name || 'Unknown Node',\n      description: description.description || 'No description available',\n      icon: description.icon || '⚡',\n      category: description.categories?.[0] || UNIFIED_CATEGORIES.BUSINESS_PRODUCTIVITY,\n      color: description.defaults?.color || '#6B7280',\n      type: description.name || 'unknown',\n      nodeTypeData: {\n        name: description.name || 'unknown',\n        displayName: description.displayName || description.name || 'Unknown Node',\n      },\n      isCore: true, // All registry nodes are core nodes\n    }))\n    .filter((node) => node.type !== 'unknown'); // Filter out malformed nodes\n\n  // Add container nodes\n  const containerNodes = Object.values(CONTAINER_TEMPLATES).map((template) => ({\n    id: `container-${template.type}`,\n    displayName: template.label,\n    description: template.description,\n    icon: template.icon,\n    category: template.category,\n    color: '#8B5CF6', // Purple color for containers\n    type: 'container',\n    containerType: template.type,\n    nodeTypeData: {\n      name: 'container',\n      displayName: template.label,\n      containerType: template.type,\n    },\n    isCore: true,\n  })) as Array<{\n    id: string;\n    displayName: string;\n    description: string;\n    icon: string;\n    category: string;\n    color: string;\n    type: string;\n    containerType?: string;\n    nodeTypeData: {\n      name: string;\n      displayName: string;\n      containerType?: string;\n    };\n    isCore: boolean;\n  }>;\n\n  // Only log in development mode and only if there are issues\n  if (import.meta.env.DEV && registryNodes.length === 0) {\n  }\n\n  // Pure Registry System - use only registry nodes, no integration duplicates\n  const allAvailableNodes = [...registryNodes, ...containerNodes];\n\n  // Use unified categories\n  const categories = ['all', ...Object.values(UNIFIED_CATEGORIES).sort()];\n\n  // AI-powered node suggestions\n  useEffect(() => {\n    if (isAIEnabled && nodes.length > 0) {\n      const timeoutId = setTimeout(() => {\n        getNodeSuggestions({\n          currentNodes: nodes,\n          currentEdges: edges,\n          lastAction: 'node_added',\n        }).catch((_error) => {});\n      }, 500); // Debounce suggestions\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isAIEnabled, nodes, edges, getNodeSuggestions]);\n\n  // Convert AI suggestions to node format for rendering\n  const aiSuggestedNodes = nodeSuggestions.map((suggestion) => ({\n    id: `ai-suggestion-${suggestion.id}`,\n    displayName: suggestion.title,\n    description: suggestion.description,\n    icon: '🤖', // AI suggestion icon\n    category: 'AI_SUGGESTIONS',\n    color: '#3B82F6', // Blue color for AI suggestions\n    type: suggestion.type,\n    nodeTypeData: {\n      name: suggestion.type,\n      displayName: suggestion.title,\n    },\n    isCore: false,\n    aiSuggestion: suggestion,\n  }));\n\n  const handleAISuggestionAdd = useCallback(\n    (suggestion: (typeof aiSuggestedNodes)[0]) => {\n      if (suggestion.aiSuggestion) {\n        // Use default position since AIWorkflowSuggestion doesn't have placement\n        const defaultPosition = { x: 100, y: 100 };\n\n        // Create node at default position\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}-${suggestion.type}`;\n        const enhancedNodeType = nodeRegistry.getNodeTypeDescription(suggestion.type);\n\n        const newNode = {\n          id: newNodeId,\n          type: suggestion.type,\n          position: defaultPosition,\n          parameters: {\n            label: suggestion.displayName,\n            nodeType: suggestion.nodeTypeData.name,\n            configuration: {},\n            credentials: [],\n            icon: enhancedNodeType?.icon || suggestion.icon,\n            enhancedNodeType: enhancedNodeType,\n            nodeTypeData: suggestion.nodeTypeData,\n            config: {},\n          },\n        };\n\n        addNode(newNode);\n\n        // Skip auto-connect since AI suggestion doesn't have connections\n        const connections: any[] = [];\n        connections.forEach((connection: any) => {\n          if (connection.sourceNodeId && connection.type === 'input') {\n            const newEdge = {\n              id: `edge-${connection.sourceNodeId}-${newNodeId}`,\n              source: connection.sourceNodeId,\n              target: newNodeId,\n              type: 'default',\n            };\n            addEdge(newEdge);\n          } else if (connection.targetNodeId && connection.type === 'output') {\n            const newEdge = {\n              id: `edge-${newNodeId}-${connection.targetNodeId}`,\n              source: newNodeId,\n              target: connection.targetNodeId,\n              type: 'default',\n            };\n            addEdge(newEdge);\n          }\n        });\n      }\n    },\n    [addNode, addEdge]\n  );\n\n  // Filter and sort nodes in ascending order\n  const filteredNodes = allAvailableNodes\n    .filter((node) => {\n      const matchesSearch =\n        (node.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||\n        (node.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n      const matchesCategory = selectedCategory === 'all' || node.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => (a.displayName || '').localeCompare(b.displayName || ''));\n\n  const onDragStart = useCallback((event: React.DragEvent, node: (typeof allAvailableNodes)[0]) => {\n    try {\n      const dragData = {\n        type: node.type,\n        nodeTypeData: node.nodeTypeData,\n        ...(node.type === 'container' && {\n          containerType: (node as any).containerType,\n        }),\n      };\n\n      event.dataTransfer.setData('application/reactflow', JSON.stringify(dragData));\n      event.dataTransfer.effectAllowed = 'move';\n    } catch (_error) {}\n  }, []);\n\n  // Helper function to find the rightmost node (last in sequence)\n  const findLastNode = useCallback(() => {\n    if (nodes.length === 0) return null;\n\n    // Find node with no outgoing connections (target but no source edges)\n    const nodesWithOutgoing = new Set(edges.map((edge) => edge.source));\n    const candidateNodes = nodes.filter((node) => !nodesWithOutgoing.has(node.id));\n\n    if (candidateNodes.length === 0) {\n      // If all nodes have outgoing connections, use the rightmost positioned node\n      return nodes.reduce((rightmost, current) =>\n        current.position.x > rightmost.position.x ? current : rightmost\n      );\n    }\n\n    // Among candidates with no outgoing connections, pick the rightmost\n    return candidateNodes.reduce((rightmost, current) =>\n      current.position.x > rightmost.position.x ? current : rightmost\n    );\n  }, [nodes, edges]);\n\n  const handleAddNode = useCallback(\n    (node: (typeof allAvailableNodes)[0]) => {\n      // Find last node for auto-connection\n      const lastNode = findLastNode();\n\n      // Position new node to the right of the last node, or at origin if no nodes exist\n      const newPosition = lastNode\n        ? { x: lastNode.position.x + 300, y: lastNode.position.y }\n        : { x: 100, y: 100 };\n\n      let newNode;\n\n      // Handle container nodes differently\n      if (node.type === 'container') {\n        const containerNode = ContainerFactory.createContainer(\n          (node as any).containerType,\n          newPosition,\n          undefined,\n          node.displayName\n        );\n\n        // Convert to WorkflowNodeInstance format\n        newNode = {\n          id: containerNode.id,\n          type: containerNode.type || 'container',\n          position: containerNode.position,\n          parameters: containerNode.data || {},\n        };\n      } else {\n        // Generate a unique ID for the workflow node (simplified for registry nodes)\n        const baseId = node.nodeTypeData.name;\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}-${baseId}`;\n\n        // Get the node type description from registry\n        const enhancedNodeType = nodeRegistry.getNodeTypeDescription(node.type);\n\n        newNode = {\n          id: newNodeId,\n          type: node.type,\n          position: newPosition,\n          parameters: {\n            label: node.displayName,\n            nodeType: node.nodeTypeData.name,\n            configuration: {},\n            credentials: [],\n            // Include icon and enhancedNodeType for property panel\n            icon: enhancedNodeType?.icon || node.icon,\n            enhancedNodeType: enhancedNodeType,\n            // Node type data for registry system\n            nodeTypeData: node.nodeTypeData,\n            config: {},\n          },\n        };\n      }\n\n      addNode(newNode);\n\n      // Auto-connect to the last node if it exists\n      if (lastNode) {\n        const newEdge = {\n          id: `edge-${lastNode.id}-${newNode.id}`,\n          source: lastNode.id,\n          target: newNode.id,\n          type: 'default',\n        };\n        addEdge(newEdge);\n      }\n    },\n    [addNode, addEdge, findLastNode]\n  );\n\n  // Render function for AI suggestion items\n  const renderAISuggestionItem = useCallback(\n    (suggestion: (typeof aiSuggestedNodes)[0], _index: number) => (\n      <div\n        key={suggestion.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, suggestion);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAISuggestionAdd(suggestion);\n        }}\n        className=\"group p-2.5 border border-blue-200 bg-blue-50 rounded-md cursor-move hover:bg-blue-100 hover:border-blue-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm bg-blue-500\">\n            {suggestion.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-blue-900 truncate\">{suggestion.displayName}</p>\n              <span className=\"bg-blue-200 text-blue-800 text-xs px-1.5 py-0.5 rounded-full font-medium\">\n                AI\n              </span>\n            </div>\n            <p className=\"text-xs text-blue-700 truncate mt-0.5 leading-tight\">\n              {suggestion.description}\n            </p>\n            {suggestion.aiSuggestion && (\n              <div className=\"mt-1\">\n                <p className=\"text-xs text-blue-600 italic\">\n                  💡 {suggestion.aiSuggestion.reasoning}\n                </p>\n                <span className=\"bg-blue-200 text-blue-700 text-xs px-1.5 py-0.5 rounded mt-1 inline-block\">\n                  Confidence: {Math.round(suggestion.aiSuggestion.confidence * 100)}%\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAISuggestionAdd]\n  );\n\n  // Render function for node items in virtualized list\n  const renderNodeItem = useCallback(\n    (node: (typeof allAvailableNodes)[0], _index: number) => (\n      <div\n        key={node.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, node);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAddNode(node);\n        }}\n        className=\"group p-2.5 border border-gray-200 rounded-md cursor-move hover:bg-gray-50 hover:border-gray-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div\n            className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm\"\n            style={{ backgroundColor: node.color }}\n          >\n            {node.icon || node.displayName.charAt(0)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">{node.displayName}</p>\n            </div>\n            <p className=\"text-xs text-gray-500 truncate mt-0.5 leading-tight\">\n              {node.description}\n            </p>\n            <div className=\"mt-1.5\">\n              <span className=\"bg-gray-100 text-gray-600 text-xs px-1.5 py-0.5 rounded\">\n                {getCategoryMetadata(node.category || '')?.icon || ''} {node.category}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAddNode]\n  );\n\n  return (\n    <div\n      className={`${isCollapsed ? 'w-16' : 'w-80'} h-full bg-white border-r border-gray-200 flex flex-col transition-all duration-300 ease-in-out`}\n    >\n      {/* Toggle Button */}\n      <div className=\"flex justify-end p-4\">\n        <button\n          onClick={onToggle}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n          title={isCollapsed ? 'Expand node panel' : 'Collapse node panel'}\n        >\n          <span className=\"text-lg\">{isCollapsed ? '→' : '←'}</span>\n        </button>\n      </div>\n\n      {!isCollapsed && (\n        <div className=\"px-4 pb-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Nodes</h2>\n            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n              {allAvailableNodes.length}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600\">Drag to add to workflow</p>\n        </div>\n      )}\n\n      {/* Search and Filter */}\n      {!isCollapsed && (\n        <div className=\"p-4 border-b border-gray-200 space-y-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          />\n\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            aria-label=\"Select category\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          >\n            {categories.map((category) => {\n              const metadata = category !== 'all' ? getCategoryMetadata(category) : null;\n              return (\n                <option key={category} value={category}>\n                  {category === 'all' ? 'All Categories' : `${metadata?.icon || ''} ${category}`}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      )}\n\n      {/* AI Suggestions Section */}\n      {!isCollapsed && isAIEnabled && aiSuggestedNodes.length > 0 && showAISuggestions && (\n        <div className=\"border-b border-gray-200\">\n          <div className=\"px-4 py-3 bg-blue-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white text-xs\">🤖</span>\n                </div>\n                <h3 className=\"text-sm font-medium text-blue-900\">AI Suggestions</h3>\n                <span className=\"bg-blue-200 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n                  {aiSuggestedNodes.length}\n                </span>\n              </div>\n              <button\n                onClick={() => setShowAISuggestions(false)}\n                className=\"text-blue-600 hover:text-blue-800 text-xs\"\n                title=\"Hide AI suggestions\"\n              >\n                ✕\n              </button>\n            </div>\n            <p className=\"text-xs text-blue-700 mt-1\">\n              Smart suggestions based on your current workflow\n            </p>\n          </div>\n          <div className=\"px-4 py-2 max-h-48 overflow-y-auto\">\n            {aiSuggestedNodes.map((suggestion, index) => renderAISuggestionItem(suggestion, index))}\n          </div>\n        </div>\n      )}\n\n      {/* Node List */}\n      {!isCollapsed && (\n        <div className=\"overflow-hidden flex flex-col\">\n          {filteredNodes.length === 0 ? (\n            <div className=\"h-96 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-gray-400 text-4xl mb-2\">🔍</div>\n                <p className=\"text-gray-500 text-sm\">No nodes found</p>\n                <p className=\"text-gray-400 text-xs mt-1\">Try adjusting your search or filter</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"px-4 pb-4\">\n              <VirtualizedList\n                items={filteredNodes}\n                renderItem={renderNodeItem}\n                height={700}\n                estimateSize={85} // Estimated height per node item\n                getItemKey={(node) => node.id}\n                gap={0}\n                className=\"node-list\"\n                emptyState={\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500 text-sm\">\n                      {searchTerm\n                        ? 'No nodes match your search'\n                        : 'No nodes available in this category'}\n                    </p>\n                  </div>\n                }\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedNodePanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 11,
        "end": 522,
        "startLoc": {
          "line": 11,
          "column": 18,
          "position": 109
        },
        "endLoc": {
          "line": 522,
          "column": 2,
          "position": 4587
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 16,
        "end": 527,
        "startLoc": {
          "line": 16,
          "column": 19,
          "position": 174
        },
        "endLoc": {
          "line": 527,
          "column": 2,
          "position": 4652
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#6366F1",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 115,
        "end": 123,
        "startLoc": {
          "line": 115,
          "column": 17,
          "position": 742
        },
        "endLoc": {
          "line": 123,
          "column": 8,
          "position": 795
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#8B5CF6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 128,
        "end": 136,
        "startLoc": {
          "line": 128,
          "column": 17,
          "position": 831
        },
        "endLoc": {
          "line": 136,
          "column": 8,
          "position": 884
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#14B8A6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 141,
        "end": 149,
        "startLoc": {
          "line": 141,
          "column": 17,
          "position": 920
        },
        "endLoc": {
          "line": 149,
          "column": 8,
          "position": 973
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "javascript",
      "lines": 333,
      "fragment": "={suggestion.id}\n      size=\"small\"\n      className=\"mb-3 bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors\"\n      actions={[\n        <Tooltip key=\"details\" title=\"View Details\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<InfoCircleOutlined />}\n            onClick={() => handleViewSuggestionDetails(suggestion)}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </Tooltip>,\n        <Tooltip key=\"apply\" title=\"Apply Suggestion\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<CheckCircleOutlined />}\n            onClick={() => handleApplySuggestion(suggestion)}\n            className=\"text-green-400 hover:text-green-300\"\n          />\n        </Tooltip>,\n      ]}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getTypeIcon(suggestion.type)}\n            <span className=\"text-white font-medium text-sm\">{suggestion.title}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Tag color={getImpactColor(suggestion.impact)}>{suggestion.impact}</Tag>\n            <Badge\n              count={`${(suggestion.confidence * 100).toFixed(0)}%`}\n              style={{ backgroundColor: '#1890ff' }}\n            />\n          </div>\n        </div>\n\n        <Text className=\"text-gray-400 text-xs\">{suggestion.description}</Text>\n\n        <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n          <span>Category: {suggestion.category}</span>\n          {suggestion.estimatedBenefit.performance && (\n            <span>Performance: +{(suggestion.estimatedBenefit.performance * 100).toFixed(0)}%</span>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderAnalysisMetrics = () => {\n    if (!analysis) return null;\n\n    return (\n      <div className=\"space-y-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <Title level={5} className=\"text-white mb-3\">\n            Workflow Analysis\n          </Title>\n\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Complexity</span>\n                <span className=\"text-gray-400\">{(analysis.complexity * 100).toFixed(0)}%</span>\n              </div>\n              <Progress\n                percent={analysis.complexity * 100}\n                strokeColor=\"#3b82f6\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Performance</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.performance.estimatedImprovement * 100).toFixed(0)}% improvement\n                  possible\n                </span>\n              </div>\n              <Progress\n                percent={analysis.performance.estimatedImprovement * 100}\n                strokeColor=\"#22c55e\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Maintainability</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.maintainability.codeQuality * 100).toFixed(0)}%\n                </span>\n              </div>\n              <Progress\n                percent={analysis.maintainability.codeQuality * 100}\n                strokeColor=\"#f59e0b\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n          </div>\n        </Card>\n\n        {analysis.performance.bottlenecks.length > 0 && (\n          <Alert\n            message=\"Performance Bottlenecks Detected\"\n            description={\n              <ul className=\"mt-2\">\n                {analysis.performance.bottlenecks.map((bottleneck, index) => (\n                  <li key={index} className=\"text-sm\">\n                    {bottleneck}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"warning\"\n            showIcon\n            className=\"bg-yellow-900 border-yellow-600\"\n          />\n        )}\n\n        {analysis.reliability.missingErrorHandling.length > 0 && (\n          <Alert\n            message=\"Missing Error Handling\"\n            description={`${analysis.reliability.missingErrorHandling.length} nodes need error handling`}\n            type=\"error\"\n            showIcon\n            className=\"bg-red-900 border-red-600\"\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <RobotOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            AI Assistant\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Intelligent workflow optimization and generation\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"ai-assistant-tabs\"\n          items={[\n            {\n              key: 'suggestions',\n              label: (\n                <span>\n                  <BulbOutlined className=\"mr-1\" />\n                  Suggestions\n                  {suggestions.length > 0 && (\n                    <Badge count={suggestions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  {suggestions.length === 0 ? (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <BulbOutlined className=\"text-4xl mb-2\" />\n                      <div>No suggestions available</div>\n                      <div className=\"text-xs mt-2\">\n                        {workflow\n                          ? 'Workflow analysis in progress...'\n                          : 'Load a workflow to get AI suggestions'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>{suggestions.map(renderSuggestionCard)}</div>\n                  )}\n                </div>\n              ),\n            },\n            {\n              key: 'generate',\n              label: (\n                <span>\n                  <SendOutlined className=\"mr-1\" />\n                  Generate\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Natural Language to Workflow\n                    </Title>\n                    <div className=\"space-y-3\">\n                      <TextArea\n                        value={naturalLanguageInput}\n                        onChange={(e) => setNaturalLanguageInput(e.target.value)}\n                        placeholder=\"Describe your workflow in natural language...&#10;&#10;Example: 'Send an email notification when a new order is received, then update the inventory database'\"\n                        rows={4}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                      <Button\n                        type=\"primary\"\n                        icon={<SendOutlined />}\n                        onClick={handleGenerateWorkflow}\n                        loading={isGenerating}\n                        disabled={!naturalLanguageInput.trim()}\n                        className=\"w-full\"\n                      >\n                        Generate Workflow\n                      </Button>\n                    </div>\n                  </Card>\n\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Quick Templates\n                    </Title>\n                    <div className=\"space-y-2\">\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Send email notification when form is submitted')\n                        }\n                      >\n                        📧 Email Notification\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Process uploaded files and save to database')\n                        }\n                      >\n                        📁 File Processing\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Sync data between two APIs every hour')\n                        }\n                      >\n                        🔄 Data Synchronization\n                      </Button>\n                    </div>\n                  </Card>\n                </div>\n              ),\n            },\n            {\n              key: 'analysis',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Analysis\n                </span>\n              ),\n              children: renderAnalysisMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Suggestion Details Modal */}\n      <Modal\n        title={selectedSuggestion?.title}\n        open={isDetailModalOpen}\n        onCancel={() => setIsDetailModalOpen(false)}\n        footer={[\n          <Button key=\"cancel\" onClick={() => setIsDetailModalOpen(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"apply\"\n            type=\"primary\"\n            onClick={() => {\n              if (selectedSuggestion) {\n                handleApplySuggestion(selectedSuggestion);\n                setIsDetailModalOpen(false);\n              }\n            }}\n          >\n            Apply Suggestion\n          </Button>,\n        ]}\n        width={600}\n      >\n        {selectedSuggestion && (\n          <div className=\"space-y-4\">\n            <div>\n              <Text className=\"text-gray-600\">{selectedSuggestion.description}</Text>\n            </div>\n\n            <div>\n              <Title level={5}>Reasoning</Title>\n              <Text className=\"text-gray-600\">{selectedSuggestion.reasoning}</Text>\n            </div>\n\n            {selectedSuggestion.suggestedChanges.length > 0 && (\n              <div>\n                <Title level={5}>Suggested Changes</Title>\n                <List\n                  size=\"small\"\n                  dataSource={selectedSuggestion.suggestedChanges}\n                  renderItem={(change) => (\n                    <List.Item>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{change.type}</div>\n                        <div className=\"text-sm text-gray-600\">{change.reason}</div>\n                      </div>\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n\n            {Object.keys(selectedSuggestion.estimatedBenefit).length > 0 && (\n              <div>\n                <Title level={5}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx",
        "start": 210,
        "end": 542,
        "startLoc": {
          "line": 210,
          "column": 4,
          "position": 1593
        },
        "endLoc": {
          "line": 542,
          "column": 2,
          "position": 4056
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx",
        "start": 213,
        "end": 545,
        "startLoc": {
          "line": 213,
          "column": 4,
          "position": 1632
        },
        "endLoc": {
          "line": 545,
          "column": 2,
          "position": 4095
        }
      }
    },
    {
      "format": "tsx",
      "lines": 578,
      "fragment": "/**\n * AI Assistant Panel\n *\n * Comprehensive AI-powered workflow assistance panel providing:\n * - Natural language workflow generation\n * - Intelligent optimization suggestions\n * - Error diagnosis and solutions\n * - Performance recommendations\n * - Pattern recognition and best practices\n */\n\nimport {\n  BugOutlined,\n  BulbOutlined,\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  RobotOutlined,\n  // PatternOutlined,\n  SendOutlined,\n  SettingOutlined,\n  StarOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Input,\n  List,\n  Modal,\n  Progress,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { WorkflowDefinition } from '@/core/nodes/types';\nimport type {\n  AIWorkflowSuggestion,\n  ErrorDiagnosis,\n  NaturalLanguageRequest,\n  WorkflowAnalysis,\n} from '@/core/services/aiAssistantService';\nimport { aiAssistantService } from '@/core/services/aiAssistantService';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\ninterface AIAssistantPanelProps {\n  workflow?: WorkflowDefinition;\n  onApplySuggestion?: (suggestion: AIWorkflowSuggestion) => void;\n  onGenerateWorkflow?: (workflow: WorkflowDefinition) => void;\n  className?: string;\n}\n\nconst AIAssistantPanel: React.FC<AIAssistantPanelProps> = ({\n  workflow,\n  onApplySuggestion,\n  onGenerateWorkflow,\n  className,\n}) => {\n  const [activeTab, setActiveTab] = useState('suggestions');\n  const [naturalLanguageInput, setNaturalLanguageInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [suggestions, setSuggestions] = useState<AIWorkflowSuggestion[]>([]);\n  const [_errors] = useState<ErrorDiagnosis[]>([]); // TODO: Implement error handling\n  const [analysis, setAnalysis] = useState<WorkflowAnalysis | null>(null);\n  const [selectedSuggestion, setSelectedSuggestion] = useState<AIWorkflowSuggestion | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n\n  // Load suggestions when workflow changes\n  useEffect(() => {\n    if (workflow) {\n      loadSuggestions();\n      loadAnalysis();\n    }\n  }, [workflow, loadAnalysis, loadSuggestions]);\n\n  const loadSuggestions = useCallback(async () => {\n    if (!workflow) return;\n\n    try {\n      const workflowSuggestions = await aiAssistantService.analyzeWorkflow(workflow);\n      setSuggestions(workflowSuggestions);\n    } catch (_error) {}\n  }, [workflow]);\n\n  const loadAnalysis = useCallback(async () => {\n    if (!workflow) return;\n\n    try {\n      // Simulate analysis loading\n      const mockAnalysis: WorkflowAnalysis = {\n        complexity: 0.6,\n        performance: {\n          bottlenecks: ['Sequential processing', 'Large data sets'],\n          optimizationOpportunities: ['Parallel processing', 'Data caching'],\n          estimatedImprovement: 0.4,\n        },\n        reliability: {\n          errorProneNodes: ['http-node-1', 'database-node-2'],\n          missingErrorHandling: ['http-node-1'],\n          suggestions: ['Add try-catch containers', 'Implement retry logic'],\n        },\n        maintainability: {\n          codeQuality: 0.7,\n          documentation: 0.5,\n          modularity: 0.8,\n        },\n        patterns: {\n          detected: ['Sequential Pattern', 'Data Transformation Pattern'],\n          recommendations: ['Use Parallel Container', 'Add Error Handling'],\n        },\n      };\n      setAnalysis(mockAnalysis);\n    } catch (_error) {}\n  }, [workflow]);\n\n  const handleGenerateWorkflow = useCallback(async () => {\n    if (!naturalLanguageInput.trim()) return;\n\n    setIsGenerating(true);\n    try {\n      const request: NaturalLanguageRequest = {\n        text: naturalLanguageInput,\n        context: {\n          currentWorkflow: workflow,\n          userIntent: 'workflow-generation',\n        },\n      };\n\n      const result = await aiAssistantService.generateWorkflowFromText(request);\n      onGenerateWorkflow?.(result.workflow);\n\n      // Show success message\n      Modal.success({\n        title: 'Workflow Generated Successfully',\n        content: (\n          <div>\n            <p>{result.explanation}</p>\n            <p>Confidence: {(result.confidence * 100).toFixed(1)}%</p>\n            <p>Complexity: {(result.estimatedComplexity * 100).toFixed(1)}%</p>\n          </div>\n        ),\n      });\n    } catch (_error) {\n      Modal.error({\n        title: 'Generation Failed',\n        content: 'Failed to generate workflow from natural language description.',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [naturalLanguageInput, workflow, onGenerateWorkflow]);\n\n  const handleApplySuggestion = useCallback(\n    (suggestion: AIWorkflowSuggestion) => {\n      onApplySuggestion?.(suggestion);\n\n      // Remove applied suggestion\n      setSuggestions((prev) => prev.filter((s) => s.id !== suggestion.id));\n\n      Modal.success({\n        title: 'Suggestion Applied',\n        content: `${suggestion.title} has been applied to your workflow.`,\n      });\n    },\n    [onApplySuggestion]\n  );\n\n  const handleViewSuggestionDetails = useCallback((suggestion: AIWorkflowSuggestion) => {\n    setSelectedSuggestion(suggestion);\n    setIsDetailModalOpen(true);\n  }, []);\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'red';\n      case 'medium':\n        return 'orange';\n      case 'low':\n        return 'green';\n      default:\n        return 'blue';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'optimization':\n        return <ThunderboltOutlined className=\"text-yellow-500\" />;\n      case 'error-fix':\n        return <BugOutlined className=\"text-red-500\" />;\n      case 'enhancement':\n        return <StarOutlined className=\"text-blue-500\" />;\n      case 'pattern':\n        return <BulbOutlined className=\"text-purple-500\" />;\n      default:\n        return <BulbOutlined className=\"text-gray-500\" />;\n    }\n  };\n\n  const renderSuggestionCard = (suggestion: AIWorkflowSuggestion) => (\n    <Card\n      key={suggestion.id}\n      size=\"small\"\n      className=\"mb-3 bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors\"\n      actions={[\n        <Tooltip key=\"details\" title=\"View Details\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<InfoCircleOutlined />}\n            onClick={() => handleViewSuggestionDetails(suggestion)}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </Tooltip>,\n        <Tooltip key=\"apply\" title=\"Apply Suggestion\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<CheckCircleOutlined />}\n            onClick={() => handleApplySuggestion(suggestion)}\n            className=\"text-green-400 hover:text-green-300\"\n          />\n        </Tooltip>,\n      ]}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getTypeIcon(suggestion.type)}\n            <span className=\"text-white font-medium text-sm\">{suggestion.title}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Tag color={getImpactColor(suggestion.impact)}>{suggestion.impact}</Tag>\n            <Badge\n              count={`${(suggestion.confidence * 100).toFixed(0)}%`}\n              style={{ backgroundColor: '#1890ff' }}\n            />\n          </div>\n        </div>\n\n        <Text className=\"text-gray-400 text-xs\">{suggestion.description}</Text>\n\n        <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n          <span>Category: {suggestion.category}</span>\n          {suggestion.estimatedBenefit.performance && (\n            <span>Performance: +{(suggestion.estimatedBenefit.performance * 100).toFixed(0)}%</span>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderAnalysisMetrics = () => {\n    if (!analysis) return null;\n\n    return (\n      <div className=\"space-y-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <Title level={5} className=\"text-white mb-3\">\n            Workflow Analysis\n          </Title>\n\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Complexity</span>\n                <span className=\"text-gray-400\">{(analysis.complexity * 100).toFixed(0)}%</span>\n              </div>\n              <Progress\n                percent={analysis.complexity * 100}\n                strokeColor=\"#3b82f6\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Performance</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.performance.estimatedImprovement * 100).toFixed(0)}% improvement\n                  possible\n                </span>\n              </div>\n              <Progress\n                percent={analysis.performance.estimatedImprovement * 100}\n                strokeColor=\"#22c55e\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Maintainability</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.maintainability.codeQuality * 100).toFixed(0)}%\n                </span>\n              </div>\n              <Progress\n                percent={analysis.maintainability.codeQuality * 100}\n                strokeColor=\"#f59e0b\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n          </div>\n        </Card>\n\n        {analysis.performance.bottlenecks.length > 0 && (\n          <Alert\n            message=\"Performance Bottlenecks Detected\"\n            description={\n              <ul className=\"mt-2\">\n                {analysis.performance.bottlenecks.map((bottleneck, index) => (\n                  <li key={index} className=\"text-sm\">\n                    {bottleneck}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"warning\"\n            showIcon\n            className=\"bg-yellow-900 border-yellow-600\"\n          />\n        )}\n\n        {analysis.reliability.missingErrorHandling.length > 0 && (\n          <Alert\n            message=\"Missing Error Handling\"\n            description={`${analysis.reliability.missingErrorHandling.length} nodes need error handling`}\n            type=\"error\"\n            showIcon\n            className=\"bg-red-900 border-red-600\"\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <RobotOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            AI Assistant\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Intelligent workflow optimization and generation\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"ai-assistant-tabs\"\n          items={[\n            {\n              key: 'suggestions',\n              label: (\n                <span>\n                  <BulbOutlined className=\"mr-1\" />\n                  Suggestions\n                  {suggestions.length > 0 && (\n                    <Badge count={suggestions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  {suggestions.length === 0 ? (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <BulbOutlined className=\"text-4xl mb-2\" />\n                      <div>No suggestions available</div>\n                      <div className=\"text-xs mt-2\">\n                        {workflow\n                          ? 'Workflow analysis in progress...'\n                          : 'Load a workflow to get AI suggestions'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>{suggestions.map(renderSuggestionCard)}</div>\n                  )}\n                </div>\n              ),\n            },\n            {\n              key: 'generate',\n              label: (\n                <span>\n                  <SendOutlined className=\"mr-1\" />\n                  Generate\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Natural Language to Workflow\n                    </Title>\n                    <div className=\"space-y-3\">\n                      <TextArea\n                        value={naturalLanguageInput}\n                        onChange={(e) => setNaturalLanguageInput(e.target.value)}\n                        placeholder=\"Describe your workflow in natural language...&#10;&#10;Example: 'Send an email notification when a new order is received, then update the inventory database'\"\n                        rows={4}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                      <Button\n                        type=\"primary\"\n                        icon={<SendOutlined />}\n                        onClick={handleGenerateWorkflow}\n                        loading={isGenerating}\n                        disabled={!naturalLanguageInput.trim()}\n                        className=\"w-full\"\n                      >\n                        Generate Workflow\n                      </Button>\n                    </div>\n                  </Card>\n\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Quick Templates\n                    </Title>\n                    <div className=\"space-y-2\">\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Send email notification when form is submitted')\n                        }\n                      >\n                        📧 Email Notification\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Process uploaded files and save to database')\n                        }\n                      >\n                        📁 File Processing\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Sync data between two APIs every hour')\n                        }\n                      >\n                        🔄 Data Synchronization\n                      </Button>\n                    </div>\n                  </Card>\n                </div>\n              ),\n            },\n            {\n              key: 'analysis',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Analysis\n                </span>\n              ),\n              children: renderAnalysisMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Suggestion Details Modal */}\n      <Modal\n        title={selectedSuggestion?.title}\n        open={isDetailModalOpen}\n        onCancel={() => setIsDetailModalOpen(false)}\n        footer={[\n          <Button key=\"cancel\" onClick={() => setIsDetailModalOpen(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"apply\"\n            type=\"primary\"\n            onClick={() => {\n              if (selectedSuggestion) {\n                handleApplySuggestion(selectedSuggestion);\n                setIsDetailModalOpen(false);\n              }\n            }}\n          >\n            Apply Suggestion\n          </Button>,\n        ]}\n        width={600}\n      >\n        {selectedSuggestion && (\n          <div className=\"space-y-4\">\n            <div>\n              <Text className=\"text-gray-600\">{selectedSuggestion.description}</Text>\n            </div>\n\n            <div>\n              <Title level={5}>Reasoning</Title>\n              <Text className=\"text-gray-600\">{selectedSuggestion.reasoning}</Text>\n            </div>\n\n            {selectedSuggestion.suggestedChanges.length > 0 && (\n              <div>\n                <Title level={5}>Suggested Changes</Title>\n                <List\n                  size=\"small\"\n                  dataSource={selectedSuggestion.suggestedChanges}\n                  renderItem={(change) => (\n                    <List.Item>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{change.type}</div>\n                        <div className=\"text-sm text-gray-600\">{change.reason}</div>\n                      </div>\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n\n            {Object.keys(selectedSuggestion.estimatedBenefit).length > 0 && (\n              <div>\n                <Title level={5}>Estimated Benefits</Title>\n                <div className=\"space-y-2\">\n                  {selectedSuggestion.estimatedBenefit.performance && (\n                    <div className=\"flex justify-between\">\n                      <span>Performance:</span>\n                      <span className=\"text-green-500\">\n                        +{(selectedSuggestion.estimatedBenefit.performance * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                  {selectedSuggestion.estimatedBenefit.reliability && (\n                    <div className=\"flex justify-between\">\n                      <span>Reliability:</span>\n                      <span className=\"text-blue-500\">\n                        +{(selectedSuggestion.estimatedBenefit.reliability * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                  {selectedSuggestion.estimatedBenefit.maintainability && (\n                    <div className=\"flex justify-between\">\n                      <span>Maintainability:</span>\n                      <span className=\"text-purple-500\">\n                        +{(selectedSuggestion.estimatedBenefit.maintainability * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default AIAssistantPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx",
        "start": 1,
        "end": 578,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 578,
          "column": 2,
          "position": 4362
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx",
        "start": 4,
        "end": 581,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 581,
          "column": 2,
          "position": 4401
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Ready",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 71,
        "end": 84,
        "startLoc": {
          "line": 71,
          "column": 2,
          "position": 699
        },
        "endLoc": {
          "line": 84,
          "column": 6,
          "position": 821
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 111,
        "end": 124,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 1014
        },
        "endLoc": {
          "line": 124,
          "column": 10,
          "position": 1136
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ") : (\n                  <div className=\"text-center py-4 text-gray-400\">\n                    <div className=\"text-sm\">No output data available</div>\n                    <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                  </div>\n                )}\n              </div>\n            </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 100,
        "end": 107,
        "startLoc": {
          "line": 100,
          "column": 17,
          "position": 940
        },
        "endLoc": {
          "line": 107,
          "column": 3,
          "position": 1020
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 157,
        "end": 164,
        "startLoc": {
          "line": 157,
          "column": 19,
          "position": 1357
        },
        "endLoc": {
          "line": 164,
          "column": 2,
          "position": 1437
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "const getNodeIcon = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return '📧';\n  }\n  if (node?.type === 'transform') {\n    return '🔄';\n  }\n  if (node?.type === 'trigger'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 333,
        "end": 343,
        "startLoc": {
          "line": 333,
          "column": 1,
          "position": 3354
        },
        "endLoc": {
          "line": 343,
          "column": 10,
          "position": 3463
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 520,
        "end": 530,
        "startLoc": {
          "line": 520,
          "column": 1,
          "position": 4563
        },
        "endLoc": {
          "line": 530,
          "column": 11,
          "position": 4672
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": ";\n  }\n  if (node?.type === 'trigger') {\n    return '⚡';\n  }\n  return '📊';\n};\n\nconst getNodeType = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return 'gmail-trigger';\n  }\n  if (node?.type === 'transform') {\n    return 'transform';\n  }\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 341,
        "end": 359,
        "startLoc": {
          "line": 341,
          "column": 5,
          "position": 3447
        },
        "endLoc": {
          "line": 359,
          "column": 7,
          "position": 3586
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 531,
        "end": 549,
        "startLoc": {
          "line": 531,
          "column": 5,
          "position": 4698
        },
        "endLoc": {
          "line": 549,
          "column": 3,
          "position": 4837
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\n  }\n  return node?.type || 'unknown';\n};\n\nconst getNodeTypeDisplay = (node: any): string => {\n  return (\n    node?.data?.enhancedNodeType?.displayName ||\n    node?.data?.nodeTypeData?.displayName ||\n    node?.data?.nodeTypeData?.name ||\n    node?.type ||\n    'Unknown Node Type'\n  );\n};\n\nexport default AIAgentInputPanel",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 357,
        "end": 372,
        "startLoc": {
          "line": 357,
          "column": 12,
          "position": 3580
        },
        "endLoc": {
          "line": 372,
          "column": 18,
          "position": 3692
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 550,
        "end": 565,
        "startLoc": {
          "line": 550,
          "column": 11,
          "position": 4873
        },
        "endLoc": {
          "line": 565,
          "column": 20,
          "position": 4985
        }
      }
    },
    {
      "format": "javascript",
      "lines": 505,
      "fragment": "={<UserOutlined />} />\n          <div>\n            <div className=\"text-white font-medium\">{record.name}</div>\n            <div className=\"text-gray-400 text-xs\">{record.email}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      key: 'role',\n      render: (record: User) => <Tag color={getRoleColor(record.role.id)}>{record.role.name}</Tag>,\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: User) => <Tag color={getStatusColor(record.status)}>{record.status}</Tag>,\n    },\n    {\n      title: 'MFA',\n      key: 'mfa',\n      render: (record: User) => (\n        <Badge\n          status={record.mfaEnabled ? 'success' : 'default'}\n          text={record.mfaEnabled ? 'Enabled' : 'Disabled'}\n        />\n      ),\n    },\n    {\n      title: 'Last Login',\n      key: 'lastLogin',\n      render: (record: User) => (\n        <div className=\"text-gray-400 text-xs\">\n          {record.lastLoginAt ? new Date(record.lastLoginAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: User) => (\n        <Space size=\"small\">\n          <Tooltip title=\"Edit User\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setSelectedUser(record);\n                setIsUserModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Manage MFA\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckCircleOutlined />}\n              onClick={() => {\n                // Handle MFA management\n              }}\n              className=\"text-purple-400 hover:text-purple-300\"\n            />\n          </Tooltip>\n          <Dropdown\n            menu={{\n              items: [\n                {\n                  key: 'suspend',\n                  label: record.status === 'active' ? 'Suspend User' : 'Activate User',\n                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\n                },\n                {\n                  key: 'delete',\n                  label: 'Delete User',\n                  icon: <DeleteOutlined />,\n                  danger: true,\n                },\n              ],\n            }}\n            trigger={['click']}\n          >\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<MoreOutlined />}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Dropdown>\n        </Space>\n      ),\n    },\n  ];\n\n  const apiKeyColumns = [\n    {\n      title: 'Name',\n      key: 'name',\n      render: (_record: APIKey) => (\n        <div>\n          <div className=\"text-white font-medium\">{_record.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.metadata.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Key',\n      key: 'key',\n      render: (_record: APIKey) => (\n        <div className=\"font-mono text-xs text-gray-300\">{_record.key.substring(0, 12)}...</div>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (_record: APIKey) => (\n        <Tag color={_record.status === 'active' ? 'green' : 'red'}>{_record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Expires',\n      key: 'expires',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.expiresAt ? new Date(_record.expiresAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Last Used',\n      key: 'lastUsed',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.lastUsedAt ? new Date(_record.lastUsedAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: APIKey) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Revoke Key\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<DeleteOutlined />}\n              className=\"text-red-400 hover:text-red-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderUserStats = () => (\n    <div className=\"grid grid-cols-4 gap-4 mb-6\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic title=\"Total Users\" value={users.length} valueStyle={{ color: '#3b82f6' }} />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Active Users\"\n          value={users.filter((u) => u.status === 'active').length}\n          valueStyle={{ color: '#22c55e' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Pending Invitations\"\n          value={invitations.filter((i) => i.status === 'pending').length}\n          valueStyle={{ color: '#f59e0b' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"MFA Enabled\"\n          value={users.filter((u) => u.mfaEnabled).length}\n          valueStyle={{ color: '#8b5cf6' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderUsersTab = () => (\n    <div className=\"space-y-4\">\n      {renderUserStats()}\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Users\n          </Title>\n          <Space>\n            <Search\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n            />\n            <Select value={selectedRole} onChange={setSelectedRole} className=\"w-32\">\n              <Option value=\"all\">All Roles</Option>\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n            <Button\n              type=\"primary\"\n              icon={<UserAddOutlined />}\n              onClick={() => setIsInviteModalOpen(true)}\n            >\n              Invite User\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={userColumns}\n          dataSource={filteredUsers}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderAPIKeysTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            API Keys\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsAPIKeyModalOpen(true)}>\n            Create API Key\n          </Button>\n        </div>\n\n        <Table\n          columns={apiKeyColumns}\n          dataSource={apiKeys}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderInvitationsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Pending Invitations\n          </Title>\n          <Button type=\"primary\" icon={<MailOutlined />} onClick={() => setIsInviteModalOpen(true)}>\n            Send Invitation\n          </Button>\n        </div>\n\n        <List\n          dataSource={invitations.filter((i) => i.status === 'pending')}\n          renderItem={(invitation) => (\n            <List.Item\n              actions={[\n                <Button key=\"resend\" type=\"text\" size=\"small\">\n                  Resend\n                </Button>,\n                <Button key=\"revoke\" type=\"text\" size=\"small\" danger>\n                  Revoke\n                </Button>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<Avatar icon={<MailOutlined />} />}\n                title={invitation.email}\n                description={\n                  <div>\n                    <div>Role: {invitation.role}</div>\n                    <div className=\"text-gray-400 text-xs\">\n                      Expires: {new Date(invitation.expiresAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderSSOTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-4\">\n          SSO Providers\n        </Title>\n\n        <div className=\"space-y-3\">\n          {ssoProviders.map((provider) => (\n            <div\n              key={provider.id}\n              className=\"flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img src={provider.metadata.logo} alt={provider.name} className=\"w-8 h-8 rounded\" />\n                <div>\n                  <div className=\"text-white font-medium\">{provider.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{provider.metadata.description}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={provider.enabled}\n                  onChange={(_checked) => {\n                    // Handle SSO provider toggle\n                  }}\n                />\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<SettingOutlined />}\n                  onClick={() => {\n                    // Handle SSO configuration\n                  }}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <TeamOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            User Management\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Manage users, roles, permissions, and authentication\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"user-management-tabs\"\n          items={[\n            {\n              key: 'users',\n              label: (\n                <span>\n                  <UserOutlined className=\"mr-1\" />\n                  Users\n                  <Badge count={users.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderUsersTab(),\n            },\n            {\n              key: 'apikeys',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  API Keys\n                  <Badge count={apiKeys.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAPIKeysTab(),\n            },\n            {\n              key: 'invitations',\n              label: (\n                <span>\n                  <MailOutlined className=\"mr-1\" />\n                  Invitations\n                  <Badge\n                    count={invitations.filter((i) => i.status === 'pending').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderInvitationsTab(),\n            },\n            {\n              key: 'sso',\n              label: (\n                <span>\n                  <LockOutlined className=\"mr-1\" />\n                  SSO\n                  <Badge\n                    count={ssoProviders.filter((p) => p.enabled).length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderSSOTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* User Edit Modal */}\n      <Modal\n        title=\"Edit User\"\n        open={isUserModalOpen}\n        onCancel={() => setIsUserModalOpen(false)}\n        onOk={() => setIsUserModalOpen(false)}\n        width={600}\n      >\n        {selectedUser && (\n          <Form layout=\"vertical\">\n            <Form.Item label=\"Name\">\n              <Input value={selectedUser.name} />\n            </Form.Item>\n            <Form.Item label=\"Email\">\n              <Input value={selectedUser.email} />\n            </Form.Item>\n            <Form.Item label=\"Role\">\n              <Select value={selectedUser.role.id}>\n                {roles.map((role) => (\n                  <Option key={role.id} value={role.id}>\n                    {role.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Status\">\n              <Select value={selectedUser.status}>\n                <Option value=\"active\">Active</Option>\n                <Option value=\"inactive\">Inactive</Option>\n                <Option value=\"suspended\">Suspended</Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        )}\n      </Modal>\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={isInviteModalOpen}\n        onCancel={() => setIsInviteModalOpen(false)}\n        onOk={() => setIsInviteModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Email\" required>\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n          <Form.Item label=\"Role\" required>\n            <Select placeholder=\"Select role\">\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Message\">\n            <Input.TextArea placeholder=\"Welcome message (optional)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create API Key Modal */}\n      <Modal\n        title=\"Create API Key\"\n        open={isAPIKeyModalOpen}\n        onCancel={() => setIsAPIKeyModalOpen(false)}\n        onOk={() => setIsAPIKeyModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"API Key Name\" />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Description (optional)\" rows={2}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx",
        "start": 467,
        "end": 971,
        "startLoc": {
          "line": 467,
          "column": 5,
          "position": 3428
        },
        "endLoc": {
          "line": 971,
          "column": 2,
          "position": 7465
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx",
        "start": 470,
        "end": 974,
        "startLoc": {
          "line": 470,
          "column": 5,
          "position": 3467
        },
        "endLoc": {
          "line": 974,
          "column": 2,
          "position": 7504
        }
      }
    },
    {
      "format": "tsx",
      "lines": 995,
      "fragment": "/**\n * User Management Panel\n *\n * Comprehensive user management interface providing:\n * - User listing and search\n * - Role assignment and permissions\n * - User invitation system\n * - MFA management\n * - API key management\n * - SSO configuration\n */\n\nimport {\n  CheckCircleOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  KeyOutlined,\n  LockOutlined,\n  MailOutlined,\n  MoreOutlined,\n  SettingOutlined,\n  TeamOutlined,\n  UnlockOutlined,\n  UserAddOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Dropdown,\n  Form,\n  Input,\n  List,\n  Modal,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\n// import { advancedAuthService } from \"@/core/services/advancedAuthService\";\nimport type {\n  APIKey,\n  SSOProvider,\n  User,\n  UserInvitation,\n  UserRole,\n} from '@/core/types/authentication';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { Option } = Select;\n\ninterface UserManagementPanelProps {\n  className?: string;\n}\n\nconst UserManagementPanel: React.FC<UserManagementPanelProps> = ({ className }) => {\n  const [activeTab, setActiveTab] = useState('users');\n  const [users, setUsers] = useState<User[]>([]);\n  const [roles, setRoles] = useState<UserRole[]>([]);\n  const [apiKeys, setApiKeys] = useState<APIKey[]>([]);\n  const [invitations, setInvitations] = useState<UserInvitation[]>([]);\n  const [ssoProviders, setSSOProviders] = useState<SSOProvider[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState<string>('all');\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\n  const [isAPIKeyModalOpen, setIsAPIKeyModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load data on component mount\n  useEffect(() => {\n    loadUsers();\n    loadRoles();\n    loadAPIKeys();\n    loadInvitations();\n    loadSSOProviders();\n  }, [loadAPIKeys, loadInvitations, loadRoles, loadSSOProviders, loadUsers]);\n\n  const loadUsers = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // Simulate API call - in production, this would fetch from backend\n      const mockUsers: User[] = [\n        {\n          id: 'user_1',\n          email: 'admin@reporunner.com',\n          name: 'Admin User',\n          role: {\n            id: 'admin',\n            name: 'Administrator',\n            description: 'System administration',\n            level: 8,\n            permissions: [],\n            isSystem: true,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'active',\n          createdAt: Date.now(),\n          lastLoginAt: Date.now() - 3600000,\n          mfaEnabled: true,\n          preferences: {\n            theme: 'dark',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: true,\n              push: false,\n              inApp: true,\n              workflows: true,\n              executions: true,\n              security: true,\n            },\n            dashboard: {\n              layout: 'grid',\n              widgets: ['workflows', 'executions', 'recent'],\n              refreshInterval: 30000,\n            },\n            editor: {\n              autoSave: true,\n              autoComplete: true,\n              syntaxHighlighting: true,\n              wordWrap: true,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n        {\n          id: 'user_2',\n          email: 'editor@reporunner.com',\n          name: 'Editor User',\n          role: {\n            id: 'editor',\n            name: 'Editor',\n            description: 'Create and edit workflows',\n            level: 4,\n            permissions: [],\n            isSystem: false,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'active',\n          createdAt: Date.now() - 86400000,\n          lastLoginAt: Date.now() - 7200000,\n          mfaEnabled: false,\n          preferences: {\n            theme: 'light',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: true,\n              push: false,\n              inApp: true,\n              workflows: true,\n              executions: true,\n              security: true,\n            },\n            dashboard: {\n              layout: 'list',\n              widgets: ['workflows', 'executions'],\n              refreshInterval: 60000,\n            },\n            editor: {\n              autoSave: true,\n              autoComplete: true,\n              syntaxHighlighting: true,\n              wordWrap: false,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n        {\n          id: 'user_3',\n          email: 'viewer@reporunner.com',\n          name: 'Viewer User',\n          role: {\n            id: 'viewer',\n            name: 'Viewer',\n            description: 'View-only access',\n            level: 2,\n            permissions: [],\n            isSystem: true,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'pending',\n          createdAt: Date.now() - 172800000,\n          mfaEnabled: false,\n          preferences: {\n            theme: 'dark',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: false,\n              push: false,\n              inApp: true,\n              workflows: false,\n              executions: false,\n              security: true,\n            },\n            dashboard: {\n              layout: 'grid',\n              widgets: ['workflows'],\n              refreshInterval: 300000,\n            },\n            editor: {\n              autoSave: false,\n              autoComplete: false,\n              syntaxHighlighting: true,\n              wordWrap: true,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n      ];\n      setUsers(mockUsers);\n    } catch (_error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loadRoles = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockRoles: UserRole[] = [\n        {\n          id: 'owner',\n          name: 'Owner',\n          description: 'Full system access',\n          level: 10,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'admin',\n          name: 'Administrator',\n          description: 'System administration',\n          level: 8,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'manager',\n          name: 'Manager',\n          description: 'Project management',\n          level: 6,\n          permissions: [],\n          isSystem: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'editor',\n          name: 'Editor',\n          description: 'Create and edit workflows',\n          level: 4,\n          permissions: [],\n          isSystem: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'viewer',\n          name: 'Viewer',\n          description: 'View-only access',\n          level: 2,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n      ];\n      setRoles(mockRoles);\n    } catch (_error) {}\n  }, []);\n\n  const loadAPIKeys = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockAPIKeys: APIKey[] = [\n        {\n          id: 'key_1',\n          name: 'Development API Key',\n          key: 'rr_dev_1234567890abcdef',\n          keyHash: 'hash1',\n          permissions: [],\n          expiresAt: Date.now() + 365 * 24 * 60 * 60 * 1000,\n          lastUsedAt: Date.now() - 3600000,\n          createdAt: Date.now() - 86400000,\n          createdBy: 'user_1',\n          status: 'active',\n          metadata: {\n            description: 'API key for development environment',\n          },\n        },\n        {\n          id: 'key_2',\n          name: 'Production API Key',\n          key: 'rr_prod_abcdef1234567890',\n          keyHash: 'hash2',\n          permissions: [],\n          expiresAt: Date.now() + 30 * 24 * 60 * 60 * 1000,\n          lastUsedAt: Date.now() - 1800000,\n          createdAt: Date.now() - 172800000,\n          createdBy: 'user_1',\n          status: 'active',\n          metadata: {\n            description: 'API key for production environment',\n          },\n        },\n      ];\n      setApiKeys(mockAPIKeys);\n    } catch (_error) {}\n  }, []);\n\n  const loadInvitations = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockInvitations: UserInvitation[] = [\n        {\n          id: 'invite_1',\n          email: 'newuser@example.com',\n          role: 'editor',\n          permissions: [],\n          projects: [],\n          invitedBy: 'user_1',\n          invitedAt: Date.now() - 86400000,\n          expiresAt: Date.now() + 6 * 24 * 60 * 60 * 1000,\n          status: 'pending',\n          token: 'token123',\n          message: 'Welcome to Reporunner!',\n        },\n      ];\n      setInvitations(mockInvitations);\n    } catch (_error) {}\n  }, []);\n\n  const loadSSOProviders = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockProviders: SSOProvider[] = [\n        {\n          id: 'google',\n          name: 'Google',\n          type: 'oauth2',\n          enabled: true,\n          configuration: {\n            issuer: 'https://accounts.google.com',\n            clientId: 'google-client-id',\n            redirectUri: 'http://localhost:3000/auth/callback/google',\n            scopes: ['openid', 'email', 'profile'],\n            endpoints: {\n              authorization: 'https://accounts.google.com/o/oauth2/v2/auth',\n              token: 'https://oauth2.googleapis.com/token',\n              userInfo: 'https://www.googleapis.com/oauth2/v2/userinfo',\n            },\n            attributes: {\n              email: 'email',\n              name: 'name',\n            },\n          },\n          metadata: {\n            logo: 'https://developers.google.com/identity/images/g-logo.png',\n            description: 'Sign in with Google',\n          },\n        },\n        {\n          id: 'microsoft',\n          name: 'Microsoft',\n          type: 'oauth2',\n          enabled: false,\n          configuration: {\n            issuer: 'https://login.microsoftonline.com/common',\n            clientId: 'microsoft-client-id',\n            redirectUri: 'http://localhost:3000/auth/callback/microsoft',\n            scopes: ['openid', 'email', 'profile'],\n            endpoints: {\n              authorization: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n              token: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n              userInfo: 'https://graph.microsoft.com/v1.0/me',\n            },\n            attributes: {\n              email: 'mail',\n              name: 'displayName',\n            },\n          },\n          metadata: {\n            logo: 'https://img.icons8.com/color/48/000000/microsoft.png',\n            description: 'Sign in with Microsoft',\n          },\n        },\n      ];\n      setSSOProviders(mockProviders);\n    } catch (_error) {}\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'green';\n      case 'inactive':\n        return 'gray';\n      case 'pending':\n        return 'orange';\n      case 'suspended':\n        return 'red';\n      default:\n        return 'default';\n    }\n  };\n\n  const getRoleColor = (roleId: string) => {\n    switch (roleId) {\n      case 'owner':\n        return 'red';\n      case 'admin':\n        return 'purple';\n      case 'manager':\n        return 'blue';\n      case 'editor':\n        return 'green';\n      case 'viewer':\n        return 'gray';\n      default:\n        return 'default';\n    }\n  };\n\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch =\n      !searchTerm ||\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesRole = selectedRole === 'all' || user.role.id === selectedRole;\n\n    return matchesSearch && matchesRole;\n  });\n\n  const userColumns = [\n    {\n      title: 'User',\n      key: 'user',\n      render: (record: User) => (\n        <div className=\"flex items-center gap-3\">\n          <Avatar size=\"small\" icon={<UserOutlined />} />\n          <div>\n            <div className=\"text-white font-medium\">{record.name}</div>\n            <div className=\"text-gray-400 text-xs\">{record.email}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      key: 'role',\n      render: (record: User) => <Tag color={getRoleColor(record.role.id)}>{record.role.name}</Tag>,\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: User) => <Tag color={getStatusColor(record.status)}>{record.status}</Tag>,\n    },\n    {\n      title: 'MFA',\n      key: 'mfa',\n      render: (record: User) => (\n        <Badge\n          status={record.mfaEnabled ? 'success' : 'default'}\n          text={record.mfaEnabled ? 'Enabled' : 'Disabled'}\n        />\n      ),\n    },\n    {\n      title: 'Last Login',\n      key: 'lastLogin',\n      render: (record: User) => (\n        <div className=\"text-gray-400 text-xs\">\n          {record.lastLoginAt ? new Date(record.lastLoginAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: User) => (\n        <Space size=\"small\">\n          <Tooltip title=\"Edit User\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setSelectedUser(record);\n                setIsUserModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Manage MFA\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckCircleOutlined />}\n              onClick={() => {\n                // Handle MFA management\n              }}\n              className=\"text-purple-400 hover:text-purple-300\"\n            />\n          </Tooltip>\n          <Dropdown\n            menu={{\n              items: [\n                {\n                  key: 'suspend',\n                  label: record.status === 'active' ? 'Suspend User' : 'Activate User',\n                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\n                },\n                {\n                  key: 'delete',\n                  label: 'Delete User',\n                  icon: <DeleteOutlined />,\n                  danger: true,\n                },\n              ],\n            }}\n            trigger={['click']}\n          >\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<MoreOutlined />}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Dropdown>\n        </Space>\n      ),\n    },\n  ];\n\n  const apiKeyColumns = [\n    {\n      title: 'Name',\n      key: 'name',\n      render: (_record: APIKey) => (\n        <div>\n          <div className=\"text-white font-medium\">{_record.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.metadata.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Key',\n      key: 'key',\n      render: (_record: APIKey) => (\n        <div className=\"font-mono text-xs text-gray-300\">{_record.key.substring(0, 12)}...</div>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (_record: APIKey) => (\n        <Tag color={_record.status === 'active' ? 'green' : 'red'}>{_record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Expires',\n      key: 'expires',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.expiresAt ? new Date(_record.expiresAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Last Used',\n      key: 'lastUsed',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.lastUsedAt ? new Date(_record.lastUsedAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: APIKey) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Revoke Key\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<DeleteOutlined />}\n              className=\"text-red-400 hover:text-red-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderUserStats = () => (\n    <div className=\"grid grid-cols-4 gap-4 mb-6\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic title=\"Total Users\" value={users.length} valueStyle={{ color: '#3b82f6' }} />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Active Users\"\n          value={users.filter((u) => u.status === 'active').length}\n          valueStyle={{ color: '#22c55e' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Pending Invitations\"\n          value={invitations.filter((i) => i.status === 'pending').length}\n          valueStyle={{ color: '#f59e0b' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"MFA Enabled\"\n          value={users.filter((u) => u.mfaEnabled).length}\n          valueStyle={{ color: '#8b5cf6' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderUsersTab = () => (\n    <div className=\"space-y-4\">\n      {renderUserStats()}\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Users\n          </Title>\n          <Space>\n            <Search\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n            />\n            <Select value={selectedRole} onChange={setSelectedRole} className=\"w-32\">\n              <Option value=\"all\">All Roles</Option>\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n            <Button\n              type=\"primary\"\n              icon={<UserAddOutlined />}\n              onClick={() => setIsInviteModalOpen(true)}\n            >\n              Invite User\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={userColumns}\n          dataSource={filteredUsers}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderAPIKeysTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            API Keys\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsAPIKeyModalOpen(true)}>\n            Create API Key\n          </Button>\n        </div>\n\n        <Table\n          columns={apiKeyColumns}\n          dataSource={apiKeys}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderInvitationsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Pending Invitations\n          </Title>\n          <Button type=\"primary\" icon={<MailOutlined />} onClick={() => setIsInviteModalOpen(true)}>\n            Send Invitation\n          </Button>\n        </div>\n\n        <List\n          dataSource={invitations.filter((i) => i.status === 'pending')}\n          renderItem={(invitation) => (\n            <List.Item\n              actions={[\n                <Button key=\"resend\" type=\"text\" size=\"small\">\n                  Resend\n                </Button>,\n                <Button key=\"revoke\" type=\"text\" size=\"small\" danger>\n                  Revoke\n                </Button>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<Avatar icon={<MailOutlined />} />}\n                title={invitation.email}\n                description={\n                  <div>\n                    <div>Role: {invitation.role}</div>\n                    <div className=\"text-gray-400 text-xs\">\n                      Expires: {new Date(invitation.expiresAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderSSOTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-4\">\n          SSO Providers\n        </Title>\n\n        <div className=\"space-y-3\">\n          {ssoProviders.map((provider) => (\n            <div\n              key={provider.id}\n              className=\"flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img src={provider.metadata.logo} alt={provider.name} className=\"w-8 h-8 rounded\" />\n                <div>\n                  <div className=\"text-white font-medium\">{provider.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{provider.metadata.description}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={provider.enabled}\n                  onChange={(_checked) => {\n                    // Handle SSO provider toggle\n                  }}\n                />\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<SettingOutlined />}\n                  onClick={() => {\n                    // Handle SSO configuration\n                  }}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <TeamOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            User Management\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Manage users, roles, permissions, and authentication\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"user-management-tabs\"\n          items={[\n            {\n              key: 'users',\n              label: (\n                <span>\n                  <UserOutlined className=\"mr-1\" />\n                  Users\n                  <Badge count={users.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderUsersTab(),\n            },\n            {\n              key: 'apikeys',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  API Keys\n                  <Badge count={apiKeys.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAPIKeysTab(),\n            },\n            {\n              key: 'invitations',\n              label: (\n                <span>\n                  <MailOutlined className=\"mr-1\" />\n                  Invitations\n                  <Badge\n                    count={invitations.filter((i) => i.status === 'pending').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderInvitationsTab(),\n            },\n            {\n              key: 'sso',\n              label: (\n                <span>\n                  <LockOutlined className=\"mr-1\" />\n                  SSO\n                  <Badge\n                    count={ssoProviders.filter((p) => p.enabled).length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderSSOTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* User Edit Modal */}\n      <Modal\n        title=\"Edit User\"\n        open={isUserModalOpen}\n        onCancel={() => setIsUserModalOpen(false)}\n        onOk={() => setIsUserModalOpen(false)}\n        width={600}\n      >\n        {selectedUser && (\n          <Form layout=\"vertical\">\n            <Form.Item label=\"Name\">\n              <Input value={selectedUser.name} />\n            </Form.Item>\n            <Form.Item label=\"Email\">\n              <Input value={selectedUser.email} />\n            </Form.Item>\n            <Form.Item label=\"Role\">\n              <Select value={selectedUser.role.id}>\n                {roles.map((role) => (\n                  <Option key={role.id} value={role.id}>\n                    {role.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Status\">\n              <Select value={selectedUser.status}>\n                <Option value=\"active\">Active</Option>\n                <Option value=\"inactive\">Inactive</Option>\n                <Option value=\"suspended\">Suspended</Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        )}\n      </Modal>\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={isInviteModalOpen}\n        onCancel={() => setIsInviteModalOpen(false)}\n        onOk={() => setIsInviteModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Email\" required>\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n          <Form.Item label=\"Role\" required>\n            <Select placeholder=\"Select role\">\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Message\">\n            <Input.TextArea placeholder=\"Welcome message (optional)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create API Key Modal */}\n      <Modal\n        title=\"Create API Key\"\n        open={isAPIKeyModalOpen}\n        onCancel={() => setIsAPIKeyModalOpen(false)}\n        onOk={() => setIsAPIKeyModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"API Key Name\" />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Description (optional)\" rows={2} />\n          </Form.Item>\n          <Form.Item label=\"Expiration\">\n            <Select placeholder=\"Select expiration\">\n              <Option value=\"30\">30 days</Option>\n              <Option value=\"90\">90 days</Option>\n              <Option value=\"365\">1 year</Option>\n              <Option value=\"never\">Never</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Permissions\">\n            <Select mode=\"multiple\" placeholder=\"Select permissions\">\n              <Option value=\"read\">Read</Option>\n              <Option value=\"write\">Write</Option>\n              <Option value=\"execute\">Execute</Option>\n              <Option value=\"manage\">Manage</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default UserManagementPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx",
        "start": 1,
        "end": 995,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 995,
          "column": 2,
          "position": 7698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx",
        "start": 4,
        "end": 998,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 998,
          "column": 2,
          "position": 7737
        }
      }
    },
    {
      "format": "javascript",
      "lines": 707,
      "fragment": "={getSeverityColor(_record.severity)}>{_record.action.type}</Tag>\n        </div>\n      ),\n    },\n    {\n      title: 'Resource',\n      key: 'resource',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.resource.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.resource.type}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (_record: AuditLog) => (\n        <Tag color={getSeverityColor(_record.severity)}>{_record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'IP Address',\n      key: 'ipAddress',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs font-mono\">{_record.ipAddress}</div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: AuditLog) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                // Show audit log details\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const incidentColumns = [\n    {\n      title: 'Title',\n      key: 'title',\n      render: (record: SecurityIncident) => (\n        <div>\n          <div className=\"text-white font-medium\">{record.title}</div>\n          <div className=\"text-gray-400 text-xs\">{record.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (record: SecurityIncident) => (\n        <Tag color={getSeverityColor(record.severity)}>{record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: SecurityIncident) => (\n        <Tag color={getStatusColor(record.status)}>{record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Category',\n      key: 'category',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs capitalize\">{record.category.replace('_', ' ')}</div>\n      ),\n    },\n    {\n      title: 'Created',\n      key: 'createdAt',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs\">\n          {new Date(record.createdAt).toLocaleDateString()}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: SecurityIncident) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedIncident(record);\n                setIsIncidentModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Update Status\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<SettingOutlined />}\n              onClick={() => {\n                // Update incident status\n              }}\n              className=\"text-green-400 hover:text-green-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {/* Security Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Security Score\"\n              value={metrics?.securityScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#22c55e' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Open Incidents\"\n              value={metrics?.openIncidents || 0}\n              valueStyle={{ color: '#ef4444' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Critical Incidents\"\n              value={metrics?.criticalIncidents || 0}\n              valueStyle={{ color: '#dc2626' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Compliance Score\"\n              value={metrics?.complianceScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#3b82f6' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Recent Security Events */}\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Recent Security Events\n          </Title>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<ReloadOutlined />}\n            onClick={loadSecurityData}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </div>\n\n        <Timeline\n          items={auditLogs.slice(0, 5).map((log) => ({\n            color: getSeverityColor(log.severity),\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white text-sm\">{log.action.description}</div>\n                <div className=\"text-gray-400 text-xs\">\n                  {log.userEmail} • {new Date(log.timestamp).toLocaleString()}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Tag color={getSeverityColor(log.severity)}>{log.severity}</Tag>\n                  <Tag>{log.category}</Tag>\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      </Card>\n\n      {/* Security Alerts */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Security Alerts\n            </Title>\n            <div className=\"space-y-3\">\n              {incidents.slice(0, 3).map((incident) => (\n                <Alert\n                  key={incident.id}\n                  message={incident.title}\n                  description={incident.description}\n                  type={incident.severity === 'critical' ? 'error' : 'warning'}\n                  showIcon\n                  className=\"bg-red-900 border-red-600\"\n                />\n              ))}\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Vulnerability Summary\n            </Title>\n            <div className=\"space-y-3\">\n              {vulnerabilityScans.slice(0, 3).map((scan) => (\n                <div\n                  key={scan.id}\n                  className=\"flex items-center justify-between p-2 bg-gray-700 rounded\"\n                >\n                  <div>\n                    <div className=\"text-white text-sm\">{scan.target}</div>\n                    <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-white text-sm\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">findings</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  const renderAuditLogsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Audit Logs\n          </Title>\n          <Space>\n            <Select\n              value={filters.severity}\n              onChange={(value) => setFilters({ ...filters, severity: value })}\n              className=\"w-32\"\n            >\n              <Option value=\"all\">All Severity</Option>\n              <Option value=\"critical\">Critical</Option>\n              <Option value=\"error\">Error</Option>\n              <Option value=\"warning\">Warning</Option>\n              <Option value=\"info\">Info</Option>\n            </Select>\n            <Select\n              value={filters.category}\n              onChange={(value) => setFilters({ ...filters, category: value })}\n              className=\"w-40\"\n            >\n              <Option value=\"all\">All Categories</Option>\n              <Option value=\"authentication\">Authentication</Option>\n              <Option value=\"authorization\">Authorization</Option>\n              <Option value=\"data_access\">Data Access</Option>\n              <Option value=\"security_event\">Security Event</Option>\n            </Select>\n            <RangePicker\n              value={[filters.startDate, filters.endDate]}\n              onChange={(dates) =>\n                setFilters({\n                  ...filters,\n                  startDate: dates?.[0],\n                  endDate: dates?.[1],\n                })\n              }\n              className=\"w-64\"\n            />\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => {\n                // Export audit logs\n              }}\n            >\n              Export\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={auditLogColumns}\n          dataSource={filteredAuditLogs}\n          loading={isLoading}\n          pagination={{ pageSize: 20 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n          scroll={{ x: 'max-content' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderIncidentsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Security Incidents\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AlertOutlined />}\n            onClick={() => setIsIncidentModalOpen(true)}\n          >\n            Create Incident\n          </Button>\n        </div>\n\n        <Table\n          columns={incidentColumns}\n          dataSource={incidents}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderVulnerabilitiesTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Vulnerability Scans\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<SecurityScanOutlined />}\n            onClick={() => setIsScanModalOpen(true)}\n          >\n            Start Scan\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {vulnerabilityScans.map((scan) => (\n            <Card key={scan.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{scan.target}</div>\n                  <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">Total</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-red-400 text-lg font-bold\">{scan.summary.critical}</div>\n                    <div className=\"text-gray-400 text-xs\">Critical</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-orange-400 text-lg font-bold\">{scan.summary.high}</div>\n                    <div className=\"text-gray-400 text-xs\">High</div>\n                  </div>\n                  <Tag color={scan.status === 'completed' ? 'green' : 'orange'}>{scan.status}</Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderComplianceTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Compliance Reports\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AuditOutlined />}\n            onClick={() => {\n              // Generate compliance report\n            }}\n          >\n            Generate Report\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {complianceReports.map((report) => (\n            <Card key={report.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{report.standard} Compliance Report</div>\n                  <div className=\"text-gray-400 text-xs\">\n                    Generated: {new Date(report.generatedAt).toLocaleDateString()}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.score}</div>\n                    <div className=\"text-gray-400 text-xs\">Score</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.findings.length}</div>\n                    <div className=\"text-gray-400 text-xs\">Findings</div>\n                  </div>\n                  <Tag color={report.status === 'completed' ? 'green' : 'orange'}>\n                    {report.status}\n                  </Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderSecretsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Secrets Management\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsSecretModalOpen(true)}>\n            Create Secret\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {secrets.map((secret) => (\n            <Card key={secret.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{secret.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{secret.type}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">\n                      {secret.metadata?.accessCount || 0}\n                    </div>\n                    <div className=\"text-gray-400 text-xs\">Access Count</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{secret.keyVersion}</div>\n                    <div className=\"text-gray-400 text-xs\">Key Version</div>\n                  </div>\n                  <Space>\n                    <Tooltip title=\"Rotate Secret\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<ReloadOutlined />}\n                        className=\"text-blue-400 hover:text-blue-300\"\n                      />\n                    </Tooltip>\n                    <Tooltip title=\"View Details\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<EyeOutlined />}\n                        className=\"text-green-400 hover:text-green-300\"\n                      />\n                    </Tooltip>\n                  </Space>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <CheckCircleOutlined className=\"text-green-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Security Dashboard\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Enterprise security monitoring and compliance management\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"security-dashboard-tabs\"\n          items={[\n            {\n              key: 'overview',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Overview\n                </span>\n              ),\n              children: renderOverviewTab(),\n            },\n            {\n              key: 'audit',\n              label: (\n                <span>\n                  <AuditOutlined className=\"mr-1\" />\n                  Audit Logs\n                  <Badge count={auditLogs.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAuditLogsTab(),\n            },\n            {\n              key: 'incidents',\n              label: (\n                <span>\n                  <AlertOutlined className=\"mr-1\" />\n                  Incidents\n                  <Badge\n                    count={incidents.filter((i) => i.status === 'open').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderIncidentsTab(),\n            },\n            {\n              key: 'vulnerabilities',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Vulnerabilities\n                  <Badge count={vulnerabilityScans.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderVulnerabilitiesTab(),\n            },\n            {\n              key: 'compliance',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Compliance\n                  <Badge count={complianceReports.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderComplianceTab(),\n            },\n            {\n              key: 'secrets',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  Secrets\n                  <Badge count={secrets.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderSecretsTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Incident Details Modal */}\n      <Modal\n        title=\"Security Incident Details\"\n        open={isIncidentModalOpen}\n        onCancel={() => setIsIncidentModalOpen(false)}\n        footer={null}\n        width={800}\n      >\n        {selectedIncident && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Text className=\"text-gray-400\">Title</Text>\n                <div className=\"text-white font-medium\">{selectedIncident.title}</div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Severity</Text>\n                <div>\n                  <Tag color={getSeverityColor(selectedIncident.severity)}>\n                    {selectedIncident.severity}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Status</Text>\n                <div>\n                  <Tag color={getStatusColor(selectedIncident.status)}>\n                    {selectedIncident.status}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Category</Text>\n                <div className=\"text-white\">{selectedIncident.category}</div>\n              </div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Description</Text>\n              <div className=\"text-white\">{selectedIncident.description}</div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Timeline</Text>\n              <Timeline\n                items={selectedIncident.timeline.map((event) => ({\n                  color: 'blue',\n                  children: (\n                    <div className=\"space-y-1\">\n                      <div className=\"text-white text-sm\">{event.description}</div>\n                      <div className=\"text-gray-400 text-xs\">\n                        {new Date(event.timestamp).toLocaleString()} • {event.actor}\n                      </div>\n                    </div>\n                  ),\n                }))}\n              />\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Start Vulnerability Scan Modal */}\n      <Modal\n        title=\"Start Vulnerability Scan\"\n        open={isScanModalOpen}\n        onCancel={() => setIsScanModalOpen(false)}\n        onOk={() => setIsScanModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Scan Type\" required>\n            <Select placeholder=\"Select scan type\">\n              <Option value=\"dependency\">Dependency Scan</Option>\n              <Option value=\"container\">Container Scan</Option>\n              <Option value=\"infrastructure\">Infrastructure Scan</Option>\n              <Option value=\"code\">Code Scan</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Target\" required>\n            <Input placeholder=\"Enter target (URL, path, etc.)\" />\n          </Form.Item>\n          <Form.Item label=\"Options\">\n            <Input.TextArea placeholder=\"Additional scan options (JSON)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create Secret Modal */}\n      <Modal\n        title=\"Create Secret\"\n        open={isSecretModalOpen}\n        onCancel={() => setIsSecretModalOpen(false)}\n        onOk={() => setIsSecretModalOpen(false)}\n        width={600}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"Secret name\" />\n          </Form.Item>\n          <Form.Item label=\"Type\" required>\n            <Select placeholder=\"Select secret type\">\n              <Option value=\"api_key\">API Key</Option>\n              <Option value=\"password\">Password</Option>\n              <Option value=\"certificate\">Certificate</Option>\n              <Option value=\"token\">Token</Option>\n              <Option value=\"database_credential\">Database Credential</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Value\" required>\n            <Input.TextArea placeholder=\"Secret value\" rows={3} />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Secret description\" rows={2}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx",
        "start": 186,
        "end": 892,
        "startLoc": {
          "line": 186,
          "column": 6,
          "position": 1547
        },
        "endLoc": {
          "line": 892,
          "column": 2,
          "position": 7525
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx",
        "start": 189,
        "end": 895,
        "startLoc": {
          "line": 189,
          "column": 6,
          "position": 1586
        },
        "endLoc": {
          "line": 895,
          "column": 2,
          "position": 7564
        }
      }
    },
    {
      "format": "tsx",
      "lines": 908,
      "fragment": "/**\n * Security Dashboard Component\n *\n * Comprehensive security monitoring interface providing:\n * - Real-time security metrics and alerts\n * - Audit log visualization and filtering\n * - Vulnerability scan results and management\n * - Security incident tracking and response\n * - Compliance reporting and monitoring\n * - Secrets management and rotation\n */\n\nimport {\n  AlertOutlined,\n  AuditOutlined,\n  BugOutlined,\n  CheckCircleOutlined,\n  DownloadOutlined,\n  EyeOutlined,\n  KeyOutlined,\n  ReloadOutlined,\n  SecurityScanOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { enterpriseSecurityService } from '@/core/services/enterpriseSecurityService';\nimport type {\n  AuditCategory,\n  AuditLog,\n  AuditSeverity,\n  ComplianceReport,\n  SecretManager,\n  SecurityIncident,\n  SecurityMetrics,\n  VulnerabilityScan,\n} from '@/core/types/security';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\ninterface SecurityDashboardProps {\n  className?: string;\n}\n\nconst SecurityDashboard: React.FC<SecurityDashboardProps> = ({ className }) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [metrics, setMetrics] = useState<SecurityMetrics | null>(null);\n  const [auditLogs, setAuditLogs] = useState<AuditLog[]>([]);\n  const [incidents, setIncidents] = useState<SecurityIncident[]>([]);\n  const [vulnerabilityScans, setVulnerabilityScans] = useState<VulnerabilityScan[]>([]);\n  const [complianceReports, setComplianceReports] = useState<ComplianceReport[]>([]);\n  const [secrets, setSecrets] = useState<SecretManager[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedIncident, setSelectedIncident] = useState<SecurityIncident | null>(null);\n  const [isIncidentModalOpen, setIsIncidentModalOpen] = useState(false);\n  const [isScanModalOpen, setIsScanModalOpen] = useState(false);\n  const [isSecretModalOpen, setIsSecretModalOpen] = useState(false);\n  const [filters, setFilters] = useState({\n    severity: 'all' as AuditSeverity | 'all',\n    category: 'all' as AuditCategory | 'all',\n    startDate: null as any,\n    endDate: null as any,\n  });\n\n  // Load data on component mount\n  useEffect(() => {\n    loadSecurityData();\n  }, [loadSecurityData]);\n\n  const loadSecurityData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const [metricsData, auditLogsData, incidentsData, scansData, reportsData, secretsData] =\n        await Promise.all([\n          enterpriseSecurityService.getSecurityMetrics(),\n          enterpriseSecurityService.getAuditLogs({ limit: 100 }),\n          Promise.resolve([]), // getSecurityIncidents - method doesn't exist yet\n          enterpriseSecurityService.getVulnerabilityScans(),\n          Promise.resolve([]), // getComplianceReports - method doesn't exist yet\n          Promise.resolve([]), // getSecrets - method doesn't exist yet\n        ]);\n\n      setMetrics(metricsData);\n      setAuditLogs(auditLogsData);\n      setIncidents(incidentsData as SecurityIncident[]);\n      setVulnerabilityScans(scansData);\n      setComplianceReports(reportsData as ComplianceReport[]);\n      setSecrets(secretsData as SecretManager[]);\n    } catch (_error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'yellow';\n      case 'low':\n        return 'green';\n      case 'info':\n        return 'blue';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'red';\n      case 'investigating':\n        return 'orange';\n      case 'contained':\n        return 'blue';\n      case 'resolved':\n        return 'green';\n      case 'closed':\n        return 'gray';\n      default:\n        return 'default';\n    }\n  };\n\n  const filteredAuditLogs = auditLogs.filter((log) => {\n    if (filters.severity !== 'all' && log.severity !== filters.severity) return false;\n    if (filters.category !== 'all' && log.category !== filters.category) return false;\n    if (filters.startDate && log.timestamp < filters.startDate.valueOf()) return false;\n    if (filters.endDate && log.timestamp > filters.endDate.valueOf()) return false;\n    return true;\n  });\n\n  const auditLogColumns = [\n    {\n      title: 'Timestamp',\n      key: 'timestamp',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs\">{new Date(_record.timestamp).toLocaleString()}</div>\n      ),\n      sorter: (a: AuditLog, b: AuditLog) => a.timestamp - b.timestamp,\n    },\n    {\n      title: 'User',\n      key: 'user',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.userEmail}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.userId}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.action.description}</div>\n          <Tag color={getSeverityColor(_record.severity)}>{_record.action.type}</Tag>\n        </div>\n      ),\n    },\n    {\n      title: 'Resource',\n      key: 'resource',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.resource.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.resource.type}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (_record: AuditLog) => (\n        <Tag color={getSeverityColor(_record.severity)}>{_record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'IP Address',\n      key: 'ipAddress',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs font-mono\">{_record.ipAddress}</div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: AuditLog) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                // Show audit log details\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const incidentColumns = [\n    {\n      title: 'Title',\n      key: 'title',\n      render: (record: SecurityIncident) => (\n        <div>\n          <div className=\"text-white font-medium\">{record.title}</div>\n          <div className=\"text-gray-400 text-xs\">{record.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (record: SecurityIncident) => (\n        <Tag color={getSeverityColor(record.severity)}>{record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: SecurityIncident) => (\n        <Tag color={getStatusColor(record.status)}>{record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Category',\n      key: 'category',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs capitalize\">{record.category.replace('_', ' ')}</div>\n      ),\n    },\n    {\n      title: 'Created',\n      key: 'createdAt',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs\">\n          {new Date(record.createdAt).toLocaleDateString()}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: SecurityIncident) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedIncident(record);\n                setIsIncidentModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Update Status\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<SettingOutlined />}\n              onClick={() => {\n                // Update incident status\n              }}\n              className=\"text-green-400 hover:text-green-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {/* Security Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Security Score\"\n              value={metrics?.securityScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#22c55e' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Open Incidents\"\n              value={metrics?.openIncidents || 0}\n              valueStyle={{ color: '#ef4444' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Critical Incidents\"\n              value={metrics?.criticalIncidents || 0}\n              valueStyle={{ color: '#dc2626' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Compliance Score\"\n              value={metrics?.complianceScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#3b82f6' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Recent Security Events */}\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Recent Security Events\n          </Title>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<ReloadOutlined />}\n            onClick={loadSecurityData}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </div>\n\n        <Timeline\n          items={auditLogs.slice(0, 5).map((log) => ({\n            color: getSeverityColor(log.severity),\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white text-sm\">{log.action.description}</div>\n                <div className=\"text-gray-400 text-xs\">\n                  {log.userEmail} • {new Date(log.timestamp).toLocaleString()}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Tag color={getSeverityColor(log.severity)}>{log.severity}</Tag>\n                  <Tag>{log.category}</Tag>\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      </Card>\n\n      {/* Security Alerts */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Security Alerts\n            </Title>\n            <div className=\"space-y-3\">\n              {incidents.slice(0, 3).map((incident) => (\n                <Alert\n                  key={incident.id}\n                  message={incident.title}\n                  description={incident.description}\n                  type={incident.severity === 'critical' ? 'error' : 'warning'}\n                  showIcon\n                  className=\"bg-red-900 border-red-600\"\n                />\n              ))}\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Vulnerability Summary\n            </Title>\n            <div className=\"space-y-3\">\n              {vulnerabilityScans.slice(0, 3).map((scan) => (\n                <div\n                  key={scan.id}\n                  className=\"flex items-center justify-between p-2 bg-gray-700 rounded\"\n                >\n                  <div>\n                    <div className=\"text-white text-sm\">{scan.target}</div>\n                    <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-white text-sm\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">findings</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  const renderAuditLogsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Audit Logs\n          </Title>\n          <Space>\n            <Select\n              value={filters.severity}\n              onChange={(value) => setFilters({ ...filters, severity: value })}\n              className=\"w-32\"\n            >\n              <Option value=\"all\">All Severity</Option>\n              <Option value=\"critical\">Critical</Option>\n              <Option value=\"error\">Error</Option>\n              <Option value=\"warning\">Warning</Option>\n              <Option value=\"info\">Info</Option>\n            </Select>\n            <Select\n              value={filters.category}\n              onChange={(value) => setFilters({ ...filters, category: value })}\n              className=\"w-40\"\n            >\n              <Option value=\"all\">All Categories</Option>\n              <Option value=\"authentication\">Authentication</Option>\n              <Option value=\"authorization\">Authorization</Option>\n              <Option value=\"data_access\">Data Access</Option>\n              <Option value=\"security_event\">Security Event</Option>\n            </Select>\n            <RangePicker\n              value={[filters.startDate, filters.endDate]}\n              onChange={(dates) =>\n                setFilters({\n                  ...filters,\n                  startDate: dates?.[0],\n                  endDate: dates?.[1],\n                })\n              }\n              className=\"w-64\"\n            />\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => {\n                // Export audit logs\n              }}\n            >\n              Export\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={auditLogColumns}\n          dataSource={filteredAuditLogs}\n          loading={isLoading}\n          pagination={{ pageSize: 20 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n          scroll={{ x: 'max-content' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderIncidentsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Security Incidents\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AlertOutlined />}\n            onClick={() => setIsIncidentModalOpen(true)}\n          >\n            Create Incident\n          </Button>\n        </div>\n\n        <Table\n          columns={incidentColumns}\n          dataSource={incidents}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderVulnerabilitiesTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Vulnerability Scans\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<SecurityScanOutlined />}\n            onClick={() => setIsScanModalOpen(true)}\n          >\n            Start Scan\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {vulnerabilityScans.map((scan) => (\n            <Card key={scan.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{scan.target}</div>\n                  <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">Total</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-red-400 text-lg font-bold\">{scan.summary.critical}</div>\n                    <div className=\"text-gray-400 text-xs\">Critical</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-orange-400 text-lg font-bold\">{scan.summary.high}</div>\n                    <div className=\"text-gray-400 text-xs\">High</div>\n                  </div>\n                  <Tag color={scan.status === 'completed' ? 'green' : 'orange'}>{scan.status}</Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderComplianceTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Compliance Reports\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AuditOutlined />}\n            onClick={() => {\n              // Generate compliance report\n            }}\n          >\n            Generate Report\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {complianceReports.map((report) => (\n            <Card key={report.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{report.standard} Compliance Report</div>\n                  <div className=\"text-gray-400 text-xs\">\n                    Generated: {new Date(report.generatedAt).toLocaleDateString()}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.score}</div>\n                    <div className=\"text-gray-400 text-xs\">Score</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.findings.length}</div>\n                    <div className=\"text-gray-400 text-xs\">Findings</div>\n                  </div>\n                  <Tag color={report.status === 'completed' ? 'green' : 'orange'}>\n                    {report.status}\n                  </Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderSecretsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Secrets Management\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsSecretModalOpen(true)}>\n            Create Secret\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {secrets.map((secret) => (\n            <Card key={secret.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{secret.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{secret.type}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">\n                      {secret.metadata?.accessCount || 0}\n                    </div>\n                    <div className=\"text-gray-400 text-xs\">Access Count</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{secret.keyVersion}</div>\n                    <div className=\"text-gray-400 text-xs\">Key Version</div>\n                  </div>\n                  <Space>\n                    <Tooltip title=\"Rotate Secret\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<ReloadOutlined />}\n                        className=\"text-blue-400 hover:text-blue-300\"\n                      />\n                    </Tooltip>\n                    <Tooltip title=\"View Details\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<EyeOutlined />}\n                        className=\"text-green-400 hover:text-green-300\"\n                      />\n                    </Tooltip>\n                  </Space>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <CheckCircleOutlined className=\"text-green-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Security Dashboard\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Enterprise security monitoring and compliance management\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"security-dashboard-tabs\"\n          items={[\n            {\n              key: 'overview',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Overview\n                </span>\n              ),\n              children: renderOverviewTab(),\n            },\n            {\n              key: 'audit',\n              label: (\n                <span>\n                  <AuditOutlined className=\"mr-1\" />\n                  Audit Logs\n                  <Badge count={auditLogs.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAuditLogsTab(),\n            },\n            {\n              key: 'incidents',\n              label: (\n                <span>\n                  <AlertOutlined className=\"mr-1\" />\n                  Incidents\n                  <Badge\n                    count={incidents.filter((i) => i.status === 'open').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderIncidentsTab(),\n            },\n            {\n              key: 'vulnerabilities',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Vulnerabilities\n                  <Badge count={vulnerabilityScans.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderVulnerabilitiesTab(),\n            },\n            {\n              key: 'compliance',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Compliance\n                  <Badge count={complianceReports.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderComplianceTab(),\n            },\n            {\n              key: 'secrets',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  Secrets\n                  <Badge count={secrets.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderSecretsTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Incident Details Modal */}\n      <Modal\n        title=\"Security Incident Details\"\n        open={isIncidentModalOpen}\n        onCancel={() => setIsIncidentModalOpen(false)}\n        footer={null}\n        width={800}\n      >\n        {selectedIncident && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Text className=\"text-gray-400\">Title</Text>\n                <div className=\"text-white font-medium\">{selectedIncident.title}</div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Severity</Text>\n                <div>\n                  <Tag color={getSeverityColor(selectedIncident.severity)}>\n                    {selectedIncident.severity}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Status</Text>\n                <div>\n                  <Tag color={getStatusColor(selectedIncident.status)}>\n                    {selectedIncident.status}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Category</Text>\n                <div className=\"text-white\">{selectedIncident.category}</div>\n              </div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Description</Text>\n              <div className=\"text-white\">{selectedIncident.description}</div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Timeline</Text>\n              <Timeline\n                items={selectedIncident.timeline.map((event) => ({\n                  color: 'blue',\n                  children: (\n                    <div className=\"space-y-1\">\n                      <div className=\"text-white text-sm\">{event.description}</div>\n                      <div className=\"text-gray-400 text-xs\">\n                        {new Date(event.timestamp).toLocaleString()} • {event.actor}\n                      </div>\n                    </div>\n                  ),\n                }))}\n              />\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Start Vulnerability Scan Modal */}\n      <Modal\n        title=\"Start Vulnerability Scan\"\n        open={isScanModalOpen}\n        onCancel={() => setIsScanModalOpen(false)}\n        onOk={() => setIsScanModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Scan Type\" required>\n            <Select placeholder=\"Select scan type\">\n              <Option value=\"dependency\">Dependency Scan</Option>\n              <Option value=\"container\">Container Scan</Option>\n              <Option value=\"infrastructure\">Infrastructure Scan</Option>\n              <Option value=\"code\">Code Scan</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Target\" required>\n            <Input placeholder=\"Enter target (URL, path, etc.)\" />\n          </Form.Item>\n          <Form.Item label=\"Options\">\n            <Input.TextArea placeholder=\"Additional scan options (JSON)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create Secret Modal */}\n      <Modal\n        title=\"Create Secret\"\n        open={isSecretModalOpen}\n        onCancel={() => setIsSecretModalOpen(false)}\n        onOk={() => setIsSecretModalOpen(false)}\n        width={600}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"Secret name\" />\n          </Form.Item>\n          <Form.Item label=\"Type\" required>\n            <Select placeholder=\"Select secret type\">\n              <Option value=\"api_key\">API Key</Option>\n              <Option value=\"password\">Password</Option>\n              <Option value=\"certificate\">Certificate</Option>\n              <Option value=\"token\">Token</Option>\n              <Option value=\"database_credential\">Database Credential</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Value\" required>\n            <Input.TextArea placeholder=\"Secret value\" rows={3} />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Secret description\" rows={2} />\n          </Form.Item>\n          <Form.Item label=\"Classification\">\n            <Select placeholder=\"Select data classification\">\n              <Option value=\"public\">Public</Option>\n              <Option value=\"internal\">Internal</Option>\n              <Option value=\"confidential\">Confidential</Option>\n              <Option value=\"restricted\">Restricted</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default SecurityDashboard;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx",
        "start": 1,
        "end": 908,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 908,
          "column": 2,
          "position": 7654
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx",
        "start": 4,
        "end": 911,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 911,
          "column": 2,
          "position": 7693
        }
      }
    },
    {
      "format": "javascript",
      "lines": 386,
      "fragment": "={role}\n          onChange={(newRole) => handleUpdateUserRole(record.userId, newRole)}\n          disabled={!canManageUsers() || record.role === 'owner'}\n          style={{ width: 120 }}\n        >\n          <Option value=\"owner\">Owner</Option>\n          <Option value=\"admin\">Admin</Option>\n          <Option value=\"member\">Member</Option>\n          <Option value=\"viewer\">Viewer</Option>\n        </Select>\n      ),\n    },\n    {\n      title: 'Joined',\n      dataIndex: 'joinedAt',\n      key: 'joinedAt',\n      render: (date: Date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_: unknown, record: OrganizationMember) => (\n        <Space>\n          {canManageUsers() && record.role !== 'owner' && (\n            <Button\n              type=\"link\"\n              danger\n              size=\"small\"\n              onClick={() => handleRemoveUser(record.userId, record.userId)}\n            >\n              Remove\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'general',\n      label: (\n        <span>\n          <SettingOutlined />\n          General\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Form.Item\n              name=\"name\"\n              label=\"Organization Name\"\n              rules={[{ required: true, message: 'Please enter organization name' }]}\n            >\n              <Input placeholder=\"Enter organization name\" />\n            </Form.Item>\n\n            <Form.Item name=\"description\" label=\"Description\">\n              <TextArea rows={3} placeholder=\"Enter organization description\" />\n            </Form.Item>\n\n            <Form.Item name=\"domain\" label=\"Domain\">\n              <Input placeholder=\"company.com\" addonBefore=\"@\" />\n            </Form.Item>\n\n            <Divider>Workflow Settings</Divider>\n\n            <Form.Item\n              name=\"allowPublicWorkflows\"\n              label=\"Allow Public Workflows\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"requireApprovalForExecution\"\n              label=\"Require Approval for Execution\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"maxWorkflowsPerUser\" label=\"Max Workflows per User\">\n              <InputNumber min={1} max={1000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"maxExecutionsPerMonth\" label=\"Max Executions per Month\">\n              <InputNumber min={100} max={1000000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Space>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  loading={loading || isLoading}\n                  disabled={!canManageOrganization()}\n                >\n                  Save Settings\n                </Button>\n                <Button type=\"link\" onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}>\n                  {showAdvancedSettings ? 'Hide' : 'Show'} Advanced Settings\n                </Button>\n              </Space>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Alert\n              message=\"Security Settings\"\n              description=\"Configure security policies and access controls for your organization.\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 24 }}\n            />\n\n            <Form.Item\n              name=\"enableAuditLogging\"\n              label=\"Enable Audit Logging\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"enableSSOIntegration\"\n              label=\"Enable SSO Integration\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"allowedDomains\" label=\"Allowed Domains\">\n              <Input\n                placeholder=\"domain1.com, domain2.com\"\n                addonAfter={\n                  <Tooltip title=\"Comma-separated list of allowed email domains\">\n                    <GlobalOutlined />\n                  </Tooltip>\n                }\n              />\n            </Form.Item>\n\n            <Form.Item name=\"sessionTimeout\" label=\"Session Timeout (minutes)\">\n              <InputNumber\n                min={5}\n                max={1440}\n                style={{ width: '100%' }}\n                addonAfter={<ClockCircleOutlined />}\n              />\n            </Form.Item>\n\n            <Divider>Password Policy</Divider>\n\n            <Form.Item name=\"passwordMinLength\" label=\"Minimum Length\">\n              <InputNumber min={6} max={32} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <Form.Item\n                name=\"passwordRequireUppercase\"\n                label=\"Require Uppercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireLowercase\"\n                label=\"Require Lowercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireNumbers\"\n                label=\"Require Numbers\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireSymbols\"\n                label=\"Require Symbols\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Space>\n\n            <Form.Item\n              name=\"passwordPreventReuse\"\n              label=\"Prevent Password Reuse (last N passwords)\"\n            >\n              <InputNumber min={0} max={10} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"passwordMaxAge\" label=\"Password Expiry (days)\">\n              <InputNumber min={30} max={365} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={loading || isLoading}\n                disabled={!canManageOrganization()}\n                icon={<CheckOutlined />}\n              >\n                Update Security Settings\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'members',\n      label: (\n        <span>\n          <TeamOutlined />\n          Members ({organization.members.length})\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={() => setInviteModalVisible(true)}\n                disabled={!canManageUsers()}\n                icon={<TeamOutlined />}\n              >\n                Invite User\n              </Button>\n              <Text type=\"secondary\">Manage organization members and their roles</Text>\n            </Space>\n          </div>\n\n          <Table\n            dataSource={organization.members}\n            columns={memberColumns}\n            rowKey=\"userId\"\n            pagination={{ pageSize: 10 }}\n            loading={isLoading}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'audit',\n      label: (\n        <span>\n          <AuditOutlined />\n          Audit & Compliance\n        </span>\n      ),\n      children: (\n        <Card>\n          <Alert\n            message=\"Audit & Compliance\"\n            description=\"Track all actions performed within your organization for security and compliance purposes.\"\n            type=\"info\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            <Card size=\"small\" title=\"Data Retention\">\n              <Paragraph>\n                Audit logs are retained for 90 days. Execution logs are retained for 30 days.\n                Contact support for longer retention periods.\n              </Paragraph>\n            </Card>\n\n            <Card size=\"small\" title=\"Compliance Standards\">\n              <Space wrap>\n                <Tag color=\"green\">SOC 2 Type II</Tag>\n                <Tag color=\"blue\">GDPR Compliant</Tag>\n                <Tag color=\"purple\">ISO 27001</Tag>\n                <Tag color=\"orange\">HIPAA Ready</Tag>\n              </Space>\n            </Card>\n\n            <Card size=\"small\" title=\"Data Export\">\n              <Space>\n                <Button>Export Audit Logs</Button>\n                <Button>Export User Data</Button>\n                <Button>Export Workflow Data</Button>\n              </Space>\n            </Card>\n          </Space>\n        </Card>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <SettingOutlined /> Organization Settings\n        </Title>\n        <Text type=\"secondary\">\n          Manage your organization's settings, security policies, and members\n        </Text>\n      </div>\n\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          closable\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Tabs items={tabs} />\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={inviteModalVisible}\n        onCancel={() => setInviteModalVisible(false)}\n        footer={null}\n        width={500}\n      >\n        <Form form={inviteForm} layout=\"vertical\" onFinish={handleInviteUser}>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              { required: true, message: 'Please enter email address' },\n              { type: 'email', message: 'Please enter a valid email address' },\n            ]}\n          >\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[{ required: true, message: 'Please select a role' }]}\n            initialValue=\"member\"\n          >\n            <Select>\n              <Option value=\"admin\">Admin</Option>\n              <Option value=\"member\">Member</Option>\n              <Option value=\"viewer\">Viewer</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                Send Invitation\n              </Button>\n              <Button onClick={() => setInviteModalVisible(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 172,
        "end": 557,
        "startLoc": {
          "line": 172,
          "column": 6,
          "position": 1336
        },
        "endLoc": {
          "line": 557,
          "column": 2,
          "position": 4040
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 176,
        "end": 561,
        "startLoc": {
          "line": 176,
          "column": 6,
          "position": 1388
        },
        "endLoc": {
          "line": 561,
          "column": 2,
          "position": 4092
        }
      }
    },
    {
      "format": "tsx",
      "lines": 38,
      "fragment": "import {\n  AuditOutlined,\n  CheckOutlined,\n  ClockCircleOutlined,\n  GlobalOutlined,\n  SecurityScanOutlined,\n  SettingOutlined,\n  TeamOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  message,\n  Select,\n  Space,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type {\n  Organization,\n  OrganizationMember,\n  OrganizationSettings,\n} from '@/core/services/rbacService';\nimport { useRBACStore } from '@/core/stores/rbacStore';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 1,
        "end": 38,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 38,
          "column": 6,
          "position": 184
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 1,
        "end": 37,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 37,
          "column": 7,
          "position": 183
        }
      }
    },
    {
      "format": "tsx",
      "lines": 529,
      "fragment": ";\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\ninterface OrganizationSettingsProps {\n  organization: Organization;\n}\n\nexport const OrganizationSettingsComponent: React.FC<OrganizationSettingsProps> = ({\n  organization,\n}) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\n  const [inviteModalVisible, setInviteModalVisible] = useState(false);\n  const [inviteForm] = Form.useForm();\n\n  const {\n    updateOrganization,\n    inviteUser,\n    removeUser,\n    updateUserRole,\n    canManageOrganization,\n    canManageUsers,\n    isLoading,\n    error,\n  } = useRBACStore();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: organization.name,\n      description: organization.description,\n      domain: organization.domain,\n      ...organization.settings,\n    });\n  }, [organization, form]);\n\n  const handleSaveSettings = async (values: any) => {\n    setLoading(true);\n    try {\n      const settings: OrganizationSettings = {\n        allowPublicWorkflows: values.allowPublicWorkflows,\n        requireApprovalForExecution: values.requireApprovalForExecution,\n        maxWorkflowsPerUser: values.maxWorkflowsPerUser,\n        maxExecutionsPerMonth: values.maxExecutionsPerMonth,\n        enableAuditLogging: values.enableAuditLogging,\n        enableSSOIntegration: values.enableSSOIntegration,\n        allowedDomains: values.allowedDomains\n          ?.split(',')\n          .map((d: string) => d.trim())\n          .filter(Boolean),\n        sessionTimeout: values.sessionTimeout,\n        passwordPolicy: {\n          minLength: values.passwordMinLength,\n          requireUppercase: values.passwordRequireUppercase,\n          requireLowercase: values.passwordRequireLowercase,\n          requireNumbers: values.passwordRequireNumbers,\n          requireSymbols: values.passwordRequireSymbols,\n          preventReuse: values.passwordPreventReuse,\n          maxAge: values.passwordMaxAge,\n        },\n      };\n\n      await updateOrganization(organization.id, {\n        name: values.name,\n        description: values.description,\n        domain: values.domain,\n        settings,\n      });\n\n      message.success('Organization settings updated successfully');\n    } catch (error: any) {\n      message.error(error.message || 'Failed to update organization settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInviteUser = async (values: any) => {\n    try {\n      await inviteUser(organization.id, values.email, values.role);\n      message.success(`Invitation sent to ${values.email}`);\n      setInviteModalVisible(false);\n      inviteForm.resetFields();\n    } catch (error: any) {\n      message.error(error.message || 'Failed to send invitation');\n    }\n  };\n\n  const handleRemoveUser = async (userId: string, userName: string) => {\n    Modal.confirm({\n      title: 'Remove User',\n      content: `Are you sure you want to remove ${userName} from this organization?`,\n      okText: 'Remove',\n      okType: 'danger',\n      onOk: async () => {\n        try {\n          await removeUser(organization.id, userId);\n          message.success('User removed successfully');\n        } catch (error: any) {\n          message.error(error.message || 'Failed to remove user');\n        }\n      },\n    });\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: OrganizationMember['role']) => {\n    try {\n      await updateUserRole(organization.id, userId, newRole);\n      message.success('User role updated successfully');\n    } catch (error: any) {\n      message.error(error.message || 'Failed to update user role');\n    }\n  };\n\n  const memberColumns = [\n    {\n      title: 'User',\n      dataIndex: 'userId',\n      key: 'userId',\n      render: (userId: string) => (\n        <div>\n          <Text strong>{userId}</Text>\n          <br />\n          <Text type=\"secondary\">user@example.com</Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      dataIndex: 'role',\n      key: 'role',\n      render: (role: OrganizationMember['role'], record: OrganizationMember) => (\n        <Select\n          value={role}\n          onChange={(newRole) => handleUpdateUserRole(record.userId, newRole)}\n          disabled={!canManageUsers() || record.role === 'owner'}\n          style={{ width: 120 }}\n        >\n          <Option value=\"owner\">Owner</Option>\n          <Option value=\"admin\">Admin</Option>\n          <Option value=\"member\">Member</Option>\n          <Option value=\"viewer\">Viewer</Option>\n        </Select>\n      ),\n    },\n    {\n      title: 'Joined',\n      dataIndex: 'joinedAt',\n      key: 'joinedAt',\n      render: (date: Date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_: unknown, record: OrganizationMember) => (\n        <Space>\n          {canManageUsers() && record.role !== 'owner' && (\n            <Button\n              type=\"link\"\n              danger\n              size=\"small\"\n              onClick={() => handleRemoveUser(record.userId, record.userId)}\n            >\n              Remove\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'general',\n      label: (\n        <span>\n          <SettingOutlined />\n          General\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Form.Item\n              name=\"name\"\n              label=\"Organization Name\"\n              rules={[{ required: true, message: 'Please enter organization name' }]}\n            >\n              <Input placeholder=\"Enter organization name\" />\n            </Form.Item>\n\n            <Form.Item name=\"description\" label=\"Description\">\n              <TextArea rows={3} placeholder=\"Enter organization description\" />\n            </Form.Item>\n\n            <Form.Item name=\"domain\" label=\"Domain\">\n              <Input placeholder=\"company.com\" addonBefore=\"@\" />\n            </Form.Item>\n\n            <Divider>Workflow Settings</Divider>\n\n            <Form.Item\n              name=\"allowPublicWorkflows\"\n              label=\"Allow Public Workflows\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"requireApprovalForExecution\"\n              label=\"Require Approval for Execution\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"maxWorkflowsPerUser\" label=\"Max Workflows per User\">\n              <InputNumber min={1} max={1000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"maxExecutionsPerMonth\" label=\"Max Executions per Month\">\n              <InputNumber min={100} max={1000000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Space>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  loading={loading || isLoading}\n                  disabled={!canManageOrganization()}\n                >\n                  Save Settings\n                </Button>\n                <Button type=\"link\" onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}>\n                  {showAdvancedSettings ? 'Hide' : 'Show'} Advanced Settings\n                </Button>\n              </Space>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Alert\n              message=\"Security Settings\"\n              description=\"Configure security policies and access controls for your organization.\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 24 }}\n            />\n\n            <Form.Item\n              name=\"enableAuditLogging\"\n              label=\"Enable Audit Logging\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"enableSSOIntegration\"\n              label=\"Enable SSO Integration\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"allowedDomains\" label=\"Allowed Domains\">\n              <Input\n                placeholder=\"domain1.com, domain2.com\"\n                addonAfter={\n                  <Tooltip title=\"Comma-separated list of allowed email domains\">\n                    <GlobalOutlined />\n                  </Tooltip>\n                }\n              />\n            </Form.Item>\n\n            <Form.Item name=\"sessionTimeout\" label=\"Session Timeout (minutes)\">\n              <InputNumber\n                min={5}\n                max={1440}\n                style={{ width: '100%' }}\n                addonAfter={<ClockCircleOutlined />}\n              />\n            </Form.Item>\n\n            <Divider>Password Policy</Divider>\n\n            <Form.Item name=\"passwordMinLength\" label=\"Minimum Length\">\n              <InputNumber min={6} max={32} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <Form.Item\n                name=\"passwordRequireUppercase\"\n                label=\"Require Uppercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireLowercase\"\n                label=\"Require Lowercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireNumbers\"\n                label=\"Require Numbers\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireSymbols\"\n                label=\"Require Symbols\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Space>\n\n            <Form.Item\n              name=\"passwordPreventReuse\"\n              label=\"Prevent Password Reuse (last N passwords)\"\n            >\n              <InputNumber min={0} max={10} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"passwordMaxAge\" label=\"Password Expiry (days)\">\n              <InputNumber min={30} max={365} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={loading || isLoading}\n                disabled={!canManageOrganization()}\n                icon={<CheckOutlined />}\n              >\n                Update Security Settings\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'members',\n      label: (\n        <span>\n          <TeamOutlined />\n          Members ({organization.members.length})\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={() => setInviteModalVisible(true)}\n                disabled={!canManageUsers()}\n                icon={<TeamOutlined />}\n              >\n                Invite User\n              </Button>\n              <Text type=\"secondary\">Manage organization members and their roles</Text>\n            </Space>\n          </div>\n\n          <Table\n            dataSource={organization.members}\n            columns={memberColumns}\n            rowKey=\"userId\"\n            pagination={{ pageSize: 10 }}\n            loading={isLoading}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'audit',\n      label: (\n        <span>\n          <AuditOutlined />\n          Audit & Compliance\n        </span>\n      ),\n      children: (\n        <Card>\n          <Alert\n            message=\"Audit & Compliance\"\n            description=\"Track all actions performed within your organization for security and compliance purposes.\"\n            type=\"info\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            <Card size=\"small\" title=\"Data Retention\">\n              <Paragraph>\n                Audit logs are retained for 90 days. Execution logs are retained for 30 days.\n                Contact support for longer retention periods.\n              </Paragraph>\n            </Card>\n\n            <Card size=\"small\" title=\"Compliance Standards\">\n              <Space wrap>\n                <Tag color=\"green\">SOC 2 Type II</Tag>\n                <Tag color=\"blue\">GDPR Compliant</Tag>\n                <Tag color=\"purple\">ISO 27001</Tag>\n                <Tag color=\"orange\">HIPAA Ready</Tag>\n              </Space>\n            </Card>\n\n            <Card size=\"small\" title=\"Data Export\">\n              <Space>\n                <Button>Export Audit Logs</Button>\n                <Button>Export User Data</Button>\n                <Button>Export Workflow Data</Button>\n              </Space>\n            </Card>\n          </Space>\n        </Card>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <SettingOutlined /> Organization Settings\n        </Title>\n        <Text type=\"secondary\">\n          Manage your organization's settings, security policies, and members\n        </Text>\n      </div>\n\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          closable\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Tabs items={tabs} />\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={inviteModalVisible}\n        onCancel={() => setInviteModalVisible(false)}\n        footer={null}\n        width={500}\n      >\n        <Form form={inviteForm} layout=\"vertical\" onFinish={handleInviteUser}>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              { required: true, message: 'Please enter email address' },\n              { type: 'email', message: 'Please enter a valid email address' },\n            ]}\n          >\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[{ required: true, message: 'Please select a role' }]}\n            initialValue=\"member\"\n          >\n            <Select>\n              <Option value=\"admin\">Admin</Option>\n              <Option value=\"member\">Member</Option>\n              <Option value=\"viewer\">Viewer</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                Send Invitation\n              </Button>\n              <Button onClick={() => setInviteModalVisible(false)}>Cancel</Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 36,
        "end": 564,
        "startLoc": {
          "line": 36,
          "column": 26,
          "position": 181
        },
        "endLoc": {
          "line": 564,
          "column": 2,
          "position": 4077
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 40,
        "end": 568,
        "startLoc": {
          "line": 40,
          "column": 19,
          "position": 233
        },
        "endLoc": {
          "line": 568,
          "column": 2,
          "position": 4129
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ";\n\n  const handleCreateWorkflow = async () => {\n    const name = prompt('Enter workflow name:');\n    if (name) {\n      if (name.trim().length === 0) {\n        toast.error('Please enter a valid workflow name.');\n        return;\n      }\n\n      try {\n        await createNewWorkflow(name.trim(), navigate);\n        toast",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx",
        "start": 23,
        "end": 35,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 286
        },
        "endLoc": {
          "line": 35,
          "column": 6,
          "position": 385
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 111,
        "end": 123,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 1055
        },
        "endLoc": {
          "line": 123,
          "column": 40,
          "position": 1154
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": ");\n\n  const handleCreateWorkflow = async () => {\n    const name = prompt('Enter workflow name:');\n    if (name) {\n      if (name.trim().length === 0) {\n        toast.error('Please enter a valid workflow name.');\n        return;\n      }\n\n      try {\n        await createNewWorkflow(name.trim(), navigate);\n        toast.success('Workflow created successfully!');\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create workflow';\n        toast.error(errorMessage);\n      }\n    }\n  };\n\n  const handleLogout = async () => {\n    await",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx",
        "start": 12,
        "end": 33,
        "startLoc": {
          "line": 12,
          "column": 6,
          "position": 156
        },
        "endLoc": {
          "line": 33,
          "column": 6,
          "position": 336
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 111,
        "end": 44,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 1054
        },
        "endLoc": {
          "line": 44,
          "column": 4,
          "position": 465
        }
      }
    },
    {
      "format": "tsx",
      "lines": 239,
      "fragment": "/**\n * Social Proof Section\n *\n * Customer testimonials, logos, and trust signals\n * to build credibility and demonstrate enterprise adoption\n */\n\nimport { ArrowRight, Quote, Shield, Star, TrendingUp, Users } from 'lucide-react';\nimport type React from 'react';\n\nexport const SocialProof: React.FC = () => {\n  const testimonials = [\n    {\n      quote:\n        \"Reporunner's hybrid database architecture and enterprise security features made it the perfect choice for our financial services workflows. The self-hosted deployment gives us complete control over our sensitive data.\",\n      author: 'Sarah Chen',\n      title: 'Head of Digital Operations',\n      company: 'FinTech Solutions',\n      avatar: '/api/placeholder/60/60',\n      rating: 5,\n      highlight: 'Enterprise Security',\n    },\n    {\n      quote:\n        'The AI-powered automation capabilities have transformed how we handle customer onboarding. What used to take hours now happens in minutes, with intelligent error handling that we never had before.',\n      author: 'Michael Rodriguez',\n      title: 'VP of Technology',\n      company: 'Customer Success Corp',\n      avatar: '/api/placeholder/60/60',\n      rating: 5,\n      highlight: 'AI Automation',\n    },\n    {\n      quote:\n        'Moving from n8n to Reporunner was seamless, and the advanced collaboration features have revolutionized how our distributed team builds workflows. The real-time editing is game-changing.',\n      author: 'Emma Thompson',\n      title: 'DevOps Lead',\n      company: 'Global Tech Inc',\n      avatar: '/api/placeholder/60/60',\n      rating: 5,\n      highlight: 'Team Collaboration',\n    },\n  ];\n\n  const companyLogos = [\n    { name: 'TechCorp', logo: '/api/placeholder/120/40' },\n    { name: 'DataFlow', logo: '/api/placeholder/120/40' },\n    { name: 'CloudSys', logo: '/api/placeholder/120/40' },\n    { name: 'AutoTech', logo: '/api/placeholder/120/40' },\n    { name: 'DevOps Pro', logo: '/api/placeholder/120/40' },\n    { name: 'AI Solutions', logo: '/api/placeholder/120/40' },\n  ];\n\n  const stats = [\n    {\n      icon: Users,\n      value: '10,000+',\n      label: 'Active Users',\n      description: 'Developers and teams worldwide',\n    },\n    {\n      icon: TrendingUp,\n      value: '99.9%',\n      label: 'Uptime',\n      description: 'Enterprise-grade reliability',\n    },\n    {\n      icon: Shield,\n      value: 'SOC2',\n      label: 'Compliant',\n      description: 'Enterprise security certified',\n    },\n  ];\n\n  const certifications = [\n    { name: 'SOC2 Type II', badge: '/api/placeholder/80/80' },\n    { name: 'ISO 27001', badge: '/api/placeholder/80/80' },\n    { name: 'GDPR Ready', badge: '/api/placeholder/80/80' },\n    { name: 'HIPAA Compliant', badge: '/api/placeholder/80/80' },\n  ];\n\n  return (\n    <section className=\"py-20 bg-gray-50\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Trusted by{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Enterprises\n            </span>{' '}\n            Worldwide\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Join thousands of companies who trust Reporunner for their mission-critical workflow\n            automation needs.\n          </p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {stats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <div key={index} className=\"text-center\">\n                <div className=\"bg-white rounded-xl p-6 shadow-lg border border-gray-200 transition-all hover:shadow-xl hover:-translate-y-1\">\n                  <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-16 h-16 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">{stat.value}</div>\n                  <div className=\"text-lg font-semibold text-gray-800 mb-1\">{stat.label}</div>\n                  <div className=\"text-gray-600\">{stat.description}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Company Logos */}\n        <div className=\"mb-16\">\n          <p className=\"text-center text-gray-500 mb-8 font-medium\">\n            Trusted by leading companies worldwide\n          </p>\n          <div className=\"flex flex-wrap justify-center items-center gap-12 opacity-60\">\n            {companyLogos.map((company, index) => (\n              <div\n                key={index}\n                className=\"h-12 bg-gray-200 rounded-lg px-6 flex items-center justify-center transition-opacity hover:opacity-100\"\n              >\n                <span className=\"font-semibold text-gray-600\">{company.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Testimonials */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16\">\n          {testimonials.map((testimonial, index) => (\n            <div\n              key={index}\n              className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200 relative transition-all hover:shadow-xl hover:-translate-y-1\"\n            >\n              {/* Quote Icon */}\n              <div className=\"absolute -top-4 left-8\">\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-8 h-8 rounded-full flex items-center justify-center\">\n                  <Quote className=\"w-4 h-4 text-white\" />\n                </div>\n              </div>\n\n              {/* Rating */}\n              <div className=\"flex gap-1 mb-4 mt-2\">\n                {[...Array(testimonial.rating)].map((_, i) => (\n                  <Star key={i} className=\"w-5 h-5 fill-yellow-400 text-yellow-400\" />\n                ))}\n              </div>\n\n              {/* Highlight Badge */}\n              <div className=\"inline-flex items-center bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm font-medium mb-4\">\n                {testimonial.highlight}\n              </div>\n\n              {/* Quote */}\n              <blockquote className=\"text-gray-700 mb-6 leading-relaxed\">\n                \"{testimonial.quote}\"\n              </blockquote>\n\n              {/* Author */}\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white font-bold\">\n                  {testimonial.author\n                    .split(' ')\n                    .map((n) => n[0])\n                    .join('')}\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-900\">{testimonial.author}</div>\n                  <div className=\"text-sm text-gray-600\">{testimonial.title}</div>\n                  <div className=\"text-sm text-gray-500\">{testimonial.company}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Security & Compliance */}\n        <div className=\"bg-white rounded-2xl p-8 border border-gray-200 shadow-lg\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Enterprise Security & Compliance\n            </h3>\n            <p className=\"text-gray-600 max-w-2xl mx-auto\">\n              Reporunner meets the highest standards for enterprise security and compliance,\n              ensuring your data and workflows are always protected.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {certifications.map((cert, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-20 h-20 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                  <Shield className=\"w-10 h-10 text-gray-600\" />\n                </div>\n                <div className=\"font-semibold text-gray-800\">{cert.name}</div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-8 pt-8 border-t border-gray-100 text-center\">\n            <button className=\"group inline-flex items-center gap-2 text-blue-600 font-medium hover:text-blue-700 transition-colors\">\n              View Security Documentation\n              <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Customer Success CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">\n              Join the Growing Community of Successful Teams\n            </h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              See how Reporunner can transform your workflow automation and drive enterprise success\n              for your organization.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <button className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n                Read Customer Stories\n              </button>\n              <button className=\"border-2 border-white text-white px-6 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors\">\n                Schedule a Demo\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/SocialProof.tsx",
        "start": 1,
        "end": 239,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 239,
          "column": 2,
          "position": 1882
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/socialproof/SocialProof.tsx",
        "start": 1,
        "end": 239,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 239,
          "column": 2,
          "position": 1882
        }
      }
    },
    {
      "format": "javascript",
      "lines": 291,
      "fragment": "={() => setBillingPeriod('monthly')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Monthly\n            </button>\n            <button\n              onClick={() => setBillingPeriod('annually')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'annually'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Annually\n              <span className=\"ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                Save 20%\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-20\">\n          {plans.map((plan, index) => {\n            const Icon = plan.icon;\n            const price = plan.price[billingPeriod];\n\n            return (\n              <div\n                key={index}\n                className={`relative rounded-2xl border-2 p-8 transition-all duration-300 ${\n                  plan.popular\n                    ? 'border-blue-500 shadow-xl shadow-blue-500/10 scale-105'\n                    : 'border-gray-200 hover:border-gray-300 hover:shadow-lg'\n                }`}\n              >\n                {/* Popular Badge */}\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                {/* Plan Header */}\n                <div className=\"text-center mb-8\">\n                  <div\n                    className={`w-16 h-16 rounded-xl bg-gradient-to-r ${plan.gradient} flex items-center justify-center mx-auto mb-4`}\n                  >\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  {/* Price */}\n                  <div className=\"mb-6\">\n                    {typeof price === 'number' ? (\n                      <>\n                        <div className=\"text-4xl font-bold text-gray-900\">\n                          ${price}\n                          {price > 0 && <span className=\"text-lg text-gray-600\">/user/month</span>}\n                        </div>\n                        {billingPeriod === 'annually' && price > 0 && (\n                          <div className=\"text-sm text-gray-500\">\n                            Billed annually (${price * 12}/user/year)\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900\">{price}</div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Features */}\n                <div className=\"mb-8\">\n                  <ul className=\"space-y-3\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Limitations */}\n                  {plan.limitations.length > 0 && (\n                    <div className=\"mt-6 pt-6 border-t border-gray-100\">\n                      <p className=\"text-sm text-gray-500 mb-2\">Limitations:</p>\n                      <ul className=\"space-y-2\">\n                        {plan.limitations.map((limitation, limitIndex) => (\n                          <li\n                            key={limitIndex}\n                            className=\"text-sm text-gray-500 flex items-start gap-2\"\n                          >\n                            <div className=\"w-1 h-1 rounded-full bg-gray-400 mt-2 flex-shrink-0\" />\n                            {limitation}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => handlePlanClick(plan.name)}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${\n                    plan.popular\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:scale-105 hover:shadow-lg'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {plan.cta}\n                  <ArrowRight className=\"w-5 h-5\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Feature Comparison Table */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">Feature Comparison</h3>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-4 pr-6 font-semibold text-gray-900\">Features</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Community</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">\n                    Professional\n                  </th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Enterprise</th>\n                </tr>\n              </thead>\n              <tbody>\n                {comparisonFeatures.map((category, categoryIndex) => (\n                  <React.Fragment key={categoryIndex}>\n                    <tr>\n                      <td\n                        colSpan={4}\n                        className=\"py-4 pr-6 font-semibold text-gray-800 bg-gray-100/50\"\n                      >\n                        {category.category}\n                      </td>\n                    </tr>\n                    {category.features.map((feature, featureIndex) => (\n                      <tr key={featureIndex} className=\"border-b border-gray-100\">\n                        <td className=\"py-3 pr-6 text-gray-700\">{feature.name}</td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.community === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.community === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.community}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.pro === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.pro === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.pro}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.enterprise === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.enterprise === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.enterprise}</span>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Competitive Pricing Comparison */}\n        <div className=\"mt-16 bg-white rounded-2xl border border-gray-200 p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n            How We Compare on{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            {/* Reporunner */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 border-2 border-blue-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Reporunner</h4>\n                <div className=\"text-2xl font-bold text-blue-600 mb-2\">$49/user</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Self-hosted + Pro features</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Unlimited executions</div>\n                  <div>✅ All enterprise features</div>\n                  <div>✅ No hidden costs</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Zapier */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Zapier</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$19.99+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud only</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited tasks/month</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Expensive at scale</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Make.com */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Make.com</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$9+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, operations-based</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited operations</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Costs add up quickly</div>\n                </div>\n              </div>\n            </div>\n\n            {/* n8n */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">n8n</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$20+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Self-hosting option</div>\n                  <div>❌ Limited AI features</div>\n                  <div>❌ Basic collaboration</div>\n                </div>\n              </div>\n            </div>\n\n            {/* SIM */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">SIM</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">Custom</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Enterprise pricing</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ AI features</div>\n                  <div>❌ Limited self-hosting</div>\n                  <div>❌ Higher enterprise cost</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              💡 <strong>Reporunner advantage:</strong> Enterprise features at mid-market pricing\n              with complete self-hosting control\n            </p>\n          </div>\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">Need a custom solution for your enterprise?</h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              We offer custom deployment options, dedicated support, and tailored features for large\n              organizations with specific requirements.\n            </p>\n            <button\n              onClick={() => navigate('/contact')}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx",
        "start": 210,
        "end": 500,
        "startLoc": {
          "line": 210,
          "column": 8,
          "position": 1316
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3879
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx",
        "start": 212,
        "end": 502,
        "startLoc": {
          "line": 212,
          "column": 8,
          "position": 1342
        },
        "endLoc": {
          "line": 502,
          "column": 2,
          "position": 3905
        }
      }
    },
    {
      "format": "tsx",
      "lines": 510,
      "fragment": "/**\n * Pricing Section Component\n *\n * Enterprise-focused pricing tiers with clear value proposition\n * and competitive positioning\n */\n\nimport { ArrowRight, Check, Crown, Star, Zap } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport const PricingSection: React.FC = () => {\n  const navigate = useNavigate();\n  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'annually'>('monthly');\n\n  const handlePlanClick = (planName: string) => {\n    if (planName === 'Community') {\n      navigate('/register');\n    } else if (planName === 'Professional') {\n      navigate('/register');\n    } else if (planName === 'Enterprise') {\n      navigate('/contact');\n    }\n  };\n\n  const plans = [\n    {\n      name: 'Community',\n      description: 'Perfect for getting started',\n      price: { monthly: 0, annually: 0 },\n      icon: Star,\n      gradient: 'from-gray-500 to-gray-600',\n      bgGradient: 'from-gray-50 to-gray-100',\n      features: [\n        'Self-hosted deployment',\n        'Core workflow features',\n        'Basic integrations (50+)',\n        'Community support',\n        'Up to 5 users',\n        'Basic analytics',\n        'Open source license',\n      ],\n      limitations: [\n        'Limited to 1,000 executions/month',\n        'Community support only',\n        'Basic security features',\n      ],\n      cta: 'Get Started Free',\n      popular: false,\n    },\n    {\n      name: 'Professional',\n      description: 'For growing teams and businesses',\n      price: { monthly: 49, annually: 39 },\n      icon: Zap,\n      gradient: 'from-blue-500 to-blue-600',\n      bgGradient: 'from-blue-50 to-blue-100',\n      features: [\n        'Everything in Community',\n        'Advanced integrations (500+)',\n        'AI-powered features',\n        'Real-time collaboration',\n        'Version control',\n        'Premium support',\n        'Up to 50 users',\n        'Advanced analytics',\n        'Custom node development',\n        'API access',\n      ],\n      limitations: ['Up to 10,000 executions/month', 'Standard support hours'],\n      cta: 'Start Free Trial',\n      popular: true,\n    },\n    {\n      name: 'Enterprise',\n      description: 'For large organizations',\n      price: { monthly: 'Custom', annually: 'Custom' },\n      icon: Crown,\n      gradient: 'from-purple-500 to-purple-600',\n      bgGradient: 'from-purple-50 to-purple-100',\n      features: [\n        'Everything in Professional',\n        'SSO/SAML integration',\n        'Advanced security & compliance',\n        'Custom deployment options',\n        'Unlimited users',\n        'Unlimited executions',\n        'Dedicated success manager',\n        '24/7 priority support',\n        'Custom integrations',\n        'On-premise deployment',\n        'SLA guarantees',\n        'Training & onboarding',\n      ],\n      limitations: [],\n      cta: 'Contact Sales',\n      popular: false,\n    },\n  ];\n\n  const comparisonFeatures = [\n    {\n      category: 'Core Features',\n      features: [\n        {\n          name: 'Visual workflow builder',\n          community: true,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Pre-built integrations',\n          community: '50+',\n          pro: '500+',\n          enterprise: 'Unlimited',\n        },\n        {\n          name: 'Real-time collaboration',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Version control',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'AI & Analytics',\n      features: [\n        {\n          name: 'AI-powered automation',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Advanced analytics',\n          community: 'Basic',\n          pro: 'Advanced',\n          enterprise: 'Enterprise',\n        },\n        {\n          name: 'Semantic search',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Intelligent optimization',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'Security & Compliance',\n      features: [\n        {\n          name: 'SSO/SAML integration',\n          community: false,\n          pro: false,\n          enterprise: true,\n        },\n        {\n          name: 'RBAC permissions',\n          community: 'Basic',\n          pro: 'Advanced',\n          enterprise: 'Enterprise',\n        },\n        {\n          name: 'Audit logging',\n          community: false,\n          pro: 'Basic',\n          enterprise: 'Advanced',\n        },\n        {\n          name: 'Compliance certifications',\n          community: false,\n          pro: false,\n          enterprise: true,\n        },\n      ],\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Simple, Transparent{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            Start free, scale as you grow. No hidden fees, no vendor lock-in. Enterprise-grade\n            features at every level.\n          </p>\n\n          {/* Billing Toggle */}\n          <div className=\"inline-flex items-center bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setBillingPeriod('monthly')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Monthly\n            </button>\n            <button\n              onClick={() => setBillingPeriod('annually')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'annually'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Annually\n              <span className=\"ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                Save 20%\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-20\">\n          {plans.map((plan, index) => {\n            const Icon = plan.icon;\n            const price = plan.price[billingPeriod];\n\n            return (\n              <div\n                key={index}\n                className={`relative rounded-2xl border-2 p-8 transition-all duration-300 ${\n                  plan.popular\n                    ? 'border-blue-500 shadow-xl shadow-blue-500/10 scale-105'\n                    : 'border-gray-200 hover:border-gray-300 hover:shadow-lg'\n                }`}\n              >\n                {/* Popular Badge */}\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                {/* Plan Header */}\n                <div className=\"text-center mb-8\">\n                  <div\n                    className={`w-16 h-16 rounded-xl bg-gradient-to-r ${plan.gradient} flex items-center justify-center mx-auto mb-4`}\n                  >\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  {/* Price */}\n                  <div className=\"mb-6\">\n                    {typeof price === 'number' ? (\n                      <>\n                        <div className=\"text-4xl font-bold text-gray-900\">\n                          ${price}\n                          {price > 0 && <span className=\"text-lg text-gray-600\">/user/month</span>}\n                        </div>\n                        {billingPeriod === 'annually' && price > 0 && (\n                          <div className=\"text-sm text-gray-500\">\n                            Billed annually (${price * 12}/user/year)\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900\">{price}</div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Features */}\n                <div className=\"mb-8\">\n                  <ul className=\"space-y-3\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Limitations */}\n                  {plan.limitations.length > 0 && (\n                    <div className=\"mt-6 pt-6 border-t border-gray-100\">\n                      <p className=\"text-sm text-gray-500 mb-2\">Limitations:</p>\n                      <ul className=\"space-y-2\">\n                        {plan.limitations.map((limitation, limitIndex) => (\n                          <li\n                            key={limitIndex}\n                            className=\"text-sm text-gray-500 flex items-start gap-2\"\n                          >\n                            <div className=\"w-1 h-1 rounded-full bg-gray-400 mt-2 flex-shrink-0\" />\n                            {limitation}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => handlePlanClick(plan.name)}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${\n                    plan.popular\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:scale-105 hover:shadow-lg'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {plan.cta}\n                  <ArrowRight className=\"w-5 h-5\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Feature Comparison Table */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">Feature Comparison</h3>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-4 pr-6 font-semibold text-gray-900\">Features</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Community</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">\n                    Professional\n                  </th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Enterprise</th>\n                </tr>\n              </thead>\n              <tbody>\n                {comparisonFeatures.map((category, categoryIndex) => (\n                  <React.Fragment key={categoryIndex}>\n                    <tr>\n                      <td\n                        colSpan={4}\n                        className=\"py-4 pr-6 font-semibold text-gray-800 bg-gray-100/50\"\n                      >\n                        {category.category}\n                      </td>\n                    </tr>\n                    {category.features.map((feature, featureIndex) => (\n                      <tr key={featureIndex} className=\"border-b border-gray-100\">\n                        <td className=\"py-3 pr-6 text-gray-700\">{feature.name}</td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.community === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.community === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.community}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.pro === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.pro === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.pro}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.enterprise === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.enterprise === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.enterprise}</span>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Competitive Pricing Comparison */}\n        <div className=\"mt-16 bg-white rounded-2xl border border-gray-200 p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n            How We Compare on{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            {/* Reporunner */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 border-2 border-blue-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Reporunner</h4>\n                <div className=\"text-2xl font-bold text-blue-600 mb-2\">$49/user</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Self-hosted + Pro features</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Unlimited executions</div>\n                  <div>✅ All enterprise features</div>\n                  <div>✅ No hidden costs</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Zapier */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Zapier</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$19.99+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud only</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited tasks/month</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Expensive at scale</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Make.com */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Make.com</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$9+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, operations-based</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited operations</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Costs add up quickly</div>\n                </div>\n              </div>\n            </div>\n\n            {/* n8n */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">n8n</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$20+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Self-hosting option</div>\n                  <div>❌ Limited AI features</div>\n                  <div>❌ Basic collaboration</div>\n                </div>\n              </div>\n            </div>\n\n            {/* SIM */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">SIM</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">Custom</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Enterprise pricing</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ AI features</div>\n                  <div>❌ Limited self-hosting</div>\n                  <div>❌ Higher enterprise cost</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              💡 <strong>Reporunner advantage:</strong> Enterprise features at mid-market pricing\n              with complete self-hosting control\n            </p>\n          </div>\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">Need a custom solution for your enterprise?</h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              We offer custom deployment options, dedicated support, and tailored features for large\n              organizations with specific requirements.\n            </p>\n            <button\n              onClick={() => navigate('/contact')}\n              className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n            >\n              Contact Enterprise Sales\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx",
        "start": 1,
        "end": 510,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 510,
          "column": 2,
          "position": 3926
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx",
        "start": 3,
        "end": 512,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 512,
          "column": 2,
          "position": 3952
        }
      }
    },
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "={index}\n                className=\"bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-lg transition-all hover:-translate-y-1\"\n              >\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Integration Browser */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 shadow-lg overflow-hidden\">\n          {/* Browser Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <h3 className=\"text-2xl font-bold text-gray-900\">Integration Library</h3>\n\n              {/* Search Bar */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search integrations...\"\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-2 mt-6\">\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`px-4 py-2 rounded-lg font-medium transition-all ${\n                    activeCategory === category.id\n                      ? 'bg-blue-600 text-white shadow-lg'\n                      : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  {category.name}\n                  <span className=\"ml-2 text-sm opacity-75\">({category.count})</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Integration Grid */}\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {filteredIntegrations.map((integration, index) => {\n                const Icon = integration.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group relative bg-white border border-gray-200 rounded-xl p-4 hover:shadow-lg hover:border-gray-300 transition-all cursor-pointer\"\n                  >\n                    {/* Popular Badge */}\n                    {integration.popular && (\n                      <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs px-2 py-1 rounded-full font-medium\">\n                        Popular\n                      </div>\n                    )}\n\n                    {/* Icon */}\n                    <div\n                      className={`w-12 h-12 rounded-lg bg-gradient-to-r ${integration.gradient} flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx",
        "start": 156,
        "end": 225,
        "startLoc": {
          "line": 156,
          "column": 4,
          "position": 1074
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1565
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx",
        "start": 157,
        "end": 226,
        "startLoc": {
          "line": 157,
          "column": 4,
          "position": 1087
        },
        "endLoc": {
          "line": 226,
          "column": 2,
          "position": 1578
        }
      }
    },
    {
      "format": "tsx",
      "lines": 284,
      "fragment": "/**\n * Integration Ecosystem Section\n *\n * Showcases the extensive integration library and\n * custom development capabilities\n */\n\nimport {\n  ArrowRight,\n  Calendar,\n  Cloud,\n  Code,\n  Database,\n  FileText,\n  Grid3X3,\n  Mail,\n  Plus,\n  Search,\n  Slack,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\nexport const IntegrationEcosystem: React.FC = () => {\n  const [activeCategory, setActiveCategory] = useState('all');\n\n  const categories = [\n    { id: 'all', name: 'All Integrations', count: 500 },\n    { id: 'communication', name: 'Communication', count: 85 },\n    { id: 'productivity', name: 'Productivity', count: 120 },\n    { id: 'database', name: 'Database', count: 45 },\n    { id: 'ai', name: 'AI & ML', count: 75 },\n    { id: 'commerce', name: 'E-commerce', count: 60 },\n    { id: 'custom', name: 'Custom', count: 'Unlimited' },\n  ];\n\n  const integrations = [\n    {\n      name: 'Gmail',\n      category: 'communication',\n      icon: Mail,\n      description: 'Send, receive, and manage emails',\n      gradient: 'from-red-500 to-red-600',\n      popular: true,\n    },\n    {\n      name: 'Slack',\n      category: 'communication',\n      icon: Slack,\n      description: 'Team messaging and notifications',\n      gradient: 'from-purple-500 to-purple-600',\n      popular: true,\n    },\n    {\n      name: 'PostgreSQL',\n      category: 'database',\n      icon: Database,\n      description: 'Relational database operations',\n      gradient: 'from-blue-500 to-blue-600',\n      popular: false,\n    },\n    {\n      name: 'Google Sheets',\n      category: 'productivity',\n      icon: FileText,\n      description: 'Spreadsheet automation',\n      gradient: 'from-green-500 to-green-600',\n      popular: true,\n    },\n    {\n      name: 'Calendar',\n      category: 'productivity',\n      icon: Calendar,\n      description: 'Schedule and event management',\n      gradient: 'from-indigo-500 to-indigo-600',\n      popular: false,\n    },\n    {\n      name: 'AWS',\n      category: 'cloud',\n      icon: Cloud,\n      description: 'Cloud services integration',\n      gradient: 'from-orange-500 to-orange-600',\n      popular: true,\n    },\n    {\n      name: 'OpenAI',\n      category: 'ai',\n      icon: Zap,\n      description: 'AI and language models',\n      gradient: 'from-purple-500 to-pink-500',\n      popular: true,\n    },\n    {\n      name: 'Custom API',\n      category: 'custom',\n      icon: Code,\n      description: 'Build your own integrations',\n      gradient: 'from-gray-500 to-gray-600',\n      popular: false,\n    },\n  ];\n\n  const filteredIntegrations =\n    activeCategory === 'all'\n      ? integrations\n      : integrations.filter((integration) => integration.category === activeCategory);\n\n  const features = [\n    {\n      icon: Grid3X3,\n      title: '500+ Pre-built Integrations',\n      description: 'Connect to popular services out of the box with minimal configuration.',\n    },\n    {\n      icon: Code,\n      title: 'Custom Node SDK',\n      description: 'Build your own integrations with our comprehensive development kit.',\n    },\n    {\n      icon: Zap,\n      title: 'API-First Architecture',\n      description: 'Every integration is built on our robust API foundation.',\n    },\n    {\n      icon: Plus,\n      title: 'Community Marketplace',\n      description: 'Share and discover integrations built by the community.',\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Connect{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Everything\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Integrate with 500+ services or build your own custom connections. Our ecosystem grows\n            with your needs.\n          </p>\n        </div>\n\n        {/* Feature Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <div\n                key={index}\n                className=\"bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-lg transition-all hover:-translate-y-1\"\n              >\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Integration Browser */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 shadow-lg overflow-hidden\">\n          {/* Browser Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <h3 className=\"text-2xl font-bold text-gray-900\">Integration Library</h3>\n\n              {/* Search Bar */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search integrations...\"\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-2 mt-6\">\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`px-4 py-2 rounded-lg font-medium transition-all ${\n                    activeCategory === category.id\n                      ? 'bg-blue-600 text-white shadow-lg'\n                      : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  {category.name}\n                  <span className=\"ml-2 text-sm opacity-75\">({category.count})</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Integration Grid */}\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {filteredIntegrations.map((integration, index) => {\n                const Icon = integration.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group relative bg-white border border-gray-200 rounded-xl p-4 hover:shadow-lg hover:border-gray-300 transition-all cursor-pointer\"\n                  >\n                    {/* Popular Badge */}\n                    {integration.popular && (\n                      <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs px-2 py-1 rounded-full font-medium\">\n                        Popular\n                      </div>\n                    )}\n\n                    {/* Icon */}\n                    <div\n                      className={`w-12 h-12 rounded-lg bg-gradient-to-r ${integration.gradient} flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}\n                    >\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n\n                    {/* Content */}\n                    <h4 className=\"font-semibold text-gray-900 mb-1\">{integration.name}</h4>\n                    <p className=\"text-sm text-gray-600 mb-3\">{integration.description}</p>\n\n                    {/* Install Button */}\n                    <button className=\"w-full bg-gray-50 hover:bg-blue-50 text-gray-700 hover:text-blue-600 py-2 px-3 rounded-lg text-sm font-medium transition-colors group-hover:bg-blue-50 group-hover:text-blue-600\">\n                      Install Integration\n                    </button>\n                  </div>\n                );\n              })}\n\n              {/* Add More Card */}\n              <div className=\"border-2 border-dashed border-gray-300 rounded-xl p-4 flex flex-col items-center justify-center text-center hover:border-blue-400 hover:bg-blue-50 transition-all cursor-pointer\">\n                <div className=\"w-12 h-12 rounded-lg bg-gray-100 flex items-center justify-center mb-3\">\n                  <Plus className=\"w-6 h-6 text-gray-600\" />\n                </div>\n                <h4 className=\"font-semibold text-gray-700 mb-1\">Need Something Else?</h4>\n                <p className=\"text-sm text-gray-500 mb-3\">Build a custom integration</p>\n                <button className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\">\n                  View SDK\n                </button>\n              </div>\n            </div>\n\n            {/* Load More */}\n            <div className=\"text-center mt-8\">\n              <button className=\"inline-flex items-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors\">\n                View All Integrations\n                <ArrowRight className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Custom Integration CTA */}\n        <div className=\"mt-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Don't See What You Need?</h3>\n          <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n            Build custom integrations with our comprehensive SDK, or let our team create one for\n            you. We support any API or service.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n              Explore SDK\n            </button>\n            <button className=\"border-2 border-white text-white px-6 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors\">\n              Request Integration\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx",
        "start": 1,
        "end": 284,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 284,
          "column": 2,
          "position": 2037
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx",
        "start": 2,
        "end": 285,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 285,
          "column": 2,
          "position": 2050
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n      <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n      {/* Animated Background Orbs */}\n      <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse delay-1000\" />\n\n      <div className=\"container mx-auto px-6 relative z-10",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 26,
          "position": 312
        },
        "endLoc": {
          "line": 49,
          "column": 37,
          "position": 380
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx",
        "start": 15,
        "end": 23,
        "startLoc": {
          "line": 15,
          "column": 56,
          "position": 130
        },
        "endLoc": {
          "line": 23,
          "column": 33,
          "position": 198
        }
      }
    },
    {
      "format": "javascript",
      "lines": 173,
      "fragment": "={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200/50'\n          : 'bg-white/80 backdrop-blur-sm'\n      }`}\n    >\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link to=\"/\" className=\"flex items-center gap-3 group\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Reporunner\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {menuItems.map((menu, index) => (\n              <div\n                key={index}\n                className=\"relative group\"\n                onMouseEnter={() => setActiveDropdown(menu.label)}\n                onMouseLeave={() => setActiveDropdown(null)}\n              >\n                <button className=\"flex items-center gap-1 text-gray-700 hover:text-blue-600 font-medium transition-colors py-2\">\n                  {menu.label}\n                  <ChevronDown className=\"w-4 h-4\" />\n                </button>\n\n                {/* Dropdown */}\n                {activeDropdown === menu.label && (\n                  <div className=\"absolute top-full left-0 mt-2 w-80 bg-white rounded-xl shadow-xl border border-gray-200 py-4 z-50\">\n                    <div className=\"px-4 pb-2 mb-2 border-b border-gray-100\">\n                      <h3 className=\"font-semibold text-gray-900\">{menu.label}</h3>\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className=\"flex items-start gap-3 px-4 py-3 hover:bg-gray-50 transition-colors group\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 group-hover:text-blue-600\">\n                              {item.name}\n                            </span>\n                            {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                          </div>\n                          <p className=\"text-sm text-gray-500 mt-1\">{item.description}</p>\n                        </div>\n                        <ArrowRight className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity mt-1\" />\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden lg:flex items-center gap-3\">\n            {isAuthenticated ? (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => navigate('/app/dashboard')}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <User className=\"w-4 h-4\" />\n                  Dashboard\n                </button>\n                <button\n                  onClick={() => navigate('/app/settings')}\n                  className=\"p-2 text-gray-500 hover:text-gray-700 transition-colors\"\n                  title=\"Settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            ) : (\n              <>\n                <button\n                  onClick={handleAuth}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <LogIn className=\"w-4 h-4\" />\n                  Sign In\n                </button>\n                <button\n                  onClick={handleGetStarted}\n                  className=\"flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all hover:scale-105\"\n                >\n                  <Play className=\"w-4 h-4\" />\n                  Get Started\n                </button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"lg:hidden p-2 text-gray-700 hover:text-blue-600 transition-colors\"\n          >\n            {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md\">\n            <div className=\"py-4\">\n              {/* Auth Section */}\n              <div className=\"px-4 py-4 border-b border-gray-200\">\n                {isAuthenticated ? (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => navigate('/app/dashboard')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <User className=\"w-5 h-5\" />\n                      Dashboard\n                    </button>\n                    <button\n                      onClick={() => navigate('/app/settings')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <Settings className=\"w-5 h-5\" />\n                      Settings\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={handleAuth}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <LogIn className=\"w-5 h-5\" />\n                      Sign In\n                    </button>\n                    <button\n                      onClick={handleGetStarted}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all\"\n                    >\n                      <Play className=\"w-5 h-5\" />\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {/* Navigation Menu */}\n              <div className=\"space-y-1 px-4 pt-4\">\n                {menuItems.map((menu, index) => (\n                  <div key={index} className=\"space-y-1\">\n                    <div className=\"px-4 py-2 font-semibold text-gray-900 text-sm uppercase tracking-wide\">\n                      {menu.label}\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className={`block px-4 py-3 rounded-lg transition-colors ${\n                          isActivePage(item.href)\n                            ? 'bg-blue-50 text-blue-600 font-medium'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx",
        "start": 180,
        "end": 352,
        "startLoc": {
          "line": 180,
          "column": 10,
          "position": 1195
        },
        "endLoc": {
          "line": 352,
          "column": 2,
          "position": 2463
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx",
        "start": 187,
        "end": 359,
        "startLoc": {
          "line": 187,
          "column": 10,
          "position": 1286
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2554
        }
      }
    },
    {
      "format": "tsx",
      "lines": 370,
      "fragment": "/**\n * Header Component\n *\n * Main navigation header for public pages\n * Similar to headers used by Zapier, Make, n8n, etc.\n */\n\nimport {\n  ArrowRight,\n  ChevronDown,\n  ExternalLink,\n  LogIn,\n  Menu,\n  Play,\n  Settings,\n  User,\n  X,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '@/core/stores/authStore';\n\nexport const Header: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { isAuthenticated } = useAuthStore();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  // Handle scroll effect\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n    setActiveDropdown(null);\n  }, []);\n\n  const handleAuth = () => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    } else {\n      navigate('/login');\n    }\n  };\n\n  const handleGetStarted = () => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    } else {\n      navigate('/register');\n    }\n  };\n\n  const menuItems = [\n    {\n      label: 'Product',\n      items: [\n        {\n          name: 'Features',\n          href: '/features',\n          description: 'Comprehensive automation features',\n        },\n        {\n          name: 'Integrations',\n          href: '/integrations',\n          description: '150+ integrations available',\n        },\n        {\n          name: 'Pricing',\n          href: '/pricing',\n          description: 'Transparent pricing plans',\n        },\n        {\n          name: 'Enterprise',\n          href: '/enterprise',\n          description: 'Enterprise-grade solutions',\n        },\n        {\n          name: 'Self-hosted',\n          href: '/self-hosted',\n          description: 'Deploy anywhere',\n        },\n        {\n          name: 'Roadmap',\n          href: '/roadmap',\n          description: 'Product development roadmap',\n        },\n      ],\n    },\n    {\n      label: 'Developers',\n      items: [\n        {\n          name: 'Documentation',\n          href: '/documentation',\n          description: 'Complete guides and tutorials',\n        },\n        {\n          name: 'API Reference',\n          href: '/api-reference',\n          description: 'REST API documentation',\n        },\n        {\n          name: 'Node SDK',\n          href: '/documentation',\n          description: 'Build custom nodes',\n        },\n        {\n          name: 'Examples',\n          href: '/documentation',\n          description: 'Code examples and templates',\n        },\n        {\n          name: 'GitHub',\n          href: 'https://github.com/reporunner/reporunner',\n          description: 'Open source repository',\n          external: true,\n        },\n        {\n          name: 'Community',\n          href: '/contact',\n          description: 'Join our community',\n        },\n      ],\n    },\n    {\n      label: 'Resources',\n      items: [\n        {\n          name: 'Blog',\n          href: '/documentation',\n          description: 'Latest insights and tutorials',\n        },\n        {\n          name: 'Case Studies',\n          href: '/about',\n          description: 'Customer success stories',\n        },\n        {\n          name: 'Help Center',\n          href: '/documentation',\n          description: 'Support documentation',\n        },\n        {\n          name: 'Status',\n          href: 'https://status.reporunner.dev',\n          description: 'System status',\n          external: true,\n        },\n      ],\n    },\n    {\n      label: 'Company',\n      items: [\n        { name: 'About', href: '/about', description: 'Our story and mission' },\n        { name: 'Contact', href: '/contact', description: 'Get in touch' },\n        { name: 'Careers', href: '/about', description: 'Join our team' },\n      ],\n    },\n  ];\n\n  const isActivePage = (href: string) => {\n    if (href === '/' && location.pathname === '/') return true;\n    if (href !== '/' && location.pathname.startsWith(href)) return true;\n    return false;\n  };\n\n  return (\n    <header\n      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200/50'\n          : 'bg-white/80 backdrop-blur-sm'\n      }`}\n    >\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link to=\"/\" className=\"flex items-center gap-3 group\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Reporunner\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {menuItems.map((menu, index) => (\n              <div\n                key={index}\n                className=\"relative group\"\n                onMouseEnter={() => setActiveDropdown(menu.label)}\n                onMouseLeave={() => setActiveDropdown(null)}\n              >\n                <button className=\"flex items-center gap-1 text-gray-700 hover:text-blue-600 font-medium transition-colors py-2\">\n                  {menu.label}\n                  <ChevronDown className=\"w-4 h-4\" />\n                </button>\n\n                {/* Dropdown */}\n                {activeDropdown === menu.label && (\n                  <div className=\"absolute top-full left-0 mt-2 w-80 bg-white rounded-xl shadow-xl border border-gray-200 py-4 z-50\">\n                    <div className=\"px-4 pb-2 mb-2 border-b border-gray-100\">\n                      <h3 className=\"font-semibold text-gray-900\">{menu.label}</h3>\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className=\"flex items-start gap-3 px-4 py-3 hover:bg-gray-50 transition-colors group\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 group-hover:text-blue-600\">\n                              {item.name}\n                            </span>\n                            {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                          </div>\n                          <p className=\"text-sm text-gray-500 mt-1\">{item.description}</p>\n                        </div>\n                        <ArrowRight className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity mt-1\" />\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden lg:flex items-center gap-3\">\n            {isAuthenticated ? (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => navigate('/app/dashboard')}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <User className=\"w-4 h-4\" />\n                  Dashboard\n                </button>\n                <button\n                  onClick={() => navigate('/app/settings')}\n                  className=\"p-2 text-gray-500 hover:text-gray-700 transition-colors\"\n                  title=\"Settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            ) : (\n              <>\n                <button\n                  onClick={handleAuth}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <LogIn className=\"w-4 h-4\" />\n                  Sign In\n                </button>\n                <button\n                  onClick={handleGetStarted}\n                  className=\"flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all hover:scale-105\"\n                >\n                  <Play className=\"w-4 h-4\" />\n                  Get Started\n                </button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"lg:hidden p-2 text-gray-700 hover:text-blue-600 transition-colors\"\n          >\n            {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md\">\n            <div className=\"py-4\">\n              {/* Auth Section */}\n              <div className=\"px-4 py-4 border-b border-gray-200\">\n                {isAuthenticated ? (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => navigate('/app/dashboard')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <User className=\"w-5 h-5\" />\n                      Dashboard\n                    </button>\n                    <button\n                      onClick={() => navigate('/app/settings')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <Settings className=\"w-5 h-5\" />\n                      Settings\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={handleAuth}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <LogIn className=\"w-5 h-5\" />\n                      Sign In\n                    </button>\n                    <button\n                      onClick={handleGetStarted}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all\"\n                    >\n                      <Play className=\"w-5 h-5\" />\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {/* Navigation Menu */}\n              <div className=\"space-y-1 px-4 pt-4\">\n                {menuItems.map((menu, index) => (\n                  <div key={index} className=\"space-y-1\">\n                    <div className=\"px-4 py-2 font-semibold text-gray-900 text-sm uppercase tracking-wide\">\n                      {menu.label}\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className={`block px-4 py-3 rounded-lg transition-colors ${\n                          isActivePage(item.href)\n                            ? 'bg-blue-50 text-blue-600 font-medium'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {item.name}\n                          {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1\">{item.description}</div>\n                      </Link>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx",
        "start": 1,
        "end": 370,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 370,
          "column": 2,
          "position": 2583
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx",
        "start": 8,
        "end": 377,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 377,
          "column": 2,
          "position": 2674
        }
      }
    },
    {
      "format": "tsx",
      "lines": 246,
      "fragment": "/**\n * Footer Component\n *\n * Comprehensive footer with links, social proof,\n * and additional conversion opportunities\n */\n\nimport {\n  ArrowRight,\n  ExternalLink,\n  Github,\n  Linkedin,\n  Mail,\n  MapPin,\n  Phone,\n  Slack,\n  Twitter,\n} from 'lucide-react';\nimport type React from 'react';\n\nexport const Footer: React.FC = () => {\n  const footerSections = [\n    {\n      title: 'Product',\n      links: [\n        { name: 'Features', href: '/features' },\n        { name: 'Integrations', href: '/integrations' },\n        { name: 'Pricing', href: '/pricing' },\n        { name: 'Enterprise', href: '/enterprise' },\n        { name: 'Self-hosted', href: '/self-hosted' },\n        { name: 'Roadmap', href: '/roadmap' },\n      ],\n    },\n    {\n      title: 'Developers',\n      links: [\n        { name: 'Documentation', href: '/documentation' },\n        { name: 'API Reference', href: '/api-reference' },\n        { name: 'Node SDK', href: '/documentation' },\n        { name: 'Examples', href: '/documentation' },\n        {\n          name: 'GitHub',\n          href: 'https://github.com/reporunner/reporunner',\n          external: true,\n        },\n        { name: 'Community', href: '/contact' },\n      ],\n    },\n    {\n      title: 'Resources',\n      links: [\n        { name: 'Blog', href: '/documentation' },\n        { name: 'Case Studies', href: '/about' },\n        { name: 'Tutorials', href: '/documentation' },\n        { name: 'Webinars', href: '/contact' },\n        { name: 'Help Center', href: '/documentation' },\n        {\n          name: 'Status Page',\n          href: 'https://status.reporunner.dev',\n          external: true,\n        },\n      ],\n    },\n    {\n      title: 'Company',\n      links: [\n        { name: 'About', href: '/about' },\n        { name: 'Careers', href: '/about' },\n        { name: 'Contact', href: '/contact' },\n        { name: 'Security', href: '/enterprise' },\n        { name: 'Privacy', href: '/privacy' },\n        { name: 'Terms', href: '/terms' },\n      ],\n    },\n  ];\n\n  const socialLinks = [\n    {\n      name: 'GitHub',\n      icon: Github,\n      href: 'https://github.com/reporunner/reporunner',\n      followers: '2.5K',\n    },\n    {\n      name: 'Twitter',\n      icon: Twitter,\n      href: 'https://twitter.com/reporunner',\n      followers: '8.2K',\n    },\n    {\n      name: 'LinkedIn',\n      icon: Linkedin,\n      href: 'https://linkedin.com/company/reporunner',\n      followers: '5.1K',\n    },\n    { name: 'Slack', icon: Slack, href: '/contact', followers: '3.8K' },\n  ];\n\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      {/* Newsletter Section */}\n      <div className=\"border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-12\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h3 className=\"text-2xl font-bold mb-4\">Stay Updated with Reporunner</h3>\n            <p className=\"text-gray-400 mb-8 max-w-2xl mx-auto\">\n              Get the latest updates on new features, integrations, and enterprise capabilities.\n              Join our newsletter for exclusive insights and early access.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n              <div className=\"flex-1\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400\"\n                />\n              </div>\n              <button className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all flex items-center justify-center gap-2\">\n                Subscribe\n                <ArrowRight className=\"w-4 h-4\" />\n              </button>\n            </div>\n\n            <p className=\"text-xs text-gray-500 mt-4\">No spam. Unsubscribe at any time.</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Footer Content */}\n      <div className=\"container mx-auto px-6 py-16\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-12\">\n          {/* Brand Section */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Reporunner\n              </h2>\n              <p className=\"text-gray-400 mt-2\">\n                Enterprise-grade workflow automation with AI capabilities\n              </p>\n            </div>\n\n            <p className=\"text-gray-400 mb-6 leading-relaxed\">\n              Build powerful automations with AI intelligence, enterprise security, and complete\n              data sovereignty. Deploy anywhere, control everything.\n            </p>\n\n            {/* Contact Info */}\n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Mail className=\"w-4 h-4\" />\n                <span className=\"text-sm\">hello@reporunner.dev</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Phone className=\"w-4 h-4\" />\n                <span className=\"text-sm\">+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <MapPin className=\"w-4 h-4\" />\n                <span className=\"text-sm\">San Francisco, CA</span>\n              </div>\n            </div>\n\n            {/* Social Links */}\n            <div className=\"flex gap-4\">\n              {socialLinks.map((social, index) => {\n                const Icon = social.icon;\n                return (\n                  <a\n                    key={index}\n                    href={social.href}\n                    className=\"group flex items-center gap-2 bg-gray-800 hover:bg-gray-700 p-2 rounded-lg transition-colors\"\n                    title={`${social.name} (${social.followers} followers)`}\n                  >\n                    <Icon className=\"w-5 h-5 text-gray-400 group-hover:text-white transition-colors\" />\n                  </a>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Footer Links */}\n          {footerSections.map((section, index) => (\n            <div key={index} className=\"lg:col-span-1\">\n              <h4 className=\"font-semibold text-white mb-6\">{section.title}</h4>\n              <ul className=\"space-y-3\">\n                {section.links.map((link, linkIndex) => (\n                  <li key={linkIndex}>\n                    <a\n                      href={link.href}\n                      className=\"text-gray-400 hover:text-white transition-colors flex items-center gap-1 group\"\n                    >\n                      {link.name}\n                      {link.external && (\n                        <ExternalLink className=\"w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                      )}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Bottom Bar */}\n      <div className=\"border-t border-gray-800\">\n        <div className=\"container mx-auto px-6 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"flex flex-col md:flex-row items-center gap-4\">\n              <p className=\"text-gray-400 text-sm\">© 2025 Reporunner. All rights reserved.</p>\n              <div className=\"flex gap-6 text-sm\">\n                <a href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Privacy Policy\n                </a>\n                <a href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Terms of Service\n                </a>\n                <a href=\"/enterprise\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Security\n                </a>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2 text-gray-400 text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                <span>All systems operational</span>\n              </div>\n              <a\n                href=\"https://status.reporunner.dev\"\n                className=\"text-gray-400 hover:text-white text-sm transition-colors flex items-center gap-1\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Status\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Footer.tsx",
        "start": 1,
        "end": 246,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 246,
          "column": 2,
          "position": 2007
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/footer/Footer.tsx",
        "start": 1,
        "end": 246,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 246,
          "column": 2,
          "position": 2007
        }
      }
    },
    {
      "format": "javascript",
      "lines": 171,
      "fragment": "={feature.id}\n                    className={`cursor-pointer transition-all duration-300 rounded-xl p-6 border-2 ${\n                      isActive\n                        ? 'border-blue-500 bg-white shadow-lg shadow-blue-500/10'\n                        : 'border-gray-200 bg-white/50 hover:border-gray-300 hover:bg-white'\n                    }`}\n                    onClick={() => setActiveFeature(index)}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      {/* Icon */}\n                      <div\n                        className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-300 ${\n                          isActive\n                            ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'\n                            : 'bg-gray-100 text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3\n                            className={`text-xl font-bold transition-colors ${\n                              isActive ? 'text-blue-600' : 'text-gray-900'\n                            }`}\n                          >\n                            {feature.title}\n                          </h3>\n                          {isActive && (\n                            <div className=\"flex items-center gap-1 text-sm text-blue-600 font-medium\">\n                              <Play className=\"w-4 h-4\" />\n                              Live Demo\n                            </div>\n                          )}\n                        </div>\n\n                        <p className=\"text-sm text-gray-500 mb-3\">{feature.subtitle}</p>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n\n                        {/* Highlights */}\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {feature.highlights.map((highlight, i) => (\n                            <div key={i} className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <div\n                                className={`w-1.5 h-1.5 rounded-full ${\n                                  isActive ? 'bg-blue-500' : 'bg-gray-400'\n                                }`}\n                              />\n                              {highlight}\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Try It Button */}\n                        {isActive && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <button className=\"group flex items-center gap-2 text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                              Try this feature\n                              <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Interactive Demo Area */}\n            <div className=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n              {/* Demo Header */}\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-green-400\" />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-600\">\n                    {currentFeature.title} Demo\n                  </span>\n                  <div className=\"ml-auto flex items-center gap-2 text-xs text-gray-500\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                    Live Demo\n                  </div>\n                </div>\n              </div>\n\n              {/* Demo Content */}\n              <div className=\"relative h-96 bg-gradient-to-br from-slate-50 to-blue-50 p-6\">\n                {/* Render demo elements based on feature type */}\n                {currentFeature.id === 0 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Workflow nodes */}\n                    {currentFeature.demoElements?.map((element, i) => {\n                      if (element.type === 'node') {\n                        return (\n                          <div\n                            key={i}\n                            className={`absolute w-24 h-16 ${element.color} rounded-lg flex items-center justify-center text-white text-xs font-medium shadow-lg transform transition-all duration-1000 hover:scale-110`}\n                            style={{\n                              left: `${element.x}px`,\n                              top: `${element.y}px`,\n                              animationDelay: `${i * 200}ms`,\n                            }}\n                          >\n                            {element.label}\n                          </div>\n                        );\n                      }\n                      return null;\n                    })}\n\n                    {/* Connections */}\n                    <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n                      <defs>\n                        <marker\n                          id=\"arrowhead\"\n                          markerWidth=\"10\"\n                          markerHeight=\"7\"\n                          refX=\"9\"\n                          refY=\"3.5\"\n                          orient=\"auto\"\n                        >\n                          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6366f1\" />\n                        </marker>\n                      </defs>\n                      <path\n                        d=\"M 150 167 Q 200 167 250 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                      />\n                      <path\n                        d=\"M 350 167 Q 400 167 450 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                        style={{ animationDelay: '500ms' }}\n                      />\n                    </svg>\n                  </div>\n                )}\n\n                {/* AI Feature Demo */}\n                {currentFeature.id === 1 && (\n                  <div className=\"relative w-full h-full\">\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"w-32 h-32 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center shadow-xl animate-pulse\">\n                        <Brain className=\"w-16 h-16 text-white\" />\n                      </div>\n                    </div>\n\n                    {/* AI Insights */}\n                    <div className=\"absolute top-12 right-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Zap className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-gray-700\">Performance optimized</span>\n                      </div>\n                    </div>\n\n                    <div\n                      className=\"absolute bottom-12 left-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\"\n                      style={{ animationDelay: '1s' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx",
        "start": 195,
        "end": 365,
        "startLoc": {
          "line": 195,
          "column": 4,
          "position": 1590
        },
        "endLoc": {
          "line": 365,
          "column": 2,
          "position": 2764
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx",
        "start": 196,
        "end": 366,
        "startLoc": {
          "line": 196,
          "column": 4,
          "position": 1603
        },
        "endLoc": {
          "line": 366,
          "column": 2,
          "position": 2777
        }
      }
    },
    {
      "format": "tsx",
      "lines": 460,
      "fragment": "/**\n * Feature Showcase Section\n *\n * Interactive demos of key Reporunner features with modern UI\n * and engaging animations\n */\n\nimport {\n  ArrowRight,\n  BarChart3,\n  Brain,\n  GitBranch,\n  Play,\n  Shield,\n  Users,\n  Workflow,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\ntype DemoElement =\n  | { type: 'node'; label: string; x: number; y: number; color: string }\n  | { type: 'connection'; from: number; to: number }\n  | { type: 'user'; name: string; x: number; y: number; color: string }\n  | { type: 'edit'; x: number; y: number; user: string }\n  | { type: 'chart'; x: number; y: number; width: number; height: number }\n  | { type: 'metric'; label: string; x: number; y: number }\n  | { type: 'ai-node'; label: string; x: number; y: number; color: string }\n  | { type: 'insight'; label: string; x: number; y: number; color: string };\n\nexport const FeatureShowcase: React.FC = () => {\n  const [activeFeature, setActiveFeature] = useState(0);\n\n  const features: Array<{\n    id: number;\n    icon: any;\n    title: string;\n    subtitle: string;\n    description: string;\n    image: string;\n    highlights: string[];\n    demoElements?: DemoElement[];\n  }> = [\n    {\n      id: 0,\n      icon: Workflow,\n      title: 'Visual Workflow Builder',\n      subtitle: 'Drag-and-drop simplicity',\n      description:\n        'Create complex automations with our intuitive visual editor. Connect 500+ integrations with simple drag-and-drop operations.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Drag-and-drop interface',\n        '500+ pre-built integrations',\n        'Real-time validation',\n        'Auto-connection suggestions',\n      ],\n      demoElements: [\n        {\n          type: 'node',\n          label: 'Gmail Trigger',\n          x: 100,\n          y: 150,\n          color: 'bg-red-500',\n        },\n        {\n          type: 'node',\n          label: 'AI Processor',\n          x: 300,\n          y: 150,\n          color: 'bg-blue-500',\n        },\n        {\n          type: 'node',\n          label: 'Slack Action',\n          x: 500,\n          y: 150,\n          color: 'bg-green-500',\n        },\n        { type: 'connection', from: 0, to: 1 },\n        { type: 'connection', from: 1, to: 2 },\n      ],\n    },\n    {\n      id: 1,\n      icon: Brain,\n      title: 'AI-Powered Automation',\n      subtitle: 'Intelligent workflows',\n      description:\n        'Leverage AI for smart error recovery, pattern recognition, and optimization suggestions. Your workflows learn and improve over time.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Smart error recovery',\n        'Pattern recognition',\n        'Auto-optimization',\n        'Natural language queries',\n      ],\n      demoElements: [\n        {\n          type: 'ai-node',\n          label: 'AI Agent',\n          x: 250,\n          y: 100,\n          color: 'bg-purple-500',\n        },\n        {\n          type: 'insight',\n          label: 'Optimized execution path',\n          x: 350,\n          y: 50,\n          color: 'text-green-500',\n        },\n        {\n          type: 'insight',\n          label: 'Error pattern detected',\n          x: 150,\n          y: 200,\n          color: 'text-red-500',\n        },\n      ],\n    },\n    {\n      id: 2,\n      icon: Users,\n      title: 'Enterprise Collaboration',\n      subtitle: 'Team workflows',\n      description:\n        'Real-time collaborative editing, version control, and enterprise-grade permissions. Build workflows as a team.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Real-time collaboration',\n        'Version control',\n        'Role-based permissions',\n        'Audit trails',\n      ],\n      demoElements: [\n        { type: 'user', name: 'Alice', x: 100, y: 80, color: 'bg-blue-500' },\n        { type: 'user', name: 'Bob', x: 200, y: 120, color: 'bg-green-500' },\n        { type: 'user', name: 'Carol', x: 300, y: 90, color: 'bg-purple-500' },\n        { type: 'edit', x: 150, y: 200, user: 'Alice' },\n      ],\n    },\n    {\n      id: 3,\n      icon: BarChart3,\n      title: 'Advanced Analytics',\n      subtitle: 'Performance insights',\n      description:\n        'Deep insights into workflow performance, cost optimization, and usage patterns. Make data-driven decisions.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Performance monitoring',\n        'Cost optimization',\n        'Usage analytics',\n        'Custom dashboards',\n      ],\n      demoElements: [\n        { type: 'chart', x: 150, y: 100, width: 300, height: 150 },\n        { type: 'metric', label: '99.9% Uptime', x: 100, y: 50 },\n        { type: 'metric', label: '2.3s Avg Response', x: 350, y: 50 },\n      ],\n    },\n  ];\n\n  const currentFeature = features[activeFeature];\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            See Reporunner{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              in Action\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Experience the power of enterprise workflow automation with interactive demos of our key\n            features and capabilities.\n          </p>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Feature Tabs */}\n            <div className=\"space-y-4\">\n              {features.map((feature, index) => {\n                const Icon = feature.icon;\n                const isActive = activeFeature === index;\n\n                return (\n                  <div\n                    key={feature.id}\n                    className={`cursor-pointer transition-all duration-300 rounded-xl p-6 border-2 ${\n                      isActive\n                        ? 'border-blue-500 bg-white shadow-lg shadow-blue-500/10'\n                        : 'border-gray-200 bg-white/50 hover:border-gray-300 hover:bg-white'\n                    }`}\n                    onClick={() => setActiveFeature(index)}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      {/* Icon */}\n                      <div\n                        className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-300 ${\n                          isActive\n                            ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'\n                            : 'bg-gray-100 text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3\n                            className={`text-xl font-bold transition-colors ${\n                              isActive ? 'text-blue-600' : 'text-gray-900'\n                            }`}\n                          >\n                            {feature.title}\n                          </h3>\n                          {isActive && (\n                            <div className=\"flex items-center gap-1 text-sm text-blue-600 font-medium\">\n                              <Play className=\"w-4 h-4\" />\n                              Live Demo\n                            </div>\n                          )}\n                        </div>\n\n                        <p className=\"text-sm text-gray-500 mb-3\">{feature.subtitle}</p>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n\n                        {/* Highlights */}\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {feature.highlights.map((highlight, i) => (\n                            <div key={i} className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <div\n                                className={`w-1.5 h-1.5 rounded-full ${\n                                  isActive ? 'bg-blue-500' : 'bg-gray-400'\n                                }`}\n                              />\n                              {highlight}\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Try It Button */}\n                        {isActive && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <button className=\"group flex items-center gap-2 text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                              Try this feature\n                              <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Interactive Demo Area */}\n            <div className=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n              {/* Demo Header */}\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-green-400\" />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-600\">\n                    {currentFeature.title} Demo\n                  </span>\n                  <div className=\"ml-auto flex items-center gap-2 text-xs text-gray-500\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                    Live Demo\n                  </div>\n                </div>\n              </div>\n\n              {/* Demo Content */}\n              <div className=\"relative h-96 bg-gradient-to-br from-slate-50 to-blue-50 p-6\">\n                {/* Render demo elements based on feature type */}\n                {currentFeature.id === 0 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Workflow nodes */}\n                    {currentFeature.demoElements?.map((element, i) => {\n                      if (element.type === 'node') {\n                        return (\n                          <div\n                            key={i}\n                            className={`absolute w-24 h-16 ${element.color} rounded-lg flex items-center justify-center text-white text-xs font-medium shadow-lg transform transition-all duration-1000 hover:scale-110`}\n                            style={{\n                              left: `${element.x}px`,\n                              top: `${element.y}px`,\n                              animationDelay: `${i * 200}ms`,\n                            }}\n                          >\n                            {element.label}\n                          </div>\n                        );\n                      }\n                      return null;\n                    })}\n\n                    {/* Connections */}\n                    <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n                      <defs>\n                        <marker\n                          id=\"arrowhead\"\n                          markerWidth=\"10\"\n                          markerHeight=\"7\"\n                          refX=\"9\"\n                          refY=\"3.5\"\n                          orient=\"auto\"\n                        >\n                          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6366f1\" />\n                        </marker>\n                      </defs>\n                      <path\n                        d=\"M 150 167 Q 200 167 250 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                      />\n                      <path\n                        d=\"M 350 167 Q 400 167 450 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                        style={{ animationDelay: '500ms' }}\n                      />\n                    </svg>\n                  </div>\n                )}\n\n                {/* AI Feature Demo */}\n                {currentFeature.id === 1 && (\n                  <div className=\"relative w-full h-full\">\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"w-32 h-32 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center shadow-xl animate-pulse\">\n                        <Brain className=\"w-16 h-16 text-white\" />\n                      </div>\n                    </div>\n\n                    {/* AI Insights */}\n                    <div className=\"absolute top-12 right-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Zap className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-gray-700\">Performance optimized</span>\n                      </div>\n                    </div>\n\n                    <div\n                      className=\"absolute bottom-12 left-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\"\n                      style={{ animationDelay: '1s' }}\n                    >\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Shield className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-gray-700\">Error pattern detected</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Collaboration Demo */}\n                {currentFeature.id === 2 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* User avatars */}\n                    <div className=\"absolute top-8 left-8 flex -space-x-2\">\n                      {['Alice', 'Bob', 'Carol'].map((name, i) => (\n                        <div\n                          key={name}\n                          className={`w-10 h-10 rounded-full bg-gradient-to-r ${\n                            i === 0\n                              ? 'from-blue-500 to-blue-600'\n                              : i === 1\n                                ? 'from-green-500 to-green-600'\n                                : 'from-purple-500 to-purple-600'\n                          } flex items-center justify-center text-white font-bold text-sm border-2 border-white shadow-lg`}\n                          style={{ animationDelay: `${i * 300}ms` }}\n                        >\n                          {name[0]}\n                        </div>\n                      ))}\n                    </div>\n\n                    {/* Collaboration indicator */}\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"bg-white rounded-xl shadow-xl p-6 border border-gray-200\">\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <GitBranch className=\"w-6 h-6 text-blue-500\" />\n                          <span className=\"font-semibold text-gray-800\">Live Collaboration</span>\n                        </div>\n                        <div className=\"space-y-2 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                            Alice is editing workflow\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full bg-blue-500\" />\n                            Bob added a comment\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Analytics Demo */}\n                {currentFeature.id === 3 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Mock chart */}\n                    <div className=\"absolute inset-0 p-8\">\n                      <div className=\"bg-white rounded-lg shadow-lg p-4 h-full\">\n                        <h4 className=\"font-semibold text-gray-800 mb-4\">Workflow Performance</h4>\n                        <div className=\"h-32 bg-gradient-to-t from-blue-100 to-blue-50 rounded mb-4 relative overflow-hidden\">\n                          <div className=\"absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-blue-500 to-blue-400 rounded animate-pulse\" />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div className=\"bg-green-50 rounded p-2\">\n                            <div className=\"text-green-600 font-bold\">99.9%</div>\n                            <div className=\"text-gray-600\">Uptime</div>\n                          </div>\n                          <div className=\"bg-blue-50 rounded p-2\">\n                            <div className=\"text-blue-600 font-bold\">2.3s</div>\n                            <div className=\"text-gray-600\">Avg Response</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Demo Footer */}\n              <div className=\"bg-gray-50 px-6 py-4 border-t border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Interactive demo • Click to explore</span>\n                  <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors\">\n                    Try Full Demo\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx",
        "start": 1,
        "end": 460,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 460,
          "column": 2,
          "position": 3529
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx",
        "start": 2,
        "end": 461,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 461,
          "column": 2,
          "position": 3542
        }
      }
    },
    {
      "format": "tsx",
      "lines": 220,
      "fragment": "/**\n * Enterprise Features Section\n *\n * Highlights enterprise-specific capabilities and\n * compliance features for large organizations\n */\n\nimport { BarChart3, CheckCircle, Clock, Globe, Shield, Users, Zap } from 'lucide-react';\nimport type React from 'react';\n\nexport const EnterpriseFeatures: React.FC = () => {\n  const features = [\n    {\n      icon: Shield,\n      title: 'Security & Compliance',\n      description:\n        'Enterprise-grade security with SOC2, GDPR, and HIPAA compliance out of the box.',\n      details: [\n        'End-to-end encryption',\n        'Regular security audits',\n        'Compliance reporting',\n        'Data residency controls',\n      ],\n      gradient: 'from-green-500 to-emerald-500',\n    },\n    {\n      icon: Users,\n      title: 'Advanced User Management',\n      description:\n        'Sophisticated RBAC, SSO integration, and user provisioning for enterprise teams.',\n      details: [\n        'SAML/SSO integration',\n        'Granular permissions',\n        'User provisioning',\n        'Audit trails',\n      ],\n      gradient: 'from-blue-500 to-cyan-500',\n    },\n    {\n      icon: Globe,\n      title: 'Multi-Tenant Architecture',\n      description:\n        'Complete isolation between organizations with dedicated resources and configurations.',\n      details: [\n        'Organization isolation',\n        'Resource quotas',\n        'Custom branding',\n        'Dedicated environments',\n      ],\n      gradient: 'from-purple-500 to-pink-500',\n    },\n    {\n      icon: BarChart3,\n      title: 'Enterprise Analytics',\n      description: 'Deep insights into usage patterns, performance metrics, and cost optimization.',\n      details: [\n        'Usage analytics',\n        'Performance monitoring',\n        'Cost optimization',\n        'Custom reporting',\n      ],\n      gradient: 'from-orange-500 to-red-500',\n    },\n  ];\n\n  const capabilities = [\n    {\n      category: 'Deployment & Infrastructure',\n      items: [\n        { name: 'Kubernetes Support', included: true },\n        { name: 'Auto-scaling', included: true },\n        { name: 'High Availability', included: true },\n        { name: 'Disaster Recovery', included: true },\n        { name: 'Multi-region Deployment', included: true },\n        { name: 'Custom Infrastructure', included: true },\n      ],\n    },\n    {\n      category: 'Security & Compliance',\n      items: [\n        { name: 'SOC2 Type II', included: true },\n        { name: 'GDPR Compliance', included: true },\n        { name: 'HIPAA Compliance', included: true },\n        { name: 'ISO 27001', included: true },\n        { name: 'Data Encryption', included: true },\n        { name: 'Audit Logging', included: true },\n      ],\n    },\n    {\n      category: 'Support & Services',\n      items: [\n        { name: '24/7 Priority Support', included: true },\n        { name: 'Dedicated Success Manager', included: true },\n        { name: 'Custom Training', included: true },\n        { name: 'Professional Services', included: true },\n        { name: 'SLA Guarantees', included: true },\n        { name: 'Priority Bug Fixes', included: true },\n      ],\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Built for{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Enterprise Scale\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Enterprise-grade features, security, and support that scales with your organization.\n            Everything you need to deploy mission-critical workflows with confidence.\n          </p>\n        </div>\n\n        {/* Main Features Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-20\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <div\n                key={index}\n                className=\"group bg-white rounded-2xl border border-gray-200 p-8 hover:shadow-xl hover:shadow-gray-200/50 transition-all duration-300\"\n              >\n                {/* Icon & Title */}\n                <div className=\"flex items-start gap-4 mb-6\">\n                  <div\n                    className={`w-16 h-16 rounded-xl bg-gradient-to-r ${feature.gradient} flex items-center justify-center flex-shrink-0 group-hover:scale-110 transition-transform`}\n                  >\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{feature.title}</h3>\n                    <p className=\"text-gray-600 leading-relaxed\">{feature.description}</p>\n                  </div>\n                </div>\n\n                {/* Feature Details */}\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {feature.details.map((detail, detailIndex) => (\n                    <div key={detailIndex} className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-sm text-gray-700\">{detail}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Enterprise Capabilities Table */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n            Enterprise Capabilities Overview\n          </h3>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {capabilities.map((category, categoryIndex) => (\n              <div key={categoryIndex} className=\"bg-white rounded-xl p-6 border border-gray-200\">\n                <h4 className=\"font-bold text-gray-900 mb-4 pb-3 border-b border-gray-100\">\n                  {category.category}\n                </h4>\n                <div className=\"space-y-3\">\n                  {category.items.map((item, itemIndex) => (\n                    <div key={itemIndex} className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">{item.name}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-16\">\n          {[\n            { metric: '99.9%', label: 'Uptime SLA', icon: Clock },\n            { metric: '<100ms', label: 'API Response Time', icon: Zap },\n            { metric: '10M+', label: 'Workflows Executed', icon: BarChart3 },\n            { metric: '24/7', label: 'Enterprise Support', icon: Shield },\n          ].map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <div key={index} className=\"text-center\">\n                <div className=\"bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-lg transition-all\">\n                  <Icon className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n                  <div className=\"text-3xl font-bold text-gray-900 mb-1\">{stat.metric}</div>\n                  <div className=\"text-gray-600\">{stat.label}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Ready to Scale Your Enterprise Workflows?</h3>\n          <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n            Join enterprise customers who trust Reporunner for their mission-critical automation\n            needs. Get dedicated support and custom deployment options.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n              Schedule Enterprise Demo\n            </button>\n            <button className=\"border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors\">\n              Contact Sales Team\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/EnterpriseFeatures.tsx",
        "start": 1,
        "end": 220,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 220,
          "column": 2,
          "position": 1818
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/enterprisefeatures/EnterpriseFeatures.tsx",
        "start": 1,
        "end": 220,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 220,
          "column": 2,
          "position": 1818
        }
      }
    },
    {
      "format": "javascript",
      "lines": 107,
      "fragment": "={`w-5 h-5 mx-auto ${isReporunner ? 'text-blue-600' : 'text-green-500'}`} />\n      ) : (\n        <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n      );\n    }\n\n    if (typeof value === 'string') {\n      if (value === 'Enterprise' || value === 'Paid' || value === 'Basic') {\n        return (\n          <span\n            className={`text-xs px-2 py-1 rounded-full ${\n              value === 'Enterprise'\n                ? 'bg-purple-100 text-purple-700'\n                : value === 'Paid'\n                  ? 'bg-yellow-100 text-yellow-700'\n                  : 'bg-gray-100 text-gray-700'\n            }`}\n          >\n            {value}\n          </span>\n        );\n      }\n      return (\n        <span className={`text-sm font-medium ${isReporunner ? 'text-blue-600' : 'text-gray-700'}`}>\n          {value}\n        </span>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            How Reporunner{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Stacks Up\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            See how Reporunner compares to leading automation platforms including Zapier, Make.com,\n            n8n, and SIM. We combine enterprise-grade features with self-hosting flexibility and\n            competitive pricing.\n          </p>\n        </div>\n\n        {/* Platform Headers */}\n        <div className=\"grid grid-cols-6 gap-2 mb-8\">\n          <div className=\"p-3\">\n            <h3 className=\"font-semibold text-gray-900\">Features</h3>\n          </div>\n          {platforms.map((platform, index) => {\n            const Icon = platform.icon;\n            return (\n              <div\n                key={index}\n                className={`p-3 rounded-xl border-2 text-center ${\n                  index === 0\n                    ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-purple-50'\n                    : 'border-gray-200 bg-gray-50'\n                }`}\n              >\n                <div\n                  className={`w-10 h-10 rounded-lg bg-gradient-to-r ${platform.gradient} flex items-center justify-center mx-auto mb-2`}\n                >\n                  <Icon className=\"w-5 h-5 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-1 text-sm\">{platform.name}</h3>\n                <p className=\"text-xs text-gray-600 mb-1\">{platform.tagline}</p>\n                <div\n                  className={`inline-block px-1 py-0.5 rounded-full text-xs font-medium ${\n                    index === 0 ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'\n                  }`}\n                >\n                  {platform.highlight}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Comparison Table */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 overflow-hidden shadow-lg\">\n          {features.map((category, categoryIndex) => (\n            <div key={categoryIndex}>\n              {/* Category Header */}\n              <div className=\"bg-gray-50 border-b border-gray-200\">\n                <div className=\"grid grid-cols-6 gap-2\">\n                  <div className=\"p-3\">\n                    <h4 className=\"font-bold text-gray-900 text-sm\">{category.category}</h4>\n                  </div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                </div>\n              </div>\n\n              {/* Feature Rows */}\n              {category.items.map((item, itemIndex) => (\n                <div\n                  key={itemIndex}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx",
        "start": 310,
        "end": 416,
        "startLoc": {
          "line": 310,
          "column": 10,
          "position": 1888
        },
        "endLoc": {
          "line": 416,
          "column": 2,
          "position": 2732
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx",
        "start": 310,
        "end": 416,
        "startLoc": {
          "line": 310,
          "column": 10,
          "position": 1888
        },
        "endLoc": {
          "line": 416,
          "column": 2,
          "position": 2732
        }
      }
    },
    {
      "format": "tsx",
      "lines": 511,
      "fragment": "/**\n * Comparison Table Section\n *\n * Competitive comparison showing how Reporunner\n * stacks up against n8n and SIM\n */\n\nimport { Bot, Check, Crown, Star, Workflow, X, Zap } from 'lucide-react';\nimport type React from 'react';\n\nexport const ComparisonTable: React.FC = () => {\n  const features = [\n    {\n      category: 'Core Platform',\n      items: [\n        {\n          feature: 'Self-Hosted Deployment',\n          reporunner: true,\n          zapier: false,\n          make: false,\n          n8n: true,\n          sim: true,\n        },\n        {\n          feature: 'Visual Workflow Builder',\n          reporunner: true,\n          zapier: 'Basic',\n          make: true,\n          n8n: true,\n          sim: true,\n        },\n        {\n          feature: 'Pre-built Integrations',\n          reporunner: '500+',\n          zapier: '8,000+',\n          make: '2,000+',\n          n8n: '400+',\n          sim: '100+',\n        },\n        {\n          feature: 'Custom Node Development',\n          reporunner: true,\n          zapier: false,\n          make: false,\n          n8n: true,\n          sim: false,\n        },\n        {\n          feature: 'Real-time Collaboration',\n          reporunner: true,\n          zapier: 'Team Plans',\n          make: true,\n          n8n: false,\n          sim: true,\n        },\n        {\n          feature: 'Version Control',\n          reporunner: true,\n          zapier: false,\n          make: 'Basic',\n          n8n: 'Basic',\n          sim: true,\n        },\n      ],\n    },\n    {\n      category: 'AI & Intelligence',\n      items: [\n        {\n          feature: 'Native AI Integration',\n          reporunner: true,\n          zapier: true,\n          make: true,\n          n8n: false,\n          sim: true,\n        },\n        {\n          feature: 'Vector Search (pgvector)',\n          reporunner: true,\n          zapier: false,\n          make: false,\n          n8n: false,\n          sim: true,\n        },\n        {\n          feature: 'Intelligent Error Recovery',\n          reporunner: true,\n          zapier: 'Basic',\n          make: 'Basic',\n          n8n: false,\n          sim: true,\n        },\n        {\n          feature: 'AI-Powered Optimization',\n          reporunner: true,\n          zapier: 'Basic',\n          make: 'Basic',\n          n8n: false,\n          sim: 'Basic',\n        },\n        {\n          feature: 'AI Agents/Chatbots',\n          reporunner: true,\n          zapier: true,\n          make: true,\n          n8n: false,\n          sim: true,\n        },\n        {\n          feature: 'Natural Language Queries',\n          reporunner: true,\n          zapier: false,\n          make: false,\n          n8n: false,\n          sim: true,\n        },\n      ],\n    },\n    {\n      category: 'Enterprise Features',\n      items: [\n        {\n          feature: 'SSO/SAML Integration',\n          reporunner: true,\n          zapier: 'Enterprise',\n          make: 'Enterprise',\n          n8n: 'Enterprise',\n          sim: false,\n        },\n        {\n          feature: 'RBAC Permissions',\n          reporunner: true,\n          zapier: 'Enterprise',\n          make: 'Enterprise',\n          n8n: 'Enterprise',\n          sim: 'Basic',\n        },\n        {\n          feature: 'Audit Logging',\n          reporunner: true,\n          zapier: 'Enterprise',\n          make: 'Enterprise',\n          n8n: 'Enterprise',\n          sim: false,\n        },\n        {\n          feature: 'Compliance Certifications',\n          reporunner: true,\n          zapier: true,\n          make: true,\n          n8n: true,\n          sim: false,\n        },\n        {\n          feature: 'Multi-tenancy',\n          reporunner: true,\n          zapier: true,\n          make: 'Basic',\n          n8n: 'Enterprise',\n          sim: 'Basic',\n        },\n        {\n          feature: 'Enterprise Support',\n          reporunner: true,\n          zapier: 'Paid',\n          make: 'Paid',\n          n8n: 'Paid',\n          sim: 'Paid',\n        },\n      ],\n    },\n    {\n      category: 'Pricing & Deployment',\n      items: [\n        {\n          feature: 'Free Tier',\n          reporunner: 'Unlimited Self-hosted',\n          zapier: '100 ops/month',\n          make: '1,000 ops/month',\n          n8n: 'Unlimited Self-hosted',\n          sim: 'Basic',\n        },\n        {\n          feature: 'Pricing Model',\n          reporunner: 'One-time + Support',\n          zapier: 'Per Task/User',\n          make: 'Per Operation',\n          n8n: 'Freemium + Cloud',\n          sim: 'Per User',\n        },\n        {\n          feature: 'Cloud Hosting Option',\n          reporunner: 'Coming Soon',\n          zapier: true,\n          make: true,\n          n8n: true,\n          sim: true,\n        },\n        {\n          feature: 'On-Premise Only',\n          reporunner: true,\n          zapier: false,\n          make: false,\n          n8n: true,\n          sim: false,\n        },\n        {\n          feature: 'Cost at Scale',\n          reporunner: 'Very Low',\n          zapier: 'High',\n          make: 'Medium',\n          n8n: 'Low',\n          sim: 'Medium',\n        },\n      ],\n    },\n    {\n      category: 'Database & Architecture',\n      items: [\n        {\n          feature: 'Hybrid Database Support',\n          reporunner: 'MongoDB + PostgreSQL',\n          zapier: 'Cloud Only',\n          make: 'Cloud Only',\n          n8n: 'Multi-DB',\n          sim: 'PostgreSQL',\n        },\n        {\n          feature: 'Vector Database',\n          reporunner: 'Built-in',\n          zapier: false,\n          make: false,\n          n8n: false,\n          sim: 'Built-in',\n        },\n        {\n          feature: 'Microservices Architecture',\n          reporunner: true,\n          zapier: 'Cloud Native',\n          make: 'Cloud Native',\n          n8n: 'Monolith',\n          sim: 'Monolith',\n        },\n        {\n          feature: 'Horizontal Scaling',\n          reporunner: true,\n          zapier: 'Automatic',\n          make: 'Automatic',\n          n8n: 'Queue Only',\n          sim: 'Basic',\n        },\n        {\n          feature: 'Data Sovereignty',\n          reporunner: 'Complete',\n          zapier: false,\n          make: false,\n          n8n: 'Self-hosted Only',\n          sim: false,\n        },\n      ],\n    },\n  ];\n\n  const platforms = [\n    {\n      name: 'Reporunner',\n      icon: Crown,\n      tagline: 'Enterprise-grade with AI',\n      highlight: 'Best Overall',\n      gradient: 'from-blue-600 to-purple-600',\n      bgGradient: 'from-blue-50 to-purple-50',\n    },\n    {\n      name: 'Zapier',\n      icon: Zap,\n      tagline: 'Market leader (cloud)',\n      highlight: 'Most Integrations',\n      gradient: 'from-orange-500 to-red-500',\n      bgGradient: 'from-orange-50 to-red-50',\n    },\n    {\n      name: 'Make',\n      icon: Workflow,\n      tagline: 'Visual automation',\n      highlight: 'Best UX',\n      gradient: 'from-indigo-500 to-purple-500',\n      bgGradient: 'from-indigo-50 to-purple-50',\n    },\n    {\n      name: 'n8n',\n      icon: Star,\n      tagline: 'Open-source veteran',\n      highlight: 'Self-hosted',\n      gradient: 'from-gray-500 to-gray-600',\n      bgGradient: 'from-gray-50 to-gray-100',\n    },\n    {\n      name: 'SIM',\n      icon: Bot,\n      tagline: 'AI-first workflows',\n      highlight: 'AI Native',\n      gradient: 'from-emerald-500 to-teal-500',\n      bgGradient: 'from-emerald-50 to-teal-50',\n    },\n  ];\n\n  const renderFeatureValue = (value: any, isReporunner: boolean = false) => {\n    if (typeof value === 'boolean') {\n      return value ? (\n        <Check className={`w-5 h-5 mx-auto ${isReporunner ? 'text-blue-600' : 'text-green-500'}`} />\n      ) : (\n        <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n      );\n    }\n\n    if (typeof value === 'string') {\n      if (value === 'Enterprise' || value === 'Paid' || value === 'Basic') {\n        return (\n          <span\n            className={`text-xs px-2 py-1 rounded-full ${\n              value === 'Enterprise'\n                ? 'bg-purple-100 text-purple-700'\n                : value === 'Paid'\n                  ? 'bg-yellow-100 text-yellow-700'\n                  : 'bg-gray-100 text-gray-700'\n            }`}\n          >\n            {value}\n          </span>\n        );\n      }\n      return (\n        <span className={`text-sm font-medium ${isReporunner ? 'text-blue-600' : 'text-gray-700'}`}>\n          {value}\n        </span>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            How Reporunner{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Stacks Up\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            See how Reporunner compares to leading automation platforms including Zapier, Make.com,\n            n8n, and SIM. We combine enterprise-grade features with self-hosting flexibility and\n            competitive pricing.\n          </p>\n        </div>\n\n        {/* Platform Headers */}\n        <div className=\"grid grid-cols-6 gap-2 mb-8\">\n          <div className=\"p-3\">\n            <h3 className=\"font-semibold text-gray-900\">Features</h3>\n          </div>\n          {platforms.map((platform, index) => {\n            const Icon = platform.icon;\n            return (\n              <div\n                key={index}\n                className={`p-3 rounded-xl border-2 text-center ${\n                  index === 0\n                    ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-purple-50'\n                    : 'border-gray-200 bg-gray-50'\n                }`}\n              >\n                <div\n                  className={`w-10 h-10 rounded-lg bg-gradient-to-r ${platform.gradient} flex items-center justify-center mx-auto mb-2`}\n                >\n                  <Icon className=\"w-5 h-5 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-1 text-sm\">{platform.name}</h3>\n                <p className=\"text-xs text-gray-600 mb-1\">{platform.tagline}</p>\n                <div\n                  className={`inline-block px-1 py-0.5 rounded-full text-xs font-medium ${\n                    index === 0 ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'\n                  }`}\n                >\n                  {platform.highlight}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Comparison Table */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 overflow-hidden shadow-lg\">\n          {features.map((category, categoryIndex) => (\n            <div key={categoryIndex}>\n              {/* Category Header */}\n              <div className=\"bg-gray-50 border-b border-gray-200\">\n                <div className=\"grid grid-cols-6 gap-2\">\n                  <div className=\"p-3\">\n                    <h4 className=\"font-bold text-gray-900 text-sm\">{category.category}</h4>\n                  </div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                </div>\n              </div>\n\n              {/* Feature Rows */}\n              {category.items.map((item, itemIndex) => (\n                <div\n                  key={itemIndex}\n                  className=\"border-b border-gray-100 hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"grid grid-cols-6 gap-2\">\n                    <div className=\"p-3\">\n                      <span className=\"text-gray-700 font-medium text-sm\">{item.feature}</span>\n                    </div>\n                    <div className=\"p-3 text-center\">\n                      {renderFeatureValue(item.reporunner, true)}\n                    </div>\n                    <div className=\"p-3 text-center\">{renderFeatureValue(item.zapier)}</div>\n                    <div className=\"p-3 text-center\">{renderFeatureValue(item.make)}</div>\n                    <div className=\"p-3 text-center\">{renderFeatureValue(item.n8n)}</div>\n                    <div className=\"p-3 text-center\">{renderFeatureValue(item.sim)}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-16\">\n          <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 border border-blue-200\">\n            <h4 className=\"font-bold text-gray-900 mb-3\">Why Choose Reporunner?</h4>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-blue-600\" />\n                Enterprise-grade + self-hosted\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-blue-600\" />\n                Native AI with vector search\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-blue-600\" />\n                Complete data sovereignty\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-blue-600\" />\n                Lower cost at scale\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"bg-orange-50 rounded-xl p-6 border border-orange-200\">\n            <h4 className=\"font-bold text-gray-900 mb-3\">vs. Zapier</h4>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>✅ Self-hosted deployment option</li>\n              <li>✅ Much lower costs at scale</li>\n              <li>✅ Complete data control</li>\n              <li>✅ Custom node development</li>\n              <li>✅ Advanced visual builder</li>\n            </ul>\n          </div>\n\n          <div className=\"bg-indigo-50 rounded-xl p-6 border border-indigo-200\">\n            <h4 className=\"font-bold text-gray-900 mb-3\">vs. Make.com</h4>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>✅ Enterprise security built-in</li>\n              <li>✅ Self-hosted option</li>\n              <li>✅ Better cost structure</li>\n              <li>✅ Custom integrations</li>\n              <li>✅ Advanced AI capabilities</li>\n            </ul>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n            <h4 className=\"font-bold text-gray-900 mb-3\">vs. n8n & SIM</h4>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li>✅ Better AI and modern stack</li>\n              <li>✅ Real-time collaboration</li>\n              <li>✅ Enterprise features included</li>\n              <li>✅ Hybrid database support</li>\n              <li>✅ Superior scalability</li>\n            </ul>\n          </div>\n        </div>\n\n        {/* CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">Experience the Reporunner Advantage</h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              See for yourself why enterprises are choosing Reporunner for their mission-critical\n              workflow automation needs.\n            </p>\n            <button className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n              Start Your Free Trial\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx",
        "start": 1,
        "end": 511,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 511,
          "column": 2,
          "position": 3699
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/comparisontable/ComparisonTable.tsx",
        "start": 1,
        "end": 511,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 511,
          "column": 2,
          "position": 3699
        }
      }
    },
    {
      "format": "javascript",
      "lines": 236,
      "fragment": "={getStatusColor(status)}>{status.toUpperCase()}</Tag>\n      ),\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 120,\n      render: (record: WorkflowExecution) => (\n        <div className=\"text-xs\">\n          {record.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length ||\n            0}{' '}\n          / {record.nodeExecutions?.length || 0} nodes\n        </div>\n      ),\n    },\n    {\n      title: 'Started',\n      dataIndex: 'startedAt',\n      key: 'startedAt',\n      width: 150,\n      render: (date: string) => new Date(date).toLocaleString(),\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (record: WorkflowExecution) => formatDuration(record.duration),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (record: WorkflowExecution) => (\n        <Space>\n          <Button size=\"small\" icon={<EyeOutlined />} onClick={() => showExecutionDetails(record)}>\n            Details\n          </Button>\n          {record.status === 'running' && (\n            <Button\n              size=\"small\"\n              danger\n              icon={<StopOutlined />}\n              onClick={() => handleStopExecution(record.id)}\n            >\n              Stop\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const content = (\n    <div className=\"execution-history\">\n      <div className=\"mb-4\">\n        <Row gutter={16} className=\"mb-4\">\n          <Col span={6}>\n            <Search\n              placeholder=\"Search executions...\"\n              onSearch={(value) => setFilter({ ...filter, workflowId: value || workflowId })}\n            />\n          </Col>\n          <Col span={6}>\n            <Select\n              placeholder=\"Filter by status\"\n              allowClear\n              style={{ width: '100%' }}\n              onChange={(value) => setFilter({ ...filter, status: value })}\n            >\n              <Option value=\"pending\">Pending</Option>\n              <Option value=\"running\">Running</Option>\n              <Option value=\"completed\">Completed</Option>\n              <Option value=\"failed\">Failed</Option>\n              <Option value=\"cancelled\">Cancelled</Option>\n            </Select>\n          </Col>\n          <Col span={8}>\n            <RangePicker\n              placeholder={['Start date', 'End date']}\n              onChange={(dates) => {\n                if (dates) {\n                  setFilter({\n                    ...filter,\n                    startDate: dates[0]?.toISOString(),\n                    endDate: dates[1]?.toISOString(),\n                  });\n                } else {\n                  setFilter({\n                    ...filter,\n                    startDate: undefined,\n                    endDate: undefined,\n                  });\n                }\n              }}\n            />\n          </Col>\n          <Col span={4}>\n            <Button icon={<ReloadOutlined />} onClick={loadExecutions} loading={loading}>\n              Refresh\n            </Button>\n          </Col>\n        </Row>\n      </div>\n\n      <Table\n        columns={columns}\n        dataSource={executions}\n        rowKey=\"id\"\n        loading={loading}\n        pagination={{\n          current: Math.floor((filter.offset || 0) / (filter.limit || 20)) + 1,\n          pageSize: filter.limit || 20,\n          total,\n          onChange: (page, pageSize) => {\n            setFilter({\n              ...filter,\n              offset: (page - 1) * (pageSize || 20),\n              limit: pageSize,\n            });\n          },\n        }}\n      />\n\n      <Modal\n        title=\"Execution Details\"\n        open={detailsVisible}\n        onCancel={() => setDetailsVisible(false)}\n        width={800}\n        footer={[\n          <Button key=\"close\" onClick={() => setDetailsVisible(false)}>\n            Close\n          </Button>,\n        ]}\n      >\n        {selectedExecution && (\n          <div>\n            <Row gutter={16} className=\"mb-4\">\n              <Col span={6}>\n                <Statistic\n                  title=\"Status\"\n                  value={selectedExecution.status.toUpperCase()}\n                  valueStyle={{\n                    color: getStatusColor(selectedExecution.status),\n                  }}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic title=\"Duration\" value={formatDuration(selectedExecution.duration)} />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Nodes Completed\"\n                  value={`${selectedExecution.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length || 0} / ${selectedExecution.nodeExecutions?.length || 0}`}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Success Rate\"\n                  value={(() => {\n                    const results = getExecutionResults(selectedExecution);\n                    const successCount = results.filter((r) => r.status === 'success').length;\n                    const total = results.length;\n                    return total > 0 ? Math.round((successCount / total) * 100) : 0;\n                  })()}\n                  suffix=\"%\"\n                />\n              </Col>\n            </Row>\n\n            <Card title=\"Node Execution Results\" className=\"mb-4\">\n              <Timeline>\n                {getExecutionResults(selectedExecution).map((result) => (\n                  <Timeline.Item\n                    key={result.nodeId}\n                    color={\n                      result.status === 'success'\n                        ? 'green'\n                        : result.status === 'error'\n                          ? 'red'\n                          : 'gray'\n                    }\n                  >\n                    <div>\n                      <strong>{result.nodeName}</strong>\n                      <Tag color={result.status === 'success' ? 'green' : 'red'} className=\"ml-2\">\n                        {result.status}\n                      </Tag>\n                      <div className=\"text-gray-500 text-xs\">\n                        {new Date(result.executedAt).toLocaleString()} •{' '}\n                        {formatDuration(result.duration)}\n                      </div>\n                      {result.error && (\n                        <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>\n                      )}\n                      {result.output && (\n                        <details className=\"mt-1\">\n                          <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                            View Output\n                          </summary>\n                          <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                            {JSON.stringify(result.output, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </Timeline.Item>\n                ))}\n              </Timeline>\n            </Card>\n\n            {selectedExecution.error && (\n              <Card title=\"Execution Error\" className=\"border-red-200\">\n                <div className=\"text-red-600\">\n                  <div className=\"font-semibold\">{selectedExecution.error}</div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n\n  // If onClose is provided, wrap in a modal\n  if (onClose) {\n    return (\n      <Modal\n        title=\"Execution History\"\n        open={true}\n        onCancel={onClose}\n        width={1200}\n        footer={[\n          <Button key=\"close\" onClick={onClose}>\n            Close\n          </Button>,\n        ]}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx",
        "start": 149,
        "end": 384,
        "startLoc": {
          "line": 149,
          "column": 6,
          "position": 1398
        },
        "endLoc": {
          "line": 384,
          "column": 2,
          "position": 3341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx",
        "start": 152,
        "end": 387,
        "startLoc": {
          "line": 152,
          "column": 6,
          "position": 1437
        },
        "endLoc": {
          "line": 387,
          "column": 2,
          "position": 3380
        }
      }
    },
    {
      "format": "tsx",
      "lines": 392,
      "fragment": "// Execution History Component - Display workflow execution results\n\nimport { EyeOutlined, ReloadOutlined, StopOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tag,\n  Timeline,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { WorkflowApiService } from '@/core';\nimport { logger } from '@/core/services/LoggingService';\n\nconst workflowApiService = new WorkflowApiService();\n\nimport type {\n  ExecutionFilter,\n  NodeExecution,\n  PaginationParams,\n  WorkflowExecution,\n} from '@/core/schemas';\n\nconst { RangePicker } = DatePicker;\nconst { Search } = Input;\nconst { Option } = Select;\n\nexport const ExecutionHistory: React.FC<{\n  workflowId?: string;\n  onClose?: () => void;\n}> = ({ workflowId, onClose }) => {\n  const [executions, setExecutions] = useState<WorkflowExecution[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedExecution, setSelectedExecution] = useState<WorkflowExecution | null>(null);\n  const [detailsVisible, setDetailsVisible] = useState(false);\n  const [filter, setFilter] = useState<ExecutionFilter & PaginationParams>({\n    workflowId,\n    limit: 20,\n    offset: 0,\n    sortOrder: 'desc',\n  });\n  const [total, setTotal] = useState(0);\n\n  const loadExecutions = useCallback(async () => {\n    setLoading(true);\n    try {\n      const result = await workflowApiService.getExecutions(filter);\n      setExecutions(result.items);\n      setTotal(result.total);\n    } catch (error) {\n      logger.error('Failed to load executions', error instanceof Error ? error : undefined);\n    } finally {\n      setLoading(false);\n    }\n  }, [filter]);\n\n  useEffect(() => {\n    loadExecutions();\n  }, [loadExecutions]);\n\n  const handleStopExecution = async (executionId: string) => {\n    try {\n      await workflowApiService.stopExecution(executionId);\n      await loadExecutions();\n    } catch (error) {\n      logger.error('Failed to stop execution', error instanceof Error ? error : undefined, {\n        executionId,\n      });\n    }\n  };\n\n  const showExecutionDetails = async (execution: WorkflowExecution) => {\n    setSelectedExecution(execution);\n    setDetailsVisible(true);\n  };\n\n  const getStatusColor = (status: WorkflowExecution['status']) => {\n    const colors: Record<string, string> = {\n      pending: 'orange',\n      running: 'blue',\n      completed: 'green',\n      failed: 'red',\n      cancelled: 'gray',\n      success: 'green',\n      error: 'red',\n    };\n    return colors[status] || 'default';\n  };\n\n  const formatDuration = (duration?: number) => {\n    if (!duration) return '-';\n    const seconds = Math.floor(duration / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  const getExecutionResults = (execution: WorkflowExecution) => {\n    // Handle both array and record results formats for backward compatibility\n    if (Array.isArray(execution.results)) {\n      return execution.results;\n    }\n    if (execution.results && typeof execution.results === 'object') {\n      return Object.entries(execution.results).map(([nodeId, data]: [string, any]) => ({\n        nodeId,\n        nodeName: data?.nodeName || nodeId,\n        status: data?.status || 'success',\n        output: data?.output,\n        error: data?.error,\n        executedAt: data?.executedAt || execution.startTime || new Date().toISOString(),\n        duration: data?.duration || 0,\n      }));\n    }\n    return [];\n  };\n\n  const columns = [\n    {\n      title: 'Execution ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 120,\n      render: (id: string) => <span className=\"font-mono text-xs\">{id.substring(0, 8)}...</span>,\n    },\n    {\n      title: 'Workflow',\n      dataIndex: 'workflowName',\n      key: 'workflowName',\n      width: 200,\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: WorkflowExecution['status']) => (\n        <Tag color={getStatusColor(status)}>{status.toUpperCase()}</Tag>\n      ),\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 120,\n      render: (record: WorkflowExecution) => (\n        <div className=\"text-xs\">\n          {record.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length ||\n            0}{' '}\n          / {record.nodeExecutions?.length || 0} nodes\n        </div>\n      ),\n    },\n    {\n      title: 'Started',\n      dataIndex: 'startedAt',\n      key: 'startedAt',\n      width: 150,\n      render: (date: string) => new Date(date).toLocaleString(),\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (record: WorkflowExecution) => formatDuration(record.duration),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (record: WorkflowExecution) => (\n        <Space>\n          <Button size=\"small\" icon={<EyeOutlined />} onClick={() => showExecutionDetails(record)}>\n            Details\n          </Button>\n          {record.status === 'running' && (\n            <Button\n              size=\"small\"\n              danger\n              icon={<StopOutlined />}\n              onClick={() => handleStopExecution(record.id)}\n            >\n              Stop\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const content = (\n    <div className=\"execution-history\">\n      <div className=\"mb-4\">\n        <Row gutter={16} className=\"mb-4\">\n          <Col span={6}>\n            <Search\n              placeholder=\"Search executions...\"\n              onSearch={(value) => setFilter({ ...filter, workflowId: value || workflowId })}\n            />\n          </Col>\n          <Col span={6}>\n            <Select\n              placeholder=\"Filter by status\"\n              allowClear\n              style={{ width: '100%' }}\n              onChange={(value) => setFilter({ ...filter, status: value })}\n            >\n              <Option value=\"pending\">Pending</Option>\n              <Option value=\"running\">Running</Option>\n              <Option value=\"completed\">Completed</Option>\n              <Option value=\"failed\">Failed</Option>\n              <Option value=\"cancelled\">Cancelled</Option>\n            </Select>\n          </Col>\n          <Col span={8}>\n            <RangePicker\n              placeholder={['Start date', 'End date']}\n              onChange={(dates) => {\n                if (dates) {\n                  setFilter({\n                    ...filter,\n                    startDate: dates[0]?.toISOString(),\n                    endDate: dates[1]?.toISOString(),\n                  });\n                } else {\n                  setFilter({\n                    ...filter,\n                    startDate: undefined,\n                    endDate: undefined,\n                  });\n                }\n              }}\n            />\n          </Col>\n          <Col span={4}>\n            <Button icon={<ReloadOutlined />} onClick={loadExecutions} loading={loading}>\n              Refresh\n            </Button>\n          </Col>\n        </Row>\n      </div>\n\n      <Table\n        columns={columns}\n        dataSource={executions}\n        rowKey=\"id\"\n        loading={loading}\n        pagination={{\n          current: Math.floor((filter.offset || 0) / (filter.limit || 20)) + 1,\n          pageSize: filter.limit || 20,\n          total,\n          onChange: (page, pageSize) => {\n            setFilter({\n              ...filter,\n              offset: (page - 1) * (pageSize || 20),\n              limit: pageSize,\n            });\n          },\n        }}\n      />\n\n      <Modal\n        title=\"Execution Details\"\n        open={detailsVisible}\n        onCancel={() => setDetailsVisible(false)}\n        width={800}\n        footer={[\n          <Button key=\"close\" onClick={() => setDetailsVisible(false)}>\n            Close\n          </Button>,\n        ]}\n      >\n        {selectedExecution && (\n          <div>\n            <Row gutter={16} className=\"mb-4\">\n              <Col span={6}>\n                <Statistic\n                  title=\"Status\"\n                  value={selectedExecution.status.toUpperCase()}\n                  valueStyle={{\n                    color: getStatusColor(selectedExecution.status),\n                  }}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic title=\"Duration\" value={formatDuration(selectedExecution.duration)} />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Nodes Completed\"\n                  value={`${selectedExecution.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length || 0} / ${selectedExecution.nodeExecutions?.length || 0}`}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Success Rate\"\n                  value={(() => {\n                    const results = getExecutionResults(selectedExecution);\n                    const successCount = results.filter((r) => r.status === 'success').length;\n                    const total = results.length;\n                    return total > 0 ? Math.round((successCount / total) * 100) : 0;\n                  })()}\n                  suffix=\"%\"\n                />\n              </Col>\n            </Row>\n\n            <Card title=\"Node Execution Results\" className=\"mb-4\">\n              <Timeline>\n                {getExecutionResults(selectedExecution).map((result) => (\n                  <Timeline.Item\n                    key={result.nodeId}\n                    color={\n                      result.status === 'success'\n                        ? 'green'\n                        : result.status === 'error'\n                          ? 'red'\n                          : 'gray'\n                    }\n                  >\n                    <div>\n                      <strong>{result.nodeName}</strong>\n                      <Tag color={result.status === 'success' ? 'green' : 'red'} className=\"ml-2\">\n                        {result.status}\n                      </Tag>\n                      <div className=\"text-gray-500 text-xs\">\n                        {new Date(result.executedAt).toLocaleString()} •{' '}\n                        {formatDuration(result.duration)}\n                      </div>\n                      {result.error && (\n                        <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>\n                      )}\n                      {result.output && (\n                        <details className=\"mt-1\">\n                          <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                            View Output\n                          </summary>\n                          <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                            {JSON.stringify(result.output, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </Timeline.Item>\n                ))}\n              </Timeline>\n            </Card>\n\n            {selectedExecution.error && (\n              <Card title=\"Execution Error\" className=\"border-red-200\">\n                <div className=\"text-red-600\">\n                  <div className=\"font-semibold\">{selectedExecution.error}</div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n\n  // If onClose is provided, wrap in a modal\n  if (onClose) {\n    return (\n      <Modal\n        title=\"Execution History\"\n        open={true}\n        onCancel={onClose}\n        width={1200}\n        footer={[\n          <Button key=\"close\" onClick={onClose}>\n            Close\n          </Button>,\n        ]}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx",
        "start": 1,
        "end": 392,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 3370
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx",
        "start": 4,
        "end": 395,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 395,
          "column": 2,
          "position": 3409
        }
      }
    },
    {
      "format": "javascript",
      "lines": 570,
      "fragment": "={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Total Organizations\"\n                  value={metrics?.organizations.total}\n                  prefix={<TeamOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.organizations.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Users\"\n                  value={metrics?.users.active}\n                  prefix={<UserOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.users.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Workflow Executions\"\n                  value={metrics?.workflows.executions}\n                  prefix={<ThunderboltOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px' }}>\n                      {metrics?.workflows.successRate}% success\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"System Uptime\"\n                  value={metrics?.performance.systemUptime}\n                  precision={2}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{ color: '#52c41a' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {/* Charts */}\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card\n                title=\"Execution Trends\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Line\n                  data={executionTrendData}\n                  xField=\"date\"\n                  yField=\"executions\"\n                  height={300}\n                  smooth\n                  point={{ size: 5, shape: 'circle' }}\n                />\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card\n                title=\"User Growth\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Column\n                  data={userGrowthData}\n                  xField=\"month\"\n                  yField=\"total\"\n                  height={300}\n                  columnStyle={{ fill: '#1890ff' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'performance',\n      label: (\n        <span>\n          <RiseOutlined />\n          Performance\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Avg Execution Time\"\n                  value={metrics?.performance.avgExecutionTime}\n                  precision={1}\n                  suffix=\"s\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Error Rate\"\n                  value={metrics?.performance.errorRate ?? 0}\n                  precision={1}\n                  suffix=\"%\"\n                  prefix={<BugOutlined />}\n                  valueStyle={{\n                    color: (metrics?.performance.errorRate ?? 0) > 2 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Throughput\"\n                  value={metrics?.performance.throughput}\n                  suffix=\"/hour\"\n                  prefix={<ApiOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Monthly Spend\"\n                  value={metrics?.costs.monthlySpend}\n                  prefix=\"$\"\n                  suffix={\n                    <span\n                      style={{\n                        fontSize: '14px',\n                        color: (metrics?.costs.growth ?? 0) < 0 ? '#52c41a' : '#cf1322',\n                      }}\n                    >\n                      {(metrics?.costs.growth ?? 0) < 0 ? <FallOutlined /> : <RiseOutlined />}{' '}\n                      {Math.abs(metrics?.costs.growth ?? 0)}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]}>\n            <Col span={16}>\n              <Card\n                title=\"System Performance (24h)\"\n                extra={\n                  <Button icon={<ReloadOutlined />} size=\"small\">\n                    Refresh\n                  </Button>\n                }\n              >\n                <Area\n                  data={performanceData}\n                  xField=\"time\"\n                  yField=\"cpu\"\n                  height={300}\n                  // @ts-expect-error Area config shape may differ by version\n                  areaStyle={{ fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' }}\n                />\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Workflow Categories\">\n                <Pie\n                  data={workflowCategoriesData}\n                  angleField=\"value\"\n                  colorField=\"type\"\n                  height={300}\n                  radius={0.8}\n                  label={{\n                    type: 'spider',\n                    content: '{name}\\n{percentage}',\n                  }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n          {metrics?.security && metrics.security.alerts > 0 && (\n            <Badge count={metrics.security.alerts} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Threats\"\n                  value={metrics?.security.threats ?? 0}\n                  prefix={<WarningOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.threats ?? 0) > 0 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Security Alerts\"\n                  value={metrics?.security.alerts ?? 0}\n                  prefix={<SecurityScanOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.alerts ?? 0) > 5 ? '#fa8c16' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Compliance Score\"\n                  value={metrics?.security.complianceScore ?? 0}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security?.complianceScore ?? 0) >= 90 ? '#52c41a' : '#fa8c16',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Last Incident\"\n                  value={\n                    metrics?.security.lastIncident\n                      ? Math.floor(\n                          (Date.now() - metrics.security.lastIncident.getTime()) /\n                            (24 * 60 * 60 * 1000)\n                        )\n                      : 0\n                  }\n                  suffix=\" days ago\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {(metrics?.security.alerts ?? 0) > 0 && (\n            <Alert\n              message=\"Security Alerts Require Attention\"\n              description={`There are ${metrics?.security.alerts ?? 0} active security alerts that need investigation.`}\n              type=\"warning\"\n              showIcon\n              style={{ marginBottom: 24 }}\n              action={\n                <Button size=\"small\" type=\"primary\">\n                  View All Alerts\n                </Button>\n              }\n            />\n          )}\n\n          <Card title=\"Security Overview\">\n            <Row gutter={16}>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Threat Detection</Text>\n                  <Progress percent={85} status=\"active\" strokeColor=\"#52c41a\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Access Control</Text>\n                  <Progress percent={92} status=\"active\" strokeColor=\"#1890ff\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Data Encryption</Text>\n                  <Progress percent={98} status=\"active\" strokeColor=\"#722ed1\" />\n                </div>\n              </Col>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Audit Coverage</Text>\n                  <Progress percent={94} status=\"active\" strokeColor=\"#fa8c16\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Vulnerability Management</Text>\n                  <Progress percent={88} status=\"active\" strokeColor=\"#13c2c2\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Incident Response</Text>\n                  <Progress percent={90} status=\"active\" strokeColor=\"#eb2f96\" />\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'organizations',\n      label: (\n        <span>\n          <TeamOutlined />\n          Organizations\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Top Organizations\"\n            extra={\n              <Space>\n                <Button icon={<ExportOutlined />} size=\"small\">\n                  Export\n                </Button>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Table\n              dataSource={topOrganizationsData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'Organization',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string) => (\n                    <div>\n                      <Avatar size=\"small\" style={{ backgroundColor: '#1890ff', marginRight: 8 }}>\n                        {name.charAt(0)}\n                      </Avatar>\n                      <Text strong>{name}</Text>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Users',\n                  dataIndex: 'users',\n                  key: 'users',\n                  render: (users: number) => <Statistic value={users} />,\n                },\n                {\n                  title: 'Workflows',\n                  dataIndex: 'workflows',\n                  key: 'workflows',\n                  render: (workflows: number) => <Statistic value={workflows} />,\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Growth',\n                  dataIndex: 'growth',\n                  key: 'growth',\n                  render: (growth: number) => (\n                    <span style={{ color: growth >= 0 ? '#52c41a' : '#cf1322' }}>\n                      {growth >= 0 ? <RiseOutlined /> : <FallOutlined />} {Math.abs(growth)}%\n                    </span>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n\n          <Card title=\"Top Users\" style={{ marginTop: 16 }}>\n            <Table\n              dataSource={topUsersData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'User',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string, record: any) => (\n                    <div>\n                      <Avatar size=\"small\" icon={<UserOutlined />} style={{ marginRight: 8 }} />\n                      <div>\n                        <Text strong>{name}</Text>\n                        <br />\n                        <Text type=\"secondary\">{record.organization}</Text>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Success Rate',\n                  dataIndex: 'successRate',\n                  key: 'successRate',\n                  render: (rate: number) => (\n                    <Progress\n                      percent={rate}\n                      size=\"small\"\n                      status={rate >= 95 ? 'success' : rate >= 90 ? 'normal' : 'exception'}\n                    />\n                  ),\n                },\n              ]}\n            />\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'activity',\n      label: (\n        <span>\n          <ClockCircleOutlined />\n          Activity\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Recent Activity\"\n            extra={\n              <Space>\n                <Select defaultValue=\"all\" style={{ width: 120 }}>\n                  <Option value=\"all\">All Events</Option>\n                  <Option value=\"security\">Security</Option>\n                  <Option value=\"workflow\">Workflows</Option>\n                  <Option value=\"user\">Users</Option>\n                </Select>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Timeline>\n              {activities.map((activity) => (\n                <Timeline.Item\n                  key={activity.id}\n                  dot={\n                    <Avatar\n                      size=\"small\"\n                      style={{\n                        backgroundColor: getSeverityColor(activity.severity),\n                      }}\n                      icon={getActivityIcon(activity.type)}\n                    />\n                  }\n                >\n                  <div>\n                    <div\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Text strong>{activity.title}</Text>\n                      <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                        {activity.timestamp.toLocaleTimeString()}\n                      </Text>\n                    </div>\n                    <div style={{ marginTop: 4 }}>\n                      <Text>{activity.description}</Text>\n                    </div>\n                    {(activity.user || activity.organization) && (\n                      <div style={{ marginTop: 8 }}>\n                        {activity.user && (\n                          <Tag icon={<UserOutlined />} color=\"blue\">\n                            {activity.user}\n                          </Tag>\n                        )}\n                        {activity.organization && (\n                          <Tag icon={<TeamOutlined />} color=\"green\">\n                            {activity.organization}\n                          </Tag>\n                        )}\n                        <Tag color={getSeverityColor(activity.severity)}>{activity.severity}</Tag>\n                      </div>\n                    )}\n                  </div>\n                </Timeline.Item>\n              ))}\n            </Timeline>\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  if (!metrics) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <div>\n            <Title level={2}>\n              <DashboardOutlined /> Enterprise Dashboard\n            </Title>\n            <Text type=\"secondary\">\n              Comprehensive overview of your organization's automation platform\n            </Text>\n          </div>\n          <Space>\n            <RangePicker value={dateRange} onChange={setDateRange} style={{ width: 300 }} />\n            {canManageOrganization() && (\n              <Select\n                value={selectedOrganization}\n                onChange={setSelectedOrganization}\n                style={{ width: 200 }}\n              >\n                <Option value=\"all\">All Organizations</Option>\n                {organizations.map((org) => (\n                  <Option key={org.id} value={org.id}>\n                    {org.name}\n                  </Option>\n                ))}\n              </Select>\n            )}\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardData} loading={loading}>\n              Refresh\n            </Button>\n          </Space>\n        </div>\n      </div>\n\n      <Tabs items={tabs}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 349,
        "end": 918,
        "startLoc": {
          "line": 349,
          "column": 7,
          "position": 2695
        },
        "endLoc": {
          "line": 918,
          "column": 2,
          "position": 7040
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 352,
        "end": 921,
        "startLoc": {
          "line": 352,
          "column": 7,
          "position": 2734
        },
        "endLoc": {
          "line": 921,
          "column": 2,
          "position": 7079
        }
      }
    },
    {
      "format": "tsx",
      "lines": 42,
      "fragment": "import {\n  ApiOutlined,\n  BugOutlined,\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  DashboardOutlined,\n  DatabaseOutlined,\n  ExportOutlined,\n  FallOutlined,\n  ReloadOutlined,\n  RiseOutlined,\n  SecurityScanOutlined,\n  TeamOutlined,\n  ThunderboltOutlined,\n  UserOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { Area, Column, Line, Pie } from '@ant-design/plots';\nimport {\n  Alert,\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Progress,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useRBACStore } from '@/core/stores/rbacStore';\n\n// import { auditService } from \"@/core/services/auditService\";",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 1,
        "end": 42,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 42,
          "column": 64,
          "position": 213
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 1,
        "end": 41,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 41,
          "column": 7,
          "position": 212
        }
      }
    },
    {
      "format": "tsx",
      "lines": 882,
      "fragment": ";\n\n// import { auditService } from \"@/core/services/auditService\";\n// import { securityService } from \"@/core/services/securityService\";\n\nconst { Title, Text } = Typography;\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\ninterface DashboardMetrics {\n  organizations: {\n    total: number;\n    active: number;\n    growth: number;\n  };\n  users: {\n    total: number;\n    active: number;\n    newThisMonth: number;\n    growth: number;\n  };\n  workflows: {\n    total: number;\n    active: number;\n    executions: number;\n    successRate: number;\n  };\n  security: {\n    threats: number;\n    alerts: number;\n    complianceScore: number;\n    lastIncident?: Date;\n  };\n  performance: {\n    avgExecutionTime: number;\n    systemUptime: number;\n    errorRate: number;\n    throughput: number;\n  };\n  costs: {\n    monthlySpend: number;\n    growth: number;\n    costPerExecution: number;\n  };\n}\n\ninterface ActivityEvent {\n  id: string;\n  type: 'user_login' | 'workflow_execution' | 'security_alert' | 'system_event';\n  title: string;\n  description: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  user?: string;\n  organization?: string;\n}\n\nexport const EnterpriseDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [activities, setActivities] = useState<ActivityEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\n  const [selectedOrganization, setSelectedOrganization] = useState<string>('all');\n\n  const { organizations, canManageOrganization } = useRBACStore();\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [loadDashboardData]);\n\n  const loadDashboardData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls - in real app these would be actual API endpoints\n      const mockMetrics: DashboardMetrics = {\n        organizations: {\n          total: 25,\n          active: 22,\n          growth: 8.5,\n        },\n        users: {\n          total: 1247,\n          active: 892,\n          newThisMonth: 156,\n          growth: 12.3,\n        },\n        workflows: {\n          total: 5432,\n          active: 3891,\n          executions: 125678,\n          successRate: 94.7,\n        },\n        security: {\n          threats: 3,\n          alerts: 12,\n          complianceScore: 92,\n          lastIncident: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        },\n        performance: {\n          avgExecutionTime: 2.3,\n          systemUptime: 99.97,\n          errorRate: 0.8,\n          throughput: 1250,\n        },\n        costs: {\n          monthlySpend: 45678,\n          growth: -5.2,\n          costPerExecution: 0.036,\n        },\n      };\n\n      const mockActivities: ActivityEvent[] = [\n        {\n          id: '1',\n          type: 'security_alert',\n          title: 'Multiple Failed Login Attempts',\n          description: 'User john.doe@acme.com has 5 failed login attempts',\n          timestamp: new Date(Date.now() - 30 * 60 * 1000),\n          severity: 'high',\n          user: 'john.doe@acme.com',\n          organization: 'Acme Corp',\n        },\n        {\n          id: '2',\n          type: 'workflow_execution',\n          title: 'High Volume Data Pipeline Completed',\n          description: 'Successfully processed 50,000 records in 4.2 minutes',\n          timestamp: new Date(Date.now() - 45 * 60 * 1000),\n          severity: 'low',\n          user: 'sarah.chen@techcorp.com',\n          organization: 'TechCorp',\n        },\n        {\n          id: '3',\n          type: 'user_login',\n          title: 'Admin Login from New Location',\n          description: 'Administrator logged in from Tokyo, Japan',\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n          severity: 'medium',\n          user: 'admin@enterprise.com',\n          organization: 'Enterprise Ltd',\n        },\n        {\n          id: '4',\n          type: 'system_event',\n          title: 'System Maintenance Completed',\n          description: 'Scheduled maintenance window completed successfully',\n          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\n          severity: 'low',\n        },\n      ];\n\n      setMetrics(mockMetrics);\n      setActivities(mockActivities);\n    } catch (_error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getActivityIcon = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'security_alert':\n        return <SecurityScanOutlined />;\n      case 'workflow_execution':\n        return <ThunderboltOutlined />;\n      case 'user_login':\n        return <UserOutlined />;\n      case 'system_event':\n        return <DatabaseOutlined />;\n      default:\n        return <ClockCircleOutlined />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return '#ff4d4f';\n      case 'high':\n        return '#fa8c16';\n      case 'medium':\n        return '#fadb14';\n      case 'low':\n        return '#52c41a';\n      default:\n        return '#d9d9d9';\n    }\n  };\n\n  // Chart data\n  const executionTrendData = [\n    { date: '2024-01', executions: 8500 },\n    { date: '2024-02', executions: 9200 },\n    { date: '2024-03', executions: 8800 },\n    { date: '2024-04', executions: 10500 },\n    { date: '2024-05', executions: 11200 },\n    { date: '2024-06', executions: 12800 },\n  ];\n\n  const userGrowthData = [\n    { month: 'Jan', active: 750, total: 1100 },\n    { month: 'Feb', active: 820, total: 1150 },\n    { month: 'Mar', active: 780, total: 1180 },\n    { month: 'Apr', active: 890, total: 1220 },\n    { month: 'May', active: 850, total: 1250 },\n    { month: 'Jun', active: 892, total: 1247 },\n  ];\n\n  const workflowCategoriesData = [\n    { type: 'Data Processing', value: 35 },\n    { type: 'Email Automation', value: 25 },\n    { type: 'AI/ML Workflows', value: 20 },\n    { type: 'Integration', value: 12 },\n    { type: 'Other', value: 8 },\n  ];\n\n  const performanceData = [\n    { time: '00:00', cpu: 45, memory: 62, throughput: 1200 },\n    { time: '04:00', cpu: 32, memory: 58, throughput: 800 },\n    { time: '08:00', cpu: 78, memory: 75, throughput: 2100 },\n    { time: '12:00', cpu: 85, memory: 82, throughput: 2500 },\n    { time: '16:00', cpu: 92, memory: 88, throughput: 2800 },\n    { time: '20:00', cpu: 67, memory: 71, throughput: 1900 },\n  ];\n\n  const topUsersData = [\n    {\n      name: 'Sarah Chen',\n      organization: 'TechCorp',\n      executions: 1250,\n      successRate: 98.5,\n    },\n    {\n      name: 'Mike Johnson',\n      organization: 'DataFlow Inc',\n      executions: 980,\n      successRate: 96.2,\n    },\n    {\n      name: 'Lisa Wang',\n      organization: 'AutoSys',\n      executions: 875,\n      successRate: 99.1,\n    },\n    {\n      name: 'John Smith',\n      organization: 'ProcessPro',\n      executions: 820,\n      successRate: 94.8,\n    },\n    {\n      name: 'Emma Davis',\n      organization: 'FlowTech',\n      executions: 765,\n      successRate: 97.3,\n    },\n  ];\n\n  const topOrganizationsData = [\n    {\n      name: 'TechCorp',\n      users: 89,\n      workflows: 342,\n      executions: 15680,\n      growth: 15.2,\n    },\n    {\n      name: 'DataFlow Inc',\n      users: 67,\n      workflows: 298,\n      executions: 12450,\n      growth: 8.7,\n    },\n    {\n      name: 'AutoSys',\n      users: 54,\n      workflows: 234,\n      executions: 9870,\n      growth: 22.1,\n    },\n    {\n      name: 'ProcessPro',\n      users: 43,\n      workflows: 187,\n      executions: 7890,\n      growth: -2.4,\n    },\n    {\n      name: 'FlowTech',\n      users: 38,\n      workflows: 156,\n      executions: 6540,\n      growth: 11.8,\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'overview',\n      label: (\n        <span>\n          <DashboardOutlined />\n          Overview\n        </span>\n      ),\n      children: (\n        <div>\n          {/* Key Metrics */}\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Total Organizations\"\n                  value={metrics?.organizations.total}\n                  prefix={<TeamOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.organizations.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Users\"\n                  value={metrics?.users.active}\n                  prefix={<UserOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.users.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Workflow Executions\"\n                  value={metrics?.workflows.executions}\n                  prefix={<ThunderboltOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px' }}>\n                      {metrics?.workflows.successRate}% success\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"System Uptime\"\n                  value={metrics?.performance.systemUptime}\n                  precision={2}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{ color: '#52c41a' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {/* Charts */}\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card\n                title=\"Execution Trends\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Line\n                  data={executionTrendData}\n                  xField=\"date\"\n                  yField=\"executions\"\n                  height={300}\n                  smooth\n                  point={{ size: 5, shape: 'circle' }}\n                />\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card\n                title=\"User Growth\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Column\n                  data={userGrowthData}\n                  xField=\"month\"\n                  yField=\"total\"\n                  height={300}\n                  columnStyle={{ fill: '#1890ff' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'performance',\n      label: (\n        <span>\n          <RiseOutlined />\n          Performance\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Avg Execution Time\"\n                  value={metrics?.performance.avgExecutionTime}\n                  precision={1}\n                  suffix=\"s\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Error Rate\"\n                  value={metrics?.performance.errorRate ?? 0}\n                  precision={1}\n                  suffix=\"%\"\n                  prefix={<BugOutlined />}\n                  valueStyle={{\n                    color: (metrics?.performance.errorRate ?? 0) > 2 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Throughput\"\n                  value={metrics?.performance.throughput}\n                  suffix=\"/hour\"\n                  prefix={<ApiOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Monthly Spend\"\n                  value={metrics?.costs.monthlySpend}\n                  prefix=\"$\"\n                  suffix={\n                    <span\n                      style={{\n                        fontSize: '14px',\n                        color: (metrics?.costs.growth ?? 0) < 0 ? '#52c41a' : '#cf1322',\n                      }}\n                    >\n                      {(metrics?.costs.growth ?? 0) < 0 ? <FallOutlined /> : <RiseOutlined />}{' '}\n                      {Math.abs(metrics?.costs.growth ?? 0)}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]}>\n            <Col span={16}>\n              <Card\n                title=\"System Performance (24h)\"\n                extra={\n                  <Button icon={<ReloadOutlined />} size=\"small\">\n                    Refresh\n                  </Button>\n                }\n              >\n                <Area\n                  data={performanceData}\n                  xField=\"time\"\n                  yField=\"cpu\"\n                  height={300}\n                  // @ts-expect-error Area config shape may differ by version\n                  areaStyle={{ fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' }}\n                />\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Workflow Categories\">\n                <Pie\n                  data={workflowCategoriesData}\n                  angleField=\"value\"\n                  colorField=\"type\"\n                  height={300}\n                  radius={0.8}\n                  label={{\n                    type: 'spider',\n                    content: '{name}\\n{percentage}',\n                  }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n          {metrics?.security && metrics.security.alerts > 0 && (\n            <Badge count={metrics.security.alerts} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Threats\"\n                  value={metrics?.security.threats ?? 0}\n                  prefix={<WarningOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.threats ?? 0) > 0 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Security Alerts\"\n                  value={metrics?.security.alerts ?? 0}\n                  prefix={<SecurityScanOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.alerts ?? 0) > 5 ? '#fa8c16' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Compliance Score\"\n                  value={metrics?.security.complianceScore ?? 0}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security?.complianceScore ?? 0) >= 90 ? '#52c41a' : '#fa8c16',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Last Incident\"\n                  value={\n                    metrics?.security.lastIncident\n                      ? Math.floor(\n                          (Date.now() - metrics.security.lastIncident.getTime()) /\n                            (24 * 60 * 60 * 1000)\n                        )\n                      : 0\n                  }\n                  suffix=\" days ago\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {(metrics?.security.alerts ?? 0) > 0 && (\n            <Alert\n              message=\"Security Alerts Require Attention\"\n              description={`There are ${metrics?.security.alerts ?? 0} active security alerts that need investigation.`}\n              type=\"warning\"\n              showIcon\n              style={{ marginBottom: 24 }}\n              action={\n                <Button size=\"small\" type=\"primary\">\n                  View All Alerts\n                </Button>\n              }\n            />\n          )}\n\n          <Card title=\"Security Overview\">\n            <Row gutter={16}>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Threat Detection</Text>\n                  <Progress percent={85} status=\"active\" strokeColor=\"#52c41a\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Access Control</Text>\n                  <Progress percent={92} status=\"active\" strokeColor=\"#1890ff\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Data Encryption</Text>\n                  <Progress percent={98} status=\"active\" strokeColor=\"#722ed1\" />\n                </div>\n              </Col>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Audit Coverage</Text>\n                  <Progress percent={94} status=\"active\" strokeColor=\"#fa8c16\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Vulnerability Management</Text>\n                  <Progress percent={88} status=\"active\" strokeColor=\"#13c2c2\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Incident Response</Text>\n                  <Progress percent={90} status=\"active\" strokeColor=\"#eb2f96\" />\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'organizations',\n      label: (\n        <span>\n          <TeamOutlined />\n          Organizations\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Top Organizations\"\n            extra={\n              <Space>\n                <Button icon={<ExportOutlined />} size=\"small\">\n                  Export\n                </Button>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Table\n              dataSource={topOrganizationsData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'Organization',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string) => (\n                    <div>\n                      <Avatar size=\"small\" style={{ backgroundColor: '#1890ff', marginRight: 8 }}>\n                        {name.charAt(0)}\n                      </Avatar>\n                      <Text strong>{name}</Text>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Users',\n                  dataIndex: 'users',\n                  key: 'users',\n                  render: (users: number) => <Statistic value={users} />,\n                },\n                {\n                  title: 'Workflows',\n                  dataIndex: 'workflows',\n                  key: 'workflows',\n                  render: (workflows: number) => <Statistic value={workflows} />,\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Growth',\n                  dataIndex: 'growth',\n                  key: 'growth',\n                  render: (growth: number) => (\n                    <span style={{ color: growth >= 0 ? '#52c41a' : '#cf1322' }}>\n                      {growth >= 0 ? <RiseOutlined /> : <FallOutlined />} {Math.abs(growth)}%\n                    </span>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n\n          <Card title=\"Top Users\" style={{ marginTop: 16 }}>\n            <Table\n              dataSource={topUsersData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'User',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string, record: any) => (\n                    <div>\n                      <Avatar size=\"small\" icon={<UserOutlined />} style={{ marginRight: 8 }} />\n                      <div>\n                        <Text strong>{name}</Text>\n                        <br />\n                        <Text type=\"secondary\">{record.organization}</Text>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Success Rate',\n                  dataIndex: 'successRate',\n                  key: 'successRate',\n                  render: (rate: number) => (\n                    <Progress\n                      percent={rate}\n                      size=\"small\"\n                      status={rate >= 95 ? 'success' : rate >= 90 ? 'normal' : 'exception'}\n                    />\n                  ),\n                },\n              ]}\n            />\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'activity',\n      label: (\n        <span>\n          <ClockCircleOutlined />\n          Activity\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Recent Activity\"\n            extra={\n              <Space>\n                <Select defaultValue=\"all\" style={{ width: 120 }}>\n                  <Option value=\"all\">All Events</Option>\n                  <Option value=\"security\">Security</Option>\n                  <Option value=\"workflow\">Workflows</Option>\n                  <Option value=\"user\">Users</Option>\n                </Select>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Timeline>\n              {activities.map((activity) => (\n                <Timeline.Item\n                  key={activity.id}\n                  dot={\n                    <Avatar\n                      size=\"small\"\n                      style={{\n                        backgroundColor: getSeverityColor(activity.severity),\n                      }}\n                      icon={getActivityIcon(activity.type)}\n                    />\n                  }\n                >\n                  <div>\n                    <div\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Text strong>{activity.title}</Text>\n                      <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                        {activity.timestamp.toLocaleTimeString()}\n                      </Text>\n                    </div>\n                    <div style={{ marginTop: 4 }}>\n                      <Text>{activity.description}</Text>\n                    </div>\n                    {(activity.user || activity.organization) && (\n                      <div style={{ marginTop: 8 }}>\n                        {activity.user && (\n                          <Tag icon={<UserOutlined />} color=\"blue\">\n                            {activity.user}\n                          </Tag>\n                        )}\n                        {activity.organization && (\n                          <Tag icon={<TeamOutlined />} color=\"green\">\n                            {activity.organization}\n                          </Tag>\n                        )}\n                        <Tag color={getSeverityColor(activity.severity)}>{activity.severity}</Tag>\n                      </div>\n                    )}\n                  </div>\n                </Timeline.Item>\n              ))}\n            </Timeline>\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  if (!metrics) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <div>\n            <Title level={2}>\n              <DashboardOutlined /> Enterprise Dashboard\n            </Title>\n            <Text type=\"secondary\">\n              Comprehensive overview of your organization's automation platform\n            </Text>\n          </div>\n          <Space>\n            <RangePicker value={dateRange} onChange={setDateRange} style={{ width: 300 }} />\n            {canManageOrganization() && (\n              <Select\n                value={selectedOrganization}\n                onChange={setSelectedOrganization}\n                style={{ width: 200 }}\n              >\n                <Option value=\"all\">All Organizations</Option>\n                {organizations.map((org) => (\n                  <Option key={org.id} value={org.id}>\n                    {org.name}\n                  </Option>\n                ))}\n              </Select>\n            )}\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardData} loading={loading}>\n              Refresh\n            </Button>\n          </Space>\n        </div>\n      </div>\n\n      <Tabs items={tabs} />\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 40,
        "end": 921,
        "startLoc": {
          "line": 40,
          "column": 26,
          "position": 210
        },
        "endLoc": {
          "line": 921,
          "column": 2,
          "position": 7054
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 43,
        "end": 924,
        "startLoc": {
          "line": 43,
          "column": 19,
          "position": 249
        },
        "endLoc": {
          "line": 924,
          "column": 2,
          "position": 7093
        }
      }
    },
    {
      "format": "javascript",
      "lines": 376,
      "fragment": "={{ fontSize: '12px' }}>\n            {record.ipAddress}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 120,\n      render: (action: string) => <Tag color=\"blue\">{action}</Tag>,\n    },\n    {\n      title: 'Resource',\n      dataIndex: 'resource',\n      key: 'resource',\n      width: 120,\n      render: (resource: string, record: AuditEvent) => (\n        <div>\n          <Tag color=\"purple\">{resource}</Tag>\n          {record.resourceId && (\n            <div>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                ID: {record.resourceId}\n              </Text>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: 'Result',\n      dataIndex: 'result',\n      key: 'result',\n      width: 100,\n      render: (result: string) => <Tag color={getResultColor(result)}>{result}</Tag>,\n    },\n    {\n      title: 'Severity',\n      dataIndex: 'severity',\n      key: 'severity',\n      width: 100,\n      render: (severity: string) => <Tag color={getSeverityColor(severity)}>{severity}</Tag>,\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 120,\n      render: (category: string) => <Tag>{category}</Tag>,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 100,\n      render: (_: unknown, record: AuditEvent) => (\n        <Button type=\"link\" icon={<EyeOutlined />} onClick={() => setSelectedEvent(record)}>\n          View\n        </Button>\n      ),\n    },\n  ];\n\n  const uniqueUsers = Array.from(new Set(events.map((e) => e.userName)));\n  const uniqueActions = Array.from(new Set(events.map((e) => e.action)));\n  const uniqueResources = Array.from(new Set(events.map((e) => e.resource)));\n\n  const securityMetrics = {\n    totalEvents: filteredEvents.length,\n    securityEvents: filteredEvents.filter(\n      (e) =>\n        e.category === 'authentication' ||\n        e.category === 'authorization' ||\n        e.severity === 'high' ||\n        e.severity === 'critical'\n    ).length,\n    failedLogins: filteredEvents.filter((e) => e.action === 'login' && e.result === 'failure')\n      .length,\n    criticalEvents: filteredEvents.filter((e) => e.severity === 'critical').length,\n  };\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <AuditOutlined /> Audit & Security Dashboard\n        </Title>\n        <Text type=\"secondary\">Monitor security events, audit trails, and compliance status</Text>\n      </div>\n\n      {/* Security Metrics */}\n      <Row gutter={16} style={{ marginBottom: 24 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Events\"\n              value={securityMetrics.totalEvents}\n              prefix={<AuditOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Security Events\"\n              value={securityMetrics.securityEvents}\n              prefix={<SecurityScanOutlined />}\n              valueStyle={{ color: '#faad14' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Failed Logins\"\n              value={securityMetrics.failedLogins}\n              prefix={<WarningOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Critical Events\"\n              value={securityMetrics.criticalEvents}\n              prefix={<AlertOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Security Alerts */}\n      {securityAlerts.length > 0 && (\n        <Card\n          title={\n            <span>\n              <AlertOutlined /> Active Security Alerts\n            </span>\n          }\n          style={{ marginBottom: 24 }}\n        >\n          {securityAlerts.map((alert) => (\n            <Alert\n              key={alert.id}\n              message={alert.title}\n              description={alert.description}\n              type={\n                alert.severity === 'critical'\n                  ? 'error'\n                  : alert.severity === 'high'\n                    ? 'warning'\n                    : 'info'\n              }\n              showIcon\n              style={{ marginBottom: 8 }}\n              action={\n                <Button size=\"small\" type=\"link\">\n                  Investigate\n                </Button>\n              }\n            />\n          ))}\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card\n        title={\n          <span>\n            <FilterOutlined /> Filters & Search\n          </span>\n        }\n        style={{ marginBottom: 24 }}\n        extra={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadAuditData} loading={loading}>\n              Refresh\n            </Button>\n            <Button icon={<ExportOutlined />} onClick={() => setExportModalVisible(true)}>\n              Export\n            </Button>\n            <Button icon={<CheckCircleOutlined />} onClick={generateComplianceReport}>\n              Generate Report\n            </Button>\n          </Space>\n        }\n      >\n        <Space wrap style={{ marginBottom: 16 }}>\n          <RangePicker\n            value={dateRange}\n            onChange={setDateRange}\n            showTime\n            format=\"YYYY-MM-DD HH:mm\"\n            placeholder={['Start Date', 'End Date']}\n          />\n\n          <Select\n            placeholder=\"Select User\"\n            value={selectedUser}\n            onChange={setSelectedUser}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueUsers.map((user) => (\n              <Option key={user} value={user}>\n                {user}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Action\"\n            value={selectedAction}\n            onChange={setSelectedAction}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueActions.map((action) => (\n              <Option key={action} value={action}>\n                {action}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Resource\"\n            value={selectedResource}\n            onChange={setSelectedResource}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueResources.map((resource) => (\n              <Option key={resource} value={resource}>\n                {resource}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Severity\"\n            value={selectedSeverity}\n            onChange={setSelectedSeverity}\n            allowClear\n            style={{ width: 120 }}\n          >\n            <Option value=\"low\">Low</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"high\">High</Option>\n            <Option value=\"critical\">Critical</Option>\n          </Select>\n\n          <Select\n            placeholder=\"Category\"\n            value={selectedCategory}\n            onChange={setSelectedCategory}\n            allowClear\n            style={{ width: 150 }}\n          >\n            <Option value=\"authentication\">Authentication</Option>\n            <Option value=\"authorization\">Authorization</Option>\n            <Option value=\"workflow\">Workflow</Option>\n            <Option value=\"credential\">Credential</Option>\n            <Option value=\"organization\">Organization</Option>\n            <Option value=\"user_management\">User Management</Option>\n          </Select>\n\n          <Button onClick={clearFilters}>Clear Filters</Button>\n        </Space>\n\n        <Search\n          placeholder=\"Search events...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ width: 300 }}\n        />\n      </Card>\n\n      {/* Audit Events Table */}\n      <Card\n        title={\n          <span>\n            <AuditOutlined /> Audit Events ({filteredEvents.length})\n          </span>\n        }\n      >\n        <Table\n          dataSource={filteredEvents}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 50,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} events`,\n          }}\n          scroll={{ x: 1200 }}\n        />\n      </Card>\n\n      {/* Event Details Modal */}\n      <Modal\n        title=\"Event Details\"\n        open={!!selectedEvent}\n        onCancel={() => setSelectedEvent(null)}\n        footer={null}\n        width={800}\n      >\n        {selectedEvent && (\n          <Descriptions column={2} bordered>\n            <Descriptions.Item label=\"Timestamp\">\n              {selectedEvent.timestamp.toLocaleString()}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User\">\n              {selectedEvent.userName} ({selectedEvent.userId})\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Action\">\n              <Tag color=\"blue\">{selectedEvent.action}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Resource\">\n              <Tag color=\"purple\">{selectedEvent.resource}</Tag>\n              {selectedEvent.resourceId && ` (${selectedEvent.resourceId})`}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Result\">\n              <Tag color={getResultColor(selectedEvent.result)}>{selectedEvent.result}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Severity\">\n              <Tag color={getSeverityColor(selectedEvent.severity)}>{selectedEvent.severity}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Category\">\n              <Tag>{selectedEvent.category}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"IP Address\">\n              <GlobalOutlined /> {selectedEvent.ipAddress}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Organization\" span={2}>\n              {selectedEvent.organizationId || 'N/A'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Details\" span={2}>\n              <pre\n                style={{\n                  fontSize: '12px',\n                  background: '#f5f5f5',\n                  padding: '8px',\n                  borderRadius: '4px',\n                }}\n              >\n                {JSON.stringify(selectedEvent.details, null, 2)}\n              </pre>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User Agent\" span={2}>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                {selectedEvent.userAgent}\n              </Text>\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Export Modal */}\n      <Modal\n        title=\"Export Audit Data\"\n        open={exportModalVisible}\n        onCancel={() => setExportModalVisible(false)}\n        footer={null}\n      >\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Text>Select export format:</Text>\n          <Space>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('json')} type=\"primary\">\n              Export as JSON\n            </Button>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('csv')}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 317,
        "end": 692,
        "startLoc": {
          "line": 317,
          "column": 6,
          "position": 2896
        },
        "endLoc": {
          "line": 692,
          "column": 2,
          "position": 5915
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 319,
        "end": 694,
        "startLoc": {
          "line": 319,
          "column": 6,
          "position": 2922
        },
        "endLoc": {
          "line": 694,
          "column": 2,
          "position": 5941
        }
      }
    },
    {
      "format": "tsx",
      "lines": 42,
      "fragment": "import {\n  AlertOutlined,\n  AuditOutlined,\n  CheckCircleOutlined,\n  DownloadOutlined,\n  ExportOutlined,\n  EyeOutlined,\n  FilterOutlined,\n  GlobalOutlined,\n  ReloadOutlined,\n  SecurityScanOutlined,\n  UserOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Descriptions,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type AuditEvent,\n  type AuditFilter,\n  auditService,\n  type ComplianceReport,\n  type SecurityAlert,\n} from '@/core/services/auditService';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 1,
        "end": 42,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 42,
          "column": 6,
          "position": 197
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 1,
        "end": 41,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 41,
          "column": 7,
          "position": 196
        }
      }
    },
    {
      "format": "tsx",
      "lines": 664,
      "fragment": ";\n\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\nconst { Search } = Input;\nconst { Title, Text } = Typography;\n\nexport const AuditDashboard: React.FC = () => {\n  const [events, setEvents] = useState<AuditEvent[]>([]);\n  const [filteredEvents, setFilteredEvents] = useState<AuditEvent[]>([]);\n  const [securityAlerts, setSecurityAlerts] = useState<SecurityAlert[]>([]);\n  const [complianceReports, setComplianceReports] = useState<ComplianceReport[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<AuditEvent | null>(null);\n  const [filter, setFilter] = useState<AuditFilter>({});\n  const [exportModalVisible, setExportModalVisible] = useState(false);\n\n  // Filter states\n  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<string>();\n  const [selectedAction, setSelectedAction] = useState<string>();\n  const [selectedResource, setSelectedResource] = useState<string>();\n  const [selectedSeverity, setSelectedSeverity] = useState<string>();\n  const [selectedCategory, setSelectedCategory] = useState<string>();\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    loadAuditData();\n  }, [loadAuditData]);\n\n  useEffect(() => {\n    applyFilters();\n  }, [applyFilters]);\n\n  const loadAuditData = async () => {\n    setLoading(true);\n    try {\n      // In a real app, these would be API calls\n      const mockEvents: AuditEvent[] = [\n        {\n          id: '1',\n          timestamp: new Date(Date.now() - 3600000),\n          userId: 'user1',\n          userName: 'John Doe',\n          action: 'login',\n          resource: 'authentication',\n          details: { success: true },\n          ipAddress: '192.168.1.100',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'low',\n          category: 'authentication',\n          result: 'success',\n        },\n        {\n          id: '2',\n          timestamp: new Date(Date.now() - 7200000),\n          userId: 'user2',\n          userName: 'Jane Smith',\n          action: 'execute',\n          resource: 'workflow',\n          resourceId: 'wf123',\n          details: { workflowName: 'Data Pipeline', executionId: 'exec456' },\n          ipAddress: '192.168.1.101',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'medium',\n          category: 'workflow',\n          result: 'success',\n        },\n        {\n          id: '3',\n          timestamp: new Date(Date.now() - 10800000),\n          userId: 'user3',\n          userName: 'Bob Wilson',\n          action: 'delete',\n          resource: 'workflow',\n          resourceId: 'wf789',\n          details: { workflowName: 'Legacy Process' },\n          ipAddress: '192.168.1.102',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'high',\n          category: 'workflow',\n          result: 'success',\n        },\n        {\n          id: '4',\n          timestamp: new Date(Date.now() - 14400000),\n          userId: 'user1',\n          userName: 'John Doe',\n          action: 'login',\n          resource: 'authentication',\n          details: { success: false },\n          ipAddress: '192.168.1.100',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'medium',\n          category: 'authentication',\n          result: 'failure',\n        },\n      ];\n\n      const mockAlerts: SecurityAlert[] = [\n        {\n          id: 'alert1',\n          type: 'failed_login_attempts',\n          severity: 'high',\n          title: 'Multiple Failed Login Attempts',\n          description: 'User john.doe@example.com has 5 failed login attempts in the last hour',\n          triggeredAt: new Date(Date.now() - 1800000),\n          userId: 'user1',\n          organizationId: 'org1',\n          events: [mockEvents[3]],\n          status: 'open',\n        },\n      ];\n\n      setEvents(mockEvents);\n      setSecurityAlerts(mockAlerts);\n    } catch (_error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilters = async () => {\n    const newFilter: AuditFilter = {\n      ...filter,\n      startDate: dateRange?.[0]?.toDate(),\n      endDate: dateRange?.[1]?.toDate(),\n      userId: selectedUser,\n      action: selectedAction,\n      resource: selectedResource,\n      severity: selectedSeverity as any,\n      category: selectedCategory as any,\n      searchTerm,\n    };\n\n    try {\n      const filtered = await auditService.getEvents(newFilter, 1000, 0);\n      setFilteredEvents(\n        filtered.length > 0\n          ? filtered\n          : events.filter((event) => {\n              if (newFilter.startDate && event.timestamp < newFilter.startDate) return false;\n              if (newFilter.endDate && event.timestamp > newFilter.endDate) return false;\n              if (newFilter.userId && event.userId !== newFilter.userId) return false;\n              if (newFilter.action && !event.action.includes(newFilter.action)) return false;\n              if (newFilter.resource && event.resource !== newFilter.resource) return false;\n              if (newFilter.severity && event.severity !== newFilter.severity) return false;\n              if (newFilter.category && event.category !== newFilter.category) return false;\n              if (newFilter.searchTerm) {\n                const searchLower = newFilter.searchTerm.toLowerCase();\n                const matchesSearch =\n                  event.action.toLowerCase().includes(searchLower) ||\n                  event.resource.toLowerCase().includes(searchLower) ||\n                  event.userName.toLowerCase().includes(searchLower) ||\n                  JSON.stringify(event.details).toLowerCase().includes(searchLower);\n                if (!matchesSearch) return false;\n              }\n              return true;\n            })\n      );\n    } catch (_error) {\n      setFilteredEvents(events);\n    }\n  };\n\n  const clearFilters = () => {\n    setDateRange(null);\n    setSelectedUser(undefined);\n    setSelectedAction(undefined);\n    setSelectedResource(undefined);\n    setSelectedSeverity(undefined);\n    setSelectedCategory(undefined);\n    setSearchTerm('');\n    setFilter({});\n  };\n\n  const exportData = async (format: 'json' | 'csv') => {\n    try {\n      const startDate = dateRange?.[0]?.toDate() || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const endDate = dateRange?.[1]?.toDate() || new Date();\n\n      const data = await auditService.exportAuditData('org1', startDate, endDate, format);\n\n      const blob = new Blob([data], {\n        type: format === 'json' ? 'application/json' : 'text/csv',\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `audit-log-${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      setExportModalVisible(false);\n    } catch (_error) {}\n  };\n\n  const generateComplianceReport = async () => {\n    try {\n      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Last 30 days\n      const endDate = new Date();\n\n      const report = await auditService.generateComplianceReport(\n        'org1',\n        startDate,\n        endDate,\n        'current-user'\n      );\n      setComplianceReports([...complianceReports, report]);\n\n      Modal.info({\n        title: 'Compliance Report Generated',\n        content: `Report \"${report.name}\" has been generated successfully. Status: ${report.status}`,\n        width: 600,\n      });\n    } catch (_error) {}\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'gold';\n      case 'low':\n        return 'green';\n      default:\n        return 'default';\n    }\n  };\n\n  const getResultColor = (result: string) => {\n    switch (result) {\n      case 'success':\n        return 'green';\n      case 'failure':\n        return 'red';\n      case 'error':\n        return 'orange';\n      default:\n        return 'default';\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Timestamp',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      width: 180,\n      render: (timestamp: Date) => (\n        <div>\n          <div>{timestamp.toLocaleDateString()}</div>\n          <Text type=\"secondary\">{timestamp.toLocaleTimeString()}</Text>\n        </div>\n      ),\n      sorter: (a: AuditEvent, b: AuditEvent) => b.timestamp.getTime() - a.timestamp.getTime(),\n      defaultSortOrder: 'descend' as const,\n    },\n    {\n      title: 'User',\n      dataIndex: 'userName',\n      key: 'userName',\n      width: 150,\n      render: (userName: string, record: AuditEvent) => (\n        <div>\n          <UserOutlined /> {userName}\n          <br />\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            {record.ipAddress}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 120,\n      render: (action: string) => <Tag color=\"blue\">{action}</Tag>,\n    },\n    {\n      title: 'Resource',\n      dataIndex: 'resource',\n      key: 'resource',\n      width: 120,\n      render: (resource: string, record: AuditEvent) => (\n        <div>\n          <Tag color=\"purple\">{resource}</Tag>\n          {record.resourceId && (\n            <div>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                ID: {record.resourceId}\n              </Text>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: 'Result',\n      dataIndex: 'result',\n      key: 'result',\n      width: 100,\n      render: (result: string) => <Tag color={getResultColor(result)}>{result}</Tag>,\n    },\n    {\n      title: 'Severity',\n      dataIndex: 'severity',\n      key: 'severity',\n      width: 100,\n      render: (severity: string) => <Tag color={getSeverityColor(severity)}>{severity}</Tag>,\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 120,\n      render: (category: string) => <Tag>{category}</Tag>,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 100,\n      render: (_: unknown, record: AuditEvent) => (\n        <Button type=\"link\" icon={<EyeOutlined />} onClick={() => setSelectedEvent(record)}>\n          View\n        </Button>\n      ),\n    },\n  ];\n\n  const uniqueUsers = Array.from(new Set(events.map((e) => e.userName)));\n  const uniqueActions = Array.from(new Set(events.map((e) => e.action)));\n  const uniqueResources = Array.from(new Set(events.map((e) => e.resource)));\n\n  const securityMetrics = {\n    totalEvents: filteredEvents.length,\n    securityEvents: filteredEvents.filter(\n      (e) =>\n        e.category === 'authentication' ||\n        e.category === 'authorization' ||\n        e.severity === 'high' ||\n        e.severity === 'critical'\n    ).length,\n    failedLogins: filteredEvents.filter((e) => e.action === 'login' && e.result === 'failure')\n      .length,\n    criticalEvents: filteredEvents.filter((e) => e.severity === 'critical').length,\n  };\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <AuditOutlined /> Audit & Security Dashboard\n        </Title>\n        <Text type=\"secondary\">Monitor security events, audit trails, and compliance status</Text>\n      </div>\n\n      {/* Security Metrics */}\n      <Row gutter={16} style={{ marginBottom: 24 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Events\"\n              value={securityMetrics.totalEvents}\n              prefix={<AuditOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Security Events\"\n              value={securityMetrics.securityEvents}\n              prefix={<SecurityScanOutlined />}\n              valueStyle={{ color: '#faad14' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Failed Logins\"\n              value={securityMetrics.failedLogins}\n              prefix={<WarningOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Critical Events\"\n              value={securityMetrics.criticalEvents}\n              prefix={<AlertOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Security Alerts */}\n      {securityAlerts.length > 0 && (\n        <Card\n          title={\n            <span>\n              <AlertOutlined /> Active Security Alerts\n            </span>\n          }\n          style={{ marginBottom: 24 }}\n        >\n          {securityAlerts.map((alert) => (\n            <Alert\n              key={alert.id}\n              message={alert.title}\n              description={alert.description}\n              type={\n                alert.severity === 'critical'\n                  ? 'error'\n                  : alert.severity === 'high'\n                    ? 'warning'\n                    : 'info'\n              }\n              showIcon\n              style={{ marginBottom: 8 }}\n              action={\n                <Button size=\"small\" type=\"link\">\n                  Investigate\n                </Button>\n              }\n            />\n          ))}\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card\n        title={\n          <span>\n            <FilterOutlined /> Filters & Search\n          </span>\n        }\n        style={{ marginBottom: 24 }}\n        extra={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadAuditData} loading={loading}>\n              Refresh\n            </Button>\n            <Button icon={<ExportOutlined />} onClick={() => setExportModalVisible(true)}>\n              Export\n            </Button>\n            <Button icon={<CheckCircleOutlined />} onClick={generateComplianceReport}>\n              Generate Report\n            </Button>\n          </Space>\n        }\n      >\n        <Space wrap style={{ marginBottom: 16 }}>\n          <RangePicker\n            value={dateRange}\n            onChange={setDateRange}\n            showTime\n            format=\"YYYY-MM-DD HH:mm\"\n            placeholder={['Start Date', 'End Date']}\n          />\n\n          <Select\n            placeholder=\"Select User\"\n            value={selectedUser}\n            onChange={setSelectedUser}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueUsers.map((user) => (\n              <Option key={user} value={user}>\n                {user}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Action\"\n            value={selectedAction}\n            onChange={setSelectedAction}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueActions.map((action) => (\n              <Option key={action} value={action}>\n                {action}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Resource\"\n            value={selectedResource}\n            onChange={setSelectedResource}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueResources.map((resource) => (\n              <Option key={resource} value={resource}>\n                {resource}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Severity\"\n            value={selectedSeverity}\n            onChange={setSelectedSeverity}\n            allowClear\n            style={{ width: 120 }}\n          >\n            <Option value=\"low\">Low</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"high\">High</Option>\n            <Option value=\"critical\">Critical</Option>\n          </Select>\n\n          <Select\n            placeholder=\"Category\"\n            value={selectedCategory}\n            onChange={setSelectedCategory}\n            allowClear\n            style={{ width: 150 }}\n          >\n            <Option value=\"authentication\">Authentication</Option>\n            <Option value=\"authorization\">Authorization</Option>\n            <Option value=\"workflow\">Workflow</Option>\n            <Option value=\"credential\">Credential</Option>\n            <Option value=\"organization\">Organization</Option>\n            <Option value=\"user_management\">User Management</Option>\n          </Select>\n\n          <Button onClick={clearFilters}>Clear Filters</Button>\n        </Space>\n\n        <Search\n          placeholder=\"Search events...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ width: 300 }}\n        />\n      </Card>\n\n      {/* Audit Events Table */}\n      <Card\n        title={\n          <span>\n            <AuditOutlined /> Audit Events ({filteredEvents.length})\n          </span>\n        }\n      >\n        <Table\n          dataSource={filteredEvents}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 50,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} events`,\n          }}\n          scroll={{ x: 1200 }}\n        />\n      </Card>\n\n      {/* Event Details Modal */}\n      <Modal\n        title=\"Event Details\"\n        open={!!selectedEvent}\n        onCancel={() => setSelectedEvent(null)}\n        footer={null}\n        width={800}\n      >\n        {selectedEvent && (\n          <Descriptions column={2} bordered>\n            <Descriptions.Item label=\"Timestamp\">\n              {selectedEvent.timestamp.toLocaleString()}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User\">\n              {selectedEvent.userName} ({selectedEvent.userId})\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Action\">\n              <Tag color=\"blue\">{selectedEvent.action}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Resource\">\n              <Tag color=\"purple\">{selectedEvent.resource}</Tag>\n              {selectedEvent.resourceId && ` (${selectedEvent.resourceId})`}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Result\">\n              <Tag color={getResultColor(selectedEvent.result)}>{selectedEvent.result}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Severity\">\n              <Tag color={getSeverityColor(selectedEvent.severity)}>{selectedEvent.severity}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Category\">\n              <Tag>{selectedEvent.category}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"IP Address\">\n              <GlobalOutlined /> {selectedEvent.ipAddress}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Organization\" span={2}>\n              {selectedEvent.organizationId || 'N/A'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Details\" span={2}>\n              <pre\n                style={{\n                  fontSize: '12px',\n                  background: '#f5f5f5',\n                  padding: '8px',\n                  borderRadius: '4px',\n                }}\n              >\n                {JSON.stringify(selectedEvent.details, null, 2)}\n              </pre>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User Agent\" span={2}>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                {selectedEvent.userAgent}\n              </Text>\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Export Modal */}\n      <Modal\n        title=\"Export Audit Data\"\n        open={exportModalVisible}\n        onCancel={() => setExportModalVisible(false)}\n        footer={null}\n      >\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Text>Select export format:</Text>\n          <Space>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('json')} type=\"primary\">\n              Export as JSON\n            </Button>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('csv')}>\n              Export as CSV\n            </Button>\n          </Space>\n          <Text type=\"secondary\">\n            Export will include all events within the selected date range.\n          </Text>\n        </Space>\n      </Modal>\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 40,
        "end": 703,
        "startLoc": {
          "line": 40,
          "column": 31,
          "position": 194
        },
        "endLoc": {
          "line": 703,
          "column": 2,
          "position": 5993
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 42,
        "end": 705,
        "startLoc": {
          "line": 42,
          "column": 19,
          "position": 220
        },
        "endLoc": {
          "line": 705,
          "column": 2,
          "position": 6019
        }
      }
    },
    {
      "format": "javascript",
      "lines": 528,
      "fragment": "={color}>{status}</Tag>;\n      },\n    },\n    {\n      title: 'Quality',\n      dataIndex: 'qualityScore',\n      key: 'qualityScore',\n      width: 100,\n      render: (score: number) => (\n        <Progress\n          percent={Math.round(score * 100)}\n          size=\"small\"\n          status={score >= 0.8 ? 'success' : score >= 0.6 ? 'normal' : 'exception'}\n        />\n      ),\n    },\n    {\n      title: 'Cost',\n      dataIndex: 'totalCost',\n      key: 'totalCost',\n      width: 80,\n      render: (cost: number) => <Text>${cost.toFixed(4)}</Text>,\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (_: unknown, record: AIWorkflowExecution) => {\n        if (!record.endTime) return '-';\n        const duration = record.endTime.getTime() - record.startTime.getTime();\n        return <Text>{(duration / 1000).toFixed(1)}s</Text>;\n      },\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'builder',\n      label: (\n        <span>\n          <SettingOutlined />\n          AI Builder\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Row gutter={[24, 24]}>\n            <Col span={12}>\n              <Card title=\"AI Model Configuration\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Select AI Model</Text>\n                    <Select\n                      value={selectedModel}\n                      onChange={setSelectedModel}\n                      style={{ width: '100%', marginTop: 8 }}\n                      placeholder=\"Choose an AI model\"\n                    >\n                      {availableModels.map((model) => (\n                        <Option key={model.id} value={model.id}>\n                          <div\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                            }}\n                          >\n                            <span>\n                              {getModelIcon(model)} {model.name}\n                            </span>\n                            <div>\n                              <Tag>{model.provider}</Tag>\n                              <Tag color=\"blue\">${model.costPer1kTokens}/1k</Tag>\n                            </div>\n                          </div>\n                        </Option>\n                      ))}\n                    </Select>\n                  </div>\n\n                  {selectedModel &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      return (\n                        <div>\n                          <Divider style={{ margin: '16px 0' }} />\n                          <div style={{ marginBottom: 16 }}>\n                            <Text strong>Model Details</Text>\n                            <div style={{ marginTop: 8 }}>\n                              <div>\n                                <Text type=\"secondary\">Type:</Text> <Tag>{model.type}</Tag>\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Input:</Text>\n                                {model.inputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Output:</Text>\n                                {model.outputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Context Window:</Text>{' '}\n                                <Text>{model.contextWindow.toLocaleString()} tokens</Text>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Text strong>Capabilities</Text>\n                            <div style={{ marginTop: 8 }}>\n                              {model.capabilities.map((cap) => (\n                                <Tag key={cap.name} color=\"purple\">\n                                  {cap.name} ({cap.proficiency}/5)\n                                </Tag>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })()}\n\n                  <Divider />\n\n                  <div>\n                    <Text strong>Main Prompt</Text>\n                    <TextArea\n                      value={nodeConfig.prompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          prompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter your main prompt here...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>System Prompt (Optional)</Text>\n                    <TextArea\n                      value={nodeConfig.systemPrompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          systemPrompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter system instructions...\"\n                      rows={3}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Temperature</Text>\n                        <Slider\n                          min={0}\n                          max={2}\n                          step={0.1}\n                          value={nodeConfig.temperature}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              temperature: value,\n                            }))\n                          }\n                          style={{ marginTop: 8 }}\n                        />\n                        <Text type=\"secondary\">Current: {nodeConfig.temperature}</Text>\n                      </div>\n                    </Col>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Max Tokens</Text>\n                        <InputNumber\n                          min={1}\n                          max={\n                            selectedModel\n                              ? availableModels.find((m) => m.id === selectedModel)?.maxTokens\n                              : 4096\n                          }\n                          value={nodeConfig.maxTokens}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              maxTokens: value || 1000,\n                            }))\n                          }\n                          style={{ width: '100%', marginTop: 8 }}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </Space>\n              </Card>\n            </Col>\n\n            <Col span={12}>\n              <Card title=\"Multi-Modal Inputs\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Text Input</Text>\n                    <TextArea\n                      value={workflowInputs.text || ''}\n                      onChange={(e) =>\n                        setWorkflowInputs((prev) => ({\n                          ...prev,\n                          text: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter text input for the AI model...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>File Uploads</Text>\n                    <Dragger\n                      multiple\n                      beforeUpload={handleFileUpload}\n                      showUploadList={false}\n                      style={{ marginTop: 8 }}\n                    >\n                      <p className=\"ant-upload-drag-icon\">\n                        <CloudUploadOutlined />\n                      </p>\n                      <p className=\"ant-upload-text\">Click or drag files to upload</p>\n                      <p className=\"ant-upload-hint\">\n                        Support for images, audio, video, and documents\n                      </p>\n                    </Dragger>\n                  </div>\n\n                  {uploadedFiles.length > 0 && (\n                    <div>\n                      <Text strong>Uploaded Files</Text>\n                      <div style={{ marginTop: 8 }}>\n                        {uploadedFiles.map((file, index) => (\n                          <Tag\n                            key={index}\n                            icon={getModalityIcon(file.type.split('/')[0])}\n                            style={{ marginBottom: 4, marginRight: 4 }}\n                          >\n                            {file.name}\n                          </Tag>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Divider />\n\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={handleExecuteWorkflow}\n                    loading={isExecuting}\n                    disabled={!selectedModel || !nodeConfig.prompt}\n                    icon={<PlayCircleOutlined />}\n                    style={{ width: '100%' }}\n                  >\n                    {isExecuting ? 'Executing...' : 'Execute AI Workflow'}\n                  </Button>\n\n                  {selectedModel &&\n                    nodeConfig.prompt &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      const estimatedTokens = Math.ceil((nodeConfig.prompt?.length || 0) / 4);\n                      const estimatedCost = (estimatedTokens / 1000) * model.costPer1kTokens;\n\n                      return (\n                        <Alert\n                          message=\"Execution Estimate\"\n                          description={\n                            <div>\n                              <div>Estimated tokens: ~{estimatedTokens}</div>\n                              <div>Estimated cost: ${estimatedCost.toFixed(4)}</div>\n                            </div>\n                          }\n                          type=\"info\"\n                          showIcon\n                        />\n                      );\n                    })()}\n                </Space>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'execution',\n      label: (\n        <span>\n          <PlayCircleOutlined />\n          Execution Results\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          {currentExecution ? (\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Card title={`Execution ${currentExecution.id.slice(-8)}`} size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Status\"\n                        value={currentExecution.status}\n                        valueStyle={{\n                          color: currentExecution.status === 'completed' ? '#3f8600' : '#cf1322',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Quality Score\"\n                        value={Math.round(currentExecution.qualityScore * 100)}\n                        suffix=\"%\"\n                        valueStyle={{\n                          color: currentExecution.qualityScore >= 0.8 ? '#3f8600' : '#fa8c16',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Total Cost\"\n                        value={currentExecution.totalCost}\n                        prefix=\"$\"\n                        precision={4}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic title=\"Tokens Used\" value={currentExecution.totalTokens} />\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Node Executions\" size=\"small\">\n                  <Timeline>\n                    {currentExecution.nodeExecutions.map((nodeExec, index) => (\n                      <Timeline.Item\n                        key={index}\n                        color={\n                          nodeExec.status === 'completed'\n                            ? 'green'\n                            : nodeExec.status === 'failed'\n                              ? 'red'\n                              : 'blue'\n                        }\n                      >\n                        <div>\n                          <Text strong>Node {nodeExec.nodeId}</Text>\n                          <div style={{ marginTop: 4 }}>\n                            <Tag color={nodeExec.status === 'completed' ? 'green' : 'red'}>\n                              {nodeExec.status}\n                            </Tag>\n                            <Text type=\"secondary\">\n                              {nodeExec.endTime\n                                ? `${((nodeExec.endTime.getTime() - nodeExec.startTime.getTime()) / 1000).toFixed(1)}s`\n                                : 'Running...'}\n                            </Text>\n                          </div>\n                          {nodeExec.outputs.length > 0 && (\n                            <div\n                              style={{\n                                marginTop: 8,\n                                padding: 8,\n                                background: '#f5f5f5',\n                                borderRadius: 4,\n                              }}\n                            >\n                              <Text style={{ fontSize: '12px' }}>\n                                {typeof nodeExec.outputs[0].content === 'string'\n                                  ? nodeExec.outputs[0].content.slice(0, 200) +\n                                    (nodeExec.outputs[0].content.length > 200 ? '...' : '')\n                                  : JSON.stringify(nodeExec.outputs[0].content).slice(0, 200)}\n                              </Text>\n                            </div>\n                          )}\n                        </div>\n                      </Timeline.Item>\n                    ))}\n                  </Timeline>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Quality Metrics\" size=\"small\">\n                  {currentExecution.nodeExecutions.length > 0 && (\n                    <div>\n                      {Object.entries(currentExecution.nodeExecutions[0].qualityMetrics).map(\n                        ([metric, value]) => (\n                          <div key={metric} style={{ marginBottom: 8 }}>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                marginBottom: 4,\n                              }}\n                            >\n                              <Text>{metric.charAt(0).toUpperCase() + metric.slice(1)}</Text>\n                              <Text>{Math.round(value * 100)}%</Text>\n                            </div>\n                            <Progress\n                              percent={Math.round(value * 100)}\n                              size=\"small\"\n                              status={\n                                value >= 0.8 ? 'success' : value >= 0.6 ? 'normal' : 'exception'\n                              }\n                              showInfo={false}\n                            />\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </Card>\n\n                {currentExecution.insights.length > 0 && (\n                  <Card title=\"AI Insights\" size=\"small\" style={{ marginTop: 16 }}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      {currentExecution.insights.map((insight, index) => (\n                        <Alert\n                          key={index}\n                          message={insight.message}\n                          description={insight.recommendation}\n                          type={insight.impact === 'high' ? 'warning' : 'info'}\n                          showIcon\n                          style={{ fontSize: '12px' }}\n                        />\n                      ))}\n                    </Space>\n                  </Card>\n                )}\n              </Col>\n            </Row>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '48px' }}>\n              <ExperimentOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\n              <Title level={4} type=\"secondary\">\n                No execution results yet\n              </Title>\n              <Paragraph type=\"secondary\">\n                Execute a workflow from the AI Builder tab to see results here\n              </Paragraph>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'history',\n      label: (\n        <span>\n          <BarChartOutlined />\n          Execution History\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Card title=\"Execution History\" size=\"small\">\n            <Table\n              dataSource={executionHistory}\n              columns={executionColumns}\n              rowKey=\"id\"\n              pagination={{ pageSize: 10 }}\n              onRow={(record) => ({\n                onClick: () => setCurrentExecution(record),\n              })}\n              style={{ cursor: 'pointer' }}\n            />\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Modal\n      title={\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ExperimentOutlined style={{ marginRight: 8 }} />\n          AI Workflow Studio\n          <Badge count=\"Beta\" style={{ marginLeft: 8 }} />\n        </div>\n      }\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width=\"90%\"\n      style={{ top: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabs}\n        style={{ minHeight: '70vh' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 228,
        "end": 755,
        "startLoc": {
          "line": 228,
          "column": 6,
          "position": 1862
        },
        "endLoc": {
          "line": 755,
          "column": 2,
          "position": 6171
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 230,
        "end": 757,
        "startLoc": {
          "line": 230,
          "column": 6,
          "position": 1888
        },
        "endLoc": {
          "line": 757,
          "column": 2,
          "position": 6197
        }
      }
    },
    {
      "format": "tsx",
      "lines": 51,
      "fragment": "import {\n  AudioOutlined,\n  BarChartOutlined,\n  CloudUploadOutlined,\n  CodeOutlined,\n  ExperimentOutlined,\n  EyeOutlined,\n  FileImageOutlined,\n  FileTextOutlined,\n  PlayCircleOutlined,\n  RobotOutlined,\n  SettingOutlined,\n  SoundOutlined,\n  ThunderboltOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Col,\n  Divider,\n  Input,\n  InputNumber,\n  Modal,\n  message,\n  Progress,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type AIModel,\n  type AINodeConfig,\n  type AIWorkflowExecution,\n  aiOrchestrationService,\n  type MultiModalWorkflow,\n} from '@/core/services/aiOrchestrationService';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 1,
        "end": 51,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 51,
          "column": 6,
          "position": 233
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 7,
          "position": 232
        }
      }
    },
    {
      "format": "tsx",
      "lines": 711,
      "fragment": ";\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\ninterface AIWorkflowStudioProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const AIWorkflowStudio: React.FC<AIWorkflowStudioProps> = ({ visible, onClose }) => {\n  const [availableModels, setAvailableModels] = useState<AIModel[]>([]);\n  const [selectedModel, setSelectedModel] = useState<string>('');\n  const [nodeConfig, setNodeConfig] = useState<Partial<AINodeConfig>>({\n    prompt: '',\n    systemPrompt: '',\n    temperature: 0.7,\n    maxTokens: 1000,\n  });\n  const [currentExecution, setCurrentExecution] = useState<AIWorkflowExecution | null>(null);\n  const [executionHistory, setExecutionHistory] = useState<AIWorkflowExecution[]>([]);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [activeTab, setActiveTab] = useState('builder');\n  const [uploadedFiles, setUploadedFiles] = useState<any[]>([]);\n  const [workflowInputs, setWorkflowInputs] = useState<Record<string, any>>({});\n\n  useEffect(() => {\n    if (visible) {\n      loadAvailableModels();\n    }\n  }, [visible, loadAvailableModels]);\n\n  const loadAvailableModels = () => {\n    const models = aiOrchestrationService.getAvailableModels();\n    setAvailableModels(models);\n    if (models.length > 0) {\n      setSelectedModel(models[0].id);\n    }\n  };\n\n  const handleExecuteWorkflow = async () => {\n    if (!selectedModel) {\n      message.error('Please select an AI model');\n      return;\n    }\n\n    setIsExecuting(true);\n    try {\n      // Create a simple workflow for demonstration\n      const workflow: Omit<MultiModalWorkflow, 'id'> = {\n        name: 'AI Studio Workflow',\n        description: 'Interactive AI workflow execution',\n        inputTypes: ['text', 'image', 'audio'],\n        outputTypes: ['text', 'structured_data'],\n        nodes: [\n          {\n            id: 'main-node',\n            type: 'ai_reasoning',\n            config: {\n              modelId: selectedModel,\n              ...nodeConfig,\n            } as AINodeConfig,\n            dependencies: [],\n            outputs: [],\n            retryPolicy: {\n              maxRetries: 2,\n              backoffStrategy: 'exponential',\n              retryConditions: ['error', 'low_confidence'],\n              fallbackStrategy: 'different_model',\n            },\n          },\n        ],\n        edges: [],\n        triggers: [{ type: 'manual', config: {}, enabled: true }],\n        metadata: {\n          version: '1.0.0',\n          author: 'AI Studio',\n          tags: ['interactive', 'multi-modal'],\n          category: 'experimental',\n          complexity: 'simple',\n          estimatedCost: 0.1,\n          estimatedTime: 5000,\n          lastUpdated: new Date(),\n        },\n      };\n\n      const createdWorkflow = await aiOrchestrationService.createMultiModalWorkflow(workflow);\n      const execution = await aiOrchestrationService.executeWorkflow(\n        createdWorkflow.id,\n        workflowInputs\n      );\n\n      setCurrentExecution(execution);\n      setExecutionHistory((prev: AIWorkflowExecution[]) => [execution, ...prev]);\n      message.success('Workflow executed successfully!');\n    } catch (error: any) {\n      message.error(`Execution failed: ${error.message}`);\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  const handleFileUpload = (file: any) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const fileData = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        content: e.target?.result,\n        timestamp: new Date(),\n      };\n      setUploadedFiles((prev: any[]) => [...prev, fileData]);\n      setWorkflowInputs((prev: Record<string, any>) => ({\n        ...prev,\n        files: [...(prev.files || []), fileData],\n      }));\n    };\n\n    if (file.type.startsWith('image/')) {\n      reader.readAsDataURL(file);\n    } else if (file.type.startsWith('audio/')) {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reader.readAsText(file);\n    }\n\n    return false; // Prevent auto upload\n  };\n\n  const getModelIcon = (model: AIModel) => {\n    switch (model.type) {\n      case 'language':\n        return <RobotOutlined />;\n      case 'vision':\n        return <EyeOutlined />;\n      case 'speech':\n        return <AudioOutlined />;\n      case 'code':\n        return <CodeOutlined />;\n      case 'multimodal':\n        return <ExperimentOutlined />;\n      default:\n        return <ThunderboltOutlined />;\n    }\n  };\n\n  const getModalityIcon = (modality: string) => {\n    switch (modality) {\n      case 'text':\n        return <FileTextOutlined />;\n      case 'image':\n        return <FileImageOutlined />;\n      case 'audio':\n        return <SoundOutlined />;\n      case 'video':\n        return <VideoCameraOutlined />;\n      default:\n        return <FileTextOutlined />;\n    }\n  };\n\n  const executionColumns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 120,\n      render: (id: string) => <Text code>{id.slice(-8)}</Text>,\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: string) => {\n        const color = status === 'completed' ? 'green' : status === 'failed' ? 'red' : 'blue';\n        return <Tag color={color}>{status}</Tag>;\n      },\n    },\n    {\n      title: 'Quality',\n      dataIndex: 'qualityScore',\n      key: 'qualityScore',\n      width: 100,\n      render: (score: number) => (\n        <Progress\n          percent={Math.round(score * 100)}\n          size=\"small\"\n          status={score >= 0.8 ? 'success' : score >= 0.6 ? 'normal' : 'exception'}\n        />\n      ),\n    },\n    {\n      title: 'Cost',\n      dataIndex: 'totalCost',\n      key: 'totalCost',\n      width: 80,\n      render: (cost: number) => <Text>${cost.toFixed(4)}</Text>,\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (_: unknown, record: AIWorkflowExecution) => {\n        if (!record.endTime) return '-';\n        const duration = record.endTime.getTime() - record.startTime.getTime();\n        return <Text>{(duration / 1000).toFixed(1)}s</Text>;\n      },\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'builder',\n      label: (\n        <span>\n          <SettingOutlined />\n          AI Builder\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Row gutter={[24, 24]}>\n            <Col span={12}>\n              <Card title=\"AI Model Configuration\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Select AI Model</Text>\n                    <Select\n                      value={selectedModel}\n                      onChange={setSelectedModel}\n                      style={{ width: '100%', marginTop: 8 }}\n                      placeholder=\"Choose an AI model\"\n                    >\n                      {availableModels.map((model) => (\n                        <Option key={model.id} value={model.id}>\n                          <div\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                            }}\n                          >\n                            <span>\n                              {getModelIcon(model)} {model.name}\n                            </span>\n                            <div>\n                              <Tag>{model.provider}</Tag>\n                              <Tag color=\"blue\">${model.costPer1kTokens}/1k</Tag>\n                            </div>\n                          </div>\n                        </Option>\n                      ))}\n                    </Select>\n                  </div>\n\n                  {selectedModel &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      return (\n                        <div>\n                          <Divider style={{ margin: '16px 0' }} />\n                          <div style={{ marginBottom: 16 }}>\n                            <Text strong>Model Details</Text>\n                            <div style={{ marginTop: 8 }}>\n                              <div>\n                                <Text type=\"secondary\">Type:</Text> <Tag>{model.type}</Tag>\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Input:</Text>\n                                {model.inputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Output:</Text>\n                                {model.outputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Context Window:</Text>{' '}\n                                <Text>{model.contextWindow.toLocaleString()} tokens</Text>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Text strong>Capabilities</Text>\n                            <div style={{ marginTop: 8 }}>\n                              {model.capabilities.map((cap) => (\n                                <Tag key={cap.name} color=\"purple\">\n                                  {cap.name} ({cap.proficiency}/5)\n                                </Tag>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })()}\n\n                  <Divider />\n\n                  <div>\n                    <Text strong>Main Prompt</Text>\n                    <TextArea\n                      value={nodeConfig.prompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          prompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter your main prompt here...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>System Prompt (Optional)</Text>\n                    <TextArea\n                      value={nodeConfig.systemPrompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          systemPrompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter system instructions...\"\n                      rows={3}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Temperature</Text>\n                        <Slider\n                          min={0}\n                          max={2}\n                          step={0.1}\n                          value={nodeConfig.temperature}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              temperature: value,\n                            }))\n                          }\n                          style={{ marginTop: 8 }}\n                        />\n                        <Text type=\"secondary\">Current: {nodeConfig.temperature}</Text>\n                      </div>\n                    </Col>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Max Tokens</Text>\n                        <InputNumber\n                          min={1}\n                          max={\n                            selectedModel\n                              ? availableModels.find((m) => m.id === selectedModel)?.maxTokens\n                              : 4096\n                          }\n                          value={nodeConfig.maxTokens}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              maxTokens: value || 1000,\n                            }))\n                          }\n                          style={{ width: '100%', marginTop: 8 }}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </Space>\n              </Card>\n            </Col>\n\n            <Col span={12}>\n              <Card title=\"Multi-Modal Inputs\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Text Input</Text>\n                    <TextArea\n                      value={workflowInputs.text || ''}\n                      onChange={(e) =>\n                        setWorkflowInputs((prev) => ({\n                          ...prev,\n                          text: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter text input for the AI model...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>File Uploads</Text>\n                    <Dragger\n                      multiple\n                      beforeUpload={handleFileUpload}\n                      showUploadList={false}\n                      style={{ marginTop: 8 }}\n                    >\n                      <p className=\"ant-upload-drag-icon\">\n                        <CloudUploadOutlined />\n                      </p>\n                      <p className=\"ant-upload-text\">Click or drag files to upload</p>\n                      <p className=\"ant-upload-hint\">\n                        Support for images, audio, video, and documents\n                      </p>\n                    </Dragger>\n                  </div>\n\n                  {uploadedFiles.length > 0 && (\n                    <div>\n                      <Text strong>Uploaded Files</Text>\n                      <div style={{ marginTop: 8 }}>\n                        {uploadedFiles.map((file, index) => (\n                          <Tag\n                            key={index}\n                            icon={getModalityIcon(file.type.split('/')[0])}\n                            style={{ marginBottom: 4, marginRight: 4 }}\n                          >\n                            {file.name}\n                          </Tag>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Divider />\n\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={handleExecuteWorkflow}\n                    loading={isExecuting}\n                    disabled={!selectedModel || !nodeConfig.prompt}\n                    icon={<PlayCircleOutlined />}\n                    style={{ width: '100%' }}\n                  >\n                    {isExecuting ? 'Executing...' : 'Execute AI Workflow'}\n                  </Button>\n\n                  {selectedModel &&\n                    nodeConfig.prompt &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      const estimatedTokens = Math.ceil((nodeConfig.prompt?.length || 0) / 4);\n                      const estimatedCost = (estimatedTokens / 1000) * model.costPer1kTokens;\n\n                      return (\n                        <Alert\n                          message=\"Execution Estimate\"\n                          description={\n                            <div>\n                              <div>Estimated tokens: ~{estimatedTokens}</div>\n                              <div>Estimated cost: ${estimatedCost.toFixed(4)}</div>\n                            </div>\n                          }\n                          type=\"info\"\n                          showIcon\n                        />\n                      );\n                    })()}\n                </Space>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'execution',\n      label: (\n        <span>\n          <PlayCircleOutlined />\n          Execution Results\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          {currentExecution ? (\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Card title={`Execution ${currentExecution.id.slice(-8)}`} size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Status\"\n                        value={currentExecution.status}\n                        valueStyle={{\n                          color: currentExecution.status === 'completed' ? '#3f8600' : '#cf1322',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Quality Score\"\n                        value={Math.round(currentExecution.qualityScore * 100)}\n                        suffix=\"%\"\n                        valueStyle={{\n                          color: currentExecution.qualityScore >= 0.8 ? '#3f8600' : '#fa8c16',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Total Cost\"\n                        value={currentExecution.totalCost}\n                        prefix=\"$\"\n                        precision={4}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic title=\"Tokens Used\" value={currentExecution.totalTokens} />\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Node Executions\" size=\"small\">\n                  <Timeline>\n                    {currentExecution.nodeExecutions.map((nodeExec, index) => (\n                      <Timeline.Item\n                        key={index}\n                        color={\n                          nodeExec.status === 'completed'\n                            ? 'green'\n                            : nodeExec.status === 'failed'\n                              ? 'red'\n                              : 'blue'\n                        }\n                      >\n                        <div>\n                          <Text strong>Node {nodeExec.nodeId}</Text>\n                          <div style={{ marginTop: 4 }}>\n                            <Tag color={nodeExec.status === 'completed' ? 'green' : 'red'}>\n                              {nodeExec.status}\n                            </Tag>\n                            <Text type=\"secondary\">\n                              {nodeExec.endTime\n                                ? `${((nodeExec.endTime.getTime() - nodeExec.startTime.getTime()) / 1000).toFixed(1)}s`\n                                : 'Running...'}\n                            </Text>\n                          </div>\n                          {nodeExec.outputs.length > 0 && (\n                            <div\n                              style={{\n                                marginTop: 8,\n                                padding: 8,\n                                background: '#f5f5f5',\n                                borderRadius: 4,\n                              }}\n                            >\n                              <Text style={{ fontSize: '12px' }}>\n                                {typeof nodeExec.outputs[0].content === 'string'\n                                  ? nodeExec.outputs[0].content.slice(0, 200) +\n                                    (nodeExec.outputs[0].content.length > 200 ? '...' : '')\n                                  : JSON.stringify(nodeExec.outputs[0].content).slice(0, 200)}\n                              </Text>\n                            </div>\n                          )}\n                        </div>\n                      </Timeline.Item>\n                    ))}\n                  </Timeline>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Quality Metrics\" size=\"small\">\n                  {currentExecution.nodeExecutions.length > 0 && (\n                    <div>\n                      {Object.entries(currentExecution.nodeExecutions[0].qualityMetrics).map(\n                        ([metric, value]) => (\n                          <div key={metric} style={{ marginBottom: 8 }}>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                marginBottom: 4,\n                              }}\n                            >\n                              <Text>{metric.charAt(0).toUpperCase() + metric.slice(1)}</Text>\n                              <Text>{Math.round(value * 100)}%</Text>\n                            </div>\n                            <Progress\n                              percent={Math.round(value * 100)}\n                              size=\"small\"\n                              status={\n                                value >= 0.8 ? 'success' : value >= 0.6 ? 'normal' : 'exception'\n                              }\n                              showInfo={false}\n                            />\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </Card>\n\n                {currentExecution.insights.length > 0 && (\n                  <Card title=\"AI Insights\" size=\"small\" style={{ marginTop: 16 }}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      {currentExecution.insights.map((insight, index) => (\n                        <Alert\n                          key={index}\n                          message={insight.message}\n                          description={insight.recommendation}\n                          type={insight.impact === 'high' ? 'warning' : 'info'}\n                          showIcon\n                          style={{ fontSize: '12px' }}\n                        />\n                      ))}\n                    </Space>\n                  </Card>\n                )}\n              </Col>\n            </Row>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '48px' }}>\n              <ExperimentOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\n              <Title level={4} type=\"secondary\">\n                No execution results yet\n              </Title>\n              <Paragraph type=\"secondary\">\n                Execute a workflow from the AI Builder tab to see results here\n              </Paragraph>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'history',\n      label: (\n        <span>\n          <BarChartOutlined />\n          Execution History\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Card title=\"Execution History\" size=\"small\">\n            <Table\n              dataSource={executionHistory}\n              columns={executionColumns}\n              rowKey=\"id\"\n              pagination={{ pageSize: 10 }}\n              onRow={(record) => ({\n                onClick: () => setCurrentExecution(record),\n              })}\n              style={{ cursor: 'pointer' }}\n            />\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Modal\n      title={\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ExperimentOutlined style={{ marginRight: 8 }} />\n          AI Workflow Studio\n          <Badge count=\"Beta\" style={{ marginLeft: 8 }} />\n        </div>\n      }\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width=\"90%\"\n      style={{ top: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabs}\n        style={{ minHeight: '70vh' }}\n      />\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 49,
        "end": 759,
        "startLoc": {
          "line": 49,
          "column": 41,
          "position": 230
        },
        "endLoc": {
          "line": 759,
          "column": 2,
          "position": 6185
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 51,
        "end": 761,
        "startLoc": {
          "line": 51,
          "column": 19,
          "position": 256
        },
        "endLoc": {
          "line": 761,
          "column": 2,
          "position": 6211
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async calculateMemoryTrend",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 124,
        "end": 135,
        "startLoc": {
          "line": 124,
          "column": 11,
          "position": 1314
        },
        "endLoc": {
          "line": 135,
          "column": 21,
          "position": 1400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async for(input: any): Promise<any> {\n    return this.forUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async setupGCMonitoring",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 136,
        "end": 147,
        "startLoc": {
          "line": 136,
          "column": 28,
          "position": 1422
        },
        "endLoc": {
          "line": 147,
          "column": 18,
          "position": 1508
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 120,
        "end": 131,
        "startLoc": {
          "line": 120,
          "column": 25,
          "position": 1278
        },
        "endLoc": {
          "line": 131,
          "column": 3,
          "position": 1364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async getAverageMetric",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 156,
        "end": 167,
        "startLoc": {
          "line": 156,
          "column": 18,
          "position": 1602
        },
        "endLoc": {
          "line": 167,
          "column": 17,
          "position": 1688
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async memoryUsage",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/HealthCheckService.ts",
        "start": 133,
        "end": 148,
        "startLoc": {
          "line": 133,
          "column": 7,
          "position": 935
        },
        "endLoc": {
          "line": 148,
          "column": 12,
          "position": 1045
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 4,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 13,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async clearInterval(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async clear(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async HealthCheckService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/HealthCheckService.ts",
        "start": 278,
        "end": 293,
        "startLoc": {
          "line": 278,
          "column": 5,
          "position": 2008
        },
        "endLoc": {
          "line": 293,
          "column": 19,
          "position": 2118
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performancemonitor/performanceMonitorService.ts",
        "start": 268,
        "end": 283,
        "startLoc": {
          "line": 268,
          "column": 8,
          "position": 1934
        },
        "endLoc": {
          "line": 283,
          "column": 26,
          "position": 2044
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async updateErrorRate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 110,
        "end": 121,
        "startLoc": {
          "line": 110,
          "column": 26,
          "position": 1245
        },
        "endLoc": {
          "line": 121,
          "column": 16,
          "position": 1331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async handleCriticalError",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 28,
          "position": 1425
        },
        "endLoc": {
          "line": 141,
          "column": 20,
          "position": 1511
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 194,
        "end": 205,
        "startLoc": {
          "line": 194,
          "column": 17,
          "position": 2001
        },
        "endLoc": {
          "line": 205,
          "column": 3,
          "position": 2087
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async getErrorPatterns",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 10,
          "position": 2037
        },
        "endLoc": {
          "line": 213,
          "column": 17,
          "position": 2159
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async for(input: any): Promise<any> {\n    return this.forUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async stop",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 238,
        "end": 249,
        "startLoc": {
          "line": 238,
          "column": 24,
          "position": 2397
        },
        "endLoc": {
          "line": 249,
          "column": 5,
          "position": 2483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 120,
        "end": 131,
        "startLoc": {
          "line": 120,
          "column": 25,
          "position": 1278
        },
        "endLoc": {
          "line": 131,
          "column": 3,
          "position": 1364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async now(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async random(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async substr(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async addDebugEvent",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 23,
        "end": 53,
        "startLoc": {
          "line": 23,
          "column": 18,
          "position": 121
        },
        "endLoc": {
          "line": 53,
          "column": 14,
          "position": 342
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowscheduler/workflowSchedulerService.ts",
        "start": 18,
        "end": 48,
        "startLoc": {
          "line": 18,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 48,
          "column": 9,
          "position": 305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 63,
        "end": 78,
        "startLoc": {
          "line": 63,
          "column": 16,
          "position": 417
        },
        "endLoc": {
          "line": 78,
          "column": 5,
          "position": 527
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/rbac/rbacService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 4,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 13,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 68,
        "end": 83,
        "startLoc": {
          "line": 68,
          "column": 4,
          "position": 454
        },
        "endLoc": {
          "line": 83,
          "column": 8,
          "position": 564
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costoptimizer/costOptimizerService.ts",
        "start": 98,
        "end": 113,
        "startLoc": {
          "line": 98,
          "column": 21,
          "position": 676
        },
        "endLoc": {
          "line": 113,
          "column": 5,
          "position": 786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async hook",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 73,
        "end": 88,
        "startLoc": {
          "line": 73,
          "column": 3,
          "position": 491
        },
        "endLoc": {
          "line": 88,
          "column": 5,
          "position": 601
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodeversioning/nodeVersioningService.ts",
        "start": 98,
        "end": 113,
        "startLoc": {
          "line": 98,
          "column": 17,
          "position": 676
        },
        "endLoc": {
          "line": 113,
          "column": 6,
          "position": 786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async warn(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async startProfiling",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 88,
        "end": 103,
        "startLoc": {
          "line": 88,
          "column": 5,
          "position": 602
        },
        "endLoc": {
          "line": 103,
          "column": 15,
          "position": 712
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/HealthCheckService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 5,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 7,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async indexOf(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async splice(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async setGlobalDebugMode",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/DebugToolsService.ts",
        "start": 233,
        "end": 248,
        "startLoc": {
          "line": 233,
          "column": 16,
          "position": 1675
        },
        "endLoc": {
          "line": 248,
          "column": 19,
          "position": 1785
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/executionmonitor/executionMonitorService.ts",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 25,
          "position": 713
        },
        "endLoc": {
          "line": 118,
          "column": 7,
          "position": 823
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ")\n    .trim()\n    .isLength({ min: 1, max: 100 })\n    .withMessage('Workflow name must be between 1 and 100 characters'),\n\n  body('description')\n    .optional()\n    .trim()\n    .isLength({ max: 500 })\n    .withMessage('Description must not exceed 500 characters'),\n\n  body('nodes').optional",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts",
        "start": 53,
        "end": 64,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 361
        },
        "endLoc": {
          "line": 64,
          "column": 9,
          "position": 445
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts",
        "start": 25,
        "end": 36,
        "startLoc": {
          "line": 25,
          "column": 7,
          "position": 157
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 241
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ") {\n    const workflow = await this.workflowRepository.findOne({\n      _id: id,\n      $or: [{ userId }, { isPublic: true }],\n    });\n\n    if (!workflow) {\n      throw new AppError('Workflow not found', 404);\n    }\n\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts",
        "start": 285,
        "end": 295,
        "startLoc": {
          "line": 285,
          "column": 7,
          "position": 2184
        },
        "endLoc": {
          "line": 295,
          "column": 6,
          "position": 2270
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts",
        "start": 94,
        "end": 104,
        "startLoc": {
          "line": 94,
          "column": 7,
          "position": 741
        },
        "endLoc": {
          "line": 104,
          "column": 7,
          "position": 827
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "// Use HTTPS in production, detect protocol properly\n      const protocol =\n        process.env.OAUTH_PROTOCOL ||\n        (process.env.NODE_ENV === 'production' ? 'https' : req.protocol);\n      const redirectUri = `${protocol}://${req.get('host')}/oauth/gmail/callback`;\n\n      const oauth2Client = new google.auth.OAuth2(clientId, clientSecret, redirectUri);\n\n      // Exchange authorization code for tokens",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/OAuthService.ts",
        "start": 165,
        "end": 173,
        "startLoc": {
          "line": 165,
          "column": 7,
          "position": 1282
        },
        "endLoc": {
          "line": 173,
          "column": 42,
          "position": 1375
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/OAuthService.ts",
        "start": 44,
        "end": 52,
        "startLoc": {
          "line": 44,
          "column": 5,
          "position": 290
        },
        "endLoc": {
          "line": 52,
          "column": 52,
          "position": 383
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= async (req: Request, res: Response) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      throw new AppError('Validation failed', 400);\n    }\n\n    const userId = (req as any).user?.id;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/controllers/NodeExecutionController.ts",
        "start": 16,
        "end": 22,
        "startLoc": {
          "line": 16,
          "column": 2,
          "position": 107
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 192
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/controllers/OAuthController.ts",
        "start": 16,
        "end": 22,
        "startLoc": {
          "line": 16,
          "column": 2,
          "position": 107
        },
        "endLoc": {
          "line": 22,
          "column": 3,
          "position": 193
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "(id, userId);\n    }\n\n    // No custom field to check - only MongoDB _id exists\n    if (!credential) {\n      if (!this.isValidObjectId(id)) {\n        throw new AppError(\n          `Invalid credential ID format: ${id}. This appears to be a temporary ID. Please refresh and try again.`,\n          400\n        );\n      } else {\n        throw new AppError('Credential not found', 404);\n      }\n    }\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 106,
        "end": 120,
        "startLoc": {
          "line": 106,
          "column": 17,
          "position": 703
        },
        "endLoc": {
          "line": 120,
          "column": 2,
          "position": 794
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 80,
        "end": 95,
        "startLoc": {
          "line": 80,
          "column": 18,
          "position": 523
        },
        "endLoc": {
          "line": 95,
          "column": 6,
          "position": 615
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(id, userId);\n    }\n\n    // No custom field to check - only MongoDB _id exists\n    if (!credential) {\n      if (!this.isValidObjectId(id)) {\n        throw new AppError(\n          `Invalid credential ID format: ${id}. This appears to be a temporary ID. Please refresh and try again.`,\n          400\n        );\n      } else {\n        throw new AppError('Credential not found', 404);\n      }\n    }\n\n    let",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 129,
        "end": 144,
        "startLoc": {
          "line": 129,
          "column": 26,
          "position": 854
        },
        "endLoc": {
          "line": 144,
          "column": 4,
          "position": 946
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 80,
        "end": 95,
        "startLoc": {
          "line": 80,
          "column": 18,
          "position": 523
        },
        "endLoc": {
          "line": 95,
          "column": 6,
          "position": 615
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "const oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\n\n    oauth2Client.setCredentials({\n      refresh_token: refreshToken,\n    });\n\n    try {\n      // Refresh the access token\n      await oauth2Client.refreshAccessToken();\n\n      // Test Gmail API access\n      const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n      const profile = await gmail.users.getProfile({ userId: 'me' });\n\n      // Test basic functionality by listing a few messages\n      const messages = await gmail.users.messages.list({\n        userId: 'me',\n        maxResults: 1,\n      });\n\n      return {\n        success",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 314,
        "end": 335,
        "startLoc": {
          "line": 314,
          "column": 5,
          "position": 2359
        },
        "endLoc": {
          "line": 335,
          "column": 8,
          "position": 2526
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/OAuthService.ts",
        "start": 269,
        "end": 290,
        "startLoc": {
          "line": 269,
          "column": 5,
          "position": 2152
        },
        "endLoc": {
          "line": 290,
          "column": 10,
          "position": 2319
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        );\n      }\n\n      const data = await response.json();\n\n      return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 428,
        "end": 440,
        "startLoc": {
          "line": 428,
          "column": 2,
          "position": 3281
        },
        "endLoc": {
          "line": 440,
          "column": 7,
          "position": 3388
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 374,
        "end": 385,
        "startLoc": {
          "line": 374,
          "column": 2,
          "position": 2838
        },
        "endLoc": {
          "line": 385,
          "column": 6,
          "position": 2944
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ",\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        );\n      }\n\n      const data = await response.json();\n\n      return {\n        success: true,\n        message: 'Google AI API connection successful'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 525,
        "end": 541,
        "startLoc": {
          "line": 525,
          "column": 2,
          "position": 4032
        },
        "endLoc": {
          "line": 541,
          "column": 38,
          "position": 4161
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 427,
        "end": 442,
        "startLoc": {
          "line": 427,
          "column": 2,
          "position": 3276
        },
        "endLoc": {
          "line": 442,
          "column": 38,
          "position": 3403
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        );\n      }\n\n      const data = await response.json();\n      const deploymentCount",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 573,
        "end": 586,
        "startLoc": {
          "line": 573,
          "column": 7,
          "position": 4418
        },
        "endLoc": {
          "line": 586,
          "column": 16,
          "position": 4537
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/services/CredentialService.ts",
        "start": 372,
        "end": 385,
        "startLoc": {
          "line": 372,
          "column": 2,
          "position": 2827
        },
        "endLoc": {
          "line": 385,
          "column": 11,
          "position": 2946
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "if (!userId) {\n      res.status(400).json(ApiResponse.error('User ID is required'));\n      return;\n    }\n\n    const filter: any = {\n      'participants.userId': userId,\n    };\n\n    if (active !== undefined) {\n      filter.isActive = active === 'true';\n    }\n\n    const sessions = await CollaborationSession.find(filter)\n      .populate('workflowId', 'name description')\n      .sort({ createdAt: -1 })\n      .limit(Number(limit))\n      .skip((Number(page) - 1) * Number(limit));\n\n    const total = await CollaborationSession.countDocuments(filter);\n\n    res.json(\n      ApiResponse.success({\n        sessions: sessions.map((s) => s.toObject()),\n        pagination: {\n          total,\n          page: Number(page),\n          limit: Number(limit),\n          pages: Math.ceil(total / Number(limit)),\n        },\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 102,
        "end": 134,
        "startLoc": {
          "line": 102,
          "column": 5,
          "position": 781
        },
        "endLoc": {
          "line": 134,
          "column": 2,
          "position": 1065
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/session-management.ts",
        "start": 1,
        "end": 38,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 38,
          "column": 4,
          "position": 276
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": "public getSessionOperations = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { sessionId } = req.params;\n    const { limit = 50, page = 1, status, type } = req.query;\n\n    if (!sessionId) {\n      res.status(400).json(ApiResponse.error('Session ID is required'));\n      return;\n    }\n\n    const filter: any = { sessionId };\n\n    if (status) {\n      filter.status = status;\n    }\n\n    if (type) {\n      filter.type = type;\n    }\n\n    const operations = await Operation.find(filter)\n      .populate('authorId', 'name email')\n      .sort({ timestamp: -1 })\n      .limit(Number(limit))\n      .skip((Number(page) - 1) * Number(limit));\n\n    const total = await Operation.countDocuments(filter);\n\n    res.json(\n      ApiResponse.success({\n        operations: operations.map((op) => op.toObject()),\n        pagination: {\n          total,\n          page: Number(page),\n          limit: Number(limit),\n          pages: Math.ceil(total / Number(limit)),\n        },\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 140,
        "end": 178,
        "startLoc": {
          "line": 140,
          "column": 3,
          "position": 1072
        },
        "endLoc": {
          "line": 178,
          "column": 2,
          "position": 1449
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/session-management.ts",
        "start": 39,
        "end": 85,
        "startLoc": {
          "line": 39,
          "column": 1,
          "position": 278
        },
        "endLoc": {
          "line": 85,
          "column": 4,
          "position": 657
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "public updateSessionConfig = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { sessionId } = req.params;\n    const { settings } = req.body;\n\n    if (!sessionId) {\n      res.status(400).json(ApiResponse.error('Session ID is required'));\n      return;\n    }\n\n    const session = await CollaborationSession.findOne({\n      sessionId,\n      isActive: true,\n    });\n\n    if (!session) {\n      res.status(404).json(ApiResponse.error('Session not found'));\n      return;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 184,
        "end": 200,
        "startLoc": {
          "line": 184,
          "column": 3,
          "position": 1456
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1622
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/session-management.ts",
        "start": 86,
        "end": 104,
        "startLoc": {
          "line": 86,
          "column": 1,
          "position": 659
        },
        "endLoc": {
          "line": 104,
          "column": 2,
          "position": 825
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\n\n    if (!sessionId) {\n      res.status(400).json(ApiResponse.error('Session ID is required'));\n      return;\n    }\n\n    const session = await CollaborationSession.findOne({\n      sessionId,\n      isActive: true,\n    });\n\n    if (!session) {\n      res.status(404).json(ApiResponse.error('Session not found'));\n      return;\n    }\n\n    // End the session",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 225,
        "end": 242,
        "startLoc": {
          "line": 225,
          "column": 7,
          "position": 1775
        },
        "endLoc": {
          "line": 242,
          "column": 19,
          "position": 1885
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/session-management.ts",
        "start": 90,
        "end": 203,
        "startLoc": {
          "line": 90,
          "column": 5,
          "position": 722
        },
        "endLoc": {
          "line": 203,
          "column": 19,
          "position": 1629
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "= asyncHandler(\n    async (req: Request, res: Response): Promise<void> => {\n      const { workflowId } = req.params;\n      const { dateRange = 7 } = req.query; // days\n\n      if (!workflowId) {\n        res.status(400).json(ApiResponse.error('Workflow ID is required'));\n        return;\n      }\n\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - Number(dateRange));\n\n      // Get session analytics",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 259,
        "end": 272,
        "startLoc": {
          "line": 259,
          "column": 2,
          "position": 1975
        },
        "endLoc": {
          "line": 272,
          "column": 25,
          "position": 2118
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-resolution.ts",
        "start": 18,
        "end": 31,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 83
        },
        "endLoc": {
          "line": 31,
          "column": 25,
          "position": 224
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "const analytics = {\n        dateRange: Number(dateRange),\n        sessions: sessionStats[0] || {\n          totalSessions: 0,\n          activeSessions: 0,\n          averageParticipants: 0,\n          totalParticipants: 0,\n        },\n        operations: operationStats.reduce(\n          (acc, stat) => {\n            acc[stat._id] = stat.count;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n      };\n\n      res.json(ApiResponse.success(analytics));\n    }\n  );",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 309,
        "end": 328,
        "startLoc": {
          "line": 309,
          "column": 7,
          "position": 2398
        },
        "endLoc": {
          "line": 328,
          "column": 2,
          "position": 2549
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/sessioncontroller/collaboration-analytics.ts",
        "start": 11,
        "end": 31,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 36
        },
        "endLoc": {
          "line": 31,
          "column": 2,
          "position": 185
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": "if (!workflowId || !content) {\n      res.status(400).json(ApiResponse.error('Workflow ID and content are required'));\n      return;\n    }\n\n    // Get user from request (assuming auth middleware sets req.user)\n    const authorId = (req as any).user?.id;\n    if (!authorId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    try {\n      const comment = new Comment({\n        workflowId,\n        authorId,\n        parentCommentId,\n        content,\n        mentions,\n        attachments,\n        position,\n        visibility,\n        priority,\n        tags,\n        status: 'open',\n      });\n\n      await comment.save();\n      await comment.populate('authorId', 'name email avatar');\n\n      res.status(201).json(\n        ApiResponse.success({\n          comment: comment.toObject(),\n          message: 'Comment created successfully',\n        })\n      );\n    } catch (error) {\n      console.error('Error creating comment:', error);\n      res.status(500).json(ApiResponse.error('Failed to create comment'));\n    }\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 103,
        "end": 143,
        "startLoc": {
          "line": 103,
          "column": 5,
          "position": 835
        },
        "endLoc": {
          "line": 143,
          "column": 2,
          "position": 1125
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-management.ts",
        "start": 3,
        "end": 48,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 48,
          "column": 4,
          "position": 292
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": "public updateComment = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n    const { content, visibility, priority, tags, status } = req.body;\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    // Check if user is author or has permission to edit\n    const userId = (req as any).user?.id;\n    if (comment.authorId !== userId) {\n      res.status(403).json(ApiResponse.error('Not authorized to edit this comment'));\n      return;\n    }\n\n    // Store edit history if content is being changed\n    if (content && content !== comment.content) {\n      comment.editHistory.push({\n        timestamp: new Date(),\n        previousContent: comment.content,\n        editedBy: userId,\n      });\n      comment.content = content;\n    }\n\n    // Update other fields\n    if (visibility) comment.visibility = visibility;\n    if (priority) comment.priority = priority;\n    if (tags) comment.tags = tags;\n    if (status) comment.status = status;\n\n    await comment.save();\n    await comment.populate('authorId', 'name email avatar');\n\n    res.json(\n      ApiResponse.success({\n        comment: comment.toObject(),\n        message: 'Comment updated successfully',\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 149,
        "end": 196,
        "startLoc": {
          "line": 149,
          "column": 3,
          "position": 1132
        },
        "endLoc": {
          "line": 196,
          "column": 2,
          "position": 1579
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-management.ts",
        "start": 49,
        "end": 104,
        "startLoc": {
          "line": 49,
          "column": 1,
          "position": 294
        },
        "endLoc": {
          "line": 104,
          "column": 1,
          "position": 743
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "public deleteComment = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n\n    // Check if user is author or has admin permissions\n    if (comment.authorId !== userId) {\n      res.status(403).json(ApiResponse.error('Not authorized to delete this comment'));\n      return;\n    }\n\n    await Comment.findByIdAndDelete(commentId);\n\n    res.json(ApiResponse.success({ message: 'Comment deleted successfully' }));\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 202,
        "end": 227,
        "startLoc": {
          "line": 202,
          "column": 3,
          "position": 1586
        },
        "endLoc": {
          "line": 227,
          "column": 2,
          "position": 1830
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 2,
        "end": 34,
        "startLoc": {
          "line": 2,
          "column": 3,
          "position": 4
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 250
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": "public addReply = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n    const { content, mentions = [] } = req.body;\n\n    if (!commentId || !content) {\n      res.status(400).json(ApiResponse.error('Comment ID and content are required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    const reply = {\n      authorId: userId,\n      content,\n      mentions,\n      timestamp: new Date(),\n    };\n\n    comment.thread.push(reply);\n    await comment.save();\n    await comment.populate('authorId', 'name email avatar');\n\n    res.status(201).json(\n      ApiResponse.success({\n        reply,\n        comment: comment.toObject(),\n        message: 'Reply added successfully',\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 233,
        "end": 272,
        "startLoc": {
          "line": 233,
          "column": 3,
          "position": 1837
        },
        "endLoc": {
          "line": 272,
          "column": 2,
          "position": 2192
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 35,
        "end": 82,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 252
        },
        "endLoc": {
          "line": 82,
          "column": 4,
          "position": 609
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "public addReaction = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n    const { type } = req.body;\n\n    if (!commentId || !type) {\n      res.status(400).json(ApiResponse.error('Comment ID and reaction type are required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    // Check if user already reacted\n    const existingReactionIndex = comment.reactions.findIndex((r) => r.userId === userId);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 278,
        "end": 300,
        "startLoc": {
          "line": 278,
          "column": 3,
          "position": 2199
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2449
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-threads.ts",
        "start": 83,
        "end": 107,
        "startLoc": {
          "line": 83,
          "column": 1,
          "position": 611
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 861
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "if (existingReactionIndex !== -1) {\n      // Update existing reaction\n      comment.reactions[existingReactionIndex].type = type;\n      comment.reactions[existingReactionIndex].timestamp = new Date();\n    } else {\n      // Add new reaction\n      comment.reactions.push({\n        userId,\n        type,\n        timestamp: new Date(),\n      });\n    }\n\n    await comment.save();\n\n    res.json(\n      ApiResponse.success({\n        reactions: comment.reactions,\n        message: 'Reaction added successfully',\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 302,
        "end": 323,
        "startLoc": {
          "line": 302,
          "column": 5,
          "position": 2453
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2601
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 144
        }
      }
    },
    {
      "format": "typescript",
      "lines": 37,
      "fragment": "public removeReaction = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    const reactionIndex = comment.reactions.findIndex((r) => r.userId === userId);\n    if (reactionIndex === -1) {\n      res.status(404).json(ApiResponse.error('User reaction not found'));\n      return;\n    }\n\n    // Remove user's reaction\n    comment.reactions.splice(reactionIndex, 1);\n    await comment.save();\n\n    res.json(\n      ApiResponse.success({\n        reactions: comment.reactions,\n        message: 'Reaction removed successfully',\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 329,
        "end": 365,
        "startLoc": {
          "line": 329,
          "column": 3,
          "position": 2608
        },
        "endLoc": {
          "line": 365,
          "column": 2,
          "position": 2945
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 28,
        "end": 72,
        "startLoc": {
          "line": 28,
          "column": 1,
          "position": 146
        },
        "endLoc": {
          "line": 72,
          "column": 4,
          "position": 485
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "public resolveComment = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n    const { resolution } = req.body;\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    if (comment.status === 'resolved') {\n      res.status(409).json(ApiResponse.error('Comment is already resolved'));\n      return;\n    }\n\n    comment.status = 'resolved';\n    comment.resolvedBy = userId;\n    comment.resolvedAt = new Date();\n    // Note: resolution field would need to be added to IComment interface if needed",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 371,
        "end": 400,
        "startLoc": {
          "line": 371,
          "column": 3,
          "position": 2952
        },
        "endLoc": {
          "line": 400,
          "column": 81,
          "position": 3244
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-reactions.ts",
        "start": 73,
        "end": 104,
        "startLoc": {
          "line": 73,
          "column": 1,
          "position": 487
        },
        "endLoc": {
          "line": 104,
          "column": 81,
          "position": 778
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "await comment.save();\n    await comment.populate('authorId', 'name email avatar');\n    await comment.populate('resolvedBy', 'name email avatar');\n\n    res.json(\n      ApiResponse.success({\n        comment: comment.toObject(),\n        message: 'Comment resolved successfully',\n      })\n    );\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 402,
        "end": 412,
        "startLoc": {
          "line": 402,
          "column": 5,
          "position": 3248
        },
        "endLoc": {
          "line": 412,
          "column": 2,
          "position": 3328
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-resolution.ts",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 4,
          "position": 77
        }
      }
    },
    {
      "format": "typescript",
      "lines": 83,
      "fragment": "public getCommentAnalytics = asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { workflowId } = req.params;\n    const { dateRange = 7 } = req.query; // days\n\n    if (!workflowId) {\n      res.status(400).json(ApiResponse.error('Workflow ID is required'));\n      return;\n    }\n\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - Number(dateRange));\n\n    // Get comment analytics\n    const commentStats = await Comment.aggregate([\n      {\n        $match: {\n          workflowId,\n          createdAt: { $gte: startDate },\n        },\n      },\n      {\n        $group: {\n          _id: null,\n          totalComments: { $sum: 1 },\n          openComments: {\n            $sum: { $cond: [{ $eq: ['$status', 'open'] }, 1, 0] },\n          },\n          resolvedComments: {\n            $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] },\n          },\n          totalReplies: { $sum: { $size: '$thread' } },\n          totalReactions: { $sum: { $size: '$reactions' } },\n          averageRepliesPerComment: { $avg: { $size: '$thread' } },\n        },\n      },\n    ]);\n\n    // Get comment activity by day\n    const dailyActivity = await Comment.aggregate([\n      {\n        $match: {\n          workflowId,\n          createdAt: { $gte: startDate },\n        },\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: { format: '%Y-%m-%d', date: '$createdAt' },\n          },\n          count: { $sum: 1 },\n        },\n      },\n      { $sort: { _id: 1 } },\n    ]);\n\n    // Get top commenters\n    const topCommenters = await Comment.aggregate([\n      {\n        $match: {\n          workflowId,\n          createdAt: { $gte: startDate },\n        },\n      },\n      {\n        $group: {\n          _id: '$authorId',\n          commentCount: { $sum: 1 },\n        },\n      },\n      { $sort: { commentCount: -1 } },\n      { $limit: 5 },\n      {\n        $lookup: {\n          from: 'users',\n          localField: '_id',\n          foreignField: '_id',\n          as: 'author',\n        },\n      },\n      {\n        $unwind: '$author',\n      },",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 418,
        "end": 500,
        "startLoc": {
          "line": 418,
          "column": 3,
          "position": 3335
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 4043
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-resolution.ts",
        "start": 17,
        "end": 101,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 79
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 787
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "const analytics = {\n      dateRange: Number(dateRange),\n      summary: commentStats[0] || {\n        totalComments: 0,\n        openComments: 0,\n        resolvedComments: 0,\n        totalReplies: 0,\n        totalReactions: 0,\n        averageRepliesPerComment: 0,\n      },\n      dailyActivity,\n      topCommenters,\n    };\n\n    res.json(ApiResponse.success(analytics));\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 511,
        "end": 526,
        "startLoc": {
          "line": 511,
          "column": 5,
          "position": 4097
        },
        "endLoc": {
          "line": 526,
          "column": 2,
          "position": 4204
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/commentcontroller/comment-analytics.ts",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 44
        },
        "endLoc": {
          "line": 27,
          "column": 2,
          "position": 149
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "await user.save();\n\n    const permissions = this.permissionService.getEffectivePermissions(user.role, user.permissions);\n    const expiresIn = 7 * 24 * 60 * 60; // 7 days in seconds\n\n    return {\n      user: {\n        id: user._id.toString(),\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        fullName: user.fullName,\n        role: user.role,\n        permissions,\n        organizationId: user.organizationId,\n        department: user.department,\n        isEmailVerified: user.isEmailVerified,\n        lastLogin",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 258,
        "end": 275,
        "startLoc": {
          "line": 258,
          "column": 5,
          "position": 2054
        },
        "endLoc": {
          "line": 275,
          "column": 10,
          "position": 2214
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 180,
        "end": 197,
        "startLoc": {
          "line": 180,
          "column": 5,
          "position": 1444
        },
        "endLoc": {
          "line": 197,
          "column": 12,
          "position": 1604
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n\n    // Generate tokens\n    const accessToken = this.generateToken(user);\n    const refreshToken = this.generateRefreshToken(user._id.toString());\n\n    // Store refresh token\n    if (!user.refreshTokens) {\n      user.refreshTokens = [];\n    }\n    user.refreshTokens.push(refreshToken);\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 409,
        "end": 420,
        "startLoc": {
          "line": 409,
          "column": 4,
          "position": 3331
        },
        "endLoc": {
          "line": 420,
          "column": 3,
          "position": 3416
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 169,
        "end": 180,
        "startLoc": {
          "line": 169,
          "column": 2,
          "position": 1359
        },
        "endLoc": {
          "line": 180,
          "column": 6,
          "position": 1444
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "if (!user.refreshTokens) {\n      user.refreshTokens = [];\n    }\n    user.refreshTokens.push(refreshToken);\n    if (user.refreshTokens.length > 5) {\n      user.refreshTokens = user.refreshTokens.slice(-5);\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 416,
        "end": 422,
        "startLoc": {
          "line": 416,
          "column": 5,
          "position": 3379
        },
        "endLoc": {
          "line": 422,
          "column": 2,
          "position": 3451
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 251,
        "end": 256,
        "startLoc": {
          "line": 251,
          "column": 5,
          "position": 1977
        },
        "endLoc": {
          "line": 256,
          "column": 27,
          "position": 2048
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "return {\n      user: {\n        id: user._id.toString(),\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        fullName: user.fullName,\n        role: user.role,\n        permissions,\n        organizationId: user.organizationId,\n        department: user.department,\n        isEmailVerified: user.isEmailVerified,\n        lastLogin: new Date(),\n        preferences: user.preferences,\n      },\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn,\n      expiresAt: new Date(Date.now() + expiresIn * 1000).toISOString(),\n    };\n  }\n\n  /**\n   * Verify email address\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 428,
        "end": 453,
        "startLoc": {
          "line": 428,
          "column": 5,
          "position": 3512
        },
        "endLoc": {
          "line": 453,
          "column": 6,
          "position": 3691
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/services/AuthService.ts",
        "start": 185,
        "end": 288,
        "startLoc": {
          "line": 185,
          "column": 5,
          "position": 1504
        },
        "endLoc": {
          "line": 288,
          "column": 6,
          "position": 2293
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n\n    // Transform response to match frontend expectations\n    const responseData = {\n      user: result.user,\n      token: result.accessToken, // Frontend expects 'token', backend returns 'accessToken'\n      refreshToken: result.refreshToken,\n      permissions: result.user.permissions || [],\n      sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    };\n\n    logger.info(`User logged in: ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts",
        "start": 46,
        "end": 57,
        "startLoc": {
          "line": 46,
          "column": 9,
          "position": 435
        },
        "endLoc": {
          "line": 57,
          "column": 18,
          "position": 542
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts",
        "start": 24,
        "end": 35,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 19,
          "position": 328
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ">;\n\n  constructor(options: ValidationOptions) {\n    this.options = {\n      validateQuery: false,\n      validateBody: true,\n      validateParams: false,\n      validateHeaders: false,\n      validateCookies: false,\n      validateFiles: false,\n      allowUnknown: false,\n      stripUnknown: true,\n      abortEarly: true,\n      messages: {},\n      ...options,\n      onError: options.onError || (() => {}),\n      onSuccess: options.onSuccess || (() => {})\n    };\n\n    this",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/CustomValidator.ts",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 15,
          "position": 95
        },
        "endLoc": {
          "line": 28,
          "column": 5,
          "position": 242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts",
        "start": 7,
        "end": 25,
        "startLoc": {
          "line": 7,
          "column": 18,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 222
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(\n  name: string,\n  validateFn: (context: ValidationContext) => Promise<ValidationResult>,\n  options?: {\n    description?: string;\n    applies?: (context: ValidationContext) => Promise<boolean>;\n    dependencies?: ValidationRule[];\n  }\n):",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts",
        "start": 215,
        "end": 223,
        "startLoc": {
          "line": 215,
          "column": 11,
          "position": 1403
        },
        "endLoc": {
          "line": 223,
          "column": 2,
          "position": 1480
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 12,
          "position": 364
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 443
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ";\n\n  constructor(options: UploadOptions) {\n    this.options = {\n      maxFileSize: 5 * 1024 * 1024,\n      maxFiles: 1,\n      allowedTypes: ['image/*', 'application/pdf'],\n      preserveOriginal: false,\n      generateUniqueName: true,\n      validateMimeType: true,\n      createDirectory: true,\n      overwrite: false,\n      uploadDir",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/LocalStorageEngine.ts",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 181
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 274
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 133
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 226
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ">;\n\n  constructor(options: UploadOptions) {\n    this.options = {\n      maxFileSize: 5 * 1024 * 1024,\n      maxFiles: 1,\n      allowedTypes: ['image/*', 'application/pdf'],\n      preserveOriginal: false,\n      generateUniqueName: true,\n      validateMimeType: true,\n      createDirectory: true,\n      overwrite: false,\n      ...",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts",
        "start": 7,
        "end": 19,
        "startLoc": {
          "line": 7,
          "column": 14,
          "position": 74
        },
        "endLoc": {
          "line": 19,
          "column": 4,
          "position": 168
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 15,
          "position": 132
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 226
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "}\n\n  /**\n   * Match MIME type against pattern\n   */\n  private matchMimeType(mime: string, pattern: string): boolean {\n    if (pattern === '*/*' || pattern === mime) {\n      return true;\n    }\n\n    if (pattern.endsWith('/*')) {\n      const [typePattern] = pattern.split('/');\n      const [type] = mime.split('/');\n      return typePattern === type;\n    }\n\n    return false;\n  }\n\n  /**\n   * Validate type-specific size limits\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts",
        "start": 59,
        "end": 80,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 432
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 564
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 177,
        "end": 198,
        "startLoc": {
          "line": 177,
          "column": 3,
          "position": 1252
        },
        "endLoc": {
          "line": 198,
          "column": 6,
          "position": 1384
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ">\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 11,
          "position": 437
        },
        "endLoc": {
          "line": 107,
          "column": 23,
          "position": 526
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 346,
        "end": 359,
        "startLoc": {
          "line": 346,
          "column": 2,
          "position": 2902
        },
        "endLoc": {
          "line": 359,
          "column": 28,
          "position": 2991
        }
      }
    },
    {
      "format": "typescript",
      "lines": 78,
      "fragment": "WorkflowService } from '../index';\n\n// Validation schemas\nconst CreateWorkflowSchema = z.object({\n  name: z.string().min(1).max(255),\n  description: z.string().optional(),\n  nodes: z\n    .array(\n      z.object({\n        id: z.string(),\n        type: z.string(),\n        position: z.object({ x: z.number(), y: z.number() }),\n        data: z.record(z.any()),\n      })\n    )\n    .min(1),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n    })\n  ),\n  settings: z.object({\n    timeout: z.number().default(30000),\n    retries: z.number().default(3),\n    errorHandling: z.enum(['stop', 'continue', 'rollback']).default('stop'),\n  }),\n  organizationId: z.string(),\n  tags: z.array(z.string()).optional(),\n  permissions: z.object({\n    public: z.boolean().default(false),\n    sharedWith: z.array(z.string()).default([]),\n    roles: z.record(z.array(z.string())).default({}),\n  }),\n});\n\nconst UpdateWorkflowSchema = CreateWorkflowSchema.partial();\n\nconst ListWorkflowsSchema = z.object({\n  organizationId: z.string().optional(),\n  userId: z.string().optional(),\n  status: z.enum(['draft', 'active', 'archived']).optional(),\n  tags: z.array(z.string()).optional(),\n  search: z.string().optional(),\n  page: z.coerce.number().default(1),\n  limit: z.coerce.number().min(1).max(100).default(20),\n  sortBy: z.string().optional(),\n  sortOrder: z.enum(['asc', 'desc']).optional(),\n});\n\nconst ExecuteWorkflowSchema = z.object({\n  input: z.record(z.any()).default({}),\n  environment: z.string().default('production'),\n  async: z.boolean().default(true),\n});\n\nconst ShareWorkflowSchema = z.object({\n  userIds: z.array(z.string()),\n  permissions: z.array(z.enum(['view', 'edit', 'execute'])).default(['view']),\n});\n\nexport class WorkflowController {\n  constructor(private workflowService: WorkflowService) {}\n\n  async create(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const validated = CreateWorkflowSchema.parse(req.body);\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.create(validated, userId);\n\n      res.status(201).json({\n        success: true,\n        data: workflow,\n        message: 'Workflow created successfully',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 4,
        "end": 81,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 56
        },
        "endLoc": {
          "line": 81,
          "column": 2,
          "position": 985
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-core.ts",
        "start": 4,
        "end": 82,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 56
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 987
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ",\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          success: false,\n          errors: error.errors,\n          message: 'Validation failed',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async list",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 81,
        "end": 96,
        "startLoc": {
          "line": 81,
          "column": 32,
          "position": 985
        },
        "endLoc": {
          "line": 96,
          "column": 5,
          "position": 1085
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-operations.ts",
        "start": 21,
        "end": 37,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 194
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 290
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "});\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async list(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const validated = ListWorkflowsSchema.parse(req.query);\n\n      const filters = {\n        organizationId: validated.organizationId,\n        userId: validated.userId || (req as any).user?.id,\n        status: validated.status,\n        tags: validated.tags,\n        search: validated.search,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 89,
        "end": 105,
        "startLoc": {
          "line": 89,
          "column": 9,
          "position": 1054
        },
        "endLoc": {
          "line": 105,
          "column": 2,
          "position": 1203
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-core.ts",
        "start": 89,
        "end": 106,
        "startLoc": {
          "line": 89,
          "column": 9,
          "position": 1052
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 1204
        }
      }
    },
    {
      "format": "typescript",
      "lines": 69,
      "fragment": "const pagination = {\n        page: validated.page,\n        limit: validated.limit,\n        sort: validated.sortBy\n          ? ({\n              [validated.sortBy]: validated.sortOrder === 'asc' ? 1 : -1,\n            } as Record<string, 1 | -1>)\n          : undefined,\n      };\n\n      const result = await this.workflowService.list(filters, pagination);\n\n      res.json({\n        success: true,\n        data: result.workflows,\n        pagination: {\n          page: validated.page,\n          limit: validated.limit,\n          total: result.total,\n          totalPages: Math.ceil(result.total / validated.limit),\n        },\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          success: false,\n          errors: error.errors,\n          message: 'Validation failed',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async getById(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      // Check permissions\n      const userId = (req as any).user?.id;\n      if (!this.hasViewPermission(workflow, userId)) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        data: workflow,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async update",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 108,
        "end": 176,
        "startLoc": {
          "line": 108,
          "column": 7,
          "position": 1211
        },
        "endLoc": {
          "line": 176,
          "column": 7,
          "position": 1762
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-operations.ts",
        "start": 1,
        "end": 71,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 541
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "update(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const validated = UpdateWorkflowSchema.parse(req.body);\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.update(id, validated, userId);\n\n      res.json({\n        success: true,\n        data: workflow,\n        message: 'Workflow updated successfully',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 176,
        "end": 187,
        "startLoc": {
          "line": 176,
          "column": 2,
          "position": 1762
        },
        "endLoc": {
          "line": 187,
          "column": 2,
          "position": 1902
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-operations.ts",
        "start": 72,
        "end": 86,
        "startLoc": {
          "line": 72,
          "column": 1,
          "position": 543
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "if ((error as any).message?.includes('permissions')) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async delete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 201,
        "end": 212,
        "startLoc": {
          "line": 201,
          "column": 2,
          "position": 2038
        },
        "endLoc": {
          "line": 212,
          "column": 7,
          "position": 2118
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts",
        "start": 25,
        "end": 36,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 190
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 267
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "}\n  }\n\n  async delete(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const userId = (req as any).user?.id;\n\n      const success = await this.workflowService.delete(id, userId);\n\n      if (!success) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Workflow deleted successfully',\n      });\n    } catch (error) {\n      if ((error as any).message?.includes('permissions')) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async execute",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 209,
        "end": 243,
        "startLoc": {
          "line": 209,
          "column": 5,
          "position": 2109
        },
        "endLoc": {
          "line": 243,
          "column": 8,
          "position": 2379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts",
        "start": 1,
        "end": 36,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 267
        }
      }
    },
    {
      "format": "typescript",
      "lines": 53,
      "fragment": "execute(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const validated = ExecuteWorkflowSchema.parse(req.body);\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      if (!this.hasExecutePermission(workflow, userId)) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n        return;\n      }\n\n      // Emit execution request to execution service\n      this.workflowService.emit('execution.requested', {\n        workflowId: id,\n        userId,\n        input: validated.input,\n        environment: validated.environment,\n        async: validated.async,\n      });\n\n      if (validated.async) {\n        res.json({\n          success: true,\n          message: 'Workflow execution started',\n          executionId: `exec-${Date.now()}`, // Would be generated by execution service\n        });\n      } else {\n        // For sync execution, would need to wait for completion\n        res.json({\n          success: true,\n          message: 'Workflow execution completed',\n          result: {}, // Would contain actual execution result\n        });\n      }\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getExecutions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 243,
        "end": 295,
        "startLoc": {
          "line": 243,
          "column": 2,
          "position": 2379
        },
        "endLoc": {
          "line": 295,
          "column": 14,
          "position": 2783
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts",
        "start": 37,
        "end": 91,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 269
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 671
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "getExecutions(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const { page = 1, limit = 20 } = req.query;\n\n      // This would query the executions collection\n      res.json({\n        success: true,\n        data: [],\n        pagination: {\n          page: Number(page),\n          limit: Number(limit),\n          total: 0,\n          totalPages: 0",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 295,
        "end": 308,
        "startLoc": {
          "line": 295,
          "column": 2,
          "position": 2783
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2922
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-execution.ts",
        "start": 92,
        "end": 107,
        "startLoc": {
          "line": 92,
          "column": 1,
          "position": 673
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 813
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "} catch (error) {\n      next(error);\n    }\n  }\n\n  async share(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const validated = ShareWorkflowSchema.parse(req.body);\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      if (!this.hasSharePermission(workflow, userId)) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n        return;\n      }\n\n      // Update workflow permissions\n      const updatedPermissions = {\n        ...workflow.permissions,\n        sharedWith: [...new Set([...workflow.permissions.sharedWith, ...validated.userIds])],\n      };\n\n      await this.workflowService.update(id, { permissions: updatedPermissions }, userId);\n\n      res.json({\n        success: true,\n        message: 'Workflow shared successfully',\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async duplicate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 311,
        "end": 357,
        "startLoc": {
          "line": 311,
          "column": 5,
          "position": 2935
        },
        "endLoc": {
          "line": 357,
          "column": 10,
          "position": 3309
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-sharing.ts",
        "start": 3,
        "end": 51,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 6
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 375
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": "duplicate(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const userId = (req as any).user?.id;\n      const { name } = req.body;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      if (!this.hasViewPermission(workflow, userId)) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n        return;\n      }\n\n      // Create a copy\n      const duplicated = await this.workflowService.create(\n        {\n          ...workflow,\n          name: name || `${workflow.name} (Copy)`,\n          id: undefined as any,\n          version: undefined as any,\n          createdAt: undefined as any,\n          updatedAt: undefined as any,\n        },\n        userId\n      );\n\n      res.json({\n        success: true,\n        data: duplicated,\n        message: 'Workflow duplicated successfully',\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getVersions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 357,
        "end": 404,
        "startLoc": {
          "line": 357,
          "column": 2,
          "position": 3309
        },
        "endLoc": {
          "line": 404,
          "column": 12,
          "position": 3683
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-sharing.ts",
        "start": 52,
        "end": 101,
        "startLoc": {
          "line": 52,
          "column": 1,
          "position": 377
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 749
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "} catch (error) {\n      next(error);\n    }\n  }\n\n  async createVersion(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { id } = req.params;\n      const { message } = req.body;\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      // Create a new version\n      const newVersion = this.incrementMajorVersion(workflow.version);\n      await this.workflowService.update(id, { version: newVersion }, userId);\n\n      res.json({\n        success: true,\n        data: { version: newVersion },\n        message: 'New version created successfully',\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getTemplates",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 414,
        "end": 449,
        "startLoc": {
          "line": 414,
          "column": 5,
          "position": 3771
        },
        "endLoc": {
          "line": 449,
          "column": 13,
          "position": 4069
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-versioning.ts",
        "start": 3,
        "end": 40,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 302
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": "getTemplates(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      // This would query a templates collection\n      const templates = [\n        {\n          id: 'email-automation',\n          name: 'Email Automation',\n          description: 'Automate email sending based on triggers',\n          category: 'Marketing',\n        },\n        {\n          id: 'data-sync',\n          name: 'Data Synchronization',\n          description: 'Sync data between multiple systems',\n          category: 'Integration',\n        },\n        {\n          id: 'ai-workflow',\n          name: 'AI Processing Pipeline',\n          description: 'Process data through AI models',\n          category: 'AI/ML',\n        },\n      ];\n\n      res.json({\n        success: true,\n        data: templates,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async createFromTemplate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 449,
        "end": 482,
        "startLoc": {
          "line": 449,
          "column": 2,
          "position": 4069
        },
        "endLoc": {
          "line": 482,
          "column": 19,
          "position": 4278
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-versioning.ts",
        "start": 41,
        "end": 76,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 304
        },
        "endLoc": {
          "line": 76,
          "column": 2,
          "position": 511
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "createFromTemplate(req: Request, res: Response, next: NextFunction): Promise<void> {\n    try {\n      const { templateId } = req.params;\n      const { name, organizationId } = req.body;\n      const userId = (req as any).user?.id;\n\n      // This would fetch the template and create a new workflow\n      res.json({\n        success: true,\n        message: 'Workflow created from template',\n        data: { id: 'new-workflow-id' },\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // Helper methods\n  private hasViewPermission(workflow: WorkflowDefinition, userId: string): boolean {\n    return (\n      workflow.permissions.public ||\n      workflow.createdBy === userId ||\n      workflow.permissions.sharedWith.includes(userId)\n    );\n  }\n\n  private hasExecutePermission(workflow: WorkflowDefinition, userId: string): boolean {\n    return (\n      workflow.createdBy === userId ||\n      workflow.permissions.roles[userId]?.includes('execute') ||",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 482,
        "end": 511,
        "startLoc": {
          "line": 482,
          "column": 2,
          "position": 4278
        },
        "endLoc": {
          "line": 511,
          "column": 3,
          "position": 4560
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-versioning.ts",
        "start": 77,
        "end": 114,
        "startLoc": {
          "line": 77,
          "column": 1,
          "position": 513
        },
        "endLoc": {
          "line": 114,
          "column": 3,
          "position": 793
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "return PermissionEngine.checkOwnerPermission(permission);\n    }\n\n    return false;\n  }\n\n  /**\n   * Get all permissions for a role (including inherited)\n   */\n  static getRolePermissions(role: UserRole): PermissionType[] {\n    const permissions = new Set<PermissionType>();\n\n    // Add direct role permissions\n    const directPermissions = PermissionEngine.ROLE_PERMISSIONS[role] || [];\n    directPermissions.forEach((p) => permissions.add(p));\n\n    // Add inherited permissions from lower roles\n    const inheritedRoles = PermissionEngine.ROLE_HIERARCHY[role] || [];\n    inheritedRoles.forEach((inheritedRole) => {\n      const inheritedPermissions = PermissionEngine.ROLE_PERMISSIONS[inheritedRole] || [];\n      inheritedPermissions.forEach((p) => permissions.add(p));\n    });\n\n    return Array.from(permissions);\n  }\n\n  /**\n   * Check if owner has implicit permission\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts",
        "start": 101,
        "end": 129,
        "startLoc": {
          "line": 101,
          "column": 7,
          "position": 749
        },
        "endLoc": {
          "line": 129,
          "column": 6,
          "position": 954
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-operations.ts",
        "start": 1,
        "end": 30,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 30,
          "column": 4,
          "position": 200
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "static filterResources<T extends { id: string; ownerId?: string; organizationId?: string }>(\n    user: IUser,\n    resources: T[],\n    permission: PermissionType\n  ): T[] {\n    return resources.filter((resource) =>\n      PermissionEngine.hasPermission({\n        user,\n        permission,\n        resource: {\n          type: 'resource',\n          id: resource.id,\n          ownerId: resource.ownerId,\n          organizationId: resource.organizationId,\n        },\n      })\n    );\n  }\n\n  /**\n   * Get permission diff between roles\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts",
        "start": 160,
        "end": 181,
        "startLoc": {
          "line": 160,
          "column": 3,
          "position": 1160
        },
        "endLoc": {
          "line": 181,
          "column": 6,
          "position": 1310
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-operations.ts",
        "start": 71,
        "end": 95,
        "startLoc": {
          "line": 71,
          "column": 1,
          "position": 399
        },
        "endLoc": {
          "line": 95,
          "column": 4,
          "position": 548
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "static getPermissionDiff(\n    fromRole: UserRole,\n    toRole: UserRole\n  ): {\n    added: PermissionType[];\n    removed: PermissionType[];\n  } {\n    const fromPermissions = new Set(PermissionEngine.getRolePermissions(fromRole));\n    const toPermissions = new Set(PermissionEngine.getRolePermissions(toRole));\n\n    const added: PermissionType[] = [];\n    const removed: PermissionType[] = [];\n\n    toPermissions.forEach((p) => {\n      if (!fromPermissions.has(p)) {\n        added.push(p);\n      }\n    });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts",
        "start": 182,
        "end": 199,
        "startLoc": {
          "line": 182,
          "column": 3,
          "position": 1313
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1477
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-operations.ts",
        "start": 96,
        "end": 117,
        "startLoc": {
          "line": 96,
          "column": 1,
          "position": 550
        },
        "endLoc": {
          "line": 117,
          "column": 2,
          "position": 714
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "fromPermissions.forEach((p) => {\n      if (!toPermissions.has(p)) {\n        removed.push(p);\n      }\n    });\n\n    return { added, removed };\n  }\n\n  /**\n   * Validate role change\n   */\n  static canChangeRole(actor: IUser, targetUser: IUser, newRole: UserRole): boolean {\n    // Users can't change their own role\n    if (actor.id === targetUser.id) {\n      return false;\n    }\n\n    // Only super admins can create other super admins\n    if (newRole === UserRole.SUPER_ADMIN) {\n      return actor.role === UserRole.SUPER_ADMIN;\n    }\n\n    // Admins can manage roles below them\n    if (actor.role === UserRole.ADMIN) {\n      return newRole !== UserRole.SUPER_ADMIN && newRole !== UserRole.ADMIN;\n    }\n\n    // Super admins can change any role\n    return actor.role === UserRole.SUPER_ADMIN;\n  }\n\n  /**\n   * Get resource access level for user\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts",
        "start": 201,
        "end": 235,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1481
        },
        "endLoc": {
          "line": 235,
          "column": 6,
          "position": 1708
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-utilities.ts",
        "start": 1,
        "end": 36,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 36,
          "column": 4,
          "position": 222
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "static getResourceAccess(\n    user: IUser,\n    resourceType: string\n  ): {\n    canView: boolean;\n    canCreate: boolean;\n    canEdit: boolean;\n    canDelete: boolean;\n    canExecute: boolean;\n  } {\n    const accessMap: Record<string, PermissionType[]> = {\n      workflow: [\n        PermissionType.WORKFLOW_VIEW,\n        PermissionType.WORKFLOW_CREATE,\n        PermissionType.WORKFLOW_EDIT,\n        PermissionType.WORKFLOW_DELETE,\n        PermissionType.WORKFLOW_EXECUTE,\n      ],\n      credential: [\n        PermissionType.CREDENTIAL_VIEW,\n        PermissionType.CREDENTIAL_CREATE,\n        PermissionType.CREDENTIAL_EDIT,\n        PermissionType.CREDENTIAL_DELETE,\n        PermissionType.WORKFLOW_EXECUTE, // Credentials are executed with workflows\n      ],\n      execution: [\n        PermissionType.EXECUTION_VIEW,\n        PermissionType.WORKFLOW_EXECUTE, // Creating new executions\n        PermissionType.EXECUTION_RETRY,\n        PermissionType.EXECUTION_DELETE,\n        PermissionType.EXECUTION_CANCEL,\n      ],\n    };\n\n    const permissions = accessMap[resourceType] || [];\n\n    return {\n      canView: PermissionEngine.hasPermission({ user, permission: permissions[0] }),\n      canCreate: PermissionEngine.hasPermission({ user, permission: permissions[1] }),\n      canEdit: PermissionEngine.hasPermission({ user, permission: permissions[2] }),\n      canDelete: PermissionEngine.hasPermission({ user, permission: permissions[3] }),\n      canExecute: PermissionEngine.hasPermission({ user, permission: permissions[4] }),\n    };\n  }\n}\n\nexport default PermissionEngine;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts",
        "start": 236,
        "end": 282,
        "startLoc": {
          "line": 236,
          "column": 3,
          "position": 1711
        },
        "endLoc": {
          "line": 282,
          "column": 2,
          "position": 2088
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine/permission-utilities.ts",
        "start": 37,
        "end": 87,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 224
        },
        "endLoc": {
          "line": 87,
          "column": 2,
          "position": 600
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "const options: jwt.SignOptions = {\n      expiresIn: this.config.refreshTokenExpiry,\n      issuer: this.config.issuer,\n      algorithm: 'RS256',\n    };\n\n    const token = jwt.sign(payload, this.config.refreshTokenSecret, options);\n\n    // Store refresh token data for rotation tracking\n    this.refreshTokenStore.set(tokenId, {\n      userId,\n      sessionId,\n      tokenFamily,\n      issuedAt: new Date(),\n      expiresAt,\n      used: false,\n    });\n\n    return token;\n  }\n\n  /**\n   * Verify and decode access token\n   */\n  async verifyAccessToken(token: string): Promise<IJwtPayload> {\n    try {\n      const decoded = jwt.verify(token, this.config.accessTokenSecret, {\n        issuer: this.config.issuer,\n        audience: this.config.audience,\n        algorithms: ['RS256'],\n      }) as IJwtPayload;\n\n      return decoded;\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new Error('Access token expired');\n      }\n      if (error instanceof jwt.JsonWebTokenError) {\n        throw new Error('Invalid access token');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh token rotation for enhanced security\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 102,
        "end": 148,
        "startLoc": {
          "line": 102,
          "column": 5,
          "position": 717
        },
        "endLoc": {
          "line": 148,
          "column": 6,
          "position": 1035
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-verification.ts",
        "start": 1,
        "end": 48,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 48,
          "column": 4,
          "position": 309
        }
      }
    },
    {
      "format": "typescript",
      "lines": 52,
      "fragment": "refreshTokenRotation(refreshToken: string, user: IUser): Promise<TokenPair> {\n    try {\n      // Verify refresh token\n      const decoded = jwt.verify(refreshToken, this.config.refreshTokenSecret, {\n        issuer: this.config.issuer,\n        algorithms: ['RS256'],\n      }) as any;\n\n      const tokenData = this.refreshTokenStore.get(decoded.jti);\n\n      if (!tokenData) {\n        throw new Error('Refresh token not found');\n      }\n\n      if (tokenData.used) {\n        // Token reuse detected - potential attack\n        this.revokeTokenFamily(tokenData.tokenFamily);\n        throw new Error('Refresh token reuse detected - all tokens revoked');\n      }\n\n      if (tokenData.userId !== user.id) {\n        throw new Error('Token user mismatch');\n      }\n\n      // Mark current token as used\n      tokenData.used = true;\n\n      // Generate new token pair with same family\n      const newSessionId = decoded.sessionId;\n      const newTokenFamily = tokenData.tokenFamily;\n\n      // Generate new access token\n      const accessToken = await this.generateAccessToken(user, newSessionId);\n\n      // Generate new refresh token in same family\n      const newRefreshToken = await this.generateRefreshToken(\n        user.id,\n        newSessionId,\n        newTokenFamily\n      );\n\n      return {\n        accessToken,\n        refreshToken: newRefreshToken,\n        expiresIn: this.getExpiryInSeconds(this.config.accessTokenExpiry),\n      };\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new Error('Refresh token expired');\n      }\n      if (error instanceof jwt.JsonWebTokenError) {\n        throw new Error('Invalid refresh token');",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 149,
        "end": 200,
        "startLoc": {
          "line": 149,
          "column": 2,
          "position": 1040
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1441
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-verification.ts",
        "start": 50,
        "end": 103,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 314
        },
        "endLoc": {
          "line": 103,
          "column": 2,
          "position": 716
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "}\n      throw error;\n    }\n  }\n\n  /**\n   * Revoke all tokens in a family (used when reuse is detected)\n   */\n  private revokeTokenFamily(tokenFamily: string): void {\n    for (const [tokenId, data] of this.refreshTokenStore.entries()) {\n      if (data.tokenFamily === tokenFamily) {\n        this.refreshTokenStore.delete(tokenId);\n      }\n    }\n  }\n\n  /**\n   * Revoke specific session tokens\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 201,
        "end": 219,
        "startLoc": {
          "line": 201,
          "column": 7,
          "position": 1444
        },
        "endLoc": {
          "line": 219,
          "column": 6,
          "position": 1541
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-utilities.ts",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 4,
          "position": 93
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": void {\n    const now = new Date();\n    for (const [tokenId, data] of this.refreshTokenStore.entries()) {\n      if (data.expiresAt < now) {\n        this.refreshTokenStore.delete(tokenId);\n      }\n    }\n  }\n\n  /**\n   * Convert expiry string to seconds\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 231,
        "end": 242,
        "startLoc": {
          "line": 231,
          "column": 2,
          "position": 1626
        },
        "endLoc": {
          "line": 242,
          "column": 6,
          "position": 1709
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-utilities.ts",
        "start": 35,
        "end": 47,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 177
        },
        "endLoc": {
          "line": 47,
          "column": 4,
          "position": 258
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "private getExpiryInSeconds(expiry: string): number {\n    const units: { [key: string]: number } = {\n      s: 1,\n      m: 60,\n      h: 3600,\n      d: 86400,\n      w: 604800,\n    };\n\n    const match = expiry.match(/^(\\d+)([smhdw])$/);\n    if (!match) {\n      throw new Error(`Invalid expiry format: ${expiry}`);\n    }\n\n    const value = parseInt(match[1], 10);\n    const unit = match[2];\n\n    return value * units[unit];\n  }\n\n  /**\n   * Generate API key\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 243,
        "end": 265,
        "startLoc": {
          "line": 243,
          "column": 3,
          "position": 1712
        },
        "endLoc": {
          "line": 265,
          "column": 6,
          "position": 1886
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-utilities.ts",
        "start": 48,
        "end": 73,
        "startLoc": {
          "line": 48,
          "column": 1,
          "position": 260
        },
        "endLoc": {
          "line": 73,
          "column": 4,
          "position": 433
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "} {\n    const key = `rr_${uuidv4().replace(/-/g, '')}`;\n    const hash = createHash('sha256').update(key).digest('hex');\n    const prefix = key.substring(0, 7);\n\n    return { key, hash, prefix };\n  }\n\n  /**\n   * Verify API key\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager.ts",
        "start": 266,
        "end": 276,
        "startLoc": {
          "line": 266,
          "column": 2,
          "position": 1913
        },
        "endLoc": {
          "line": 276,
          "column": 6,
          "position": 2004
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/jwt/token-manager/token-utilities.ts",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 1,
          "position": 465
        },
        "endLoc": {
          "line": 91,
          "column": 4,
          "position": 554
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ",\n    private mongoClient: MongoClient,\n    eventBus: DistributedEventBus\n  ) {\n    super();\n    this.eventBus = eventBus;\n    this.cache = new Redis(config.redis);\n    this.db = mongoClient.db(config.mongodb.database);\n\n    // Initialize collections\n    this.events",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-service.ts",
        "start": 81,
        "end": 91,
        "startLoc": {
          "line": 81,
          "column": 16,
          "position": 748
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 829
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/service-core.ts",
        "start": 44,
        "end": 54,
        "startLoc": {
          "line": 44,
          "column": 19,
          "position": 386
        },
        "endLoc": {
          "line": 54,
          "column": 9,
          "position": 467
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ")\n: Promise<boolean>\n{\n  const dashboard = this.dashboards.get(dashboardId);\n  if (!dashboard) return false;\n\n  const widgetIndex = dashboard.widgets.findIndex((w) => w.id === widgetId);\n  if (widgetIndex === -1) return false;\n\n  dashboard.widgets.",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 7,
          "position": 191
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 284
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 7,
        "end": 15,
        "startLoc": {
          "line": 7,
          "column": 3,
          "position": 33
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 125
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": {\n    rules: [\n      {\n        field: 'email',\n        type: 'email',\n        required: true,\n        normalizeEmail: true,\n        toLowerCase: true,\n        sanitize: true,\n      },\n      {\n        field: 'password',\n        type: 'string',\n        required: true,\n        minLength: 8,\n        maxLength: 128,\n        pattern",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-utilities.ts",
        "start": 38,
        "end": 54,
        "startLoc": {
          "line": 38,
          "column": 13,
          "position": 193
        },
        "endLoc": {
          "line": 54,
          "column": 8,
          "position": 291
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-utilities.ts",
        "start": 18,
        "end": 34,
        "startLoc": {
          "line": 18,
          "column": 6,
          "position": 81
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 179
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "frameProtection: {\n    enabled: true,\n    action: 'DENY'\n  },\n  contentTypeOptions: {\n    enabled: true,\n    nosniff: true\n  },\n  xssProtection: {\n    enabled: true,\n    mode: '1; mode=block'\n  },\n  referrerPolicy: {\n    enabled: true,\n    policy: 'strict-origin-when-cross-origin'\n  },\n  permissionsPolicy: {\n    enabled: true,\n    features: {\n      geolocation: [\"'self'\"],\n      microphone: [\"'none'\"],\n      camera: [\"'none'\"],\n      payment: [\"'self'\"],\n      usb: [\"'none'\"]\n    }\n  }\n};\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/SecurityHeadersMiddleware.ts",
        "start": 112,
        "end": 140,
        "startLoc": {
          "line": 112,
          "column": 3,
          "position": 682
        },
        "endLoc": {
          "line": 140,
          "column": 7,
          "position": 846
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/SecurityHeadersBuilder.ts",
        "start": 111,
        "end": 138,
        "startLoc": {
          "line": 111,
          "column": 7,
          "position": 823
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 988
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ">) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n    for (const file of files) {\n      const limit",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/metadata-processing.ts",
        "start": 40,
        "end": 45,
        "startLoc": {
          "line": 40,
          "column": 7,
          "position": 147
        },
        "endLoc": {
          "line": 45,
          "column": 6,
          "position": 243
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/upload-utilities.ts",
        "start": 90,
        "end": 95,
        "startLoc": {
          "line": 90,
          "column": 2,
          "position": 700
        },
        "endLoc": {
          "line": 95,
          "column": 11,
          "position": 796
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ": async (req: Request, res: Response) =>\n{\n  if (!req.user) {\n    return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Not authenticated',\n          },\n        });\n  }\n\n  const {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 14,
          "position": 70
        },
        "endLoc": {
          "line": 23,
          "column": 2,
          "position": 162
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/session-management.ts",
        "start": 83,
        "end": 94,
        "startLoc": {
          "line": 83,
          "column": 12,
          "position": 574
        },
        "endLoc": {
          "line": 94,
          "column": 9,
          "position": 666
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ": string[]) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: 'Authentication required',\n        },\n      });\n      return;\n    }\n\n    if (\n      !req.user.permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts",
        "start": 82,
        "end": 96,
        "startLoc": {
          "line": 82,
          "column": 20,
          "position": 578
        },
        "endLoc": {
          "line": 96,
          "column": 12,
          "position": 697
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts",
        "start": 51,
        "end": 64,
        "startLoc": {
          "line": 51,
          "column": 14,
          "position": 339
        },
        "endLoc": {
          "line": 64,
          "column": 6,
          "position": 456
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(socket: Socket, data: any)\n: void\n{\n  const workflowId = socket.data.workflowId;\n  const user = socket.data.user as IJwtPayload;\n\n  if (!workflowId) return;\n\n  socket.to(`workflow:${workflowId}`).emit('node:moved'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 42,
        "end": 50,
        "startLoc": {
          "line": 42,
          "column": 15,
          "position": 310
        },
        "endLoc": {
          "line": 50,
          "column": 13,
          "position": 388
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 26,
        "end": 34,
        "startLoc": {
          "line": 26,
          "column": 17,
          "position": 191
        },
        "endLoc": {
          "line": 34,
          "column": 15,
          "position": 269
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(socket: Socket, data: any)\n: void\n{\n  const workflowId = socket.data.workflowId;\n  const user = socket.data.user as IJwtPayload;\n\n  if (!workflowId) return;\n\n  socket.to(`workflow:${workflowId}`).emit('edge:added'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 14,
          "position": 429
        },
        "endLoc": {
          "line": 66,
          "column": 13,
          "position": 507
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 26,
        "end": 34,
        "startLoc": {
          "line": 26,
          "column": 17,
          "position": 191
        },
        "endLoc": {
          "line": 34,
          "column": 15,
          "position": 269
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(socket: Socket, data: any)\n: void\n{\n  const workflowId = socket.data.workflowId;\n  const user = socket.data.user as IJwtPayload;\n\n  if (!workflowId) return;\n\n  socket.to(`workflow:${workflowId}`).emit('edge:updated'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 17,
          "position": 548
        },
        "endLoc": {
          "line": 82,
          "column": 15,
          "position": 626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 26,
        "end": 34,
        "startLoc": {
          "line": 26,
          "column": 17,
          "position": 191
        },
        "endLoc": {
          "line": 34,
          "column": 15,
          "position": 269
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(socket: Socket, data: any)\n: void\n{\n  const workflowId = socket.data.workflowId;\n  const user = socket.data.user as IJwtPayload;\n\n  if (!workflowId) return;\n\n  socket.to(`workflow:${workflowId}`).emit('edge:deleted'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 90,
        "end": 98,
        "startLoc": {
          "line": 90,
          "column": 17,
          "position": 667
        },
        "endLoc": {
          "line": 98,
          "column": 15,
          "position": 745
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 26,
        "end": 34,
        "startLoc": {
          "line": 26,
          "column": 17,
          "position": 191
        },
        "endLoc": {
          "line": 34,
          "column": 15,
          "position": 269
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "(op1: Operation, op2: Operation)\n: TransformResult\n{\n    if (op1.path.join('.') !== op2.path.join('.')) {\n      return { operation1: op1, operation2: op2, conflict: false };\n    }\n\n    const start1",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 98,
        "end": 105,
        "startLoc": {
          "line": 98,
          "column": 20,
          "position": 746
        },
        "endLoc": {
          "line": 105,
          "column": 7,
          "position": 824
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 64,
        "end": 71,
        "startLoc": {
          "line": 64,
          "column": 20,
          "position": 428
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 506
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "(op1: Operation, op2: Operation): TransformResult\n{\n  if (op1.path.join('.') !== op2.path.join('.')) {\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  const index1",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts",
        "start": 30,
        "end": 36,
        "startLoc": {
          "line": 30,
          "column": 21,
          "position": 302
        },
        "endLoc": {
          "line": 36,
          "column": 7,
          "position": 379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 64,
        "end": 71,
        "startLoc": {
          "line": 64,
          "column": 20,
          "position": 428
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 506
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(op1: Operation, op2: Operation)\n: TransformResult\n{\n  if (op1.path.join('.') !== op2.path.join('.')) {\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  const index1 = op1.position || 0;\n  const index2 = op2.position || 0;\n\n  if (index1 < index2) {\n    op2.position = index2 -",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts",
        "start": 59,
        "end": 70,
        "startLoc": {
          "line": 59,
          "column": 21,
          "position": 569
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 699
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 64,
        "end": 40,
        "startLoc": {
          "line": 64,
          "column": 20,
          "position": 428
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 431
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ",\n          resetAt: entry.resetAt,\n          isLimited: false,\n        };\n    }\n\n    // Rate limited\n    this.handleRateLimit(key, entry, config);\n\n    return {\n        remaining: 0,\n        resetAt: entry.resetAt,\n        isLimited: true,\n        retryAfter: Math.ceil((entry.resetAt.getTime() - now.getTime()) / 1000),\n      };\n  }\n\n  // Request allowed\n  entry.count++;\n  entry.lastRequest = now;\n\n  return {\n      remaining: remaining - 1,\n      resetAt: entry.resetAt,\n      isLimited: false,\n    };\n}\n\n/**\n   * Record successful request\n",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/token-bucket.ts",
        "start": 75,
        "end": 105,
        "startLoc": {
          "line": 75,
          "column": 6,
          "position": 563
        },
        "endLoc": {
          "line": 105,
          "column": 1,
          "position": 736
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/token-bucket.ts",
        "start": 26,
        "end": 56,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 241
        },
        "endLoc": {
          "line": 56,
          "column": 4,
          "position": 414
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(name: string, config: any): { success: boolean; data?: any; errors?: any[] } {\n    const schema = this.schemas.get(name) || this.schemas.get('base');\n\n    if (!schema) {\n      return {\n        success: false,\n        errors: [{ message: `No schema found for ${name}` }],\n      };\n    }\n\n    try {\n      const partialSchema",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 64,
        "end": 75,
        "startLoc": {
          "line": 64,
          "column": 16,
          "position": 520
        },
        "endLoc": {
          "line": 75,
          "column": 14,
          "position": 648
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 30,
        "end": 41,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 213
        },
        "endLoc": {
          "line": 41,
          "column": 5,
          "position": 341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ".parse(config);\n      return { success: true, data };\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return {\n          success: false,\n          errors: error.errors.map((e) => ({\n            path: e.path.join('.'),\n            message: e.message,\n            code: e.code,\n          })),\n        };\n      }\n      return {\n        success: false,\n        errors: [{ message: error.message }],\n      };\n    }\n  }\n\n  /**\n   * Get schema\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 76,
        "end": 98,
        "startLoc": {
          "line": 76,
          "column": 14,
          "position": 667
        },
        "endLoc": {
          "line": 98,
          "column": 6,
          "position": 837
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 41,
        "end": 63,
        "startLoc": {
          "line": 41,
          "column": 7,
          "position": 346
        },
        "endLoc": {
          "line": 63,
          "column": 6,
          "position": 516
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": ");\n  }\n  \n  /**\n   * Convert string ID to ObjectId\n   */\n  protected toObjectId(id: ID): ObjectId {\n    return new ObjectId(id as string);\n  }\n  \n  /**\n   * Transform repository filter to MongoDB filter\n   */\n  protected transformFilter(filter: Filter<T> = {}): any {\n    // Convert string IDs to ObjectIds in the filter\n    const transformed = { ...filter };\n    if (transformed._id) {\n      if (typeof transformed._id === 'string') {\n        transformed._id = this.toObjectId(transformed._id as unknown as ID);\n      } else if (typeof transformed._id === 'object') {\n        const idFilter = transformed._id as any;\n        if (idFilter.$eq) idFilter.$eq = this.toObjectId(idFilter.$eq);\n        if (idFilter.$in) idFilter.$in = idFilter.$in.map((id: string) => this.toObjectId(id as unknown as ID));\n      }\n    }\n    return transformed;\n  }\n  \n  /**\n   * Transform repository sort to MongoDB sort\n   */\n  protected transformSort(sort: Sort<T> = {}): any {\n    const transformed: Record<string, 1 | -1> = {};\n    for (const [key, value] of Object.entries(sort)) {\n      transformed[key] = value === 'desc' || value === -1 ? -1 : 1;\n    }\n    return transformed;\n  }\n  \n  protected",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 18,
        "end": 57,
        "startLoc": {
          "line": 18,
          "column": 12,
          "position": 167
        },
        "endLoc": {
          "line": 57,
          "column": 10,
          "position": 566
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 15,
        "end": 54,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 140
        },
        "endLoc": {
          "line": 54,
          "column": 6,
          "position": 539
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": ";\n    });\n  }\n  \n  async findOne(filter: Filter<T>): Promise<T | null> {\n    return this.wrapError(async () => {\n      return this.collection.findOne(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n    });\n  }\n  \n  async find(filter?: Filter<T>, sort?: Sort<T>, pagination?: Pagination): Promise<T[]> {\n    return this.wrapError(async () => {\n      let query = this.collection.find(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n      \n      if (sort) {\n        query = query.sort(this.transformSort(sort));\n      }\n      \n      if (pagination) {\n        query = query.skip(pagination.skip).limit(pagination.limit);\n      }\n      \n      return query.toArray();\n    });\n  }\n  \n  async count(filter?: Filter<T>): Promise<number> {\n    return this.wrapError(async () => {\n      return this.collection.countDocuments(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n    });\n  }\n  \n  async create(data: Partial<T>): Promise<T> {\n    return this.wrapError(async () => {\n      const result = await this.collection.insertOne(\n        data as any,\n        { session: this.session }\n      );\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 87,
        "end": 134,
        "startLoc": {
          "line": 87,
          "column": 9,
          "position": 864
        },
        "endLoc": {
          "line": 134,
          "column": 6,
          "position": 1313
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 59,
        "end": 106,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 621
        },
        "endLoc": {
          "line": 106,
          "column": 7,
          "position": 1070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ";\n    });\n  }\n  \n  async createMany(data: Partial<T>[]): Promise<T[]> {\n    return this.wrapError(async () => {\n      const result = await this.collection.insertMany(\n        data as any[],\n        { session: this.session }\n      );\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 136,
        "end": 146,
        "startLoc": {
          "line": 136,
          "column": 7,
          "position": 1362
        },
        "endLoc": {
          "line": 146,
          "column": 6,
          "position": 1459
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 106,
        "end": 116,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 1090
        },
        "endLoc": {
          "line": 116,
          "column": 7,
          "position": 1187
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ";\n    });\n  }\n  \n  async update(id: ID, data: Partial<T>): Promise<T> {\n    return this.wrapError(async () => {\n      const result = await this.collection.findOneAndUpdate(\n        { _id: this.toObjectId(id) } as any,\n        { $set: data },\n        { \n          session: this.session,\n          returnDocument: 'after'\n        }\n      );\n      \n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 151,
        "end": 166,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1524
        },
        "endLoc": {
          "line": 166,
          "column": 6,
          "position": 1657
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 119,
        "end": 133,
        "startLoc": {
          "line": 119,
          "column": 2,
          "position": 1231
        },
        "endLoc": {
          "line": 133,
          "column": 7,
          "position": 1362
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ";\n    });\n  }\n  \n  async updateMany(filter: Filter<T>, data: Partial<T>): Promise<number> {\n    return this.wrapError(async () => {\n      const result = await this.collection.updateMany(\n        this.transformFilter(filter),\n        { $set: data },\n        { session: this.session }\n      );\n      return result.modifiedCount;\n    });\n  }\n  \n  async delete(id: ID): Promise<boolean> {\n    return this.wrapError(async () => {\n      const result = await this.collection.deleteOne(\n        { _id: this.toObjectId(id) } as any,\n        { session: this.session }\n      );\n      \n      if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 168,
        "end": 190,
        "startLoc": {
          "line": 168,
          "column": 7,
          "position": 1692
        },
        "endLoc": {
          "line": 190,
          "column": 3,
          "position": 1912
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 133,
        "end": 154,
        "startLoc": {
          "line": 133,
          "column": 2,
          "position": 1373
        },
        "endLoc": {
          "line": 154,
          "column": 7,
          "position": 1591
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "return result.deletedCount > 0;\n    });\n  }\n  \n  async deleteMany(filter: Filter<T>): Promise<number> {\n    return this.wrapError(async () => {\n      const result = await this.collection.deleteMany(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n      return result.deletedCount;\n    });\n  }\n  \n  protected async beginTransactionImpl(): Promise<void> {\n    this.session = await this.collection.db.client.startSession();\n    await this.session.startTransaction();\n  }\n  \n  protected async commitTransactionImpl(): Promise<void> {\n    await this.session?.commitTransaction();\n    await this.session?.endSession();\n    this.session = null;\n  }\n  \n  protected async rollbackTransactionImpl(): Promise<void> {\n    await this.session?.abortTransaction();\n    await this.session?.endSession();\n    this.session = null;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 194,
        "end": 224,
        "startLoc": {
          "line": 194,
          "column": 7,
          "position": 1943
        },
        "endLoc": {
          "line": 224,
          "column": 2,
          "position": 2231
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 154,
        "end": 184,
        "startLoc": {
          "line": 154,
          "column": 7,
          "position": 1591
        },
        "endLoc": {
          "line": 184,
          "column": 2,
          "position": 1879
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "= await this.client.chat.completions.create({\n        model: params.model,\n        messages,\n        temperature: params.temperature,\n        max_tokens: params.maxTokens,\n        stop: params.stopSequences,\n        tools: params.tools ? this.formatTools(params.tools) : undefined,\n        stream",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 2,
          "position": 614
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 695
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts",
        "start": 44,
        "end": 51,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 253
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 334
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n      if (!result) {\n        res.status(404).json({ error: 'Not found' });\n        return;\n      }\n      res.json({ success: true, data: result });\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  }\n\n  async handleDelete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts",
        "start": 94,
        "end": 105,
        "startLoc": {
          "line": 94,
          "column": 5,
          "position": 987
        },
        "endLoc": {
          "line": 105,
          "column": 13,
          "position": 1094
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 3,
          "position": 809
        },
        "endLoc": {
          "line": 91,
          "column": 13,
          "position": 916
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": ",\n    properties: [\n      {\n        displayName: 'Host',\n        name: 'host',\n        type: 'string',\n        required: true,\n        default: 'localhost',\n      },\n      {\n        displayName: 'Database',\n        name: 'database',\n        type: 'string',\n        required: true,\n      },\n      {\n        displayName: 'User',\n        name: 'user',\n        type: 'string',\n        required: true,\n      },\n      {\n        displayName: 'Password',\n        name: 'password',\n        type: 'password',\n        required: true,\n      },\n      {\n        displayName: 'Port',\n        name: 'port',\n        type: 'number',\n        default: 3306",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts",
        "start": 241,
        "end": 272,
        "startLoc": {
          "line": 241,
          "column": 5,
          "position": 1526
        },
        "endLoc": {
          "line": 272,
          "column": 5,
          "position": 1709
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts",
        "start": 196,
        "end": 227,
        "startLoc": {
          "line": 196,
          "column": 5,
          "position": 1264
        },
        "endLoc": {
          "line": 227,
          "column": 5,
          "position": 1447
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "nodes: nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: node.position,\n            data: {\n              label: node.name,\n              parameters: node.parameters || {},\n              credentials:\n                Array",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanWorkflowStore.ts",
        "start": 302,
        "end": 310,
        "startLoc": {
          "line": 302,
          "column": 11,
          "position": 2625
        },
        "endLoc": {
          "line": 310,
          "column": 6,
          "position": 2702
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanWorkflowStore.ts",
        "start": 268,
        "end": 275,
        "startLoc": {
          "line": 268,
          "column": 11,
          "position": 2329
        },
        "endLoc": {
          "line": 275,
          "column": 5,
          "position": 2405
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "undefined,\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: edges,\n          settings: {\n            timeout: 300000,\n            errorHandling: 'stop' as const,\n            retryPolicy: {\n              maxRetries: 3,\n              retryDelay: 5000,\n            },\n          },\n          tags: currentWorkflow.tags || [],\n          isActive: currentWorkflow.active || false,\n        };\n\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanWorkflowStore.ts",
        "start": 312,
        "end": 330,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 2738
        },
        "endLoc": {
          "line": 330,
          "column": 3,
          "position": 2861
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanWorkflowStore.ts",
        "start": 275,
        "end": 293,
        "startLoc": {
          "line": 275,
          "column": 2,
          "position": 2419
        },
        "endLoc": {
          "line": 293,
          "column": 7,
          "position": 2542
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ");\n          set({\n            user: authResponse.user,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n        } catch (error: any) {\n          set({\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: error.message || 'Registration failed'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts",
        "start": 62,
        "end": 74,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 569
        },
        "endLoc": {
          "line": 74,
          "column": 22,
          "position": 662
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts",
        "start": 41,
        "end": 53,
        "startLoc": {
          "line": 41,
          "column": 12,
          "position": 398
        },
        "endLoc": {
          "line": 53,
          "column": 15,
          "position": 491
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "const currentNodeId = session.currentNodeId || 'unknown';\n\n    const step: ExecutionStep = {\n      id: `step_${Date.now()}`,\n      nodeId: currentNodeId,\n      timestamp: Date.now(),\n      action: 'start',\n    };\n\n    session.executionHistory.push(step);\n    this.executionHistory.get(session.id)?.push(step);\n\n    // Add to call stack",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhancedDebuggingService.ts",
        "start": 466,
        "end": 478,
        "startLoc": {
          "line": 466,
          "column": 5,
          "position": 3502
        },
        "endLoc": {
          "line": 478,
          "column": 21,
          "position": 3607
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/enhancedDebuggingService.ts",
        "start": 427,
        "end": 439,
        "startLoc": {
          "line": 427,
          "column": 5,
          "position": 3188
        },
        "endLoc": {
          "line": 439,
          "column": 38,
          "position": 3293
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "errors,\n        metrics: this.calculateMetrics(state),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        outputData: [],\n        executionTime: performance.now() - startTime,\n        errors: [error as Error],\n        metrics: this.calculateMetrics(state),\n      };\n    }\n  }\n\n  /**\n   * Execute batch container\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerExecutionService.ts",
        "start": 357,
        "end": 373,
        "startLoc": {
          "line": 357,
          "column": 2,
          "position": 2710
        },
        "endLoc": {
          "line": 373,
          "column": 6,
          "position": 2812
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerExecutionService.ts",
        "start": 238,
        "end": 254,
        "startLoc": {
          "line": 238,
          "column": 9,
          "position": 1835
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 1937
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ",\n        executionTime: performance.now() - startTime,\n        errors,\n        metrics: this.calculateMetrics(state),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        outputData: [],\n        executionTime: performance.now() - startTime,\n        errors: [error as Error],\n        metrics: this.calculateMetrics(state),\n      };\n    }\n  }\n\n  /**\n   * Execute child nodes\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerExecutionService.ts",
        "start": 424,
        "end": 442,
        "startLoc": {
          "line": 424,
          "column": 8,
          "position": 3250
        },
        "endLoc": {
          "line": 442,
          "column": 6,
          "position": 3370
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerExecutionService.ts",
        "start": 236,
        "end": 254,
        "startLoc": {
          "line": 236,
          "column": 13,
          "position": 1817
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 1937
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => void\n  ): () => void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n    this.eventListeners.get(event)?.add(callback);\n\n    return () => {\n      this.eventListeners.get(event)?.delete(callback);\n    };\n  }\n\n  // Private methods",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedTriggerSystem.ts",
        "start": 494,
        "end": 506,
        "startLoc": {
          "line": 494,
          "column": 13,
          "position": 3961
        },
        "endLoc": {
          "line": 506,
          "column": 19,
          "position": 4072
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowScheduler.ts",
        "start": 408,
        "end": 422,
        "startLoc": {
          "line": 408,
          "column": 19,
          "position": 3060
        },
        "endLoc": {
          "line": 422,
          "column": 6,
          "position": 3171
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "userAgent: navigator.userAgent,\n      });\n\n      this.currentUser = user;\n      this.currentSession = session;\n\n      const context: AuthContext = {\n        user,\n        session,\n        permissions: await this.getUserPermissions(user.id),\n        projects: user.projects,\n        isLoading: false,\n        error: null,\n      };\n\n      this.notifyListeners(context);\n      return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 175,
        "end": 191,
        "startLoc": {
          "line": 175,
          "column": 9,
          "position": 1283
        },
        "endLoc": {
          "line": 191,
          "column": 7,
          "position": 1392
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 113,
        "end": 130,
        "startLoc": {
          "line": 113,
          "column": 9,
          "position": 816
        },
        "endLoc": {
          "line": 130,
          "column": 19,
          "position": 926
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "// Create session\n    const session = await this.createSession(user.id, {\n      ipAddress: '127.0.0.1',\n      userAgent: navigator.userAgent,\n    });\n\n    this.currentUser = user;\n    this.currentSession = session;\n\n    const context: AuthContext = {\n      user,\n      session,\n      permissions: await this.getUserPermissions(user.id),\n      projects: user.projects,\n      isLoading: false,\n      error: null,\n    };\n\n    this.notifyListeners(context);\n    return context;\n  }\n\n  /**\n   * API Key Management\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 369,
        "end": 393,
        "startLoc": {
          "line": 369,
          "column": 5,
          "position": 2862
        },
        "endLoc": {
          "line": 393,
          "column": 6,
          "position": 3011
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 172,
        "end": 192,
        "startLoc": {
          "line": 172,
          "column": 7,
          "position": 1253
        },
        "endLoc": {
          "line": 192,
          "column": 6,
          "position": 1400
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ");\n\n    // Create session\n    const session = await this.createSession(user.id, {\n      ipAddress: '127.0.0.1',\n      userAgent: navigator.userAgent,\n    });\n\n    this.currentUser = user;\n    this.currentSession = session;\n\n    const context: AuthContext = {\n      user,\n      session,\n      permissions: await this.getUserPermissions(user.id),\n      projects: user.projects,\n      isLoading: false,\n      error: null,\n    };\n\n    this.notifyListeners(context);\n    return context;\n  }\n\n  /**\n   * Session Management\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 521,
        "end": 547,
        "startLoc": {
          "line": 521,
          "column": 2,
          "position": 4087
        },
        "endLoc": {
          "line": 547,
          "column": 6,
          "position": 4241
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 170,
        "end": 192,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 1248
        },
        "endLoc": {
          "line": 192,
          "column": 6,
          "position": 1400
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "{\n      theme: 'dark',\n      language: 'en',\n      timezone: 'UTC',\n      notifications: {\n        email: true,\n        push: false,\n        inApp: true,\n        workflows: true,\n        executions: true,\n        security: true,\n      },\n      dashboard: {\n        layout: 'grid',\n        widgets: ['workflows', 'executions', 'recent'],\n        refreshInterval: 30000,\n      },\n      editor: {\n        autoSave: true,\n        autoComplete: true,\n        syntaxHighlighting: true,\n        wordWrap: true,\n      },\n    };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/advancedAuthService.ts",
        "start": 770,
        "end": 793,
        "startLoc": {
          "line": 770,
          "column": 2,
          "position": 6275
        },
        "endLoc": {
          "line": 793,
          "column": 2,
          "position": 6429
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/authentication.ts",
        "start": 302,
        "end": 325,
        "startLoc": {
          "line": 302,
          "column": 2,
          "position": 1977
        },
        "endLoc": {
          "line": 325,
          "column": 2,
          "position": 2130
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ": z\n      .object({\n        totalExecutions: z.number().int().min(0),\n        successfulExecutions: z.number().int().min(0),\n        failedExecutions: z.number().int().min(0),\n        avgDuration: z.number().min(0).optional(),\n        successRate: z.number().min(0).max(100).optional(),\n      })\n      .optional(), // Backend returns \"statistics\" instead of \"executionStats\"",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts",
        "start": 92,
        "end": 100,
        "startLoc": {
          "line": 92,
          "column": 11,
          "position": 920
        },
        "endLoc": {
          "line": 100,
          "column": 60,
          "position": 1046
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts",
        "start": 83,
        "end": 92,
        "startLoc": {
          "line": 83,
          "column": 15,
          "position": 792
        },
        "endLoc": {
          "line": 92,
          "column": 11,
          "position": 919
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "{\n        displayName: enhancedNode.displayName || enhancedNode.name,\n        name: enhancedNode.name,\n        icon: enhancedNode.icon || 'fa:envelope',\n        group: [enhancedNode.type === 'trigger' ? 'trigger' : 'transform'],\n        version: 1,\n        description: enhancedNode.description || '',\n        defaults: {\n          name: enhancedNode.displayName || enhancedNode.name,\n          color: (enhancedNode as any).color || '#DD4B39',\n        },\n        inputs: (enhancedNode.inputs || [{ type: 'main' }]).map((input) =>\n          typeof input === 'string' ? input : input.type || 'main'\n        ),\n        outputs: (enhancedNode.outputs || [{ type: 'main' }]).map((output) =>\n          typeof output === 'string' ? output : output.type || 'main'\n        ),\n        categories: enhancedNode.codex?.categories || [],\n        properties: [], // Enhanced nodes use different property system\n        // Preserve custom UI components from enhanced nodes\n        customBodyComponent: (enhancedNode as any).customBodyComponent,\n        // customPropertiesPanel: (enhancedNode as any).customPropertiesPanel,\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts",
        "start": 233,
        "end": 255,
        "startLoc": {
          "line": 233,
          "column": 2,
          "position": 1688
        },
        "endLoc": {
          "line": 255,
          "column": 2,
          "position": 1980
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts",
        "start": 176,
        "end": 198,
        "startLoc": {
          "line": 176,
          "column": 2,
          "position": 1206
        },
        "endLoc": {
          "line": 198,
          "column": 2,
          "position": 1498
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", LoginApiResponseSchema);\n\n      // Store tokens in localStorage\n      if (response.token) {\n        localStorage.setItem(configService.get('auth').tokenKey, response.token);\n      }\n      if (response.refreshToken) {\n        localStorage.setItem(configService.get('auth').refreshTokenKey, response.refreshToken);\n      }\n\n      return response;\n    } catch (error) {\n      throw new ApiClientError('Registration failed'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 94,
        "end": 106,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 584
        },
        "endLoc": {
          "line": 106,
          "column": 22,
          "position": 689
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 73,
        "end": 85,
        "startLoc": {
          "line": 73,
          "column": 12,
          "position": 415
        },
        "endLoc": {
          "line": 85,
          "column": 15,
          "position": 520
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ",\n      });\n\n      // Backend returns: { success, data: { user: UserProfile } }\n      // Extract user from nested structure\n      const responseData = response.data as any;\n      const userData = responseData.data?.user || responseData.user;\n\n      if (!userData) {\n        throw new ApiClientError('Invalid profile response structure', 422, 'INVALID_RESPONSE');\n      }\n\n      // Transform and validate the user data\n      return this.transformUserProfile(userData);\n    } catch (error) {\n      throw new ApiClientError('Failed to update profile'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 259,
        "end": 274,
        "startLoc": {
          "line": 259,
          "column": 8,
          "position": 1701
        },
        "endLoc": {
          "line": 274,
          "column": 27,
          "position": 1816
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 231,
        "end": 246,
        "startLoc": {
          "line": 231,
          "column": 16,
          "position": 1502
        },
        "endLoc": {
          "line": 246,
          "column": 31,
          "position": 1617
        }
      }
    },
    {
      "format": "tsx",
      "lines": 525,
      "fragment": "/**\n * Terms of Service Page\n *\n * Terms of service and legal information for Reporunner\n */\n\nimport {\n  AlertTriangle,\n  Calendar,\n  CheckCircle,\n  Download,\n  ExternalLink,\n  Eye,\n  FileText,\n  Globe,\n  Mail,\n  Scale,\n  Shield,\n  Users,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Terms: React.FC = () => {\n  const [lastUpdated] = useState('January 20, 2025');\n  const [activeSection, setActiveSection] = useState('overview');\n\n  const sections = [\n    { id: 'overview', title: 'Overview', icon: Eye },\n    { id: 'acceptance', title: 'Acceptance', icon: CheckCircle },\n    { id: 'services', title: 'Services', icon: Globe },\n    { id: 'accounts', title: 'User Accounts', icon: Users },\n    { id: 'usage', title: 'Acceptable Use', icon: Shield },\n    { id: 'privacy', title: 'Privacy & Data', icon: FileText },\n    { id: 'payment', title: 'Payment Terms', icon: Scale },\n    { id: 'termination', title: 'Termination', icon: AlertTriangle },\n    { id: 'liability', title: 'Liability', icon: Scale },\n    { id: 'changes', title: 'Updates', icon: Calendar },\n  ];\n\n  const keyTerms = [\n    {\n      term: 'Service Availability',\n      description: '99.9% uptime SLA for Professional and Enterprise plans',\n      details:\n        'We guarantee high availability with scheduled maintenance windows and transparent status updates.',\n    },\n    {\n      term: 'Data Ownership',\n      description: 'You retain complete ownership of all your data',\n      details:\n        'Your workflow data, configurations, and business information always remain yours. We never claim ownership.',\n    },\n    {\n      term: 'Self-Hosted Benefits',\n      description: 'Complete control over your deployment and data',\n      details:\n        'When self-hosting, you control all aspects of data storage, processing, and access. We provide software only.',\n    },\n    {\n      term: 'Open Source Licensing',\n      description: 'Core platform available under Apache 2.0 license',\n      details:\n        'You can modify, distribute, and use our open source components according to the Apache 2.0 license terms.',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Terms of{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Service\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Clear, fair terms that protect both you and Reporunner. We believe in transparent\n              agreements that build trust.\n            </p>\n\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 mb-8\">\n              <div className=\"flex items-center justify-center gap-2 text-white mb-4\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Last Updated: {lastUpdated}</span>\n              </div>\n              <div className=\"text-sm text-slate-300\">\n                We'll notify you 30 days before any material changes take effect\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Download className=\"w-5 h-5\" />\n                Download PDF\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                Ask Legal Team\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Key Terms Summary */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Key Terms Summary</h2>\n            <p className=\"text-xl text-gray-600\">\n              The most important points from our terms of service\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {keyTerms.map((item, index) => (\n              <div\n                key={index}\n                className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n              >\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{item.term}</h3>\n                <p className=\"text-blue-600 font-medium mb-3\">{item.description}</p>\n                <p className=\"text-gray-600 text-sm\">{item.details}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Detailed Terms */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Complete Terms</h2>\n              <p className=\"text-xl text-gray-600\">\n                Detailed terms and conditions for using Reporunner\n              </p>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row gap-8\">\n              {/* Sidebar Navigation */}\n              <div className=\"lg:w-1/4\">\n                <div className=\"bg-white border border-gray-200 rounded-xl p-6 sticky top-6\">\n                  <h3 className=\"font-semibold text-gray-900 mb-4\">Sections</h3>\n                  <nav className=\"space-y-2\">\n                    {sections.map((section) => {\n                      const Icon = section.icon;\n                      return (\n                        <button\n                          key={section.id}\n                          onClick={() => setActiveSection(section.id)}\n                          className={`w-full flex items-center gap-3 p-3 rounded-lg text-left transition-colors ${\n                            activeSection === section.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <Icon className=\"w-5 h-5\" />\n                          <span className=\"font-medium\">{section.title}</span>\n                        </button>\n                      );\n                    })}\n                  </nav>\n                </div>\n              </div>\n\n              {/* Main Content */}\n              <div className=\"lg:w-3/4\">\n                <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n                  {activeSection === 'overview' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Overview</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          Welcome to Reporunner. These Terms of Service (\"Terms\") govern your use of\n                          our workflow automation platform and services. By accessing or using\n                          Reporunner, you agree to be bound by these Terms.\n                        </p>\n                        <p>\n                          Reporunner is a self-hosted workflow automation platform that enables you\n                          to automate business processes with complete data sovereignty. Our\n                          services include the core platform software, enterprise features, and\n                          related support services.\n                        </p>\n                        <p>\n                          These Terms apply to all users, including individuals, businesses, and\n                          enterprise organizations. Different service tiers may have additional\n                          terms as outlined in your subscription agreement.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'acceptance' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Acceptance of Terms</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          By accessing, browsing, or using Reporunner, you acknowledge that you have\n                          read, understood, and agree to be bound by these Terms and all applicable\n                          laws and regulations.\n                        </p>\n                        <p>\n                          If you are using Reporunner on behalf of an organization, you represent\n                          that you have the authority to bind that organization to these Terms, and\n                          \"you\" refers to both you individually and the organization.\n                        </p>\n                        <p>\n                          If you do not agree with any part of these Terms, you must not use our\n                          services.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'services' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Our Services</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          Reporunner provides workflow automation software and services, including:\n                        </p>\n                        <ul>\n                          <li>Self-hosted workflow automation platform</li>\n                          <li>Integration with third-party services and APIs</li>\n                          <li>AI and machine learning capabilities</li>\n                          <li>Enterprise security and compliance features</li>\n                          <li>Technical support and professional services</li>\n                        </ul>\n                        <p>\n                          We reserve the right to modify, suspend, or discontinue any part of our\n                          services at any time with reasonable notice. We will not be liable for any\n                          modification, suspension, or discontinuation of services.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'accounts' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">User Accounts</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          To use certain features of Reporunner, you must create an account. You are\n                          responsible for:\n                        </p>\n                        <ul>\n                          <li>Providing accurate and complete registration information</li>\n                          <li>Maintaining the security of your account credentials</li>\n                          <li>All activities that occur under your account</li>\n                          <li>Notifying us immediately of any unauthorized access</li>\n                        </ul>\n                        <p>\n                          You may not share your account credentials or allow others to access your\n                          account. We reserve the right to suspend or terminate accounts that\n                          violate these Terms.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'usage' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Acceptable Use Policy</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          You agree to use Reporunner only for lawful purposes and in accordance\n                          with these Terms. You must not:\n                        </p>\n                        <ul>\n                          <li>\n                            Use the service for any illegal, harmful, or fraudulent activities\n                          </li>\n                          <li>\n                            Attempt to gain unauthorized access to our systems or other users'\n                            accounts\n                          </li>\n                          <li>Distribute malware, viruses, or other malicious code</li>\n                          <li>Spam, harass, or abuse other users or our support team</li>\n                          <li>\n                            Reverse engineer, decompile, or attempt to extract source code (except\n                            as permitted by law)\n                          </li>\n                          <li>Use the service to compete with or build a similar product</li>\n                        </ul>\n                        <p>\n                          Violation of this policy may result in immediate suspension or termination\n                          of your account.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'privacy' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">\n                        Privacy and Data Protection\n                      </h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          Your privacy is important to us. Our Privacy Policy, which is incorporated\n                          into these Terms by reference, explains how we collect, use, and protect\n                          your information.\n                        </p>\n                        <p>\n                          For self-hosted deployments, you maintain complete control over your data.\n                          We do not have access to your workflow data, credentials, or business\n                          information stored in your self-hosted instance.\n                        </p>\n                        <p>\n                          You are responsible for ensuring your use of Reporunner complies with\n                          applicable data protection laws, including GDPR, CCPA, and HIPAA where\n                          applicable.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'payment' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Payment Terms</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          Paid services are billed in advance on a monthly or annual basis. By\n                          providing payment information, you authorize us to charge the applicable\n                          fees.\n                        </p>\n                        <ul>\n                          <li>Fees are non-refundable except as required by law</li>\n                          <li>We may change pricing with 30 days' notice</li>\n                          <li>Accounts may be suspended for non-payment</li>\n                          <li>Enterprise customers may have custom payment terms</li>\n                        </ul>\n                        <p>\n                          All payments are processed securely through our payment partners. We do\n                          not store your payment information.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'termination' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Termination</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          You may terminate your account at any time by contacting our support team.\n                          Upon termination:\n                        </p>\n                        <ul>\n                          <li>Your access to paid features will be suspended</li>\n                          <li>Your data will be retained for 30 days for recovery purposes</li>\n                          <li>After 30 days, your data will be permanently deleted</li>\n                          <li>Self-hosted installations continue to function independently</li>\n                        </ul>\n                        <p>\n                          We may terminate or suspend your account immediately if you violate these\n                          Terms or for other legitimate business reasons.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'liability' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Limitation of Liability</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          To the maximum extent permitted by law, Reporunner shall not be liable for\n                          any indirect, incidental, special, consequential, or punitive damages, or\n                          any loss of profits or revenues.\n                        </p>\n                        <p>\n                          Our total liability to you for any cause whatsoever shall not exceed the\n                          amount paid by you to Reporunner in the twelve (12) months preceding the\n                          claim.\n                        </p>\n                        <p>\n                          Some jurisdictions do not allow the exclusion or limitation of liability\n                          for consequential or incidental damages, so the above limitation may not\n                          apply to you.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeSection === 'changes' && (\n                    <div className=\"space-y-6\">\n                      <h3 className=\"text-2xl font-bold text-gray-900\">Changes to Terms</h3>\n                      <div className=\"prose prose-gray max-w-none\">\n                        <p>\n                          We may update these Terms from time to time. When we make material\n                          changes, we will:\n                        </p>\n                        <ul>\n                          <li>Notify you at least 30 days before the changes take effect</li>\n                          <li>Post the updated Terms on our website</li>\n                          <li>Update the \"Last Updated\" date</li>\n                          <li>Send email notifications to registered users</li>\n                        </ul>\n                        <p>\n                          Your continued use of Reporunner after the effective date constitutes\n                          acceptance of the updated Terms. If you don't agree to the changes, you\n                          must stop using our services.\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Important Notice */}\n      <section className=\"py-16 bg-orange-50 border-y border-orange-200\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-start gap-4\">\n              <AlertTriangle className=\"w-8 h-8 text-orange-600 mt-1 flex-shrink-0\" />\n              <div>\n                <h3 className=\"text-xl font-bold text-orange-900 mb-3\">Important Legal Notice</h3>\n                <div className=\"text-orange-800 space-y-3\">\n                  <p>\n                    These Terms of Service constitute a legally binding agreement. Please read them\n                    carefully and contact our legal team if you have any questions.\n                  </p>\n                  <p>\n                    For enterprise customers, additional terms may apply as outlined in your Master\n                    Service Agreement or other executed contracts.\n                  </p>\n                  <p>\n                    These Terms are governed by the laws of Delaware, USA, and any disputes will be\n                    resolved in Delaware courts.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Legal Team */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Questions About Our Terms?</h2>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Our legal team is here to help clarify any questions about our terms of service.\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"bg-gray-50 border border-gray-200 rounded-xl p-6\">\n                <Mail className=\"w-8 h-8 text-blue-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Legal Team</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">General legal questions</p>\n                <button className=\"text-blue-600 font-medium hover:text-blue-700 transition-colors\">\n                  legal@reporunner.dev\n                </button>\n              </div>\n\n              <div className=\"bg-gray-50 border border-gray-200 rounded-xl p-6\">\n                <Scale className=\"w-8 h-8 text-green-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Enterprise Contracts</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Custom terms and MSAs</p>\n                <button className=\"text-green-600 font-medium hover:text-green-700 transition-colors\">\n                  enterprise@reporunner.dev\n                </button>\n              </div>\n\n              <div className=\"bg-gray-50 border border-gray-200 rounded-xl p-6\">\n                <FileText className=\"w-8 h-8 text-purple-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Compliance</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">GDPR, HIPAA, and compliance</p>\n                <button className=\"text-purple-600 font-medium hover:text-purple-700 transition-colors\">\n                  compliance@reporunner.dev\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            By using Reporunner, you agree to these Terms of Service. Start building powerful\n            workflows today.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <CheckCircle className=\"w-5 h-5\" />\n              Accept & Start Trial\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <ExternalLink className=\"w-5 h-5\" />\n              Read Privacy Policy\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Terms;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 1,
        "end": 525,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 525,
          "column": 2,
          "position": 5320
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/terms/Terms.tsx",
        "start": 2,
        "end": 526,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 526,
          "column": 2,
          "position": 5333
        }
      }
    },
    {
      "format": "javascript",
      "lines": 285,
      "fragment": "={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-all duration-300 ${\n                  activeTab === tab.id\n                    ? 'bg-white/20 text-blue-300 backdrop-blur-sm border border-white/30'\n                    : 'text-slate-300 hover:bg-white/10 hover:text-white'\n                }`}\n              >\n                <span className=\"mr-3 text-lg\">{tab.icon}</span>\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1\">\n          <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n            {/* Profile Tab */}\n            {activeTab === 'profile' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Profile Information</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Full Name\n                    </label>\n                    <input\n                      aria-label=\"Profile Name\"\n                      type=\"text\"\n                      value={settings.profile.name}\n                      onChange={(e) => updateSetting('profile', 'name', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Email Address\n                    </label>\n                    <input\n                      aria-label=\"email\"\n                      type=\"email\"\n                      value={settings.profile.email}\n                      onChange={(e) => updateSetting('profile', 'email', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Timezone\n                    </label>\n                    <select\n                      aria-label=\"timezone\"\n                      value={settings.profile.timezone}\n                      onChange={(e) => updateSetting('profile', 'timezone', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"UTC-8\" className=\"bg-slate-800 text-white\">\n                        UTC-8 (Pacific)\n                      </option>\n                      <option value=\"UTC-5\" className=\"bg-slate-800 text-white\">\n                        UTC-5 (Eastern)\n                      </option>\n                      <option value=\"UTC+0\" className=\"bg-slate-800 text-white\">\n                        UTC+0 (GMT)\n                      </option>\n                      <option value=\"UTC+1\" className=\"bg-slate-800 text-white\">\n                        UTC+1 (Central European)\n                      </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Notifications Tab */}\n            {activeTab === 'notifications' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Notification Preferences</h2>\n                <div className=\"space-y-6\">\n                  {[\n                    {\n                      key: 'emailNotifications',\n                      label: 'Email Notifications',\n                      description: 'Receive notifications via email',\n                    },\n                    {\n                      key: 'workflowFailures',\n                      label: 'Workflow Failures',\n                      description: 'Get notified when workflows fail',\n                    },\n                    {\n                      key: 'weeklyReports',\n                      label: 'Weekly Reports',\n                      description: 'Receive weekly summary reports',\n                    },\n                    {\n                      key: 'maintenanceUpdates',\n                      label: 'Maintenance Updates',\n                      description: 'System maintenance notifications',\n                    },\n                  ].map((item) => (\n                    <div key={item.key} className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-sm font-medium text-white\">{item.label}</h3>\n                        <p className=\"text-sm text-slate-300\">{item.description}</p>\n                      </div>\n                      <label className=\"relative inline-flex items-center cursor-pointer\">\n                        <input\n                          aria-label=\"notifications\"\n                          type=\"checkbox\"\n                          checked={\n                            settings.notifications[item.key as keyof typeof settings.notifications]\n                          }\n                          onChange={(e) =>\n                            updateSetting('notifications', item.key, e.target.checked)\n                          }\n                          className=\"sr-only peer\"\n                        />\n                        <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Security Tab */}\n            {activeTab === 'security' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Security Settings</h2>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-white\">Two-Factor Authentication</h3>\n                      <p className=\"text-sm text-slate-300\">\n                        Add an extra layer of security to your account\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        aria-label=\"security\"\n                        type=\"checkbox\"\n                        checked={settings.security.twoFactorAuth}\n                        onChange={(e) =>\n                          updateSetting('security', 'twoFactorAuth', e.target.checked)\n                        }\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                    </label>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Session Timeout (minutes)\n                    </label>\n                    <select\n                      aria-label=\"security-session time out\"\n                      value={settings.security.sessionTimeout}\n                      onChange={(e) =>\n                        updateSetting('security', 'sessionTimeout', parseInt(e.target.value, 10))\n                      }\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value={30} className=\"bg-slate-800 text-white\">\n                        30 minutes\n                      </option>\n                      <option value={60} className=\"bg-slate-800 text-white\">\n                        1 hour\n                      </option>\n                      <option value={120} className=\"bg-slate-800 text-white\">\n                        2 hours\n                      </option>\n                      <option value={480} className=\"bg-slate-800 text-white\">\n                        8 hours\n                      </option>\n                    </select>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-white\">API Access</h3>\n                      <p className=\"text-sm text-slate-300\">Allow API access to your account</p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        aria-label=\"api access\"\n                        type=\"checkbox\"\n                        checked={settings.security.apiAccess}\n                        onChange={(e) => updateSetting('security', 'apiAccess', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Preferences Tab */}\n            {activeTab === 'preferences' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Application Preferences</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">Theme</label>\n                    <select\n                      aria-label=\"performance\"\n                      value={settings.preferences.theme}\n                      onChange={(e) => updateSetting('preferences', 'theme', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"light\" className=\"bg-slate-800 text-white\">\n                        Light\n                      </option>\n                      <option value=\"dark\" className=\"bg-slate-800 text-white\">\n                        Dark\n                      </option>\n                      <option value=\"auto\" className=\"bg-slate-800 text-white\">\n                        Auto\n                      </option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Language\n                    </label>\n                    <select\n                      aria-label=\"language\"\n                      value={settings.preferences.language}\n                      onChange={(e) => updateSetting('preferences', 'language', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"en\" className=\"bg-slate-800 text-white\">\n                        English\n                      </option>\n                      <option value=\"es\" className=\"bg-slate-800 text-white\">\n                        Spanish\n                      </option>\n                      <option value=\"fr\" className=\"bg-slate-800 text-white\">\n                        French\n                      </option>\n                      <option value=\"de\" className=\"bg-slate-800 text-white\">\n                        German\n                      </option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Default Workflow Privacy\n                    </label>\n                    <select\n                      aria-label=\"preferences\"\n                      value={settings.preferences.defaultWorkflowPrivacy}\n                      onChange={(e) =>\n                        updateSetting('preferences', 'defaultWorkflowPrivacy', e.target.value)\n                      }\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"private\" className=\"bg-slate-800 text-white\">\n                        Private\n                      </option>\n                      <option value=\"team\" className=\"bg-slate-800 text-white\">\n                        Team\n                      </option>\n                      <option value=\"public\" className=\"bg-slate-800 text-white\">\n                        Public\n                      </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Save Button */}\n            <div className=\"px-6 py-4 bg-white/5 border-t border-white/20 rounded-b-lg backdrop-blur-sm\">\n              <div className=\"flex justify-end space-x-3\">\n                <button\n                  onClick={() => window.location.reload()}\n                  className=\"px-4 py-2 text-sm font-medium text-slate-300 bg-white/10 border border-white/30 rounded-lg hover:bg-white/20 hover:text-white transition-all duration-300 backdrop-blur-sm\"\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={handleSave}\n                  disabled={isSaving}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx",
        "start": 137,
        "end": 421,
        "startLoc": {
          "line": 137,
          "column": 4,
          "position": 1142
        },
        "endLoc": {
          "line": 421,
          "column": 2,
          "position": 3374
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/settings/Settings.tsx",
        "start": 140,
        "end": 424,
        "startLoc": {
          "line": 140,
          "column": 4,
          "position": 1181
        },
        "endLoc": {
          "line": 424,
          "column": 2,
          "position": 3413
        }
      }
    },
    {
      "format": "tsx",
      "lines": 433,
      "fragment": ";\n\nconst authApiService = new AuthApiService();\n\ninterface SettingsData {\n  profile: {\n    name: string;\n    email: string;\n    timezone: string;\n  };\n  notifications: {\n    emailNotifications: boolean;\n    workflowFailures: boolean;\n    weeklyReports: boolean;\n    maintenanceUpdates: boolean;\n  };\n  security: {\n    twoFactorAuth: boolean;\n    sessionTimeout: number;\n    apiAccess: boolean;\n  };\n  preferences: {\n    theme: 'light' | 'dark' | 'auto';\n    language: string;\n    defaultWorkflowPrivacy: 'private' | 'team' | 'public';\n  };\n}\n\nconst Settings: React.FC = () => {\n  const [settings, setSettings] = useState<SettingsData>({\n    profile: {\n      name: '',\n      email: '',\n      timezone: 'UTC-5',\n    },\n    notifications: {\n      emailNotifications: true,\n      workflowFailures: true,\n      weeklyReports: false,\n      maintenanceUpdates: true,\n    },\n    security: {\n      twoFactorAuth: false,\n      sessionTimeout: 60,\n      apiAccess: true,\n    },\n    preferences: {\n      theme: 'light',\n      language: 'en',\n      defaultWorkflowPrivacy: 'private',\n    },\n  });\n\n  const [activeTab, setActiveTab] = useState<\n    'profile' | 'notifications' | 'security' | 'preferences'\n  >('profile');\n  const [isSaving, setIsSaving] = useState(false);\n  const [_isLoading, setIsLoading] = useState(false);\n\n  const loadUserProfile = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const user = await authApiService.getProfile();\n      setSettings((prev) => ({\n        ...prev,\n        profile: {\n          name: `${user.firstName} ${user.lastName}`,\n          email: user.email,\n          timezone: 'UTC-5', // Default, could be stored in user profile\n        },\n      }));\n    } catch (_error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadUserProfile();\n  }, [loadUserProfile]);\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      // Update profile information\n      if (activeTab === 'profile') {\n        const names = settings.profile.name.split(' ');\n        await authApiService.updateProfile({\n          firstName: names[0] || '',\n          lastName: names.slice(1).join(' ') || '',\n        });\n      }\n\n      // For other settings, you would call appropriate API endpoints\n      // For now, just show success message\n      alert('Settings saved successfully!');\n    } catch (_error) {\n      alert('Failed to save settings. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const updateSetting = (section: keyof SettingsData, key: string, value: any) => {\n    setSettings((prev) => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [key]: value,\n      },\n    }));\n  };\n\n  const tabs = [\n    { id: 'profile', name: 'Profile', icon: '👤' },\n    { id: 'notifications', name: 'Notifications', icon: '🔔' },\n    { id: 'security', name: 'Security', icon: '🔒' },\n    { id: 'preferences', name: 'Preferences', icon: '⚙️' },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Settings</h1>\n        <p className=\"text-slate-300\">Manage your account and application preferences</p>\n      </div>\n\n      <div className=\"flex gap-8\">\n        {/* Sidebar */}\n        <div className=\"w-64\">\n          <nav className=\"space-y-2\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-all duration-300 ${\n                  activeTab === tab.id\n                    ? 'bg-white/20 text-blue-300 backdrop-blur-sm border border-white/30'\n                    : 'text-slate-300 hover:bg-white/10 hover:text-white'\n                }`}\n              >\n                <span className=\"mr-3 text-lg\">{tab.icon}</span>\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1\">\n          <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n            {/* Profile Tab */}\n            {activeTab === 'profile' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Profile Information</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Full Name\n                    </label>\n                    <input\n                      aria-label=\"Profile Name\"\n                      type=\"text\"\n                      value={settings.profile.name}\n                      onChange={(e) => updateSetting('profile', 'name', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Email Address\n                    </label>\n                    <input\n                      aria-label=\"email\"\n                      type=\"email\"\n                      value={settings.profile.email}\n                      onChange={(e) => updateSetting('profile', 'email', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Timezone\n                    </label>\n                    <select\n                      aria-label=\"timezone\"\n                      value={settings.profile.timezone}\n                      onChange={(e) => updateSetting('profile', 'timezone', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"UTC-8\" className=\"bg-slate-800 text-white\">\n                        UTC-8 (Pacific)\n                      </option>\n                      <option value=\"UTC-5\" className=\"bg-slate-800 text-white\">\n                        UTC-5 (Eastern)\n                      </option>\n                      <option value=\"UTC+0\" className=\"bg-slate-800 text-white\">\n                        UTC+0 (GMT)\n                      </option>\n                      <option value=\"UTC+1\" className=\"bg-slate-800 text-white\">\n                        UTC+1 (Central European)\n                      </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Notifications Tab */}\n            {activeTab === 'notifications' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Notification Preferences</h2>\n                <div className=\"space-y-6\">\n                  {[\n                    {\n                      key: 'emailNotifications',\n                      label: 'Email Notifications',\n                      description: 'Receive notifications via email',\n                    },\n                    {\n                      key: 'workflowFailures',\n                      label: 'Workflow Failures',\n                      description: 'Get notified when workflows fail',\n                    },\n                    {\n                      key: 'weeklyReports',\n                      label: 'Weekly Reports',\n                      description: 'Receive weekly summary reports',\n                    },\n                    {\n                      key: 'maintenanceUpdates',\n                      label: 'Maintenance Updates',\n                      description: 'System maintenance notifications',\n                    },\n                  ].map((item) => (\n                    <div key={item.key} className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-sm font-medium text-white\">{item.label}</h3>\n                        <p className=\"text-sm text-slate-300\">{item.description}</p>\n                      </div>\n                      <label className=\"relative inline-flex items-center cursor-pointer\">\n                        <input\n                          aria-label=\"notifications\"\n                          type=\"checkbox\"\n                          checked={\n                            settings.notifications[item.key as keyof typeof settings.notifications]\n                          }\n                          onChange={(e) =>\n                            updateSetting('notifications', item.key, e.target.checked)\n                          }\n                          className=\"sr-only peer\"\n                        />\n                        <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Security Tab */}\n            {activeTab === 'security' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Security Settings</h2>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-white\">Two-Factor Authentication</h3>\n                      <p className=\"text-sm text-slate-300\">\n                        Add an extra layer of security to your account\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        aria-label=\"security\"\n                        type=\"checkbox\"\n                        checked={settings.security.twoFactorAuth}\n                        onChange={(e) =>\n                          updateSetting('security', 'twoFactorAuth', e.target.checked)\n                        }\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                    </label>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Session Timeout (minutes)\n                    </label>\n                    <select\n                      aria-label=\"security-session time out\"\n                      value={settings.security.sessionTimeout}\n                      onChange={(e) =>\n                        updateSetting('security', 'sessionTimeout', parseInt(e.target.value, 10))\n                      }\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value={30} className=\"bg-slate-800 text-white\">\n                        30 minutes\n                      </option>\n                      <option value={60} className=\"bg-slate-800 text-white\">\n                        1 hour\n                      </option>\n                      <option value={120} className=\"bg-slate-800 text-white\">\n                        2 hours\n                      </option>\n                      <option value={480} className=\"bg-slate-800 text-white\">\n                        8 hours\n                      </option>\n                    </select>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-white\">API Access</h3>\n                      <p className=\"text-sm text-slate-300\">Allow API access to your account</p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        aria-label=\"api access\"\n                        type=\"checkbox\"\n                        checked={settings.security.apiAccess}\n                        onChange={(e) => updateSetting('security', 'apiAccess', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-white/20 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-400/30 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-white/30 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500\"></div>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Preferences Tab */}\n            {activeTab === 'preferences' && (\n              <div className=\"p-6\">\n                <h2 className=\"text-lg font-medium text-white mb-6\">Application Preferences</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">Theme</label>\n                    <select\n                      aria-label=\"performance\"\n                      value={settings.preferences.theme}\n                      onChange={(e) => updateSetting('preferences', 'theme', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"light\" className=\"bg-slate-800 text-white\">\n                        Light\n                      </option>\n                      <option value=\"dark\" className=\"bg-slate-800 text-white\">\n                        Dark\n                      </option>\n                      <option value=\"auto\" className=\"bg-slate-800 text-white\">\n                        Auto\n                      </option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Language\n                    </label>\n                    <select\n                      aria-label=\"language\"\n                      value={settings.preferences.language}\n                      onChange={(e) => updateSetting('preferences', 'language', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"en\" className=\"bg-slate-800 text-white\">\n                        English\n                      </option>\n                      <option value=\"es\" className=\"bg-slate-800 text-white\">\n                        Spanish\n                      </option>\n                      <option value=\"fr\" className=\"bg-slate-800 text-white\">\n                        French\n                      </option>\n                      <option value=\"de\" className=\"bg-slate-800 text-white\">\n                        German\n                      </option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Default Workflow Privacy\n                    </label>\n                    <select\n                      aria-label=\"preferences\"\n                      value={settings.preferences.defaultWorkflowPrivacy}\n                      onChange={(e) =>\n                        updateSetting('preferences', 'defaultWorkflowPrivacy', e.target.value)\n                      }\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                    >\n                      <option value=\"private\" className=\"bg-slate-800 text-white\">\n                        Private\n                      </option>\n                      <option value=\"team\" className=\"bg-slate-800 text-white\">\n                        Team\n                      </option>\n                      <option value=\"public\" className=\"bg-slate-800 text-white\">\n                        Public\n                      </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Save Button */}\n            <div className=\"px-6 py-4 bg-white/5 border-t border-white/20 rounded-b-lg backdrop-blur-sm\">\n              <div className=\"flex justify-end space-x-3\">\n                <button\n                  onClick={() => window.location.reload()}\n                  className=\"px-4 py-2 text-sm font-medium text-slate-300 bg-white/10 border border-white/30 rounded-lg hover:bg-white/20 hover:text-white transition-all duration-300 backdrop-blur-sm\"\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={handleSave}\n                  disabled={isSaving}\n                  className=\"px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 border border-transparent rounded-lg hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:hover:scale-100 shadow-lg\"\n                >\n                  {isSaving ? 'Saving...' : 'Save Changes'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx",
        "start": 3,
        "end": 435,
        "startLoc": {
          "line": 3,
          "column": 9,
          "position": 41
        },
        "endLoc": {
          "line": 435,
          "column": 2,
          "position": 3445
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/settings/Settings.tsx",
        "start": 6,
        "end": 438,
        "startLoc": {
          "line": 6,
          "column": 19,
          "position": 80
        },
        "endLoc": {
          "line": 438,
          "column": 2,
          "position": 3484
        }
      }
    },
    {
      "format": "javascript",
      "lines": 288,
      "fragment": "={option.id}\n                  onClick={() => setActiveDeployment(option.id)}\n                  className={`p-6 rounded-xl transition-all duration-300 ${\n                    activeDeployment === option.id\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white scale-105 shadow-xl'\n                      : 'bg-white border border-gray-200 text-gray-700 hover:border-blue-300 hover:shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <Icon\n                      className={`w-8 h-8 mx-auto mb-3 ${\n                        activeDeployment === option.id ? 'text-white' : 'text-blue-600'\n                      }`}\n                    />\n                    <h3 className=\"font-semibold text-lg mb-2\">{option.name}</h3>\n                    <p\n                      className={`text-sm mb-3 ${\n                        activeDeployment === option.id ? 'text-blue-100' : 'text-gray-500'\n                      }`}\n                    >\n                      {option.description}\n                    </p>\n\n                    <div className=\"space-y-1 text-sm\">\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Difficulty:</strong> {option.difficulty}\n                      </div>\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Setup:</strong> {option.setupTime}\n                      </div>\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Best for:</strong> {option.suitable}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Command Instructions */}\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-gray-900 rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-white\">\n                  {commands[activeDeployment as keyof typeof commands].title}\n                </h3>\n                <div className=\"flex items-center gap-2\">\n                  <Terminal className=\"w-5 h-5 text-gray-400\" />\n                  <span className=\"text-gray-400 text-sm\">Terminal</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                {commands[activeDeployment as keyof typeof commands].steps.map((step, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"text-gray-300 text-sm\">\n                      {index + 1}. {step.description}\n                    </div>\n                    <div className=\"relative\">\n                      <pre className=\"bg-black rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                        <code>{step.command}</code>\n                      </pre>\n                      <button\n                        onClick={() => copyToClipboard(step.command)}\n                        className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                        title=\"Copy to clipboard\"\n                      >\n                        {copiedCommand === step.command ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-900/30 border border-blue-700 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-blue-300 mb-2\">\n                  <ExternalLink className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">Need Help?</span>\n                </div>\n                <p className=\"text-blue-200 text-sm\">\n                  Check out our comprehensive{' '}\n                  <a href=\"#\" className=\"underline hover:text-white\">\n                    deployment guide\n                  </a>{' '}\n                  or join our{' '}\n                  <a href=\"#\" className=\"underline hover:text-white\">\n                    community forum\n                  </a>{' '}\n                  for support.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* System Requirements */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">System Requirements</h2>\n              <p className=\"text-xl text-gray-600\">\n                Hardware and software requirements for different deployment scenarios\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {Object.entries(systemRequirements).map(([tier, requirements]) => (\n                <div\n                  key={tier}\n                  className={`rounded-xl p-6 ${\n                    tier === 'recommended'\n                      ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl'\n                      : 'bg-white border border-gray-200 shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2 capitalize\">\n                      {tier} Configuration\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      {tier === 'minimum' && 'For testing and small deployments'}\n                      {tier === 'recommended' && 'For production workloads'}\n                      {tier === 'enterprise' && 'For high-scale enterprise deployments'}\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {requirements.map((req, idx) => {\n                      const Icon = req.icon;\n                      return (\n                        <div key={idx} className=\"flex items-center gap-4\">\n                          <div className=\"bg-gray-100 p-2 rounded-lg\">\n                            <Icon className=\"w-5 h-5 text-gray-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-gray-900\">{req.component}</div>\n                            <div className=\"text-gray-600 text-sm\">{req.requirement}</div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  {tier === 'recommended' && (\n                    <div className=\"mt-6 text-center\">\n                      <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium\">\n                        Recommended\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-12 bg-white border border-gray-200 rounded-xl p-6\">\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Software Dependencies</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[\n                  { name: 'Node.js', version: '20+', icon: '🟢' },\n                  { name: 'Docker', version: '24+', icon: '🐳' },\n                  { name: 'MongoDB', version: '7+', icon: '🍃' },\n                  { name: 'PostgreSQL', version: '15+', icon: '🐘' },\n                ].map((dep, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <span className=\"text-2xl\">{dep.icon}</span>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{dep.name}</div>\n                      <div className=\"text-gray-600 text-sm\">Version {dep.version}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Self-Hosted Features */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Why Self-Host?</h2>\n            <p className=\"text-xl text-gray-600\">\n              Complete control, security, and customization for your workflow automation needs\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n                >\n                  <div className=\"mb-4\">\n                    <Icon className=\"w-8 h-8 text-blue-600 group-hover:text-blue-700 transition-colors mb-4\" />\n                    <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                      {feature.title}\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n                  </div>\n\n                  <ul className=\"space-y-2\">\n                    {feature.benefits.map((benefit, idx) => (\n                      <li key={idx} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                        <span className=\"text-gray-700 text-sm\">{benefit}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Migration Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Migration Made Easy</h2>\n            <p className=\"text-xl text-gray-600\">\n              Seamlessly migrate from existing workflow platforms to your self-hosted Reporunner\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"bg-white rounded-xl p-8 shadow-lg\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Supported Migrations</h3>\n              <div className=\"space-y-4\">\n                {[\n                  { platform: 'n8n', difficulty: 'Easy', time: '1-2 hours' },\n                  {\n                    platform: 'Zapier',\n                    difficulty: 'Medium',\n                    time: '2-4 hours',\n                  },\n                  {\n                    platform: 'Make (Integromat)',\n                    difficulty: 'Medium',\n                    time: '2-4 hours',\n                  },\n                  {\n                    platform: 'Microsoft Power Automate',\n                    difficulty: 'Hard',\n                    time: '4-8 hours',\n                  },\n                ].map((migration, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <ArrowRight className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <span className=\"font-medium text-gray-900\">{migration.platform}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div\n                        className={`text-sm font-medium ${\n                          migration.difficulty === 'Easy'\n                            ? 'text-green-600'\n                            : migration.difficulty === 'Medium'\n                              ? 'text-yellow-600'\n                              : 'text-red-600'\n                        }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 280,
        "end": 567,
        "startLoc": {
          "line": 280,
          "column": 4,
          "position": 2052
        },
        "endLoc": {
          "line": 567,
          "column": 2,
          "position": 4463
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 281,
        "end": 568,
        "startLoc": {
          "line": 281,
          "column": 4,
          "position": 2065
        },
        "endLoc": {
          "line": 568,
          "column": 2,
          "position": 4476
        }
      }
    },
    {
      "format": "tsx",
      "lines": 665,
      "fragment": "/**\n * Self-Hosted Page\n *\n * Comprehensive self-hosted deployment information for Reporunner\n * Deployment options, system requirements, and getting started guides\n */\n\nimport {\n  ArrowRight,\n  Box,\n  CheckCircle,\n  Cloud,\n  Code,\n  Container,\n  Copy,\n  Cpu,\n  Database,\n  Download,\n  ExternalLink,\n  GitBranch,\n  Globe,\n  HardDrive,\n  Lock,\n  MemoryStick,\n  Play,\n  Server,\n  Settings,\n  Shield,\n  Terminal,\n  Wifi,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const SelfHosted: React.FC = () => {\n  const [activeDeployment, setActiveDeployment] = useState('docker');\n  const [copiedCommand, setCopiedCommand] = useState('');\n\n  const deploymentOptions = [\n    {\n      id: 'docker',\n      name: 'Docker Compose',\n      description: 'Quick setup for development and small deployments',\n      icon: Container,\n      difficulty: 'Easy',\n      setupTime: '5 minutes',\n      suitable: 'Development, Small Teams',\n    },\n    {\n      id: 'kubernetes',\n      name: 'Kubernetes',\n      description: 'Production-ready deployment with auto-scaling',\n      icon: Box,\n      difficulty: 'Intermediate',\n      setupTime: '15 minutes',\n      suitable: 'Production, Enterprise',\n    },\n    {\n      id: 'manual',\n      name: 'Manual Installation',\n      description: 'Custom setup with full control over configuration',\n      icon: Server,\n      difficulty: 'Advanced',\n      setupTime: '30 minutes',\n      suitable: 'Custom Environments',\n    },\n  ];\n\n  const commands = {\n    docker: {\n      title: 'Docker Compose Deployment',\n      steps: [\n        {\n          description: 'Download the docker-compose.yml file',\n          command:\n            'curl -o docker-compose.yml https://raw.githubusercontent.com/reporunner/reporunner/main/docker-compose.yml',\n        },\n        {\n          description: 'Start all services',\n          command: 'docker-compose up -d',\n        },\n        {\n          description: 'Access Reporunner',\n          command: '# Open http://localhost:5678 in your browser',\n        },\n      ],\n    },\n    kubernetes: {\n      title: 'Kubernetes Deployment',\n      steps: [\n        {\n          description: 'Add Reporunner Helm repository',\n          command: 'helm repo add reporunner https://helm.reporunner.dev',\n        },\n        {\n          description: 'Update Helm repositories',\n          command: 'helm repo update',\n        },\n        {\n          description: 'Install Reporunner',\n          command:\n            'helm install reporunner reporunner/reporunner --namespace reporunner --create-namespace',\n        },\n        {\n          description: 'Get the application URL',\n          command: 'kubectl get ingress -n reporunner',\n        },\n      ],\n    },\n    manual: {\n      title: 'Manual Installation',\n      steps: [\n        {\n          description: 'Install Node.js 20+ and npm',\n          command: '# Install Node.js from https://nodejs.org/',\n        },\n        {\n          description: 'Clone the repository',\n          command: 'git clone https://github.com/reporunner/reporunner.git && cd reporunner',\n        },\n        {\n          description: 'Install dependencies',\n          command: 'npm install && npm run build',\n        },\n        {\n          description: 'Start the application',\n          command: 'npm start',\n        },\n      ],\n    },\n  };\n\n  const systemRequirements = {\n    minimum: [\n      { component: 'CPU', requirement: '2 vCPUs', icon: Cpu },\n      { component: 'RAM', requirement: '4 GB', icon: MemoryStick },\n      { component: 'Storage', requirement: '20 GB SSD', icon: HardDrive },\n      { component: 'Network', requirement: '1 Gbps', icon: Wifi },\n    ],\n    recommended: [\n      { component: 'CPU', requirement: '4+ vCPUs', icon: Cpu },\n      { component: 'RAM', requirement: '8+ GB', icon: MemoryStick },\n      { component: 'Storage', requirement: '100+ GB SSD', icon: HardDrive },\n      { component: 'Network', requirement: '10 Gbps', icon: Wifi },\n    ],\n    enterprise: [\n      { component: 'CPU', requirement: '8+ vCPUs', icon: Cpu },\n      { component: 'RAM', requirement: '32+ GB', icon: MemoryStick },\n      { component: 'Storage', requirement: '500+ GB NVMe', icon: HardDrive },\n      { component: 'Network', requirement: '10+ Gbps', icon: Wifi },\n    ],\n  };\n\n  const features = [\n    {\n      title: 'Complete Data Sovereignty',\n      description:\n        'Your data never leaves your infrastructure. No external dependencies or third-party services required.',\n      icon: Lock,\n      benefits: ['Full data control', 'Zero external calls', 'Privacy compliant'],\n    },\n    {\n      title: 'Hybrid Database Architecture',\n      description:\n        'MongoDB for operational data, PostgreSQL with pgvector for AI and analytics workloads.',\n      icon: Database,\n      benefits: ['Best of both worlds', 'AI-ready', 'Scalable storage'],\n    },\n    {\n      title: 'Enterprise Security',\n      description:\n        'End-to-end encryption, SSO integration, and comprehensive audit logging built-in.',\n      icon: Shield,\n      benefits: ['Enterprise SSO', 'Audit trails', 'Encryption at rest'],\n    },\n    {\n      title: 'Cloud Agnostic',\n      description:\n        'Deploy on any cloud provider or on-premises infrastructure with the same configuration.',\n      icon: Cloud,\n      benefits: ['Vendor flexibility', 'Avoid lock-in', 'Cost optimization'],\n    },\n    {\n      title: 'Auto-Scaling',\n      description:\n        'Kubernetes-native deployment with horizontal pod autoscaling and load balancing.',\n      icon: Zap,\n      benefits: ['Handle traffic spikes', 'Cost efficient', 'High availability'],\n    },\n    {\n      title: 'Global Deployment',\n      description: 'Multi-region deployment support with data residency compliance.',\n      icon: Globe,\n      benefits: ['Low latency', 'Data residency', 'Disaster recovery'],\n    },\n  ];\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedCommand(text);\n    setTimeout(() => setCopiedCommand(''), 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Self-Hosted\n              </span>\n              <br />\n              Workflow Automation\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Complete control over your data and infrastructure. Deploy Reporunner anywhere -\n              cloud, on-premises, or air-gapped environments with enterprise-grade security.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Download className=\"w-5 h-5\" />\n                Quick Start\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <Play className=\"w-5 h-5\" />\n                Watch Demo\n              </button>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">5 min</div>\n                <div className=\"text-sm text-slate-300\">Setup Time</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">100%</div>\n                <div className=\"text-sm text-slate-300\">Data Control</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">0</div>\n                <div className=\"text-sm text-slate-300\">External Deps</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">∞</div>\n                <div className=\"text-sm text-slate-300\">Scalability</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Deployment Options */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Deployment Options</h2>\n            <p className=\"text-xl text-gray-600\">\n              Choose the deployment method that fits your infrastructure and requirements\n            </p>\n          </div>\n\n          {/* Deployment Method Selector */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {deploymentOptions.map((option) => {\n              const Icon = option.icon;\n              return (\n                <button\n                  key={option.id}\n                  onClick={() => setActiveDeployment(option.id)}\n                  className={`p-6 rounded-xl transition-all duration-300 ${\n                    activeDeployment === option.id\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white scale-105 shadow-xl'\n                      : 'bg-white border border-gray-200 text-gray-700 hover:border-blue-300 hover:shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <Icon\n                      className={`w-8 h-8 mx-auto mb-3 ${\n                        activeDeployment === option.id ? 'text-white' : 'text-blue-600'\n                      }`}\n                    />\n                    <h3 className=\"font-semibold text-lg mb-2\">{option.name}</h3>\n                    <p\n                      className={`text-sm mb-3 ${\n                        activeDeployment === option.id ? 'text-blue-100' : 'text-gray-500'\n                      }`}\n                    >\n                      {option.description}\n                    </p>\n\n                    <div className=\"space-y-1 text-sm\">\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Difficulty:</strong> {option.difficulty}\n                      </div>\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Setup:</strong> {option.setupTime}\n                      </div>\n                      <div\n                        className={\n                          activeDeployment === option.id ? 'text-blue-100' : 'text-gray-600'\n                        }\n                      >\n                        <strong>Best for:</strong> {option.suitable}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Command Instructions */}\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-gray-900 rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-white\">\n                  {commands[activeDeployment as keyof typeof commands].title}\n                </h3>\n                <div className=\"flex items-center gap-2\">\n                  <Terminal className=\"w-5 h-5 text-gray-400\" />\n                  <span className=\"text-gray-400 text-sm\">Terminal</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                {commands[activeDeployment as keyof typeof commands].steps.map((step, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"text-gray-300 text-sm\">\n                      {index + 1}. {step.description}\n                    </div>\n                    <div className=\"relative\">\n                      <pre className=\"bg-black rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                        <code>{step.command}</code>\n                      </pre>\n                      <button\n                        onClick={() => copyToClipboard(step.command)}\n                        className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                        title=\"Copy to clipboard\"\n                      >\n                        {copiedCommand === step.command ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-900/30 border border-blue-700 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-blue-300 mb-2\">\n                  <ExternalLink className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">Need Help?</span>\n                </div>\n                <p className=\"text-blue-200 text-sm\">\n                  Check out our comprehensive{' '}\n                  <a href=\"#\" className=\"underline hover:text-white\">\n                    deployment guide\n                  </a>{' '}\n                  or join our{' '}\n                  <a href=\"#\" className=\"underline hover:text-white\">\n                    community forum\n                  </a>{' '}\n                  for support.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* System Requirements */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">System Requirements</h2>\n              <p className=\"text-xl text-gray-600\">\n                Hardware and software requirements for different deployment scenarios\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {Object.entries(systemRequirements).map(([tier, requirements]) => (\n                <div\n                  key={tier}\n                  className={`rounded-xl p-6 ${\n                    tier === 'recommended'\n                      ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl'\n                      : 'bg-white border border-gray-200 shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2 capitalize\">\n                      {tier} Configuration\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      {tier === 'minimum' && 'For testing and small deployments'}\n                      {tier === 'recommended' && 'For production workloads'}\n                      {tier === 'enterprise' && 'For high-scale enterprise deployments'}\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {requirements.map((req, idx) => {\n                      const Icon = req.icon;\n                      return (\n                        <div key={idx} className=\"flex items-center gap-4\">\n                          <div className=\"bg-gray-100 p-2 rounded-lg\">\n                            <Icon className=\"w-5 h-5 text-gray-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-gray-900\">{req.component}</div>\n                            <div className=\"text-gray-600 text-sm\">{req.requirement}</div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  {tier === 'recommended' && (\n                    <div className=\"mt-6 text-center\">\n                      <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium\">\n                        Recommended\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-12 bg-white border border-gray-200 rounded-xl p-6\">\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Software Dependencies</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[\n                  { name: 'Node.js', version: '20+', icon: '🟢' },\n                  { name: 'Docker', version: '24+', icon: '🐳' },\n                  { name: 'MongoDB', version: '7+', icon: '🍃' },\n                  { name: 'PostgreSQL', version: '15+', icon: '🐘' },\n                ].map((dep, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <span className=\"text-2xl\">{dep.icon}</span>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{dep.name}</div>\n                      <div className=\"text-gray-600 text-sm\">Version {dep.version}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Self-Hosted Features */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Why Self-Host?</h2>\n            <p className=\"text-xl text-gray-600\">\n              Complete control, security, and customization for your workflow automation needs\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n                >\n                  <div className=\"mb-4\">\n                    <Icon className=\"w-8 h-8 text-blue-600 group-hover:text-blue-700 transition-colors mb-4\" />\n                    <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                      {feature.title}\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n                  </div>\n\n                  <ul className=\"space-y-2\">\n                    {feature.benefits.map((benefit, idx) => (\n                      <li key={idx} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                        <span className=\"text-gray-700 text-sm\">{benefit}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Migration Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Migration Made Easy</h2>\n            <p className=\"text-xl text-gray-600\">\n              Seamlessly migrate from existing workflow platforms to your self-hosted Reporunner\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"bg-white rounded-xl p-8 shadow-lg\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Supported Migrations</h3>\n              <div className=\"space-y-4\">\n                {[\n                  { platform: 'n8n', difficulty: 'Easy', time: '1-2 hours' },\n                  {\n                    platform: 'Zapier',\n                    difficulty: 'Medium',\n                    time: '2-4 hours',\n                  },\n                  {\n                    platform: 'Make (Integromat)',\n                    difficulty: 'Medium',\n                    time: '2-4 hours',\n                  },\n                  {\n                    platform: 'Microsoft Power Automate',\n                    difficulty: 'Hard',\n                    time: '4-8 hours',\n                  },\n                ].map((migration, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <ArrowRight className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <span className=\"font-medium text-gray-900\">{migration.platform}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div\n                        className={`text-sm font-medium ${\n                          migration.difficulty === 'Easy'\n                            ? 'text-green-600'\n                            : migration.difficulty === 'Medium'\n                              ? 'text-yellow-600'\n                              : 'text-red-600'\n                        }`}\n                      >\n                        {migration.difficulty}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">{migration.time}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl p-8 shadow-lg\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Migration Tools</h3>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-blue-100 p-2 rounded-lg\">\n                    <Code className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Import Wizard</h4>\n                    <p className=\"text-gray-600 text-sm\">\n                      Automated workflow import from popular platforms with intelligent conversion\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-green-100 p-2 rounded-lg\">\n                    <GitBranch className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Schema Mapping</h4>\n                    <p className=\"text-gray-600 text-sm\">\n                      Automatic mapping of data structures and field transformations\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-purple-100 p-2 rounded-lg\">\n                    <Settings className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Professional Services</h4>\n                    <p className=\"text-gray-600 text-sm\">\n                      Expert migration assistance for complex workflows and custom integrations\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Deploy Your Own?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Start your self-hosted journey today. Complete data sovereignty, enterprise security,\n            and unlimited scalability await.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Download className=\"w-5 h-5\" />\n              Download Now\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <ExternalLink className=\"w-5 h-5\" />\n              Documentation\n            </button>\n          </div>\n\n          <div className=\"flex items-center justify-center gap-8 text-sm opacity-80\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              100% Open Source\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              No License Fees\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Community Support\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default SelfHosted;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 1,
        "end": 665,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 665,
          "column": 2,
          "position": 5252
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/selfhosted/SelfHosted.tsx",
        "start": 2,
        "end": 666,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 666,
          "column": 2,
          "position": 5265
        }
      }
    },
    {
      "format": "javascript",
      "lines": 211,
      "fragment": "={category.id}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n                      selectedCategory === category.id\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {category.name}\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Timeframe Filter */}\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-700 font-medium\">Timeframe:</span>\n              <select\n                value={timeframe}\n                onChange={(e) => setTimeframe(e.target.value)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"2024\">2024</option>\n                <option value=\"2025\">2025</option>\n                <option value=\"2026\">2026+</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Roadmap Items */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {filteredItems.length > 0 ? (\n              <div className=\"space-y-6\">\n                {filteredItems.map((item) => {\n                  const statusInfo = statusConfig[item.status as keyof typeof statusConfig];\n                  const priorityInfo = priorityConfig[item.priority as keyof typeof priorityConfig];\n                  const StatusIcon = statusInfo.icon;\n\n                  return (\n                    <div\n                      key={item.id}\n                      className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                    >\n                      <div className=\"flex flex-col lg:flex-row lg:items-center gap-6\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start gap-4 mb-4\">\n                            <div className={`p-2 rounded-lg ${statusInfo.bg}`}>\n                              <StatusIcon className={`w-6 h-6 ${statusInfo.color}`} />\n                            </div>\n\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"text-xl font-bold text-gray-900\">{item.title}</h3>\n                                <span\n                                  className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.bg} ${statusInfo.color}`}\n                                >\n                                  {statusInfo.label}\n                                </span>\n                                <span\n                                  className={`px-2 py-1 text-xs font-medium rounded-full ${priorityInfo.bg} ${priorityInfo.color}`}\n                                >\n                                  {item.priority} priority\n                                </span>\n                              </div>\n\n                              <p className=\"text-gray-600 mb-3\">{item.description}</p>\n\n                              <div className=\"flex items-center gap-6 text-sm text-gray-500\">\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"w-4 h-4\" />\n                                  {item.quarter} {timeframe}\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <TrendingUp className=\"w-4 h-4\" />\n                                  {item.impact} Impact\n                                </span>\n                                <span className=\"capitalize\">\n                                  {item.category.replace('-', ' & ')}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-4\">\n                          {/* Voting */}\n                          <div className=\"flex items-center gap-2 bg-gray-50 rounded-lg p-3\">\n                            <button className=\"flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors\">\n                              <ThumbsUp className=\"w-5 h-5\" />\n                              <span className=\"font-medium\">{item.votes}</span>\n                            </button>\n                          </div>\n\n                          {/* View Details */}\n                          <button className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors\">\n                            <Eye className=\"w-4 h-4\" />\n                            Details\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"text-6xl mb-4\">🔍</div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No features found</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Try adjusting your category or timeframe filter.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Request Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-8 shadow-xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Help Shape Our Roadmap</h2>\n                <p className=\"text-xl text-gray-600\">\n                  Your feedback drives our development. Vote on existing features or request new\n                  ones.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-blue-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <ThumbsUp className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Vote on Features</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Help us prioritize features by voting on what matters most to you\n                  </p>\n                </div>\n\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-green-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <MessageSquare className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Request Features</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Submit new feature ideas and discuss them with the community\n                  </p>\n                </div>\n\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-purple-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <Code className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Contribute</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Join our open-source community and contribute to development\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <button className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all flex items-center gap-2 justify-center\">\n                    <MessageSquare className=\"w-5 h-5\" />\n                    Request Feature\n                  </button>\n                  <button className=\"px-8 py-3 border border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2 justify-center\">\n                    <ExternalLink className=\"w-5 h-5\" />\n                    Join Discussion\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quarterly Highlights */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Recent Highlights</h2>\n            <p className=\"text-xl text-gray-600\">\n              Major features and improvements delivered in recent quarters\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {roadmapItems['2024']\n              .filter((item) => item.status === 'completed')\n              .slice(0, 3)\n              .map((item) => {\n                const categoryIcon = {\n                  'ai-ml': Brain,\n                  enterprise: Shield,\n                  platform: Settings,\n                  developer: Code,\n                  integrations: Webhook,\n                };\n                const Icon = categoryIcon[item.category as keyof typeof categoryIcon] || Settings;\n\n                return (\n                  <div\n                    key={item.id}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx",
        "start": 326,
        "end": 536,
        "startLoc": {
          "line": 326,
          "column": 4,
          "position": 2444
        },
        "endLoc": {
          "line": 536,
          "column": 2,
          "position": 4251
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx",
        "start": 327,
        "end": 537,
        "startLoc": {
          "line": 327,
          "column": 4,
          "position": 2457
        },
        "endLoc": {
          "line": 537,
          "column": 2,
          "position": 4264
        }
      }
    },
    {
      "format": "tsx",
      "lines": 592,
      "fragment": "/**\n * Roadmap Page\n *\n * Product roadmap and future features for Reporunner\n * Showing completed features, current development, and planned features\n */\n\nimport {\n  Brain,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Code,\n  ExternalLink,\n  Eye,\n  Globe,\n  Lightbulb,\n  MessageSquare,\n  Settings,\n  Shield,\n  Star,\n  ThumbsUp,\n  TrendingUp,\n  Webhook,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Roadmap: React.FC = () => {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [timeframe, setTimeframe] = useState('2025');\n\n  const categories = [\n    { id: 'all', name: 'All Features', icon: Globe },\n    { id: 'ai-ml', name: 'AI & ML', icon: Brain },\n    { id: 'enterprise', name: 'Enterprise', icon: Shield },\n    { id: 'developer', name: 'Developer', icon: Code },\n    { id: 'integrations', name: 'Integrations', icon: Webhook },\n    { id: 'platform', name: 'Platform', icon: Settings },\n  ];\n\n  const roadmapItems = {\n    '2024': [\n      {\n        id: 'hybrid-db',\n        title: 'Hybrid Database Architecture',\n        description: 'MongoDB + PostgreSQL with pgvector for AI workloads',\n        category: 'platform',\n        status: 'completed',\n        quarter: 'Q4',\n        votes: 234,\n        priority: 'high',\n        impact: 'High',\n      },\n      {\n        id: 'ai-agents',\n        title: 'AI Agent System',\n        description: 'Multi-LLM support with OpenAI, Anthropic, and local models',\n        category: 'ai-ml',\n        status: 'completed',\n        quarter: 'Q4',\n        votes: 189,\n        priority: 'high',\n        impact: 'High',\n      },\n      {\n        id: 'enterprise-sso',\n        title: 'Enterprise SSO',\n        description: 'SAML, OIDC, and Active Directory integration',\n        category: 'enterprise',\n        status: 'completed',\n        quarter: 'Q3',\n        votes: 156,\n        priority: 'high',\n        impact: 'Medium',\n      },\n    ],\n    '2025': [\n      {\n        id: 'visual-editor-v2',\n        title: 'Visual Editor 2.0',\n        description: 'Redesigned workflow editor with improved UX and performance',\n        category: 'platform',\n        status: 'in-progress',\n        quarter: 'Q1',\n        votes: 412,\n        priority: 'high',\n        impact: 'High',\n      },\n      {\n        id: 'vector-search',\n        title: 'Advanced Vector Search',\n        description: 'Semantic search across workflows, data, and documentation',\n        category: 'ai-ml',\n        status: 'in-progress',\n        quarter: 'Q1',\n        votes: 298,\n        priority: 'high',\n        impact: 'Medium',\n      },\n      {\n        id: 'mobile-app',\n        title: 'Mobile Application',\n        description: 'Native iOS and Android apps for workflow monitoring',\n        category: 'platform',\n        status: 'planned',\n        quarter: 'Q2',\n        votes: 356,\n        priority: 'medium',\n        impact: 'Medium',\n      },\n      {\n        id: 'workflow-marketplace',\n        title: 'Workflow Marketplace',\n        description: 'Community-driven marketplace for workflow templates',\n        category: 'platform',\n        status: 'planned',\n        quarter: 'Q2',\n        votes: 278,\n        priority: 'medium',\n        impact: 'High',\n      },\n      {\n        id: 'advanced-analytics',\n        title: 'Advanced Analytics',\n        description: 'Predictive analytics and performance optimization insights',\n        category: 'enterprise',\n        status: 'planned',\n        quarter: 'Q3',\n        votes: 234,\n        priority: 'medium',\n        impact: 'Medium',\n      },\n      {\n        id: 'multimodal-ai',\n        title: 'Multimodal AI Support',\n        description: 'Vision, audio, and document processing with AI models',\n        category: 'ai-ml',\n        status: 'planned',\n        quarter: 'Q3',\n        votes: 189,\n        priority: 'high',\n        impact: 'High',\n      },\n      {\n        id: 'workflow-version-control',\n        title: 'Workflow Version Control',\n        description: 'Git-like version control for workflows with branching',\n        category: 'developer',\n        status: 'planned',\n        quarter: 'Q4',\n        votes: 167,\n        priority: 'medium',\n        impact: 'Medium',\n      },\n      {\n        id: 'kubernetes-operator',\n        title: 'Kubernetes Operator',\n        description: 'Native Kubernetes operator for advanced deployments',\n        category: 'enterprise',\n        status: 'planned',\n        quarter: 'Q4',\n        votes: 143,\n        priority: 'low',\n        impact: 'Medium',\n      },\n    ],\n    '2026': [\n      {\n        id: 'ai-workflow-generation',\n        title: 'AI Workflow Generation',\n        description: 'Generate complete workflows from natural language descriptions',\n        category: 'ai-ml',\n        status: 'research',\n        quarter: 'Q1',\n        votes: 445,\n        priority: 'high',\n        impact: 'High',\n      },\n      {\n        id: 'federated-learning',\n        title: 'Federated Learning Platform',\n        description: 'Distributed ML training across multiple Reporunner instances',\n        category: 'ai-ml',\n        status: 'research',\n        quarter: 'Q2',\n        votes: 234,\n        priority: 'low',\n        impact: 'High',\n      },\n      {\n        id: 'quantum-computing',\n        title: 'Quantum Computing Integration',\n        description: 'Integration with quantum computing platforms for optimization',\n        category: 'integrations',\n        status: 'research',\n        quarter: 'Q3',\n        votes: 189,\n        priority: 'low',\n        impact: 'Low',\n      },\n    ],\n  };\n\n  const statusConfig = {\n    completed: {\n      icon: CheckCircle,\n      color: 'text-green-600',\n      bg: 'bg-green-100',\n      label: 'Completed',\n    },\n    'in-progress': {\n      icon: Clock,\n      color: 'text-blue-600',\n      bg: 'bg-blue-100',\n      label: 'In Progress',\n    },\n    planned: {\n      icon: Calendar,\n      color: 'text-purple-600',\n      bg: 'bg-purple-100',\n      label: 'Planned',\n    },\n    research: {\n      icon: Lightbulb,\n      color: 'text-orange-600',\n      bg: 'bg-orange-100',\n      label: 'Research',\n    },\n  };\n\n  const priorityConfig = {\n    high: { color: 'text-red-600', bg: 'bg-red-100' },\n    medium: { color: 'text-yellow-600', bg: 'bg-yellow-100' },\n    low: { color: 'text-gray-600', bg: 'bg-gray-100' },\n  };\n\n  const filteredItems =\n    roadmapItems[timeframe as keyof typeof roadmapItems]?.filter(\n      (item) => selectedCategory === 'all' || item.category === selectedCategory\n    ) || [];\n\n  const stats = {\n    completed: Object.values(roadmapItems)\n      .flat()\n      .filter((item) => item.status === 'completed').length,\n    inProgress: Object.values(roadmapItems)\n      .flat()\n      .filter((item) => item.status === 'in-progress').length,\n    planned: Object.values(roadmapItems)\n      .flat()\n      .filter((item) => item.status === 'planned').length,\n    totalVotes: Object.values(roadmapItems)\n      .flat()\n      .reduce((sum, item) => sum + item.votes, 0),\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Product{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Roadmap\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              See what's coming next for Reporunner. Vote on features, track progress, and help\n              shape the future of workflow automation.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <MessageSquare className=\"w-5 h-5\" />\n                Request Feature\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <ExternalLink className=\"w-5 h-5\" />\n                GitHub Issues\n              </button>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">{stats.completed}</div>\n                <div className=\"text-sm text-slate-300\">Completed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">{stats.inProgress}</div>\n                <div className=\"text-sm text-slate-300\">In Progress</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">{stats.planned}</div>\n                <div className=\"text-sm text-slate-300\">Planned</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">{stats.totalVotes}</div>\n                <div className=\"text-sm text-slate-300\">Total Votes</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Filters */}\n      <section className=\"py-8 bg-white border-b border-gray-200\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-6 items-center justify-between\">\n            {/* Category Filter */}\n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map((category) => {\n                const Icon = category.icon;\n                return (\n                  <button\n                    key={category.id}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n                      selectedCategory === category.id\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {category.name}\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Timeframe Filter */}\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-700 font-medium\">Timeframe:</span>\n              <select\n                value={timeframe}\n                onChange={(e) => setTimeframe(e.target.value)}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"2024\">2024</option>\n                <option value=\"2025\">2025</option>\n                <option value=\"2026\">2026+</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Roadmap Items */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {filteredItems.length > 0 ? (\n              <div className=\"space-y-6\">\n                {filteredItems.map((item) => {\n                  const statusInfo = statusConfig[item.status as keyof typeof statusConfig];\n                  const priorityInfo = priorityConfig[item.priority as keyof typeof priorityConfig];\n                  const StatusIcon = statusInfo.icon;\n\n                  return (\n                    <div\n                      key={item.id}\n                      className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                    >\n                      <div className=\"flex flex-col lg:flex-row lg:items-center gap-6\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start gap-4 mb-4\">\n                            <div className={`p-2 rounded-lg ${statusInfo.bg}`}>\n                              <StatusIcon className={`w-6 h-6 ${statusInfo.color}`} />\n                            </div>\n\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"text-xl font-bold text-gray-900\">{item.title}</h3>\n                                <span\n                                  className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.bg} ${statusInfo.color}`}\n                                >\n                                  {statusInfo.label}\n                                </span>\n                                <span\n                                  className={`px-2 py-1 text-xs font-medium rounded-full ${priorityInfo.bg} ${priorityInfo.color}`}\n                                >\n                                  {item.priority} priority\n                                </span>\n                              </div>\n\n                              <p className=\"text-gray-600 mb-3\">{item.description}</p>\n\n                              <div className=\"flex items-center gap-6 text-sm text-gray-500\">\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"w-4 h-4\" />\n                                  {item.quarter} {timeframe}\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <TrendingUp className=\"w-4 h-4\" />\n                                  {item.impact} Impact\n                                </span>\n                                <span className=\"capitalize\">\n                                  {item.category.replace('-', ' & ')}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-4\">\n                          {/* Voting */}\n                          <div className=\"flex items-center gap-2 bg-gray-50 rounded-lg p-3\">\n                            <button className=\"flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors\">\n                              <ThumbsUp className=\"w-5 h-5\" />\n                              <span className=\"font-medium\">{item.votes}</span>\n                            </button>\n                          </div>\n\n                          {/* View Details */}\n                          <button className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors\">\n                            <Eye className=\"w-4 h-4\" />\n                            Details\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"text-6xl mb-4\">🔍</div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No features found</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Try adjusting your category or timeframe filter.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Request Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-8 shadow-xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Help Shape Our Roadmap</h2>\n                <p className=\"text-xl text-gray-600\">\n                  Your feedback drives our development. Vote on existing features or request new\n                  ones.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-blue-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <ThumbsUp className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Vote on Features</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Help us prioritize features by voting on what matters most to you\n                  </p>\n                </div>\n\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-green-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <MessageSquare className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Request Features</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Submit new feature ideas and discuss them with the community\n                  </p>\n                </div>\n\n                <div className=\"text-center p-6 border border-gray-200 rounded-xl\">\n                  <div className=\"bg-purple-100 p-3 rounded-lg w-fit mx-auto mb-4\">\n                    <Code className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Contribute</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Join our open-source community and contribute to development\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <button className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all flex items-center gap-2 justify-center\">\n                    <MessageSquare className=\"w-5 h-5\" />\n                    Request Feature\n                  </button>\n                  <button className=\"px-8 py-3 border border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2 justify-center\">\n                    <ExternalLink className=\"w-5 h-5\" />\n                    Join Discussion\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quarterly Highlights */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Recent Highlights</h2>\n            <p className=\"text-xl text-gray-600\">\n              Major features and improvements delivered in recent quarters\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {roadmapItems['2024']\n              .filter((item) => item.status === 'completed')\n              .slice(0, 3)\n              .map((item) => {\n                const categoryIcon = {\n                  'ai-ml': Brain,\n                  enterprise: Shield,\n                  platform: Settings,\n                  developer: Code,\n                  integrations: Webhook,\n                };\n                const Icon = categoryIcon[item.category as keyof typeof categoryIcon] || Settings;\n\n                return (\n                  <div\n                    key={item.id}\n                    className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow\"\n                  >\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"bg-green-100 p-2 rounded-lg\">\n                        <Icon className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"text-green-600 font-medium text-sm\">Completed</span>\n                    </div>\n\n                    <h3 className=\"font-bold text-lg text-gray-900 mb-2\">{item.title}</h3>\n                    <p className=\"text-gray-600 mb-4\">{item.description}</p>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-500\">{item.quarter} 2024</span>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"w-4 h-4 text-yellow-400\" />\n                        <span className=\"text-sm font-medium\">{item.votes} votes</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Be Part of Our Journey</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Join our community of developers and enterprises shaping the future of workflow\n            automation.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <MessageSquare className=\"w-5 h-5\" />\n              Join Community\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <ExternalLink className=\"w-5 h-5\" />\n              Follow on GitHub\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Roadmap;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx",
        "start": 1,
        "end": 592,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 592,
          "column": 2,
          "position": 4708
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/roadmap/Roadmap.tsx",
        "start": 2,
        "end": 593,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 593,
          "column": 2,
          "position": 4721
        }
      }
    },
    {
      "format": "javascript",
      "lines": 303,
      "fragment": "={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Logo */}\n            <Link to=\"/\" className=\"inline-flex items-center gap-3 mb-8 group\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold text-white\">Reporunner</span>\n            </Link>\n\n            <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n              Join the{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                enterprise\n              </span>{' '}\n              automation revolution\n            </h1>\n\n            <p className=\"text-xl text-slate-200 mb-8 leading-relaxed max-w-lg\">\n              Start building powerful workflows with enterprise-grade security, AI intelligence, and\n              complete data sovereignty. Join thousands of organizations already automating with\n              Reporunner.\n            </p>\n\n            {/* Benefits */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-green-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span>Free forever plan available</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-blue-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-blue-400\" />\n                </div>\n                <span>Enterprise security from day one</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-purple-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Zap className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span>Setup in under 5 minutes</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Registration Form */}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center px-6 py-12\">\n          <div\n            className={`w-full max-w-md transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center gap-3 group\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">Reporunner</span>\n              </Link>\n            </div>\n\n            {/* Form Card */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Create your account</h2>\n                <p className=\"text-slate-300\">Start automating your workflows today</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Name Fields */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label\n                      htmlFor=\"firstName\"\n                      className=\"block text-sm font-medium text-slate-200 mb-2\"\n                    >\n                      First name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                      <input\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        type=\"text\"\n                        autoComplete=\"given-name\"\n                        required\n                        value={formData.firstName}\n                        onChange={handleChange}\n                        className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                          formErrors.firstName ? 'border-red-500/50' : 'border-white/20'\n                        }`}\n                        placeholder=\"First name\"\n                      />\n                    </div>\n                    {formErrors.firstName && (\n                      <p className=\"mt-2 text-sm text-red-300\">{formErrors.firstName}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label\n                      htmlFor=\"lastName\"\n                      className=\"block text-sm font-medium text-slate-200 mb-2\"\n                    >\n                      Last name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                      <input\n                        id=\"lastName\"\n                        name=\"lastName\"\n                        type=\"text\"\n                        autoComplete=\"family-name\"\n                        required\n                        value={formData.lastName}\n                        onChange={handleChange}\n                        className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                          formErrors.lastName ? 'border-red-500/50' : 'border-white/20'\n                        }`}\n                        placeholder=\"Last name\"\n                      />\n                    </div>\n                    {formErrors.lastName && (\n                      <p className=\"mt-2 text-sm text-red-300\">{formErrors.lastName}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.password ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Create a password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n\n                  {/* Password Strength Indicator */}\n                  {formData.password && (\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex-1 bg-white/20 rounded-full h-2\">\n                          <div\n                            className={`h-full rounded-full transition-all duration-300 ${\n                              passwordStrength.score <= 2\n                                ? 'bg-red-500'\n                                : passwordStrength.score <= 3\n                                  ? 'bg-yellow-500'\n                                  : passwordStrength.score <= 4\n                                    ? 'bg-blue-500'\n                                    : 'bg-green-500'\n                            }`}\n                            style={{\n                              width: `${(passwordStrength.score / 5) * 100}%`,\n                            }}\n                          />\n                        </div>\n                        <span className={`text-sm ${passwordStrength.color}`}>\n                          {passwordStrength.text}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n\n                  {formErrors.password && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.password}</p>\n                  )}\n                </div>\n\n                {/* Confirm Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"confirmPassword\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Confirm password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.confirmPassword ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Confirm your password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"w-5 h-5\" />\n                      ) : (\n                        <Eye className=\"w-5 h-5\" />\n                      )}\n                    </button>\n                  </div>\n                  {formErrors.confirmPassword && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.confirmPassword}</p>\n                  )}\n                </div>\n\n                {/* Terms Acceptance */}\n                <div>\n                  <label className=\"flex items-start gap-3\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"acceptTerms\"\n                      checked={formData.acceptTerms}\n                      onChange={handleChange}\n                      className=\"w-4 h-4 mt-1 text-blue-600 bg-white/10 border-white/20 rounded focus:ring-blue-500 focus:ring-2\"\n                    />\n                    <span className=\"text-sm text-slate-300 leading-relaxed\">\n                      I agree to the{' '}\n                      <Link\n                        to=\"/terms\"\n                        className=\"text-blue-400 hover:text-blue-300 transition-colors underline\"\n                      >\n                        Terms of Service\n                      </Link>{' '}\n                      and{' '}\n                      <Link\n                        to=\"/privacy\"\n                        className=\"text-blue-400 hover:text-blue-300 transition-colors underline\"\n                      >\n                        Privacy Policy\n                      </Link>\n                    </span>\n                  </label>\n                  {formErrors.acceptTerms && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.acceptTerms}</p>\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isLoading}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx",
        "start": 157,
        "end": 459,
        "startLoc": {
          "line": 157,
          "column": 10,
          "position": 1452
        },
        "endLoc": {
          "line": 459,
          "column": 2,
          "position": 3604
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 161,
        "end": 463,
        "startLoc": {
          "line": 161,
          "column": 10,
          "position": 1504
        },
        "endLoc": {
          "line": 463,
          "column": 2,
          "position": 3656
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "import {\n  ArrowRight,\n  CheckCircle,\n  Crown,\n  Eye,\n  EyeOff,\n  Lock,\n  Mail,\n  Shield,\n  User,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '@/core/stores/authStore';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 6,
          "position": 134
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 7,
          "position": 133
        }
      }
    },
    {
      "format": "tsx",
      "lines": 504,
      "fragment": ";\n\nconst Register: React.FC = () => {\n  const navigate = useNavigate();\n  const { register, isLoading, error, isAuthenticated, clearError } = useAuthStore();\n\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    acceptTerms: false,\n  });\n\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Animation trigger\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // Clear errors when component mounts\n  useEffect(() => {\n    clearError();\n  }, [clearError]);\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.firstName.trim()) {\n      errors.firstName = 'First name is required';\n    }\n\n    if (!formData.lastName.trim()) {\n      errors.lastName = 'Last name is required';\n    }\n\n    if (!formData.email) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = 'Email is invalid';\n    }\n\n    if (!formData.password) {\n      errors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      errors.password = 'Password must be at least 8 characters';\n    }\n\n    if (!formData.confirmPassword) {\n      errors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      errors.confirmPassword = 'Passwords do not match';\n    }\n\n    if (!formData.acceptTerms) {\n      errors.acceptTerms = 'You must accept the terms and conditions';\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      const { confirmPassword, ...registerData } = formData;\n      await register(registerData);\n      navigate('/app/dashboard');\n    } catch (_error) {}\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    // Clear field error when user starts typing\n    if (formErrors[name]) {\n      setFormErrors((prev) => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const getPasswordStrength = (password: string) => {\n    if (!password) return { score: 0, text: '', color: '' };\n\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n\n    if (score <= 2) return { score, text: 'Weak', color: 'text-red-500' };\n    if (score <= 3) return { score, text: 'Fair', color: 'text-yellow-500' };\n    if (score <= 4) return { score, text: 'Good', color: 'text-blue-500' };\n    return { score, text: 'Strong', color: 'text-green-500' };\n  };\n\n  const passwordStrength = getPasswordStrength(formData.password);\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Header */}\n      <Header />\n      {/* Background Elements - matching landing page */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n      <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n      {/* Animated Background Orbs */}\n      <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse delay-1000\" />\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-20 right-20 w-20 h-20 bg-blue-500/20 rounded-lg backdrop-blur-sm animate-float hidden lg:block\" />\n      <div className=\"absolute bottom-20 left-20 w-16 h-16 bg-purple-500/20 rounded-full backdrop-blur-sm animate-float delay-1000 hidden lg:block\" />\n\n      <div className=\"relative z-10 min-h-screen flex\">\n        {/* Left Side - Branding */}\n        <div className=\"hidden lg:flex lg:w-1/2 flex-col justify-center px-12\">\n          <div\n            className={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Logo */}\n            <Link to=\"/\" className=\"inline-flex items-center gap-3 mb-8 group\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold text-white\">Reporunner</span>\n            </Link>\n\n            <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n              Join the{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                enterprise\n              </span>{' '}\n              automation revolution\n            </h1>\n\n            <p className=\"text-xl text-slate-200 mb-8 leading-relaxed max-w-lg\">\n              Start building powerful workflows with enterprise-grade security, AI intelligence, and\n              complete data sovereignty. Join thousands of organizations already automating with\n              Reporunner.\n            </p>\n\n            {/* Benefits */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-green-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span>Free forever plan available</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-blue-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-blue-400\" />\n                </div>\n                <span>Enterprise security from day one</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-purple-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Zap className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span>Setup in under 5 minutes</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Registration Form */}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center px-6 py-12\">\n          <div\n            className={`w-full max-w-md transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center gap-3 group\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">Reporunner</span>\n              </Link>\n            </div>\n\n            {/* Form Card */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Create your account</h2>\n                <p className=\"text-slate-300\">Start automating your workflows today</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Name Fields */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label\n                      htmlFor=\"firstName\"\n                      className=\"block text-sm font-medium text-slate-200 mb-2\"\n                    >\n                      First name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                      <input\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        type=\"text\"\n                        autoComplete=\"given-name\"\n                        required\n                        value={formData.firstName}\n                        onChange={handleChange}\n                        className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                          formErrors.firstName ? 'border-red-500/50' : 'border-white/20'\n                        }`}\n                        placeholder=\"First name\"\n                      />\n                    </div>\n                    {formErrors.firstName && (\n                      <p className=\"mt-2 text-sm text-red-300\">{formErrors.firstName}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label\n                      htmlFor=\"lastName\"\n                      className=\"block text-sm font-medium text-slate-200 mb-2\"\n                    >\n                      Last name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                      <input\n                        id=\"lastName\"\n                        name=\"lastName\"\n                        type=\"text\"\n                        autoComplete=\"family-name\"\n                        required\n                        value={formData.lastName}\n                        onChange={handleChange}\n                        className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                          formErrors.lastName ? 'border-red-500/50' : 'border-white/20'\n                        }`}\n                        placeholder=\"Last name\"\n                      />\n                    </div>\n                    {formErrors.lastName && (\n                      <p className=\"mt-2 text-sm text-red-300\">{formErrors.lastName}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.password ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Create a password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n\n                  {/* Password Strength Indicator */}\n                  {formData.password && (\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex-1 bg-white/20 rounded-full h-2\">\n                          <div\n                            className={`h-full rounded-full transition-all duration-300 ${\n                              passwordStrength.score <= 2\n                                ? 'bg-red-500'\n                                : passwordStrength.score <= 3\n                                  ? 'bg-yellow-500'\n                                  : passwordStrength.score <= 4\n                                    ? 'bg-blue-500'\n                                    : 'bg-green-500'\n                            }`}\n                            style={{\n                              width: `${(passwordStrength.score / 5) * 100}%`,\n                            }}\n                          />\n                        </div>\n                        <span className={`text-sm ${passwordStrength.color}`}>\n                          {passwordStrength.text}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n\n                  {formErrors.password && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.password}</p>\n                  )}\n                </div>\n\n                {/* Confirm Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"confirmPassword\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Confirm password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.confirmPassword ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Confirm your password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"w-5 h-5\" />\n                      ) : (\n                        <Eye className=\"w-5 h-5\" />\n                      )}\n                    </button>\n                  </div>\n                  {formErrors.confirmPassword && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.confirmPassword}</p>\n                  )}\n                </div>\n\n                {/* Terms Acceptance */}\n                <div>\n                  <label className=\"flex items-start gap-3\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"acceptTerms\"\n                      checked={formData.acceptTerms}\n                      onChange={handleChange}\n                      className=\"w-4 h-4 mt-1 text-blue-600 bg-white/10 border-white/20 rounded focus:ring-blue-500 focus:ring-2\"\n                    />\n                    <span className=\"text-sm text-slate-300 leading-relaxed\">\n                      I agree to the{' '}\n                      <Link\n                        to=\"/terms\"\n                        className=\"text-blue-400 hover:text-blue-300 transition-colors underline\"\n                      >\n                        Terms of Service\n                      </Link>{' '}\n                      and{' '}\n                      <Link\n                        to=\"/privacy\"\n                        className=\"text-blue-400 hover:text-blue-300 transition-colors underline\"\n                      >\n                        Privacy Policy\n                      </Link>\n                    </span>\n                  </label>\n                  {formErrors.acceptTerms && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.acceptTerms}</p>\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"group relative w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                      Creating account...\n                    </div>\n                  ) : (\n                    <>\n                      <span>Create account</span>\n                      <ArrowRight className=\"w-5 h-5 transition-transform group-hover:translate-x-1\" />\n                    </>\n                  )}\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-blue-700 to-purple-700 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity -z-10\" />\n                </button>\n              </form>\n\n              {/* Login Link */}\n              <div className=\"mt-8\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-white/20\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-4 bg-transparent text-slate-400\">\n                      Already have an account?\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-6\">\n                  <Link\n                    to=\"/login\"\n                    className=\"w-full flex justify-center py-3 px-4 bg-white/10 backdrop-blur-sm text-white font-medium rounded-lg border border-white/20 transition-all duration-300 hover:bg-white/20 hover:scale-105 flex items-center gap-2\"\n                  >\n                    Sign in to your account\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Link>\n                </div>\n              </div>\n\n              {/* Back to home link */}\n              <div className=\"mt-6 text-center\">\n                <Link\n                  to=\"/\"\n                  className=\"text-sm text-slate-400 hover:text-slate-200 transition-colors inline-flex items-center gap-1\"\n                >\n                  ← Back to home\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Register;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx",
        "start": 18,
        "end": 521,
        "startLoc": {
          "line": 18,
          "column": 31,
          "position": 131
        },
        "endLoc": {
          "line": 521,
          "column": 2,
          "position": 3998
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/register/Register.tsx",
        "start": 22,
        "end": 525,
        "startLoc": {
          "line": 22,
          "column": 19,
          "position": 183
        },
        "endLoc": {
          "line": 525,
          "column": 2,
          "position": 4050
        }
      }
    },
    {
      "format": "tsx",
      "lines": 465,
      "fragment": "/**\n * Privacy Policy Page\n *\n * Privacy policy and data protection information for Reporunner\n */\n\nimport {\n  AlertCircle,\n  ArrowRight,\n  Calendar,\n  CheckCircle,\n  Eye,\n  FileText,\n  Lock,\n  Mail,\n  Settings,\n  Shield,\n  Users,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Privacy: React.FC = () => {\n  const [lastUpdated] = useState('January 20, 2025');\n\n  const privacyPrinciples = [\n    {\n      icon: Shield,\n      title: 'Data Sovereignty',\n      description:\n        'Your data stays on your infrastructure. We never store or access your workflow data.',\n    },\n    {\n      icon: Lock,\n      title: 'End-to-End Encryption',\n      description:\n        'All data is encrypted in transit and at rest using industry-standard encryption.',\n    },\n    {\n      icon: Eye,\n      title: 'Transparency',\n      description: \"We're open about what data we collect, why we collect it, and how we use it.\",\n    },\n    {\n      icon: Users,\n      title: 'User Control',\n      description: 'You control your data. Export, delete, or modify your information at any time.',\n    },\n  ];\n\n  const dataTypes = [\n    {\n      category: 'Account Information',\n      description: 'Information you provide when creating an account',\n      items: ['Name and email address', 'Company information', 'Account preferences'],\n      retention: 'Until account deletion',\n      sharing: 'Never shared with third parties',\n    },\n    {\n      category: 'Usage Analytics',\n      description: 'Anonymous data about how you use our platform',\n      items: ['Feature usage statistics', 'Performance metrics', 'Error reports'],\n      retention: '2 years maximum',\n      sharing: 'Aggregated data only',\n    },\n    {\n      category: 'Technical Information',\n      description: 'Data necessary for platform operation',\n      items: ['IP addresses (hashed)', 'Browser information', 'Session data'],\n      retention: '30 days maximum',\n      sharing: 'Never shared',\n    },\n    {\n      category: 'Workflow Metadata',\n      description: 'Non-sensitive information about your workflows',\n      items: ['Workflow names', 'Execution counts', 'Node types used'],\n      retention: 'As long as account exists',\n      sharing: 'Never shared',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Privacy\n              </span>{' '}\n              Policy\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Your privacy is fundamental to everything we do. Learn how we protect your data and\n              respect your privacy rights.\n            </p>\n\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 mb-8\">\n              <div className=\"flex items-center justify-center gap-2 text-white\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Last Updated: {lastUpdated}</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">0</div>\n                <div className=\"text-sm text-slate-300\">Data Breaches</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">GDPR</div>\n                <div className=\"text-sm text-slate-300\">Compliant</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">SOC2</div>\n                <div className=\"text-sm text-slate-300\">Type II</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">100%</div>\n                <div className=\"text-sm text-slate-300\">Transparent</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Privacy Principles */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Privacy Principles</h2>\n            <p className=\"text-xl text-gray-600\">\n              These principles guide every decision we make about data and privacy\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {privacyPrinciples.map((principle, index) => {\n              const Icon = principle.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"bg-blue-100 p-3 rounded-lg w-fit mb-4\">\n                    <Icon className=\"w-8 h-8 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{principle.title}</h3>\n                  <p className=\"text-gray-600\">{principle.description}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* What Data We Collect */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">What Data We Collect</h2>\n              <p className=\"text-xl text-gray-600\">\n                Complete transparency about the information we collect and how we use it\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {dataTypes.map((dataType, index) => (\n                <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{dataType.category}</h3>\n                  <p className=\"text-gray-600 mb-4\">{dataType.description}</p>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">What we collect:</h4>\n                      <ul className=\"space-y-1\">\n                        {dataType.items.map((item, itemIndex) => (\n                          <li key={itemIndex} className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            <span className=\"text-gray-700 text-sm\">{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">Retention:</h4>\n                        <p className=\"text-gray-600 text-sm\">{dataType.retention}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">Sharing:</h4>\n                        <p className=\"text-gray-600 text-sm\">{dataType.sharing}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-12 bg-blue-50 border border-blue-200 rounded-xl p-8\">\n              <div className=\"flex items-start gap-4\">\n                <AlertCircle className=\"w-8 h-8 text-blue-600 mt-1\" />\n                <div>\n                  <h3 className=\"text-xl font-bold text-blue-900 mb-3\">What We DON'T Collect</h3>\n                  <div className=\"text-blue-800 space-y-2\">\n                    <p>\n                      • <strong>Workflow data:</strong> Your actual workflow content and execution\n                      data never leaves your infrastructure\n                    </p>\n                    <p>\n                      • <strong>Credentials:</strong> API keys, passwords, and authentication tokens\n                      are encrypted and never accessible to us\n                    </p>\n                    <p>\n                      • <strong>Business data:</strong> Customer data, financial information, or any\n                      sensitive business information\n                    </p>\n                    <p>\n                      • <strong>Personal files:</strong> Documents, images, or files processed\n                      through your workflows\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Your Rights */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Your Rights</h2>\n              <p className=\"text-xl text-gray-600\">\n                You have complete control over your data and privacy\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {[\n                {\n                  title: 'Access Your Data',\n                  description: 'Request a complete copy of all personal data we have about you.',\n                  action: 'Request Data Export',\n                },\n                {\n                  title: 'Correct Information',\n                  description: 'Update or correct any inaccurate personal information.',\n                  action: 'Update Profile',\n                },\n                {\n                  title: 'Delete Your Data',\n                  description: 'Request complete deletion of your account and all associated data.',\n                  action: 'Delete Account',\n                },\n                {\n                  title: 'Opt-Out of Communications',\n                  description:\n                    'Unsubscribe from marketing emails while keeping essential notifications.',\n                  action: 'Manage Preferences',\n                },\n                {\n                  title: 'Data Portability',\n                  description: 'Export your data in a machine-readable format to take elsewhere.',\n                  action: 'Export Data',\n                },\n                {\n                  title: 'Restrict Processing',\n                  description: 'Limit how we process your personal data for specific purposes.',\n                  action: 'Set Restrictions',\n                },\n              ].map((right, index) => (\n                <div\n                  key={index}\n                  className=\"bg-gray-50 border border-gray-200 rounded-xl p-6 hover:border-blue-300 transition-colors\"\n                >\n                  <h3 className=\"text-lg font-bold text-gray-900 mb-3\">{right.title}</h3>\n                  <p className=\"text-gray-600 mb-4\">{right.description}</p>\n                  <button className=\"text-blue-600 font-medium hover:text-blue-700 transition-colors flex items-center gap-2\">\n                    {right.action}\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Security Measures */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Security Measures</h2>\n              <p className=\"text-xl text-gray-600\">\n                How we protect your data with industry-leading security\n              </p>\n            </div>\n\n            <div className=\"space-y-8\">\n              {[\n                {\n                  category: 'Encryption',\n                  measures: [\n                    'TLS 1.3 for data in transit',\n                    'AES-256 encryption for data at rest',\n                    'End-to-end encryption for sensitive data',\n                    'Customer-managed encryption keys (Enterprise)',\n                  ],\n                },\n                {\n                  category: 'Access Controls',\n                  measures: [\n                    'Role-based access control (RBAC)',\n                    'Multi-factor authentication required',\n                    'Principle of least privilege',\n                    'Regular access reviews and audits',\n                  ],\n                },\n                {\n                  category: 'Infrastructure Security',\n                  measures: [\n                    'SOC2 Type II certified infrastructure',\n                    'Regular security audits and penetration testing',\n                    '24/7 security monitoring',\n                    'Incident response procedures',\n                  ],\n                },\n                {\n                  category: 'Compliance',\n                  measures: [\n                    'GDPR compliance for EU customers',\n                    'CCPA compliance for California residents',\n                    'HIPAA compliance options (Enterprise)',\n                    'Regular compliance assessments',\n                  ],\n                },\n              ].map((section, index) => (\n                <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4\">{section.category}</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {section.measures.map((measure, measureIndex) => (\n                      <div key={measureIndex} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                        <span className=\"text-gray-700\">{measure}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Cookie Policy */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6 text-center\">Cookie Policy</h2>\n\n            <div className=\"bg-gray-50 rounded-xl p-8\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Essential Cookies</h3>\n              <p className=\"text-gray-600 mb-6\">\n                We use essential cookies that are necessary for our website to function properly.\n                These cannot be disabled as they are required for basic website functionality.\n              </p>\n\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Analytics Cookies</h3>\n              <p className=\"text-gray-600 mb-6\">\n                With your consent, we use analytics cookies to understand how you use our website.\n                This helps us improve your experience. You can opt-out at any time.\n              </p>\n\n              <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Marketing Cookies</h3>\n              <p className=\"text-gray-600 mb-6\">\n                We do not use third-party marketing or tracking cookies. Any marketing-related\n                cookies are first-party and respect your privacy preferences.\n              </p>\n\n              <button className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\">\n                Manage Cookie Preferences\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Questions About Privacy?</h2>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              We're here to help. Contact our privacy team with any questions or concerns.\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <Mail className=\"w-8 h-8 text-blue-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Email Us</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">For privacy-related questions</p>\n                <button className=\"text-blue-600 font-medium\">privacy@reporunner.dev</button>\n              </div>\n\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <FileText className=\"w-8 h-8 text-green-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Data Request</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Request your data or deletion</p>\n                <button className=\"text-green-600 font-medium\">Submit Request</button>\n              </div>\n\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <Settings className=\"w-8 h-8 text-purple-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Privacy Settings</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Manage your preferences</p>\n                <button className=\"text-purple-600 font-medium\">Open Settings</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Privacy-First Workflow Automation</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Experience powerful automation without compromising your privacy. Your data stays on\n            your infrastructure, always.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Shield className=\"w-5 h-5\" />\n              Start Secure Trial\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <FileText className=\"w-5 h-5\" />\n              Download Privacy Guide\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Privacy;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx",
        "start": 1,
        "end": 465,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 465,
          "column": 2,
          "position": 3851
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/privacy/Privacy.tsx",
        "start": 2,
        "end": 466,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 466,
          "column": 2,
          "position": 3864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 270,
      "fragment": "={`text-lg ${billingCycle === 'monthly' ? 'text-white font-semibold' : 'text-slate-300'}`}\n              >\n                Monthly\n              </span>\n              <button\n                onClick={() => setBillingCycle(billingCycle === 'monthly' ? 'yearly' : 'monthly')}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                  billingCycle === 'yearly' ? 'bg-blue-600' : 'bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                    billingCycle === 'yearly' ? 'translate-x-6' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n              <span\n                className={`text-lg ${billingCycle === 'yearly' ? 'text-white font-semibold' : 'text-slate-300'}`}\n              >\n                Yearly\n              </span>\n              {billingCycle === 'yearly' && (\n                <span className=\"ml-2 px-3 py-1 bg-green-500 text-white text-sm font-semibold rounded-full\">\n                  Save 20%\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Cards */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n            {plans.map((plan, index) => (\n              <div\n                key={index}\n                className={`relative rounded-2xl p-8 ${\n                  plan.popular\n                    ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl scale-105'\n                    : 'bg-white border border-gray-200 shadow-lg'\n                } hover:shadow-xl transition-all duration-300`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold flex items-center gap-2\">\n                      <Star className=\"w-4 h-4 fill-current\" />\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-6\">{plan.description}</p>\n\n                  <div className=\"mb-6\">\n                    {typeof plan.price[billingCycle] === 'number' ? (\n                      <>\n                        <div className=\"text-5xl font-bold text-gray-900 mb-2\">\n                          ${plan.price[billingCycle]}\n                          {plan.price[billingCycle] > 0 && (\n                            <span className=\"text-lg font-medium text-gray-600\">\n                              /{billingCycle === 'monthly' ? 'mo' : 'yr'}\n                            </span>\n                          )}\n                        </div>\n                        {billingCycle === 'yearly' &&\n                          typeof plan.price.monthly === 'number' &&\n                          plan.price.monthly > 0 && (\n                            <div className=\"text-sm text-gray-500\">\n                              ${plan.price.monthly}/mo billed monthly\n                            </div>\n                          )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900 mb-2\">\n                        {plan.price[billingCycle]}\n                      </div>\n                    )}\n                  </div>\n\n                  <button\n                    className={`w-full py-3 px-6 font-semibold rounded-lg transition-colors ${\n                      plan.ctaStyle === 'primary'\n                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'\n                        : 'bg-gray-900 text-white hover:bg-gray-800'\n                    }`}\n                  >\n                    {plan.cta}\n                  </button>\n                </div>\n\n                {/* Features */}\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">Included:</h4>\n                    <ul className=\"space-y-2\">\n                      {plan.features.core.map((feature, idx) => (\n                        <li key={idx} className=\"flex items-center gap-3\">\n                          <Check className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                          <span className=\"text-gray-700\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">Limits:</h4>\n                    <ul className=\"space-y-2\">\n                      {plan.features.limits.map((limit, idx) => (\n                        <li key={idx} className=\"flex items-center gap-3\">\n                          <div className=\"w-5 h-5 flex-shrink-0 flex items-center justify-center\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                          </div>\n                          <span className=\"text-gray-700\">{limit}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {plan.features.notIncluded.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Not included:</h4>\n                      <ul className=\"space-y-2\">\n                        {plan.features.notIncluded.map((feature, idx) => (\n                          <li key={idx} className=\"flex items-center gap-3\">\n                            <X className=\"w-5 h-5 text-gray-400 flex-shrink-0\" />\n                            <span className=\"text-gray-500\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Add-ons */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Add-ons & Services</h2>\n            <p className=\"text-xl text-gray-600\">\n              Extend your Reporunner experience with additional services\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {addOns.map((addon, index) => {\n              const Icon = addon.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"bg-blue-100 p-3 rounded-lg\">\n                      <Icon className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg text-gray-900 mb-2\">{addon.name}</h3>\n                      <p className=\"text-gray-600 mb-3\">{addon.description}</p>\n                      <div className=\"font-semibold text-blue-600\">{addon.price}</div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Comparison */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Detailed Comparison</h2>\n              <p className=\"text-xl text-gray-600\">Compare all features across our plans</p>\n            </div>\n\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full bg-white rounded-xl shadow-xl\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left p-6 font-semibold text-gray-900 min-w-[300px]\">\n                      Features\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-gray-900 min-w-[150px]\">\n                      Community\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-blue-900 min-w-[150px] bg-blue-50\">\n                      Professional\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-gray-900 min-w-[150px]\">\n                      Enterprise\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {comparisonFeatures.map((category, categoryIndex) => (\n                    <React.Fragment key={categoryIndex}>\n                      <tr className=\"bg-gray-50\">\n                        <td\n                          className=\"p-6 font-semibold text-gray-900 border-b border-gray-200\"\n                          colSpan={4}\n                        >\n                          {category.category}\n                        </td>\n                      </tr>\n                      {category.features.map((feature, featureIndex) => (\n                        <tr\n                          key={featureIndex}\n                          className=\"border-b border-gray-100 hover:bg-gray-50\"\n                        >\n                          <td className=\"p-4 text-gray-700\">{feature.name}</td>\n                          <td className=\"p-4 text-center\">\n                            {feature.community ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                          <td className=\"p-4 text-center bg-blue-50\">\n                            {feature.professional ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                          <td className=\"p-4 text-center\">\n                            {feature.enterprise ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </React.Fragment>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Frequently Asked Questions</h2>\n              <p className=\"text-xl text-gray-600\">Everything you need to know about our pricing</p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {faqs.map((faq, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\"\n                >\n                  <button\n                    onClick={() => setExpandedFaq(expandedFaq === index ? null : index)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx",
        "start": 383,
        "end": 652,
        "startLoc": {
          "line": 383,
          "column": 10,
          "position": 2173
        },
        "endLoc": {
          "line": 652,
          "column": 2,
          "position": 4387
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx",
        "start": 384,
        "end": 653,
        "startLoc": {
          "line": 384,
          "column": 10,
          "position": 2186
        },
        "endLoc": {
          "line": 653,
          "column": 2,
          "position": 4400
        }
      }
    },
    {
      "format": "tsx",
      "lines": 717,
      "fragment": "/**\n * Pricing Page\n *\n * Comprehensive pricing showcase for Reporunner\n * Different plans and enterprise options\n */\n\nimport {\n  ArrowRight,\n  Check,\n  ChevronDown,\n  ChevronUp,\n  Cloud,\n  Phone,\n  Star,\n  Users,\n  X,\n  Zap,\n} from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const PricingPage: React.FC = () => {\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const [expandedFaq, setExpandedFaq] = useState<number | null>(null);\n\n  const plans = [\n    {\n      name: 'Community',\n      description: 'Perfect for individuals and small projects',\n      price: { monthly: 0, yearly: 0 },\n      popular: false,\n      features: {\n        core: [\n          'Self-hosted deployment',\n          'Unlimited workflows',\n          'Basic integrations (50+)',\n          'Community support',\n          'Docker deployment',\n        ],\n        limits: [\n          'Up to 1,000 executions/month',\n          'Single user',\n          'Basic monitoring',\n          'Standard security',\n        ],\n        notIncluded: [\n          'AI integrations',\n          'Enterprise security',\n          'Priority support',\n          'Advanced analytics',\n        ],\n      },\n      cta: 'Get Started Free',\n      ctaStyle: 'secondary',\n    },\n    {\n      name: 'Professional',\n      description: 'For growing teams and businesses',\n      price: { monthly: 29, yearly: 24 },\n      popular: true,\n      features: {\n        core: [\n          'Everything in Community',\n          'AI integrations (OpenAI, Anthropic)',\n          'Advanced integrations (150+)',\n          'Team collaboration',\n          'Priority email support',\n          'Advanced monitoring',\n          'Custom branding',\n        ],\n        limits: [\n          'Up to 10,000 executions/month',\n          'Up to 5 team members',\n          'Advanced security features',\n          '99.9% SLA uptime',\n        ],\n        notIncluded: [\n          'Enterprise SSO',\n          'Dedicated support',\n          'Custom integrations',\n          'Air-gap deployment',\n        ],\n      },\n      cta: 'Start Free Trial',\n      ctaStyle: 'primary',\n    },\n    {\n      name: 'Enterprise',\n      description: 'For large organizations with advanced needs',\n      price: { monthly: 'Custom', yearly: 'Custom' },\n      popular: false,\n      features: {\n        core: [\n          'Everything in Professional',\n          'Enterprise SSO (SAML, OIDC)',\n          'Advanced security & compliance',\n          'Dedicated account manager',\n          'Custom integrations',\n          'Air-gap deployment',\n          '24/7 phone support',\n          'Custom SLA',\n          'Professional services',\n        ],\n        limits: [\n          'Unlimited executions',\n          'Unlimited team members',\n          'Advanced analytics',\n          'Multi-tenant architecture',\n        ],\n        notIncluded: [],\n      },\n      cta: 'Contact Sales',\n      ctaStyle: 'secondary',\n    },\n  ];\n\n  const addOns = [\n    {\n      name: 'Additional Executions',\n      description: 'Extra workflow executions beyond your plan limit',\n      price: '$0.001 per execution',\n      icon: Zap,\n    },\n    {\n      name: 'Premium Support',\n      description: '24/7 phone and chat support with 1-hour response SLA',\n      price: '$199/month',\n      icon: Phone,\n    },\n    {\n      name: 'Professional Services',\n      description: 'Custom development, migration, and training services',\n      price: '$2,500/week',\n      icon: Users,\n    },\n    {\n      name: 'Dedicated Cloud',\n      description: 'Managed cloud deployment with dedicated resources',\n      price: 'Starting at $500/month',\n      icon: Cloud,\n    },\n  ];\n\n  const comparisonFeatures = [\n    {\n      category: 'Core Features',\n      features: [\n        {\n          name: 'Self-hosted deployment',\n          community: true,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Unlimited workflows',\n          community: true,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Basic integrations (50+)',\n          community: true,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Advanced integrations (150+)',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'AI integrations',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Custom integrations',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'Team & Collaboration',\n      features: [\n        {\n          name: 'Single user',\n          community: true,\n          professional: false,\n          enterprise: false,\n        },\n        {\n          name: 'Up to 5 team members',\n          community: false,\n          professional: true,\n          enterprise: false,\n        },\n        {\n          name: 'Unlimited team members',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'Role-based access control',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Team workspaces',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Audit logging',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'Security & Compliance',\n      features: [\n        {\n          name: 'Standard security',\n          community: true,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Advanced security',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Enterprise SSO',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'Air-gap deployment',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'SOC2 compliance',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'GDPR compliance',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'Support',\n      features: [\n        {\n          name: 'Community support',\n          community: true,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Email support',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: 'Priority support',\n          community: false,\n          professional: true,\n          enterprise: true,\n        },\n        {\n          name: '24/7 phone support',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'Dedicated account manager',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n        {\n          name: 'Professional services',\n          community: false,\n          professional: false,\n          enterprise: true,\n        },\n      ],\n    },\n  ];\n\n  const faqs = [\n    {\n      question: 'What happens after the free trial?',\n      answer:\n        'Your free trial includes all Professional features for 14 days. After the trial, you can continue with the Community plan (free) or upgrade to Professional. No credit card required for the trial.',\n    },\n    {\n      question: 'Can I migrate from other platforms?',\n      answer:\n        'Yes! We provide migration tools and professional services to help you migrate from n8n, Zapier, Make, or any other workflow platform. Our team can assist with the migration process.',\n    },\n    {\n      question: \"What's included in self-hosted deployment?\",\n      answer:\n        'You get Docker Compose files, Kubernetes Helm charts, comprehensive documentation, and setup scripts. For Enterprise customers, we also provide air-gap deployment options and professional deployment services.',\n    },\n    {\n      question: 'How do execution limits work?',\n      answer:\n        'An execution is counted each time a workflow runs, regardless of how many nodes it contains. Failed executions also count toward your limit. You can purchase additional executions if needed.',\n    },\n    {\n      question: 'What AI integrations are included?',\n      answer:\n        \"Professional and Enterprise plans include integrations with OpenAI, Anthropic Claude, Google Gemini, Hugging Face, and Ollama. We're constantly adding new AI providers.\",\n    },\n    {\n      question: 'Do you offer custom integrations?',\n      answer:\n        'Yes! Enterprise customers can request custom integrations. Our development team will build and maintain custom nodes for your specific needs. Community users can build their own using our Node SDK.',\n    },\n    {\n      question: \"What's your uptime guarantee?\",\n      answer:\n        'Professional plans include 99.9% SLA. Enterprise plans can negotiate custom SLAs up to 99.99%. This applies to our managed cloud offering - self-hosted uptime depends on your infrastructure.',\n    },\n    {\n      question: 'Can I use Reporunner in air-gapped environments?',\n      answer:\n        'Yes! Enterprise customers can deploy Reporunner in completely offline environments. This includes all dependencies and updates delivered through secure offline channels.',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Simple{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Transparent\n              </span>\n              <br />\n              Pricing\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Start free, scale as you grow. No hidden fees, no vendor lock-in. Complete data\n              sovereignty with enterprise-grade features.\n            </p>\n\n            {/* Billing Toggle */}\n            <div className=\"flex items-center justify-center gap-4 mb-12\">\n              <span\n                className={`text-lg ${billingCycle === 'monthly' ? 'text-white font-semibold' : 'text-slate-300'}`}\n              >\n                Monthly\n              </span>\n              <button\n                onClick={() => setBillingCycle(billingCycle === 'monthly' ? 'yearly' : 'monthly')}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                  billingCycle === 'yearly' ? 'bg-blue-600' : 'bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                    billingCycle === 'yearly' ? 'translate-x-6' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n              <span\n                className={`text-lg ${billingCycle === 'yearly' ? 'text-white font-semibold' : 'text-slate-300'}`}\n              >\n                Yearly\n              </span>\n              {billingCycle === 'yearly' && (\n                <span className=\"ml-2 px-3 py-1 bg-green-500 text-white text-sm font-semibold rounded-full\">\n                  Save 20%\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Cards */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n            {plans.map((plan, index) => (\n              <div\n                key={index}\n                className={`relative rounded-2xl p-8 ${\n                  plan.popular\n                    ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl scale-105'\n                    : 'bg-white border border-gray-200 shadow-lg'\n                } hover:shadow-xl transition-all duration-300`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold flex items-center gap-2\">\n                      <Star className=\"w-4 h-4 fill-current\" />\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-6\">{plan.description}</p>\n\n                  <div className=\"mb-6\">\n                    {typeof plan.price[billingCycle] === 'number' ? (\n                      <>\n                        <div className=\"text-5xl font-bold text-gray-900 mb-2\">\n                          ${plan.price[billingCycle]}\n                          {plan.price[billingCycle] > 0 && (\n                            <span className=\"text-lg font-medium text-gray-600\">\n                              /{billingCycle === 'monthly' ? 'mo' : 'yr'}\n                            </span>\n                          )}\n                        </div>\n                        {billingCycle === 'yearly' &&\n                          typeof plan.price.monthly === 'number' &&\n                          plan.price.monthly > 0 && (\n                            <div className=\"text-sm text-gray-500\">\n                              ${plan.price.monthly}/mo billed monthly\n                            </div>\n                          )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900 mb-2\">\n                        {plan.price[billingCycle]}\n                      </div>\n                    )}\n                  </div>\n\n                  <button\n                    className={`w-full py-3 px-6 font-semibold rounded-lg transition-colors ${\n                      plan.ctaStyle === 'primary'\n                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'\n                        : 'bg-gray-900 text-white hover:bg-gray-800'\n                    }`}\n                  >\n                    {plan.cta}\n                  </button>\n                </div>\n\n                {/* Features */}\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">Included:</h4>\n                    <ul className=\"space-y-2\">\n                      {plan.features.core.map((feature, idx) => (\n                        <li key={idx} className=\"flex items-center gap-3\">\n                          <Check className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                          <span className=\"text-gray-700\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">Limits:</h4>\n                    <ul className=\"space-y-2\">\n                      {plan.features.limits.map((limit, idx) => (\n                        <li key={idx} className=\"flex items-center gap-3\">\n                          <div className=\"w-5 h-5 flex-shrink-0 flex items-center justify-center\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                          </div>\n                          <span className=\"text-gray-700\">{limit}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {plan.features.notIncluded.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Not included:</h4>\n                      <ul className=\"space-y-2\">\n                        {plan.features.notIncluded.map((feature, idx) => (\n                          <li key={idx} className=\"flex items-center gap-3\">\n                            <X className=\"w-5 h-5 text-gray-400 flex-shrink-0\" />\n                            <span className=\"text-gray-500\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Add-ons */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Add-ons & Services</h2>\n            <p className=\"text-xl text-gray-600\">\n              Extend your Reporunner experience with additional services\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {addOns.map((addon, index) => {\n              const Icon = addon.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"bg-blue-100 p-3 rounded-lg\">\n                      <Icon className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg text-gray-900 mb-2\">{addon.name}</h3>\n                      <p className=\"text-gray-600 mb-3\">{addon.description}</p>\n                      <div className=\"font-semibold text-blue-600\">{addon.price}</div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Comparison */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Detailed Comparison</h2>\n              <p className=\"text-xl text-gray-600\">Compare all features across our plans</p>\n            </div>\n\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full bg-white rounded-xl shadow-xl\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left p-6 font-semibold text-gray-900 min-w-[300px]\">\n                      Features\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-gray-900 min-w-[150px]\">\n                      Community\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-blue-900 min-w-[150px] bg-blue-50\">\n                      Professional\n                    </th>\n                    <th className=\"text-center p-6 font-semibold text-gray-900 min-w-[150px]\">\n                      Enterprise\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {comparisonFeatures.map((category, categoryIndex) => (\n                    <React.Fragment key={categoryIndex}>\n                      <tr className=\"bg-gray-50\">\n                        <td\n                          className=\"p-6 font-semibold text-gray-900 border-b border-gray-200\"\n                          colSpan={4}\n                        >\n                          {category.category}\n                        </td>\n                      </tr>\n                      {category.features.map((feature, featureIndex) => (\n                        <tr\n                          key={featureIndex}\n                          className=\"border-b border-gray-100 hover:bg-gray-50\"\n                        >\n                          <td className=\"p-4 text-gray-700\">{feature.name}</td>\n                          <td className=\"p-4 text-center\">\n                            {feature.community ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                          <td className=\"p-4 text-center bg-blue-50\">\n                            {feature.professional ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                          <td className=\"p-4 text-center\">\n                            {feature.enterprise ? (\n                              <Check className=\"w-5 h-5 text-green-600 mx-auto\" />\n                            ) : (\n                              <X className=\"w-5 h-5 text-gray-400 mx-auto\" />\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </React.Fragment>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Frequently Asked Questions</h2>\n              <p className=\"text-xl text-gray-600\">Everything you need to know about our pricing</p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {faqs.map((faq, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\"\n                >\n                  <button\n                    onClick={() => setExpandedFaq(expandedFaq === index ? null : index)}\n                    className=\"w-full p-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors\"\n                  >\n                    <span className=\"font-semibold text-gray-900\">{faq.question}</span>\n                    {expandedFaq === index ? (\n                      <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                    ) : (\n                      <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                    )}\n                  </button>\n                  {expandedFaq === index && (\n                    <div className=\"px-6 pb-6\">\n                      <p className=\"text-gray-600 leading-relaxed\">{faq.answer}</p>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Join thousands of developers and enterprises who trust Reporunner for their workflow\n            automation needs.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              Start Free Trial\n              <ArrowRight className=\"w-5 h-5\" />\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <Phone className=\"w-5 h-5\" />\n              Talk to Sales\n            </button>\n          </div>\n\n          <div className=\"flex items-center justify-center gap-8 text-sm opacity-80\">\n            <div className=\"flex items-center gap-2\">\n              <Check className=\"w-4 h-4\" />\n              No credit card required\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Check className=\"w-4 h-4\" />\n              14-day free trial\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Check className=\"w-4 h-4\" />\n              Cancel anytime\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default PricingPage;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx",
        "start": 1,
        "end": 717,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 717,
          "column": 2,
          "position": 4897
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/pricingpage/PricingPage.tsx",
        "start": 2,
        "end": 718,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 718,
          "column": 2,
          "position": 4910
        }
      }
    },
    {
      "format": "javascript",
      "lines": 163,
      "fragment": "={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Logo */}\n            <Link to=\"/\" className=\"inline-flex items-center gap-3 mb-8 group\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold text-white\">Reporunner</span>\n            </Link>\n\n            <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n              Welcome back to the{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                future\n              </span>{' '}\n              of automation\n            </h1>\n\n            <p className=\"text-xl text-slate-200 mb-8 leading-relaxed max-w-lg\">\n              Continue building powerful workflows with enterprise-grade security, AI intelligence,\n              and complete data sovereignty.\n            </p>\n\n            {/* Feature highlights */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-green-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span>Enterprise-grade security</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-blue-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Zap className=\"w-5 h-5 text-blue-400\" />\n                </div>\n                <span>AI-powered workflows</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-purple-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Crown className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span>Complete data sovereignty</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Login Form */}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center px-6 py-12\">\n          <div\n            className={`w-full max-w-md transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center gap-3 group\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">Reporunner</span>\n              </Link>\n            </div>\n\n            {/* Form Card */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Welcome back</h2>\n                <p className=\"text-slate-300\">Sign in to your workflow automation account</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"current-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.password ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n                  {formErrors.password && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.password}</p>\n                  )}\n                </div>\n\n                {/* Remember Me & Forgot Password */}\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"rememberMe\"\n                      checked={formData.rememberMe}\n                      onChange={handleChange}\n                      className=\"w-4 h-4 text-blue-600 bg-white/10 border-white/20 rounded focus:ring-blue-500 focus:ring-2\"\n                    />\n                    <span className=\"ml-2 text-sm text-slate-300\">Remember me</span>\n                  </label>\n                  <Link\n                    to=\"/forgot-password\"\n                    className=\"text-sm text-blue-400 hover:text-blue-300 transition-colors\"\n                  >\n                    Forgot password?\n                  </Link>\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isLoading}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx",
        "start": 103,
        "end": 265,
        "startLoc": {
          "line": 103,
          "column": 10,
          "position": 922
        },
        "endLoc": {
          "line": 265,
          "column": 2,
          "position": 2159
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 107,
        "end": 269,
        "startLoc": {
          "line": 107,
          "column": 10,
          "position": 974
        },
        "endLoc": {
          "line": 269,
          "column": 2,
          "position": 2211
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "import { ArrowRight, Crown, Eye, EyeOff, Lock, Mail, Shield, Zap } from 'lucide-react';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '@/core/stores/authStore';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nconst Login",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 6,
          "position": 119
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 9,
          "position": 136
        }
      }
    },
    {
      "format": "tsx",
      "lines": 319,
      "fragment": ";\n\nconst Login: React.FC = () => {\n  const navigate = useNavigate();\n  const { login, isLoading, error, isAuthenticated, clearError } = useAuthStore();\n\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false,\n  });\n\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [showPassword, setShowPassword] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Animation trigger\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // Clear errors when component mounts\n  useEffect(() => {\n    clearError();\n  }, [clearError]);\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.email) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = 'Email is invalid';\n    }\n\n    if (!formData.password) {\n      errors.password = 'Password is required';\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await login(formData);\n      navigate('/app/dashboard');\n    } catch (_error) {}\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    // Clear field error when user starts typing\n    if (formErrors[name]) {\n      setFormErrors((prev) => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Header */}\n      <Header />\n      {/* Background Elements - matching landing page */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n      <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n      {/* Animated Background Orbs */}\n      <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse delay-1000\" />\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-20 right-20 w-20 h-20 bg-blue-500/20 rounded-lg backdrop-blur-sm animate-float hidden lg:block\" />\n      <div className=\"absolute bottom-20 left-20 w-16 h-16 bg-purple-500/20 rounded-full backdrop-blur-sm animate-float delay-1000 hidden lg:block\" />\n\n      <div className=\"relative z-10 min-h-screen flex\">\n        {/* Left Side - Branding */}\n        <div className=\"hidden lg:flex lg:w-1/2 flex-col justify-center px-12\">\n          <div\n            className={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Logo */}\n            <Link to=\"/\" className=\"inline-flex items-center gap-3 mb-8 group\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                <Crown className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold text-white\">Reporunner</span>\n            </Link>\n\n            <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n              Welcome back to the{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                future\n              </span>{' '}\n              of automation\n            </h1>\n\n            <p className=\"text-xl text-slate-200 mb-8 leading-relaxed max-w-lg\">\n              Continue building powerful workflows with enterprise-grade security, AI intelligence,\n              and complete data sovereignty.\n            </p>\n\n            {/* Feature highlights */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-green-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span>Enterprise-grade security</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-blue-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Zap className=\"w-5 h-5 text-blue-400\" />\n                </div>\n                <span>AI-powered workflows</span>\n              </div>\n              <div className=\"flex items-center gap-3 text-slate-200\">\n                <div className=\"w-10 h-10 rounded-lg bg-purple-500/20 backdrop-blur-sm flex items-center justify-center\">\n                  <Crown className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span>Complete data sovereignty</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Login Form */}\n        <div className=\"w-full lg:w-1/2 flex items-center justify-center px-6 py-12\">\n          <div\n            className={`w-full max-w-md transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}\n          >\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden text-center mb-8\">\n              <Link to=\"/\" className=\"inline-flex items-center gap-3 group\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">Reporunner</span>\n              </Link>\n            </div>\n\n            {/* Form Card */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Welcome back</h2>\n                <p className=\"text-slate-300\">Sign in to your workflow automation account</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Global Error */}\n                {error && (\n                  <div className=\"rounded-lg bg-red-500/20 border border-red-500/30 p-4\">\n                    <div className=\"text-sm text-red-200\">{error}</div>\n                  </div>\n                )}\n\n                {/* Email Field */}\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-200 mb-2\">\n                    Email address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-4 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.email ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  {formErrors.email && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.email}</p>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div>\n                  <label\n                    htmlFor=\"password\"\n                    className=\"block text-sm font-medium text-slate-200 mb-2\"\n                  >\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      autoComplete=\"current-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className={`w-full pl-10 pr-12 py-3 bg-white/10 border backdrop-blur-sm rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n                        formErrors.password ? 'border-red-500/50' : 'border-white/20'\n                      }`}\n                      placeholder=\"Enter your password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-200 transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n                  {formErrors.password && (\n                    <p className=\"mt-2 text-sm text-red-300\">{formErrors.password}</p>\n                  )}\n                </div>\n\n                {/* Remember Me & Forgot Password */}\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"rememberMe\"\n                      checked={formData.rememberMe}\n                      onChange={handleChange}\n                      className=\"w-4 h-4 text-blue-600 bg-white/10 border-white/20 rounded focus:ring-blue-500 focus:ring-2\"\n                    />\n                    <span className=\"ml-2 text-sm text-slate-300\">Remember me</span>\n                  </label>\n                  <Link\n                    to=\"/forgot-password\"\n                    className=\"text-sm text-blue-400 hover:text-blue-300 transition-colors\"\n                  >\n                    Forgot password?\n                  </Link>\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"group relative w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                      Signing in...\n                    </div>\n                  ) : (\n                    <>\n                      <span>Sign in</span>\n                      <ArrowRight className=\"w-5 h-5 transition-transform group-hover:translate-x-1\" />\n                    </>\n                  )}\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-blue-700 to-purple-700 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity -z-10\" />\n                </button>\n              </form>\n\n              {/* Register Link */}\n              <div className=\"mt-8\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-white/20\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-4 bg-transparent text-slate-400\">New to Reporunner?</span>\n                  </div>\n                </div>\n\n                <div className=\"mt-6\">\n                  <Link\n                    to=\"/register\"\n                    className=\"w-full flex justify-center py-3 px-4 bg-white/10 backdrop-blur-sm text-white font-medium rounded-lg border border-white/20 transition-all duration-300 hover:bg-white/20 hover:scale-105 flex items-center gap-2\"\n                  >\n                    Create an account\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Link>\n                </div>\n              </div>\n\n              {/* Back to home link */}\n              <div className=\"mt-6 text-center\">\n                <Link\n                  to=\"/\"\n                  className=\"text-sm text-slate-400 hover:text-slate-200 transition-colors inline-flex items-center gap-1\"\n                >\n                  ← Back to home\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Login;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx",
        "start": 7,
        "end": 325,
        "startLoc": {
          "line": 7,
          "column": 31,
          "position": 114
        },
        "endLoc": {
          "line": 325,
          "column": 2,
          "position": 2543
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/login/Login.tsx",
        "start": 11,
        "end": 329,
        "startLoc": {
          "line": 11,
          "column": 19,
          "position": 166
        },
        "endLoc": {
          "line": 329,
          "column": 2,
          "position": 2595
        }
      }
    },
    {
      "format": "javascript",
      "lines": 179,
      "fragment": "={integration.id}\n                className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"text-3xl\">{integration.logo}</div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"text-sm font-medium text-gray-600\">{integration.rating}</span>\n                  </div>\n                </div>\n\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                  {integration.name}\n                </h3>\n\n                <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{integration.description}</p>\n\n                <div className=\"flex items-center justify-between\">\n                  <span\n                    className={`px-2 py-1 text-xs font-medium rounded-full ${\n                      integration.status === 'stable'\n                        ? 'bg-green-100 text-green-700'\n                        : 'bg-orange-100 text-orange-700'\n                    }`}\n                  >\n                    {integration.status}\n                  </span>\n\n                  <button className=\"text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                    Learn more\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* All Integrations */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:w-1/4\">\n              <div className=\"bg-white rounded-xl shadow-lg p-6 sticky top-6\">\n                {/* Search */}\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Search Integrations\n                  </label>\n                  <div className=\"relative\">\n                    <Search className=\"w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      placeholder=\"Search integrations...\"\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                {/* Categories */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Categories</h3>\n                  <div className=\"space-y-2\">\n                    {categories.map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setSelectedCategory(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            selectedCategory === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span\n                            className={`text-xs px-2 py-1 rounded-full ${\n                              selectedCategory === category.id\n                                ? 'bg-blue-100 text-blue-600'\n                                : 'bg-gray-100 text-gray-500'\n                            }`}\n                          >\n                            {category.count}\n                          </span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Integration Grid */}\n            <div className=\"lg:w-3/4\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900\">\n                    {selectedCategory === 'all'\n                      ? 'All Integrations'\n                      : categories.find((c) => c.id === selectedCategory)?.name}\n                  </h2>\n                  <p className=\"text-gray-600\">\n                    {filteredIntegrations.length} integration\n                    {filteredIntegrations.length !== 1 ? 's' : ''} found\n                  </p>\n                </div>\n\n                <button\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <Filter className=\"w-4 h-4\" />\n                  Filters\n                  <ChevronDown\n                    className={`w-4 h-4 transition-transform ${showFilters ? 'rotate-180' : ''}`}\n                  />\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredIntegrations.map((integration) => (\n                  <div\n                    key={integration.id}\n                    className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-3xl\">{integration.logo}</div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg text-gray-900 group-hover:text-blue-900 transition-colors\">\n                            {integration.name}\n                          </h3>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <div className=\"flex items-center gap-1\">\n                              <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                              <span className=\"text-sm text-gray-600\">{integration.rating}</span>\n                            </div>\n                            <span className=\"text-gray-400\">•</span>\n                            <span className=\"text-sm text-gray-600\">\n                              {integration.reviews} reviews\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        {integration.premium && (\n                          <span className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-full\">\n                            Premium\n                          </span>\n                        )}\n                        <span\n                          className={`px-2 py-1 text-xs font-medium rounded-full ${\n                            integration.status === 'stable'\n                              ? 'bg-green-100 text-green-700'\n                              : 'bg-orange-100 text-orange-700'\n                          }`}\n                        >\n                          {integration.status}\n                        </span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-gray-600 mb-4 line-clamp-2\">{integration.description}</p>\n\n                    {/* Node Types */}\n                    <div className=\"mb-4\">\n                      <div className=\"text-sm font-medium text-gray-700 mb-2\">Available Nodes:</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {integration.nodes.slice(0, 3).map((node, index) => (\n                          <span\n                            key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx",
        "start": 333,
        "end": 511,
        "startLoc": {
          "line": 333,
          "column": 4,
          "position": 2706
        },
        "endLoc": {
          "line": 511,
          "column": 2,
          "position": 4020
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx",
        "start": 335,
        "end": 513,
        "startLoc": {
          "line": 335,
          "column": 4,
          "position": 2732
        },
        "endLoc": {
          "line": 513,
          "column": 2,
          "position": 4046
        }
      }
    },
    {
      "format": "tsx",
      "lines": 586,
      "fragment": "/**\n * Integrations Page\n *\n * Comprehensive integrations showcase for Reporunner\n * Displaying available integrations, categories, and integration capabilities\n */\n\nimport {\n  ArrowRight,\n  BarChart3,\n  Brain,\n  ChevronDown,\n  Code,\n  CreditCard,\n  Database,\n  ExternalLink,\n  Filter,\n  Globe,\n  MessageSquare,\n  Play,\n  Search,\n  Settings,\n  ShoppingCart,\n  Star,\n  Users,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const IntegrationsPage: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [showFilters, setShowFilters] = useState(false);\n\n  const categories = [\n    { id: 'all', name: 'All Integrations', icon: Globe, count: 150 },\n    { id: 'ai-ml', name: 'AI & ML', icon: Brain, count: 25 },\n    {\n      id: 'communication',\n      name: 'Communication',\n      icon: MessageSquare,\n      count: 18,\n    },\n    { id: 'data-storage', name: 'Data & Storage', icon: Database, count: 22 },\n    { id: 'productivity', name: 'Productivity', icon: Settings, count: 20 },\n    { id: 'e-commerce', name: 'E-commerce', icon: ShoppingCart, count: 15 },\n    { id: 'developer', name: 'Developer Tools', icon: Code, count: 16 },\n    { id: 'analytics', name: 'Analytics', icon: BarChart3, count: 12 },\n    { id: 'crm', name: 'CRM & Sales', icon: Users, count: 14 },\n    { id: 'finance', name: 'Finance', icon: CreditCard, count: 8 },\n  ];\n\n  const integrations = [\n    // AI & ML\n    {\n      id: 'openai',\n      name: 'OpenAI',\n      description: 'GPT-4, DALL-E, and Whisper API integration for advanced AI capabilities',\n      category: 'ai-ml',\n      logo: '🤖',\n      rating: 4.9,\n      reviews: 1247,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Chat Completion', 'Image Generation', 'Audio Transcription', 'Embeddings'],\n    },\n    {\n      id: 'anthropic',\n      name: 'Anthropic',\n      description: 'Claude AI integration for conversational AI and content generation',\n      category: 'ai-ml',\n      logo: '🧠',\n      rating: 4.8,\n      reviews: 892,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Chat', 'Content Generation', 'Code Analysis'],\n    },\n    {\n      id: 'hugging-face',\n      name: 'Hugging Face',\n      description: 'Access to thousands of ML models for NLP, computer vision, and audio',\n      category: 'ai-ml',\n      logo: '🤗',\n      rating: 4.7,\n      reviews: 634,\n      premium: false,\n      featured: false,\n      status: 'beta',\n      nodes: ['Model Inference', 'Dataset Access', 'Pipeline Processing'],\n    },\n    {\n      id: 'ollama',\n      name: 'Ollama',\n      description: 'Run large language models locally with complete privacy',\n      category: 'ai-ml',\n      logo: '🦙',\n      rating: 4.6,\n      reviews: 423,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Local LLM', 'Chat Completion', 'Text Generation'],\n    },\n\n    // Communication\n    {\n      id: 'gmail',\n      name: 'Gmail',\n      description: 'Send, receive, and manage emails with advanced filtering and automation',\n      category: 'communication',\n      logo: '📧',\n      rating: 4.9,\n      reviews: 2156,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Send Email', 'Read Email', 'Search', 'Labels', 'Attachments'],\n    },\n    {\n      id: 'slack',\n      name: 'Slack',\n      description: 'Send messages, create channels, and automate team communication',\n      category: 'communication',\n      logo: '💬',\n      rating: 4.8,\n      reviews: 1834,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Send Message', 'Create Channel', 'File Upload', 'User Management'],\n    },\n    {\n      id: 'microsoft-teams',\n      name: 'Microsoft Teams',\n      description: 'Integrate with Teams for messaging, meetings, and collaboration',\n      category: 'communication',\n      logo: '👥',\n      rating: 4.6,\n      reviews: 1243,\n      premium: false,\n      featured: false,\n      status: 'stable',\n      nodes: ['Send Message', 'Schedule Meeting', 'File Sharing'],\n    },\n\n    // Data & Storage\n    {\n      id: 'mongodb',\n      name: 'MongoDB',\n      description: 'NoSQL database operations with advanced querying and aggregation',\n      category: 'data-storage',\n      logo: '🍃',\n      rating: 4.8,\n      reviews: 1567,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Find', 'Insert', 'Update', 'Delete', 'Aggregate', 'Index'],\n    },\n    {\n      id: 'postgresql',\n      name: 'PostgreSQL',\n      description: 'Advanced SQL operations with vector search capabilities',\n      category: 'data-storage',\n      logo: '🐘',\n      rating: 4.9,\n      reviews: 1892,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Query', 'Insert', 'Update', 'Vector Search', 'Stored Procedures'],\n    },\n    {\n      id: 'redis',\n      name: 'Redis',\n      description: 'In-memory data structure store for caching and real-time operations',\n      category: 'data-storage',\n      logo: '🔴',\n      rating: 4.7,\n      reviews: 987,\n      premium: false,\n      featured: false,\n      status: 'stable',\n      nodes: ['Get', 'Set', 'List Operations', 'Pub/Sub', 'Stream'],\n    },\n\n    // Developer Tools\n    {\n      id: 'github',\n      name: 'GitHub',\n      description: 'Repository management, issue tracking, and CI/CD automation',\n      category: 'developer',\n      logo: '🐙',\n      rating: 4.9,\n      reviews: 2341,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Repository', 'Issues', 'Pull Requests', 'Actions', 'Webhooks'],\n    },\n    {\n      id: 'docker',\n      name: 'Docker',\n      description: 'Container management and deployment automation',\n      category: 'developer',\n      logo: '🐳',\n      rating: 4.7,\n      reviews: 1456,\n      premium: false,\n      featured: false,\n      status: 'stable',\n      nodes: ['Run Container', 'Build Image', 'Registry', 'Compose'],\n    },\n\n    // Productivity\n    {\n      id: 'notion',\n      name: 'Notion',\n      description: 'Database operations, page creation, and content management',\n      category: 'productivity',\n      logo: '📝',\n      rating: 4.8,\n      reviews: 1789,\n      premium: false,\n      featured: true,\n      status: 'stable',\n      nodes: ['Create Page', 'Database Query', 'Update Properties', 'Search'],\n    },\n    {\n      id: 'airtable',\n      name: 'Airtable',\n      description: 'Flexible database with spreadsheet interface and automation',\n      category: 'productivity',\n      logo: '📊',\n      rating: 4.6,\n      reviews: 1234,\n      premium: false,\n      featured: false,\n      status: 'stable',\n      nodes: ['Create Record', 'Update Record', 'List Records', 'Attachments'],\n    },\n  ];\n\n  const filteredIntegrations = useMemo(() => {\n    return integrations.filter((integration) => {\n      const matchesSearch =\n        integration.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        integration.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory =\n        selectedCategory === 'all' || integration.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    });\n  }, [searchTerm, selectedCategory]);\n\n  const featuredIntegrations = integrations.filter((i) => i.featured);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                150+\n              </span>{' '}\n              Integrations\n              <br />\n              And Growing\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Connect with your favorite tools and services. From AI platforms to databases, from\n              communication tools to analytics - everything you need in one platform.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Play className=\"w-5 h-5\" />\n                Request Integration\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                View API Docs\n                <ExternalLink className=\"w-5 h-5\" />\n              </button>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">150+</div>\n                <div className=\"text-sm text-slate-300\">Integrations</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">500+</div>\n                <div className=\"text-sm text-slate-300\">Node Types</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">25+</div>\n                <div className=\"text-sm text-slate-300\">AI Models</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">99.9%</div>\n                <div className=\"text-sm text-slate-300\">Uptime</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Integrations */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Featured Integrations</h2>\n            <p className=\"text-xl text-gray-600\">\n              Popular integrations used by thousands of workflows\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n            {featuredIntegrations.slice(0, 8).map((integration) => (\n              <div\n                key={integration.id}\n                className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"text-3xl\">{integration.logo}</div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"text-sm font-medium text-gray-600\">{integration.rating}</span>\n                  </div>\n                </div>\n\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                  {integration.name}\n                </h3>\n\n                <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{integration.description}</p>\n\n                <div className=\"flex items-center justify-between\">\n                  <span\n                    className={`px-2 py-1 text-xs font-medium rounded-full ${\n                      integration.status === 'stable'\n                        ? 'bg-green-100 text-green-700'\n                        : 'bg-orange-100 text-orange-700'\n                    }`}\n                  >\n                    {integration.status}\n                  </span>\n\n                  <button className=\"text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                    Learn more\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* All Integrations */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:w-1/4\">\n              <div className=\"bg-white rounded-xl shadow-lg p-6 sticky top-6\">\n                {/* Search */}\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Search Integrations\n                  </label>\n                  <div className=\"relative\">\n                    <Search className=\"w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      placeholder=\"Search integrations...\"\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                {/* Categories */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Categories</h3>\n                  <div className=\"space-y-2\">\n                    {categories.map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setSelectedCategory(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            selectedCategory === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span\n                            className={`text-xs px-2 py-1 rounded-full ${\n                              selectedCategory === category.id\n                                ? 'bg-blue-100 text-blue-600'\n                                : 'bg-gray-100 text-gray-500'\n                            }`}\n                          >\n                            {category.count}\n                          </span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Integration Grid */}\n            <div className=\"lg:w-3/4\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900\">\n                    {selectedCategory === 'all'\n                      ? 'All Integrations'\n                      : categories.find((c) => c.id === selectedCategory)?.name}\n                  </h2>\n                  <p className=\"text-gray-600\">\n                    {filteredIntegrations.length} integration\n                    {filteredIntegrations.length !== 1 ? 's' : ''} found\n                  </p>\n                </div>\n\n                <button\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <Filter className=\"w-4 h-4\" />\n                  Filters\n                  <ChevronDown\n                    className={`w-4 h-4 transition-transform ${showFilters ? 'rotate-180' : ''}`}\n                  />\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredIntegrations.map((integration) => (\n                  <div\n                    key={integration.id}\n                    className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-3xl\">{integration.logo}</div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg text-gray-900 group-hover:text-blue-900 transition-colors\">\n                            {integration.name}\n                          </h3>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <div className=\"flex items-center gap-1\">\n                              <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                              <span className=\"text-sm text-gray-600\">{integration.rating}</span>\n                            </div>\n                            <span className=\"text-gray-400\">•</span>\n                            <span className=\"text-sm text-gray-600\">\n                              {integration.reviews} reviews\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        {integration.premium && (\n                          <span className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-full\">\n                            Premium\n                          </span>\n                        )}\n                        <span\n                          className={`px-2 py-1 text-xs font-medium rounded-full ${\n                            integration.status === 'stable'\n                              ? 'bg-green-100 text-green-700'\n                              : 'bg-orange-100 text-orange-700'\n                          }`}\n                        >\n                          {integration.status}\n                        </span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-gray-600 mb-4 line-clamp-2\">{integration.description}</p>\n\n                    {/* Node Types */}\n                    <div className=\"mb-4\">\n                      <div className=\"text-sm font-medium text-gray-700 mb-2\">Available Nodes:</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {integration.nodes.slice(0, 3).map((node, index) => (\n                          <span\n                            key={index}\n                            className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-md\"\n                          >\n                            {node}\n                          </span>\n                        ))}\n                        {integration.nodes.length > 3 && (\n                          <span className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-md\">\n                            +{integration.nodes.length - 3} more\n                          </span>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <button className=\"text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors flex items-center gap-1\">\n                        View Documentation\n                        <ExternalLink className=\"w-3 h-3\" />\n                      </button>\n\n                      <button className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\">\n                        Add to Workflow\n                        <ArrowRight className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {filteredIntegrations.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">🔍</div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    No integrations found\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Try adjusting your search terms or category filter.\n                  </p>\n                  <button className=\"px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\">\n                    Request Integration\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Request Integration CTA */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Don't See Your Integration?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            We're constantly adding new integrations. Request yours and we'll prioritize it based on\n            community demand.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              Request Integration\n              <ArrowRight className=\"w-5 h-5\" />\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors\">\n              Build Custom Node\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default IntegrationsPage;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx",
        "start": 1,
        "end": 586,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 586,
          "column": 2,
          "position": 4554
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrationspage/IntegrationsPage.tsx",
        "start": 3,
        "end": 588,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 588,
          "column": 2,
          "position": 4580
        }
      }
    },
    {
      "format": "javascript",
      "lines": 96,
      "fragment": "={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"border border-gray-300 rounded-lg px-4 py-4 mb-4 w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            <div className=\"flex flex-wrap items-center space-x-2 space-y-2 justify-between\">\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => {\n                    setSelectedCategory(category || '');\n                    setSearchTerm(''); // Clear search when switching categories\n                  }}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    selectedCategory === category\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Integrations Grid */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Loading integrations...</p>\n            </div>\n          ) : (\n            <div\n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n              key={`${selectedCategory}-${searchTerm}`}\n            >\n              {filteredIntegrations.map((integration) => (\n                <div\n                  key={`${selectedCategory}-${integration.id}`}\n                  className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"text-3xl mr-3\">{integration.icon}</div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">{integration.name}</h3>\n                        <p className=\"text-sm text-gray-500\">{integration.category}</p>\n                      </div>\n                    </div>\n                    {integration.isConnected && (\n                      <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                        Connected\n                      </span>\n                    )}\n                  </div>\n\n                  <p className=\"text-gray-600 text-sm mb-4\">{integration.description}</p>\n\n                  <div className=\"mb-4\">\n                    <p className=\"text-xs text-gray-500 mb-2\">\n                      {integration.nodeTypes.length} node type\n                      {integration.nodeTypes.length !== 1 ? 's' : ''} available\n                    </p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {integration.nodeTypes.slice(0, 3).map((nodeType: any) => (\n                        <span\n                          key={nodeType.id}\n                          className=\"bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded\"\n                        >\n                          {nodeType.name}\n                        </span>\n                      ))}\n                      {integration.nodeTypes.length > 3 && (\n                        <span className=\"text-xs text-gray-500\">\n                          +{integration.nodeTypes.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    {integration.isConnected ? (\n                      <button\n                        onClick={() => handleDisconnect(integration.id)}\n                        className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors text-sm\"\n                      >\n                        Disconnect\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => handleConnect(integration)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx",
        "start": 118,
        "end": 213,
        "startLoc": {
          "line": 118,
          "column": 6,
          "position": 1118
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1868
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrations/Integrations.tsx",
        "start": 121,
        "end": 216,
        "startLoc": {
          "line": 121,
          "column": 6,
          "position": 1157
        },
        "endLoc": {
          "line": 216,
          "column": 2,
          "position": 1907
        }
      }
    },
    {
      "format": "tsx",
      "lines": 234,
      "fragment": ";\n\nconst Integrations: React.FC = () => {\n  // Generate integrations from node registry (Pure Registry System)\n  const integrations = useMemo(() => {\n    const nodeTypes = nodeRegistry.getAllNodeTypeDescriptions();\n    return nodeTypes.map((nodeType) => ({\n      id: nodeType.name,\n      name: nodeType.displayName,\n      description: nodeType.description,\n      category: nodeType.categories?.[0] || 'Other',\n      icon: nodeType.icon || '⚡',\n      version: 1.0,\n      status: 'available',\n      isConnected: false, // Mock data - in real app would come from backend\n      nodeTypes: [\n        {\n          id: nodeType.name,\n          name: nodeType.displayName,\n          description: nodeType.description,\n          type: 'action',\n        },\n      ],\n    }));\n  }, []);\n\n  const connectedIntegrations = integrations.filter((i) => i.isConnected);\n  const isLoading = false; // No loading needed for registry data\n\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredIntegrationsState, setFilteredIntegrationsState] = useState<any[]>([]);\n\n  const categories = React.useMemo(\n    () => ['All', ...Array.from(new Set(integrations.map((i) => i.category))).sort()],\n    [integrations]\n  );\n\n  // Update filtered integrations when dependencies change\n  useEffect(() => {\n    const filtered = integrations.filter((integration) => {\n      const matchesCategory =\n        selectedCategory === 'All' || integration.category === selectedCategory;\n      const matchesSearch =\n        integration.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (integration.description || '').toLowerCase().includes(searchTerm.toLowerCase());\n\n      return matchesCategory && matchesSearch;\n    });\n\n    setFilteredIntegrationsState(filtered);\n  }, [integrations, selectedCategory, searchTerm]);\n\n  const filteredIntegrations = filteredIntegrationsState;\n\n  const handleConnect = async (_integration: any) => {\n    // Mock connection config - Pure Registry System handles this automatically\n    const _config = {\n      apiKey: 'mock-api-key',\n      connectedAt: new Date().toISOString(),\n    };\n  };\n\n  const handleDisconnect = async (_integrationId: string) => {\n    if (confirm('Are you sure you want to disconnect this integration?')) {\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Integrations</h1>\n        <p className=\"text-gray-600\">Connect your favorite apps and services</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">🔗</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Available</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{integrations.length}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">✅</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Connected</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{connectedIntegrations.length}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">📈</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Workflows</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">8</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow mb-6\">\n        <div className=\"p-6\">\n          <div className=\" md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n            <div className=\"flex items-center space-x-4 w-full \">\n              <input\n                type=\"text\"\n                placeholder=\"Search integrations...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"border border-gray-300 rounded-lg px-4 py-4 mb-4 w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            <div className=\"flex flex-wrap items-center space-x-2 space-y-2 justify-between\">\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => {\n                    setSelectedCategory(category || '');\n                    setSearchTerm(''); // Clear search when switching categories\n                  }}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    selectedCategory === category\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Integrations Grid */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Loading integrations...</p>\n            </div>\n          ) : (\n            <div\n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n              key={`${selectedCategory}-${searchTerm}`}\n            >\n              {filteredIntegrations.map((integration) => (\n                <div\n                  key={`${selectedCategory}-${integration.id}`}\n                  className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"text-3xl mr-3\">{integration.icon}</div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">{integration.name}</h3>\n                        <p className=\"text-sm text-gray-500\">{integration.category}</p>\n                      </div>\n                    </div>\n                    {integration.isConnected && (\n                      <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                        Connected\n                      </span>\n                    )}\n                  </div>\n\n                  <p className=\"text-gray-600 text-sm mb-4\">{integration.description}</p>\n\n                  <div className=\"mb-4\">\n                    <p className=\"text-xs text-gray-500 mb-2\">\n                      {integration.nodeTypes.length} node type\n                      {integration.nodeTypes.length !== 1 ? 's' : ''} available\n                    </p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {integration.nodeTypes.slice(0, 3).map((nodeType: any) => (\n                        <span\n                          key={nodeType.id}\n                          className=\"bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded\"\n                        >\n                          {nodeType.name}\n                        </span>\n                      ))}\n                      {integration.nodeTypes.length > 3 && (\n                        <span className=\"text-xs text-gray-500\">\n                          +{integration.nodeTypes.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    {integration.isConnected ? (\n                      <button\n                        onClick={() => handleDisconnect(integration.id)}\n                        className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors text-sm\"\n                      >\n                        Disconnect\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => handleConnect(integration)}\n                        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n                      >\n                        Connect\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {!isLoading && filteredIntegrations.length === 0 && (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-600\">No integrations found matching your criteria</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Integrations;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx",
        "start": 3,
        "end": 236,
        "startLoc": {
          "line": 3,
          "column": 9,
          "position": 35
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 2007
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/integrations/Integrations.tsx",
        "start": 6,
        "end": 239,
        "startLoc": {
          "line": 6,
          "column": 19,
          "position": 74
        },
        "endLoc": {
          "line": 239,
          "column": 2,
          "position": 2046
        }
      }
    },
    {
      "format": "javascript",
      "lines": 153,
      "fragment": "={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`group p-6 rounded-xl transition-all duration-300 ${\n                    activeCategory === category.id\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white scale-105 shadow-xl'\n                      : 'bg-white border border-gray-200 text-gray-700 hover:border-blue-300 hover:shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <Icon\n                      className={`w-8 h-8 mx-auto mb-3 ${\n                        activeCategory === category.id\n                          ? 'text-white'\n                          : 'text-blue-600 group-hover:text-blue-700'\n                      }`}\n                    />\n                    <h3 className=\"font-semibold text-lg mb-2\">{category.name}</h3>\n                    <p\n                      className={`text-sm ${\n                        activeCategory === category.id ? 'text-blue-100' : 'text-gray-500'\n                      }`}\n                    >\n                      {category.description}\n                    </p>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Feature Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features[activeCategory as keyof typeof features]?.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <Icon className=\"w-8 h-8 text-blue-600 group-hover:text-blue-700 transition-colors\" />\n                    <div className=\"flex gap-2\">\n                      {feature.demo && (\n                        <span className=\"px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full\">\n                          Demo\n                        </span>\n                      )}\n                      {feature.enterprise && (\n                        <span className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-full\">\n                          Enterprise\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <h3 className=\"font-semibold text-xl text-gray-900 mb-3 group-hover:text-blue-900 transition-colors\">\n                    {feature.name}\n                  </h3>\n\n                  <p className=\"text-gray-600 leading-relaxed mb-4\">{feature.description}</p>\n\n                  <div className=\"flex items-center text-blue-600 font-medium group-hover:text-blue-700 transition-colors\">\n                    <span className=\"text-sm\">Learn more</span>\n                    <ChevronRight className=\"w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Comparison Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Why Choose Reporunner?</h2>\n            <p className=\"text-xl text-gray-600\">\n              See how Reporunner compares to other workflow automation platforms\n            </p>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full bg-white rounded-xl shadow-xl\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left p-6 font-semibold text-gray-900\">Feature</th>\n                  <th className=\"text-center p-6 font-semibold text-blue-900\">Reporunner</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">n8n</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">Zapier</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">Make</th>\n                </tr>\n              </thead>\n              <tbody>\n                {[\n                  {\n                    feature: 'AI-Powered Automation',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Self-Hosted',\n                    reporunner: true,\n                    n8n: true,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Vector Database',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Enterprise SSO',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: true,\n                    make: true,\n                  },\n                  {\n                    feature: 'Custom Nodes SDK',\n                    reporunner: true,\n                    n8n: true,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Real-time Collaboration',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: true,\n                  },\n                  {\n                    feature: 'Multi-Database Support',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Air-Gap Deployment',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                ].map((row, index) => (\n                  <tr key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx",
        "start": 344,
        "end": 496,
        "startLoc": {
          "line": 344,
          "column": 4,
          "position": 2074
        },
        "endLoc": {
          "line": 496,
          "column": 2,
          "position": 3145
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/features/Features.tsx",
        "start": 345,
        "end": 497,
        "startLoc": {
          "line": 345,
          "column": 4,
          "position": 2087
        },
        "endLoc": {
          "line": 497,
          "column": 2,
          "position": 3158
        }
      }
    },
    {
      "format": "tsx",
      "lines": 561,
      "fragment": "/**\n * Features Page\n *\n * Comprehensive feature showcase for Reporunner\n * Highlighting AI capabilities, enterprise features, and competitive advantages\n */\n\nimport {\n  ArrowRight,\n  BarChart3,\n  Brain,\n  Check,\n  ChevronRight,\n  Cloud,\n  Code2,\n  Database,\n  GitBranch,\n  Lock,\n  Play,\n  Settings,\n  Shield,\n  Users,\n  Webhook,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Features: React.FC = () => {\n  const [activeCategory, setActiveCategory] = useState('ai-powered');\n\n  const featureCategories = [\n    {\n      id: 'ai-powered',\n      name: 'AI-Powered Automation',\n      icon: Brain,\n      description: 'Next-generation AI integration for intelligent workflows',\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise Security',\n      icon: Shield,\n      description: 'Bank-grade security with complete compliance',\n    },\n    {\n      id: 'hybrid-database',\n      name: 'Hybrid Database',\n      icon: Database,\n      description: 'MongoDB + PostgreSQL with vector capabilities',\n    },\n    {\n      id: 'self-hosted',\n      name: 'Self-Hosted Control',\n      icon: Cloud,\n      description: 'Complete control over your data and infrastructure',\n    },\n    {\n      id: 'developer',\n      name: 'Developer Experience',\n      icon: Code2,\n      description: 'Built by developers, for developers',\n    },\n  ];\n\n  const features = {\n    'ai-powered': [\n      {\n        name: 'AI Agent Orchestration',\n        description:\n          'Create intelligent agents that can reason, plan, and execute complex multi-step workflows autonomously.',\n        icon: Brain,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Vector Database Integration',\n        description:\n          'Built-in pgvector support for semantic search, document understanding, and intelligent data retrieval.',\n        icon: Database,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Multi-LLM Support',\n        description:\n          'OpenAI, Anthropic, Google Gemini, and Ollama integration with automatic provider switching.',\n        icon: Zap,\n        demo: false,\n        enterprise: false,\n      },\n      {\n        name: 'Intelligent Data Transformation',\n        description:\n          'AI-powered data mapping and transformation that understands context and intent.',\n        icon: GitBranch,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Natural Language Workflow Creation',\n        description: 'Describe your workflow in plain English and watch AI build it for you.',\n        icon: Settings,\n        demo: true,\n        enterprise: true,\n      },\n      {\n        name: 'Predictive Analytics',\n        description: 'AI models that predict workflow performance and suggest optimizations.',\n        icon: BarChart3,\n        demo: false,\n        enterprise: true,\n      },\n    ],\n    enterprise: [\n      {\n        name: 'SSO Integration',\n        description: 'SAML, OIDC, and Active Directory integration with role-based access control.',\n        icon: Users,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Audit Logging',\n        description: 'Comprehensive audit trails for all workflow executions and user actions.',\n        icon: Lock,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Multi-Tenant Architecture',\n        description: 'Complete tenant isolation with custom branding and domain support.',\n        icon: Shield,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Advanced Monitoring',\n        description: 'Real-time dashboards, alerts, and performance metrics with SLA tracking.',\n        icon: BarChart3,\n        demo: true,\n        enterprise: true,\n      },\n      {\n        name: 'Disaster Recovery',\n        description: 'Automated backups, point-in-time recovery, and geographic redundancy.',\n        icon: Database,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Compliance Center',\n        description: 'SOC2, GDPR, HIPAA compliance with automated compliance reporting.',\n        icon: Shield,\n        demo: false,\n        enterprise: true,\n      },\n    ],\n    'hybrid-database': [\n      {\n        name: 'MongoDB Primary Storage',\n        description: 'Fast, flexible document storage for workflows, executions, and user data.',\n        icon: Database,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'PostgreSQL + pgvector',\n        description: 'Dedicated AI database for embeddings, vector search, and analytics.',\n        icon: Brain,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Intelligent Query Routing',\n        description:\n          'Automatic data routing between databases based on query type and performance.',\n        icon: GitBranch,\n        demo: false,\n        enterprise: false,\n      },\n      {\n        name: 'Real-time Sync',\n        description: 'Seamless data synchronization between databases with conflict resolution.',\n        icon: Zap,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Advanced Analytics',\n        description: 'Time-series analysis, pattern recognition, and predictive modeling.',\n        icon: BarChart3,\n        demo: true,\n        enterprise: true,\n      },\n      {\n        name: 'Semantic Search',\n        description: 'Natural language search across all workflow data and documentation.',\n        icon: Settings,\n        demo: true,\n        enterprise: false,\n      },\n    ],\n    'self-hosted': [\n      {\n        name: 'Docker Compose Deployment',\n        description: 'One-command deployment with production-ready configuration.',\n        icon: Code2,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Kubernetes Helm Charts',\n        description: 'Enterprise-grade K8s deployment with auto-scaling and load balancing.',\n        icon: Cloud,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Complete Data Sovereignty',\n        description: 'Your data never leaves your infrastructure. Zero external dependencies.',\n        icon: Lock,\n        demo: false,\n        enterprise: false,\n      },\n      {\n        name: 'Air-Gap Deployment',\n        description: 'Fully offline deployment capability for high-security environments.',\n        icon: Shield,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Custom Domain & SSL',\n        description: 'Host on your domain with automatic SSL certificate management.',\n        icon: Webhook,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Backup & Migration Tools',\n        description:\n          'Built-in tools for data backup, restoration, and cross-environment migration.',\n        icon: Database,\n        demo: false,\n        enterprise: true,\n      },\n    ],\n    developer: [\n      {\n        name: 'TypeScript-First',\n        description:\n          'Full TypeScript support with comprehensive type definitions and IntelliSense.',\n        icon: Code2,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Node SDK',\n        description: 'Rich SDK for building custom nodes, integrations, and extensions.',\n        icon: GitBranch,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'REST API',\n        description: 'Complete REST API for workflow management, execution, and monitoring.',\n        icon: Webhook,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'GraphQL Support',\n        description:\n          'Optional GraphQL endpoint for efficient data fetching and real-time subscriptions.',\n        icon: Settings,\n        demo: false,\n        enterprise: true,\n      },\n      {\n        name: 'Hot Module Replacement',\n        description: 'Instant development feedback with HMR for custom nodes and UI components.',\n        icon: Zap,\n        demo: true,\n        enterprise: false,\n      },\n      {\n        name: 'Plugin Marketplace',\n        description: 'Extensible plugin system with community marketplace for custom integrations.',\n        icon: Users,\n        demo: false,\n        enterprise: true,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Features That{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Scale\n              </span>\n              <br />\n              With Your Enterprise\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              From AI-powered automation to enterprise-grade security, discover the features that\n              make Reporunner the most powerful self-hosted workflow platform.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Play className=\"w-5 h-5\" />\n                Interactive Demo\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                View Documentation\n                <ArrowRight className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Feature Categories Navigation */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-wrap justify-center gap-4 mb-16\">\n            {featureCategories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <button\n                  key={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`group p-6 rounded-xl transition-all duration-300 ${\n                    activeCategory === category.id\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white scale-105 shadow-xl'\n                      : 'bg-white border border-gray-200 text-gray-700 hover:border-blue-300 hover:shadow-lg'\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <Icon\n                      className={`w-8 h-8 mx-auto mb-3 ${\n                        activeCategory === category.id\n                          ? 'text-white'\n                          : 'text-blue-600 group-hover:text-blue-700'\n                      }`}\n                    />\n                    <h3 className=\"font-semibold text-lg mb-2\">{category.name}</h3>\n                    <p\n                      className={`text-sm ${\n                        activeCategory === category.id ? 'text-blue-100' : 'text-gray-500'\n                      }`}\n                    >\n                      {category.description}\n                    </p>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Feature Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features[activeCategory as keyof typeof features]?.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-xl transition-all duration-300 hover:-translate-y-1\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <Icon className=\"w-8 h-8 text-blue-600 group-hover:text-blue-700 transition-colors\" />\n                    <div className=\"flex gap-2\">\n                      {feature.demo && (\n                        <span className=\"px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full\">\n                          Demo\n                        </span>\n                      )}\n                      {feature.enterprise && (\n                        <span className=\"px-2 py-1 bg-purple-100 text-purple-700 text-xs font-medium rounded-full\">\n                          Enterprise\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <h3 className=\"font-semibold text-xl text-gray-900 mb-3 group-hover:text-blue-900 transition-colors\">\n                    {feature.name}\n                  </h3>\n\n                  <p className=\"text-gray-600 leading-relaxed mb-4\">{feature.description}</p>\n\n                  <div className=\"flex items-center text-blue-600 font-medium group-hover:text-blue-700 transition-colors\">\n                    <span className=\"text-sm\">Learn more</span>\n                    <ChevronRight className=\"w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Comparison Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Why Choose Reporunner?</h2>\n            <p className=\"text-xl text-gray-600\">\n              See how Reporunner compares to other workflow automation platforms\n            </p>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full bg-white rounded-xl shadow-xl\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left p-6 font-semibold text-gray-900\">Feature</th>\n                  <th className=\"text-center p-6 font-semibold text-blue-900\">Reporunner</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">n8n</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">Zapier</th>\n                  <th className=\"text-center p-6 font-semibold text-gray-700\">Make</th>\n                </tr>\n              </thead>\n              <tbody>\n                {[\n                  {\n                    feature: 'AI-Powered Automation',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Self-Hosted',\n                    reporunner: true,\n                    n8n: true,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Vector Database',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Enterprise SSO',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: true,\n                    make: true,\n                  },\n                  {\n                    feature: 'Custom Nodes SDK',\n                    reporunner: true,\n                    n8n: true,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Real-time Collaboration',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: true,\n                  },\n                  {\n                    feature: 'Multi-Database Support',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                  {\n                    feature: 'Air-Gap Deployment',\n                    reporunner: true,\n                    n8n: false,\n                    zapier: false,\n                    make: false,\n                  },\n                ].map((row, index) => (\n                  <tr key={index} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                    <td className=\"p-6 font-medium text-gray-900\">{row.feature}</td>\n                    <td className=\"p-6 text-center\">\n                      {row.reporunner ? (\n                        <Check className=\"w-6 h-6 text-green-600 mx-auto\" />\n                      ) : (\n                        <span className=\"text-gray-400\">—</span>\n                      )}\n                    </td>\n                    <td className=\"p-6 text-center\">\n                      {row.n8n ? (\n                        <Check className=\"w-6 h-6 text-green-600 mx-auto\" />\n                      ) : (\n                        <span className=\"text-gray-400\">—</span>\n                      )}\n                    </td>\n                    <td className=\"p-6 text-center\">\n                      {row.zapier ? (\n                        <Check className=\"w-6 h-6 text-green-600 mx-auto\" />\n                      ) : (\n                        <span className=\"text-gray-400\">—</span>\n                      )}\n                    </td>\n                    <td className=\"p-6 text-center\">\n                      {row.make ? (\n                        <Check className=\"w-6 h-6 text-green-600 mx-auto\" />\n                      ) : (\n                        <span className=\"text-gray-400\">—</span>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Experience These Features?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Start your free trial today and see how Reporunner can transform your workflow\n            automation.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              Start Free Trial\n              <ArrowRight className=\"w-5 h-5\" />\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors\">\n              Schedule Demo\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Features;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx",
        "start": 1,
        "end": 561,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 561,
          "column": 2,
          "position": 3676
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/features/Features.tsx",
        "start": 2,
        "end": 562,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 562,
          "column": 2,
          "position": 3689
        }
      }
    },
    {
      "format": "javascript",
      "lines": 116,
      "fragment": "={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg mb-6\">\n        <div className=\"p-4\">\n          <div className=\"flex space-x-4\">\n            {[\n              { key: 'all', label: 'All' },\n              { key: 'pending', label: 'Pending' },\n              { key: 'running', label: 'Running' },\n              { key: 'success', label: 'Success' },\n              { key: 'error', label: 'Failed' },\n              { key: 'cancelled', label: 'Cancelled' },\n            ].map((filterOption) => (\n              <button\n                key={filterOption.key}\n                onClick={() => setFilter(filterOption.key as any)}\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${\n                  filter === filterOption.key\n                    ? 'bg-white/20 text-blue-300 backdrop-blur-sm border border-white/30'\n                    : 'text-slate-300 hover:bg-white/10 hover:text-white'\n                }`}\n              >\n                {filterOption.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Executions List */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading executions...</p>\n            </div>\n          ) : executions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300\">No executions found</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {executions.map((execution) => (\n                <div\n                  key={execution.id}\n                  className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3\">\n                        <h3 className=\"font-medium text-white\">\n                          Workflow ID: {execution.workflowId}\n                        </h3>\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(execution.status)}`}\n                        >\n                          {execution.status}\n                        </span>\n                      </div>\n                      <div className=\"mt-2 flex items-center space-x-6 text-sm text-slate-300\">\n                        <span>\n                          Started:{' '}\n                          {execution.startTime\n                            ? new Date(execution.startTime).toLocaleString()\n                            : 'N/A'}\n                        </span>\n                        <span>Duration: {formatDuration(execution)}</span>\n                        <span>Triggered by: {execution.triggerType}</span>\n                      </div>\n                      {execution.nodeExecutions && execution.nodeExecutions.length > 0 && (\n                        <div className=\"mt-3\">\n                          <details className=\"group\">\n                            <summary className=\"cursor-pointer text-sm text-blue-300 hover:text-blue-200 transition-colors\">\n                              View Node Results ({execution.nodeExecutions.length} nodes)\n                            </summary>\n                            <div className=\"mt-2 bg-white/10 backdrop-blur-sm rounded p-3 text-sm border border-white/20\">\n                              {execution.nodeExecutions.map((nodeExec, index) => (\n                                <div key={index} className=\"text-slate-300 mb-1\">\n                                  <span className=\"font-medium text-white\">\n                                    {nodeExec.nodeName || nodeExec.nodeId}:\n                                  </span>\n                                  <span\n                                    className={`ml-2 ${nodeExec.status === 'completed' ? 'text-green-300' : nodeExec.status === 'failed' ? 'text-red-300' : 'text-blue-300'}`}\n                                  >\n                                    {nodeExec.status}\n                                  </span>\n                                  {nodeExec.duration && (\n                                    <span className=\"ml-2 text-slate-400\">\n                                      ({nodeExec.duration}ms)\n                                    </span>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          </details>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {(execution.status === 'running' || execution.status === 'pending') && (\n                        <button\n                          onClick={() => handleStopExecution(execution.id)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx",
        "start": 142,
        "end": 257,
        "startLoc": {
          "line": 142,
          "column": 4,
          "position": 1380
        },
        "endLoc": {
          "line": 257,
          "column": 2,
          "position": 2459
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/executions/Executions.tsx",
        "start": 145,
        "end": 260,
        "startLoc": {
          "line": 145,
          "column": 4,
          "position": 1419
        },
        "endLoc": {
          "line": 260,
          "column": 2,
          "position": 2498
        }
      }
    },
    {
      "format": "tsx",
      "lines": 275,
      "fragment": ";\n\nconst workflowApiService = new WorkflowApiService();\n\nconst Executions: React.FC = () => {\n  const [executions, setExecutions] = useState<WorkflowExecution[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [filter, setFilter] = useState<\n    'all' | 'pending' | 'running' | 'success' | 'error' | 'cancelled'\n  >('all');\n  const [page, setPage] = useState(1);\n  const [, setHasMore] = useState(true);\n\n  const loadExecutions = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const result = await workflowApiService.getExecutions({\n        status: filter === 'all' ? undefined : filter,\n        limit: 20,\n        offset: (page - 1) * 20,\n        sortOrder: 'desc',\n      });\n\n      // Transform results to match WorkflowExecution interface\n      const transformedExecutions = result.items.map((execution) => ({\n        ...execution,\n        error: execution.error\n          ? typeof execution.error === 'string'\n            ? {\n                message: execution.error,\n                nodeId: undefined,\n                code: undefined,\n                stack: undefined,\n              }\n            : execution.error\n          : undefined,\n        logs: Array.isArray(execution.logs)\n          ? execution.logs.map((log: any) =>\n              typeof log === 'string' ? log : log.message || String(log)\n            )\n          : [],\n        results: Array.isArray(execution.results)\n          ? execution.results.map((nodeResult) => ({\n              ...nodeResult,\n              status:\n                nodeResult.status === 'completed'\n                  ? ('success' as const)\n                  : nodeResult.status === 'failed'\n                    ? ('error' as const)\n                    : (nodeResult.status as 'success' | 'error' | 'skipped'),\n            }))\n          : undefined,\n      }));\n\n      if (page === 1) {\n        setExecutions(transformedExecutions);\n      } else {\n        setExecutions((prev) => [...prev, ...transformedExecutions]);\n      }\n      setHasMore(result.hasMore);\n    } catch (_error) {\n      setExecutions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [filter, page]);\n\n  useEffect(() => {\n    loadExecutions();\n  }, [loadExecutions]);\n\n  const handleStopExecution = async (executionId: string) => {\n    try {\n      await workflowApiService.stopExecution(executionId);\n      // Refresh executions\n      setPage(1);\n      loadExecutions();\n    } catch (_error) {\n      alert('Failed to stop execution');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'success':\n        return 'bg-green-500/20 text-green-300 border border-green-500/30';\n      case 'running':\n        return 'bg-blue-500/20 text-blue-300 border border-blue-500/30';\n      case 'pending':\n        return 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/30';\n      case 'error':\n        return 'bg-red-500/20 text-red-300 border border-red-500/30';\n      case 'cancelled':\n        return 'bg-slate-500/20 text-slate-300 border border-slate-500/30';\n      default:\n        return 'bg-slate-500/20 text-slate-300 border border-slate-500/30';\n    }\n  };\n\n  const formatDuration = (execution: WorkflowExecution) => {\n    if (!execution.endTime || !execution.startTime) return 'N/A';\n    const start = new Date(execution.startTime).getTime();\n    const end = new Date(execution.endTime).getTime();\n    const seconds = Math.floor((end - start) / 1000);\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Workflow Executions</h1>\n        <p className=\"text-slate-300\">Monitor and track your workflow runs</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        {[\n          { name: 'Total Executions', value: executions.length, icon: '▶️' },\n          {\n            name: 'Running',\n            value: executions.filter((e) => e.status === 'running').length,\n            icon: '🔄',\n          },\n          {\n            name: 'Success',\n            value: executions.filter((e) => e.status === 'success').length,\n            icon: '✅',\n          },\n          {\n            name: 'Failed',\n            value: executions.filter((e) => e.status === 'error').length,\n            icon: '❌',\n          },\n        ].map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg mb-6\">\n        <div className=\"p-4\">\n          <div className=\"flex space-x-4\">\n            {[\n              { key: 'all', label: 'All' },\n              { key: 'pending', label: 'Pending' },\n              { key: 'running', label: 'Running' },\n              { key: 'success', label: 'Success' },\n              { key: 'error', label: 'Failed' },\n              { key: 'cancelled', label: 'Cancelled' },\n            ].map((filterOption) => (\n              <button\n                key={filterOption.key}\n                onClick={() => setFilter(filterOption.key as any)}\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${\n                  filter === filterOption.key\n                    ? 'bg-white/20 text-blue-300 backdrop-blur-sm border border-white/30'\n                    : 'text-slate-300 hover:bg-white/10 hover:text-white'\n                }`}\n              >\n                {filterOption.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Executions List */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading executions...</p>\n            </div>\n          ) : executions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300\">No executions found</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {executions.map((execution) => (\n                <div\n                  key={execution.id}\n                  className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3\">\n                        <h3 className=\"font-medium text-white\">\n                          Workflow ID: {execution.workflowId}\n                        </h3>\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(execution.status)}`}\n                        >\n                          {execution.status}\n                        </span>\n                      </div>\n                      <div className=\"mt-2 flex items-center space-x-6 text-sm text-slate-300\">\n                        <span>\n                          Started:{' '}\n                          {execution.startTime\n                            ? new Date(execution.startTime).toLocaleString()\n                            : 'N/A'}\n                        </span>\n                        <span>Duration: {formatDuration(execution)}</span>\n                        <span>Triggered by: {execution.triggerType}</span>\n                      </div>\n                      {execution.nodeExecutions && execution.nodeExecutions.length > 0 && (\n                        <div className=\"mt-3\">\n                          <details className=\"group\">\n                            <summary className=\"cursor-pointer text-sm text-blue-300 hover:text-blue-200 transition-colors\">\n                              View Node Results ({execution.nodeExecutions.length} nodes)\n                            </summary>\n                            <div className=\"mt-2 bg-white/10 backdrop-blur-sm rounded p-3 text-sm border border-white/20\">\n                              {execution.nodeExecutions.map((nodeExec, index) => (\n                                <div key={index} className=\"text-slate-300 mb-1\">\n                                  <span className=\"font-medium text-white\">\n                                    {nodeExec.nodeName || nodeExec.nodeId}:\n                                  </span>\n                                  <span\n                                    className={`ml-2 ${nodeExec.status === 'completed' ? 'text-green-300' : nodeExec.status === 'failed' ? 'text-red-300' : 'text-blue-300'}`}\n                                  >\n                                    {nodeExec.status}\n                                  </span>\n                                  {nodeExec.duration && (\n                                    <span className=\"ml-2 text-slate-400\">\n                                      ({nodeExec.duration}ms)\n                                    </span>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          </details>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {(execution.status === 'running' || execution.status === 'pending') && (\n                        <button\n                          onClick={() => handleStopExecution(execution.id)}\n                          className=\"text-red-300 hover:text-red-200 px-3 py-1 text-sm border border-red-500/30 rounded bg-red-500/20 backdrop-blur-sm transition-colors\"\n                        >\n                          Cancel\n                        </button>\n                      )}\n                      <button className=\"text-slate-400 hover:text-white transition-colors\">\n                        ⋮\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Executions;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx",
        "start": 4,
        "end": 278,
        "startLoc": {
          "line": 4,
          "column": 25,
          "position": 56
        },
        "endLoc": {
          "line": 278,
          "column": 2,
          "position": 2557
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/executions/Executions.tsx",
        "start": 7,
        "end": 281,
        "startLoc": {
          "line": 7,
          "column": 19,
          "position": 95
        },
        "endLoc": {
          "line": 281,
          "column": 2,
          "position": 2596
        }
      }
    },
    {
      "format": "javascript",
      "lines": 259,
      "fragment": "={index}\n                            className=\"bg-white/10 rounded-lg p-3 text-center text-white\"\n                          >\n                            {company}\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"border-t border-white/20 pt-6\">\n                    <div className=\"flex items-center justify-between text-white\">\n                      <span>Enterprise Satisfaction</span>\n                      <div className=\"flex items-center gap-1\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                        ))}\n                        <span className=\"ml-2 font-semibold\">4.9/5</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enterprise Features Tabs */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Enterprise-Grade Capabilities</h2>\n            <p className=\"text-xl text-gray-600\">\n              Everything your enterprise needs for secure, scalable workflow automation\n            </p>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"bg-gray-100 rounded-lg p-1 flex\">\n              {[\n                { id: 'security', name: 'Security & Compliance', icon: Shield },\n                { id: 'deployment', name: 'Deployment & Scale', icon: Cloud },\n                {\n                  id: 'governance',\n                  name: 'Governance & Control',\n                  icon: Settings,\n                },\n              ].map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 px-6 py-3 rounded-md font-medium transition-colors ${\n                      activeTab === tab.id\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    {tab.name}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {enterpriseFeatures[activeTab as keyof typeof enterpriseFeatures]?.map(\n              (feature, index) => {\n                const Icon = feature.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"flex items-start gap-4 mb-4\">\n                      <div className=\"bg-blue-100 p-3 rounded-lg group-hover:bg-blue-600 transition-colors\">\n                        <Icon className=\"w-6 h-6 text-blue-600 group-hover:text-white transition-colors\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"ml-16\">\n                      <ul className=\"space-y-2\">\n                        {feature.benefits.map((benefit, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            <span className=\"text-gray-700 text-sm\">{benefit}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Use Cases */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Industry Solutions</h2>\n            <p className=\"text-xl text-gray-600\">\n              Proven solutions for the most regulated and demanding industries\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {useCases.map((useCase, index) => {\n              const Icon = useCase.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-white rounded-xl p-8 shadow-lg hover:shadow-xl transition-shadow\"\n                >\n                  <div className=\"flex items-center gap-4 mb-6\">\n                    <div className=\"bg-blue-100 p-3 rounded-lg\">\n                      <Icon className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold text-gray-900\">{useCase.title}</h3>\n                      <p className=\"text-gray-600\">{useCase.description}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Challenges:</h4>\n                      <ul className=\"space-y-2\">\n                        {useCase.challenges.map((challenge, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-red-400 rounded-full\" />\n                            <span className=\"text-gray-700\">{challenge}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Solutions:</h4>\n                      <ul className=\"space-y-2\">\n                        {useCase.solutions.map((solution, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            <span className=\"text-gray-700\">{solution}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-900 mb-2\">Results:</h4>\n                      <p className=\"text-blue-800\">{useCase.results}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">What Enterprise Leaders Say</h2>\n            <p className=\"text-xl text-gray-600\">\n              Trusted by the world's most demanding organizations\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <div\n                key={index}\n                className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </div>\n\n                <blockquote className=\"text-gray-700 mb-6 italic\">\"{testimonial.quote}\"</blockquote>\n\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-3xl\">{testimonial.logo}</div>\n                  <div>\n                    <div className=\"font-semibold text-gray-900\">{testimonial.author}</div>\n                    <div className=\"text-gray-600 text-sm\">{testimonial.title}</div>\n                    <div className=\"text-gray-500 text-sm\">{testimonial.company}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Enterprise Pricing */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Enterprise Pricing</h2>\n            <p className=\"text-xl text-gray-600\">\n              Flexible pricing that scales with your organization\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {Object.entries(pricing).map(([key, plan]) => (\n              <div\n                key={key}\n                className={`rounded-2xl p-8 ${\n                  key === 'growth'\n                    ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl scale-105'\n                    : 'bg-white border border-gray-200 shadow-lg'\n                } hover:shadow-xl transition-all duration-300`}\n              >\n                {key === 'growth' && (\n                  <div className=\"text-center mb-4\">\n                    <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  <div className=\"text-4xl font-bold text-gray-900 mb-2\">{plan.price}</div>\n\n                  <button\n                    className={`w-full py-3 px-6 font-semibold rounded-lg transition-colors ${\n                      key === 'growth'\n                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'\n                        : 'bg-gray-900 text-white hover:bg-gray-800'\n                    }`}\n                  >\n                    {key === 'scale' ? 'Contact Sales' : 'Start Trial'}\n                  </button>\n                </div>\n\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, idx) => (\n                    <li key={idx}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx",
        "start": 280,
        "end": 538,
        "startLoc": {
          "line": 280,
          "column": 4,
          "position": 1879
        },
        "endLoc": {
          "line": 538,
          "column": 2,
          "position": 4039
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/enterprise/Enterprise.tsx",
        "start": 283,
        "end": 541,
        "startLoc": {
          "line": 283,
          "column": 4,
          "position": 1918
        },
        "endLoc": {
          "line": 541,
          "column": 2,
          "position": 4078
        }
      }
    },
    {
      "format": "tsx",
      "lines": 593,
      "fragment": "/**\n * Enterprise Page\n *\n * Comprehensive enterprise features and solutions for Reporunner\n * Targeting large organizations with advanced needs\n */\n\nimport {\n  Award,\n  BarChart3,\n  Building,\n  Calendar,\n  CheckCircle,\n  Cloud,\n  Database,\n  ExternalLink,\n  FileText,\n  Globe,\n  Lock,\n  Phone,\n  Settings,\n  Shield,\n  Star,\n  TrendingUp,\n  Users,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Enterprise: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('security');\n\n  const enterpriseFeatures = {\n    security: [\n      {\n        title: 'Enterprise SSO Integration',\n        description:\n          'SAML, OIDC, and Active Directory integration with multi-factor authentication support',\n        icon: Lock,\n        benefits: ['Zero trust architecture', 'Centralized user management', 'Compliance ready'],\n      },\n      {\n        title: 'Advanced Audit Logging',\n        description: 'Comprehensive audit trails for all actions, workflows, and data access',\n        icon: FileText,\n        benefits: ['Tamper-proof logs', 'Real-time alerts', 'Compliance reporting'],\n      },\n      {\n        title: 'Role-Based Access Control',\n        description: 'Granular permissions with custom roles and resource-level access control',\n        icon: Users,\n        benefits: ['Least privilege access', 'Workflow-level permissions', 'Team isolation'],\n      },\n      {\n        title: 'Data Encryption',\n        description: 'End-to-end encryption for data at rest and in transit with key management',\n        icon: Shield,\n        benefits: ['AES-256 encryption', 'Customer-managed keys', 'Zero-knowledge architecture'],\n      },\n    ],\n    deployment: [\n      {\n        title: 'Air-Gap Deployment',\n        description: 'Complete offline deployment with no external dependencies',\n        icon: Cloud,\n        benefits: ['Highest security', 'Regulatory compliance', 'Full control'],\n      },\n      {\n        title: 'Multi-Cloud Support',\n        description: 'Deploy across AWS, Azure, GCP, or on-premises infrastructure',\n        icon: Globe,\n        benefits: ['Vendor flexibility', 'Disaster recovery', 'Cost optimization'],\n      },\n      {\n        title: 'Auto-Scaling Infrastructure',\n        description: 'Kubernetes-native deployment with automatic scaling and load balancing',\n        icon: TrendingUp,\n        benefits: ['Handle peak loads', 'Cost efficient', 'High availability'],\n      },\n      {\n        title: 'Disaster Recovery',\n        description: 'Automated backups, point-in-time recovery, and geographic redundancy',\n        icon: Database,\n        benefits: ['RPO < 1 hour', 'RTO < 4 hours', 'Multi-region backup'],\n      },\n    ],\n    governance: [\n      {\n        title: 'Workflow Governance',\n        description: 'Approval workflows, version control, and deployment pipelines',\n        icon: Settings,\n        benefits: ['Change management', 'Version history', 'Rollback capabilities'],\n      },\n      {\n        title: 'Data Governance',\n        description: 'Data lineage, classification, and retention policies',\n        icon: Database,\n        benefits: ['Data discovery', 'Privacy compliance', 'Retention automation'],\n      },\n      {\n        title: 'Compliance Framework',\n        description: 'Pre-built compliance templates for SOC2, GDPR, HIPAA, and more',\n        icon: Award,\n        benefits: ['Automated compliance', 'Audit readiness', 'Risk reduction'],\n      },\n      {\n        title: 'Performance Analytics',\n        description: 'Advanced analytics and reporting for workflows and resource utilization',\n        icon: BarChart3,\n        benefits: ['Cost optimization', 'Performance insights', 'Capacity planning'],\n      },\n    ],\n  };\n\n  const useCases = [\n    {\n      title: 'Financial Services',\n      description: 'Automate compliance reporting, fraud detection, and customer onboarding',\n      icon: Building,\n      challenges: ['Regulatory compliance', 'Data security', 'High availability'],\n      solutions: ['SOC2 certified platform', 'End-to-end encryption', '99.99% SLA'],\n      results: '50% reduction in compliance costs, 80% faster onboarding',\n    },\n    {\n      title: 'Healthcare',\n      description: 'HIPAA-compliant patient data processing and clinical workflow automation',\n      icon: Shield,\n      challenges: ['HIPAA compliance', 'Patient privacy', 'System integration'],\n      solutions: ['HIPAA-ready deployment', 'PHI encryption', 'HL7 integrations'],\n      results: '100% HIPAA compliance, 60% faster patient processing',\n    },\n    {\n      title: 'Manufacturing',\n      description: 'Supply chain optimization, quality control, and predictive maintenance',\n      icon: Settings,\n      challenges: ['Legacy system integration', 'Real-time processing', 'Scalability'],\n      solutions: ['Custom connectors', 'Edge deployment', 'Auto-scaling'],\n      results: '30% reduction in downtime, $2M annual savings',\n    },\n    {\n      title: 'Government',\n      description: 'Secure data processing, inter-agency workflows, and citizen services',\n      icon: Lock,\n      challenges: ['Security clearances', 'Air-gap deployment', 'Compliance'],\n      solutions: ['FedRAMP ready', 'Air-gap support', 'Government cloud'],\n      results: 'Accelerated digital transformation, improved citizen experience',\n    },\n  ];\n\n  const testimonials = [\n    {\n      quote:\n        \"Reporunner's enterprise features allowed us to maintain compliance while accelerating our digital transformation. The air-gap deployment was crucial for our security requirements.\",\n      author: 'Sarah Chen',\n      title: 'CTO',\n      company: 'SecureBank',\n      logo: '🏦',\n    },\n    {\n      quote:\n        'The hybrid database architecture with AI capabilities has transformed how we process patient data. HIPAA compliance was seamless with their pre-built templates.',\n      author: 'Dr. Michael Rodriguez',\n      title: 'Chief Medical Officer',\n      company: 'HealthFirst',\n      logo: '🏥',\n    },\n    {\n      quote:\n        'We migrated from multiple workflow tools to Reporunner and saw immediate ROI. The enterprise SSO and audit logging saved us months of compliance work.',\n      author: 'Jennifer Walsh',\n      title: 'VP of Operations',\n      company: 'GlobalManufacturing',\n      logo: '🏭',\n    },\n  ];\n\n  const pricing = {\n    starter: {\n      name: 'Enterprise Starter',\n      price: '$500/month',\n      description: 'For teams of 25-100 users',\n      features: [\n        'Up to 100 users',\n        'Enterprise SSO',\n        'Advanced security',\n        'Priority support',\n        'SLA: 99.9%',\n      ],\n    },\n    growth: {\n      name: 'Enterprise Growth',\n      price: '$1,500/month',\n      description: 'For organizations of 100-500 users',\n      features: [\n        'Up to 500 users',\n        'All Starter features',\n        'Advanced analytics',\n        'Custom integrations',\n        '24/7 phone support',\n        'SLA: 99.95%',\n      ],\n    },\n    scale: {\n      name: 'Enterprise Scale',\n      price: 'Custom',\n      description: 'For large organizations 500+ users',\n      features: [\n        'Unlimited users',\n        'All Growth features',\n        'Air-gap deployment',\n        'Dedicated support',\n        'Professional services',\n        'Custom SLA up to 99.99%',\n      ],\n    },\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n                  Enterprise{' '}\n                  <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                    Workflow\n                  </span>\n                  <br />\n                  Automation\n                </h1>\n                <p className=\"text-xl text-slate-200 mb-8 leading-relaxed\">\n                  Built for the most demanding enterprise requirements. Complete security,\n                  compliance, and scalability with the power of AI-driven automation.\n                </p>\n\n                <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n                  <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                    <Calendar className=\"w-5 h-5\" />\n                    Schedule Demo\n                  </button>\n                  <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                    <Phone className=\"w-5 h-5\" />\n                    Talk to Sales\n                  </button>\n                </div>\n\n                {/* Enterprise Stats */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <div className=\"text-3xl font-bold text-blue-300 mb-1\">99.99%</div>\n                    <div className=\"text-sm text-slate-300\">Enterprise SLA</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-green-300 mb-1\">SOC2</div>\n                    <div className=\"text-sm text-slate-300\">Type II Certified</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20\">\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-xl font-semibold text-white mb-4\">\n                      Trusted by Enterprise Leaders\n                    </h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {['🏦 SecureBank', '🏥 HealthFirst', '🏭 GlobalMfg', '🏛️ GovTech'].map(\n                        (company, index) => (\n                          <div\n                            key={index}\n                            className=\"bg-white/10 rounded-lg p-3 text-center text-white\"\n                          >\n                            {company}\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"border-t border-white/20 pt-6\">\n                    <div className=\"flex items-center justify-between text-white\">\n                      <span>Enterprise Satisfaction</span>\n                      <div className=\"flex items-center gap-1\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                        ))}\n                        <span className=\"ml-2 font-semibold\">4.9/5</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enterprise Features Tabs */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Enterprise-Grade Capabilities</h2>\n            <p className=\"text-xl text-gray-600\">\n              Everything your enterprise needs for secure, scalable workflow automation\n            </p>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"bg-gray-100 rounded-lg p-1 flex\">\n              {[\n                { id: 'security', name: 'Security & Compliance', icon: Shield },\n                { id: 'deployment', name: 'Deployment & Scale', icon: Cloud },\n                {\n                  id: 'governance',\n                  name: 'Governance & Control',\n                  icon: Settings,\n                },\n              ].map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 px-6 py-3 rounded-md font-medium transition-colors ${\n                      activeTab === tab.id\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    {tab.name}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {enterpriseFeatures[activeTab as keyof typeof enterpriseFeatures]?.map(\n              (feature, index) => {\n                const Icon = feature.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"flex items-start gap-4 mb-4\">\n                      <div className=\"bg-blue-100 p-3 rounded-lg group-hover:bg-blue-600 transition-colors\">\n                        <Icon className=\"w-6 h-6 text-blue-600 group-hover:text-white transition-colors\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"ml-16\">\n                      <ul className=\"space-y-2\">\n                        {feature.benefits.map((benefit, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            <span className=\"text-gray-700 text-sm\">{benefit}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                );\n              }\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Use Cases */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Industry Solutions</h2>\n            <p className=\"text-xl text-gray-600\">\n              Proven solutions for the most regulated and demanding industries\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {useCases.map((useCase, index) => {\n              const Icon = useCase.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-white rounded-xl p-8 shadow-lg hover:shadow-xl transition-shadow\"\n                >\n                  <div className=\"flex items-center gap-4 mb-6\">\n                    <div className=\"bg-blue-100 p-3 rounded-lg\">\n                      <Icon className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold text-gray-900\">{useCase.title}</h3>\n                      <p className=\"text-gray-600\">{useCase.description}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Challenges:</h4>\n                      <ul className=\"space-y-2\">\n                        {useCase.challenges.map((challenge, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-red-400 rounded-full\" />\n                            <span className=\"text-gray-700\">{challenge}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Solutions:</h4>\n                      <ul className=\"space-y-2\">\n                        {useCase.solutions.map((solution, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            <span className=\"text-gray-700\">{solution}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-900 mb-2\">Results:</h4>\n                      <p className=\"text-blue-800\">{useCase.results}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">What Enterprise Leaders Say</h2>\n            <p className=\"text-xl text-gray-600\">\n              Trusted by the world's most demanding organizations\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <div\n                key={index}\n                className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </div>\n\n                <blockquote className=\"text-gray-700 mb-6 italic\">\"{testimonial.quote}\"</blockquote>\n\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-3xl\">{testimonial.logo}</div>\n                  <div>\n                    <div className=\"font-semibold text-gray-900\">{testimonial.author}</div>\n                    <div className=\"text-gray-600 text-sm\">{testimonial.title}</div>\n                    <div className=\"text-gray-500 text-sm\">{testimonial.company}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Enterprise Pricing */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Enterprise Pricing</h2>\n            <p className=\"text-xl text-gray-600\">\n              Flexible pricing that scales with your organization\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {Object.entries(pricing).map(([key, plan]) => (\n              <div\n                key={key}\n                className={`rounded-2xl p-8 ${\n                  key === 'growth'\n                    ? 'bg-gradient-to-b from-blue-50 to-purple-50 border-2 border-blue-200 shadow-xl scale-105'\n                    : 'bg-white border border-gray-200 shadow-lg'\n                } hover:shadow-xl transition-all duration-300`}\n              >\n                {key === 'growth' && (\n                  <div className=\"text-center mb-4\">\n                    <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  <div className=\"text-4xl font-bold text-gray-900 mb-2\">{plan.price}</div>\n\n                  <button\n                    className={`w-full py-3 px-6 font-semibold rounded-lg transition-colors ${\n                      key === 'growth'\n                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'\n                        : 'bg-gray-900 text-white hover:bg-gray-800'\n                    }`}\n                  >\n                    {key === 'scale' ? 'Contact Sales' : 'Start Trial'}\n                  </button>\n                </div>\n\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, idx) => (\n                    <li key={idx} className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready for Enterprise Automation?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Join the world's most security-conscious organizations who trust Reporunner for their\n            mission-critical workflows.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Calendar className=\"w-5 h-5\" />\n              Schedule Enterprise Demo\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <ExternalLink className=\"w-5 h-5\" />\n              Enterprise Documentation\n            </button>\n          </div>\n\n          <div className=\"flex items-center justify-center gap-8 text-sm opacity-80\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              30-day enterprise trial\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Dedicated success manager\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Custom deployment options\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Enterprise;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx",
        "start": 1,
        "end": 593,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 593,
          "column": 2,
          "position": 4465
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/enterprise/Enterprise.tsx",
        "start": 4,
        "end": 596,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 596,
          "column": 2,
          "position": 4504
        }
      }
    },
    {
      "format": "javascript",
      "lines": 235,
      "fragment": "={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search documentation...\"\n                  className=\"w-full pl-12 pr-4 py-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg text-white placeholder-slate-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">50+</div>\n                <div className=\"text-sm text-slate-300\">Guides</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">25+</div>\n                <div className=\"text-sm text-slate-300\">Tutorials</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">15+</div>\n                <div className=\"text-sm text-slate-300\">Video Guides</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">100+</div>\n                <div className=\"text-sm text-slate-300\">Code Examples</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Links */}\n      <section className=\"py-8 bg-white border-b border-gray-200\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {quickLinks.map((link, index) => {\n              const Icon = link.icon;\n              return (\n                <a\n                  key={index}\n                  href={link.url}\n                  className=\"flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors text-gray-700 hover:text-gray-900\"\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">{link.title}</span>\n                  {link.url.startsWith('http') && <ExternalLink className=\"w-3 h-3\" />}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Documentation Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:w-1/4\">\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6 sticky top-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Categories</h3>\n                <nav className=\"space-y-2\">\n                  {categories.map((category) => {\n                    const Icon = category.icon;\n                    return (\n                      <button\n                        key={category.id}\n                        onClick={() => setSelectedCategory(category.id)}\n                        className={`w-full flex items-center gap-3 p-3 rounded-lg text-left transition-colors ${\n                          selectedCategory === category.id\n                            ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}\n                      >\n                        <Icon className=\"w-5 h-5\" />\n                        <span className=\"font-medium\">{category.name}</span>\n                      </button>\n                    );\n                  })}\n                </nav>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"lg:w-3/4\">\n              <div className=\"mb-8\">\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {categories.find((c) => c.id === selectedCategory)?.name}\n                </h2>\n                <p className=\"text-gray-600\">\n                  {filteredDocs.length} article\n                  {filteredDocs.length !== 1 ? 's' : ''} found\n                </p>\n              </div>\n\n              {/* Documentation Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredDocs.map((doc, index) => {\n                  const TypeIcon = getTypeIcon(doc.type);\n                  return (\n                    <div\n                      key={index}\n                      className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300 cursor-pointer\"\n                    >\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"bg-blue-100 p-2 rounded-lg group-hover:bg-blue-600 transition-colors\">\n                            <TypeIcon className=\"w-5 h-5 text-blue-600 group-hover:text-white transition-colors\" />\n                          </div>\n                          {doc.popular && (\n                            <div className=\"flex items-center gap-1 px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs font-medium\">\n                              <Star className=\"w-3 h-3 fill-current\" />\n                              Popular\n                            </div>\n                          )}\n                        </div>\n                        <ChevronRight className=\"w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors\" />\n                      </div>\n\n                      <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                        {doc.title}\n                      </h3>\n\n                      <p className=\"text-gray-600 mb-4 line-clamp-2\">{doc.description}</p>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                            <Clock className=\"w-4 h-4\" />\n                            {doc.readTime}\n                          </div>\n                          <span\n                            className={`px-2 py-1 text-xs font-medium rounded-full ${getDifficultyColor(doc.difficulty)}`}\n                          >\n                            {doc.difficulty}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">Updated {doc.lastUpdated}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {filteredDocs.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">📚</div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    No documentation found\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Try adjusting your search or browse a different category.\n                  </p>\n                  <button\n                    onClick={() => setSearchQuery('')}\n                    className=\"px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Clear Search\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Tutorials */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Featured Tutorials</h2>\n            <p className=\"text-xl text-gray-600\">\n              Step-by-step guides to get you started with advanced features\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {[\n              {\n                title: 'Building an AI-Powered Customer Service Bot',\n                description: 'Create an intelligent chatbot using AI agents and vector search',\n                duration: '45 min',\n                level: 'Intermediate',\n                thumbnail: '🤖',\n                tags: ['AI', 'Customer Service', 'Vector Search'],\n              },\n              {\n                title: 'Enterprise Data Pipeline',\n                description:\n                  'Build a scalable data processing pipeline with MongoDB and PostgreSQL',\n                duration: '60 min',\n                level: 'Advanced',\n                thumbnail: '🏢',\n                tags: ['Enterprise', 'Database', 'Pipeline'],\n              },\n              {\n                title: 'Multi-Cloud Deployment',\n                description: 'Deploy Reporunner across AWS, Azure, and GCP with Kubernetes',\n                duration: '90 min',\n                level: 'Advanced',\n                thumbnail: '☁️',\n                tags: ['Cloud', 'Kubernetes', 'DevOps'],\n              },\n            ].map((tutorial, index) => (\n              <div\n                key={index}\n                className=\"bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow cursor-pointer group\"\n              >\n                <div className=\"text-4xl mb-4\">{tutorial.thumbnail}</div>\n\n                <h3 className=\"font-bold text-lg text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                  {tutorial.title}\n                </h3>\n\n                <p className=\"text-gray-600 mb-4\">{tutorial.description}</p>\n\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {tutorial.tags.map((tag, tagIndex) => (\n                    <span\n                      key={tagIndex}\n                      className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <span className=\"flex items-center gap-1 text-sm text-gray-500\">\n                      <Clock className=\"w-4 h-4\" />\n                      {tutorial.duration}\n                    </span>\n                    <span\n                      className={`px-2 py-1 text-xs font-medium rounded-full ${getDifficultyColor(tutorial.level)}`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 318,
        "end": 552,
        "startLoc": {
          "line": 318,
          "column": 6,
          "position": 2247
        },
        "endLoc": {
          "line": 552,
          "column": 2,
          "position": 4131
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 319,
        "end": 553,
        "startLoc": {
          "line": 319,
          "column": 6,
          "position": 2260
        },
        "endLoc": {
          "line": 553,
          "column": 2,
          "position": 4144
        }
      }
    },
    {
      "format": "tsx",
      "lines": 639,
      "fragment": "/**\n * Documentation Page\n *\n * Comprehensive documentation hub for Reporunner\n * Getting started guides, tutorials, and references\n */\n\nimport {\n  ArrowRight,\n  BookOpen,\n  Brain,\n  ChevronRight,\n  Clock,\n  Cloud,\n  Code,\n  Download,\n  ExternalLink,\n  FileText,\n  GitBranch,\n  Layers,\n  Play,\n  Search,\n  Settings,\n  Shield,\n  Star,\n  Users,\n  Video,\n  Webhook,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Documentation: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('getting-started');\n\n  const categories = [\n    { id: 'getting-started', name: 'Getting Started', icon: Play },\n    { id: 'installation', name: 'Installation', icon: Download },\n    { id: 'workflows', name: 'Workflows', icon: GitBranch },\n    { id: 'nodes', name: 'Nodes & Integrations', icon: Layers },\n    { id: 'ai-ml', name: 'AI & ML', icon: Brain },\n    { id: 'enterprise', name: 'Enterprise', icon: Shield },\n    { id: 'deployment', name: 'Deployment', icon: Cloud },\n    { id: 'api', name: 'API Reference', icon: Code },\n    { id: 'sdk', name: 'SDK & Extensions', icon: Settings },\n  ];\n\n  const documentation = {\n    'getting-started': [\n      {\n        title: 'Quick Start Guide',\n        description: 'Get up and running with Reporunner in 5 minutes',\n        type: 'guide',\n        readTime: '5 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '2 days ago',\n      },\n      {\n        title: 'Core Concepts',\n        description: 'Understanding workflows, nodes, and executions',\n        type: 'guide',\n        readTime: '10 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'Your First Workflow',\n        description: 'Build your first automated workflow step by step',\n        type: 'tutorial',\n        readTime: '15 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '3 days ago',\n      },\n      {\n        title: 'Workflow Editor Overview',\n        description: 'Navigate the visual workflow editor like a pro',\n        type: 'guide',\n        readTime: '8 min',\n        difficulty: 'Beginner',\n        popular: false,\n        lastUpdated: '5 days ago',\n      },\n    ],\n    installation: [\n      {\n        title: 'Docker Installation',\n        description: 'Deploy Reporunner using Docker Compose',\n        type: 'guide',\n        readTime: '10 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '1 day ago',\n      },\n      {\n        title: 'Kubernetes Deployment',\n        description: 'Production deployment with Kubernetes and Helm',\n        type: 'guide',\n        readTime: '20 min',\n        difficulty: 'Intermediate',\n        popular: true,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'Manual Installation',\n        description: 'Install from source for custom configurations',\n        type: 'guide',\n        readTime: '30 min',\n        difficulty: 'Advanced',\n        popular: false,\n        lastUpdated: '2 weeks ago',\n      },\n      {\n        title: 'Environment Variables',\n        description: 'Complete reference for environment configuration',\n        type: 'reference',\n        readTime: '5 min',\n        difficulty: 'Intermediate',\n        popular: false,\n        lastUpdated: '4 days ago',\n      },\n    ],\n    workflows: [\n      {\n        title: 'Workflow Fundamentals',\n        description: 'Understanding workflow structure and execution',\n        type: 'guide',\n        readTime: '12 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'Advanced Workflow Patterns',\n        description: 'Loops, conditions, error handling, and more',\n        type: 'guide',\n        readTime: '25 min',\n        difficulty: 'Intermediate',\n        popular: true,\n        lastUpdated: '3 days ago',\n      },\n      {\n        title: 'Workflow Testing & Debugging',\n        description: 'Best practices for testing and debugging workflows',\n        type: 'guide',\n        readTime: '15 min',\n        difficulty: 'Intermediate',\n        popular: false,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'Performance Optimization',\n        description: 'Optimize workflow performance and resource usage',\n        type: 'guide',\n        readTime: '18 min',\n        difficulty: 'Advanced',\n        popular: false,\n        lastUpdated: '2 weeks ago',\n      },\n    ],\n    nodes: [\n      {\n        title: 'Node Types Overview',\n        description: 'Complete guide to all available node types',\n        type: 'reference',\n        readTime: '20 min',\n        difficulty: 'Beginner',\n        popular: true,\n        lastUpdated: '2 days ago',\n      },\n      {\n        title: 'Building Custom Nodes',\n        description: 'Create custom nodes with the Node SDK',\n        type: 'tutorial',\n        readTime: '35 min',\n        difficulty: 'Advanced',\n        popular: true,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'Integration Credentials',\n        description: 'Managing API keys, OAuth, and authentication',\n        type: 'guide',\n        readTime: '12 min',\n        difficulty: 'Intermediate',\n        popular: true,\n        lastUpdated: '4 days ago',\n      },\n      {\n        title: 'Transform Node Guide',\n        description: 'Data transformation and JavaScript expressions',\n        type: 'tutorial',\n        readTime: '22 min',\n        difficulty: 'Intermediate',\n        popular: false,\n        lastUpdated: '1 week ago',\n      },\n    ],\n    'ai-ml': [\n      {\n        title: 'AI Agent Setup',\n        description: 'Configure and deploy AI agents in workflows',\n        type: 'tutorial',\n        readTime: '25 min',\n        difficulty: 'Intermediate',\n        popular: true,\n        lastUpdated: '1 day ago',\n      },\n      {\n        title: 'Vector Database Integration',\n        description: 'Using pgvector for semantic search and embeddings',\n        type: 'guide',\n        readTime: '18 min',\n        difficulty: 'Advanced',\n        popular: true,\n        lastUpdated: '3 days ago',\n      },\n      {\n        title: 'Multi-LLM Workflows',\n        description: 'Orchestrate multiple AI models in single workflows',\n        type: 'tutorial',\n        readTime: '30 min',\n        difficulty: 'Advanced',\n        popular: false,\n        lastUpdated: '1 week ago',\n      },\n      {\n        title: 'AI Model Comparison',\n        description: 'Compare OpenAI, Anthropic, and local models',\n        type: 'guide',\n        readTime: '15 min',\n        difficulty: 'Intermediate',\n        popular: false,\n        lastUpdated: '5 days ago',\n      },\n    ],\n  };\n\n  const quickLinks = [\n    { title: 'API Reference', icon: Code, url: '/api-reference' },\n    { title: 'Node SDK', icon: Settings, url: '/node-sdk' },\n    { title: 'Examples', icon: FileText, url: '/examples' },\n    { title: 'Video Tutorials', icon: Video, url: '/tutorials' },\n    {\n      title: 'GitHub',\n      icon: GitBranch,\n      url: 'https://github.com/reporunner/reporunner',\n    },\n    { title: 'Community', icon: Users, url: '/community' },\n  ];\n\n  const filteredDocs =\n    documentation[selectedCategory as keyof typeof documentation]?.filter(\n      (doc) =>\n        doc.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        doc.description.toLowerCase().includes(searchQuery.toLowerCase())\n    ) || [];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Beginner':\n        return 'text-green-600 bg-green-100';\n      case 'Intermediate':\n        return 'text-yellow-600 bg-yellow-100';\n      case 'Advanced':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'guide':\n        return BookOpen;\n      case 'tutorial':\n        return Play;\n      case 'reference':\n        return FileText;\n      default:\n        return FileText;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Documentation\n              </span>\n              <br />& Guides\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Everything you need to build powerful workflows with Reporunner. From quick starts to\n              advanced deployment guides.\n            </p>\n\n            {/* Search */}\n            <div className=\"max-w-2xl mx-auto mb-12\">\n              <div className=\"relative\">\n                <Search className=\"w-6 h-6 absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search documentation...\"\n                  className=\"w-full pl-12 pr-4 py-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg text-white placeholder-slate-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">50+</div>\n                <div className=\"text-sm text-slate-300\">Guides</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">25+</div>\n                <div className=\"text-sm text-slate-300\">Tutorials</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">15+</div>\n                <div className=\"text-sm text-slate-300\">Video Guides</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">100+</div>\n                <div className=\"text-sm text-slate-300\">Code Examples</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Links */}\n      <section className=\"py-8 bg-white border-b border-gray-200\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {quickLinks.map((link, index) => {\n              const Icon = link.icon;\n              return (\n                <a\n                  key={index}\n                  href={link.url}\n                  className=\"flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors text-gray-700 hover:text-gray-900\"\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span className=\"font-medium\">{link.title}</span>\n                  {link.url.startsWith('http') && <ExternalLink className=\"w-3 h-3\" />}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Documentation Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:w-1/4\">\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6 sticky top-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Categories</h3>\n                <nav className=\"space-y-2\">\n                  {categories.map((category) => {\n                    const Icon = category.icon;\n                    return (\n                      <button\n                        key={category.id}\n                        onClick={() => setSelectedCategory(category.id)}\n                        className={`w-full flex items-center gap-3 p-3 rounded-lg text-left transition-colors ${\n                          selectedCategory === category.id\n                            ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}\n                      >\n                        <Icon className=\"w-5 h-5\" />\n                        <span className=\"font-medium\">{category.name}</span>\n                      </button>\n                    );\n                  })}\n                </nav>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"lg:w-3/4\">\n              <div className=\"mb-8\">\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {categories.find((c) => c.id === selectedCategory)?.name}\n                </h2>\n                <p className=\"text-gray-600\">\n                  {filteredDocs.length} article\n                  {filteredDocs.length !== 1 ? 's' : ''} found\n                </p>\n              </div>\n\n              {/* Documentation Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredDocs.map((doc, index) => {\n                  const TypeIcon = getTypeIcon(doc.type);\n                  return (\n                    <div\n                      key={index}\n                      className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300 cursor-pointer\"\n                    >\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"bg-blue-100 p-2 rounded-lg group-hover:bg-blue-600 transition-colors\">\n                            <TypeIcon className=\"w-5 h-5 text-blue-600 group-hover:text-white transition-colors\" />\n                          </div>\n                          {doc.popular && (\n                            <div className=\"flex items-center gap-1 px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs font-medium\">\n                              <Star className=\"w-3 h-3 fill-current\" />\n                              Popular\n                            </div>\n                          )}\n                        </div>\n                        <ChevronRight className=\"w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors\" />\n                      </div>\n\n                      <h3 className=\"font-semibold text-xl text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                        {doc.title}\n                      </h3>\n\n                      <p className=\"text-gray-600 mb-4 line-clamp-2\">{doc.description}</p>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                            <Clock className=\"w-4 h-4\" />\n                            {doc.readTime}\n                          </div>\n                          <span\n                            className={`px-2 py-1 text-xs font-medium rounded-full ${getDifficultyColor(doc.difficulty)}`}\n                          >\n                            {doc.difficulty}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">Updated {doc.lastUpdated}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {filteredDocs.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">📚</div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    No documentation found\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Try adjusting your search or browse a different category.\n                  </p>\n                  <button\n                    onClick={() => setSearchQuery('')}\n                    className=\"px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Clear Search\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Tutorials */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Featured Tutorials</h2>\n            <p className=\"text-xl text-gray-600\">\n              Step-by-step guides to get you started with advanced features\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {[\n              {\n                title: 'Building an AI-Powered Customer Service Bot',\n                description: 'Create an intelligent chatbot using AI agents and vector search',\n                duration: '45 min',\n                level: 'Intermediate',\n                thumbnail: '🤖',\n                tags: ['AI', 'Customer Service', 'Vector Search'],\n              },\n              {\n                title: 'Enterprise Data Pipeline',\n                description:\n                  'Build a scalable data processing pipeline with MongoDB and PostgreSQL',\n                duration: '60 min',\n                level: 'Advanced',\n                thumbnail: '🏢',\n                tags: ['Enterprise', 'Database', 'Pipeline'],\n              },\n              {\n                title: 'Multi-Cloud Deployment',\n                description: 'Deploy Reporunner across AWS, Azure, and GCP with Kubernetes',\n                duration: '90 min',\n                level: 'Advanced',\n                thumbnail: '☁️',\n                tags: ['Cloud', 'Kubernetes', 'DevOps'],\n              },\n            ].map((tutorial, index) => (\n              <div\n                key={index}\n                className=\"bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow cursor-pointer group\"\n              >\n                <div className=\"text-4xl mb-4\">{tutorial.thumbnail}</div>\n\n                <h3 className=\"font-bold text-lg text-gray-900 mb-2 group-hover:text-blue-900 transition-colors\">\n                  {tutorial.title}\n                </h3>\n\n                <p className=\"text-gray-600 mb-4\">{tutorial.description}</p>\n\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {tutorial.tags.map((tag, tagIndex) => (\n                    <span\n                      key={tagIndex}\n                      className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <span className=\"flex items-center gap-1 text-sm text-gray-500\">\n                      <Clock className=\"w-4 h-4\" />\n                      {tutorial.duration}\n                    </span>\n                    <span\n                      className={`px-2 py-1 text-xs font-medium rounded-full ${getDifficultyColor(tutorial.level)}`}\n                    >\n                      {tutorial.level}\n                    </span>\n                  </div>\n                  <ArrowRight className=\"w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Community & Support */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Need Help?</h2>\n            <p className=\"text-xl text-gray-600 mb-12\">\n              Our community and support team are here to help you succeed\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"text-center p-6\">\n                <div className=\"bg-blue-100 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                  <Users className=\"w-8 h-8 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Community Forum</h3>\n                <p className=\"text-gray-600 mb-4\">Join thousands of developers in our community</p>\n                <button className=\"text-blue-600 font-medium hover:text-blue-700 transition-colors\">\n                  Join Forum →\n                </button>\n              </div>\n\n              <div className=\"text-center p-6\">\n                <div className=\"bg-green-100 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                  <GitBranch className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">GitHub Issues</h3>\n                <p className=\"text-gray-600 mb-4\">Report bugs and request features</p>\n                <button className=\"text-green-600 font-medium hover:text-green-700 transition-colors\">\n                  Open Issue →\n                </button>\n              </div>\n\n              <div className=\"text-center p-6\">\n                <div className=\"bg-purple-100 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                  <Webhook className=\"w-8 h-8 text-purple-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Enterprise Support</h3>\n                <p className=\"text-gray-600 mb-4\">24/7 support for enterprise customers</p>\n                <button className=\"text-purple-600 font-medium hover:text-purple-700 transition-colors\">\n                  Contact Support →\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start Building?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Follow our quick start guide and build your first workflow in minutes\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Play className=\"w-5 h-5\" />\n              Quick Start Guide\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <Video className=\"w-5 h-5\" />\n              Watch Video Tutorial\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Documentation;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 1,
        "end": 639,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 639,
          "column": 2,
          "position": 4869
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/documentation/Documentation.tsx",
        "start": 2,
        "end": 640,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 640,
          "column": 2,
          "position": 4882
        }
      }
    },
    {
      "format": "javascript",
      "lines": 160,
      "fragment": "={workflow.id}\n        className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300 mb-4 shadow-lg\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3\">\n              <h3 className=\"font-medium text-white\">{workflow.name}</h3>\n              <span\n                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                  workflow.status === 'active' || workflow.isActive\n                    ? 'bg-green-500/20 text-green-300 border border-green-500/30'\n                    : workflow.status === 'error'\n                      ? 'bg-red-500/20 text-red-300 border border-red-500/30'\n                      : 'bg-slate-500/20 text-slate-300 border border-slate-500/30'\n                }`}\n              >\n                {workflow.status === 'active' || workflow.isActive\n                  ? 'active'\n                  : workflow.status || 'inactive'}\n              </span>\n            </div>\n            <p className=\"text-sm text-slate-300 mt-1\">\n              {workflow.description || 'No description'}\n            </p>\n            <div className=\"flex items-center mt-2 space-x-4\">\n              <span className=\"text-xs text-slate-400\">{workflow.nodes?.length || 0} nodes</span>\n              <span className=\"text-xs text-slate-400\">\n                Updated{' '}\n                {workflow.updatedAt ? new Date(workflow.updatedAt).toLocaleDateString() : 'N/A'}\n              </span>\n              {workflow.lastRun && (\n                <span className=\"text-xs text-slate-400\">\n                  Last run {new Date(workflow.lastRun).toLocaleDateString()}\n                </span>\n              )}\n              {!workflow.lastRun && <span className=\"text-xs text-slate-400\">Never executed</span>}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Link\n              to={`/workflow/${workflow.id}`}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 text-sm shadow-lg\"\n            >\n              Edit\n            </Link>\n            <button\n              onClick={() => handleDeleteWorkflow(workflow.id, workflow.name)}\n              className=\"text-slate-400 hover:text-red-300 px-2 py-2 rounded hover:bg-red-500/20 transition-all duration-300 text-sm backdrop-blur-sm\"\n            >\n              🗑️\n            </button>\n          </div>\n        </div>\n      </div>\n    ),\n    [handleDeleteWorkflow]\n  );\n\n  const dashboardStats = [\n    { name: 'Total Workflows', value: workflows.length, icon: '🔄' },\n    {\n      name: 'Active Workflows',\n      value: workflows.filter((w) => w.isActive || w.status === 'active').length,\n      icon: '✅',\n    },\n    {\n      name: 'Total Executions',\n      value: statsLoading ? '...' : (stats?.totalExecutions ?? 0),\n      icon: '▶️',\n    },\n    {\n      name: 'Success Rate',\n      value: statsLoading\n        ? '...'\n        : stats?.successRate !== undefined\n          ? `${Math.round(stats.successRate)}%`\n          : stats?.totalExecutions && stats.totalExecutions > 0\n            ? `${Math.round(((stats.successfulExecutions || 0) / stats.totalExecutions) * 100)}%`\n            : 'N/A',\n      icon: '📈',\n    },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Workflows</h1>\n        <p className=\"text-slate-300\">Create and manage your automation workflows</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {dashboardStats.map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n                {statsLoading && <p className=\"text-xs text-slate-400 mt-1\">Loading...</p>}\n                {!statsLoading &&\n                  stats &&\n                  stat.name === 'Total Executions' &&\n                  stats.totalExecutions === 0 && (\n                    <p className=\"text-xs text-slate-400 mt-1\">No executions yet</p>\n                  )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Workflows */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6 border-b border-white/20\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-medium text-white\">Your Workflows</h2>\n            <button\n              onClick={handleCreateWorkflow}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading workflows...</p>\n            </div>\n          ) : workflows.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300 mb-4\">No workflows yet</p>\n              <button\n                onClick={handleCreateWorkflow}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n              >\n                Create Your First Workflow\n              </button>\n            </div>\n          ) : (\n            <VirtualizedList\n              items={workflows}\n              renderItem={renderWorkflowItem}\n              height={600} // Fixed height for virtualization\n              estimateSize={120} // Estimated height per workflow item\n              getItemKey={(workflow) => workflow.id}\n              gap={0}\n              className=\"workflow-list\"\n              emptyState={\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-300 mb-4\">No workflows found</p>\n                  <button\n                    onClick={handleCreateWorkflow}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 149,
        "end": 308,
        "startLoc": {
          "line": 149,
          "column": 4,
          "position": 1310
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 154,
        "end": 313,
        "startLoc": {
          "line": 154,
          "column": 4,
          "position": 1375
        },
        "endLoc": {
          "line": 313,
          "column": 2,
          "position": 2763
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "import type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useLeanWorkflowStore, WorkflowApiService } from '@/core';\nimport type { ExecutionStats } from '@/core/types/execution';\nimport type { Workflow } from '@/core/types/workflow';\nimport { VirtualizedList } from '@/design-system';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 6,
          "position": 115
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 114
        }
      }
    },
    {
      "format": "tsx",
      "lines": 316,
      "fragment": ";\n\nconst workflowApiService = new WorkflowApiService();\n\nconst Dashboard: React.FC = () => {\n  const navigate = useNavigate();\n  const {\n    createNewWorkflow,\n    deleteWorkflow,\n    isLoading,\n    shouldRefreshDashboard,\n    setShouldRefreshDashboard,\n  } = useLeanWorkflowStore();\n  const [workflows, setWorkflows] = useState<Workflow[]>([]);\n\n  const [stats, setStats] = useState<ExecutionStats | null>(null);\n  const [statsLoading, setStatsLoading] = useState(false);\n\n  const loadWorkflows = useCallback(async () => {\n    try {\n      const result = await workflowApiService.getWorkflows();\n\n      if (!result || !result.items || !Array.isArray(result.items)) {\n        setWorkflows([]);\n        return;\n      }\n\n      const workflowsWithDefaults = result.items.map((workflow) => ({\n        ...workflow,\n        connections: (workflow as any).connections || {},\n        createdAt: workflow.createdAt || new Date().toISOString(),\n        updatedAt: workflow.updatedAt || new Date().toISOString(),\n        status: (workflow.status === 'expired' ? 'draft' : workflow.status) || 'draft',\n        settings: workflow.settings\n          ? {\n              ...workflow.settings,\n              errorHandling:\n                workflow.settings.errorHandling === 'retry'\n                  ? 'stop'\n                  : workflow.settings.errorHandling,\n            }\n          : undefined,\n        nodes: workflow.nodes\n          ? workflow.nodes.map((node) => ({\n              ...node,\n              data: {\n                ...node.data,\n                label: node.data.label || node.id, // Ensure label is always present\n                credentials:\n                  typeof node.data.credentials === 'string'\n                    ? [node.data.credentials]\n                    : node.data.credentials,\n              },\n            }))\n          : [],\n      }));\n      setWorkflows(workflowsWithDefaults);\n    } catch (error) {\n      setWorkflows([]);\n\n      // Check if it's an authentication error\n      if (error instanceof Error && error.message.includes('token')) {\n        toast.error('Please log in to access your workflows');\n      } else {\n        toast.error('Failed to load workflows');\n      }\n    }\n  }, []); // Empty dependency array since this function doesn't depend on any props/state\n\n  const loadStats = useCallback(async () => {\n    setStatsLoading(true);\n    try {\n      const executionStats = await workflowApiService.getExecutionStats();\n      setStats(executionStats);\n    } catch (error) {\n      // Check if it's an authentication error\n      if (error instanceof Error && error.message.includes('token')) {\n        toast.error('Please log in to access execution statistics');\n      } else {\n        toast.error('Failed to load statistics');\n      }\n    } finally {\n      setStatsLoading(false);\n    }\n  }, []); // Empty dependency array since this function doesn't depend on any props/state\n\n  useEffect(() => {\n    loadWorkflows();\n    loadStats();\n  }, [loadStats, loadWorkflows]);\n\n  // Check for refresh flag when component mounts or refresh flag changes\n  useEffect(() => {\n    if (shouldRefreshDashboard) {\n      loadWorkflows();\n      loadStats();\n      setShouldRefreshDashboard(false);\n    }\n  }, [shouldRefreshDashboard, setShouldRefreshDashboard, loadStats, loadWorkflows]);\n\n  const handleCreateWorkflow = async () => {\n    const name = prompt('Enter workflow name:');\n    if (name) {\n      if (name.trim().length === 0) {\n        toast.error('Please enter a valid workflow name.');\n        return;\n      }\n\n      try {\n        await createNewWorkflow(name.trim(), navigate);\n        // Refresh the dashboard workflows list\n        await loadWorkflows();\n        toast.success('Workflow created successfully!');\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create workflow';\n        toast.error(errorMessage);\n      }\n    }\n  };\n\n  const handleDeleteWorkflow = async (workflowId: string, workflowName: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete \"${workflowName}\"? This action cannot be undone.`\n      )\n    ) {\n      try {\n        await deleteWorkflow(workflowId);\n        // Refresh the dashboard workflows list\n        await loadWorkflows();\n        toast.success('Workflow deleted successfully!');\n      } catch (_error) {\n        toast.error('Failed to delete workflow. Please try again.');\n      }\n    }\n  };\n\n  // Render function for workflow items in virtualized list\n  const renderWorkflowItem = useCallback(\n    (workflow: Workflow) => (\n      <div\n        key={workflow.id}\n        className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300 mb-4 shadow-lg\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3\">\n              <h3 className=\"font-medium text-white\">{workflow.name}</h3>\n              <span\n                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                  workflow.status === 'active' || workflow.isActive\n                    ? 'bg-green-500/20 text-green-300 border border-green-500/30'\n                    : workflow.status === 'error'\n                      ? 'bg-red-500/20 text-red-300 border border-red-500/30'\n                      : 'bg-slate-500/20 text-slate-300 border border-slate-500/30'\n                }`}\n              >\n                {workflow.status === 'active' || workflow.isActive\n                  ? 'active'\n                  : workflow.status || 'inactive'}\n              </span>\n            </div>\n            <p className=\"text-sm text-slate-300 mt-1\">\n              {workflow.description || 'No description'}\n            </p>\n            <div className=\"flex items-center mt-2 space-x-4\">\n              <span className=\"text-xs text-slate-400\">{workflow.nodes?.length || 0} nodes</span>\n              <span className=\"text-xs text-slate-400\">\n                Updated{' '}\n                {workflow.updatedAt ? new Date(workflow.updatedAt).toLocaleDateString() : 'N/A'}\n              </span>\n              {workflow.lastRun && (\n                <span className=\"text-xs text-slate-400\">\n                  Last run {new Date(workflow.lastRun).toLocaleDateString()}\n                </span>\n              )}\n              {!workflow.lastRun && <span className=\"text-xs text-slate-400\">Never executed</span>}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Link\n              to={`/workflow/${workflow.id}`}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 text-sm shadow-lg\"\n            >\n              Edit\n            </Link>\n            <button\n              onClick={() => handleDeleteWorkflow(workflow.id, workflow.name)}\n              className=\"text-slate-400 hover:text-red-300 px-2 py-2 rounded hover:bg-red-500/20 transition-all duration-300 text-sm backdrop-blur-sm\"\n            >\n              🗑️\n            </button>\n          </div>\n        </div>\n      </div>\n    ),\n    [handleDeleteWorkflow]\n  );\n\n  const dashboardStats = [\n    { name: 'Total Workflows', value: workflows.length, icon: '🔄' },\n    {\n      name: 'Active Workflows',\n      value: workflows.filter((w) => w.isActive || w.status === 'active').length,\n      icon: '✅',\n    },\n    {\n      name: 'Total Executions',\n      value: statsLoading ? '...' : (stats?.totalExecutions ?? 0),\n      icon: '▶️',\n    },\n    {\n      name: 'Success Rate',\n      value: statsLoading\n        ? '...'\n        : stats?.successRate !== undefined\n          ? `${Math.round(stats.successRate)}%`\n          : stats?.totalExecutions && stats.totalExecutions > 0\n            ? `${Math.round(((stats.successfulExecutions || 0) / stats.totalExecutions) * 100)}%`\n            : 'N/A',\n      icon: '📈',\n    },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Workflows</h1>\n        <p className=\"text-slate-300\">Create and manage your automation workflows</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {dashboardStats.map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n                {statsLoading && <p className=\"text-xs text-slate-400 mt-1\">Loading...</p>}\n                {!statsLoading &&\n                  stats &&\n                  stat.name === 'Total Executions' &&\n                  stats.totalExecutions === 0 && (\n                    <p className=\"text-xs text-slate-400 mt-1\">No executions yet</p>\n                  )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Workflows */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6 border-b border-white/20\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-medium text-white\">Your Workflows</h2>\n            <button\n              onClick={handleCreateWorkflow}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading workflows...</p>\n            </div>\n          ) : workflows.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300 mb-4\">No workflows yet</p>\n              <button\n                onClick={handleCreateWorkflow}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n              >\n                Create Your First Workflow\n              </button>\n            </div>\n          ) : (\n            <VirtualizedList\n              items={workflows}\n              renderItem={renderWorkflowItem}\n              height={600} // Fixed height for virtualization\n              estimateSize={120} // Estimated height per workflow item\n              getItemKey={(workflow) => workflow.id}\n              gap={0}\n              className=\"workflow-list\"\n              emptyState={\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-300 mb-4\">No workflows found</p>\n                  <button\n                    onClick={handleCreateWorkflow}\n                    className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n                  >\n                    Create Your First Workflow\n                  </button>\n                </div>\n              }\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 8,
        "end": 323,
        "startLoc": {
          "line": 8,
          "column": 18,
          "position": 112
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2766
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/dashboard/Dashboard.tsx",
        "start": 13,
        "end": 328,
        "startLoc": {
          "line": 13,
          "column": 19,
          "position": 177
        },
        "endLoc": {
          "line": 328,
          "column": 2,
          "position": 2831
        }
      }
    },
    {
      "format": "javascript",
      "lines": 263,
      "fragment": "={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'password':\n        return (\n          <input\n            type=\"password\"\n            value={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={Number(value)}\n            onChange={(e) => handleFieldChange(property.name, Number(e.target.value))}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'boolean':\n        return (\n          <div className=\"flex items-center\">\n            <input\n              aria-label=\"Select an option\"\n              type=\"checkbox\"\n              checked={Boolean(value)}\n              onChange={(e) => handleFieldChange(property.name, e.target.checked)}\n              className=\"h-4 w-4 text-blue-400 focus:ring-blue-400 bg-white/10 border-white/30 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-slate-300\">{property.description}</span>\n          </div>\n        );\n\n      case 'options':\n        return (\n          <select\n            aria-label=\"Select an option\"\n            value={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          >\n            {property.options?.map((option: any) => (\n              <option key={option.value} value={option.value} className=\"bg-slate-800 text-white\">\n                {option.name}\n              </option>\n            ))}\n          </select>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Credentials</h1>\n        <p className=\"text-slate-300\">Manage authentication credentials for your integrations</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">🔐</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Total Credentials</p>\n              <p className=\"text-2xl font-semibold text-white\">{credentials.length}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">✅</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Verified</p>\n              <p className=\"text-2xl font-semibold text-white\">\n                {credentials.filter((c) => c.isValid).length}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">🔗</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Types Available</p>\n              <p className=\"text-2xl font-semibold text-white\">{credentialTypes.length}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Existing Credentials */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6 border-b border-white/20\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-white\">Your Credentials</h2>\n            <button\n              onClick={() => setShowCreateForm(true)}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading credentials...</p>\n            </div>\n          ) : credentials.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300 mb-4\">No credentials configured</p>\n              <button\n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n              >\n                Create Your First Credential\n              </button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {credentials.map((credential) => {\n                const type = credentialTypes.find((t) => t.name === credential.type);\n                return (\n                  <div\n                    key={credential.id}\n                    className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-2xl\">{type?.icon || '🔐'}</span>\n                        <div>\n                          <h3 className=\"font-medium text-white\">{credential.name}</h3>\n                          <p className=\"text-sm text-slate-300\">{type?.displayName}</p>\n                        </div>\n                        {credential.isValid && (\n                          <span className=\"bg-green-500/20 text-green-300 border border-green-500/30 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                            Verified\n                          </span>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleTest(credential.id)}\n                          disabled={testingCredential === credential.id}\n                          className=\"text-blue-300 hover:text-blue-200 text-sm disabled:opacity-50 transition-colors\"\n                        >\n                          {testingCredential === credential.id ? 'Testing...' : 'Test'}\n                        </button>\n                        {credential.type !== 'gmailOAuth2' && (\n                          <button\n                            onClick={() => handleEdit(credential)}\n                            className=\"text-slate-300 hover:text-white text-sm transition-colors\"\n                          >\n                            Edit\n                          </button>\n                        )}\n                        {credential.type === 'gmailOAuth2' ||\n                        credential?.integration === 'gmailOAuth2' ? (\n                          <button\n                            onClick={() => handleRevokeGmail(credential.id, credential.name)}\n                            className=\"text-red-300 hover:text-red-200 text-sm font-medium transition-colors\"\n                          >\n                            🔐 Revoke Access\n                          </button>\n                        ) : (\n                          <button\n                            onClick={() => handleDelete(credential.id, credential.name)}\n                            className=\"text-red-300 hover:text-red-200 text-sm transition-colors\"\n                          >\n                            Delete\n                          </button>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"mt-2 text-xs text-slate-400\">\n                      Created: {new Date(credential.createdAt).toLocaleDateString()}\n                      {credential.lastTestedAt && (\n                        <span className=\"ml-4\">\n                          Last tested: {new Date(credential.lastTestedAt).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create/Edit Form Modal */}\n      {showCreateForm && selectedType && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 backdrop-blur-sm\">\n          <div className=\"bg-white/10 backdrop-blur-md border border-white/20 rounded-lg shadow-xl max-w-md w-full max-h-96 overflow-y-auto\">\n            <div className=\"p-6\">\n              <h2 className=\"text-lg font-semibold text-white mb-4\">\n                {editingCredential ? 'Edit' : 'Create'} {selectedType.displayName} Credential\n              </h2>\n\n              {/* Credential Name */}\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-slate-300 mb-1\">\n                  Credential Name\n                </label>\n                <input\n                  type=\"text\"\n                  value={credentialName}\n                  onChange={(e) => setCredentialName(e.target.value)}\n                  placeholder=\"e.g., Personal Gmail, Company SMTP\"\n                  className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                />\n              </div>\n\n              {/* Dynamic Fields */}\n              <div className=\"space-y-4\">\n                {selectedType.properties?.map((property) => (\n                  <div key={property.name}>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-1\">\n                      {property.displayName}\n                      {property.required && <span className=\"text-red-400 ml-1\">*</span>}\n                    </label>\n                    {renderField(property)}\n                    {property.description && (\n                      <p className=\"text-xs text-slate-400 mt-1\">{property.description}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex space-x-3 mt-6\">\n                <button\n                  onClick={handleSave}\n                  disabled={!credentialName.trim()}\n                  className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white py-2 px-4 rounded-lg hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 shadow-lg\"\n                >\n                  {selectedType.name === 'gmailOAuth2' && !editingCredential\n                    ? 'Connect with Google'\n                    : editingCredential\n                      ? 'Update'\n                      : 'Create'}{' '}\n                  Credential\n                </button>\n                <button\n                  onClick={() => setShowCreateForm(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx",
        "start": 144,
        "end": 406,
        "startLoc": {
          "line": 144,
          "column": 6,
          "position": 1296
        },
        "endLoc": {
          "line": 406,
          "column": 2,
          "position": 3448
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/credentials/Credentials.tsx",
        "start": 147,
        "end": 409,
        "startLoc": {
          "line": 147,
          "column": 6,
          "position": 1335
        },
        "endLoc": {
          "line": 409,
          "column": 2,
          "position": 3487
        }
      }
    },
    {
      "format": "tsx",
      "lines": 415,
      "fragment": ";\n\nconst credentialApiService = new CredentialApiService();\n\nconst Credentials: React.FC = () => {\n  const {\n    credentials,\n    isLoading,\n    testingCredential,\n    loadCredentials,\n    createCredential,\n    updateCredential,\n    deleteCredential,\n    revokeGmailCredential,\n    testCredential,\n    loadCredentialTypes, // New action to load types\n    credentialTypes, // Get types from store\n  } = useCredentialStore();\n\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedType, setSelectedType] = useState<CredentialTypeDefinition | null>(null);\n  const [editingCredential, setEditingCredential] = useState<Credential | null>(null);\n  const [formData, setFormData] = useState<Record<string, unknown>>({});\n  const [credentialName, setCredentialName] = useState('');\n\n  useEffect(() => {\n    loadCredentials();\n    loadCredentialTypes(); // Load credential types on mount\n  }, [loadCredentials, loadCredentialTypes]);\n\n  // Handle OAuth callback results\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const credentialStatus = urlParams.get('credential');\n    const credentialId = urlParams.get('id');\n    const credentialName = urlParams.get('name');\n    const errorMessage = urlParams.get('message');\n\n    if (credentialStatus === 'success' && credentialId && credentialName) {\n      alert(`Gmail credential \"${decodeURIComponent(credentialName)}\" created successfully!`);\n      // Reload credentials to show the new one\n      loadCredentials();\n      // Clean up URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (credentialStatus === 'error') {\n      alert(`OAuth error: ${errorMessage ? decodeURIComponent(errorMessage) : 'Unknown error'}`);\n      // Clean up URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  }, [\n    // Reload credentials to show the new one\n    loadCredentials,\n  ]);\n\n  const handleEdit = (credential: Credential) => {\n    const type = credentialTypes.find((t) => t.name === credential.type);\n    if (!type) return;\n\n    setSelectedType(type);\n    setFormData(credential.data || {});\n    setCredentialName(credential.name);\n    setEditingCredential(credential);\n    setShowCreateForm(true);\n  };\n\n  const handleSave = async () => {\n    if (!selectedType || !credentialName.trim()) return;\n\n    try {\n      // Handle Gmail OAuth2 differently - initiate OAuth flow\n      if (selectedType.name === 'gmailOAuth2' && !editingCredential) {\n        // Start OAuth flow - this will redirect the user to Google\n        // No client ID/secret needed - using app's shared OAuth credentials\n        await credentialApiService.startGmailOAuthFlow(credentialName);\n        return; // No need to continue as user is being redirected\n      }\n\n      // Handle other credential types normally\n      if (editingCredential) {\n        await updateCredential(editingCredential.id, formData);\n      } else {\n        await createCredential(credentialName, selectedType.name, formData);\n      }\n\n      setShowCreateForm(false);\n      setSelectedType(null);\n      setFormData({});\n      setCredentialName('');\n      setEditingCredential(null);\n    } catch (error: any) {\n      alert(error.message || 'Failed to save credential');\n    }\n  };\n\n  const handleTest = async (credentialId: string) => {\n    const result = await testCredential(credentialId);\n    // Show result in a toast or modal\n    alert(result.message);\n  };\n\n  const handleDelete = async (credentialId: string, credentialName: string) => {\n    if (confirm(`Are you sure you want to delete the credential \"${credentialName}\"?`)) {\n      try {\n        await deleteCredential(credentialId);\n        alert('Credential deleted successfully');\n      } catch (error: any) {\n        alert(error.message || 'Failed to delete credential');\n      }\n    }\n  };\n\n  const handleRevokeGmail = async (credentialId: string, credentialName: string) => {\n    if (\n      confirm(\n        `Are you sure you want to revoke Gmail access for \"${credentialName}\"? This will also delete the credential and cannot be undone.`\n      )\n    ) {\n      try {\n        await revokeGmailCredential(credentialId);\n        alert('Gmail access revoked and credential deleted successfully');\n      } catch (error: any) {\n        alert(error.message || 'Failed to revoke Gmail access');\n      }\n    }\n  };\n\n  const handleFieldChange = (fieldName: string, value: unknown) => {\n    setFormData((prev) => ({ ...prev, [fieldName]: value }));\n  };\n\n  const renderField = (property: any) => {\n    const value = formData[property.name] ?? property.default ?? '';\n\n    switch (property.type) {\n      case 'string':\n        return (\n          <input\n            type=\"text\"\n            value={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'password':\n        return (\n          <input\n            type=\"password\"\n            value={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={Number(value)}\n            onChange={(e) => handleFieldChange(property.name, Number(e.target.value))}\n            placeholder={property.placeholder}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          />\n        );\n\n      case 'boolean':\n        return (\n          <div className=\"flex items-center\">\n            <input\n              aria-label=\"Select an option\"\n              type=\"checkbox\"\n              checked={Boolean(value)}\n              onChange={(e) => handleFieldChange(property.name, e.target.checked)}\n              className=\"h-4 w-4 text-blue-400 focus:ring-blue-400 bg-white/10 border-white/30 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-slate-300\">{property.description}</span>\n          </div>\n        );\n\n      case 'options':\n        return (\n          <select\n            aria-label=\"Select an option\"\n            value={String(value)}\n            onChange={(e) => handleFieldChange(property.name, e.target.value)}\n            className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n          >\n            {property.options?.map((option: any) => (\n              <option key={option.value} value={option.value} className=\"bg-slate-800 text-white\">\n                {option.name}\n              </option>\n            ))}\n          </select>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Credentials</h1>\n        <p className=\"text-slate-300\">Manage authentication credentials for your integrations</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">🔐</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Total Credentials</p>\n              <p className=\"text-2xl font-semibold text-white\">{credentials.length}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">✅</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Verified</p>\n              <p className=\"text-2xl font-semibold text-white\">\n                {credentials.filter((c) => c.isValid).length}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl mr-4\">🔗</div>\n            <div>\n              <p className=\"text-sm font-medium text-slate-300\">Types Available</p>\n              <p className=\"text-2xl font-semibold text-white\">{credentialTypes.length}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Existing Credentials */}\n      <div className=\"bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-lg\">\n        <div className=\"p-6 border-b border-white/20\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-white\">Your Credentials</h2>\n            <button\n              onClick={() => setShowCreateForm(true)}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading credentials...</p>\n            </div>\n          ) : credentials.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-300 mb-4\">No credentials configured</p>\n              <button\n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n              >\n                Create Your First Credential\n              </button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {credentials.map((credential) => {\n                const type = credentialTypes.find((t) => t.name === credential.type);\n                return (\n                  <div\n                    key={credential.id}\n                    className=\"bg-white/5 backdrop-blur-sm border border-white/20 rounded-lg p-4 hover:bg-white/10 transition-all duration-300\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-2xl\">{type?.icon || '🔐'}</span>\n                        <div>\n                          <h3 className=\"font-medium text-white\">{credential.name}</h3>\n                          <p className=\"text-sm text-slate-300\">{type?.displayName}</p>\n                        </div>\n                        {credential.isValid && (\n                          <span className=\"bg-green-500/20 text-green-300 border border-green-500/30 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                            Verified\n                          </span>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleTest(credential.id)}\n                          disabled={testingCredential === credential.id}\n                          className=\"text-blue-300 hover:text-blue-200 text-sm disabled:opacity-50 transition-colors\"\n                        >\n                          {testingCredential === credential.id ? 'Testing...' : 'Test'}\n                        </button>\n                        {credential.type !== 'gmailOAuth2' && (\n                          <button\n                            onClick={() => handleEdit(credential)}\n                            className=\"text-slate-300 hover:text-white text-sm transition-colors\"\n                          >\n                            Edit\n                          </button>\n                        )}\n                        {credential.type === 'gmailOAuth2' ||\n                        credential?.integration === 'gmailOAuth2' ? (\n                          <button\n                            onClick={() => handleRevokeGmail(credential.id, credential.name)}\n                            className=\"text-red-300 hover:text-red-200 text-sm font-medium transition-colors\"\n                          >\n                            🔐 Revoke Access\n                          </button>\n                        ) : (\n                          <button\n                            onClick={() => handleDelete(credential.id, credential.name)}\n                            className=\"text-red-300 hover:text-red-200 text-sm transition-colors\"\n                          >\n                            Delete\n                          </button>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"mt-2 text-xs text-slate-400\">\n                      Created: {new Date(credential.createdAt).toLocaleDateString()}\n                      {credential.lastTestedAt && (\n                        <span className=\"ml-4\">\n                          Last tested: {new Date(credential.lastTestedAt).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create/Edit Form Modal */}\n      {showCreateForm && selectedType && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 backdrop-blur-sm\">\n          <div className=\"bg-white/10 backdrop-blur-md border border-white/20 rounded-lg shadow-xl max-w-md w-full max-h-96 overflow-y-auto\">\n            <div className=\"p-6\">\n              <h2 className=\"text-lg font-semibold text-white mb-4\">\n                {editingCredential ? 'Edit' : 'Create'} {selectedType.displayName} Credential\n              </h2>\n\n              {/* Credential Name */}\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-slate-300 mb-1\">\n                  Credential Name\n                </label>\n                <input\n                  type=\"text\"\n                  value={credentialName}\n                  onChange={(e) => setCredentialName(e.target.value)}\n                  placeholder=\"e.g., Personal Gmail, Company SMTP\"\n                  className=\"w-full px-3 py-2 bg-white/10 border border-white/30 text-white placeholder-slate-400 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 backdrop-blur-sm\"\n                />\n              </div>\n\n              {/* Dynamic Fields */}\n              <div className=\"space-y-4\">\n                {selectedType.properties?.map((property) => (\n                  <div key={property.name}>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-1\">\n                      {property.displayName}\n                      {property.required && <span className=\"text-red-400 ml-1\">*</span>}\n                    </label>\n                    {renderField(property)}\n                    {property.description && (\n                      <p className=\"text-xs text-slate-400 mt-1\">{property.description}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex space-x-3 mt-6\">\n                <button\n                  onClick={handleSave}\n                  disabled={!credentialName.trim()}\n                  className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white py-2 px-4 rounded-lg hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 shadow-lg\"\n                >\n                  {selectedType.name === 'gmailOAuth2' && !editingCredential\n                    ? 'Connect with Google'\n                    : editingCredential\n                      ? 'Update'\n                      : 'Create'}{' '}\n                  Credential\n                </button>\n                <button\n                  onClick={() => setShowCreateForm(false)}\n                  className=\"flex-1 bg-white/20 text-slate-300 py-2 px-4 rounded-lg hover:bg-white/30 hover:text-white transition-all duration-300 backdrop-blur-sm\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Credentials;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx",
        "start": 6,
        "end": 420,
        "startLoc": {
          "line": 6,
          "column": 32,
          "position": 71
        },
        "endLoc": {
          "line": 420,
          "column": 2,
          "position": 3508
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/credentials/Credentials.tsx",
        "start": 9,
        "end": 423,
        "startLoc": {
          "line": 9,
          "column": 19,
          "position": 110
        },
        "endLoc": {
          "line": 423,
          "column": 2,
          "position": 3547
        }
      }
    },
    {
      "format": "javascript",
      "lines": 302,
      "fragment": "={index}\n                    className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className={`bg-${method.color}-100 p-3 rounded-lg w-fit mb-4`}>\n                      <Icon className={`w-8 h-8 text-${method.color}-600`} />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{method.type}</h3>\n                    <p className=\"text-gray-600 mb-6\">{method.description}</p>\n\n                    <div className=\"space-y-3\">\n                      {method.methods.map((contact, contactIndex) => {\n                        const ContactIcon = contact.icon;\n                        return (\n                          <div key={contactIndex} className=\"flex items-center gap-3\">\n                            <ContactIcon className=\"w-5 h-5 text-gray-400\" />\n                            <span className=\"text-gray-700\">{contact.value}</span>\n                            {contact.type === 'email' && (\n                              <ExternalLink className=\"w-4 h-4 text-gray-400\" />\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Send Us a Message</h2>\n              <p className=\"text-xl text-gray-600\">\n                Fill out the form below and we'll get back to you within 24 hours\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-2xl shadow-xl p-8\">\n              {isSubmitted ? (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Thank You!</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Your message has been sent successfully. We'll get back to you soon.\n                  </p>\n                  <div className=\"text-sm text-gray-500\">Redirecting to home page...</div>\n                </div>\n              ) : (\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Inquiry Type */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                      What can we help you with?\n                    </label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {inquiryTypes.map((type) => {\n                        const Icon = type.icon;\n                        return (\n                          <label\n                            key={type.value}\n                            className={`relative flex items-center gap-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                              formData.inquiry === type.value\n                                ? 'border-blue-500 bg-blue-50'\n                                : 'border-gray-200 hover:border-gray-300'\n                            }`}\n                          >\n                            <input\n                              type=\"radio\"\n                              name=\"inquiry\"\n                              value={type.value}\n                              checked={formData.inquiry === type.value}\n                              onChange={handleInputChange}\n                              className=\"sr-only\"\n                            />\n                            <Icon className=\"w-5 h-5 text-gray-600\" />\n                            <span className=\"text-sm font-medium text-gray-700\">{type.label}</span>\n                          </label>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Name and Email */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label\n                        htmlFor=\"name\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Full Name *\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"John Doe\"\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor=\"email\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Email Address *\n                      </label>\n                      <input\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"john@company.com\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Company and Role */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label\n                        htmlFor=\"company\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Company\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"company\"\n                        name=\"company\"\n                        value={formData.company}\n                        onChange={handleInputChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Your Company\"\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor=\"role\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Role\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"role\"\n                        name=\"role\"\n                        value={formData.role}\n                        onChange={handleInputChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Software Engineer\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Subject */}\n                  <div>\n                    <label\n                      htmlFor=\"subject\"\n                      className=\"block text-sm font-medium text-gray-700 mb-2\"\n                    >\n                      Subject *\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"subject\"\n                      name=\"subject\"\n                      value={formData.subject}\n                      onChange={handleInputChange}\n                      required\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"How can we help you?\"\n                    />\n                  </div>\n\n                  {/* Message */}\n                  <div>\n                    <label\n                      htmlFor=\"message\"\n                      className=\"block text-sm font-medium text-gray-700 mb-2\"\n                    >\n                      Message *\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleInputChange}\n                      required\n                      rows={6}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"Tell us more about your needs, use case, or question...\"\n                    />\n                  </div>\n\n                  {/* Newsletter Checkbox */}\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"newsletter\"\n                      name=\"newsletter\"\n                      checked={formData.newsletter}\n                      onChange={handleInputChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"newsletter\" className=\"ml-3 text-sm text-gray-600\">\n                      Subscribe to our newsletter for product updates and automation tips\n                    </label>\n                  </div>\n\n                  {/* Submit Button */}\n                  <div className=\"pt-4\">\n                    <button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-8 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-colors flex items-center justify-center gap-2\"\n                    >\n                      <Send className=\"w-5 h-5\" />\n                      Send Message\n                    </button>\n                  </div>\n                </form>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Office Locations */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Offices</h2>\n              <p className=\"text-xl text-gray-600\">Visit us around the world</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {offices.map((office, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"text-center mb-6\">\n                    <div className=\"text-4xl mb-2\">{office.flag}</div>\n                    <h3 className=\"text-xl font-bold text-gray-900\">\n                      {office.city}, {office.country}\n                    </h3>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"w-5 h-5 text-gray-400 mt-0.5\" />\n                      <div>\n                        <div className=\"text-gray-900 font-medium\">{office.address}</div>\n                        <div className=\"text-gray-600 text-sm\">{office.postal}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.phone}</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.email}</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Clock className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.hours}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Frequently Asked Questions</h2>\n              <p className=\"text-xl text-gray-600\">Quick answers to common questions</p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {faqs.map((faq, index) => (\n                <div key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx",
        "start": 254,
        "end": 555,
        "startLoc": {
          "line": 254,
          "column": 4,
          "position": 2036
        },
        "endLoc": {
          "line": 555,
          "column": 2,
          "position": 4208
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx",
        "start": 255,
        "end": 556,
        "startLoc": {
          "line": 255,
          "column": 4,
          "position": 2049
        },
        "endLoc": {
          "line": 556,
          "column": 2,
          "position": 4221
        }
      }
    },
    {
      "format": "tsx",
      "lines": 600,
      "fragment": "/**\n * Contact Page\n *\n * Contact information and forms for Reporunner\n * Sales, support, and general inquiries\n */\n\nimport {\n  Briefcase,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Code,\n  ExternalLink,\n  Globe,\n  Heart,\n  HelpCircle,\n  Mail,\n  MapPin,\n  MessageSquare,\n  Phone,\n  Send,\n  Shield,\n  Users,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const Contact: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    company: '',\n    role: '',\n    inquiry: 'general',\n    subject: '',\n    message: '',\n    newsletter: false,\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const inquiryTypes = [\n    { value: 'sales', label: 'Sales Inquiry', icon: Briefcase },\n    { value: 'support', label: 'Technical Support', icon: HelpCircle },\n    { value: 'partnership', label: 'Partnership', icon: Users },\n    { value: 'general', label: 'General Question', icon: MessageSquare },\n    { value: 'press', label: 'Press & Media', icon: Globe },\n    { value: 'careers', label: 'Careers', icon: Heart },\n  ];\n\n  const contactMethods = [\n    {\n      type: 'Sales',\n      description: 'Speak with our sales team about enterprise solutions',\n      icon: Briefcase,\n      color: 'blue',\n      methods: [\n        { type: 'email', value: 'sales@reporunner.dev', icon: Mail },\n        { type: 'phone', value: '+1 (555) 123-4567', icon: Phone },\n        { type: 'calendar', value: 'Schedule a demo', icon: Calendar },\n      ],\n    },\n    {\n      type: 'Support',\n      description: 'Get help with technical issues and questions',\n      icon: HelpCircle,\n      color: 'green',\n      methods: [\n        { type: 'email', value: 'support@reporunner.dev', icon: Mail },\n        { type: 'docs', value: 'Documentation', icon: Code },\n        { type: 'community', value: 'Community Forum', icon: Users },\n      ],\n    },\n    {\n      type: 'General',\n      description: 'General inquiries and information',\n      icon: MessageSquare,\n      color: 'purple',\n      methods: [\n        { type: 'email', value: 'hello@reporunner.dev', icon: Mail },\n        { type: 'address', value: 'San Francisco, CA', icon: MapPin },\n        { type: 'social', value: 'Follow us', icon: Globe },\n      ],\n    },\n  ];\n\n  const offices = [\n    {\n      city: 'San Francisco',\n      country: 'United States',\n      flag: '🇺🇸',\n      address: '123 Market Street, Suite 300',\n      postal: 'San Francisco, CA 94105',\n      phone: '+1 (555) 123-4567',\n      email: 'us@reporunner.dev',\n      hours: '9 AM - 6 PM PST',\n    },\n    {\n      city: 'London',\n      country: 'United Kingdom',\n      flag: '🇬🇧',\n      address: '10 Downing Street, Floor 5',\n      postal: 'London SW1A 2AA',\n      phone: '+44 20 7946 0958',\n      email: 'uk@reporunner.dev',\n      hours: '9 AM - 6 PM GMT',\n    },\n    {\n      city: 'Singapore',\n      country: 'Singapore',\n      flag: '🇸🇬',\n      address: '1 Raffles Place, Level 20',\n      postal: 'Singapore 048616',\n      phone: '+65 6123 4567',\n      email: 'sg@reporunner.dev',\n      hours: '9 AM - 6 PM SGT',\n    },\n  ];\n\n  const faqs = [\n    {\n      question: 'How can I get started with Reporunner?',\n      answer:\n        'You can start with our free community edition or request a demo for enterprise features. Our quick start guide helps you deploy in minutes.',\n    },\n    {\n      question: 'Do you offer professional services?',\n      answer:\n        'Yes, we provide migration services, custom development, training, and ongoing support for enterprise customers.',\n    },\n    {\n      question: \"What's your response time for support?\",\n      answer:\n        'Community support is best-effort. Professional customers get 24-hour response, and Enterprise customers get 1-hour response for critical issues.',\n    },\n    {\n      question: 'Can I schedule a demo?',\n      answer:\n        'Absolutely! You can book a personalized demo with our team to see how Reporunner fits your specific use case.',\n    },\n  ];\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => {\n    const { name, value, type } = e.target;\n    if (type === 'checkbox') {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: (e.target as HTMLInputElement).checked,\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitted(true);\n\n    // Reset form after 3 seconds\n    setTimeout(() => {\n      setIsSubmitted(false);\n      setFormData({\n        name: '',\n        email: '',\n        company: '',\n        role: '',\n        inquiry: 'general',\n        subject: '',\n        message: '',\n        newsletter: false,\n      });\n    }, 3000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Get in{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Touch\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Ready to transform your workflow automation? Our team is here to help you get started,\n              answer questions, or discuss enterprise solutions.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Schedule Demo\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <MessageSquare className=\"w-5 h-5\" />\n                Start Chat\n              </button>\n            </div>\n\n            {/* Response Times */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20\">\n                <Clock className=\"w-8 h-8 text-green-300 mx-auto mb-2\" />\n                <div className=\"text-lg font-semibold text-white\">Sales</div>\n                <div className=\"text-sm text-slate-300\">&lt; 2 hours response</div>\n              </div>\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20\">\n                <Shield className=\"w-8 h-8 text-blue-300 mx-auto mb-2\" />\n                <div className=\"text-lg font-semibold text-white\">Support</div>\n                <div className=\"text-sm text-slate-300\">&lt; 24 hours response</div>\n              </div>\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20\">\n                <Zap className=\"w-8 h-8 text-purple-300 mx-auto mb-2\" />\n                <div className=\"text-lg font-semibold text-white\">Enterprise</div>\n                <div className=\"text-sm text-slate-300\">&lt; 1 hour response</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Methods */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">How Can We Help?</h2>\n              <p className=\"text-xl text-gray-600\">\n                Choose the best way to reach us based on your needs\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {contactMethods.map((method, index) => {\n                const Icon = method.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className={`bg-${method.color}-100 p-3 rounded-lg w-fit mb-4`}>\n                      <Icon className={`w-8 h-8 text-${method.color}-600`} />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{method.type}</h3>\n                    <p className=\"text-gray-600 mb-6\">{method.description}</p>\n\n                    <div className=\"space-y-3\">\n                      {method.methods.map((contact, contactIndex) => {\n                        const ContactIcon = contact.icon;\n                        return (\n                          <div key={contactIndex} className=\"flex items-center gap-3\">\n                            <ContactIcon className=\"w-5 h-5 text-gray-400\" />\n                            <span className=\"text-gray-700\">{contact.value}</span>\n                            {contact.type === 'email' && (\n                              <ExternalLink className=\"w-4 h-4 text-gray-400\" />\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Send Us a Message</h2>\n              <p className=\"text-xl text-gray-600\">\n                Fill out the form below and we'll get back to you within 24 hours\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-2xl shadow-xl p-8\">\n              {isSubmitted ? (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Thank You!</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Your message has been sent successfully. We'll get back to you soon.\n                  </p>\n                  <div className=\"text-sm text-gray-500\">Redirecting to home page...</div>\n                </div>\n              ) : (\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Inquiry Type */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                      What can we help you with?\n                    </label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {inquiryTypes.map((type) => {\n                        const Icon = type.icon;\n                        return (\n                          <label\n                            key={type.value}\n                            className={`relative flex items-center gap-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                              formData.inquiry === type.value\n                                ? 'border-blue-500 bg-blue-50'\n                                : 'border-gray-200 hover:border-gray-300'\n                            }`}\n                          >\n                            <input\n                              type=\"radio\"\n                              name=\"inquiry\"\n                              value={type.value}\n                              checked={formData.inquiry === type.value}\n                              onChange={handleInputChange}\n                              className=\"sr-only\"\n                            />\n                            <Icon className=\"w-5 h-5 text-gray-600\" />\n                            <span className=\"text-sm font-medium text-gray-700\">{type.label}</span>\n                          </label>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Name and Email */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label\n                        htmlFor=\"name\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Full Name *\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"John Doe\"\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor=\"email\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Email Address *\n                      </label>\n                      <input\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"john@company.com\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Company and Role */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label\n                        htmlFor=\"company\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Company\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"company\"\n                        name=\"company\"\n                        value={formData.company}\n                        onChange={handleInputChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Your Company\"\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor=\"role\"\n                        className=\"block text-sm font-medium text-gray-700 mb-2\"\n                      >\n                        Role\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"role\"\n                        name=\"role\"\n                        value={formData.role}\n                        onChange={handleInputChange}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Software Engineer\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Subject */}\n                  <div>\n                    <label\n                      htmlFor=\"subject\"\n                      className=\"block text-sm font-medium text-gray-700 mb-2\"\n                    >\n                      Subject *\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"subject\"\n                      name=\"subject\"\n                      value={formData.subject}\n                      onChange={handleInputChange}\n                      required\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"How can we help you?\"\n                    />\n                  </div>\n\n                  {/* Message */}\n                  <div>\n                    <label\n                      htmlFor=\"message\"\n                      className=\"block text-sm font-medium text-gray-700 mb-2\"\n                    >\n                      Message *\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleInputChange}\n                      required\n                      rows={6}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"Tell us more about your needs, use case, or question...\"\n                    />\n                  </div>\n\n                  {/* Newsletter Checkbox */}\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"newsletter\"\n                      name=\"newsletter\"\n                      checked={formData.newsletter}\n                      onChange={handleInputChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"newsletter\" className=\"ml-3 text-sm text-gray-600\">\n                      Subscribe to our newsletter for product updates and automation tips\n                    </label>\n                  </div>\n\n                  {/* Submit Button */}\n                  <div className=\"pt-4\">\n                    <button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-8 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-colors flex items-center justify-center gap-2\"\n                    >\n                      <Send className=\"w-5 h-5\" />\n                      Send Message\n                    </button>\n                  </div>\n                </form>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Office Locations */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Offices</h2>\n              <p className=\"text-xl text-gray-600\">Visit us around the world</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {offices.map((office, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"text-center mb-6\">\n                    <div className=\"text-4xl mb-2\">{office.flag}</div>\n                    <h3 className=\"text-xl font-bold text-gray-900\">\n                      {office.city}, {office.country}\n                    </h3>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"w-5 h-5 text-gray-400 mt-0.5\" />\n                      <div>\n                        <div className=\"text-gray-900 font-medium\">{office.address}</div>\n                        <div className=\"text-gray-600 text-sm\">{office.postal}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.phone}</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.email}</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Clock className=\"w-5 h-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{office.hours}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Frequently Asked Questions</h2>\n              <p className=\"text-xl text-gray-600\">Quick answers to common questions</p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {faqs.map((faq, index) => (\n                <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">{faq.question}</h3>\n                  <p className=\"text-gray-600\">{faq.answer}</p>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"text-center mt-12\">\n              <p className=\"text-gray-600 mb-4\">Still have questions?</p>\n              <button className=\"text-blue-600 font-medium hover:text-blue-700 transition-colors\">\n                View all FAQs →\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Don't wait - start building powerful workflows today with our free tier or schedule a\n            demo to see enterprise features.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Zap className=\"w-5 h-5\" />\n              Start Free Trial\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <Calendar className=\"w-5 h-5\" />\n              Schedule Demo\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Contact;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx",
        "start": 1,
        "end": 600,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 600,
          "column": 2,
          "position": 4581
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/contact/Contact.tsx",
        "start": 2,
        "end": 601,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 601,
          "column": 2,
          "position": 4594
        }
      }
    },
    {
      "format": "tsx",
      "lines": 525,
      "fragment": "/**\n * About Page\n *\n * Company information, team, mission, and values for Reporunner\n */\n\nimport {\n  Award,\n  Brain,\n  CheckCircle,\n  Code,\n  Github,\n  Globe,\n  Heart,\n  Linkedin,\n  Mail,\n  Rocket,\n  Shield,\n  Target,\n  Twitter,\n  Users,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const About: React.FC = () => {\n  const team = [\n    {\n      name: 'Alex Chen',\n      role: 'CEO & Co-Founder',\n      bio: 'Former VP of Engineering at Zapier. 10+ years building automation platforms.',\n      image: '👨‍💼',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n    {\n      name: 'Sarah Rodriguez',\n      role: 'CTO & Co-Founder',\n      bio: 'Ex-Google Cloud architect. Expert in distributed systems and AI infrastructure.',\n      image: '👩‍💻',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n    {\n      name: 'David Kim',\n      role: 'VP of Engineering',\n      bio: 'Former principal engineer at n8n. Passionate about developer experience.',\n      image: '👨‍🔬',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n    {\n      name: 'Emily Watson',\n      role: 'Head of Product',\n      bio: 'Product leader from Make.com. Focused on user-centric automation tools.',\n      image: '👩‍🎨',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n    {\n      name: 'Michael Zhang',\n      role: 'Head of AI',\n      bio: 'Former OpenAI researcher. Leading our AI and ML automation initiatives.',\n      image: '🧑‍🔬',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n    {\n      name: 'Lisa Johnson',\n      role: 'VP of Enterprise',\n      bio: 'Enterprise sales veteran from Salesforce. Helping enterprises scale automation.',\n      image: '👩‍💼',\n      linkedin: '#',\n      twitter: '#',\n      github: '#',\n    },\n  ];\n\n  const values = [\n    {\n      icon: Shield,\n      title: 'Privacy First',\n      description:\n        'Your data belongs to you. We build tools that respect privacy and give you complete control over your information.',\n    },\n    {\n      icon: Code,\n      title: 'Open Source',\n      description:\n        'Transparency and collaboration drive innovation. Our core platform is open source and community-driven.',\n    },\n    {\n      icon: Zap,\n      title: 'Developer Experience',\n      description:\n        \"We're developers building for developers. Every feature is designed with developer productivity in mind.\",\n    },\n    {\n      icon: Globe,\n      title: 'Global Scale',\n      description:\n        'Built for the world. Our platform supports global deployments with data residency and compliance.',\n    },\n    {\n      icon: Brain,\n      title: 'AI-Powered',\n      description:\n        'Intelligence at every layer. We leverage AI to make automation smarter, not just automated.',\n    },\n    {\n      icon: Heart,\n      title: 'Community Driven',\n      description:\n        'Our community shapes our roadmap. We build what matters most to the people who use our platform.',\n    },\n  ];\n\n  const milestones = [\n    {\n      year: '2023',\n      title: 'Founded',\n      description:\n        'Reporunner was founded by ex-Zapier and Google engineers with a vision for enterprise-grade workflow automation.',\n    },\n    {\n      year: '2023',\n      title: 'Seed Funding',\n      description:\n        '$5M seed round led by Andreessen Horowitz to build the next generation of workflow automation.',\n    },\n    {\n      year: '2024',\n      title: 'Platform Launch',\n      description:\n        'Launched our self-hosted platform with AI capabilities and hybrid database architecture.',\n    },\n    {\n      year: '2024',\n      title: 'Enterprise Adoption',\n      description:\n        '100+ enterprise customers adopted Reporunner for mission-critical workflow automation.',\n    },\n    {\n      year: '2025',\n      title: 'Global Expansion',\n      description:\n        'Expanded to serve customers across 50+ countries with localized compliance and data residency.',\n    },\n    {\n      year: 'Future',\n      title: 'AI-Native Platform',\n      description:\n        'Building towards a fully AI-native automation platform that understands and optimizes workflows automatically.',\n    },\n  ];\n\n  const stats = [\n    { metric: '100K+', label: 'Workflows Created' },\n    { metric: '50M+', label: 'Executions Per Month' },\n    { metric: '500+', label: 'Enterprise Customers' },\n    { metric: '150+', label: 'Integrations' },\n    { metric: '99.9%', label: 'Uptime SLA' },\n    { metric: '40+', label: 'Team Members' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Building the{' '}\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Future\n              </span>\n              <br />\n              of Automation\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              We're on a mission to democratize workflow automation with enterprise-grade security,\n              AI-powered intelligence, and complete data sovereignty.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Join Our Team\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                Contact Us\n              </button>\n            </div>\n\n            {/* Company Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-6 gap-8\">\n              {stats.map((stat, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className=\"text-2xl md:text-3xl font-bold text-blue-300 mb-2\">\n                    {stat.metric}\n                  </div>\n                  <div className=\"text-sm text-slate-300\">{stat.label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mission Statement */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"bg-gradient-to-r from-blue-100 to-purple-100 rounded-2xl p-12\">\n              <Target className=\"w-16 h-16 text-blue-600 mx-auto mb-6\" />\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Mission</h2>\n              <p className=\"text-xl text-gray-700 leading-relaxed\">\n                \"To empower every organization with intelligent, secure, and self-hosted workflow\n                automation that scales from startup to enterprise without compromising on data\n                sovereignty or security.\"\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Company Values */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Values</h2>\n              <p className=\"text-xl text-gray-600\">The principles that guide everything we do</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {values.map((value, index) => {\n                const Icon = value.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"bg-white border border-gray-200 rounded-xl p-6 hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"bg-blue-100 p-3 rounded-lg w-fit mb-4\">\n                      <Icon className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-3\">{value.title}</h3>\n                    <p className=\"text-gray-600 leading-relaxed\">{value.description}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Timeline */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Journey</h2>\n              <p className=\"text-xl text-gray-600\">\n                Key milestones in building the future of workflow automation\n              </p>\n            </div>\n\n            <div className=\"relative\">\n              {/* Timeline line */}\n              <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-blue-200\"></div>\n\n              <div className=\"space-y-8\">\n                {milestones.map((milestone, index) => (\n                  <div key={index} className=\"relative flex items-start gap-6\">\n                    <div className=\"flex-shrink-0 w-16 h-16 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold relative z-10\">\n                      {milestone.year === 'Future' ? (\n                        <Rocket className=\"w-8 h-8\" />\n                      ) : (\n                        milestone.year.slice(-2)\n                      )}\n                    </div>\n                    <div className=\"flex-1 bg-gray-50 rounded-xl p-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"text-xl font-bold text-gray-900\">{milestone.title}</h3>\n                        <span className=\"text-blue-600 font-semibold\">{milestone.year}</span>\n                      </div>\n                      <p className=\"text-gray-600\">{milestone.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Team */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Meet Our Team</h2>\n              <p className=\"text-xl text-gray-600\">\n                World-class engineers and product leaders from top companies\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {team.map((member, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 text-center hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"text-6xl mb-4\">{member.image}</div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-1\">{member.name}</h3>\n                  <p className=\"text-blue-600 font-medium mb-4\">{member.role}</p>\n                  <p className=\"text-gray-600 text-sm mb-6\">{member.bio}</p>\n\n                  <div className=\"flex justify-center gap-4\">\n                    <a\n                      href={member.linkedin}\n                      className=\"p-2 text-gray-400 hover:text-blue-600 transition-colors\"\n                    >\n                      <Linkedin className=\"w-5 h-5\" />\n                    </a>\n                    <a\n                      href={member.twitter}\n                      className=\"p-2 text-gray-400 hover:text-blue-400 transition-colors\"\n                    >\n                      <Twitter className=\"w-5 h-5\" />\n                    </a>\n                    <a\n                      href={member.github}\n                      className=\"p-2 text-gray-400 hover:text-gray-900 transition-colors\"\n                    >\n                      <Github className=\"w-5 h-5\" />\n                    </a>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Investors & Advisors */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Backed by the Best</h2>\n            <p className=\"text-xl text-gray-600 mb-12\">\n              Supported by world-class investors and advisors who believe in our vision\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-8 border border-blue-200\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Lead Investors</h3>\n                <div className=\"space-y-4\">\n                  {[\n                    {\n                      name: 'Andreessen Horowitz',\n                      description: 'Leading venture capital firm',\n                    },\n                    {\n                      name: 'Sequoia Capital',\n                      description: 'Global venture capital partnership',\n                    },\n                    {\n                      name: 'Index Ventures',\n                      description: 'Multi-stage venture capital firm',\n                    },\n                  ].map((investor, index) => (\n                    <div key={index} className=\"flex items-center gap-4 p-4 bg-white rounded-lg\">\n                      <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <Award className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-gray-900\">{investor.name}</div>\n                        <div className=\"text-gray-600 text-sm\">{investor.description}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-8 border border-green-200\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Key Advisors</h3>\n                <div className=\"space-y-4\">\n                  {[\n                    {\n                      name: 'Wade Foster',\n                      description: 'CEO & Co-founder of Zapier',\n                    },\n                    {\n                      name: 'Jan Oberhauser',\n                      description: 'Founder & CEO of n8n',\n                    },\n                    { name: 'Mike Knoop', description: 'Co-founder of Zapier' },\n                  ].map((advisor, index) => (\n                    <div key={index} className=\"flex items-center gap-4 p-4 bg-white rounded-lg\">\n                      <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                        <Users className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-gray-900\">{advisor.name}</div>\n                        <div className=\"text-gray-600 text-sm\">{advisor.description}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Office Locations */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Global Presence</h2>\n              <p className=\"text-xl text-gray-600\">\n                Offices around the world to serve our global community\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {[\n                {\n                  city: 'San Francisco',\n                  country: 'USA',\n                  flag: '🇺🇸',\n                  description: 'Global headquarters and R&D center',\n                  address: '123 Market St, San Francisco, CA 94105',\n                },\n                {\n                  city: 'London',\n                  country: 'UK',\n                  flag: '🇬🇧',\n                  description: 'European headquarters and enterprise sales',\n                  address: '10 Downing St, London SW1A 2AA',\n                },\n                {\n                  city: 'Singapore',\n                  country: 'Singapore',\n                  flag: '🇸🇬',\n                  description: 'APAC headquarters and customer success',\n                  address: '1 Raffles Place, Singapore 048616',\n                },\n              ].map((office, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white border border-gray-200 rounded-xl p-6 text-center hover:border-blue-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div className=\"text-4xl mb-4\">{office.flag}</div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-1\">\n                    {office.city}, {office.country}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">{office.description}</p>\n                  <p className=\"text-gray-500 text-sm\">{office.address}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Join Our Mission</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Help us build the future of workflow automation. We're always looking for talented\n            individuals who share our vision.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Users className=\"w-5 h-5\" />\n              View Open Positions\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <Mail className=\"w-5 h-5\" />\n              Get in Touch\n            </button>\n          </div>\n\n          <div className=\"flex items-center justify-center gap-8 text-sm opacity-80\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Remote-first culture\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Competitive compensation\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Equity participation\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default About;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx",
        "start": 1,
        "end": 525,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 525,
          "column": 2,
          "position": 3934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/about/About.tsx",
        "start": 1,
        "end": 525,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 525,
          "column": 2,
          "position": 3934
        }
      }
    },
    {
      "format": "javascript",
      "lines": 348,
      "fragment": "={() => copyToClipboard(authenticationExample)}\n                    className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {copiedCode === authenticationExample ? (\n                      <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* SDK Usage */}\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"bg-purple-100 p-2 rounded-lg\">\n                    <Code className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900\">SDK Usage</h3>\n                </div>\n\n                <p className=\"text-gray-600 mb-4\">\n                  Use our official SDKs for easier integration. Available for Node.js, Python, PHP,\n                  Go, and more.\n                </p>\n\n                <div className=\"relative\">\n                  <pre className=\"bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                    <code>{sdkExample}</code>\n                  </pre>\n                  <button\n                    onClick={() => copyToClipboard(sdkExample)}\n                    className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {copiedCode === sdkExample ? (\n                      <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* API Endpoints */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">API Endpoints</h2>\n              <p className=\"text-xl text-gray-600\">\n                Complete reference for all available endpoints\n              </p>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row gap-8\">\n              {/* Sidebar */}\n              <div className=\"lg:w-1/4\">\n                <div className=\"bg-white border border-gray-200 rounded-xl p-6 sticky top-6\">\n                  <h3 className=\"font-semibold text-gray-900 mb-4\">Endpoints</h3>\n                  <nav className=\"space-y-2\">\n                    {endpointCategories.map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setActiveEndpoint(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            activeEndpoint === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                            {category.count}\n                          </span>\n                        </button>\n                      );\n                    })}\n                  </nav>\n                </div>\n              </div>\n\n              {/* Endpoint Details */}\n              <div className=\"lg:w-3/4\">\n                <div className=\"space-y-6\">\n                  {endpoints[activeEndpoint as keyof typeof endpoints]?.map((endpoint, index) => (\n                    <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"flex items-start gap-4 mb-4\">\n                        <span\n                          className={`px-3 py-1 text-sm font-bold rounded-full ${getMethodColor(endpoint.method)}`}\n                        >\n                          {endpoint.method}\n                        </span>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{endpoint.title}</h3>\n                          <code className=\"text-gray-600 bg-gray-100 px-2 py-1 rounded text-sm\">\n                            {endpoint.path}\n                          </code>\n                          <p className=\"text-gray-600 mt-2\">{endpoint.description}</p>\n                        </div>\n                      </div>\n\n                      {/* Parameters */}\n                      {endpoint.parameters && endpoint.parameters.length > 0 && (\n                        <div className=\"mb-6\">\n                          <h4 className=\"font-semibold text-gray-900 mb-3\">Parameters</h4>\n                          <div className=\"overflow-x-auto\">\n                            <table className=\"w-full text-sm\">\n                              <thead>\n                                <tr className=\"border-b border-gray-200\">\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">Name</th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">Type</th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">\n                                    Required\n                                  </th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">\n                                    Description\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {endpoint.parameters.map((param, paramIndex) => (\n                                  <tr key={paramIndex} className=\"border-b border-gray-100\">\n                                    <td className=\"p-2 font-mono text-blue-600\">{param.name}</td>\n                                    <td className=\"p-2 text-gray-600\">{param.type}</td>\n                                    <td className=\"p-2\">\n                                      {param.required ? (\n                                        <span className=\"text-red-600 font-medium\">Yes</span>\n                                      ) : (\n                                        <span className=\"text-gray-500\">No</span>\n                                      )}\n                                    </td>\n                                    <td className=\"p-2 text-gray-600\">{param.description}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Response */}\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-3\">Response</h4>\n                        <div className=\"bg-gray-900 rounded-lg p-4 relative\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-green-400 text-sm font-medium\">\n                              HTTP {endpoint.response.status}\n                            </span>\n                            <button\n                              onClick={() => copyToClipboard(endpoint.response.body)}\n                              className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n                            >\n                              {copiedCode === endpoint.response.body ? (\n                                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                              ) : (\n                                <Copy className=\"w-4 h-4\" />\n                              )}\n                            </button>\n                          </div>\n                          <pre className=\"text-green-400 font-mono text-sm overflow-x-auto\">\n                            <code>{endpoint.response.body}</code>\n                          </pre>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Webhooks */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Webhooks</h2>\n              <p className=\"text-xl text-gray-600\">\n                Receive real-time notifications about workflow events\n              </p>\n            </div>\n\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                <div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Webhook Events</h3>\n                  <div className=\"space-y-3\">\n                    {[\n                      {\n                        event: 'workflow.created',\n                        description: 'New workflow created',\n                      },\n                      {\n                        event: 'workflow.updated',\n                        description: 'Workflow modified',\n                      },\n                      {\n                        event: 'workflow.deleted',\n                        description: 'Workflow deleted',\n                      },\n                      {\n                        event: 'execution.started',\n                        description: 'Workflow execution started',\n                      },\n                      {\n                        event: 'execution.completed',\n                        description: 'Workflow execution completed',\n                      },\n                      {\n                        event: 'execution.failed',\n                        description: 'Workflow execution failed',\n                      },\n                    ].map((webhook, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <Webhook className=\"w-5 h-5 text-blue-600\" />\n                        <div>\n                          <code className=\"text-sm font-mono text-blue-600\">{webhook.event}</code>\n                          <p className=\"text-gray-600 text-sm\">{webhook.description}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Example Configuration</h3>\n                  <div className=\"relative\">\n                    <pre className=\"bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                      <code>{webhookExample}</code>\n                    </pre>\n                    <button\n                      onClick={() => copyToClipboard(webhookExample)}\n                      className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                    >\n                      {copiedCode === webhookExample ? (\n                        <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Rate Limits & SDKs */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Rate Limits */}\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-orange-100 p-3 rounded-lg\">\n                  <Clock className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900\">Rate Limits</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    tier: 'Free',\n                    limit: '1,000 requests/hour',\n                    burst: '100 requests/minute',\n                  },\n                  {\n                    tier: 'Professional',\n                    limit: '10,000 requests/hour',\n                    burst: '500 requests/minute',\n                  },\n                  {\n                    tier: 'Enterprise',\n                    limit: '100,000 requests/hour',\n                    burst: '1,000 requests/minute',\n                  },\n                ].map((tier, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">{tier.tier}</div>\n                      <div className=\"text-gray-600 text-sm\">{tier.limit}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-gray-600 text-sm\">Burst: {tier.burst}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* SDKs */}\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-blue-100 p-3 rounded-lg\">\n                  <Code className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900\">Official SDKs</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    language: 'Node.js',\n                    package: '@reporunner/node-sdk',\n                    version: 'v2.1.0',\n                  },\n                  {\n                    language: 'Python',\n                    package: 'reporunner-python',\n                    version: 'v1.8.0',\n                  },\n                  {\n                    language: 'PHP',\n                    package: 'reporunner/php-sdk',\n                    version: 'v1.5.0',\n                  },\n                  {\n                    language: 'Go',\n                    package: 'github.com/reporunner/go-sdk',\n                    version: 'v1.3.0',\n                  },\n                  {\n                    language: 'Ruby',\n                    package: 'reporunner-ruby',\n                    version: 'v1.2.0',\n                  },\n                ].map((sdk, index) => (\n                  <div\n                    key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx",
        "start": 428,
        "end": 775,
        "startLoc": {
          "line": 428,
          "column": 8,
          "position": 2356
        },
        "endLoc": {
          "line": 775,
          "column": 2,
          "position": 5074
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx",
        "start": 429,
        "end": 776,
        "startLoc": {
          "line": 429,
          "column": 8,
          "position": 2369
        },
        "endLoc": {
          "line": 776,
          "column": 2,
          "position": 5087
        }
      }
    },
    {
      "format": "tsx",
      "lines": 821,
      "fragment": "/**\n * API Reference Page\n *\n * Comprehensive API documentation for Reporunner\n * REST API endpoints, authentication, and examples\n */\n\nimport {\n  ArrowRight,\n  CheckCircle,\n  Clock,\n  Code,\n  Copy,\n  ExternalLink,\n  GitBranch,\n  Key,\n  Play,\n  Settings,\n  Shield,\n  Users,\n  Webhook,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Footer } from '../components/Landing/Footer';\nimport { Header } from '../components/Landing/Header';\n\nexport const APIReference: React.FC = () => {\n  const [activeEndpoint, setActiveEndpoint] = useState('workflows');\n  const [copiedCode, setCopiedCode] = useState('');\n\n  const endpointCategories = [\n    { id: 'workflows', name: 'Workflows', icon: GitBranch, count: 12 },\n    { id: 'executions', name: 'Executions', icon: Play, count: 8 },\n    { id: 'credentials', name: 'Credentials', icon: Key, count: 6 },\n    { id: 'nodes', name: 'Nodes', icon: Settings, count: 10 },\n    { id: 'integrations', name: 'Integrations', icon: Webhook, count: 15 },\n    { id: 'users', name: 'Users', icon: Users, count: 7 },\n    { id: 'webhooks', name: 'Webhooks', icon: Webhook, count: 5 },\n  ];\n\n  const endpoints = {\n    workflows: [\n      {\n        method: 'GET',\n        path: '/api/workflows',\n        title: 'List Workflows',\n        description: 'Retrieve all workflows for the authenticated user',\n        parameters: [\n          {\n            name: 'page',\n            type: 'integer',\n            required: false,\n            description: 'Page number for pagination',\n          },\n          {\n            name: 'limit',\n            type: 'integer',\n            required: false,\n            description: 'Number of results per page (max 100)',\n          },\n          {\n            name: 'active',\n            type: 'boolean',\n            required: false,\n            description: 'Filter by active status',\n          },\n        ],\n        response: {\n          status: 200,\n          body: `{\n  \"data\": [\n    {\n      \"id\": \"wf_123abc\",\n      \"name\": \"Customer Onboarding\",\n      \"description\": \"Automated customer onboarding workflow\",\n      \"active\": true,\n      \"nodes\": [...],\n      \"createdAt\": \"2025-01-20T10:00:00Z\",\n      \"updatedAt\": \"2025-01-20T15:30:00Z\"\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 50,\n    \"total\": 127,\n    \"pages\": 3\n  }\n}`,\n        },\n      },\n      {\n        method: 'POST',\n        path: '/api/workflows',\n        title: 'Create Workflow',\n        description: 'Create a new workflow',\n        parameters: [\n          {\n            name: 'name',\n            type: 'string',\n            required: true,\n            description: 'Workflow name',\n          },\n          {\n            name: 'description',\n            type: 'string',\n            required: false,\n            description: 'Workflow description',\n          },\n          {\n            name: 'nodes',\n            type: 'array',\n            required: true,\n            description: 'Array of workflow nodes',\n          },\n          {\n            name: 'connections',\n            type: 'array',\n            required: true,\n            description: 'Array of node connections',\n          },\n        ],\n        response: {\n          status: 201,\n          body: `{\n  \"data\": {\n    \"id\": \"wf_456def\",\n    \"name\": \"New Workflow\",\n    \"description\": \"My new workflow\",\n    \"active\": false,\n    \"nodes\": [...],\n    \"connections\": [...],\n    \"createdAt\": \"2025-01-20T16:00:00Z\"\n  }\n}`,\n        },\n      },\n      {\n        method: 'GET',\n        path: '/api/workflows/{id}',\n        title: 'Get Workflow',\n        description: 'Retrieve a specific workflow by ID',\n        parameters: [\n          {\n            name: 'id',\n            type: 'string',\n            required: true,\n            description: 'Workflow ID',\n          },\n        ],\n        response: {\n          status: 200,\n          body: `{\n  \"data\": {\n    \"id\": \"wf_123abc\",\n    \"name\": \"Customer Onboarding\",\n    \"description\": \"Automated customer onboarding workflow\",\n    \"active\": true,\n    \"nodes\": [...],\n    \"connections\": [...],\n    \"createdAt\": \"2025-01-20T10:00:00Z\",\n    \"updatedAt\": \"2025-01-20T15:30:00Z\"\n  }\n}`,\n        },\n      },\n    ],\n    executions: [\n      {\n        method: 'GET',\n        path: '/api/executions',\n        title: 'List Executions',\n        description: 'Retrieve workflow execution history',\n        parameters: [\n          {\n            name: 'workflowId',\n            type: 'string',\n            required: false,\n            description: 'Filter by workflow ID',\n          },\n          {\n            name: 'status',\n            type: 'string',\n            required: false,\n            description: 'Filter by execution status',\n          },\n          {\n            name: 'limit',\n            type: 'integer',\n            required: false,\n            description: 'Number of results per page',\n          },\n        ],\n        response: {\n          status: 200,\n          body: `{\n  \"data\": [\n    {\n      \"id\": \"exec_789ghi\",\n      \"workflowId\": \"wf_123abc\",\n      \"status\": \"success\",\n      \"startTime\": \"2025-01-20T14:00:00Z\",\n      \"endTime\": \"2025-01-20T14:02:15Z\",\n      \"duration\": 135000,\n      \"nodeExecutions\": [...]\n    }\n  ]\n}`,\n        },\n      },\n      {\n        method: 'POST',\n        path: '/api/executions',\n        title: 'Execute Workflow',\n        description: 'Trigger a workflow execution',\n        parameters: [\n          {\n            name: 'workflowId',\n            type: 'string',\n            required: true,\n            description: 'ID of workflow to execute',\n          },\n          {\n            name: 'inputData',\n            type: 'object',\n            required: false,\n            description: 'Input data for the workflow',\n          },\n          {\n            name: 'wait',\n            type: 'boolean',\n            required: false,\n            description: 'Wait for execution to complete',\n          },\n        ],\n        response: {\n          status: 201,\n          body: `{\n  \"data\": {\n    \"id\": \"exec_987zyx\",\n    \"workflowId\": \"wf_123abc\",\n    \"status\": \"running\",\n    \"startTime\": \"2025-01-20T16:30:00Z\"\n  }\n}`,\n        },\n      },\n    ],\n    credentials: [\n      {\n        method: 'GET',\n        path: '/api/credentials',\n        title: 'List Credentials',\n        description: 'Retrieve all stored credentials',\n        parameters: [\n          {\n            name: 'type',\n            type: 'string',\n            required: false,\n            description: 'Filter by credential type',\n          },\n        ],\n        response: {\n          status: 200,\n          body: `{\n  \"data\": [\n    {\n      \"id\": \"cred_abc123\",\n      \"name\": \"Gmail OAuth\",\n      \"type\": \"gmailOAuth2\",\n      \"createdAt\": \"2025-01-20T09:00:00Z\",\n      \"isValid\": true\n    }\n  ]\n}`,\n        },\n      },\n    ],\n  };\n\n  const authenticationExample = `curl -X GET \"https://api.reporunner.dev/api/workflows\" \\\\\n  -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\\\n  -H \"Content-Type: application/json\"`;\n\n  const webhookExample = `// Webhook endpoint configuration\n{\n  \"url\": \"https://your-domain.com/webhook/reporunner\",\n  \"events\": [\"workflow.completed\", \"workflow.failed\"],\n  \"secret\": \"your_webhook_secret\"\n}\n\n// Webhook payload example\n{\n  \"event\": \"workflow.completed\",\n  \"timestamp\": \"2025-01-20T16:45:00Z\",\n  \"data\": {\n    \"workflowId\": \"wf_123abc\",\n    \"executionId\": \"exec_789ghi\",\n    \"status\": \"success\",\n    \"duration\": 125000\n  }\n}`;\n\n  const sdkExample = `// Node.js SDK Example\nconst { ReporunnerClient } = require('@reporunner/sdk');\n\nconst client = new ReporunnerClient({\n  apiToken: process.env.REPORUNNER_API_TOKEN,\n  baseUrl: 'https://api.reporunner.dev'\n});\n\n// Execute a workflow\nconst execution = await client.workflows.execute('wf_123abc', {\n  inputData: { email: 'user@example.com' },\n  wait: true\n});\n\nconsole.log('Execution result:', execution.data);`;\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedCode(text);\n    setTimeout(() => setCopiedCode(''), 2000);\n  };\n\n  const getMethodColor = (method: string) => {\n    switch (method) {\n      case 'GET':\n        return 'text-green-600 bg-green-100';\n      case 'POST':\n        return 'text-blue-600 bg-blue-100';\n      case 'PUT':\n        return 'text-orange-600 bg-orange-100';\n      case 'DELETE':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                API\n              </span>{' '}\n              Reference\n            </h1>\n            <p className=\"text-xl text-slate-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Complete REST API documentation for Reporunner. Manage workflows, executions, and\n              integrations programmatically with our powerful API.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <button className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg text-lg hover:scale-105 transition-transform flex items-center gap-2\">\n                <Key className=\"w-5 h-5\" />\n                Get API Key\n              </button>\n              <button className=\"px-8 py-4 bg-white/10 backdrop-blur-sm text-white font-semibold rounded-lg text-lg border border-white/20 hover:bg-white/20 transition-all flex items-center gap-2\">\n                <Code className=\"w-5 h-5\" />\n                View SDK\n              </button>\n            </div>\n\n            {/* API Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-300 mb-2\">60+</div>\n                <div className=\"text-sm text-slate-300\">API Endpoints</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-300 mb-2\">99.9%</div>\n                <div className=\"text-sm text-slate-300\">Uptime SLA</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-300 mb-2\">5</div>\n                <div className=\"text-sm text-slate-300\">SDKs Available</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-300 mb-2\">50ms</div>\n                <div className=\"text-sm text-slate-300\">Avg Response</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Start */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Quick Start</h2>\n              <p className=\"text-xl text-gray-600\">\n                Get up and running with the Reporunner API in minutes\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Authentication */}\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"bg-blue-100 p-2 rounded-lg\">\n                    <Shield className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900\">Authentication</h3>\n                </div>\n\n                <p className=\"text-gray-600 mb-4\">\n                  All API requests require authentication using Bearer tokens. Include your API\n                  token in the Authorization header.\n                </p>\n\n                <div className=\"relative\">\n                  <pre className=\"bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                    <code>{authenticationExample}</code>\n                  </pre>\n                  <button\n                    onClick={() => copyToClipboard(authenticationExample)}\n                    className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {copiedCode === authenticationExample ? (\n                      <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* SDK Usage */}\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"bg-purple-100 p-2 rounded-lg\">\n                    <Code className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900\">SDK Usage</h3>\n                </div>\n\n                <p className=\"text-gray-600 mb-4\">\n                  Use our official SDKs for easier integration. Available for Node.js, Python, PHP,\n                  Go, and more.\n                </p>\n\n                <div className=\"relative\">\n                  <pre className=\"bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                    <code>{sdkExample}</code>\n                  </pre>\n                  <button\n                    onClick={() => copyToClipboard(sdkExample)}\n                    className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {copiedCode === sdkExample ? (\n                      <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* API Endpoints */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">API Endpoints</h2>\n              <p className=\"text-xl text-gray-600\">\n                Complete reference for all available endpoints\n              </p>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row gap-8\">\n              {/* Sidebar */}\n              <div className=\"lg:w-1/4\">\n                <div className=\"bg-white border border-gray-200 rounded-xl p-6 sticky top-6\">\n                  <h3 className=\"font-semibold text-gray-900 mb-4\">Endpoints</h3>\n                  <nav className=\"space-y-2\">\n                    {endpointCategories.map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setActiveEndpoint(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            activeEndpoint === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                            {category.count}\n                          </span>\n                        </button>\n                      );\n                    })}\n                  </nav>\n                </div>\n              </div>\n\n              {/* Endpoint Details */}\n              <div className=\"lg:w-3/4\">\n                <div className=\"space-y-6\">\n                  {endpoints[activeEndpoint as keyof typeof endpoints]?.map((endpoint, index) => (\n                    <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"flex items-start gap-4 mb-4\">\n                        <span\n                          className={`px-3 py-1 text-sm font-bold rounded-full ${getMethodColor(endpoint.method)}`}\n                        >\n                          {endpoint.method}\n                        </span>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{endpoint.title}</h3>\n                          <code className=\"text-gray-600 bg-gray-100 px-2 py-1 rounded text-sm\">\n                            {endpoint.path}\n                          </code>\n                          <p className=\"text-gray-600 mt-2\">{endpoint.description}</p>\n                        </div>\n                      </div>\n\n                      {/* Parameters */}\n                      {endpoint.parameters && endpoint.parameters.length > 0 && (\n                        <div className=\"mb-6\">\n                          <h4 className=\"font-semibold text-gray-900 mb-3\">Parameters</h4>\n                          <div className=\"overflow-x-auto\">\n                            <table className=\"w-full text-sm\">\n                              <thead>\n                                <tr className=\"border-b border-gray-200\">\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">Name</th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">Type</th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">\n                                    Required\n                                  </th>\n                                  <th className=\"text-left p-2 font-medium text-gray-700\">\n                                    Description\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {endpoint.parameters.map((param, paramIndex) => (\n                                  <tr key={paramIndex} className=\"border-b border-gray-100\">\n                                    <td className=\"p-2 font-mono text-blue-600\">{param.name}</td>\n                                    <td className=\"p-2 text-gray-600\">{param.type}</td>\n                                    <td className=\"p-2\">\n                                      {param.required ? (\n                                        <span className=\"text-red-600 font-medium\">Yes</span>\n                                      ) : (\n                                        <span className=\"text-gray-500\">No</span>\n                                      )}\n                                    </td>\n                                    <td className=\"p-2 text-gray-600\">{param.description}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Response */}\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-3\">Response</h4>\n                        <div className=\"bg-gray-900 rounded-lg p-4 relative\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-green-400 text-sm font-medium\">\n                              HTTP {endpoint.response.status}\n                            </span>\n                            <button\n                              onClick={() => copyToClipboard(endpoint.response.body)}\n                              className=\"p-1 text-gray-400 hover:text-white transition-colors\"\n                            >\n                              {copiedCode === endpoint.response.body ? (\n                                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                              ) : (\n                                <Copy className=\"w-4 h-4\" />\n                              )}\n                            </button>\n                          </div>\n                          <pre className=\"text-green-400 font-mono text-sm overflow-x-auto\">\n                            <code>{endpoint.response.body}</code>\n                          </pre>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Webhooks */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Webhooks</h2>\n              <p className=\"text-xl text-gray-600\">\n                Receive real-time notifications about workflow events\n              </p>\n            </div>\n\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                <div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Webhook Events</h3>\n                  <div className=\"space-y-3\">\n                    {[\n                      {\n                        event: 'workflow.created',\n                        description: 'New workflow created',\n                      },\n                      {\n                        event: 'workflow.updated',\n                        description: 'Workflow modified',\n                      },\n                      {\n                        event: 'workflow.deleted',\n                        description: 'Workflow deleted',\n                      },\n                      {\n                        event: 'execution.started',\n                        description: 'Workflow execution started',\n                      },\n                      {\n                        event: 'execution.completed',\n                        description: 'Workflow execution completed',\n                      },\n                      {\n                        event: 'execution.failed',\n                        description: 'Workflow execution failed',\n                      },\n                    ].map((webhook, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <Webhook className=\"w-5 h-5 text-blue-600\" />\n                        <div>\n                          <code className=\"text-sm font-mono text-blue-600\">{webhook.event}</code>\n                          <p className=\"text-gray-600 text-sm\">{webhook.description}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Example Configuration</h3>\n                  <div className=\"relative\">\n                    <pre className=\"bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm overflow-x-auto\">\n                      <code>{webhookExample}</code>\n                    </pre>\n                    <button\n                      onClick={() => copyToClipboard(webhookExample)}\n                      className=\"absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors\"\n                    >\n                      {copiedCode === webhookExample ? (\n                        <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Rate Limits & SDKs */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Rate Limits */}\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-orange-100 p-3 rounded-lg\">\n                  <Clock className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900\">Rate Limits</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    tier: 'Free',\n                    limit: '1,000 requests/hour',\n                    burst: '100 requests/minute',\n                  },\n                  {\n                    tier: 'Professional',\n                    limit: '10,000 requests/hour',\n                    burst: '500 requests/minute',\n                  },\n                  {\n                    tier: 'Enterprise',\n                    limit: '100,000 requests/hour',\n                    burst: '1,000 requests/minute',\n                  },\n                ].map((tier, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">{tier.tier}</div>\n                      <div className=\"text-gray-600 text-sm\">{tier.limit}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-gray-600 text-sm\">Burst: {tier.burst}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* SDKs */}\n            <div className=\"bg-white border border-gray-200 rounded-xl p-8\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-blue-100 p-3 rounded-lg\">\n                  <Code className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900\">Official SDKs</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    language: 'Node.js',\n                    package: '@reporunner/node-sdk',\n                    version: 'v2.1.0',\n                  },\n                  {\n                    language: 'Python',\n                    package: 'reporunner-python',\n                    version: 'v1.8.0',\n                  },\n                  {\n                    language: 'PHP',\n                    package: 'reporunner/php-sdk',\n                    version: 'v1.5.0',\n                  },\n                  {\n                    language: 'Go',\n                    package: 'github.com/reporunner/go-sdk',\n                    version: 'v1.3.0',\n                  },\n                  {\n                    language: 'Ruby',\n                    package: 'reporunner-ruby',\n                    version: 'v1.2.0',\n                  },\n                ].map((sdk, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\"\n                  >\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">{sdk.language}</div>\n                      <code className=\"text-gray-600 text-sm\">{sdk.package}</code>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-green-600 text-sm font-medium\">{sdk.version}</span>\n                      <ArrowRight className=\"w-4 h-4 text-gray-400\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start Building?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Get your API key and start integrating Reporunner into your applications today.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg text-lg hover:bg-gray-100 transition-colors flex items-center gap-2 justify-center\">\n              <Key className=\"w-5 h-5\" />\n              Get API Key\n            </button>\n            <button className=\"px-8 py-4 border-2 border-white/30 text-white font-semibold rounded-lg text-lg hover:bg-white/10 transition-colors flex items-center gap-2 justify-center\">\n              <ExternalLink className=\"w-5 h-5\" />\n              View Examples\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default APIReference;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx",
        "start": 1,
        "end": 821,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 821,
          "column": 2,
          "position": 5431
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/apireference/APIReference.tsx",
        "start": 2,
        "end": 822,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 822,
          "column": 2,
          "position": 5444
        }
      }
    },
    {
      "format": "javascript",
      "lines": 163,
      "fragment": "={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#22c55e', // green for true\n                width: 10,\n                height: 10,\n                right: -5,\n                top: '35%',\n              }}\n            />\n\n            {/* False Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_1\"\n              style={{\n                background: '#ef4444', // red for false\n                width: 10,\n                height: 10,\n                right: -5,\n                top: '65%',\n              }}\n            />\n\n            {/* Condition Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Output Labels */}\n            <div\n              className=\"absolute right-0 text-xs text-white px-1 py-0.5 rounded-l pointer-events-none z-10\"\n              style={{\n                top: '35%',\n                backgroundColor: '#22c55e',\n                transform: 'translateY(-50%)',\n                marginRight: '-1px',\n                fontSize: '10px',\n              }}\n            >\n              T\n            </div>\n            <div\n              className=\"absolute right-0 text-xs text-white px-1 py-0.5 rounded-l pointer-events-none z-10\"\n              style={{\n                top: '65%',\n                backgroundColor: '#ef4444',\n                transform: 'translateY(-50%)',\n                marginRight: '-1px',\n                fontSize: '10px',\n              }}\n            >\n              F\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badges */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n            {mode === 'rules' && rules.length > 0 && (\n              <StatusBadge type=\"count\" content={rules.length} position=\"top-left\" color=\"yellow\" />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Node Label */}\n      <NodeLabel displayName={displayName} subtitle={getSubtitle()} maxWidth={150}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 62,
        "end": 224,
        "startLoc": {
          "line": 62,
          "column": 10,
          "position": 547
        },
        "endLoc": {
          "line": 224,
          "column": 2,
          "position": 1525
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 68,
        "end": 230,
        "startLoc": {
          "line": 68,
          "column": 10,
          "position": 625
        },
        "endLoc": {
          "line": 230,
          "column": 2,
          "position": 1603
        }
      }
    },
    {
      "format": "tsx",
      "lines": 225,
      "fragment": ";\nimport type { CustomNodeBodyProps } from './nodeUiRegistry';\nimport { NodeIcon, NodeLabel, StatusBadge } from './shared';\n\n/**\n * Custom Condition Node Body Component\n * Gmail-style UI with condition-specific features and dual outputs\n */\nconst ConditionNodeBody: React.FC<CustomNodeBodyProps> = ({\n  nodeId,\n  nodeData,\n  selected,\n  isHovered,\n  onMouseEnter,\n  onMouseLeave,\n  onDelete,\n  onOpenProperties,\n}) => {\n  const displayName = nodeData.name || nodeData.label || 'Condition';\n  const mode = nodeData.parameters?.mode || 'expression';\n  const rules = nodeData.parameters?.rules || [];\n\n  // Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef: menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n  const logic = nodeData.parameters?.logic || 'AND';\n  const icon = '❓'; // Question mark for condition\n\n  // Generate subtitle based on condition configuration\n  const getSubtitle = () => {\n    if (mode === 'rules' && rules.length > 0) {\n      return `${rules.length} rule${rules.length > 1 ? 's' : ''} (${logic})`;\n    }\n    return 'Expression Mode';\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#22c55e', // green for true\n                width: 10,\n                height: 10,\n                right: -5,\n                top: '35%',\n              }}\n            />\n\n            {/* False Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_1\"\n              style={{\n                background: '#ef4444', // red for false\n                width: 10,\n                height: 10,\n                right: -5,\n                top: '65%',\n              }}\n            />\n\n            {/* Condition Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Output Labels */}\n            <div\n              className=\"absolute right-0 text-xs text-white px-1 py-0.5 rounded-l pointer-events-none z-10\"\n              style={{\n                top: '35%',\n                backgroundColor: '#22c55e',\n                transform: 'translateY(-50%)',\n                marginRight: '-1px',\n                fontSize: '10px',\n              }}\n            >\n              T\n            </div>\n            <div\n              className=\"absolute right-0 text-xs text-white px-1 py-0.5 rounded-l pointer-events-none z-10\"\n              style={{\n                top: '65%',\n                backgroundColor: '#ef4444',\n                transform: 'translateY(-50%)',\n                marginRight: '-1px',\n                fontSize: '10px',\n              }}\n            >\n              F\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badges */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n            {mode === 'rules' && rules.length > 0 && (\n              <StatusBadge type=\"count\" content={rules.length} position=\"top-left\" color=\"yellow\" />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Node Label */}\n      <NodeLabel displayName={displayName} subtitle={getSubtitle()} maxWidth={150} />\n    </div>\n  );\n};\n\nexport default ConditionNodeBody;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 5,
        "end": 229,
        "startLoc": {
          "line": 5,
          "column": 32,
          "position": 63
        },
        "endLoc": {
          "line": 229,
          "column": 2,
          "position": 1547
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/conditionnodebody/ConditionNodeBody.tsx",
        "start": 11,
        "end": 235,
        "startLoc": {
          "line": 11,
          "column": 19,
          "position": 141
        },
        "endLoc": {
          "line": 235,
          "column": 2,
          "position": 1625
        }
      }
    },
    {
      "format": "javascript",
      "lines": 162,
      "fragment": "={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Standard Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n                top: '25%',\n              }}\n            />\n\n            {/* AI Language Model Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_languageModel\"\n              style={{\n                background: '#8b5cf6',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '45%',\n              }}\n            />\n\n            {/* AI Memory Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_memory\"\n              style={{\n                background: '#f59e0b',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '65%',\n              }}\n            />\n\n            {/* AI Tool Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_tool\"\n              style={{\n                background: '#ef4444',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '85%',\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* AI Agent Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badge */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n          </div>\n        </div>\n      </div>\n\n      {/* Node Label */}\n      <NodeLabel displayName={displayName} subtitle={provider} maxWidth={150}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 53,
        "end": 214,
        "startLoc": {
          "line": 53,
          "column": 10,
          "position": 422
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1345
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 59,
        "end": 220,
        "startLoc": {
          "line": 59,
          "column": 10,
          "position": 500
        },
        "endLoc": {
          "line": 220,
          "column": 2,
          "position": 1423
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "import type React from 'react';\nimport { useRef, useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport NodeToolbar from '../components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar';\nimport { useSmartMenuPosition } from '../hooks/useSmartMenuPosition';\nimport type { CustomNodeBodyProps } from './nodeUiRegistry';\nimport { NodeIcon, NodeLabel, StatusBadge } from './shared';\n\n/**\n * Custom AI Agent Node Body Component\n * Gmail-style UI with AI-specific features and handles\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 4,
          "position": 100
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 4,
          "position": 100
        }
      }
    },
    {
      "format": "tsx",
      "lines": 215,
      "fragment": ";\nimport type { CustomNodeBodyProps } from './nodeUiRegistry';\nimport { NodeIcon, NodeLabel, StatusBadge } from './shared';\n\n/**\n * Custom AI Agent Node Body Component\n * Gmail-style UI with AI-specific features and handles\n */\nconst AIAgentNodeBody: React.FC<CustomNodeBodyProps> = ({\n  nodeId,\n  nodeData,\n  selected,\n  isHovered,\n  onMouseEnter,\n  onMouseLeave,\n  onDelete,\n\n  onOpenProperties,\n}) => {\n  const displayName = nodeData.name || nodeData.label || 'AI Agent';\n  const provider = nodeData.parameters?.provider || 'Google (Gemini)';\n  const icon = '🤖'; // Simple robot emoji like old frontend\n\n  // Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef: menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Standard Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n                top: '25%',\n              }}\n            />\n\n            {/* AI Language Model Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_languageModel\"\n              style={{\n                background: '#8b5cf6',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '45%',\n              }}\n            />\n\n            {/* AI Memory Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_memory\"\n              style={{\n                background: '#f59e0b',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '65%',\n              }}\n            />\n\n            {/* AI Tool Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"ai_tool\"\n              style={{\n                background: '#ef4444',\n                width: 8,\n                height: 8,\n                left: -4,\n                top: '85%',\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* AI Agent Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badge */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n          </div>\n        </div>\n      </div>\n\n      {/* Node Label */}\n      <NodeLabel displayName={displayName} subtitle={provider} maxWidth={150} />\n    </div>\n  );\n};\n\nexport default AIAgentNodeBody;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 5,
        "end": 219,
        "startLoc": {
          "line": 5,
          "column": 32,
          "position": 63
        },
        "endLoc": {
          "line": 219,
          "column": 2,
          "position": 1367
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/aiagentnodebody/AIAgentNodeBody.tsx",
        "start": 11,
        "end": 225,
        "startLoc": {
          "line": 11,
          "column": 19,
          "position": 141
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1445
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ";\n\n      // Calculate available space in each direction\n      const spaceRight = viewport.width - triggerRect.right;\n      const spaceLeft = triggerRect.left;\n      const spaceBelow = viewport.height - triggerRect.bottom;\n\n      let newPosition: MenuPosition = {};\n      let strategy: typeof positionStrategy = 'right';\n\n      // Try positioning to the right of the button (preferred)\n      if (spaceRight >= menuRect",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts",
        "start": 155,
        "end": 166,
        "startLoc": {
          "line": 155,
          "column": 2,
          "position": 1315
        },
        "endLoc": {
          "line": 166,
          "column": 9,
          "position": 1411
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 4,
          "position": 629
        },
        "endLoc": {
          "line": 87,
          "column": 19,
          "position": 725
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 98,
        "end": 113,
        "startLoc": {
          "line": 98,
          "column": 26,
          "position": 676
        },
        "endLoc": {
          "line": 113,
          "column": 6,
          "position": 786
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/intelligentautoconnect/intelligentAutoConnectService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 16,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 3,
          "position": 305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async sort(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async slice(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getVersion",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 7,
          "position": 713
        },
        "endLoc": {
          "line": 118,
          "column": 11,
          "position": 823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowtemplates/workflowTemplatesService.ts",
        "start": 108,
        "end": 123,
        "startLoc": {
          "line": 108,
          "column": 24,
          "position": 750
        },
        "endLoc": {
          "line": 123,
          "column": 22,
          "position": 860
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getVersionStats",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 183,
        "end": 198,
        "startLoc": {
          "line": 183,
          "column": 16,
          "position": 1305
        },
        "endLoc": {
          "line": 198,
          "column": 16,
          "position": 1415
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 11,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 20,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async toISOString(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async split(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async forEach",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 213,
        "end": 228,
        "startLoc": {
          "line": 213,
          "column": 10,
          "position": 1527
        },
        "endLoc": {
          "line": 228,
          "column": 8,
          "position": 1637
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/audit/auditService.ts",
        "start": 158,
        "end": 173,
        "startLoc": {
          "line": 158,
          "column": 26,
          "position": 1120
        },
        "endLoc": {
          "line": 173,
          "column": 24,
          "position": 1230
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async getInstance(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async PermissionService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/PermissionService.ts",
        "start": 13,
        "end": 28,
        "startLoc": {
          "line": 13,
          "column": 8,
          "position": 47
        },
        "endLoc": {
          "line": 28,
          "column": 18,
          "position": 157
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 16,
          "position": 195
        },
        "endLoc": {
          "line": 48,
          "column": 21,
          "position": 305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async split(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async isValidPermission",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/PermissionService.ts",
        "start": 68,
        "end": 83,
        "startLoc": {
          "line": 68,
          "column": 8,
          "position": 454
        },
        "endLoc": {
          "line": 83,
          "column": 18,
          "position": 564
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts",
        "start": 58,
        "end": 73,
        "startLoc": {
          "line": 58,
          "column": 11,
          "position": 380
        },
        "endLoc": {
          "line": 73,
          "column": 5,
          "position": 490
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n  constructor(\n    // Add dependencies here\n  ) {}\n\n  async getInstance(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async OperationalTransformService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/OperationalTransformService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 28,
          "position": 120
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async filter(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async includes(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async hasPositionConflict",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/OperationalTransformService.ts",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 17,
          "position": 713
        },
        "endLoc": {
          "line": 118,
          "column": 20,
          "position": 823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/integrationmarketplace/integrationMarketplaceService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 3,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 12,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n  }\n\n  private async measureEventLoopLag(): Promise<number> {\n    return new Promise((resolve) => {\n      const start = performance.now();\n      setImmediate(() => {\n        const lag = performance.now() - start;\n        resolve(lag);\n      });\n    });\n  }\n\n  // Default dependency checks",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/HealthCheck.ts",
        "start": 237,
        "end": 250,
        "startLoc": {
          "line": 237,
          "column": 2,
          "position": 1947
        },
        "endLoc": {
          "line": 250,
          "column": 29,
          "position": 2049
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/PerformanceMonitor.ts",
        "start": 228,
        "end": 241,
        "startLoc": {
          "line": 228,
          "column": 2,
          "position": 1773
        },
        "endLoc": {
          "line": 241,
          "column": 8,
          "position": 1875
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async push(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async join(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async semanticSearch",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/EmbeddingsService.ts",
        "start": 63,
        "end": 78,
        "startLoc": {
          "line": 63,
          "column": 16,
          "position": 417
        },
        "endLoc": {
          "line": 78,
          "column": 15,
          "position": 527
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/config/ConfigService.ts",
        "start": 63,
        "end": 78,
        "startLoc": {
          "line": 63,
          "column": 6,
          "position": 417
        },
        "endLoc": {
          "line": 78,
          "column": 6,
          "position": 527
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n  constructor(\n    // Add dependencies here\n  ) {}\n\n  async getInstance(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async HybridDatabaseService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/DatabaseService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async disconnect",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/DatabaseService.ts",
        "start": 53,
        "end": 68,
        "startLoc": {
          "line": 53,
          "column": 21,
          "position": 343
        },
        "endLoc": {
          "line": 68,
          "column": 11,
          "position": 453
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 11,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 20,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n  constructor(\n    // Add dependencies here\n  ) {}\n\n  async getInstance(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async CursorTrackingService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/CursorTrackingService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async Set",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/CursorTrackingService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 21,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 4,
          "position": 416
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 83,
        "end": 98,
        "startLoc": {
          "line": 83,
          "column": 12,
          "position": 565
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 675
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n  constructor(\n    // Add dependencies here\n  ) {}\n\n  async getInstance(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async if(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async CollaborationService",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 21,
          "position": 120
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/VersionControlService.ts",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 27
        },
        "endLoc": {
          "line": 23,
          "column": 22,
          "position": 120
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async set(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async get(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async add",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 53,
        "end": 68,
        "startLoc": {
          "line": 53,
          "column": 15,
          "position": 343
        },
        "endLoc": {
          "line": 68,
          "column": 4,
          "position": 453
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/services/nodeexecution/NodeExecutionService.ts",
        "start": 83,
        "end": 98,
        "startLoc": {
          "line": 83,
          "column": 12,
          "position": 565
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 675
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async catch(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async error(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async updateCursor",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 153,
        "end": 168,
        "startLoc": {
          "line": 153,
          "column": 5,
          "position": 1083
        },
        "endLoc": {
          "line": 168,
          "column": 13,
          "position": 1193
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/services/oauth/OAuthService.ts",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 11,
          "position": 787
        },
        "endLoc": {
          "line": 128,
          "column": 20,
          "position": 897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async all(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async countDocuments(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async round",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 193,
        "end": 208,
        "startLoc": {
          "line": 193,
          "column": 16,
          "position": 1379
        },
        "endLoc": {
          "line": 208,
          "column": 6,
          "position": 1489
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflow/WorkflowService.ts",
        "start": 48,
        "end": 63,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 306
        },
        "endLoc": {
          "line": 63,
          "column": 5,
          "position": 416
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async on(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async emit(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async CollaborationSession",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 213,
        "end": 228,
        "startLoc": {
          "line": 213,
          "column": 8,
          "position": 1527
        },
        "endLoc": {
          "line": 228,
          "column": 21,
          "position": 1637
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/CursorTrackingService.ts",
        "start": 163,
        "end": 178,
        "startLoc": {
          "line": 163,
          "column": 6,
          "position": 1157
        },
        "endLoc": {
          "line": 178,
          "column": 6,
          "position": 1267
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async to(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n\n  async except(input: any): Promise<any> {\n    // Delegate to use case\n    throw new Error('Not implemented');\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/CollaborationService.ts",
        "start": 253,
        "end": 267,
        "startLoc": {
          "line": 253,
          "column": 21,
          "position": 1823
        },
        "endLoc": {
          "line": 267,
          "column": 2,
          "position": 1929
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/CursorTrackingService.ts",
        "start": 178,
        "end": 193,
        "startLoc": {
          "line": 178,
          "column": 6,
          "position": 1268
        },
        "endLoc": {
          "line": 193,
          "column": 6,
          "position": 1376
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => {\n  return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n    try {\n      if (!req.user) {\n        throw new AppError('Authentication required', 401);\n      }\n\n      // Super admin has all permissions\n      if (req.user.role === 'super_admin') {\n        return next();\n      }\n\n      // Check if user has any of the required permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 59,
        "end": 71,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 411
        },
        "endLoc": {
          "line": 71,
          "column": 53,
          "position": 519
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 32,
        "end": 44,
        "startLoc": {
          "line": 32,
          "column": 11,
          "position": 216
        },
        "endLoc": {
          "line": 44,
          "column": 45,
          "position": 324
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "await this.runExecution(workflow, execution, options.timeout);\n      } else {\n        // Run in background\n        this.runExecution(workflow, execution, options.timeout).catch((error) => {\n          this.handleExecutionError(execution, error);\n        });\n      }\n    } catch (error) {\n      this.handleExecutionError(execution, error);\n    }\n\n    return execution;\n  }\n\n  /**\n   * Cancel a running execution\n   */\n  async cancelExecution(executionId: string): Promise<boolean> {\n    const execution = this.activeExecutions.get(executionId);\n    if (!execution || execution.status !== 'running') {\n      return false;\n    }\n\n    execution.status = 'cancelled';\n    execution.finishedAt = new Date();\n    execution.error = 'Execution cancelled by user';\n\n    this.activeExecutions.delete(executionId);\n    this.emit('executionCancelled', execution);\n\n    return true;\n  }\n\n  /**\n   * Get execution status\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 101,
        "end": 136,
        "startLoc": {
          "line": 101,
          "column": 9,
          "position": 743
        },
        "endLoc": {
          "line": 136,
          "column": 6,
          "position": 993
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-management.ts",
        "start": 1,
        "end": 39,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 242
        }
      }
    },
    {
      "format": "typescript",
      "lines": 50,
      "fragment": "runExecution(\n    workflow: WorkflowDefinition,\n    execution: WorkflowExecution,\n    timeout?: number\n  ): Promise<void> {\n    const executionTimeout = timeout || this.options.executionTimeout;\n\n    // Set execution timeout\n    const timeoutId = setTimeout(() => {\n      this.handleExecutionError(\n        execution,\n        new WorkflowEngineError('Execution timeout', 'EXECUTION_TIMEOUT')\n      );\n    }, executionTimeout);\n\n    try {\n      // Find trigger nodes (nodes with no inputs)\n      const triggerNodes = workflow.nodes.filter(\n        (node) => !workflow.connections.some((conn) => conn.destination.nodeId === node.id)\n      );\n\n      if (triggerNodes.length === 0) {\n        throw new WorkflowEngineError('No trigger nodes found', 'NO_TRIGGER_NODES');\n      }\n\n      // Execute nodes in topological order\n      const executionOrder = this.getExecutionOrder(workflow);\n\n      for (const nodeId of executionOrder) {\n        const node = workflow.nodes.find((n) => n.id === nodeId);\n        if (!node) continue;\n\n        // Check if execution was cancelled\n        if (execution.status === 'cancelled') {\n          return;\n        }\n\n        await this.executeNode(workflow, execution, node);\n      }\n\n      // Mark execution as successful\n      execution.status = 'success';\n      execution.finishedAt = new Date();\n\n      this.emit('executionCompleted', execution);\n    } catch (error) {\n      this.handleExecutionError(execution, error);\n    } finally {\n      clearTimeout(timeoutId);\n      this.activeExecutions.delete(execution.id);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 151,
        "end": 200,
        "startLoc": {
          "line": 151,
          "column": 2,
          "position": 1074
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1484
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-management.ts",
        "start": 60,
        "end": 111,
        "startLoc": {
          "line": 60,
          "column": 1,
          "position": 320
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 731
        }
      }
    },
    {
      "format": "typescript",
      "lines": 51,
      "fragment": "}\n  }\n\n  /**\n   * Execute a single node\n   */\n  private async executeNode(\n    workflow: WorkflowDefinition,\n    execution: WorkflowExecution,\n    node: any\n  ): Promise<void> {\n    const nodeExecution: NodeExecution = {\n      nodeId: node.id,\n      nodeName: node.name,\n      status: 'running',\n      startedAt: new Date(),\n      inputData: {},\n      outputData: {},\n      retryAttempt: 0,\n    };\n\n    execution.nodeExecutions.set(node.id, nodeExecution);\n    this.emit('nodeExecutionStarted', { execution, nodeExecution });\n\n    try {\n      // Get input data from previous nodes\n      const inputData = await this.getNodeInputData(workflow, execution, node);\n      nodeExecution.inputData = inputData;\n\n      // Execute the node\n      const result = await this.nodeExecutor.execute(node, inputData, {\n        workflowId: workflow.id,\n        executionId: execution.id,\n        nodeId: node.id,\n      });\n\n      nodeExecution.status = 'success';\n      nodeExecution.finishedAt = new Date();\n      nodeExecution.outputData = result.data;\n\n      execution.metadata.completedNodes++;\n\n      this.emit('nodeExecutionCompleted', { execution, nodeExecution });\n    } catch (error) {\n      await this.handleNodeError(workflow, execution, nodeExecution, error);\n    }\n  }\n\n  /**\n   * Handle node execution errors with retry logic\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 201,
        "end": 251,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1487
        },
        "endLoc": {
          "line": 251,
          "column": 6,
          "position": 1853
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/node-execution.ts",
        "start": 1,
        "end": 52,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 52,
          "column": 4,
          "position": 364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 51,
      "fragment": "handleNodeError(\n    workflow: WorkflowDefinition,\n    execution: WorkflowExecution,\n    nodeExecution: NodeExecution,\n    error: any\n  ): Promise<void> {\n    this.logger.error('Node execution failed', {\n      executionId: execution.id,\n      nodeId: nodeExecution.nodeId,\n      error: error.message,\n      attempt: nodeExecution.retryAttempt + 1,\n    });\n\n    // Check if we should retry\n    if (nodeExecution.retryAttempt < this.options.retryAttempts) {\n      nodeExecution.retryAttempt++;\n      execution.metadata.retriedNodes++;\n\n      this.emit('nodeExecutionRetry', { execution, nodeExecution });\n\n      // Exponential backoff\n      const delay = 2 ** nodeExecution.retryAttempt * 1000;\n      await new Promise((resolve) => setTimeout(resolve, delay));\n\n      // Retry execution\n      const node = workflow.nodes.find((n) => n.id === nodeExecution.nodeId);\n      if (node) {\n        await this.executeNode(workflow, execution, node);\n        return;\n      }\n    }\n\n    // Mark node as failed\n    nodeExecution.status = 'error';\n    nodeExecution.finishedAt = new Date();\n    nodeExecution.error = error.message;\n\n    execution.metadata.failedNodes++;\n\n    this.emit('nodeExecutionFailed', { execution, nodeExecution });\n\n    // Fail the entire execution\n    throw new WorkflowEngineError(\n      `Node execution failed: ${nodeExecution.nodeName}`,\n      'NODE_EXECUTION_FAILED'\n    );\n  }\n\n  /**\n   * Handle execution errors\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 252,
        "end": 302,
        "startLoc": {
          "line": 252,
          "column": 2,
          "position": 1860
        },
        "endLoc": {
          "line": 302,
          "column": 6,
          "position": 2239
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/node-execution.ts",
        "start": 55,
        "end": 106,
        "startLoc": {
          "line": 55,
          "column": 1,
          "position": 371
        },
        "endLoc": {
          "line": 106,
          "column": 1,
          "position": 749
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "private handleExecutionError(execution: WorkflowExecution, error: any): void {\n    this.logger.error('Workflow execution failed', {\n      executionId: execution.id,\n      workflowId: execution.workflowId,\n      error: error.message,\n    });\n\n    execution.status = 'error';\n    execution.finishedAt = new Date();\n    execution.error = error.message;\n\n    this.emit('executionFailed', execution);\n  }\n\n  /**\n   * Get topological execution order for nodes\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 303,
        "end": 319,
        "startLoc": {
          "line": 303,
          "column": 3,
          "position": 2242
        },
        "endLoc": {
          "line": 319,
          "column": 6,
          "position": 2362
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-utilities.ts",
        "start": 3,
        "end": 20,
        "startLoc": {
          "line": 3,
          "column": 3,
          "position": 13
        },
        "endLoc": {
          "line": 20,
          "column": 4,
          "position": 131
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": "private getExecutionOrder(workflow: WorkflowDefinition): string[] {\n    const visited = new Set<string>();\n    const visiting = new Set<string>();\n    const order: string[] = [];\n\n    const visit = (nodeId: string) => {\n      if (visiting.has(nodeId)) {\n        throw new WorkflowEngineError('Circular dependency detected', 'CIRCULAR_DEPENDENCY');\n      }\n\n      if (visited.has(nodeId)) {\n        return;\n      }\n\n      visiting.add(nodeId);\n\n      // Visit dependencies first\n      const dependencies = workflow.connections\n        .filter((conn) => conn.destination.nodeId === nodeId)\n        .map((conn) => conn.source.nodeId);\n\n      for (const depId of dependencies) {\n        visit(depId);\n      }\n\n      visiting.delete(nodeId);\n      visited.add(nodeId);\n      order.push(nodeId);\n    };\n\n    // Visit all nodes\n    for (const node of workflow.nodes) {\n      visit(node.id);\n    }\n\n    return order;\n  }\n\n  /**\n   * Get input data for a node from its connections\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 320,
        "end": 360,
        "startLoc": {
          "line": 320,
          "column": 3,
          "position": 2365
        },
        "endLoc": {
          "line": 360,
          "column": 6,
          "position": 2671
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-utilities.ts",
        "start": 21,
        "end": 64,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 133
        },
        "endLoc": {
          "line": 64,
          "column": 4,
          "position": 438
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "getNodeInputData(\n    workflow: WorkflowDefinition,\n    execution: WorkflowExecution,\n    node: any\n  ): Promise<Record<string, any>> {\n    const inputData: Record<string, any> = {};\n\n    // Get data from connected nodes\n    const inputConnections = workflow.connections.filter(\n      (conn) => conn.destination.nodeId === node.id\n    );\n\n    for (const connection of inputConnections) {\n      const sourceExecution = execution.nodeExecutions.get(connection.source.nodeId);\n      if (sourceExecution?.outputData) {\n        const sourceData =\n          sourceExecution.outputData[connection.source.outputIndex || 0] ||\n          sourceExecution.outputData;\n\n        inputData[connection.destination.inputIndex || 0] = sourceData;\n      }\n    }\n\n    // If no connections, use workflow input data\n    if (inputConnections.length === 0) {\n      return execution.inputData;\n    }\n\n    return inputData;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts",
        "start": 361,
        "end": 391,
        "startLoc": {
          "line": 361,
          "column": 2,
          "position": 2678
        },
        "endLoc": {
          "line": 391,
          "column": 2,
          "position": 2924
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/workflowengine/execution-utilities.ts",
        "start": 67,
        "end": 99,
        "startLoc": {
          "line": 67,
          "column": 1,
          "position": 445
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 691
        }
      }
    },
    {
      "format": "typescript",
      "lines": 50,
      "fragment": "} catch (error) {\n      this.logger.error('Failed to start workers', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Add workflow execution job to queue\n   */\n  async addWorkflowJob(\n    workflow: WorkflowDefinition,\n    inputData: Record<string, any> = {},\n    options: {\n      executionId?: string;\n      priority?: number;\n      delay?: number;\n      attempts?: number;\n    } = {}\n  ): Promise<string> {\n    const executionId =\n      options.executionId || `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const jobData: WorkflowJob = {\n      workflow,\n      inputData,\n      executionId,\n      priority: options.priority,\n      delay: options.delay,\n      attempts: options.attempts,\n    };\n\n    const job = await this.workflowQueue.add(`workflow-${workflow.id}`, jobData, {\n      priority: options.priority,\n      delay: options.delay,\n      attempts: options.attempts || this.options.retryAttempts,\n      jobId: executionId,\n    });\n\n    this.logger.info('Workflow job added to queue', {\n      jobId: job.id,\n      executionId,\n      workflowId: workflow.id,\n    });\n\n    return executionId;\n  }\n\n  /**\n   * Get job status and details\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 134,
        "end": 183,
        "startLoc": {
          "line": 134,
          "column": 5,
          "position": 1065
        },
        "endLoc": {
          "line": 183,
          "column": 6,
          "position": 1428
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/job-management.ts",
        "start": 42,
        "end": 100,
        "startLoc": {
          "line": 42,
          "column": 1,
          "position": 261
        },
        "endLoc": {
          "line": 100,
          "column": 4,
          "position": 621
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "getJobStatus(executionId: string): Promise<{\n    status: string;\n    progress?: number;\n    result?: any;\n    error?: string;\n  } | null> {\n    try {\n      const job = await this.workflowQueue.getJob(executionId);\n      if (!job) return null;\n\n      const state = await job.getState();\n\n      return {\n        status: state,\n        progress: job.progress as number,\n        result: job.returnvalue,\n        error: job.failedReason,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 184,
        "end": 200,
        "startLoc": {
          "line": 184,
          "column": 2,
          "position": 1433
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1583
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/job-management.ts",
        "start": 102,
        "end": 122,
        "startLoc": {
          "line": 102,
          "column": 1,
          "position": 626
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 777
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "} catch (error) {\n      this.logger.error('Failed to get job status', { executionId, error });\n      return null;\n    }\n  }\n\n  /**\n   * Cancel a job\n   */\n  async cancelJob(executionId: string): Promise<boolean> {\n    try {\n      const job = await this.workflowQueue.getJob(executionId);\n      if (!job) return false;\n\n      await job.remove();\n\n      this.logger.info('Job cancelled', { executionId });\n      return true;\n    } catch (error) {\n      this.logger.error('Failed to cancel job', { executionId, error });\n      return false;\n    }\n  }\n\n  /**\n   * Get queue statistics\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 202,
        "end": 228,
        "startLoc": {
          "line": 202,
          "column": 5,
          "position": 1590
        },
        "endLoc": {
          "line": 228,
          "column": 6,
          "position": 1775
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-operations.ts",
        "start": 2,
        "end": 30,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 30,
          "column": 4,
          "position": 183
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": ": Promise<{\n    active: number;\n    waiting: number;\n    completed: number;\n    failed: number;\n    delayed: number;\n  }> {\n    try {\n      const [active, waiting, completed, failed, delayed] = await Promise.all([\n        this.workflowQueue.getActive(),\n        this.workflowQueue.getWaiting(),\n        this.workflowQueue.getCompleted(),\n        this.workflowQueue.getFailed(),\n        this.workflowQueue.getDelayed(),\n      ]);\n\n      return {\n        active: active.length,\n        waiting: waiting.length,\n        completed: completed.length,\n        failed: failed.length,\n        delayed: delayed.length,\n      };\n    } catch (error) {\n      this.logger.error('Failed to get queue stats', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up completed and failed jobs\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 229,
        "end": 260,
        "startLoc": {
          "line": 229,
          "column": 2,
          "position": 1783
        },
        "endLoc": {
          "line": 260,
          "column": 6,
          "position": 2017
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-operations.ts",
        "start": 33,
        "end": 67,
        "startLoc": {
          "line": 33,
          "column": 1,
          "position": 193
        },
        "endLoc": {
          "line": 67,
          "column": 4,
          "position": 426
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "cleanQueue(\n    options: {\n      maxAge?: number; // milliseconds\n      maxCount?: number;\n    } = {}\n  ): Promise<void> {\n    try {\n      const maxAge = options.maxAge || 24 * 60 * 60 * 1000; // 24 hours\n      const maxCount = options.maxCount || 1000;\n\n      await this.workflowQueue.clean(maxAge, maxCount, 'completed');\n      await this.workflowQueue.clean(maxAge, maxCount, 'failed');\n\n      this.logger.info('Queue cleaned', { maxAge, maxCount });\n    } catch (error) {\n      this.logger.error('Failed to clean queue', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Shutdown workers and close connections\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 261,
        "end": 283,
        "startLoc": {
          "line": 261,
          "column": 2,
          "position": 2022
        },
        "endLoc": {
          "line": 283,
          "column": 6,
          "position": 2223
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-operations.ts",
        "start": 69,
        "end": 94,
        "startLoc": {
          "line": 69,
          "column": 1,
          "position": 431
        },
        "endLoc": {
          "line": 94,
          "column": 4,
          "position": 628
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": Promise<void> {\n    try {\n      // Close all workers\n      await Promise.all(this.workers.map((worker) => worker.close()));\n\n      // Close queue\n      await this.workflowQueue.close();\n\n      // Close Redis connection\n      await this.redis.quit();\n\n      this.logger.info('Queue manager shutdown complete');\n    } catch (error) {\n      this.logger.error('Error during shutdown', { error });\n      throw error;\n    }\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 284,
        "end": 300,
        "startLoc": {
          "line": 284,
          "column": 2,
          "position": 2231
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2359
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-operations.ts",
        "start": 97,
        "end": 114,
        "startLoc": {
          "line": 97,
          "column": 1,
          "position": 638
        },
        "endLoc": {
          "line": 114,
          "column": 2,
          "position": 765
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "processWorkflowJob(job: Job<WorkflowJob>): Promise<WorkflowExecution> {\n    const { workflow, inputData, executionId } = job.data;\n\n    try {\n      // Update job progress\n      await job.updateProgress(0);\n\n      // Execute workflow\n      const execution = await this.workflowEngine.executeWorkflow(workflow, inputData, {\n        executionId,\n        waitForCompletion: true,\n      });\n\n      // Update progress based on execution\n      const progress = Math.round(\n        (execution.metadata.completedNodes / execution.metadata.totalNodes) * 100\n      );\n      await job.updateProgress(progress);\n\n      return execution;\n    } catch (error) {\n      this.logger.error('Workflow execution failed in queue', {\n        jobId: job.id,\n        executionId,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup event handlers for monitoring\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 305,
        "end": 337,
        "startLoc": {
          "line": 305,
          "column": 2,
          "position": 2370
        },
        "endLoc": {
          "line": 337,
          "column": 6,
          "position": 2597
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-processing.ts",
        "start": 6,
        "end": 40,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 7
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 233
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ": void {\n    this.workflowQueue.on('error', (error) => {\n      this.logger.error('Queue error', { error });\n    });\n\n    this.redis.on('error', (error) => {\n      this.logger.error('Redis error', { error });\n    });\n\n    this.redis.on('connect', () => {\n      this.logger.info('Redis connected');\n    });\n\n    this.redis.on('disconnect', () => {\n      this.logger.warn('Redis disconnected');\n    });\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts",
        "start": 338,
        "end": 355,
        "startLoc": {
          "line": 338,
          "column": 2,
          "position": 2605
        },
        "endLoc": {
          "line": 355,
          "column": 2,
          "position": 2765
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/queuemanager/queue-processing.ts",
        "start": 43,
        "end": 61,
        "startLoc": {
          "line": 43,
          "column": 1,
          "position": 242
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 401
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "this.options = {\n      validateQuery: false,\n      validateBody: true,\n      validateParams: false,\n      validateHeaders: false,\n      validateCookies: false,\n      validateFiles: false,\n      allowUnknown: false,\n      stripUnknown: true,\n      abortEarly: true,\n      messages: {},\n      ...options,\n      onError: options.onError || this",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/ValidationMiddleware.ts",
        "start": 89,
        "end": 101,
        "startLoc": {
          "line": 89,
          "column": 5,
          "position": 396
        },
        "endLoc": {
          "line": 101,
          "column": 5,
          "position": 490
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 92
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 186
        }
      }
    },
    {
      "format": "typescript",
      "lines": 97,
      "fragment": "{ Collection, Db, MongoClient } from 'mongodb';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface WorkflowDefinition {\n  id: string;\n  name: string;\n  description?: string;\n  version: string;\n  nodes: WorkflowNode[];\n  edges: WorkflowEdge[];\n  settings: WorkflowSettings;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  organizationId: string;\n  tags?: string[];\n  status: 'draft' | 'active' | 'archived';\n  permissions: WorkflowPermissions;\n}\n\nexport interface WorkflowNode {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data: Record<string, any>;\n  config?: NodeConfiguration;\n}\n\nexport interface NodeConfiguration {\n  retryPolicy?: {\n    maxAttempts: number;\n    backoffMultiplier: number;\n    initialInterval: number;\n  };\n  timeout?: number;\n  skipOnError?: boolean;\n}\n\nexport interface WorkflowEdge {\n  id: string;\n  source: string;\n  target: string;\n  sourceHandle?: string;\n  targetHandle?: string;\n  condition?: EdgeCondition;\n}\n\nexport interface EdgeCondition {\n  type: 'expression' | 'value' | 'status';\n  expression?: string;\n  value?: any;\n  operator?: 'eq' | 'neq' | 'gt' | 'lt' | 'gte' | 'lte' | 'contains' | 'matches';\n}\n\nexport interface WorkflowSettings {\n  timeout: number;\n  retries: number;\n  errorHandling: 'stop' | 'continue' | 'rollback';\n  scheduling?: SchedulingConfig;\n  notifications?: NotificationConfig;\n  monitoring?: MonitoringConfig;\n}\n\nexport interface SchedulingConfig {\n  type: 'cron' | 'interval' | 'webhook';\n  cron?: string;\n  interval?: number;\n  webhook?: {\n    url: string;\n    secret?: string;\n  };\n}\n\nexport interface NotificationConfig {\n  onSuccess?: string[];\n  onFailure?: string[];\n  channels: Array<'email' | 'slack' | 'webhook'>;\n}\n\nexport interface MonitoringConfig {\n  enableMetrics: boolean;\n  enableTracing: boolean;\n  alertThresholds?: {\n    executionTime?: number;\n    errorRate?: number;\n  };\n}\n\nexport interface WorkflowPermissions {\n  public: boolean;\n  sharedWith: string[];\n  roles: Record<string, string[]>;\n}\n\nexport interface WorkflowExecution {\n  id: string;\n  workflowId: string;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 4,
        "end": 100,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 45
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 759
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-types.ts",
        "start": 4,
        "end": 100,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 41
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 755
        }
      }
    },
    {
      "format": "typescript",
      "lines": 53,
      "fragment": "status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  startedAt: Date;\n  completedAt?: Date;\n  duration?: number;\n  input: Record<string, any>;\n  output?: Record<string, any>;\n  error?: any;\n  nodeExecutions: NodeExecution[];\n  metadata: ExecutionMetadata;\n}\n\nexport interface NodeExecution {\n  nodeId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped';\n  startedAt?: Date;\n  completedAt?: Date;\n  input?: any;\n  output?: any;\n  error?: any;\n  attempts: number;\n}\n\nexport interface ExecutionMetadata {\n  triggeredBy: string;\n  triggerType: 'manual' | 'scheduled' | 'webhook' | 'api';\n  environment: string;\n  correlationId?: string;\n}\n\nexport class WorkflowService extends EventEmitter {\n  private db: Db;\n  private workflows: Collection<WorkflowDefinition>;\n  private executions: Collection<WorkflowExecution>;\n  private cache: Redis;\n  private readonly CACHE_TTL = 3600; // 1 hour\n\n  constructor(\n    private mongoClient: MongoClient,\n    private redisClient: Redis\n  ) {\n    super();\n    this.cache = redisClient;\n    this.db = mongoClient.db('reporunner');\n    this.workflows = this.db.collection<WorkflowDefinition>('workflows');\n    this.executions = this.db.collection<WorkflowExecution>('workflow_executions');\n    this.initializeIndexes();\n  }\n\n  private async initializeIndexes(): Promise<void> {\n    try {\n      // Create indexes for efficient queries\n      await this.workflows.createIndex({ organizationId: 1, createdAt: -1 });\n      await this.workflows.createIndex({ tags",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 101,
        "end": 153,
        "startLoc": {
          "line": 101,
          "column": 3,
          "position": 762
        },
        "endLoc": {
          "line": 153,
          "column": 5,
          "position": 1242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-service.ts",
        "start": 1,
        "end": 53,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 53,
          "column": 7,
          "position": 472
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ": 1 });\n      await this.workflows.createIndex({ status: 1 });\n      await this.workflows.createIndex({ createdBy: 1 });\n      await this.workflows.createIndex({ name: 'text', description: 'text' });\n\n      await this.executions.createIndex({ workflowId: 1, startedAt: -1 });\n      await this.executions.createIndex({ status: 1 });\n      await this.executions.createIndex({ 'metadata.correlationId': 1 });\n\n      logger.info('Database indexes initialized');\n    } catch (error) {\n      logger.error('Failed to create indexes', error);\n    }\n  }\n\n  async create(\n    workflow: Omit<WorkflowDefinition, 'id' | 'version' | 'createdAt' | 'updatedAt'>,\n    userId: string\n  ): Promise<WorkflowDefinition> {\n    const newWorkflow: WorkflowDefinition = {\n      ...workflow,\n      id: uuidv4(),\n      version: '1.0.0',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: userId,\n      status: workflow.status || 'draft',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 153,
        "end": 179,
        "startLoc": {
          "line": 153,
          "column": 5,
          "position": 1243
        },
        "endLoc": {
          "line": 179,
          "column": 2,
          "position": 1546
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-service.ts",
        "start": 53,
        "end": 80,
        "startLoc": {
          "line": 53,
          "column": 7,
          "position": 473
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 780
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "};\n\n    try {\n      // Validate workflow structure\n      this.validateWorkflow(newWorkflow);\n\n      // Save to database\n      await this.workflows.insertOne(newWorkflow);\n\n      // Cache the workflow\n      await this.cacheWorkflow(newWorkflow);\n\n      // Emit event for other services\n      this.emit('workflow.created', {\n        workflowId: newWorkflow.id,\n        userId,\n        organizationId: newWorkflow.organizationId,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 180,
        "end": 196,
        "startLoc": {
          "line": 180,
          "column": 5,
          "position": 1549
        },
        "endLoc": {
          "line": 196,
          "column": 2,
          "position": 1636
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-service.ts",
        "start": 80,
        "end": 97,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 780
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 872
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "} catch (error) {\n      logger.error('Failed to create workflow', error);\n      throw error;\n    }\n  }\n\n  async get(id: string): Promise<WorkflowDefinition | null> {\n    try {\n      // Check cache first\n      const cached = await this.getCachedWorkflow(id);\n      if (cached) return cached;\n\n      // Fetch from database\n      const workflow = await this.workflows.findOne({ id });\n\n      if (workflow) {\n        // Cache for future requests\n        await this.cacheWorkflow(workflow);\n      }\n\n      return workflow;\n    } catch (error) {\n      logger.error(`Failed to get workflow ${id}`, error);\n      throw error;\n    }\n  }\n\n  async update",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 201,
        "end": 228,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1666
        },
        "endLoc": {
          "line": 228,
          "column": 7,
          "position": 1865
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-operations.ts",
        "start": 1,
        "end": 30,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 194
        }
      }
    },
    {
      "format": "typescript",
      "lines": 52,
      "fragment": "update(\n    id: string,\n    updates: Partial<WorkflowDefinition>,\n    userId: string\n  ): Promise<WorkflowDefinition> {\n    try {\n      const existing = await this.get(id);\n      if (!existing) {\n        throw new Error(`Workflow ${id} not found`);\n      }\n\n      // Check permissions\n      if (!this.hasEditPermission(existing, userId)) {\n        throw new Error('Insufficient permissions to edit workflow');\n      }\n\n      const updated: WorkflowDefinition = {\n        ...existing,\n        ...updates,\n        id, // Preserve original ID\n        version: this.incrementVersion(existing.version),\n        updatedAt: new Date(),\n      };\n\n      // Validate updated workflow\n      this.validateWorkflow(updated);\n\n      // Save version history\n      await this.saveVersionHistory(existing);\n\n      // Update in database\n      await this.workflows.replaceOne({ id }, updated);\n\n      // Invalidate cache\n      await this.invalidateCache(id);\n\n      // Emit update event\n      this.emit('workflow.updated', {\n        workflowId: id,\n        userId,\n        changes: updates,\n      });\n\n      logger.info(`Workflow updated: ${id}`);\n      return updated;\n    } catch (error) {\n      logger.error(`Failed to update workflow ${id}`, error);\n      throw error;\n    }\n  }\n\n  async delete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 228,
        "end": 279,
        "startLoc": {
          "line": 228,
          "column": 2,
          "position": 1865
        },
        "endLoc": {
          "line": 279,
          "column": 7,
          "position": 2213
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-operations.ts",
        "start": 31,
        "end": 84,
        "startLoc": {
          "line": 31,
          "column": 1,
          "position": 196
        },
        "endLoc": {
          "line": 84,
          "column": 2,
          "position": 542
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "delete(id: string, userId: string): Promise<boolean> {\n    try {\n      const workflow = await this.get(id);\n      if (!workflow) {\n        return false;\n      }\n\n      // Check permissions\n      if (!this.hasDeletePermission(workflow, userId)) {\n        throw new Error('Insufficient permissions to delete workflow');\n      }\n\n      // Soft delete by updating status\n      await this.workflows.updateOne(\n        { id },\n        {\n          $set: {\n            status: 'archived',\n            archivedAt: new Date(),\n            archivedBy: userId,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 279,
        "end": 298,
        "startLoc": {
          "line": 279,
          "column": 2,
          "position": 2213
        },
        "endLoc": {
          "line": 298,
          "column": 2,
          "position": 2367
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/workflow-operations.ts",
        "start": 85,
        "end": 107,
        "startLoc": {
          "line": 85,
          "column": 1,
          "position": 544
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 705
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "logger.info(`Workflow deleted: ${id}`);\n      return true;\n    } catch (error) {\n      logger.error(`Failed to delete workflow ${id}`, error);\n      throw error;\n    }\n  }\n\n  async list(\n    filters: {\n      organizationId?: string;\n      userId?: string;\n      status?: string;\n      tags?: string[];\n      search?: string;\n    },\n    pagination: {\n      page: number;\n      limit: number;\n      sort?: Record<string, 1 | -1>;\n    }\n  ): Promise<{ workflows: WorkflowDefinition[]; total: number }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 315,
        "end": 336,
        "startLoc": {
          "line": 315,
          "column": 7,
          "position": 2442
        },
        "endLoc": {
          "line": 336,
          "column": 2,
          "position": 2621
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/execution-management.ts",
        "start": 17,
        "end": 45,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 54
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 229
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "}> {\n    try {\n      const query: any = {};\n\n      if (filters.organizationId) {\n        query.organizationId = filters.organizationId;\n      }\n\n      if (filters.userId) {\n        query.$or = [{ createdBy: filters.userId }, { 'permissions.sharedWith': filters.userId }];\n      }\n\n      if (filters.status) {\n        query.status = filters.status;\n      }\n\n      if (filters.tags && filters.tags.length > 0) {\n        query.tags = { $in: filters.tags };\n      }\n\n      if (filters.search) {\n        query.$text = { $search: filters.search };\n      }\n\n      const skip = (pagination.page - 1) * pagination.limit;\n      const sort = pagination.sort || { createdAt: -1 };\n\n      const [workflows, total] = await Promise.all([\n        this.workflows.find(query).sort(sort).skip(skip).limit(pagination.limit).toArray(),\n        this.workflows.countDocuments(query),\n      ]);\n\n      return { workflows, total };\n    } catch (error) {\n      logger.error('Failed to list workflows', error);\n      throw error;\n    }\n  }\n\n  private validateWorkflow(workflow: WorkflowDefinition): void {\n    // Validate workflow has at least one node\n    if (!workflow.nodes || workflow.nodes.length === 0) {\n      throw new Error('Workflow must have at least one node');\n    }\n\n    // Validate node IDs are unique\n    const nodeIds = new Set(workflow.nodes.map((",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 336,
        "end": 382,
        "startLoc": {
          "line": 336,
          "column": 2,
          "position": 2621
        },
        "endLoc": {
          "line": 382,
          "column": 2,
          "position": 3074
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/execution-management.ts",
        "start": 46,
        "end": 97,
        "startLoc": {
          "line": 46,
          "column": 1,
          "position": 231
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 685
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "=> n.id));\n    if (nodeIds.size !== workflow.nodes.length) {\n      throw new Error('Duplicate node IDs found');\n    }\n\n    // Validate edges reference existing nodes\n    for (const edge of workflow.edges) {\n      if (!nodeIds.has(edge.source) || !nodeIds.has(edge.target)) {\n        throw new Error(`Edge references non-existent node: ${edge.id}`);\n      }\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index.ts",
        "start": 382,
        "end": 392,
        "startLoc": {
          "line": 382,
          "column": 2,
          "position": 3078
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 3191
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/index/execution-management.ts",
        "start": 97,
        "end": 107,
        "startLoc": {
          "line": 97,
          "column": 2,
          "position": 687
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 801
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "let result = template;\n    Object.entries(variables).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`;\n      result = result.replace(new RegExp(placeholder, 'g'), String(value));\n    });\n    return result;\n  }\n}\n\nexport interface",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/templates.ts",
        "start": 20,
        "end": 29,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 210
        },
        "endLoc": {
          "line": 29,
          "column": 10,
          "position": 302
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/templates.ts",
        "start": 8,
        "end": 17,
        "startLoc": {
          "line": 8,
          "column": 5,
          "position": 78
        },
        "endLoc": {
          "line": 17,
          "column": 6,
          "position": 170
        }
      }
    },
    {
      "format": "typescript",
      "lines": 77,
      "fragment": "const mockEvents: AuditEvent[] = [];\n      const eligibleEvents = mockEvents.filter((event) => {\n        const isOldEnough = event.timestamp < cutoffDate;\n        const matchesPolicy = this.eventMatchesPolicy(event, policy);\n        return isOldEnough && matchesPolicy;\n      });\n\n      job.eventsProcessed = eligibleEvents.length;\n\n      for (const event of eligibleEvents) {\n        if (policy.archiveBeforeDelete) {\n          await this.archiveEvent(event);\n          job.eventsArchived++;\n        }\n\n        await this.deleteEvent(event.id);\n        job.eventsDeleted++;\n      }\n\n      job.status = 'completed';\n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : 'Unknown error';\n    }\n  }\n\n  getJobs(status?: RetentionJob['status']): RetentionJob[] {\n    if (status) {\n      return this.jobs.filter((job) => job.status === status);\n    }\n    return [...this.jobs];\n  }\n\n  getJob(id: string): RetentionJob | undefined {\n    return this.jobs.find((job) => job.id === id);\n  }\n\n  private eventMatchesPolicy(event: AuditEvent, policy: RetentionPolicy): boolean {\n    // Category-based filtering\n    if (policy.category !== 'all') {\n      const categoryMap: Record<string, string[]> = {\n        security: ['login', 'logout', 'password_change', 'permission_change'],\n        access: ['read', 'write', 'delete', 'admin_access'],\n        data: ['data_export', 'data_import', 'data_deletion'],\n        operational: ['workflow_execution', 'system_event'],\n      };\n\n      const categoryActions = categoryMap[policy.category] || [];\n      if (!categoryActions.some((action) => event.action.includes(action))) {\n        return false;\n      }\n    }\n\n    // Custom condition filtering\n    if (policy.conditions) {\n      return policy.conditions.every((condition) => {\n        const eventValue = this.getFieldValue(event, condition.field);\n\n        switch (condition.operator) {\n          case 'equals':\n            return eventValue === condition.value;\n          case 'contains':\n            return String(eventValue).includes(String(condition.value));\n          case 'greater_than':\n            return Number(eventValue) > Number(condition.value);\n          case 'less_than':\n            return Number(eventValue) < Number(condition.value);\n          default:\n            return false;\n        }\n      });\n    }\n\n    return true;\n  }\n\n  private async archiveEvent",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts",
        "start": 101,
        "end": 177,
        "startLoc": {
          "line": 101,
          "column": 7,
          "position": 924
        },
        "endLoc": {
          "line": 177,
          "column": 13,
          "position": 1654
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention/retention-processing.ts",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 716
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "deleteEvent(_eventId: string): Promise<void> {\n    // TODO: Implement event deletion from primary storage\n  }\n\n  private updateJobStatus(jobId: string, status: RetentionJob['status'], error?: string): void {\n    const job = this.jobs.find((j) => j.id === jobId);\n    if (job) {\n      job.status = status;\n      if (error) job.error = error;\n    }\n  }\n\n  private getFieldValue(event: AuditEvent, field: string): any {\n    const fields = field.split('.');\n    let value: any = event;\n\n    for (const f of fields) {\n      value = value?.[f];\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts",
        "start": 182,
        "end": 200,
        "startLoc": {
          "line": 182,
          "column": 2,
          "position": 1685
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1891
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention/retention-processing.ts",
        "start": 95,
        "end": 121,
        "startLoc": {
          "line": 95,
          "column": 1,
          "position": 749
        },
        "endLoc": {
          "line": 121,
          "column": 2,
          "position": 954
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(event: AuditEvent, field: string): any {\n    const fields = field.split('.');\n    let value: any = event;\n\n    for (const f of fields) {\n      value = value?.[f];\n    }\n\n    return value;\n  }\n\n  private initializeDefaultPolicies",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts",
        "start": 194,
        "end": 205,
        "startLoc": {
          "line": 194,
          "column": 14,
          "position": 1815
        },
        "endLoc": {
          "line": 205,
          "column": 26,
          "position": 1907
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/index/analytics-integration.ts",
        "start": 75,
        "end": 89,
        "startLoc": {
          "line": 75,
          "column": 19,
          "position": 541
        },
        "endLoc": {
          "line": 89,
          "column": 22,
          "position": 632
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": "return value;\n  }\n\n  private initializeDefaultPolicies(): void {\n    // Standard retention policies for different compliance requirements\n    this.policies.push(\n      {\n        id: 'default-security',\n        name: 'Security Events',\n        description: 'Retain security-related events for 7 years',\n        retentionPeriodDays: 2555, // 7 years\n        category: 'security',\n        archiveBeforeDelete: true,\n      },\n      {\n        id: 'default-access',\n        name: 'Access Logs',\n        description: 'Retain access logs for 1 year',\n        retentionPeriodDays: 365,\n        category: 'access',\n        archiveBeforeDelete: true,\n      },\n      {\n        id: 'default-operational',\n        name: 'Operational Events',\n        description: 'Retain operational events for 90 days',\n        retentionPeriodDays: 90,\n        category: 'operational',\n        archiveBeforeDelete: false,\n      }\n    );\n  }\n\n  private generateId():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts",
        "start": 202,
        "end": 235,
        "startLoc": {
          "line": 202,
          "column": 5,
          "position": 1895
        },
        "endLoc": {
          "line": 235,
          "column": 2,
          "position": 2089
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention/retention-policies.ts",
        "start": 1,
        "end": 36,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 191
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "}\n\n  private getFieldValue(event: AuditEvent, field: string): any {\n    const fields = field.split('.');\n    let value: any = event;\n\n    for (const f of fields) {\n      value = value?.[f];\n    }\n\n    return value;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/compliance.ts",
        "start": 133,
        "end": 145,
        "startLoc": {
          "line": 133,
          "column": 3,
          "position": 1240
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 1335
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/retention.ts",
        "start": 192,
        "end": 88,
        "startLoc": {
          "line": 192,
          "column": 3,
          "position": 1808
        },
        "endLoc": {
          "line": 88,
          "column": 8,
          "position": 630
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "import type { ReportDefinition } from './reports';\n\nexport interface Widget {\n  id: string;\n  type: 'metric' | 'chart' | 'table' | 'text';\n  title: string;\n  reportId: string;\n  position: { x: number; y: number; width: number; height: number };\n  config: Record<string, any>;\n}\n\nexport interface Dashboard {\n  id: string;\n  name: string;\n  description: string;\n  organizationId: string;\n  ownerId: string;\n  widgets: Widget[];\n  layout: 'grid' | 'freeform';\n  shared: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DashboardTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: 'executive' | 'operational' | 'technical' | 'custom';\n  widgets: Omit<Widget, 'id'>[];\n  reports: ReportDefinition[];\n}\n\nexport class DashboardManager {\n  private dashboards = new Map<string, Dashboard>();\n  private templates = new Map<string, DashboardTemplate>();\n\n  constructor() {\n    this.initializeTemplates();\n  }\n\n  async createDashboard(\n    dashboard: Omit<Dashboard, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<string> {\n    const newDashboard: Dashboard = {\n      ...dashboard,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.dashboards.set(newDashboard.id, newDashboard);\n    return newDashboard.id;\n  }\n\n  async updateDashboard(id: string, updates: Partial<Dashboard>): Promise<boolean> {\n    const existing = this.dashboards.get(id);\n    if (!existing) return false;\n\n    this.dashboards.set(id, {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    });\n    return true;\n  }\n\n  async deleteDashboard(id: string): Promise<boolean> {\n    return this.dashboards.delete(id);\n  }\n\n  async getDashboard(id: string): Promise<Dashboard | undefined> {\n    return this.dashboards.get(id);\n  }\n\n  async getDashboards(organizationId?: string, userId?: string): Promise<Dashboard[]> {\n    const dashboards = Array.from(this.dashboards.values());\n\n    return dashboards.filter((dashboard) => {\n      const matchesOrg = !organizationId || dashboard.organizationId === organizationId;\n      const matchesUser = !userId || dashboard.ownerId === userId || dashboard.shared;\n      return matchesOrg && matchesUser;\n    });\n  }\n\n  async addWidget(dashboardId: string, widget: Omit<Widget, 'id'>): Promise<string> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    const newWidget: Widget = {\n      ...widget,\n      id: this.generateId(),\n    };\n\n    dashboard.widgets.push(newWidget);\n    dashboard.updatedAt = new Date();\n\n    return newWidget.id;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 920
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-core.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 920
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "}\n\n  async updateWidget(\n    dashboardId: string,\n    widgetId: string,\n    updates: Partial<Widget>\n  ): Promise<boolean> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) return false;\n\n    const widgetIndex = dashboard.widgets.findIndex((w) => w.id === widgetId);\n    if (widgetIndex === -1) return false;\n\n    dashboard.widgets[widgetIndex] = {\n      ...dashboard.widgets[widgetIndex],\n      ...updates,\n    };\n    dashboard.updatedAt = new Date();\n\n    return true;\n  }\n\n  async removeWidget",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 101,
        "end": 123,
        "startLoc": {
          "line": 101,
          "column": 3,
          "position": 923
        },
        "endLoc": {
          "line": 123,
          "column": 13,
          "position": 1103
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 177
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "removeWidget(dashboardId: string, widgetId: string): Promise<boolean> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) return false;\n\n    const widgetIndex = dashboard.widgets.findIndex((w) => w.id === widgetId);\n    if (widgetIndex === -1) return false;\n\n    dashboard.widgets.splice(widgetIndex, 1);\n    dashboard.updatedAt = new Date();\n\n    return true;\n  }\n\n  async createFromTemplate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 123,
        "end": 136,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 1103
        },
        "endLoc": {
          "line": 136,
          "column": 19,
          "position": 1245
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 25,
        "end": 40,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 179
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 319
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "createFromTemplate(\n    templateId: string,\n    organizationId: string,\n    ownerId: string,\n    name?: string\n  ): Promise<string> {\n    const template = this.templates.get(templateId);\n    if (!template) {\n      throw new Error(`Template not found: ${templateId}`);\n    }\n\n    const dashboard: Omit<Dashboard, 'id' | 'createdAt' | 'updatedAt'> = {\n      name: name || `${template.name} Dashboard`,\n      description: template.description,\n      organizationId,\n      ownerId,\n      widgets: template.widgets.map((widget) => ({\n        ...widget,\n        id: this.generateId(),\n      })),\n      layout: 'grid',\n      shared: false,\n    };\n\n    return this.createDashboard(dashboard);\n  }\n\n  getTemplates():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 136,
        "end": 163,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 1245
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1472
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 41,
        "end": 70,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 321
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 547
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": ": void {\n    // Executive Dashboard Template\n    this.templates.set('executive', {\n      id: 'executive',\n      name: 'Executive Overview',\n      description: 'High-level metrics for executives and stakeholders',\n      category: 'executive',\n      widgets: [\n        {\n          type: 'metric',\n          title: 'Total Workflows',\n          reportId: 'workflow-count',\n          position: { x: 0, y: 0, width: 3, height: 2 },\n          config: { format: 'number' },\n        },\n        {\n          type: 'metric',\n          title: 'Active Users',\n          reportId: 'active-users',\n          position: { x: 3, y: 0, width: 3, height: 2 },\n          config: { format: 'number' },\n        },\n        {\n          type: 'chart',\n          title: 'Workflow Executions Over Time',\n          reportId: 'executions-timeline',\n          position: { x: 0, y: 2, width: 6, height: 4 },\n          config: { chartType: 'line' },\n        },\n      ],\n      reports: [],\n    });\n\n    // Operational Dashboard Template",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 167,
        "end": 200,
        "startLoc": {
          "line": 167,
          "column": 2,
          "position": 1507
        },
        "endLoc": {
          "line": 200,
          "column": 34,
          "position": 1803
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-operations.ts",
        "start": 78,
        "end": 112,
        "startLoc": {
          "line": 78,
          "column": 1,
          "position": 584
        },
        "endLoc": {
          "line": 112,
          "column": 34,
          "position": 879
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "this.templates.set('operational', {\n      id: 'operational',\n      name: 'Operational Metrics',\n      description: 'Day-to-day operational insights and performance metrics',\n      category: 'operational',\n      widgets: [\n        {\n          type: 'metric',\n          title: 'Success Rate',\n          reportId: 'success-rate',\n          position: { x: 0, y: 0, width: 2, height: 2 },\n          config: { format: 'percentage' },\n        },\n        {\n          type: 'metric',\n          title: 'Avg Execution Time',\n          reportId: 'avg-execution-time',\n          position: { x: 2, y: 0, width: 2, height: 2 },\n          config: { format: 'duration' },\n        },\n        {\n          type: 'table',\n          title: 'Recent Failures',\n          reportId: 'recent-failures',\n          position: { x: 0, y: 2, width: 4, height: 4 },\n          config: { maxRows: 10 },\n        },\n      ],\n      reports: [],\n    });\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards.ts",
        "start": 201,
        "end": 236,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1806
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 2132
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/dashboards/dashboard-templates.ts",
        "start": 1,
        "end": 37,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 323
        }
      }
    },
    {
      "format": "typescript",
      "lines": 96,
      "fragment": "if (schema.abortEarly) {\n          break;\n        }\n        continue;\n      }\n\n      // Apply default value if not present\n      if (value === undefined && rule.default !== undefined) {\n        value = typeof rule.default === 'function' ? rule.default() : rule.default;\n      }\n\n      // Skip validation if value is not present and not required\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      // Sanitize value first if requested\n      if (rule.sanitize) {\n        value = sanitizeInput(value, rule);\n      }\n\n      // Validate type\n      const typeError = validateType(value, rule.type);\n      if (typeError) {\n        errors.push({\n          field: rule.field,\n          message: typeError,\n          value,\n          location,\n        });\n\n        if (schema.abortEarly) {\n          break;\n        }\n        continue;\n      }\n\n      // Validate constraints\n      const constraintErrors = validateConstraints(value, rule);\n      if (constraintErrors.length > 0) {\n        errors.push(\n          ...constraintErrors.map((error) => ({\n            field: rule.field,\n            message: error,\n            value,\n            location,\n          }))\n        );\n\n        if (schema.abortEarly) {\n          break;\n        }\n        continue;\n      }\n\n      // Apply transformation\n      if (rule.transform) {\n        value = rule.transform(value);\n      }\n\n      // Store validated value\n      validatedData[rule.field] = value;\n    }\n\n    // Handle unknown fields\n    if (schema.stripUnknown) {\n      for (const location of ['body', 'query', 'params']) {\n        const source = req[location as keyof Request] as any;\n        if (source && typeof source === 'object') {\n          const knownFields = schema.rules\n            .filter((r) => (r.location || 'body') === location)\n            .map((r) => r.field);\n\n          for (const key of Object.keys(source)) {\n            if (!knownFields.includes(key)) {\n              if (!schema.allowUnknown) {\n                errors.push({\n                  field: key,\n                  message: `Unknown field: ${key}`,\n                  location,\n                });\n              }\n              delete source[key];\n            }\n          }\n        }\n      }\n    }\n\n    // Return errors if any\n    if (errors.length > 0) {\n      res.status(400).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.VALIDATION_ERROR,\n          message: 'Validation failed',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 105,
        "end": 200,
        "startLoc": {
          "line": 105,
          "column": 9,
          "position": 789
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1495
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/schema-validation.ts",
        "start": 5,
        "end": 100,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 20
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 695
        }
      }
    },
    {
      "format": "typescript",
      "lines": 90,
      "fragment": "}\n\n/**\n * Validate type of value\n */\nfunction validateType(value: any, type?: string): string | null {\n  if (!type) return null;\n\n  switch (type) {\n    case 'string':\n      if (typeof value !== 'string') {\n        return `Expected string, got ${typeof value}`;\n      }\n      break;\n\n    case 'number':\n      if (typeof value !== 'number' || Number.isNaN(value)) {\n        return `Expected number, got ${typeof value}`;\n      }\n      break;\n\n    case 'boolean':\n      if (typeof value !== 'boolean') {\n        return `Expected boolean, got ${typeof value}`;\n      }\n      break;\n\n    case 'email':\n      if (!validator.isEmail(value)) {\n        return 'Invalid email address';\n      }\n      break;\n\n    case 'url':\n      if (!validator.isURL(value)) {\n        return 'Invalid URL';\n      }\n      break;\n\n    case 'uuid':\n      if (!validator.isUUID(value)) {\n        return 'Invalid UUID';\n      }\n      break;\n\n    case 'json':\n      try {\n        JSON.parse(value);\n      } catch {\n        return 'Invalid JSON';\n      }\n      break;\n\n    case 'array':\n      if (!Array.isArray(value)) {\n        return 'Expected array';\n      }\n      break;\n\n    case 'object':\n      if (typeof value !== 'object' || Array.isArray(value)) {\n        return 'Expected object';\n      }\n      break;\n  }\n\n  return null;\n}\n\n/**\n * Validate constraints\n */\nfunction validateConstraints(value: any, rule: ValidationRule): string[] {\n  const errors: string[] = [];\n\n  // Min/Max for numbers\n  if (typeof value === 'number') {\n    if (rule.min !== undefined && value < rule.min) {\n      errors.push(`Value must be at least ${rule.min}`);\n    }\n    if (rule.max !== undefined && value > rule.max) {\n      errors.push(`Value must be at most ${rule.max}`);\n    }\n  }\n\n  // Length for strings and arrays\n  if (typeof value === 'string' || Array.isArray(value)) {\n    const length = value.length;\n    if (rule.minLength !== undefined && length < rule.minLength) {\n      errors.push(`Length must be at least ${rule.minLength}`);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 211,
        "end": 300,
        "startLoc": {
          "line": 211,
          "column": 1,
          "position": 1550
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2197
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/input-sanitization.ts",
        "start": 11,
        "end": 100,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 43
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 690
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "}\n    if (rule.maxLength !== undefined && length > rule.maxLength) {\n      errors.push(`Length must be at most ${rule.maxLength}`);\n    }\n  }\n\n  // Pattern matching\n  if (rule.pattern && typeof value === 'string') {\n    if (!rule.pattern.test(value)) {\n      errors.push(`Value does not match required pattern`);\n    }\n  }\n\n  // Enum validation\n  if (rule.enum && !rule.enum.includes(value)) {\n    errors.push(`Value must be one of: ${rule.enum.join(', ')}`);\n  }\n\n  // Custom validation\n  if (rule.custom) {\n    const result = rule.custom(value);\n    if (typeof result === 'string') {\n      errors.push(result);\n    } else if (!result) {\n      errors.push('Custom validation failed');\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Sanitize input based on rules\n */\nfunction sanitizeInput(value: any, rule: ValidationRule): any {\n  if (typeof value !== 'string') return value;\n\n  let sanitized = value;\n\n  // Basic sanitization\n  if (rule.trim) {\n    sanitized = sanitized.trim();\n  }\n\n  if (rule.toLowerCase) {\n    sanitized = sanitized.toLowerCase();\n  }\n\n  if (rule.toUpperCase) {\n    sanitized = sanitized.toUpperCase();\n  }\n\n  if (rule.escape) {\n    sanitized = validator.escape(sanitized);\n  }\n\n  if (rule.normalizeEmail && rule.type === 'email') {\n    sanitized = validator.normalizeEmail(sanitized) || sanitized;\n  }\n\n  // HTML sanitization\n  sanitized = DOMPurify.sanitize(sanitized, {\n    ALLOWED_TAGS: [],\n    ALLOWED_ATTR: [],\n  });\n\n  return sanitized;\n}\n\n/**\n * Create SQL injection prevention middleware\n */\nexport function createSQLInjectionProtection() {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const checkValue = (value: any, _field: string): boolean => {\n      if (typeof value !== 'string') return true;\n\n      for (const pattern of SQL_INJECTION_PATTERNS) {\n        if (pattern.test(value)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Check all input sources\n    for (const location of ['body', 'query', 'params']) {\n      const source = req[location as keyof Request] as any;\n      if (source && typeof source === 'object') {\n        for (const [key, value] of Object.entries(source)) {\n          if (!checkValue(value, `${location}.${key}`)) {\n            res.status(400).json({\n              success: false,\n              error: {\n                code: ERROR_CODES.SECURITY_VIOLATION,\n                message: 'Potentially malicious input detected',\n              },\n            });\n            return;\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 301,
        "end": 400,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2200
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3014
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/data-transformation.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 801
        }
      }
    },
    {
      "format": "typescript",
      "lines": 94,
      "fragment": "}\n\n/**\n * Create NoSQL injection prevention middleware\n */\nexport function createNoSQLInjectionProtection() {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const checkValue = (value: any): boolean => {\n      const valueStr = JSON.stringify(value);\n\n      for (const pattern of NOSQL_INJECTION_PATTERNS) {\n        if (pattern.test(valueStr)) {\n          return false;\n        }\n      }\n\n      // Check for operator injection\n      if (typeof value === 'object' && value !== null) {\n        for (const key of Object.keys(value)) {\n          if (key.startsWith('$')) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    // Check body for NoSQL injection\n    if (req.body && !checkValue(req.body)) {\n      res.status(400).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.SECURITY_VIOLATION,\n          message: 'Invalid input detected',\n        },\n      });\n      return;\n    }\n\n    next();\n  };\n}\n\n/**\n * Create XSS prevention middleware\n */\nexport function createXSSProtection() {\n  return (req: Request, _res: Response, next: NextFunction) => {\n    const sanitizeValue = (value: any): any => {\n      if (typeof value === 'string') {\n        // Check for XSS patterns\n        for (const pattern of XSS_PATTERNS) {\n          if (pattern.test(value)) {\n          }\n        }\n\n        // Sanitize HTML\n        return DOMPurify.sanitize(value, {\n          ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'p', 'br'],\n          ALLOWED_ATTR: ['href'],\n        });\n      } else if (Array.isArray(value)) {\n        return value.map(sanitizeValue);\n      } else if (value && typeof value === 'object') {\n        const sanitized: any = {};\n        for (const [key, val] of Object.entries(value)) {\n          sanitized[key] = sanitizeValue(val);\n        }\n        return sanitized;\n      }\n      return value;\n    };\n\n    // Sanitize all input\n    if (req.body) {\n      req.body = sanitizeValue(req.body);\n    }\n\n    next();\n  };\n}\n\n/**\n * Create path traversal prevention middleware\n */\nexport function createPathTraversalProtection() {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const checkPath = (value: string): boolean => {\n      for (const pattern of PATH_TRAVERSAL_PATTERNS) {\n        if (pattern.test(value)) {\n          return false;\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 407,
        "end": 500,
        "startLoc": {
          "line": 407,
          "column": 1,
          "position": 3036
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3785
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/error-handling.ts",
        "start": 7,
        "end": 100,
        "startLoc": {
          "line": 7,
          "column": 1,
          "position": 16
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 765
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "// Check URL path\n    if (!checkPath(req.path)) {\n      res.status(400).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.SECURITY_VIOLATION,\n          message: 'Invalid path',\n        },\n      });\n      return;\n    }\n\n    // Check query parameters that might be file paths\n    for (const [key, value] of Object.entries(req.query)) {\n      if (typeof value === 'string' && (key.includes('path') || key.includes('file'))) {\n        if (!checkPath(value)) {\n          res.status(400).json({\n            success: false,\n            error: {\n              code: ERROR_CODES.SECURITY_VIOLATION,\n              message: 'Invalid file path',\n            },\n          });\n          return;\n        }\n      }\n    }\n\n    next();\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 504,
        "end": 533,
        "startLoc": {
          "line": 504,
          "column": 5,
          "position": 3799
        },
        "endLoc": {
          "line": 533,
          "column": 2,
          "position": 4024
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-rules.ts",
        "start": 4,
        "end": 34,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 8
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 227
        }
      }
    },
    {
      "format": "typescript",
      "lines": 67,
      "fragment": "}\n\n/**\n * Create command injection prevention middleware\n */\nexport function createCommandInjectionProtection() {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const checkValue = (value: any): boolean => {\n      if (typeof value !== 'string') return true;\n\n      for (const pattern of COMMAND_INJECTION_PATTERNS) {\n        if (pattern.test(value)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Check all input that might be used in commands\n    for (const location of ['body', 'query', 'params']) {\n      const source = req[location as keyof Request] as any;\n      if (source && typeof source === 'object') {\n        for (const [key, value] of Object.entries(source)) {\n          if (key.includes('cmd') || key.includes('command') || key.includes('exec')) {\n            if (!checkValue(value)) {\n              res.status(400).json({\n                success: false,\n                error: {\n                  code: ERROR_CODES.SECURITY_VIOLATION,\n                  message: 'Invalid command',\n                },\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    next();\n  };\n}\n\n/**\n * Create comprehensive security validation middleware\n */\nexport function createSecurityValidationMiddleware(\n  options: {\n    enableSQLProtection?: boolean;\n    enableNoSQLProtection?: boolean;\n    enableXSSProtection?: boolean;\n    enablePathTraversalProtection?: boolean;\n    enableCommandInjectionProtection?: boolean;\n  } = {}\n) {\n  const middlewares: any[] = [];\n\n  if (options.enableSQLProtection !== false) {\n    middlewares.push(createSQLInjectionProtection());\n  }\n\n  if (options.enableNoSQLProtection !== false) {\n    middlewares.push(createNoSQLInjectionProtection());\n  }\n\n  if (options.enableXSSProtection !== false) {\n    middlewares.push(createXSSProtection());",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 534,
        "end": 600,
        "startLoc": {
          "line": 534,
          "column": 1,
          "position": 4026
        },
        "endLoc": {
          "line": 600,
          "column": 2,
          "position": 4551
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-rules.ts",
        "start": 34,
        "end": 100,
        "startLoc": {
          "line": 34,
          "column": 1,
          "position": 227
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 752
        }
      }
    },
    {
      "format": "typescript",
      "lines": 97,
      "fragment": "}\n\n  if (options.enablePathTraversalProtection !== false) {\n    middlewares.push(createPathTraversalProtection());\n  }\n\n  if (options.enableCommandInjectionProtection !== false) {\n    middlewares.push(createCommandInjectionProtection());\n  }\n\n  return middlewares;\n}\n\n/**\n * Common validation schemas\n */\nexport const CommonSchemas = {\n  login: {\n    rules: [\n      {\n        field: 'email',\n        type: 'email',\n        required: true,\n        normalizeEmail: true,\n        toLowerCase: true,\n        sanitize: true,\n      },\n      {\n        field: 'password',\n        type: 'string',\n        required: true,\n        minLength: 8,\n        maxLength: 128,\n      },\n    ],\n  },\n\n  registration: {\n    rules: [\n      {\n        field: 'email',\n        type: 'email',\n        required: true,\n        normalizeEmail: true,\n        toLowerCase: true,\n        sanitize: true,\n      },\n      {\n        field: 'password',\n        type: 'string',\n        required: true,\n        minLength: 8,\n        maxLength: 128,\n        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n      },\n      {\n        field: 'name',\n        type: 'string',\n        required: true,\n        minLength: 2,\n        maxLength: 100,\n        sanitize: true,\n        trim: true,\n      },\n    ],\n  },\n\n  pagination: {\n    rules: [\n      {\n        field: 'page',\n        location: 'query',\n        type: 'number',\n        min: 1,\n        default: 1,\n        transform: (v: any) => parseInt(v, 10),\n      },\n      {\n        field: 'limit',\n        location: 'query',\n        type: 'number',\n        min: 1,\n        max: 100,\n        default: 20,\n        transform: (v: any) => parseInt(v, 10),\n      },\n      {\n        field: 'sort',\n        location: 'query',\n        type: 'string',\n        enum: ['asc', 'desc'],\n        default: 'desc',\n        toLowerCase: true,\n      },\n    ],\n  },\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 601,
        "end": 697,
        "startLoc": {
          "line": 601,
          "column": 3,
          "position": 4554
        },
        "endLoc": {
          "line": 697,
          "column": 2,
          "position": 5135
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/validation-utilities.ts",
        "start": 1,
        "end": 97,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 576
        }
      }
    },
    {
      "format": "typescript",
      "lines": 91,
      "fragment": "// Configure origin\n  if (dynamicOrigin) {\n    corsOptions.origin = dynamicOrigin as any;\n  } else if (origins === '*') {\n    corsOptions.origin = true; // Allow all origins\n  } else if (Array.isArray(origins)) {\n    corsOptions.origin = (origin, callback) => {\n      if (!origin) {\n        // Allow requests with no origin (e.g., mobile apps, Postman)\n        return callback(null, true);\n      }\n\n      if (origins.includes(origin)) {\n        callback(null, true);\n      } else {\n        callback(new Error('Not allowed by CORS'));\n      }\n    };\n  }\n\n  return cors(corsOptions);\n}\n\n/**\n * Create Content Security Policy middleware\n */\nexport function createCSPMiddleware(\n  config: CSPConfig = {}\n): (req: Request, res: Response, next: NextFunction) => void {\n  const {\n    enabled = true,\n    directives = DEFAULT_CSP_DIRECTIVES,\n    reportOnly = false,\n    reportUri,\n    upgradeInsecureRequests = true,\n    blockAllMixedContent = true,\n  } = config;\n\n  return (_req: Request, res: Response, next: NextFunction) => {\n    if (!enabled) {\n      return next();\n    }\n\n    // Build CSP header\n    const policyDirectives: string[] = [];\n\n    // Add directives\n    const mergedDirectives = { ...DEFAULT_CSP_DIRECTIVES, ...directives };\n\n    for (const [key, value] of Object.entries(mergedDirectives)) {\n      if (value === undefined || value === null) continue;\n\n      const directiveName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n      if (typeof value === 'boolean') {\n        if (value) {\n          policyDirectives.push(directiveName);\n        }\n      } else if (Array.isArray(value) && value.length > 0) {\n        policyDirectives.push(`${directiveName} ${value.join(' ')}`);\n      }\n    }\n\n    // Add upgrade-insecure-requests\n    if (upgradeInsecureRequests) {\n      policyDirectives.push('upgrade-insecure-requests');\n    }\n\n    // Add block-all-mixed-content\n    if (blockAllMixedContent) {\n      policyDirectives.push('block-all-mixed-content');\n    }\n\n    // Add report-uri if specified\n    if (reportUri) {\n      policyDirectives.push(`report-uri ${reportUri}`);\n    }\n\n    const policy = policyDirectives.join('; ');\n    const headerName = reportOnly\n      ? 'Content-Security-Policy-Report-Only'\n      : 'Content-Security-Policy';\n\n    res.setHeader(headerName, policy);\n    next();\n  };\n}\n\n/**\n * Create comprehensive security headers middleware\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware.ts",
        "start": 110,
        "end": 200,
        "startLoc": {
          "line": 110,
          "column": 3,
          "position": 928
        },
        "endLoc": {
          "line": 200,
          "column": 4,
          "position": 1614
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/csp-policies.ts",
        "start": 10,
        "end": 100,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 30
        },
        "endLoc": {
          "line": 100,
          "column": 4,
          "position": 711
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "export function createSecurityHeadersMiddleware(\n  config: SecurityHeadersConfig = {}\n): (req: Request, res: Response, next: NextFunction) => void {\n  const { additionalHeaders = {} } = config;\n\n  // Default security headers\n  const defaultHeaders = {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), interest-cohort=()',\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n    ...additionalHeaders,\n  };\n\n  return (_req: Request, res: Response, next: NextFunction) => {\n    // Apply security headers\n    for (const [header, value] of Object.entries(defaultHeaders)) {\n      res.setHeader(header, value);\n    }\n\n    // Remove potentially dangerous headers\n    res.removeHeader('X-Powered-By');\n    res.removeHeader('Server');\n\n    next();\n  };\n}\n\n/**\n * Create a combined security middleware with CORS, CSP, and other security headers\n */\nexport function createCombinedSecurityMiddleware(config: SecurityHeadersConfig = {}) {\n  const corsMiddleware = createCorsMiddleware(config.cors);\n  const cspMiddleware = createCSPMiddleware(config.csp);\n  const securityHeadersMiddleware = createSecurityHeadersMiddleware(config);\n\n  return [corsMiddleware, cspMiddleware, securityHeadersMiddleware];\n}\n\n/**\n * Environment-specific configurations\n */\nexport const SECURITY_CONFIGS = {\n  development: {\n    cors: {\n      enabled: true,\n      origins: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:5173'],\n      credentials: true,\n    },\n    csp: {\n      enabled: false, // Often disabled in development for hot reload\n      reportOnly: true,\n    },\n  },\n  staging: {\n    cors: {\n      enabled: true,\n      origins: ['https://staging.reporunner.com'],\n      credentials: true,\n    },\n    csp: {\n      enabled: true,\n      reportOnly: true,\n      reportUri: '/api/security/csp-report',\n    },\n  },\n  production: {\n    cors: {\n      enabled: true,\n      origins: ['https://reporunner.com', 'https://www.reporunner.com'],\n      credentials: true,\n      maxAge: 86400,\n    },\n    csp: {\n      enabled: true,\n      reportOnly: false,\n      reportUri: '/api/security/csp-report',\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'sha256-...'\"], // Add specific script hashes\n        styleSrc: [\"'self'\", \"'sha256-...'\"], // Add specific style hashes\n        imgSrc: [\"'self'\", 'https:', 'data:'],\n        connectSrc: [\"'self'\", 'https://api.reporunner.com'],\n        fontSrc: [\"'self'\", 'https://fonts.gstatic.com'],\n        frameSrc: [\"'none'\"],\n        frameAncestors: [\"'none'\"],\n        upgradeInsecureRequests: true,\n      },\n    },\n    additionalHeaders: {\n      'Strict-Transport-Security': 'max-age=63072000; includeSubDomains; preload',\n      'X-Frame-Options': 'DENY',\n      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',\n      Pragma: 'no-cache',\n      Expires: '0',\n    },\n  },\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware.ts",
        "start": 201,
        "end": 300,
        "startLoc": {
          "line": 201,
          "column": 1,
          "position": 1616
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2335
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/security-enforcement.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 719
        }
      }
    },
    {
      "format": "typescript",
      "lines": 66,
      "fragment": "/**\n * Get security configuration based on environment\n */\nexport function getEnvironmentConfig(\n  env: string = process.env.NODE_ENV || 'development'\n): SecurityHeadersConfig {\n  return SECURITY_CONFIGS[env as keyof typeof SECURITY_CONFIGS] || SECURITY_CONFIGS.development;\n}\n\n/**\n * CSP violation report handler\n */\nexport function createCSPReportHandler() {\n  return async (req: Request, res: Response) => {\n    const _report = req.body;\n\n    // You could also send this to a monitoring service\n    // await sendToMonitoring(report);\n\n    res.status(204).end();\n  };\n}\n\n/**\n * Nonce generator for inline scripts/styles\n */\nexport function generateNonce(): string {\n  const crypto = require('node:crypto');\n  return crypto.randomBytes(16).toString('base64');\n}\n\n/**\n * Middleware to add nonce to res.locals for CSP\n */\nexport function createNonceMiddleware() {\n  return (_req: Request, res: Response, next: NextFunction) => {\n    res.locals.nonce = generateNonce();\n    next();\n  };\n}\n\n/**\n * Create CSP middleware with nonce support\n */\nexport function createCSPWithNonce(config: CSPConfig = {}) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const nonce = res.locals.nonce;\n\n    if (!nonce) {\n      return next();\n    }\n\n    // Update script-src and style-src with nonce\n    const updatedConfig = {\n      ...config,\n      directives: {\n        ...config.directives,\n        scriptSrc: [...(config.directives?.scriptSrc || [\"'self'\"]), `'nonce-${nonce}'`],\n        styleSrc: [...(config.directives?.styleSrc || [\"'self'\"]), `'nonce-${nonce}'`],\n      },\n    };\n\n    const cspMiddleware = createCSPMiddleware(updatedConfig);\n    cspMiddleware(req, res, next);\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware.ts",
        "start": 302,
        "end": 367,
        "startLoc": {
          "line": 302,
          "column": 1,
          "position": 2338
        },
        "endLoc": {
          "line": 367,
          "column": 2,
          "position": 2797
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/header-utilities.ts",
        "start": 1,
        "end": 66,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 459
        }
      }
    },
    {
      "format": "typescript",
      "lines": 90,
      "fragment": "}\n\n/**\n * Default key generator - uses IP address\n */\nfunction defaultKeyGenerator(req: Request): string {\n  // Try various headers that might contain the real IP\n  const ip =\n    req.headers['x-forwarded-for'] ||\n    req.headers['x-real-ip'] ||\n    req.connection.remoteAddress ||\n    req.socket.remoteAddress ||\n    req.ip;\n\n  if (typeof ip === 'string') {\n    // Handle comma-separated IPs (from x-forwarded-for)\n    return ip.split(',')[0].trim();\n  }\n\n  if (Array.isArray(ip)) {\n    return ip[0];\n  }\n\n  return 'unknown';\n}\n\n/**\n * User-based key generator\n */\nexport function userKeyGenerator(req: Request & { user?: any }): string {\n  if (req.user?.id) {\n    return `user:${req.user.id}`;\n  }\n  return defaultKeyGenerator(req);\n}\n\n/**\n * API key-based key generator\n */\nexport function apiKeyGenerator(req: Request): string {\n  const apiKey = req.headers['x-api-key'] || req.query.api_key;\n  if (apiKey) {\n    return `api:${apiKey}`;\n  }\n  return defaultKeyGenerator(req);\n}\n\n/**\n * Combined key generator (user + IP)\n */\nexport function combinedKeyGenerator(req: Request & { user?: any }): string {\n  const ip = defaultKeyGenerator(req);\n  if (req.user?.id) {\n    return `user:${req.user.id}:${ip}`;\n  }\n  return ip;\n}\n\n/**\n * Endpoint-specific key generator\n */\nexport function endpointKeyGenerator(req: Request): string {\n  const base = defaultKeyGenerator(req);\n  const endpoint = `${req.method}:${req.path}`;\n  return `${base}:${endpoint}`;\n}\n\n/**\n * Create login rate limiter\n */\nexport function createLoginRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'login',\n    points: 1,\n    message: 'Too many login attempts. Please try again later.',\n    statusCode: 429,\n    keyGenerator: (req) => {\n      // Use email/username if provided, otherwise IP\n      const identifier = req.body?.email || req.body?.username;\n      if (identifier) {\n        return `login:${identifier}`;\n      }\n      return `login:${defaultKeyGenerator(req)}`;\n    },\n  });\n}\n\n/**\n * Create API rate limiter\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware.ts",
        "start": 111,
        "end": 200,
        "startLoc": {
          "line": 111,
          "column": 1,
          "position": 857
        },
        "endLoc": {
          "line": 200,
          "column": 4,
          "position": 1457
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/limiter-strategies.ts",
        "start": 12,
        "end": 101,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 46
        },
        "endLoc": {
          "line": 101,
          "column": 4,
          "position": 646
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "export function createApiRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'api',\n    points: 1,\n    message: 'API rate limit exceeded.',\n    keyGenerator: userKeyGenerator,\n  });\n}\n\n/**\n * Create execution rate limiter\n */\nexport function createExecutionRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'execution',\n    points: 1,\n    message: 'Workflow execution rate limit exceeded. Please wait before executing more workflows.',\n    keyGenerator: userKeyGenerator,\n  });\n}\n\n/**\n * Create upload rate limiter\n */\nexport function createUploadRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'upload',\n    points: 1,\n    message: 'File upload rate limit exceeded.',\n    keyGenerator: userKeyGenerator,\n  });\n}\n\n/**\n * Create password reset rate limiter\n */\nexport function createPasswordResetRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'password-reset',\n    points: 1,\n    message: 'Too many password reset requests. Please try again later.',\n    keyGenerator: (req) => {\n      const email = req.body?.email;\n      if (email) {\n        return `reset:${email}`;\n      }\n      return `reset:${defaultKeyGenerator(req)}`;\n    },\n  });\n}\n\n/**\n * Create webhook rate limiter\n */\nexport function createWebhookRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'webhook',\n    points: 1,\n    message: 'Webhook rate limit exceeded.',\n    keyGenerator: (req) => {\n      // Use webhook ID if available\n      const webhookId = req.params?.webhookId || req.headers['x-webhook-id'];\n      if (webhookId) {\n        return `webhook:${webhookId}`;\n      }\n      return `webhook:${defaultKeyGenerator(req)}`;\n    },\n  });\n}\n\n/**\n * Create export rate limiter\n */\nexport function createExportRateLimiter(rateLimiter: AdvancedRateLimiter) {\n  return createRateLimitMiddleware(rateLimiter, {\n    type: 'export',\n    points: 1,\n    message: 'Export rate limit exceeded. Please wait before exporting more data.',\n    keyGenerator: userKeyGenerator,\n  });\n}\n\n/**\n * Create dynamic rate limiter that adjusts based on user tier\n */\nexport function createTieredRateLimiter(\n  rateLimiter: AdvancedRateLimiter,\n  tierPoints: Record<string, number> = {\n    free: 10,\n    basic: 50,\n    pro: 200,\n    enterprise: 1000,\n  }\n) {\n  return async (req: Request & { user?: any }, res: Response, next: NextFunction) => {\n    const tier = req.user?.tier || 'free';\n    const points = tierPoints[tier] || tierPoints.free;\n\n    const middleware = createRateLimitMiddleware(rateLimiter, {\n      type: 'api',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware.ts",
        "start": 201,
        "end": 300,
        "startLoc": {
          "line": 201,
          "column": 1,
          "position": 1459
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2124
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/redis-integration.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 665
        }
      }
    },
    {
      "format": "typescript",
      "lines": 44,
      "fragment": ", {\n      points,\n      duration: 60,\n      blockDuration: 300,\n    });\n\n    return middleware(req, res, next);\n  };\n}\n\n/**\n * Create rate limit middleware for multiple limits\n */\nexport function createMultiRateLimiter(\n  rateLimiter: AdvancedRateLimiter,\n  limits: Array<{ type: string; points?: number; message?: string }>\n) {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const key = defaultKeyGenerator(req);\n      const result = await rateLimiter.checkMultipleLimits(\n        limits.map((l) => ({ type: l.type, points: l.points })),\n        key\n      );\n\n      if (!result.allowed && result.failedLimit) {\n        const failedLimitConfig = limits.find((l) => l.type === result.failedLimit);\n        res.status(429).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.RATE_LIMIT_EXCEEDED,\n            message: failedLimitConfig?.message || 'Rate limit exceeded',\n            limitType: result.failedLimit,\n          },\n        });\n        return;\n      }\n\n      next();\n    } catch (_error) {\n      next();\n    }\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware.ts",
        "start": 307,
        "end": 350,
        "startLoc": {
          "line": 307,
          "column": 2,
          "position": 2172
        },
        "endLoc": {
          "line": 350,
          "column": 2,
          "position": 2531
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/limit-utilities.ts",
        "start": 13,
        "end": 56,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 43
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 402
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "import { exec } from 'node:child_process';\nimport crypto from 'node:crypto';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { promisify } from 'node:util';\nimport { ERROR_CODES } from '@reporunner/constants';\nimport type { NextFunction, Request, Response } from 'express';\nimport multer, { type FileFilterCallback, MulterError } from 'multer';\n\nconst execAsync = promisify(exec);\nconst unlinkAsync = promisify(fs.unlink);\nconst statAsync = promisify(fs.stat);\n\nexport interface FileUploadConfig {\n  destination?: string;\n  maxFileSize?: number;\n  maxFiles?: number;\n  allowedMimeTypes?: string[];\n  allowedExtensions?: string[];\n  blockedExtensions?: string[];\n  preserveExtension?: boolean;\n  generateUniqueName?: boolean;\n  scanForVirus?: boolean;\n  clamavPath?: string;\n  validateMagicNumbers?: boolean;\n  sanitizeFilename?: boolean;\n  metadata?: boolean;\n  hashAlgorithm?: 'md5' | 'sha1' | 'sha256' | 'sha512';\n}\n\nexport interface UploadedFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  destination: string;\n  filename: string;\n  path: string;\n  size: number;\n  hash?: string;\n  metadata?: FileMetadata;\n}\n\nexport interface FileMetadata {\n  uploadedAt: Date;\n  uploadedBy?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  virusScanResult?: {\n    scanned: boolean;\n    clean: boolean;\n    threat?: string;\n  };\n}\n\n/**\n * Magic number signatures for file type validation\n */\nconst MAGIC_NUMBERS: Record<string, Buffer[]> = {\n  'image/jpeg': [Buffer.from([0xff, 0xd8, 0xff])],\n  'image/png': [Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])],\n  'image/gif': [Buffer.from('GIF87a'), Buffer.from('GIF89a')],\n  'image/webp': [Buffer.from('RIFF'), Buffer.from('WEBP')],\n  'application/pdf': [Buffer.from([0x25, 0x50, 0x44, 0x46])],\n  'application/zip': [Buffer.from([0x50, 0x4b, 0x03, 0x04]), Buffer.from([0x50, 0x4b, 0x05, 0x06])],\n  'application/x-rar': [Buffer.from('Rar!')],\n  'application/x-7z-compressed': [Buffer.from([0x37, 0x7a, 0xbc, 0xaf, 0x27, 0x1c])],\n  'application/gzip': [Buffer.from([0x1f, 0x8b])],\n  'text/plain': [\n    Buffer.from([0xef, 0xbb, 0xbf]),\n    Buffer.from([0xff, 0xfe]),\n    Buffer.from([0xfe, 0xff]),\n  ],\n  'application/msword': [Buffer.from([0xd0, 0xcf, 0x11, 0xe0, 0xa1, 0xb1, 0x1a, 0xe1])],\n  'application/vnd.openxmlformats-officedocument': [Buffer.from([0x50, 0x4b, 0x03, 0x04])],\n};\n\n/**\n * Dangerous file extensions that should always be blocked\n */\nconst DANGEROUS_EXTENSIONS = [\n  '.exe',\n  '.dll',\n  '.bat',\n  '.cmd',\n  '.com',\n  '.scr',\n  '.vbs',\n  '.vbe',\n  '.js',\n  '.jse',\n  '.ws',\n  '.wsf',\n  '.wsc',\n  '.wsh',\n  '.ps1',\n  '.ps1xml',\n  '.ps2',\n  '.ps2xml',\n  '.psc1',",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 911
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/upload-core.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 911
        }
      }
    },
    {
      "format": "typescript",
      "lines": 80,
      "fragment": "/**\n * Create secure file upload middleware\n */\nexport function createFileUploadMiddleware(config: FileUploadConfig = {}) {\n  const {\n    destination = '/tmp/uploads',\n    maxFileSize = 10 * 1024 * 1024, // 10 MB\n    maxFiles = 10,\n    allowedMimeTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.pdf'],\n    blockedExtensions = DANGEROUS_EXTENSIONS,\n    preserveExtension = true,\n    generateUniqueName = true,\n    sanitizeFilename = true,\n  } = config;\n\n  // Ensure upload directory exists\n  if (!fs.existsSync(destination)) {\n    fs.mkdirSync(destination, { recursive: true });\n  }\n\n  // Configure multer storage\n  const storage = multer.diskStorage({\n    destination: (_req, _file, cb) => {\n      cb(null, destination);\n    },\n    filename: (_req, file, cb) => {\n      const sanitized = sanitizeFilename\n        ? sanitizeFilenameString(file.originalname)\n        : file.originalname;\n\n      if (generateUniqueName) {\n        const uniqueSuffix = `${Date.now()}-${crypto.randomBytes(6).toString('hex')}`;\n        const ext = preserveExtension ? path.extname(sanitized) : '';\n        cb(null, `${path.basename(sanitized, ext)}-${uniqueSuffix}${ext}`);\n      } else {\n        cb(null, sanitized);\n      }\n    },\n  });\n\n  // File filter\n  const fileFilter = (_req: Request, file: Express.Multer.File, cb: FileFilterCallback) => {\n    // Check MIME type\n    if (allowedMimeTypes.length > 0 && !allowedMimeTypes.includes(file.mimetype)) {\n      return cb(new Error(`File type ${file.mimetype} is not allowed`));\n    }\n\n    // Check extension\n    const ext = path.extname(file.originalname).toLowerCase();\n\n    // Block dangerous extensions\n    if (blockedExtensions.includes(ext)) {\n      return cb(new Error(`File extension ${ext} is blocked for security reasons`));\n    }\n\n    // Check allowed extensions\n    if (allowedExtensions.length > 0 && !allowedExtensions.includes(ext)) {\n      return cb(new Error(`File extension ${ext} is not allowed`));\n    }\n\n    // Sanitize filename for path traversal attempts\n    if (file.originalname.includes('../') || file.originalname.includes('..\\\\')) {\n      return cb(new Error('Invalid filename'));\n    }\n\n    cb(null, true);\n  };\n\n  // Create multer instance\n  const upload = multer({\n    storage,\n    fileFilter,\n    limits: {\n      fileSize: maxFileSize,\n      files: maxFiles,\n    },\n  });\n\n  return {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 121,
        "end": 200,
        "startLoc": {
          "line": 121,
          "column": 1,
          "position": 989
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1711
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/file-validation.ts",
        "start": 21,
        "end": 100,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 74
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 796
        }
      }
    },
    {
      "format": "typescript",
      "lines": 94,
      "fragment": "}\n\n/**\n * Create upload handler with additional security checks\n */\nfunction createUploadHandler(multerMiddleware: any, config: FileUploadConfig) {\n  return [\n    multerMiddleware,\n    async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n        if (files.length === 0) {\n          return next();\n        }\n\n        // Process each uploaded file\n        const processedFiles: UploadedFile[] = [];\n        const errors: string[] = [];\n\n        for (const file of files) {\n          try {\n            // Validate magic numbers\n            if (config.validateMagicNumbers) {\n              const isValid = await validateMagicNumber(file.path, file.mimetype);\n              if (!isValid) {\n                errors.push(`File ${file.originalname} content does not match declared MIME type`);\n                await unlinkAsync(file.path);\n                continue;\n              }\n            }\n\n            // Scan for viruses\n            let virusScanResult;\n            if (config.scanForVirus) {\n              virusScanResult = await scanFileForVirus(file.path, config.clamavPath);\n              if (!virusScanResult.clean) {\n                errors.push(\n                  `File ${file.originalname} contains malware: ${virusScanResult.threat}`\n                );\n                await unlinkAsync(file.path);\n                continue;\n              }\n            }\n\n            // Calculate file hash\n            let hash;\n            if (config.hashAlgorithm) {\n              hash = await calculateFileHash(file.path, config.hashAlgorithm);\n            }\n\n            // Create file metadata\n            let metadata;\n            if (config.metadata) {\n              metadata = {\n                uploadedAt: new Date(),\n                uploadedBy: (req as any).user?.id,\n                ipAddress: req.ip,\n                userAgent: req.headers['user-agent'],\n                virusScanResult,\n              };\n            }\n\n            processedFiles.push({\n              ...file,\n              hash,\n              metadata,\n            } as UploadedFile);\n          } catch (error: any) {\n            errors.push(`Error processing file ${file.originalname}: ${error.message}`);\n            await unlinkAsync(file.path).catch(() => {});\n          }\n        }\n\n        if (errors.length > 0 && processedFiles.length === 0) {\n          return res.status(400).json({\n            success: false,\n            error: {\n              code: ERROR_CODES.FILE_UPLOAD_ERROR,\n              message: 'File upload failed',\n              details: errors,\n            },\n          });\n        }\n\n        // Attach processed files to request\n        if (req.file) {\n          req.file = processedFiles[0] as any;\n        } else {\n          req.files = processedFiles as any;\n        }\n\n        // Log upload audit event if audit logger is available\n        if ((global as any).auditLogger) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 207,
        "end": 300,
        "startLoc": {
          "line": 207,
          "column": 1,
          "position": 1835
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2595
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/storage-handling.ts",
        "start": 7,
        "end": 100,
        "startLoc": {
          "line": 7,
          "column": 1,
          "position": 121
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 881
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "await (global as any).auditLogger.log({\n            type: 'FILE_UPLOADED',\n            severity: 'LOW',\n            userId: (req as any).user?.id,\n            action: 'File upload',\n            result: 'SUCCESS',\n            details: {\n              files: processedFiles.map((f) => ({\n                filename: f.filename,\n                originalname: f.originalname,\n                size: f.size,\n                mimetype: f.mimetype,\n                hash: f.hash,\n              })),\n            },\n          });\n        }\n\n        next();",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 301,
        "end": 319,
        "startLoc": {
          "line": 301,
          "column": 11,
          "position": 2598
        },
        "endLoc": {
          "line": 319,
          "column": 2,
          "position": 2751
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/security-scanning.ts",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 2,
          "position": 152
        }
      }
    },
    {
      "format": "typescript",
      "lines": 76,
      "fragment": "}\n\n/**\n * Validate magic number of file\n */\nasync function validateMagicNumber(filePath: string, mimeType: string): Promise<boolean> {\n  const signatures = MAGIC_NUMBERS[mimeType];\n  if (!signatures || signatures.length === 0) {\n    // No signature to validate against\n    return true;\n  }\n\n  const buffer = Buffer.alloc(Math.max(...signatures.map((s) => s.length)));\n  const fd = fs.openSync(filePath, 'r');\n\n  try {\n    fs.readSync(fd, buffer, 0, buffer.length, 0);\n\n    for (const signature of signatures) {\n      if (buffer.slice(0, signature.length).equals(signature)) {\n        return true;\n      }\n    }\n\n    return false;\n  } finally {\n    fs.closeSync(fd);\n  }\n}\n\n/**\n * Scan file for viruses using ClamAV\n */\nasync function scanFileForVirus(\n  filePath: string,\n  clamavPath?: string\n): Promise<{\n  scanned: boolean;\n  clean: boolean;\n  threat?: string;\n}> {\n  if (!clamavPath || !fs.existsSync(clamavPath)) {\n    return { scanned: false, clean: true };\n  }\n\n  try {\n    const { stdout, stderr } = await execAsync(`${clamavPath} --no-summary \"${filePath}\"`);\n\n    if (stderr) {\n    }\n\n    const output = stdout.toLowerCase();\n    const clean = output.includes('ok') && !output.includes('found');\n\n    if (!clean) {\n      // Extract threat name\n      const match = output.match(/: (.+) found/i);\n      const threat = match ? match[1] : 'Unknown threat';\n      return { scanned: true, clean: false, threat };\n    }\n\n    return { scanned: true, clean: true };\n  } catch (error: any) {\n    // ClamAV returns exit code 1 if virus is found\n    if (error.code === 1) {\n      const match = error.stdout?.match(/: (.+) found/i);\n      const threat = match ? match[1] : 'Unknown threat';\n      return { scanned: true, clean: false, threat };\n    }\n    return { scanned: false, clean: true };\n  }\n}\n\n/**\n * Calculate file hash\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 325,
        "end": 400,
        "startLoc": {
          "line": 325,
          "column": 1,
          "position": 2782
        },
        "endLoc": {
          "line": 400,
          "column": 4,
          "position": 3425
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/security-scanning.ts",
        "start": 26,
        "end": 102,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 177
        },
        "endLoc": {
          "line": 102,
          "column": 4,
          "position": 820
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "async function calculateFileHash(filePath: string, algorithm: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const hash = crypto.createHash(algorithm);\n    const stream = fs.createReadStream(filePath);\n\n    stream.on('error', reject);\n    stream.on('data', (chunk) => hash.update(chunk));\n    stream.on('end', () => resolve(hash.digest('hex')));\n  });\n}\n\n/**\n * Sanitize filename\n */\nfunction sanitizeFilenameString(filename: string): string {\n  // Remove any path components\n  const basename = path.basename(filename);\n\n  // Remove special characters except dots and hyphens\n  let sanitized = basename.replace(/[^a-zA-Z0-9.-]/g, '_');\n\n  // Remove multiple dots (prevent extension spoofing)\n  sanitized = sanitized.replace(/\\.{2,}/g, '_');\n\n  // Ensure filename doesn't start with a dot (hidden file)\n  if (sanitized.startsWith('.')) {\n    sanitized = `_${sanitized.substring(1)}`;\n  }\n\n  // Limit length\n  if (sanitized.length > 255) {\n    const ext = path.extname(sanitized);\n    const name = path.basename(sanitized, ext);\n    sanitized = name.substring(0, 255 - ext.length) + ext;\n  }\n\n  return sanitized;\n}\n\n/**\n * Create file cleanup middleware\n */\nexport function createFileCleanupMiddleware() {\n  return async (err: any, req: Request, res: Response, next: NextFunction): Promise<void> => {\n    // Clean up uploaded files on error\n    if (err) {\n      const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n      for (const file of files) {\n        try {\n          await unlinkAsync(file.path);\n        } catch (_error) {}\n      }\n    }\n\n    // Handle multer errors\n    if (err instanceof MulterError) {\n      let message = 'File upload error';\n\n      switch (err.code) {\n        case 'LIMIT_FILE_SIZE':\n          message = 'File too large';\n          break;\n        case 'LIMIT_FILE_COUNT':\n          message = 'Too many files';\n          break;\n        case 'LIMIT_UNEXPECTED_FILE':\n          message = 'Unexpected field';\n          break;\n      }\n\n      res.status(400).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.FILE_UPLOAD_ERROR,\n          message,\n          details: err.message,\n        },\n      });\n      return;\n    }\n\n    next(err);\n  };\n}\n\n/**\n * Create file type validation middleware\n */\nexport function createFileTypeValidator(allowedTypes: Record<string, string[]>) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n    for (const file of files) {\n      const fieldTypes = allowedTypes[file.fieldname];\n\n      if (!fieldTypes) {\n        res.status(400).json({\n          success: false,\n          error: {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 401,
        "end": 500,
        "startLoc": {
          "line": 401,
          "column": 1,
          "position": 3427
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 4269
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/upload-utilities.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 842
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\n          },\n        });\n        return;\n      }\n    }\n\n    next();\n  };\n}\n\n/**\n * Create file size limiter per field\n */\nexport function createFieldSizeLimiter(limits: Record<string, number>) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n    for (const file of files) {\n      const limit = limits[file.fieldname];\n\n      if (limit && file.size > limit) {\n        res.status(400).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.FILE_TOO_LARGE,\n            message: `File ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 513,
        "end": 539,
        "startLoc": {
          "line": 513,
          "column": 2,
          "position": 4381
        },
        "endLoc": {
          "line": 539,
          "column": 7,
          "position": 4599
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/metadata-processing.ts",
        "start": 26,
        "end": 61,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 95
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 313
        }
      }
    },
    {
      "format": "typescript",
      "lines": 61,
      "fragment": "${file.fieldname}`,\n          },\n        });\n        return;\n      }\n    }\n\n    next();\n  };\n}\n\n/**\n * Create secure file download middleware\n */\nexport function createSecureDownloadMiddleware(\n  options: {\n    basePath: string;\n    allowedPaths?: string[];\n    requireAuth?: boolean;\n    logDownloads?: boolean;\n  } = { basePath: '/uploads' }\n) {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Check authentication if required\n      if (options.requireAuth && !(req as any).user) {\n        res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Authentication required',\n          },\n        });\n        return;\n      }\n\n      // Get requested file path\n      const filename = req.params.filename || req.query.filename;\n\n      if (!filename || typeof filename !== 'string') {\n        res.status(400).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.VALIDATION_ERROR,\n            message: 'Filename is required',\n          },\n        });\n        return;\n      }\n\n      // Prevent path traversal\n      if (filename.includes('../') || filename.includes('..\\\\')) {\n        res.status(400).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.SECURITY_VIOLATION,\n            message: 'Invalid filename',\n          },\n        });\n        return;\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 539,
        "end": 599,
        "startLoc": {
          "line": 539,
          "column": 25,
          "position": 4606
        },
        "endLoc": {
          "line": 599,
          "column": 2,
          "position": 5022
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/metadata-processing.ts",
        "start": 61,
        "end": 121,
        "startLoc": {
          "line": 61,
          "column": 5,
          "position": 314
        },
        "endLoc": {
          "line": 121,
          "column": 2,
          "position": 730
        }
      }
    },
    {
      "format": "typescript",
      "lines": 65,
      "fragment": "const filePath = path.join(options.basePath, filename);\n\n      // Verify file is within allowed paths\n      const resolvedPath = path.resolve(filePath);\n      const resolvedBase = path.resolve(options.basePath);\n\n      if (!resolvedPath.startsWith(resolvedBase)) {\n        res.status(403).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.FORBIDDEN,\n            message: 'Access denied',\n          },\n        });\n        return;\n      }\n\n      // Check if file exists\n      try {\n        await statAsync(resolvedPath);\n      } catch (_error) {\n        res.status(404).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.NOT_FOUND,\n            message: 'File not found',\n          },\n        });\n        return;\n      }\n\n      // Log download if enabled\n      if (options.logDownloads && (global as any).auditLogger) {\n        await (global as any).auditLogger.log({\n          type: 'FILE_DOWNLOADED',\n          severity: 'LOW',\n          userId: (req as any).user?.id,\n          action: 'File download',\n          result: 'SUCCESS',\n          details: { filename },\n        });\n      }\n\n      // Set security headers\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n\n      // Send file\n      res.download(resolvedPath, path.basename(filename), (err) => {\n        if (err) {\n          if (!res.headersSent) {\n            res.status(500).json({\n              success: false,\n              error: {\n                code: ERROR_CODES.INTERNAL_ERROR,\n                message: 'Failed to download file',\n              },\n            });\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 601,
        "end": 665,
        "startLoc": {
          "line": 601,
          "column": 7,
          "position": 5026
        },
        "endLoc": {
          "line": 665,
          "column": 2,
          "position": 5510
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/cleanup-operations.ts",
        "start": 1,
        "end": 67,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 67,
          "column": 2,
          "position": 464
        }
      }
    },
    {
      "format": "typescript",
      "lines": 56,
      "fragment": "// Check role requirements\n      if (roles.length > 0 && !roles.some((role) => user.roles?.includes(role))) {\n        return res.status(403).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.FORBIDDEN,\n            message: 'Insufficient role privileges',\n          },\n        });\n      }\n\n      // Check permission requirements\n      if (permissions.length > 0 && !permissions.some((perm) => user.permissions?.includes(perm))) {\n        return res.status(403).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.FORBIDDEN,\n            message: 'Insufficient permissions',\n          },\n        });\n      }\n\n      // Attach user to request\n      req.user = user;\n      req.token = token;\n      req.sessionId = user.sessionId;\n\n      next();\n    } catch (error: any) {\n      if (error.message === 'Token has expired') {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.TOKEN_EXPIRED,\n            message: 'Access token has expired',\n          },\n        });\n      } else if (error.message === 'Token has been revoked') {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.TOKEN_REVOKED,\n            message: 'Access token has been revoked',\n          },\n        });\n      }\n\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: 'Invalid authentication token',\n        },\n      });\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 108,
        "end": 163,
        "startLoc": {
          "line": 108,
          "column": 7,
          "position": 792
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/token-validation.ts",
        "start": 8,
        "end": 65,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 59
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 497
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "}\n\n/**\n * Create refresh token middleware\n */\nexport function createRefreshTokenMiddleware(sessionManager: JWTSessionManager) {\n  return async (req: Request, res: Response) => {\n    try {\n      const refreshToken = req.body.refreshToken || req.cookies?.refresh_token;\n\n      if (!refreshToken) {\n        return res.status(400).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.BAD_REQUEST,\n            message: 'Refresh token is required',\n          },\n        });\n      }\n\n      // Get IP and user agent for tracking\n      const ipAddress =\n        (req.headers['x-forwarded-for'] as string)?.split(',')[0] || req.socket.remoteAddress;\n      const userAgent = req.headers['user-agent'];\n\n      // Refresh the token\n      const tokens = await sessionManager.refreshAccessToken(refreshToken, ipAddress, userAgent);\n\n      // Set cookies if enabled\n      if (req.cookies) {\n        res.cookie('access_token', tokens.accessToken, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          sameSite: 'strict',\n          maxAge: 15 * 60 * 1000, // 15 minutes\n        });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 164,
        "end": 199,
        "startLoc": {
          "line": 164,
          "column": 1,
          "position": 1244
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1543
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/token-validation.ts",
        "start": 65,
        "end": 100,
        "startLoc": {
          "line": 65,
          "column": 1,
          "position": 497
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 796
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "res.cookie('refresh_token', tokens.refreshToken, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          sameSite: 'strict',\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        });\n      }\n\n      return res.json({\n        success: true,\n        data: tokens,\n      });\n    } catch (error: any) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: error.message,\n        },\n      });\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 201,
        "end": 222,
        "startLoc": {
          "line": 201,
          "column": 9,
          "position": 1547
        },
        "endLoc": {
          "line": 222,
          "column": 2,
          "position": 1725
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/session-management.ts",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 173
        }
      }
    },
    {
      "format": "typescript",
      "lines": 78,
      "fragment": "}\n\n/**\n * Create logout middleware\n */\nexport function createLogoutMiddleware(sessionManager: JWTSessionManager) {\n  return async (req: Request, res: Response) => {\n    try {\n      const { logoutAll = false } = req.body;\n\n      if (!req.user) {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Not authenticated',\n          },\n        });\n      }\n\n      if (logoutAll) {\n        // Revoke all user tokens\n        sessionManager.revokeAllUserTokens(req.user.id);\n      } else if (req.sessionId) {\n        // Revoke current session\n        sessionManager.revokeSession(req.sessionId);\n      } else if (req.user?.tokenId) {\n        // Revoke current token\n        sessionManager.revokeToken(req.user.tokenId);\n      }\n\n      // Clear cookies\n      if (req.cookies) {\n        res.clearCookie('access_token');\n        res.clearCookie('refresh_token');\n      }\n\n      return res.json({\n        success: true,\n        message: logoutAll ? 'All sessions have been terminated' : 'Logged out successfully',\n      });\n    } catch (_error: any) {\n      return res.status(500).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.INTERNAL_ERROR,\n          message: 'Failed to logout',\n        },\n      });\n    }\n  };\n}\n\n/**\n * Create session management middleware\n */\nexport function createSessionManagementMiddleware(sessionManager: JWTSessionManager) {\n  return {\n    // Get all user sessions\n    getSessions: async (req: Request, res: Response) => {\n      if (!req.user) {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Not authenticated',\n          },\n        });\n      }\n\n      const sessions = sessionManager.getUserSessions(req.user.id);\n\n      return res.json({\n        success: true,\n        data: sessions.map((session) => ({\n          sessionId: session.sessionId,\n          createdAt: session.issuedAt,\n          expiresAt: session.expiresAt,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 223,
        "end": 300,
        "startLoc": {
          "line": 223,
          "column": 1,
          "position": 1727
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2295
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/session-management.ts",
        "start": 24,
        "end": 101,
        "startLoc": {
          "line": 24,
          "column": 1,
          "position": 173
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 741
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "},\n\n    // Revoke a specific session\n    revokeSession: async (req: Request, res: Response) => {\n      if (!req.user) {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Not authenticated',\n          },\n        });\n      }\n\n      const { sessionId } = req.params;\n\n      // Verify user owns this session\n      const sessions = sessionManager.getUserSessions(req.user.id);\n      if (!sessions.some((s) => s.sessionId === sessionId)) {\n        return res.status(403).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.FORBIDDEN,\n            message: 'Cannot revoke session that does not belong to you',\n          },\n        });\n      }\n\n      sessionManager.revokeSession(sessionId);\n\n      return res.json({\n        success: true,\n        message: 'Session revoked successfully',\n      });\n    },\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 308,
        "end": 343,
        "startLoc": {
          "line": 308,
          "column": 5,
          "position": 2360
        },
        "endLoc": {
          "line": 343,
          "column": 2,
          "position": 2624
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts",
        "start": 8,
        "end": 46,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 61
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 326
        }
      }
    },
    {
      "format": "typescript",
      "lines": 57,
      "fragment": "}\n\n/**\n * Role-based access control middleware\n */\nexport function requireRole(...requiredRoles: string[]) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: 'Authentication required',\n        },\n      });\n      return;\n    }\n\n    if (!req.user.roles || !requiredRoles.some((role) => req.user?.roles?.includes(role))) {\n      res.status(403).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.FORBIDDEN,\n          message: `One of the following roles is required: ${requiredRoles.join(', ')}`,\n        },\n      });\n      return;\n    }\n\n    next();\n  };\n}\n\n/**\n * Permission-based access control middleware\n */\nexport function requirePermission(...requiredPermissions: string[]) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: 'Authentication required',\n        },\n      });\n      return;\n    }\n\n    if (\n      !req.user.permissions ||\n      !requiredPermissions.some((perm) => req.user?.permissions?.includes(perm))\n    ) {\n      res.status(403).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.FORBIDDEN,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 344,
        "end": 400,
        "startLoc": {
          "line": 344,
          "column": 1,
          "position": 2626
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3064
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/rbac-enforcement.ts",
        "start": 46,
        "end": 102,
        "startLoc": {
          "line": 46,
          "column": 1,
          "position": 326
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 764
        }
      }
    },
    {
      "format": "typescript",
      "lines": 62,
      "fragment": ": void {\n    this.io.on('connection', (socket: Socket) => {\n      const _user = socket.data.user as IJwtPayload;\n      const _sessionId = socket.data.sessionId;\n\n      // Handle workflow room joining\n      socket.on('join:workflow', async (data: { workflowId: string }) => {\n        await this.handleJoinWorkflow(socket, data.workflowId);\n      });\n\n      // Handle cursor movement\n      socket.on('cursor:move', (data: { x: number; y: number; nodeId?: string }) => {\n        this.handleCursorMove(socket, data);\n      });\n\n      // Handle selection changes\n      socket.on('selection:change', (data: { nodeIds: string[]; edgeIds: string[] }) => {\n        this.handleSelectionChange(socket, data);\n      });\n\n      // Handle workflow operations (with OT)\n      socket.on('operation:apply', async (operation: any) => {\n        await this.handleOperation(socket, operation);\n      });\n\n      // Handle node operations\n      socket.on('node:add', (data: any) => this.handleNodeAdd(socket, data));\n      socket.on('node:update', (data: any) => this.handleNodeUpdate(socket, data));\n      socket.on('node:delete', (data: any) => this.handleNodeDelete(socket, data));\n      socket.on('node:move', (data: any) => this.handleNodeMove(socket, data));\n\n      // Handle edge operations\n      socket.on('edge:add', (data: any) => this.handleEdgeAdd(socket, data));\n      socket.on('edge:update', (data: any) => this.handleEdgeUpdate(socket, data));\n      socket.on('edge:delete', (data: any) => this.handleEdgeDelete(socket, data));\n\n      // Handle comments\n      socket.on('comment:add', (data: any) => this.handleCommentAdd(socket, data));\n      socket.on('comment:reply', (data: any) => this.handleCommentReply(socket, data));\n      socket.on('comment:resolve', (data: any) => this.handleCommentResolve(socket, data));\n\n      // Handle typing indicators\n      socket.on('typing:start', (data: { nodeId: string; field: string }) => {\n        this.handleTypingStart(socket, data);\n      });\n      socket.on('typing:stop', (data: { nodeId: string; field: string }) => {\n        this.handleTypingStop(socket, data);\n      });\n\n      // Handle disconnection\n      socket.on('disconnect', () => {\n        this.handleDisconnect(socket);\n      });\n\n      // Handle leaving workflow\n      socket.on('leave:workflow', () => {\n        this.handleLeaveWorkflow(socket);\n      });\n    });\n  }\n\n  private async handleJoinWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 101,
        "end": 162,
        "startLoc": {
          "line": 101,
          "column": 2,
          "position": 846
        },
        "endLoc": {
          "line": 162,
          "column": 19,
          "position": 1603
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/socket-manager-events.ts",
        "start": 3,
        "end": 66,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 7
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 761
        }
      }
    },
    {
      "format": "typescript",
      "lines": 38,
      "fragment": "handleJoinWorkflow(socket: Socket, workflowId: string): Promise<void> {\n    const user = socket.data.user as IJwtPayload;\n    const sessionId = socket.data.sessionId;\n\n    // Check permissions\n    if (!this.checkWorkflowAccess(user, workflowId)) {\n      socket.emit('error', { message: 'Access denied to workflow' });\n      return;\n    }\n\n    // Join room\n    await socket.join(`workflow:${workflowId}`);\n    socket.data.workflowId = workflowId;\n\n    // Create collaboration session\n    const session: CollaborationSession = {\n      workflowId,\n      userId: user.sub,\n      userName: user.email,\n      userColor: this.generateUserColor(user.sub),\n      isActive: true,\n      lastActivity: new Date(),\n    };\n\n    this.sessions.set(sessionId, session);\n\n    // Track presence\n    await this.presenceTracker.addUser(workflowId, {\n      userId: user.sub,\n      sessionId,\n      socketId: socket.id,\n      userName: user.email,\n      userColor: session.userColor,\n      joinedAt: new Date(),\n    });\n\n    // Get current collaborators\n    const collaborators = await this.presenceTracker.getUsers(workflowId);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 162,
        "end": 199,
        "startLoc": {
          "line": 162,
          "column": 2,
          "position": 1603
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1920
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/socket-manager-events.ts",
        "start": 67,
        "end": 106,
        "startLoc": {
          "line": 67,
          "column": 1,
          "position": 763
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 1081
        }
      }
    },
    {
      "format": "typescript",
      "lines": 99,
      "fragment": "private handleNodeUpdate(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    // Check for conflicts\n    const isLocked = this.checkNodeLock(workflowId, data.nodeId, user.sub);\n    if (isLocked) {\n      socket.emit('node:locked', { nodeId: data.nodeId });\n      return;\n    }\n\n    // Broadcast node update\n    socket.to(`workflow:${workflowId}`).emit('node:updated', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleNodeDelete(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('node:deleted', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleNodeMove(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('node:moved', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleEdgeAdd(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:added', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleEdgeUpdate(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:updated', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleEdgeDelete(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:deleted', {\n      ...data,\n      userId: user.sub,\n      timestamp: new Date(),\n    });\n  }\n\n  private handleCommentAdd(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    const comment = {\n      id: `comment-${Date.now()}`,\n      ...data,\n      userId: user.sub,\n      userName: user.email,\n      timestamp: new Date(),\n    };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 302,
        "end": 400,
        "startLoc": {
          "line": 302,
          "column": 3,
          "position": 2754
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3669
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/workflow-operations.ts",
        "start": 1,
        "end": 120,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 120,
          "column": 2,
          "position": 910
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "(socket: Socket, data: { nodeId: string; field: string }): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n    const sessionId = socket.data.sessionId;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('typing:stopped'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 451,
        "end": 458,
        "startLoc": {
          "line": 451,
          "column": 17,
          "position": 4134
        },
        "endLoc": {
          "line": 458,
          "column": 17,
          "position": 4238
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 436,
        "end": 443,
        "startLoc": {
          "line": 436,
          "column": 18,
          "position": 3985
        },
        "endLoc": {
          "line": 443,
          "column": 17,
          "position": 4089
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "if (op1.timestamp > op2.timestamp) {\n          return {\n            operation1: op1,\n            operation2: { ...op2, data: null },\n            conflict: true,\n          };\n        } else {\n          return {\n            operation1: { ...op1, data: null },\n            operation2: op2,\n            conflict: true,\n          };\n        }\n      }\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 188,
        "end": 202,
        "startLoc": {
          "line": 188,
          "column": 9,
          "position": 1317
        },
        "endLoc": {
          "line": 202,
          "column": 2,
          "position": 1429
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 42,
        "end": 57,
        "startLoc": {
          "line": 42,
          "column": 5,
          "position": 283
        },
        "endLoc": {
          "line": 57,
          "column": 7,
          "position": 396
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "}\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform NODE_DELETE operations\n   */\n  private transformNodeDelete(op1: Operation, op2: Operation): TransformResult {\n    // Both deleting same node - one becomes no-op\n    if (op1.path[0] === op2.path[0]) {\n      if (op1.timestamp < op2.timestamp) {\n        return {\n          operation1: op1,\n          operation2: { ...op2, type: OperationType.NODE_ADD },\n          conflict: false,\n        };\n      } else {\n        return {\n          operation1: { ...op1, type: OperationType.NODE_ADD },\n          operation2: op2,\n          conflict: false,\n        };\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform NODE_MOVE operations\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 201,
        "end": 233,
        "startLoc": {
          "line": 201,
          "column": 7,
          "position": 1426
        },
        "endLoc": {
          "line": 233,
          "column": 6,
          "position": 1659
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 229
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "private transformNodeMove(op1: Operation, op2: Operation): TransformResult {\n    // Moving same node\n    if (op1.path[0] === op2.path[0]) {\n      // Last move wins\n      if (op1.timestamp > op2.timestamp) {\n        return {\n          operation1: op1,\n          operation2: { ...op2, data: null },\n          conflict: true,\n        };\n      } else {\n        return {\n          operation1: { ...op1, data: null },\n          operation2: op2,\n          conflict: true,\n        };\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform TEXT_INSERT operations\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 234,
        "end": 258,
        "startLoc": {
          "line": 234,
          "column": 3,
          "position": 1662
        },
        "endLoc": {
          "line": 258,
          "column": 6,
          "position": 1855
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 35,
        "end": 62,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 231
        },
        "endLoc": {
          "line": 62,
          "column": 4,
          "position": 423
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "private transformTextInsert(op1: Operation, op2: Operation): TransformResult {\n    if (op1.path.join('.') !== op2.path.join('.')) {\n      return { operation1: op1, operation2: op2, conflict: false };\n    }\n\n    const pos1 = op1.position || 0;\n    const pos2 = op2.position || 0;\n    const len1 = op1.data?.text?.length || 0;\n    const len2 = op2.data?.text?.length || 0;\n\n    if (pos1 < pos2) {\n      // op1 is before op2, shift op2's position\n      op2.position = pos2 + len1;\n    } else if (pos1 > pos2) {\n      // op2 is before op1, shift op1's position\n      op1.position = pos1 + len2;\n    } else {\n      // Same position - tie break by user ID\n      if (op1.userId < op2.userId) {\n        op2.position = pos2 + len1;\n      } else {\n        op1.position = pos1 + len2;\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform TEXT_DELETE operations\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 259,
        "end": 289,
        "startLoc": {
          "line": 259,
          "column": 3,
          "position": 1858
        },
        "endLoc": {
          "line": 289,
          "column": 6,
          "position": 2175
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 63,
        "end": 96,
        "startLoc": {
          "line": 63,
          "column": 1,
          "position": 425
        },
        "endLoc": {
          "line": 96,
          "column": 4,
          "position": 741
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "private transformTextDelete(op1: Operation, op2: Operation): TransformResult {\n    if (op1.path.join('.') !== op2.path.join('.')) {\n      return { operation1: op1, operation2: op2, conflict: false };\n    }\n\n    const start1 = op1.position || 0;\n    const end1 = start1 + (op1.length || 0);\n    const start2 = op2.position || 0;\n    const end2 = start2 + (op2.length || 0);\n\n    // No overlap",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 290,
        "end": 300,
        "startLoc": {
          "line": 290,
          "column": 3,
          "position": 2178
        },
        "endLoc": {
          "line": 300,
          "column": 14,
          "position": 2333
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/transform-algorithms.ts",
        "start": 97,
        "end": 110,
        "startLoc": {
          "line": 97,
          "column": 1,
          "position": 743
        },
        "endLoc": {
          "line": 110,
          "column": 14,
          "position": 898
        }
      }
    },
    {
      "format": "typescript",
      "lines": 56,
      "fragment": "if (end1 <= start2) {\n      // op1 is before op2\n      op2.position = start2 - (end1 - start1);\n    } else if (end2 <= start1) {\n      // op2 is before op1\n      op1.position = start1 - (end2 - start2);\n    } else {\n      // Overlapping deletes\n      const overlapStart = Math.max(start1, start2);\n      const overlapEnd = Math.min(end1, end2);\n      const overlapLength = overlapEnd - overlapStart;\n\n      if (start1 < start2) {\n        op1.length = (op1.length || 0) - overlapLength;\n        op2.position = start1;\n        op2.length = (op2.length || 0) - overlapLength;\n      } else {\n        op2.length = (op2.length || 0) - overlapLength;\n        op1.position = start2;\n        op1.length = (op1.length || 0) - overlapLength;\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform ARRAY_INSERT operations\n   */\n  private transformArrayInsert(op1: Operation, op2: Operation): TransformResult {\n    if (op1.path.join('.') !== op2.path.join('.')) {\n      return { operation1: op1, operation2: op2, conflict: false };\n    }\n\n    const index1 = op1.position || 0;\n    const index2 = op2.position || 0;\n\n    if (index1 < index2) {\n      op2.position = index2 + 1;\n    } else if (index1 > index2) {\n      op1.position = index1 + 1;\n    } else {\n      // Same index - tie break by user ID\n      if (op1.userId < op2.userId) {\n        op2.position = index2 + 1;\n      } else {\n        op1.position = index1 + 1;\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform ARRAY_DELETE operations\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 301,
        "end": 356,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2336
        },
        "endLoc": {
          "line": 356,
          "column": 6,
          "position": 2907
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 4,
          "position": 564
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "private transformArrayDelete(op1: Operation, op2: Operation): TransformResult {\n    if (op1.path.join('.') !== op2.path.join('.')) {\n      return { operation1: op1, operation2: op2, conflict: false };\n    }\n\n    const index1 = op1.position || 0;\n    const index2 = op2.position || 0;\n\n    if (index1 < index2) {\n      op2.position = index2 - 1;\n    } else if (index1 > index2) {\n      op1.position = index1 - 1;\n    } else {\n      // Same index - one becomes no-op\n      if (op1.timestamp < op2.timestamp) {\n        return {\n          operation1: op1,\n          operation2: { ...op2, type: OperationType.ARRAY_INSERT },\n          conflict: false,\n        };\n      } else {\n        return {\n          operation1: { ...op1, type: OperationType.ARRAY_INSERT },\n          operation2: op2,\n          conflict: false,\n        };\n      }\n    }\n\n    return { operation1: op1, operation2: op2, conflict: false };\n  }\n\n  /**\n   * Transform operation against pending operations\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 357,
        "end": 391,
        "startLoc": {
          "line": 357,
          "column": 3,
          "position": 2910
        },
        "endLoc": {
          "line": 391,
          "column": 6,
          "position": 3235
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts",
        "start": 58,
        "end": 95,
        "startLoc": {
          "line": 58,
          "column": 1,
          "position": 566
        },
        "endLoc": {
          "line": 95,
          "column": 4,
          "position": 890
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "private transformAgainstPending(operation: Operation): Operation {\n    const userPending = this.pendingOperations.get(operation.userId) || [];\n    let transformedOp = operation;\n\n    for (const pendingOp of userPending) {\n      const result = this.transform(transformedOp, pendingOp);\n      transformedOp = result.operation1;\n\n      if (result.conflict) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 392,
        "end": 400,
        "startLoc": {
          "line": 392,
          "column": 3,
          "position": 3238
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/conflict-resolution.ts",
        "start": 96,
        "end": 107,
        "startLoc": {
          "line": 96,
          "column": 1,
          "position": 892
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 996
        }
      }
    },
    {
      "format": "typescript",
      "lines": 65,
      "fragment": "this.emit('conflict:detected', {\n          operation1: transformedOp,\n          operation2: pendingOp,\n          userId: operation.userId,\n        });\n      }\n    }\n\n    return transformedOp;\n  }\n\n  /**\n   * Create inverse operation for undo\n   */\n  private createInverseOperation(operation: Operation): Operation {\n    const inverse: Operation = {\n      ...operation,\n      id: `inverse_${operation.id}`,\n      timestamp: Date.now(),\n    };\n\n    switch (operation.type) {\n      case OperationType.NODE_ADD:\n        inverse.type = OperationType.NODE_DELETE;\n        break;\n\n      case OperationType.NODE_DELETE:\n        inverse.type = OperationType.NODE_ADD;\n        break;\n\n      case OperationType.TEXT_INSERT:\n        inverse.type = OperationType.TEXT_DELETE;\n        inverse.length = operation.data?.text?.length || 0;\n        break;\n\n      case OperationType.TEXT_DELETE:\n        inverse.type = OperationType.TEXT_INSERT;\n        break;\n\n      case OperationType.ARRAY_INSERT:\n        inverse.type = OperationType.ARRAY_DELETE;\n        break;\n\n      case OperationType.ARRAY_DELETE:\n        inverse.type = OperationType.ARRAY_INSERT;\n        break;\n\n      case OperationType.NODE_MOVE:\n        // Swap from and to positions\n        inverse.from = operation.to;\n        inverse.to = operation.from;\n        break;\n\n      case OperationType.PROPERTY_SET:\n        // Store old value if available\n        inverse.data = operation.data?.oldValue;\n        break;\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Add operation to history\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 401,
        "end": 465,
        "startLoc": {
          "line": 401,
          "column": 9,
          "position": 3344
        },
        "endLoc": {
          "line": 465,
          "column": 6,
          "position": 3731
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-validation.ts",
        "start": 1,
        "end": 66,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 66,
          "column": 4,
          "position": 381
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "private addToHistory(operation: Operation, inverseOperation: Operation): void {\n    this.operationHistory.push({\n      operation,\n      inverseOperation,\n      timestamp: operation.timestamp,\n      userId: operation.userId,\n    });\n\n    // Trim history if needed\n    if (this.operationHistory.length > this.maxHistorySize) {\n      this.operationHistory.shift();\n    }\n  }\n\n  /**\n   * Validate operation\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 466,
        "end": 482,
        "startLoc": {
          "line": 466,
          "column": 3,
          "position": 3734
        },
        "endLoc": {
          "line": 482,
          "column": 6,
          "position": 3836
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-validation.ts",
        "start": 67,
        "end": 86,
        "startLoc": {
          "line": 67,
          "column": 1,
          "position": 383
        },
        "endLoc": {
          "line": 86,
          "column": 4,
          "position": 484
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "private validateOperation(operation: Operation): void {\n    if (!operation.id) {\n      throw new Error('Operation must have an ID');\n    }\n\n    if (!operation.type) {\n      throw new Error('Operation must have a type');\n    }\n\n    if (!operation.userId) {\n      throw new Error('Operation must have a user ID');\n    }\n\n    if (!operation.timestamp) {\n      operation.timestamp = Date.now();\n    }\n\n    if (operation.version === undefined) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 483,
        "end": 500,
        "startLoc": {
          "line": 483,
          "column": 3,
          "position": 3839
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3978
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-validation.ts",
        "start": 87,
        "end": 107,
        "startLoc": {
          "line": 87,
          "column": 1,
          "position": 486
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 626
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "undo(userId: string): Operation | null {\n    // Find last operation by user\n    const lastOpIndex = this.operationHistory.findLastIndex((entry) => entry.userId === userId);\n\n    if (lastOpIndex === -1) {\n      return null;\n    }\n\n    const entry = this.operationHistory[lastOpIndex];\n\n    // Apply inverse operation\n    const undoOp = this.applyOperation(entry.inverseOperation);\n\n    // Remove from history\n    this.operationHistory.splice(lastOpIndex, 1);\n\n    return undoOp;\n  }\n\n  /**\n   * Get operation history\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine.ts",
        "start": 515,
        "end": 536,
        "startLoc": {
          "line": 515,
          "column": 3,
          "position": 4047
        },
        "endLoc": {
          "line": 536,
          "column": 6,
          "position": 4187
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/operation-utilities.ts",
        "start": 16,
        "end": 39,
        "startLoc": {
          "line": 16,
          "column": 1,
          "position": 62
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 201
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "executeTrigger(triggerName: string, properties: Record<string, any>): Promise<any> {\n    const trigger = this.triggers.get(triggerName);\n    if (!trigger) {\n      throw new Error(`Trigger ${triggerName} not found`);\n    }\n\n    // Validate properties\n    const validatedProps = trigger.properties.parse(properties);\n\n    // Execute trigger implementation\n    const methodName = `trigger_${triggerName}`;\n    if (typeof (this as any)[methodName] !== 'function') {\n      throw new Error(`Trigger implementation ${methodName} not found`);\n    }\n\n    const result = await (this as any)[methodName](validatedProps);\n\n    // Validate output\n    return trigger.outputSchema.parse(result);\n  }\n\n  /**\n   * Execute an action\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts",
        "start": 156,
        "end": 179,
        "startLoc": {
          "line": 156,
          "column": 2,
          "position": 939
        },
        "endLoc": {
          "line": 179,
          "column": 6,
          "position": 1140
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-execution.ts",
        "start": 74,
        "end": 99,
        "startLoc": {
          "line": 74,
          "column": 1,
          "position": 238
        },
        "endLoc": {
          "line": 99,
          "column": 4,
          "position": 438
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "executeAction(\n    actionName: string,\n    input: Record<string, any>,\n    properties: Record<string, any>\n  ): Promise<any> {\n    const action = this.actions.get(actionName);\n    if (!action) {\n      throw new Error(`Action ${actionName} not found`);\n    }\n\n    // Validate input and properties\n    const validatedInput = action.inputSchema.parse(input);\n    const validatedProps = action.properties.parse(properties);\n\n    // Check rate limiting\n    if (this.rateLimiter) {\n      await this.rateLimiter.checkLimit();\n    }\n\n    // Execute action implementation\n    const methodName = `action_${actionName}`;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts",
        "start": 180,
        "end": 200,
        "startLoc": {
          "line": 180,
          "column": 2,
          "position": 1145
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1320
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-execution.ts",
        "start": 101,
        "end": 123,
        "startLoc": {
          "line": 101,
          "column": 1,
          "position": 443
        },
        "endLoc": {
          "line": 123,
          "column": 2,
          "position": 619
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "if (typeof (this as any)[methodName] !== 'function') {\n      throw new Error(`Action implementation ${methodName} not found`);\n    }\n\n    const result = await (this as any)[methodName](validatedInput, validatedProps);\n\n    // Validate output\n    return action.outputSchema.parse(result);\n  }\n\n  /**\n   * Handle webhook\n   */\n  async handleWebhook?(\n    _headers: Record<string, string>,\n    _body: any,\n    _query?: Record<string, string>\n  ): Promise<any> {\n    throw new Error('Webhook handling not implemented');\n  }\n\n  /**\n   * Validate webhook signature\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts",
        "start": 201,
        "end": 224,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1323
        },
        "endLoc": {
          "line": 224,
          "column": 6,
          "position": 1483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-utilities.ts",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 4,
          "position": 153
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "protected log(level: string, message: string, data?: any): void {\n    if (this.context?.logger) {\n      this.context.logger[level](message, data);\n    }\n    this.emit('log', { level, message, data });\n  }\n\n  /**\n   * Handle errors\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts",
        "start": 260,
        "end": 269,
        "startLoc": {
          "line": 260,
          "column": 3,
          "position": 1655
        },
        "endLoc": {
          "line": 269,
          "column": 6,
          "position": 1744
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-utilities.ts",
        "start": 70,
        "end": 82,
        "startLoc": {
          "line": 70,
          "column": 1,
          "position": 316
        },
        "endLoc": {
          "line": 82,
          "column": 4,
          "position": 404
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "protected handleError(error: any): never {\n    this.log('error', 'Integration error', {\n      integration: this.metadata.name,\n      error: error.message,\n      stack: error.stack,\n    });\n    throw error;\n  }\n}\n\nexport default BaseIntegration;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration.ts",
        "start": 270,
        "end": 280,
        "startLoc": {
          "line": 270,
          "column": 3,
          "position": 1747
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 1826
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/plugin-framework/src/base/base-integration/integration-utilities.ts",
        "start": 83,
        "end": 96,
        "startLoc": {
          "line": 83,
          "column": 1,
          "position": 406
        },
        "endLoc": {
          "line": 96,
          "column": 2,
          "position": 485
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "): Promise<boolean> {\n    const state = this.states.get(executionId);\n    if (!state) return false;\n\n    // Merge updates\n    Object.assign(state, updates);\n\n    // Update execution tracking\n    if (\n      updates.status === 'completed' ||\n      updates.status === 'failed' ||\n      updates.status === 'cancelled'\n    ) {\n      state.endTime = new Date();\n      this.stopSnapshotting(executionId);\n      await this.createSnapshot(executionId, 'completion');\n    }\n\n    return true;\n  }\n\n  async updateNodeState",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 102,
        "end": 123,
        "startLoc": {
          "line": 102,
          "column": 3,
          "position": 850
        },
        "endLoc": {
          "line": 123,
          "column": 16,
          "position": 1005
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-management.ts",
        "start": 2,
        "end": 24,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 161
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "updateNodeState(\n    executionId: string,\n    nodeId: string,\n    nodeState: Partial<NodeState>\n  ): Promise<boolean> {\n    const state = this.states.get(executionId);\n    if (!state) return false;\n\n    const existingNodeState = state.nodeStates.get(nodeId) || {\n      nodeId,\n      status: 'pending',\n      retryCount: 0,\n    };\n\n    const updatedNodeState = { ...existingNodeState, ...nodeState };\n    state.nodeStates.set(nodeId, updatedNodeState);\n\n    // Update current node if running\n    if (nodeState.status === 'running') {\n      state.currentNode = nodeId;\n    }\n\n    // Add to executed nodes if completed\n    if (nodeState.status === 'completed' && !state.executedNodes.includes(nodeId)) {\n      state.executedNodes.push(nodeId);\n    }\n\n    return true;\n  }\n\n  async getExecutionState",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 123,
        "end": 153,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 1005
        },
        "endLoc": {
          "line": 153,
          "column": 18,
          "position": 1240
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-management.ts",
        "start": 25,
        "end": 57,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 163
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 396
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "getExecutionState(executionId: string): Promise<WorkflowState | undefined> {\n    let state = this.states.get(executionId);\n\n    // If not in memory, try to load from persistence layer\n    if (!state) {\n      state = await this.loadFromPersistence(executionId);\n      if (state) {\n        this.states.set(executionId, state);\n      }\n    }\n\n    return state;\n  }\n\n  async getNodeState",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 153,
        "end": 167,
        "startLoc": {
          "line": 153,
          "column": 2,
          "position": 1240
        },
        "endLoc": {
          "line": 167,
          "column": 13,
          "position": 1349
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-management.ts",
        "start": 58,
        "end": 74,
        "startLoc": {
          "line": 58,
          "column": 1,
          "position": 398
        },
        "endLoc": {
          "line": 74,
          "column": 2,
          "position": 505
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "queryStates(query: StateQuery): Promise<WorkflowState[]> {\n    let states = Array.from(this.states.values());\n\n    // Apply filters\n    if (query.workflowId) {\n      states = states.filter((s) => s.workflowId === query.workflowId);\n    }\n\n    if (query.organizationId) {\n      states = states.filter((s) => s.organizationId === query.organizationId);\n    }\n\n    if (query.status) {\n      states = states.filter((s) => s.status === query.status);\n    }\n\n    if (query.startTime) {\n      if (query.startTime.from) {\n        states = states.filter((s) => s.startTime >= query.startTime?.from!);\n      }\n      if (query.startTime.to) {\n        states = states.filter((s) => s.startTime <= query.startTime?.to!);\n      }\n    }\n\n    // Apply pagination\n    const offset = query.offset || 0;\n    const limit = query.limit || 100;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 172,
        "end": 199,
        "startLoc": {
          "line": 172,
          "column": 2,
          "position": 1413
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1724
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-management.ts",
        "start": 83,
        "end": 112,
        "startLoc": {
          "line": 83,
          "column": 1,
          "position": 571
        },
        "endLoc": {
          "line": 112,
          "column": 2,
          "position": 883
        }
      }
    },
    {
      "format": "typescript",
      "lines": 45,
      "fragment": "): Promise<string> {\n    const state = this.states.get(executionId);\n    if (!state) {\n      throw new Error(`Execution not found: ${executionId}`);\n    }\n\n    // Create serializable state copy\n    const serializedState = this.serializeState(state);\n    let data = JSON.stringify(serializedState);\n    let compressed = false;\n\n    // Compress if enabled\n    if (this.config.compressionEnabled) {\n      data = await this.compressData(data);\n      compressed = true;\n    }\n\n    const snapshot: StateSnapshot = {\n      id: this.generateId(),\n      executionId,\n      timestamp: new Date(),\n      state: serializedState,\n      checkpointType: type,\n      size: data.length,\n      compressed,\n    };\n\n    // Get or create snapshots array\n    let executionSnapshots = this.snapshots.get(executionId) || [];\n\n    // Limit snapshots per execution\n    if (executionSnapshots.length >= this.config.maxSnapshotsPerExecution) {\n      executionSnapshots = executionSnapshots.slice(-this.config.maxSnapshotsPerExecution + 1);\n    }\n\n    executionSnapshots.push(snapshot);\n    this.snapshots.set(executionId, executionSnapshots);\n\n    // Persist if configured\n    await this.persistSnapshot(snapshot);\n\n    return snapshot.id;\n  }\n\n  async restoreFromSnapshot",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 207,
        "end": 251,
        "startLoc": {
          "line": 207,
          "column": 3,
          "position": 1772
        },
        "endLoc": {
          "line": 251,
          "column": 20,
          "position": 2113
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/snapshot-operations.ts",
        "start": 7,
        "end": 52,
        "startLoc": {
          "line": 7,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 52,
          "column": 2,
          "position": 380
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "restoreFromSnapshot(snapshotId: string): Promise<boolean> {\n    // Find snapshot across all executions\n    let targetSnapshot: StateSnapshot | undefined;\n    let executionId: string | undefined;\n\n    for (const [execId, snapshots] of this.snapshots.entries()) {\n      const snapshot = snapshots.find((s) => s.id === snapshotId);\n      if (snapshot) {\n        targetSnapshot = snapshot;\n        executionId = execId;\n        break;\n      }\n    }\n\n    if (!targetSnapshot || !executionId) {\n      return false;\n    }\n\n    // Restore state\n    const restoredState = this.deserializeState(targetSnapshot.state);\n    this.states.set(executionId, restoredState);\n\n    // Restart snapshotting if execution is still active\n    if (['initializing', 'running', 'paused'].includes(restoredState.status)) {\n      this.startSnapshotting(executionId);\n    }\n\n    return true;\n  }\n\n  async getSnapshots",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 251,
        "end": 281,
        "startLoc": {
          "line": 251,
          "column": 2,
          "position": 2113
        },
        "endLoc": {
          "line": 281,
          "column": 13,
          "position": 2361
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/snapshot-operations.ts",
        "start": 53,
        "end": 85,
        "startLoc": {
          "line": 53,
          "column": 1,
          "position": 382
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 628
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "deleteExecution(executionId: string): Promise<boolean> {\n    this.stopSnapshotting(executionId);\n    const stateDeleted = this.states.delete(executionId);\n    const snapshotsDeleted = this.snapshots.delete(executionId);\n\n    // Clean up from persistence layer\n    await this.deleteFromPersistence(executionId);\n\n    return stateDeleted || snapshotsDeleted;\n  }\n\n  async getExecutionMetrics",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 285,
        "end": 296,
        "startLoc": {
          "line": 285,
          "column": 2,
          "position": 2404
        },
        "endLoc": {
          "line": 296,
          "column": 20,
          "position": 2496
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/snapshot-operations.ts",
        "start": 93,
        "end": 106,
        "startLoc": {
          "line": 93,
          "column": 1,
          "position": 673
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 763
        }
      }
    },
    {
      "format": "typescript",
      "lines": 66,
      "fragment": "averageNodeTime: number;\n        totalExecutionTime: number;\n      }\n    | undefined\n  > {\n    const state = await this.getExecutionState(executionId);\n    if (!state) return undefined;\n\n    const nodeStates = Array.from(state.nodeStates.values());\n    const completedNodes = nodeStates.filter((n) => n.status === 'completed');\n    const failedNodes = nodeStates.filter((n) => n.status === 'failed');\n\n    const totalExecutionTime = state.endTime\n      ? state.endTime.getTime() - state.startTime.getTime()\n      : 0;\n\n    const averageNodeTime =\n      completedNodes.length > 0\n        ? completedNodes.reduce((sum, node) => sum + (node.executionTime || 0), 0) /\n          completedNodes.length\n        : 0;\n\n    return {\n      totalNodes: nodeStates.length,\n      completedNodes: completedNodes.length,\n      failedNodes: failedNodes.length,\n      averageNodeTime,\n      totalExecutionTime,\n    };\n  }\n\n  private startSnapshotting(executionId: string): void {\n    const interval = setInterval(async () => {\n      await this.createSnapshot(executionId, 'auto');\n    }, this.config.snapshotInterval);\n\n    this.snapshotIntervals.set(executionId, interval);\n  }\n\n  private stopSnapshotting(executionId: string): void {\n    const interval = this.snapshotIntervals.get(executionId);\n    if (interval) {\n      clearInterval(interval);\n      this.snapshotIntervals.delete(executionId);\n    }\n  }\n\n  private serializeState(state: WorkflowState): WorkflowState {\n    // Convert Map to object for serialization\n    return {\n      ...state,\n      nodeStates: Object.fromEntries(state.nodeStates) as any,\n    };\n  }\n\n  private deserializeState(serializedState: any): WorkflowState {\n    // Convert object back to Map\n    return {\n      ...serializedState,\n      nodeStates: new Map(Object.entries(serializedState.nodeStates)),\n      startTime: new Date(serializedState.startTime),\n      endTime: serializedState.endTime ? new Date(serializedState.endTime) : undefined,\n    };\n  }\n\n  private async compressData",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index.ts",
        "start": 301,
        "end": 366,
        "startLoc": {
          "line": 301,
          "column": 9,
          "position": 2535
        },
        "endLoc": {
          "line": 366,
          "column": 13,
          "position": 3119
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/state-utilities.ts",
        "start": 1,
        "end": 80,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 575
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "createSchedule(\n    schedule: Omit<ScheduleDefinition, 'id' | 'currentRuns' | 'createdAt' | 'updatedAt'>\n  ): Promise<string> {\n    const newSchedule: ScheduleDefinition = {\n      ...schedule,\n      id: this.generateId(),\n      currentRuns: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Validate cron expression if provided\n    if (newSchedule.type === 'cron' && newSchedule.schedule.cron) {\n      try {\n        // TODO: Use cron-parser to validate\n        this.validateCronExpression(newSchedule.schedule.cron);\n      } catch (_error) {\n        throw new Error(`Invalid cron expression: ${newSchedule.schedule.cron}`);\n      }\n    }\n\n    // Calculate next run time\n    newSchedule.nextRun = this.calculateNextRun(newSchedule);\n\n    this.schedules.set(newSchedule.id, newSchedule);\n\n    // Start the schedule if enabled and scheduler is running\n    if (newSchedule.enabled && this.running) {\n      await this.startSchedule(newSchedule.id);\n    }\n\n    return newSchedule.id;\n  }\n\n  async updateSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 102,
        "end": 136,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 767
        },
        "endLoc": {
          "line": 136,
          "column": 15,
          "position": 1039
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-management.ts",
        "start": 2,
        "end": 38,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 273
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "updateSchedule(id: string, updates: Partial<ScheduleDefinition>): Promise<boolean> {\n    const schedule = this.schedules.get(id);\n    if (!schedule) return false;\n\n    // Stop current schedule\n    await this.stopSchedule(id);\n\n    // Update schedule\n    const updatedSchedule = {\n      ...schedule,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    // Recalculate next run if schedule changed\n    if (updates.schedule || updates.type) {\n      updatedSchedule.nextRun = this.calculateNextRun(updatedSchedule);\n    }\n\n    this.schedules.set(id, updatedSchedule);\n\n    // Restart if enabled\n    if (updatedSchedule.enabled && this.running) {\n      await this.startSchedule(id);\n    }\n\n    return true;\n  }\n\n  async deleteSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 136,
        "end": 165,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 1039
        },
        "endLoc": {
          "line": 165,
          "column": 15,
          "position": 1250
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-management.ts",
        "start": 39,
        "end": 70,
        "startLoc": {
          "line": 39,
          "column": 1,
          "position": 275
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 484
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "enableSchedule(id: string): Promise<boolean> {\n    const schedule = this.schedules.get(id);\n    if (!schedule) return false;\n\n    schedule.enabled = true;\n    schedule.updatedAt = new Date();\n\n    if (this.running) {\n      await this.startSchedule(id);\n    }\n\n    return true;\n  }\n\n  async disableSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 170,
        "end": 184,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 1297
        },
        "endLoc": {
          "line": 184,
          "column": 16,
          "position": 1408
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-management.ts",
        "start": 79,
        "end": 95,
        "startLoc": {
          "line": 79,
          "column": 1,
          "position": 533
        },
        "endLoc": {
          "line": 95,
          "column": 2,
          "position": 642
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "disableSchedule(id: string): Promise<boolean> {\n    const schedule = this.schedules.get(id);\n    if (!schedule) return false;\n\n    schedule.enabled = false;\n    schedule.updatedAt = new Date();\n    await this.stopSchedule(id);\n\n    return true;\n  }\n\n  async triggerSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 184,
        "end": 195,
        "startLoc": {
          "line": 184,
          "column": 2,
          "position": 1408
        },
        "endLoc": {
          "line": 195,
          "column": 16,
          "position": 1504
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-management.ts",
        "start": 96,
        "end": 109,
        "startLoc": {
          "line": 96,
          "column": 1,
          "position": 644
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 738
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "return this.executeWorkflow(schedule);\n  }\n\n  getSchedule(id: string): ScheduleDefinition | undefined {\n    return this.schedules.get(id);\n  }\n\n  getSchedules(organizationId?: string): ScheduleDefinition[] {\n    const schedules = Array.from(this.schedules.values());\n\n    if (organizationId) {\n      return schedules.filter((s) => s.organizationId === organizationId);\n    }\n\n    return schedules;\n  }\n\n  getExecution(id: string): ScheduleExecution | undefined {\n    return this.executions.get(id);\n  }\n\n  getExecutions(scheduleId?: string): ScheduleExecution[] {\n    const executions = Array.from(this.executions.values());\n\n    if (scheduleId) {\n      return executions.filter((e) => e.scheduleId === scheduleId);\n    }\n\n    return executions;\n  }\n\n  private async startSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 201,
        "end": 232,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1567
        },
        "endLoc": {
          "line": 232,
          "column": 14,
          "position": 1826
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-execution.ts",
        "start": 1,
        "end": 40,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 252
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "startSchedule(scheduleId: string): Promise<void> {\n    const schedule = this.schedules.get(scheduleId);\n    if (!schedule || !schedule.enabled) return;\n\n    // Clear existing interval if any\n    await this.stopSchedule(scheduleId);\n\n    switch (schedule.type) {\n      case 'cron':\n        this.startCronSchedule(schedule);\n        break;\n      case 'interval':\n        this.startIntervalSchedule(schedule);\n        break;\n      case 'once':\n        this.startOnceSchedule(schedule);\n        break;\n      // webhook schedules are triggered externally\n    }\n  }\n\n  private async stopSchedule",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 232,
        "end": 253,
        "startLoc": {
          "line": 232,
          "column": 2,
          "position": 1826
        },
        "endLoc": {
          "line": 253,
          "column": 13,
          "position": 1976
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-execution.ts",
        "start": 41,
        "end": 65,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 254
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 402
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": "stopSchedule(scheduleId: string): Promise<void> {\n    const interval = this.intervals.get(scheduleId);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(scheduleId);\n    }\n  }\n\n  private startCronSchedule(schedule: ScheduleDefinition): void {\n    if (!schedule.schedule.cron) return;\n\n    // TODO: Use node-cron for proper cron scheduling\n    // For now, simulate with a simple interval\n    const interval = setInterval(async () => {\n      if (this.shouldExecute(schedule)) {\n        await this.executeWorkflow(schedule);\n      }\n    }, 60000); // Check every minute\n\n    this.intervals.set(schedule.id, interval);\n  }\n\n  private startIntervalSchedule(schedule: ScheduleDefinition): void {\n    if (!schedule.schedule.interval) return;\n\n    const interval = setInterval(async () => {\n      if (this.shouldExecute(schedule)) {\n        await this.executeWorkflow(schedule);\n      }\n    }, schedule.schedule.interval);\n\n    this.intervals.set(schedule.id, interval);\n  }\n\n  private startOnceSchedule(schedule: ScheduleDefinition): void {\n    if (!schedule.schedule.runAt) return;\n\n    const delay = schedule.schedule.runAt.getTime() - Date.now();\n\n    if (delay > 0) {\n      const timeout = setTimeout(async () => {\n        if (this.shouldExecute(schedule)) {\n          await this.executeWorkflow(schedule);\n        }\n      }, delay);\n\n      this.intervals.set(schedule.id, timeout);\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 253,
        "end": 300,
        "startLoc": {
          "line": 253,
          "column": 2,
          "position": 1976
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2413
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-execution.ts",
        "start": 66,
        "end": 124,
        "startLoc": {
          "line": 66,
          "column": 1,
          "position": 404
        },
        "endLoc": {
          "line": 124,
          "column": 2,
          "position": 839
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "}\n\n  private shouldExecute(schedule: ScheduleDefinition): boolean {\n    // Check max runs limit\n    if (schedule.maxRuns && schedule.currentRuns >= schedule.maxRuns) {\n      return false;\n    }\n\n    // Check if it's time to run\n    if (schedule.nextRun && schedule.nextRun > new Date()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private async executeWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 301,
        "end": 317,
        "startLoc": {
          "line": 301,
          "column": 3,
          "position": 2416
        },
        "endLoc": {
          "line": 317,
          "column": 16,
          "position": 2524
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-monitoring.ts",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 105
        }
      }
    },
    {
      "format": "typescript",
      "lines": 60,
      "fragment": "executeWorkflow(schedule: ScheduleDefinition): Promise<string> {\n    const execution: ScheduleExecution = {\n      id: this.generateId(),\n      scheduleId: schedule.id,\n      workflowId: schedule.workflowId,\n      status: 'scheduled',\n      scheduledAt: new Date(),\n      attempts: 0,\n    };\n\n    this.executions.set(execution.id, execution);\n\n    try {\n      execution.status = 'running';\n      execution.startedAt = new Date();\n\n      // TODO: Integrate with workflow execution engine\n      // await workflowEngine.execute(schedule.workflowId);\n\n      execution.status = 'completed';\n      execution.completedAt = new Date();\n      execution.result = { success: true };\n\n      // Update schedule\n      schedule.currentRuns++;\n      schedule.lastRun = new Date();\n      schedule.nextRun = this.calculateNextRun(schedule);\n\n      // Send success notifications\n      if (schedule.notifications.onSuccess) {\n        await this.sendNotifications(schedule.notifications.onSuccess, 'success', execution);\n      }\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error = error instanceof Error ? error.message : 'Unknown error';\n      execution.completedAt = new Date();\n\n      // Handle retries\n      if (execution.attempts < schedule.retryPolicy.maxRetries) {\n        execution.attempts++;\n        const delay = this.calculateRetryDelay(schedule.retryPolicy, execution.attempts);\n        execution.nextRetryAt = new Date(Date.now() + delay);\n        execution.status = 'scheduled';\n\n        // Schedule retry\n        setTimeout(() => {\n          this.retryExecution(execution.id);\n        }, delay);\n      } else {\n        // Send failure notifications\n        if (schedule.notifications.onFailure) {\n          await this.sendNotifications(schedule.notifications.onFailure, 'failure', execution);\n        }\n      }\n    }\n\n    return execution.id;\n  }\n\n  private async retryExecution",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 317,
        "end": 376,
        "startLoc": {
          "line": 317,
          "column": 2,
          "position": 2524
        },
        "endLoc": {
          "line": 376,
          "column": 15,
          "position": 3035
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-monitoring.ts",
        "start": 20,
        "end": 82,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 107
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 616
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "retryExecution(executionId: string): Promise<void> {\n    const execution = this.executions.get(executionId);\n    const schedule = execution ? this.schedules.get(execution.scheduleId) : undefined;\n\n    if (!execution || !schedule) return;\n\n    // Reset execution for retry\n    execution.status = 'running';\n    execution.startedAt = new Date();\n    execution.error = undefined;\n\n    try {\n      // TODO: Re-execute workflow\n      execution.status = 'completed';\n      execution.completedAt = new Date();\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error = error instanceof Error ? error.message : 'Unknown error';\n      execution.completedAt = new Date();\n    }\n  }\n\n  private calculateNextRun(schedule: ScheduleDefinition): Date | undefined {\n    const now = new Date();",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 376,
        "end": 399,
        "startLoc": {
          "line": 376,
          "column": 2,
          "position": 3035
        },
        "endLoc": {
          "line": 399,
          "column": 2,
          "position": 3281
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/schedule-monitoring.ts",
        "start": 83,
        "end": 111,
        "startLoc": {
          "line": 83,
          "column": 1,
          "position": 618
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 864
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "switch (schedule.type) {\n      case 'cron':\n        // TODO: Use cron-parser to calculate next run\n        return new Date(now.getTime() + 60 * 60 * 1000); // Simplified: next hour\n      case 'interval':\n        return schedule.schedule.interval\n          ? new Date(now.getTime() + schedule.schedule.interval)\n          : undefined;\n      case 'once':\n        return schedule.schedule.runAt;\n      default:\n        return undefined;\n    }\n  }\n\n  private calculateRetryDelay(\n    retryPolicy: ScheduleDefinition['retryPolicy'],\n    attempt: number\n  ): number {\n    let delay = retryPolicy.retryDelay;\n\n    if (retryPolicy.exponentialBackoff) {\n      delay = delay * 2 ** (attempt - 1);\n    }\n\n    return delay;\n  }\n\n  private async sendNotifications",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 401,
        "end": 429,
        "startLoc": {
          "line": 401,
          "column": 5,
          "position": 3285
        },
        "endLoc": {
          "line": 429,
          "column": 18,
          "position": 3504
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/scheduler-utilities.ts",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 2,
          "position": 214
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "sendNotifications(\n    _recipients: string[],\n    _type: string,\n    _execution: ScheduleExecution\n  ): Promise<void> {}\n\n  private validateCronExpression(_cron: string): void {\n    // TODO: Implement proper cron validation\n    // For now, just check basic format\n    const parts = _cron.split(' ');\n    if (parts.length < 5 || parts.length > 6) {\n      throw new Error('Invalid cron expression format');\n    }\n  }\n\n  private cleanupOldExecutions():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 429,
        "end": 444,
        "startLoc": {
          "line": 429,
          "column": 2,
          "position": 3504
        },
        "endLoc": {
          "line": 444,
          "column": 2,
          "position": 3628
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/scheduler-utilities.ts",
        "start": 32,
        "end": 54,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 216
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 340
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": void {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - this.config.retentionDays);\n\n    for (const [id, execution] of this.executions.entries()) {\n      if (execution.scheduledAt < cutoffDate) {\n        this.executions.delete(id);\n      }\n    }\n  }\n\n  private generateId():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index.ts",
        "start": 444,
        "end": 455,
        "startLoc": {
          "line": 444,
          "column": 2,
          "position": 3628
        },
        "endLoc": {
          "line": 455,
          "column": 2,
          "position": 3738
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/scheduler-utilities.ts",
        "start": 55,
        "end": 68,
        "startLoc": {
          "line": 55,
          "column": 1,
          "position": 342
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 450
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "): Promise<string> {\n    const newPool: ResourcePool = {\n      ...pool,\n      id: this.generateId(),\n      currentUsage: await this.getCurrentSystemUsage(),\n      allocatedWorkflows: [],\n      status: 'available',\n    };\n\n    this.pools.set(newPool.id, newPool);\n    return newPool.id;\n  }\n\n  async allocateResources",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 102,
        "end": 115,
        "startLoc": {
          "line": 102,
          "column": 3,
          "position": 754
        },
        "endLoc": {
          "line": 115,
          "column": 18,
          "position": 856
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts",
        "start": 2,
        "end": 16,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 24
        },
        "endLoc": {
          "line": 16,
          "column": 2,
          "position": 123
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": "allocateResources(\n    workflowId: string,\n    profile: WorkflowResourceProfile\n  ): Promise<{\n    allocated: boolean;\n    poolId?: string;\n    reason?: string;\n  }> {\n    // Find best pool for allocation\n    const suitablePool = await this.findSuitablePool(profile);\n\n    if (!suitablePool) {\n      return {\n        allocated: false,\n        reason: 'No available resource pool with sufficient capacity',\n      };\n    }\n\n    // Check if allocation would exceed limits\n    const wouldExceedLimits = this.wouldExceedLimits(suitablePool, profile);\n    if (wouldExceedLimits) {\n      return {\n        allocated: false,\n        reason: 'Allocation would exceed resource limits',\n      };\n    }\n\n    // Allocate resources\n    suitablePool.allocatedWorkflows.push(workflowId);\n    this.profiles.set(workflowId, profile);\n\n    // Update pool usage estimation\n    await this.updatePoolUsage(suitablePool.id);\n\n    return {\n      allocated: true,\n      poolId: suitablePool.id,\n    };\n  }\n\n  async deallocateResources",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 115,
        "end": 155,
        "startLoc": {
          "line": 115,
          "column": 2,
          "position": 856
        },
        "endLoc": {
          "line": 155,
          "column": 20,
          "position": 1102
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts",
        "start": 17,
        "end": 61,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 125
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 370
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "deallocateResources(workflowId: string): Promise<boolean> {\n    // Find pool containing this workflow\n    const pool = Array.from(this.pools.values()).find((p) =>\n      p.allocatedWorkflows.includes(workflowId)\n    );\n\n    if (!pool) return false;\n\n    // Remove allocation\n    const index = pool.allocatedWorkflows.indexOf(workflowId);\n    pool.allocatedWorkflows.splice(index, 1);\n\n    // Remove profile\n    this.profiles.delete(workflowId);\n\n    // Update pool usage\n    await this.updatePoolUsage(pool.id);\n\n    return true;\n  }\n\n  async addScalingPolicy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 155,
        "end": 176,
        "startLoc": {
          "line": 155,
          "column": 2,
          "position": 1102
        },
        "endLoc": {
          "line": 176,
          "column": 17,
          "position": 1258
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts",
        "start": 62,
        "end": 85,
        "startLoc": {
          "line": 62,
          "column": 1,
          "position": 372
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "addScalingPolicy(policy: Omit<ScalingPolicy, 'id'>): Promise<string> {\n    const newPolicy: ScalingPolicy = {\n      ...policy,\n      id: this.generateId(),\n    };\n\n    this.policies.set(newPolicy.id, newPolicy);\n    return newPolicy.id;\n  }\n\n  async updateScalingPolicy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 176,
        "end": 186,
        "startLoc": {
          "line": 176,
          "column": 2,
          "position": 1258
        },
        "endLoc": {
          "line": 186,
          "column": 20,
          "position": 1344
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts",
        "start": 86,
        "end": 98,
        "startLoc": {
          "line": 86,
          "column": 1,
          "position": 528
        },
        "endLoc": {
          "line": 98,
          "column": 2,
          "position": 612
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "updateScalingPolicy(id: string, updates: Partial<ScalingPolicy>): Promise<boolean> {\n    const policy = this.policies.get(id);\n    if (!policy) return false;\n\n    Object.assign(policy, updates);\n    return true;\n  }\n\n  async removeScalingPolicy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 186,
        "end": 194,
        "startLoc": {
          "line": 186,
          "column": 2,
          "position": 1344
        },
        "endLoc": {
          "line": 194,
          "column": 20,
          "position": 1425
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-allocation.ts",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 1,
          "position": 614
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 693
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "return pool ? pool.currentUsage : await this.getCurrentSystemUsage();\n    }\n\n    return this.usageHistory.slice(-100); // Last 100 measurements\n  }\n\n  async getResourcePools(organizationId?: string): Promise<ResourcePool[]> {\n    const pools = Array.from(this.pools.values());\n\n    if (organizationId) {\n      return pools.filter((p) => p.organizationId === organizationId);\n    }\n\n    return pools;\n  }\n\n  async optimizeAllocation",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 201,
        "end": 217,
        "startLoc": {
          "line": 201,
          "column": 7,
          "position": 1511
        },
        "endLoc": {
          "line": 217,
          "column": 19,
          "position": 1649
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/pool-management.ts",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 132
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ": Promise<{\n    optimized: boolean;\n    changes: Array<{ workflowId: string; fromPool: string; toPool: string; reason: string }>;\n  }> {\n    const changes: Array<{ workflowId: string; fromPool: string; toPool: string; reason: string }> =\n      [];\n\n    // Analyze current allocations\n    for (const pool of this.pools.values()) {\n      if (pool.status === 'overloaded') {\n        // Try to move some workflows to other pools\n        const movableWorkflows = this.findMovableWorkflows(pool);\n\n        for (const workflowId of movableWorkflows) {\n          const profile = this.profiles.get(workflowId);\n          if (!profile) continue;\n\n          const betterPool = await this.findBetterPool(workflowId, pool.id, profile);\n          if (betterPool) {\n            // Move workflow\n            await this.moveWorkflow(workflowId, pool.id, betterPool.id);\n            changes.push({\n              workflowId,\n              fromPool: pool.id,\n              toPool: betterPool.id,\n              reason: 'Load balancing optimization',\n            });\n          }\n        }\n      }\n    }\n\n    return {\n      optimized: changes.length > 0,\n      changes,\n    };\n  }\n\n  async checkResourceHealth",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 217,
        "end": 255,
        "startLoc": {
          "line": 217,
          "column": 2,
          "position": 1652
        },
        "endLoc": {
          "line": 255,
          "column": 20,
          "position": 1997
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/pool-management.ts",
        "start": 20,
        "end": 61,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 139
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 482
        }
      }
    },
    {
      "format": "typescript",
      "lines": 46,
      "fragment": ": Promise<{\n    healthy: boolean;\n    issues: Array<{\n      type: string;\n      message: string;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n    }>;\n  }> {\n    const issues: Array<{\n      type: string;\n      message: string;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n    }> = [];\n\n    // Check each pool\n    for (const pool of this.pools.values()) {\n      const usage = pool.currentUsage;\n\n      // CPU usage check\n      if (usage.cpu.usage > 90) {\n        issues.push({\n          type: 'high_cpu_usage',\n          message: `Pool ${pool.name} has ${usage.cpu.usage}% CPU usage`,\n          severity: 'critical',\n        });\n      } else if (usage.cpu.usage > 75) {\n        issues.push({\n          type: 'high_cpu_usage',\n          message: `Pool ${pool.name} has ${usage.cpu.usage}% CPU usage`,\n          severity: 'high',\n        });\n      }\n\n      // Memory usage check\n      if (usage.memory.usage > 90) {\n        issues.push({\n          type: 'high_memory_usage',\n          message: `Pool ${pool.name} has ${usage.memory.usage}% memory usage`,\n          severity: 'critical',\n        });\n      } else if (usage.memory.usage > 75) {\n        issues.push({\n          type: 'high_memory_usage',\n          message: `Pool ${pool.name} has ${usage.memory.usage}% memory usage`,\n          severity: 'high',\n        });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 255,
        "end": 300,
        "startLoc": {
          "line": 255,
          "column": 2,
          "position": 2000
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2428
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/pool-management.ts",
        "start": 63,
        "end": 111,
        "startLoc": {
          "line": 63,
          "column": 1,
          "position": 489
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 918
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "}\n\n  private findMovableWorkflows(pool: ResourcePool): string[] {\n    // Find workflows with low priority that can be moved\n    return pool.allocatedWorkflows.filter((workflowId) => {\n      const profile = this.profiles.get(workflowId);\n      return profile && profile.priority === 'low';\n    });\n  }\n\n  private async findBetterPool",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 410,
        "end": 420,
        "startLoc": {
          "line": 410,
          "column": 3,
          "position": 3518
        },
        "endLoc": {
          "line": 420,
          "column": 15,
          "position": 3606
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-utilities.ts",
        "start": 12,
        "end": 24,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 176
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "findBetterPool(\n    _workflowId: string,\n    currentPoolId: string,\n    profile: WorkflowResourceProfile\n  ): Promise<ResourcePool | undefined> {\n    const _otherPools = Array.from(this.pools.values()).filter(\n      (p) => p.id !== currentPoolId && p.status === 'available'\n    );\n\n    return this.findSuitablePool(profile);\n  }\n\n  private async moveWorkflow",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 420,
        "end": 432,
        "startLoc": {
          "line": 420,
          "column": 2,
          "position": 3606
        },
        "endLoc": {
          "line": 432,
          "column": 13,
          "position": 3717
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-utilities.ts",
        "start": 25,
        "end": 40,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 178
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 287
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "moveWorkflow(\n    workflowId: string,\n    fromPoolId: string,\n    toPoolId: string\n  ): Promise<void> {\n    const fromPool = this.pools.get(fromPoolId);\n    const toPool = this.pools.get(toPoolId);\n\n    if (!fromPool || !toPool) return;\n\n    // Remove from old pool\n    const index = fromPool.allocatedWorkflows.indexOf(workflowId);\n    if (index !== -1) {\n      fromPool.allocatedWorkflows.splice(index, 1);\n    }\n\n    // Add to new pool\n    toPool.allocatedWorkflows.push(workflowId);\n\n    // Update both pools\n    await this.updatePoolUsage(fromPoolId);\n    await this.updatePoolUsage(toPoolId);\n  }\n\n  private startMonitoring():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 432,
        "end": 456,
        "startLoc": {
          "line": 432,
          "column": 2,
          "position": 3717
        },
        "endLoc": {
          "line": 456,
          "column": 2,
          "position": 3905
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-utilities.ts",
        "start": 41,
        "end": 68,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 289
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 476
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ": void {\n    this.monitoringInterval = setInterval(async () => {\n      // Update usage for all pools\n      for (const poolId of this.pools.keys()) {\n        await this.updatePoolUsage(poolId);\n      }\n\n      // Add to history\n      const currentUsage = await this.getCurrentSystemUsage();\n      this.usageHistory.push(currentUsage);\n\n      // Keep only last 1000 measurements\n      if (this.usageHistory.length > 1000) {\n        this.usageHistory = this.usageHistory.slice(-1000);\n      }\n\n      // Check scaling policies\n      await this.evaluateScalingPolicies();\n    }, 30000); // Every 30 seconds\n  }\n\n  private async evaluateScalingPolicies",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts",
        "start": 456,
        "end": 477,
        "startLoc": {
          "line": 456,
          "column": 2,
          "position": 3905
        },
        "endLoc": {
          "line": 477,
          "column": 24,
          "position": 4073
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/resource-utilities.ts",
        "start": 69,
        "end": 92,
        "startLoc": {
          "line": 69,
          "column": 1,
          "position": 478
        },
        "endLoc": {
          "line": 92,
          "column": 2,
          "position": 643
        }
      }
    },
    {
      "format": "typescript",
      "lines": 70,
      "fragment": "return id;\n  }\n\n  /**\n   * Setup webhook route\n   */\n  private setupWebhookRoute(registration: WebhookRegistration): void {\n    this.router.post(registration.config.path, async (req: Request, res: Response) => {\n      try {\n        // Create webhook event\n        const event: WebhookEvent = {\n          id: this.generateEventId(),\n          webhookId: registration.id,\n          headers: req.headers as Record<string, string>,\n          body: req.body,\n          query: req.query as Record<string, string>,\n          timestamp: new Date(),\n          verified: false,\n          processed: false,\n        };\n\n        // Verify signature if required\n        if (registration.config.validateSignature && registration.config.secret) {\n          const signature = req.headers[\n            registration.config.signatureHeader || 'x-signature'\n          ] as string;\n          event.signature = signature;\n          event.verified = this.verifySignature(\n            (req as any).rawBody,\n            signature,\n            registration.config.secret,\n            registration.config.signatureAlgorithm\n          );\n\n          if (!event.verified) {\n            this.emit('webhook:verification_failed', {\n              webhookId: registration.id,\n              event,\n            });\n            return res.status(401).json({ error: 'Invalid signature' });\n          }\n        } else {\n          event.verified = true;\n        }\n\n        // Update registration stats\n        registration.lastTriggered = new Date();\n        registration.triggerCount++;\n\n        // Add to queue for processing\n        this.queueEvent(event);\n\n        // Send immediate response\n        res.status(200).json({ received: true, eventId: event.id });\n\n        this.emit('webhook:received', { webhookId: registration.id, event });\n      } catch (error: any) {\n        registration.status = 'error';\n        registration.error = error.message;\n\n        this.emit('webhook:error', { webhookId: registration.id, error });\n\n        res.status(500).json({ error: 'Webhook processing failed' });\n      }\n    });\n  }\n\n  /**\n   * Verify webhook signature\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 101,
        "end": 170,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 804
        },
        "endLoc": {
          "line": 170,
          "column": 6,
          "position": 1373
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/endpoint-management.ts",
        "start": 1,
        "end": 71,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 71,
          "column": 4,
          "position": 566
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "private verifySignature(\n    payload: Buffer,\n    signature: string,\n    secret: string,\n    algorithm: 'sha1' | 'sha256' | 'sha512' = 'sha256'\n  ): boolean {\n    if (!signature) {\n      return false;\n    }\n\n    const expectedSignature = crypto.createHmac(algorithm, secret).update(payload).digest('hex');\n\n    // Use timing-safe comparison\n    return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));\n  }\n\n  /**\n   * Queue event for processing\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 171,
        "end": 189,
        "startLoc": {
          "line": 171,
          "column": 3,
          "position": 1376
        },
        "endLoc": {
          "line": 189,
          "column": 6,
          "position": 1509
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/endpoint-management.ts",
        "start": 72,
        "end": 93,
        "startLoc": {
          "line": 72,
          "column": 1,
          "position": 568
        },
        "endLoc": {
          "line": 93,
          "column": 4,
          "position": 700
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "private queueEvent(event: WebhookEvent): void {\n    if (this.eventQueue.length >= this.maxQueueSize) {\n      // Remove oldest event if queue is full\n      const removed = this.eventQueue.shift();\n      this.emit('webhook:queue_overflow', { removedEvent: removed });\n    }\n\n    this.eventQueue.push(event);\n  }\n\n  /**\n   * Start event processor\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 190,
        "end": 202,
        "startLoc": {
          "line": 190,
          "column": 3,
          "position": 1512
        },
        "endLoc": {
          "line": 202,
          "column": 6,
          "position": 1604
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/endpoint-management.ts",
        "start": 94,
        "end": 108,
        "startLoc": {
          "line": 94,
          "column": 1,
          "position": 702
        },
        "endLoc": {
          "line": 108,
          "column": 1,
          "position": 793
        }
      }
    },
    {
      "format": "typescript",
      "lines": 46,
      "fragment": ": Promise<void> {\n    this.processing = true;\n\n    while (this.eventQueue.length > 0) {\n      const event = this.eventQueue.shift();\n      if (!event) continue;\n\n      const webhook = this.webhooks.get(event.webhookId);\n      if (!webhook || webhook.status !== 'active') {\n        continue;\n      }\n\n      try {\n        // Execute handler with retry logic\n        await this.executeWithRetry(() => webhook.handler(event), webhook.config.maxRetries || 3);\n\n        event.processed = true;\n\n        this.emit('webhook:processed', { webhookId: event.webhookId, event });\n      } catch (error: any) {\n        event.error = error.message;\n\n        this.emit('webhook:processing_failed', {\n          webhookId: event.webhookId,\n          event,\n          error,\n        });\n\n        // Mark webhook as error if too many failures\n        if (webhook.triggerCount > 10 && webhook.status === 'active') {\n          const failureRate =\n            (webhook.triggerCount - this.getSuccessCount(webhook.id)) / webhook.triggerCount;\n          if (failureRate > 0.5) {\n            webhook.status = 'error';\n            webhook.error = 'Too many processing failures';\n          }\n        }\n      }\n    }\n\n    this.processing = false;\n  }\n\n  /**\n   * Execute with retry\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 214,
        "end": 259,
        "startLoc": {
          "line": 214,
          "column": 2,
          "position": 1692
        },
        "endLoc": {
          "line": 259,
          "column": 6,
          "position": 2061
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/payload-processing.ts",
        "start": 18,
        "end": 64,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 98
        },
        "endLoc": {
          "line": 64,
          "column": 4,
          "position": 465
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "executeWithRetry<T>(\n    fn: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        if (attempt < maxRetries) {\n          await this.sleep(delay * 2 ** attempt);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Unregister webhook\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 260,
        "end": 284,
        "startLoc": {
          "line": 260,
          "column": 2,
          "position": 2068
        },
        "endLoc": {
          "line": 284,
          "column": 6,
          "position": 2245
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/payload-processing.ts",
        "start": 67,
        "end": 93,
        "startLoc": {
          "line": 67,
          "column": 1,
          "position": 472
        },
        "endLoc": {
          "line": 93,
          "column": 4,
          "position": 648
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "unregisterWebhook(id: string): boolean {\n    const webhook = this.webhooks.get(id);\n    if (!webhook) {\n      return false;\n    }\n\n    this.webhooks.delete(id);\n\n    // Remove route\n    const routes = this.router.stack;\n    const index = routes.findIndex((layer: any) => layer.route?.path === webhook.config.path);\n\n    if (index !== -1) {\n      routes.splice(index, 1);\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 285,
        "end": 299,
        "startLoc": {
          "line": 285,
          "column": 3,
          "position": 2248
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2392
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/payload-processing.ts",
        "start": 94,
        "end": 110,
        "startLoc": {
          "line": 94,
          "column": 1,
          "position": 650
        },
        "endLoc": {
          "line": 110,
          "column": 2,
          "position": 795
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "this.emit('webhook:unregistered', {\n      id,\n      integrationName: webhook.integrationName,\n    });\n\n    return true;\n  }\n\n  /**\n   * Pause webhook\n   */\n  pauseWebhook(id: string): boolean {\n    const webhook = this.webhooks.get(id);\n    if (!webhook) {\n      return false;\n    }\n\n    webhook.status = 'paused';\n    this.emit('webhook:paused', { id });\n\n    return true;\n  }\n\n  /**\n   * Resume webhook\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 301,
        "end": 326,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2396
        },
        "endLoc": {
          "line": 326,
          "column": 6,
          "position": 2526
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/security-validation.ts",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 125
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "resumeWebhook(id: string): boolean {\n    const webhook = this.webhooks.get(id);\n    if (!webhook) {\n      return false;\n    }\n\n    webhook.status = 'active';\n    webhook.error = undefined;\n    this.emit('webhook:resumed', { id });\n\n    return true;\n  }\n\n  /**\n   * Get webhook by ID\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 327,
        "end": 342,
        "startLoc": {
          "line": 327,
          "column": 3,
          "position": 2529
        },
        "endLoc": {
          "line": 342,
          "column": 6,
          "position": 2627
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/security-validation.ts",
        "start": 28,
        "end": 45,
        "startLoc": {
          "line": 28,
          "column": 1,
          "position": 127
        },
        "endLoc": {
          "line": 45,
          "column": 4,
          "position": 224
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ": {\n    totalWebhooks: number;\n    activeWebhooks: number;\n    pausedWebhooks: number;\n    errorWebhooks: number;\n    queueSize: number;\n    totalEvents: number;\n  } {\n    const webhooksArray = Array.from(this.webhooks.values());\n\n    return {\n      totalWebhooks: webhooksArray.length,\n      activeWebhooks: webhooksArray.filter((w) => w.status === 'active').length,\n      pausedWebhooks: webhooksArray.filter((w) => w.status === 'paused').length,\n      errorWebhooks: webhooksArray.filter((w) => w.status === 'error').length,\n      queueSize: this.eventQueue.length,\n      totalEvents: webhooksArray.reduce((sum, w) => sum + w.triggerCount, 0),\n    };\n  }\n\n  /**\n   * Get success count for webhook\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 366,
        "end": 388,
        "startLoc": {
          "line": 366,
          "column": 2,
          "position": 2768
        },
        "endLoc": {
          "line": 388,
          "column": 6,
          "position": 2983
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/security-validation.ts",
        "start": 76,
        "end": 100,
        "startLoc": {
          "line": 76,
          "column": 1,
          "position": 361
        },
        "endLoc": {
          "line": 100,
          "column": 4,
          "position": 573
        }
      }
    },
    {
      "format": "typescript",
      "lines": 54,
      "fragment": "private applySlidingWindow(\n    entry: RateLimitEntry,\n    config: RateLimitConfig,\n    now: Date,\n    key: string\n  ): RateLimitStatus {\n    // Calculate time passed since first request\n    const timePassed = now.getTime() - entry.firstRequest.getTime();\n    const windowProgress = timePassed / config.windowMs;\n\n    // Calculate allowed requests based on window progress\n    const allowedRequests = Math.floor(config.maxRequests * windowProgress);\n    const effectiveCount = Math.max(0, entry.count - allowedRequests);\n\n    const remaining = config.maxRequests - effectiveCount;\n\n    if (remaining <= 0) {\n      // Check burst allowance\n      if (config.burstAllowance && effectiveCount < config.maxRequests + config.burstAllowance) {\n        entry.count++;\n        entry.lastRequest = now;\n\n        return {\n          remaining: config.maxRequests + config.burstAllowance - effectiveCount - 1,\n          resetAt: entry.resetAt,\n          isLimited: false,\n        };\n      }\n\n      // Rate limited\n      this.handleRateLimit(key, entry, config);\n\n      return {\n        remaining: 0,\n        resetAt: entry.resetAt,\n        isLimited: true,\n        retryAfter: Math.ceil((entry.resetAt.getTime() - now.getTime()) / 1000),\n      };\n    }\n\n    // Request allowed\n    entry.count++;\n    entry.lastRequest = now;\n\n    return {\n      remaining: remaining - 1,\n      resetAt: entry.resetAt,\n      isLimited: false,\n    };\n  }\n\n  /**\n   * Apply fixed window strategy\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter.ts",
        "start": 102,
        "end": 155,
        "startLoc": {
          "line": 102,
          "column": 3,
          "position": 792
        },
        "endLoc": {
          "line": 155,
          "column": 6,
          "position": 1204
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/token-bucket.ts",
        "start": 2,
        "end": 56,
        "startLoc": {
          "line": 2,
          "column": 3,
          "position": 4
        },
        "endLoc": {
          "line": 56,
          "column": 4,
          "position": 414
        }
      }
    },
    {
      "format": "typescript",
      "lines": 46,
      "fragment": "private applyFixedWindow(\n    entry: RateLimitEntry,\n    config: RateLimitConfig,\n    now: Date,\n    key: string\n  ): RateLimitStatus {\n    const remaining = config.maxRequests - entry.count;\n\n    if (remaining <= 0) {\n      // Check burst allowance\n      if (config.burstAllowance && entry.count < config.maxRequests + config.burstAllowance) {\n        entry.count++;\n        entry.lastRequest = now;\n\n        return {\n          remaining: config.maxRequests + config.burstAllowance - entry.count,\n          resetAt: entry.resetAt,\n          isLimited: false,\n        };\n      }\n\n      // Rate limited\n      this.handleRateLimit(key, entry, config);\n\n      return {\n        remaining: 0,\n        resetAt: entry.resetAt,\n        isLimited: true,\n        retryAfter: Math.ceil((entry.resetAt.getTime() - now.getTime()) / 1000),\n      };\n    }\n\n    // Request allowed\n    entry.count++;\n    entry.lastRequest = now;\n\n    return {\n      remaining: remaining - 1,\n      resetAt: entry.resetAt,\n      isLimited: false,\n    };\n  }\n\n  /**\n   * Record successful request\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter.ts",
        "start": 156,
        "end": 201,
        "startLoc": {
          "line": 156,
          "column": 3,
          "position": 1207
        },
        "endLoc": {
          "line": 201,
          "column": 6,
          "position": 1528
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/token-bucket.ts",
        "start": 57,
        "end": 56,
        "startLoc": {
          "line": 57,
          "column": 1,
          "position": 416
        },
        "endLoc": {
          "line": 56,
          "column": 4,
          "position": 414
        }
      }
    },
    {
      "format": "typescript",
      "lines": 94,
      "fragment": "{ OAuth2Client } from 'google-auth-library';\nimport { google } from 'googleapis';\nimport { z } from 'zod';\n\n// Schemas for Gmail operations\nconst EmailSchema = z.object({\n  to: z.array(z.string().email()),\n  cc: z.array(z.string().email()).optional(),\n  bcc: z.array(z.string().email()).optional(),\n  subject: z.string(),\n  body: z.string(),\n  htmlBody: z.string().optional(),\n  attachments: z\n    .array(\n      z.object({\n        filename: z.string(),\n        content: z.string(), // base64\n        contentType: z.string(),\n      })\n    )\n    .optional(),\n  replyTo: z.string().optional(),\n  threadId: z.string().optional(),\n});\n\nconst EmailFilterSchema = z.object({\n  query: z.string().optional(),\n  from: z.string().optional(),\n  to: z.string().optional(),\n  subject: z.string().optional(),\n  labelIds: z.array(z.string()).optional(),\n  maxResults: z.number().min(1).max(500).default(50),\n  pageToken: z.string().optional(),\n  includeSpamTrash: z.boolean().default(false),\n});\n\nconst LabelSchema = z.object({\n  name: z.string(),\n  labelListVisibility: z.enum(['labelShow', 'labelShowIfUnread', 'labelHide']).optional(),\n  messageListVisibility: z.enum(['show', 'hide']).optional(),\n  color: z\n    .object({\n      backgroundColor: z.string().optional(),\n      textColor: z.string().optional(),\n    })\n    .optional(),\n});\n\nexport class GmailIntegration extends BaseIntegration {\n  private oauth2Client?: OAuth2Client;\n  private gmail?: any;\n\n  constructor() {\n    super({\n      name: 'gmail',\n      displayName: 'Gmail',\n      description: 'Connect to Gmail for email automation',\n      version: '1.0.0',\n      category: IntegrationCategory.COMMUNICATION,\n      icon: 'gmail-icon-url',\n      documentation: 'https://docs.reporunner.com/integrations/gmail',\n      supportedTriggers: ['new_email', 'email_labeled', 'email_starred'],\n      supportedActions: ['send_email', 'read_emails', 'manage_labels', 'create_draft'],\n      rateLimit: {\n        requests: 250,\n        period: 1, // per second\n      },\n    });\n  }\n\n  protected initialize(): void {\n    // Register triggers\n    this.registerTrigger({\n      name: 'new_email',\n      displayName: 'New Email',\n      description: 'Triggers when a new email is received',\n      properties: z.object({\n        labelIds: z.array(z.string()).optional(),\n        from: z.string().optional(),\n        subject: z.string().optional(),\n      }),\n      outputSchema: z.object({\n        id: z.string(),\n        threadId: z.string(),\n        from: z.string(),\n        to: z.array(z.string()),\n        subject: z.string(),\n        snippet: z.string(),\n        body: z.string(),\n        htmlBody: z.string().optional(),\n        attachments: z.array(z.any()),\n        labels: z.array(z.string()),\n        receivedAt: z.string(),\n      }),",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration.ts",
        "start": 7,
        "end": 100,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 31
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 995
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/gmail-core.ts",
        "start": 7,
        "end": 100,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 33
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 997
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "} catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      if (!this.gmail) {\n        return false;\n      }\n\n      const profile = await this.gmail.users.getProfile({ userId: 'me' });\n      this.log('info', 'Gmail connection successful', {\n        email: profile.data.emailAddress,\n      });\n      return true;\n    } catch (error) {\n      this.log('error', 'Gmail connection failed', error);\n      return false;\n    }\n  }\n\n  getRequiredScopes():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration.ts",
        "start": 201,
        "end": 223,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1844
        },
        "endLoc": {
          "line": 223,
          "column": 2,
          "position": 2018
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/auth-integration.ts",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 170
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ": string[] {\n    return [\n      'https://www.googleapis.com/auth/gmail.send',\n      'https://www.googleapis.com/auth/gmail.readonly',\n      'https://www.googleapis.com/auth/gmail.modify',\n      'https://www.googleapis.com/auth/gmail.labels',\n    ];\n  }\n\n  getAuthorizationUrl(redirectUri: string, state: string): string {\n    const oauth2Client = new OAuth2Client(\n      process.env.GMAIL_CLIENT_ID,\n      process.env.GMAIL_CLIENT_SECRET,\n      redirectUri\n    );\n\n    return oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: this.getRequiredScopes(),\n      state: state,\n      prompt: 'consent',\n    });\n  }\n\n  async exchangeCodeForTokens",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration.ts",
        "start": 223,
        "end": 247,
        "startLoc": {
          "line": 223,
          "column": 2,
          "position": 2018
        },
        "endLoc": {
          "line": 247,
          "column": 22,
          "position": 2164
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/auth-integration.ts",
        "start": 26,
        "end": 53,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 172
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 314
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "exchangeCodeForTokens(code: string, redirectUri: string): Promise<IntegrationCredentials> {\n    const oauth2Client = new OAuth2Client(\n      process.env.GMAIL_CLIENT_ID,\n      process.env.GMAIL_CLIENT_SECRET,\n      redirectUri\n    );\n\n    const { tokens } = await oauth2Client.getToken(code);\n\n    return {\n      type: IntegrationType.OAUTH2,\n      data: {\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        clientId: process.env.GMAIL_CLIENT_ID,\n        clientSecret: process.env.GMAIL_CLIENT_SECRET,\n        redirectUri,\n      },\n      expiresAt: tokens.expiry_date ? new Date(tokens.expiry_date) : undefined,\n    };\n  }\n}\n\nexport default GmailIntegration;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration.ts",
        "start": 247,
        "end": 270,
        "startLoc": {
          "line": 247,
          "column": 2,
          "position": 2164
        },
        "endLoc": {
          "line": 270,
          "column": 2,
          "position": 2351
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/gmail/gmail.integration/auth-integration.ts",
        "start": 54,
        "end": 79,
        "startLoc": {
          "line": 54,
          "column": 1,
          "position": 316
        },
        "endLoc": {
          "line": 79,
          "column": 2,
          "position": 503
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "for (const id of instancesToRemove) {\n      this.destroyInstance(id);\n    }\n\n    // Remove definition\n    this.definitions.delete(name);\n\n    this.emit('definition:unregistered', { name });\n\n    return true;\n  }\n\n  /**\n   * Get integration definition\n   */\n  getDefinition(name: string): IntegrationDefinition | undefined {\n    return this.definitions.get(name);\n  }\n\n  /**\n   * Get all definitions\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 101,
        "end": 122,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 864
        },
        "endLoc": {
          "line": 122,
          "column": 6,
          "position": 972
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/integration-discovery.ts",
        "start": 1,
        "end": 23,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 23,
          "column": 4,
          "position": 100
        }
      }
    },
    {
      "format": "typescript",
      "lines": 42,
      "fragment": "findDefinitions(filter: IntegrationFilter): IntegrationDefinition[] {\n    const results: IntegrationDefinition[] = [];\n\n    this.definitions.forEach((definition) => {\n      // Apply filters\n      if (filter.category && definition.config.category !== filter.category) {\n        return;\n      }\n\n      if (filter.tags && filter.tags.length > 0) {\n        const hasTag = filter.tags.some((tag) => definition.config.tags?.includes(tag));\n        if (!hasTag) {\n          return;\n        }\n      }\n\n      if (filter.capabilities && filter.capabilities.length > 0) {\n        const hasCap = filter.capabilities.some((cap) =>\n          definition.config.supportedFeatures?.includes(cap)\n        );\n        if (!hasCap) {\n          return;\n        }\n      }\n\n      if (filter.isEnabled !== undefined && definition.isEnabled !== filter.isEnabled) {\n        return;\n      }\n\n      if (filter.isBuiltIn !== undefined && definition.isBuiltIn !== filter.isBuiltIn) {\n        return;\n      }\n\n      results.push(definition);\n    });\n\n    return results;\n  }\n\n  /**\n   * Create integration instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 130,
        "end": 171,
        "startLoc": {
          "line": 130,
          "column": 3,
          "position": 1011
        },
        "endLoc": {
          "line": 171,
          "column": 6,
          "position": 1347
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/integration-discovery.ts",
        "start": 33,
        "end": 76,
        "startLoc": {
          "line": 33,
          "column": 1,
          "position": 137
        },
        "endLoc": {
          "line": 76,
          "column": 4,
          "position": 472
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "createInstance(name: string, context: IntegrationContext): Promise<string> {\n    const definition = this.definitions.get(name);\n    if (!definition) {\n      throw new Error(`Integration ${name} is not registered`);\n    }\n\n    if (definition.isEnabled === false) {\n      throw new Error(`Integration ${name} is disabled`);\n    }\n\n    // Check dependencies\n    if (definition.dependencies) {\n      for (const dep of definition.dependencies) {\n        const depDef = this.definitions.get(dep);\n        if (!depDef || depDef.isEnabled === false) {\n          throw new Error(`Dependency ${dep} for ${name} is not available`);\n        }\n      }\n    }\n\n    try {\n      // Create integration instance\n      const IntegrationClass = definition.constructor as any;\n      const integration = new IntegrationClass(definition.config) as BaseIntegration;\n\n      // Initialize integration\n      await integration.initialize(context);\n\n      // Generate instance ID",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 172,
        "end": 200,
        "startLoc": {
          "line": 172,
          "column": 2,
          "position": 1352
        },
        "endLoc": {
          "line": 200,
          "column": 24,
          "position": 1613
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/integration-discovery.ts",
        "start": 78,
        "end": 108,
        "startLoc": {
          "line": 78,
          "column": 1,
          "position": 477
        },
        "endLoc": {
          "line": 108,
          "column": 24,
          "position": 738
        }
      }
    },
    {
      "format": "typescript",
      "lines": 57,
      "fragment": "const instanceId = this.generateInstanceId();\n\n      // Store instance\n      const instance: IntegrationInstance = {\n        id: instanceId,\n        definition,\n        integration,\n        context,\n        createdAt: new Date(),\n      };\n\n      this.instances.set(instanceId, instance);\n\n      // Set up event listeners\n      this.setupInstanceListeners(instanceId, integration);\n\n      this.emit('instance:created', {\n        id: instanceId,\n        name: definition.name,\n        userId: context.userId,\n      });\n\n      return instanceId;\n    } catch (error: any) {\n      this.emit('instance:creation_failed', {\n        name,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Setup instance event listeners\n   */\n  private setupInstanceListeners(instanceId: string, integration: BaseIntegration): void {\n    // Forward integration events\n    integration.on('state:changed', (data) => {\n      this.emit('instance:state_changed', { instanceId, ...data });\n    });\n\n    integration.on('error', (data) => {\n      this.emit('instance:error', { instanceId, ...data });\n    });\n\n    integration.on('action:executed', (data) => {\n      const instance = this.instances.get(instanceId);\n      if (instance) {\n        instance.lastActivity = new Date();\n      }\n      this.emit('instance:action_executed', { instanceId, ...data });\n    });\n  }\n\n  /**\n   * Get integration instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 201,
        "end": 257,
        "startLoc": {
          "line": 201,
          "column": 7,
          "position": 1616
        },
        "endLoc": {
          "line": 257,
          "column": 6,
          "position": 2014
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/dependency-resolution.ts",
        "start": 1,
        "end": 59,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 384
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "executeAction(instanceId: string, action: string, params: any): Promise<any> {\n    const instance = this.instances.get(instanceId);\n    if (!instance) {\n      throw new Error(`Instance ${instanceId} not found`);\n    }\n\n    try {\n      const result = await instance.integration.execute(action, params);\n\n      this.emit('instance:action_executed', {\n        instanceId,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 290,
        "end": 300,
        "startLoc": {
          "line": 290,
          "column": 2,
          "position": 2219
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2333
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/dependency-resolution.ts",
        "start": 101,
        "end": 113,
        "startLoc": {
          "line": 101,
          "column": 1,
          "position": 582
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 697
        }
      }
    },
    {
      "format": "typescript",
      "lines": 45,
      "fragment": "return result;\n    } catch (error: any) {\n      this.emit('instance:action_failed', {\n        instanceId,\n        action,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Destroy integration instance\n   */\n  async destroyInstance(instanceId: string): Promise<boolean> {\n    const instance = this.instances.get(instanceId);\n    if (!instance) {\n      return false;\n    }\n\n    try {\n      // Cleanup integration\n      await instance.integration.cleanup();\n\n      // Remove instance\n      this.instances.delete(instanceId);\n\n      this.emit('instance:destroyed', {\n        id: instanceId,\n        name: instance.definition.name,\n      });\n\n      return true;\n    } catch (error: any) {\n      this.emit('instance:destroy_failed', {\n        id: instanceId,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Suspend instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 305,
        "end": 349,
        "startLoc": {
          "line": 305,
          "column": 7,
          "position": 2350
        },
        "endLoc": {
          "line": 349,
          "column": 6,
          "position": 2608
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/lifecycle-coordination.ts",
        "start": 5,
        "end": 51,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 11
        },
        "endLoc": {
          "line": 51,
          "column": 4,
          "position": 264
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "suspendInstance(instanceId: string): boolean {\n    const instance = this.instances.get(instanceId);\n    if (!instance) {\n      return false;\n    }\n\n    instance.integration.suspend();\n\n    this.emit('instance:suspended', {\n      id: instanceId,\n      name: instance.definition.name,\n    });\n\n    return true;\n  }\n\n  /**\n   * Resume instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 350,
        "end": 368,
        "startLoc": {
          "line": 350,
          "column": 3,
          "position": 2611
        },
        "endLoc": {
          "line": 368,
          "column": 6,
          "position": 2717
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/lifecycle-coordination.ts",
        "start": 52,
        "end": 72,
        "startLoc": {
          "line": 52,
          "column": 1,
          "position": 266
        },
        "endLoc": {
          "line": 72,
          "column": 4,
          "position": 371
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "resumeInstance(instanceId: string): Promise<boolean> {\n    const instance = this.instances.get(instanceId);\n    if (!instance) {\n      return false;\n    }\n\n    await instance.integration.resume();\n\n    this.emit('instance:resumed', {\n      id: instanceId,\n      name: instance.definition.name,\n    });\n\n    return true;\n  }\n\n  /**\n   * Enable integration\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 369,
        "end": 387,
        "startLoc": {
          "line": 369,
          "column": 2,
          "position": 2722
        },
        "endLoc": {
          "line": 387,
          "column": 6,
          "position": 2833
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/lifecycle-coordination.ts",
        "start": 74,
        "end": 94,
        "startLoc": {
          "line": 74,
          "column": 1,
          "position": 376
        },
        "endLoc": {
          "line": 94,
          "column": 4,
          "position": 486
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "enableIntegration(name: string): boolean {\n    const definition = this.definitions.get(name);\n    if (!definition) {\n      return false;\n    }\n\n    definition.isEnabled = true;\n\n    this.emit('definition:enabled', { name });\n\n    return true;\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 388,
        "end": 399,
        "startLoc": {
          "line": 388,
          "column": 3,
          "position": 2836
        },
        "endLoc": {
          "line": 399,
          "column": 2,
          "position": 2921
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/lifecycle-coordination.ts",
        "start": 95,
        "end": 108,
        "startLoc": {
          "line": 95,
          "column": 1,
          "position": 488
        },
        "endLoc": {
          "line": 108,
          "column": 2,
          "position": 573
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "disableIntegration(name: string): boolean {\n    const definition = this.definitions.get(name);\n    if (!definition) {\n      return false;\n    }\n\n    // Destroy all instances\n    const instancesToDestroy: string[] = [];\n    for (const [id, instance] of this.instances.entries()) {\n      if (instance.definition.name === name) {\n        instancesToDestroy.push(id);\n      }\n    }\n\n    for (const id of instancesToDestroy) {\n      this.destroyInstance(id);\n    }\n\n    definition.isEnabled = false;\n\n    this.emit('definition:disabled', { name });\n\n    return true;\n  }\n\n  /**\n   * Get categories\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 404,
        "end": 431,
        "startLoc": {
          "line": 404,
          "column": 3,
          "position": 2928
        },
        "endLoc": {
          "line": 431,
          "column": 6,
          "position": 3123
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/health-monitoring.ts",
        "start": 4,
        "end": 33,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 33,
          "column": 4,
          "position": 196
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": ": {\n    totalDefinitions: number;\n    enabledDefinitions: number;\n    totalInstances: number;\n    instancesByIntegration: Record<string, number>;\n    instancesByUser: Record<string, number>;\n    categories: number;\n    tags: number;\n    capabilities: number;\n  } {\n    const stats = {\n      totalDefinitions: this.definitions.size,\n      enabledDefinitions: 0,\n      totalInstances: this.instances.size,\n      instancesByIntegration: {} as Record<string, number>,\n      instancesByUser: {} as Record<string, number>,\n      categories: this.categories.size,\n      tags: this.tags.size,\n      capabilities: this.capabilities.size,\n    };\n\n    this.definitions.forEach((def) => {\n      if (def.isEnabled !== false) {\n        stats.enabledDefinitions++;\n      }\n    });\n\n    this.instances.forEach((instance) => {\n      const name = instance.definition.name;\n      stats.instancesByIntegration[name] = (stats.instancesByIntegration[name] || 0) + 1;\n\n      const userId = instance.context.userId;\n      stats.instancesByUser[userId] = (stats.instancesByUser[userId] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * Generate instance ID\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 453,
        "end": 493,
        "startLoc": {
          "line": 453,
          "column": 2,
          "position": 3225
        },
        "endLoc": {
          "line": 493,
          "column": 6,
          "position": 3577
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/health-monitoring.ts",
        "start": 62,
        "end": 104,
        "startLoc": {
          "line": 62,
          "column": 1,
          "position": 296
        },
        "endLoc": {
          "line": 104,
          "column": 4,
          "position": 645
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ": void {\n    // Destroy all instances\n    const instanceIds = Array.from(this.instances.keys());\n    for (const id of instanceIds) {\n      this.destroyInstance(id);\n    }\n\n    // Clear definitions\n    this.definitions.clear();\n    this.categories.clear();\n    this.tags.clear();\n    this.capabilities.clear();\n  }\n}\n\n// Singleton instance\nexport const integrationRegistry = new IntegrationRegistry();\n\nexport default IntegrationRegistry;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry.ts",
        "start": 501,
        "end": 519,
        "startLoc": {
          "line": 501,
          "column": 2,
          "position": 3637
        },
        "endLoc": {
          "line": 519,
          "column": 2,
          "position": 3767
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/registry-utilities.ts",
        "start": 2,
        "end": 21,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 5
        },
        "endLoc": {
          "line": 21,
          "column": 2,
          "position": 134
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "} = {}\n  ): string {\n    const subscriptionId = this.generateSubscriptionId();\n\n    const subscription: EventSubscription = {\n      id: subscriptionId,\n      pattern,\n      handler,\n      filter: options.filter,\n      once: options.once || false,\n      priority: options.priority || 0,\n      createdAt: new Date(),\n    };\n\n    this.subscriptions.set(subscriptionId, subscription);\n\n    this.emit('subscription:created', {\n      id: subscriptionId,\n      pattern: pattern.toString(),\n    });\n\n    return subscriptionId;\n  }\n\n  /**\n   * Unsubscribe from events\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 101,
        "end": 127,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 717
        },
        "endLoc": {
          "line": 127,
          "column": 6,
          "position": 885
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-handlers.ts",
        "start": 1,
        "end": 30,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 30,
          "column": 4,
          "position": 166
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ": Promise<void> {\n    this.isProcessing = true;\n\n    while (this.processingQueue.length > 0) {\n      const payload = this.processingQueue.shift();\n      if (!payload) continue;\n\n      await this.processEvent(payload);\n    }\n\n    this.isProcessing = false;\n  }\n\n  /**\n   * Process single event\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 141,
        "end": 156,
        "startLoc": {
          "line": 141,
          "column": 2,
          "position": 972
        },
        "endLoc": {
          "line": 156,
          "column": 6,
          "position": 1067
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-handlers.ts",
        "start": 49,
        "end": 65,
        "startLoc": {
          "line": 49,
          "column": 1,
          "position": 253
        },
        "endLoc": {
          "line": 65,
          "column": 4,
          "position": 346
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "processEvent(payload: EventPayload): Promise<void> {\n    const eventKey = `${payload.source}:${payload.event}`;\n\n    // Get matching subscriptions\n    const matchingSubscriptions = this.getMatchingSubscriptions(eventKey, payload);\n\n    // Sort by priority (higher priority first)\n    matchingSubscriptions.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n\n    // Execute handlers\n    for (const subscription of matchingSubscriptions) {\n      try {\n        await this.executeHandler(subscription, payload);\n\n        // Remove if it was a one-time subscription\n        if (subscription.once) {\n          this.subscriptions.delete(subscription.id);\n        }\n      } catch (error: any) {\n        this.handleError(subscription, payload, error);\n      }\n    }\n  }\n\n  /**\n   * Get matching subscriptions for an event\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 157,
        "end": 183,
        "startLoc": {
          "line": 157,
          "column": 2,
          "position": 1074
        },
        "endLoc": {
          "line": 183,
          "column": 6,
          "position": 1285
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-handlers.ts",
        "start": 68,
        "end": 96,
        "startLoc": {
          "line": 68,
          "column": 1,
          "position": 353
        },
        "endLoc": {
          "line": 96,
          "column": 4,
          "position": 563
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "private getMatchingSubscriptions(eventKey: string, payload: EventPayload): EventSubscription[] {\n    const matching: EventSubscription[] = [];\n\n    this.subscriptions.forEach((subscription) => {\n      // Check pattern match\n      let matches = false;\n\n      if (typeof subscription.pattern === 'string') {\n        // Exact match or wildcard pattern\n        if (subscription.pattern === '*' || subscription.pattern === '**') {\n          matches = true;\n        } else if (subscription.pattern.includes('*')) {\n          matches = this.matchWildcard(eventKey, subscription.pattern);\n        } else {\n          matches = eventKey === subscription.pattern;\n        }\n      } else if (subscription.pattern instanceof RegExp) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 184,
        "end": 200,
        "startLoc": {
          "line": 184,
          "column": 3,
          "position": 1288
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1489
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-handlers.ts",
        "start": 97,
        "end": 116,
        "startLoc": {
          "line": 97,
          "column": 1,
          "position": 565
        },
        "endLoc": {
          "line": 116,
          "column": 2,
          "position": 767
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "return matching;\n  }\n\n  /**\n   * Match wildcard pattern\n   */\n  private matchWildcard(text: string, pattern: string): boolean {\n    // Convert wildcard pattern to regex\n    const regexPattern = pattern\n      .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.');\n\n    const regex = new RegExp(`^${regexPattern}$`);\n    return regex.test(text);\n  }\n\n  /**\n   * Execute handler\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 214,
        "end": 233,
        "startLoc": {
          "line": 214,
          "column": 5,
          "position": 1573
        },
        "endLoc": {
          "line": 233,
          "column": 6,
          "position": 1686
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts",
        "start": 14,
        "end": 34,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 72
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "executeHandler(\n    subscription: EventSubscription,\n    payload: EventPayload\n  ): Promise<void> {\n    const startTime = Date.now();\n\n    await subscription.handler(payload);\n\n    const duration = Date.now() - startTime;\n\n    this.emit('handler:executed', {\n      subscriptionId: subscription.id,\n      eventKey: `${payload.source}:${payload.event}`,\n      duration,\n      correlationId: payload.correlationId,\n    });\n\n    if (this.config.enableLogging) {\n      this.logEvent('handled', payload, {\n        subscriptionId: subscription.id,\n        duration,\n      });\n    }\n  }\n\n  /**\n   * Handle handler error\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 234,
        "end": 261,
        "startLoc": {
          "line": 234,
          "column": 2,
          "position": 1693
        },
        "endLoc": {
          "line": 261,
          "column": 6,
          "position": 1875
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts",
        "start": 37,
        "end": 66,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 189
        },
        "endLoc": {
          "line": 66,
          "column": 4,
          "position": 370
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "private handleError(subscription: EventSubscription, payload: EventPayload, error: Error): void {\n    this.emit('handler:error', {\n      subscriptionId: subscription.id,\n      eventKey: `${payload.source}:${payload.event}`,\n      error: error.message,\n      correlationId: payload.correlationId,\n    });\n\n    if (this.config.enableLogging) {\n    }\n  }\n\n  /**\n   * Add event to history\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 262,
        "end": 276,
        "startLoc": {
          "line": 262,
          "column": 3,
          "position": 1878
        },
        "endLoc": {
          "line": 276,
          "column": 6,
          "position": 1988
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts",
        "start": 67,
        "end": 84,
        "startLoc": {
          "line": 67,
          "column": 1,
          "position": 372
        },
        "endLoc": {
          "line": 84,
          "column": 4,
          "position": 481
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "private addToHistory(payload: EventPayload): void {\n    this.eventHistory.push(payload);\n\n    // Trim history if needed\n    if (this.eventHistory.length > this.config.maxEventHistory!) {\n      this.eventHistory = this.eventHistory.slice(-this.config.maxEventHistory!);\n    }\n  }\n\n  /**\n   * Get event history\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 277,
        "end": 288,
        "startLoc": {
          "line": 277,
          "column": 3,
          "position": 1991
        },
        "endLoc": {
          "line": 288,
          "column": 6,
          "position": 2074
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts",
        "start": 85,
        "end": 99,
        "startLoc": {
          "line": 85,
          "column": 1,
          "position": 483
        },
        "endLoc": {
          "line": 99,
          "column": 4,
          "position": 565
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "getHistory(filter?: {\n    source?: string;\n    event?: string;\n    since?: Date;\n    limit?: number;\n  }): EventPayload[] {\n    let history = [...this.eventHistory];\n\n    if (filter) {\n      if (filter.source) {\n        history = history.filter((e) => e.source === filter.source);\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 289,
        "end": 300,
        "startLoc": {
          "line": 289,
          "column": 3,
          "position": 2077
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2192
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/subscription-management.ts",
        "start": 100,
        "end": 112,
        "startLoc": {
          "line": 100,
          "column": 1,
          "position": 567
        },
        "endLoc": {
          "line": 112,
          "column": 2,
          "position": 678
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": "if (filter.event) {\n        history = history.filter((e) => e.event === filter.event);\n      }\n      if (filter.since) {\n        history = history.filter((e) => e.timestamp >= filter.since!);\n      }\n      if (filter.limit) {\n        history = history.slice(-filter.limit);\n      }\n    }\n\n    return history;\n  }\n\n  /**\n   * Wait for event\n   */\n  async waitForEvent(\n    pattern: string | RegExp,\n    timeout: number = 30000,\n    filter?: EventFilter\n  ): Promise<EventPayload> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        this.unsubscribe(subscriptionId);\n        reject(new Error('Event wait timeout'));\n      }, timeout);\n\n      const subscriptionId = this.subscribe(\n        pattern,\n        (payload) => {\n          clearTimeout(timer);\n          this.unsubscribe(subscriptionId);\n          resolve(payload);\n        },\n        { filter, once: true }\n      );\n    });\n  }\n\n  /**\n   * Create event channel\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 301,
        "end": 343,
        "startLoc": {
          "line": 301,
          "column": 7,
          "position": 2195
        },
        "endLoc": {
          "line": 343,
          "column": 6,
          "position": 2513
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/message-routing.ts",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 4,
          "position": 308
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ": {\n    totalSubscriptions: number;\n    queueSize: number;\n    historySize: number;\n    subscriptionsByPattern: Record<string, number>;\n  } {\n    const stats: any = {\n      totalSubscriptions: this.subscriptions.size,\n      queueSize: this.processingQueue.length,\n      historySize: this.eventHistory.length,\n      subscriptionsByPattern: {},\n    };\n\n    this.subscriptions.forEach((sub) => {\n      const pattern = sub.pattern.toString();\n      stats.subscriptionsByPattern[pattern] = (stats.subscriptionsByPattern[pattern] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * Clear all\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 370,
        "end": 393,
        "startLoc": {
          "line": 370,
          "column": 2,
          "position": 2702
        },
        "endLoc": {
          "line": 393,
          "column": 6,
          "position": 2879
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/message-routing.ts",
        "start": 84,
        "end": 109,
        "startLoc": {
          "line": 84,
          "column": 1,
          "position": 494
        },
        "endLoc": {
          "line": 109,
          "column": 4,
          "position": 668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 58,
      "fragment": "/**\n * Event channel for namespaced events\n */\nexport class EventChannel {\n  constructor(\n    private bus: IntegrationEventBus,\n    private namespace: string\n  ) {}\n\n  /**\n   * Publish event to channel\n   */\n  async publish(event: string, data: any, metadata?: Record<string, any>): Promise<void> {\n    await this.bus.publish(this.namespace, event, data, metadata);\n  }\n\n  /**\n   * Subscribe to channel events\n   */\n  subscribe(\n    pattern: string | RegExp,\n    handler: EventHandler,\n    options?: {\n      filter?: EventFilter;\n      once?: boolean;\n      priority?: number;\n    }\n  ): string {\n    // Prefix pattern with namespace\n    const namespacedPattern =\n      typeof pattern === 'string'\n        ? `${this.namespace}:${pattern}`\n        : new RegExp(`^${this.namespace}:${pattern.source}$`, pattern.flags);\n\n    return this.bus.subscribe(namespacedPattern, handler, options);\n  }\n\n  /**\n   * Wait for channel event\n   */\n  async waitForEvent(\n    pattern: string | RegExp,\n    timeout?: number,\n    filter?: EventFilter\n  ): Promise<EventPayload> {\n    const namespacedPattern =\n      typeof pattern === 'string'\n        ? `${this.namespace}:${pattern}`\n        : new RegExp(`^${this.namespace}:${pattern.source}$`, pattern.flags);\n\n    return this.bus.waitForEvent(namespacedPattern, timeout, filter);\n  }\n}\n\n// Singleton instance\nexport const integrationEventBus = new IntegrationEventBus();\n\nexport default IntegrationEventBus;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts",
        "start": 402,
        "end": 459,
        "startLoc": {
          "line": 402,
          "column": 1,
          "position": 2937
        },
        "endLoc": {
          "line": 459,
          "column": 2,
          "position": 3351
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/event-utilities.ts",
        "start": 1,
        "end": 58,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 414
        }
      }
    },
    {
      "format": "typescript",
      "lines": 96,
      "fragment": "{ WebhookManager } from '../webhook/webhook-manager';\n\nexport interface IntegrationConfig {\n  name: string;\n  version: string;\n  description?: string;\n  icon?: string;\n  category?: string;\n  tags?: string[];\n  author?: string;\n  documentation?: string;\n  requiredCredentials?: string[];\n  optionalCredentials?: string[];\n  supportedFeatures?: string[];\n  rateLimit?: {\n    requests: number;\n    period: number; // in seconds\n  };\n  webhooks?: {\n    enabled: boolean;\n    basePath?: string;\n  };\n  oauth?: {\n    enabled: boolean;\n    provider?: string;\n  };\n}\n\nexport interface IntegrationState {\n  status: 'initializing' | 'connected' | 'disconnected' | 'error' | 'suspended';\n  lastActivity?: Date;\n  errorMessage?: string;\n  errorCount: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface IntegrationContext {\n  userId: string;\n  workspaceId?: string;\n  environment?: 'development' | 'staging' | 'production';\n  settings?: Record<string, any>;\n}\n\nexport abstract class BaseIntegration extends EventEmitter {\n  protected config: IntegrationConfig;\n  protected state: IntegrationState;\n  protected context?: IntegrationContext;\n  protected httpClient?: AxiosInstance;\n  protected webhookManager?: WebhookManager;\n  protected oauth2Handler?: OAuth2Handler;\n  protected credentialManager?: CredentialManager;\n  private initializationPromise?: Promise<void>;\n  private heartbeatInterval?: NodeJS.Timeout;\n  private retryCount: number = 0;\n  private maxRetries: number = 3;\n\n  constructor(config: IntegrationConfig) {\n    super();\n    this.config = config;\n    this.state = {\n      status: 'initializing',\n      errorCount: 0,\n    };\n  }\n\n  /**\n   * Initialize the integration\n   */\n  async initialize(context: IntegrationContext): Promise<void> {\n    // Prevent multiple initializations\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    this.initializationPromise = this.performInitialization(context);\n    return this.initializationPromise;\n  }\n\n  /**\n   * Perform initialization\n   */\n  private async performInitialization(context: IntegrationContext): Promise<void> {\n    try {\n      this.context = context;\n      this.setState('initializing');\n\n      // Validate configuration\n      await this.validateConfiguration();\n\n      // Setup components\n      await this.setupComponents();\n\n      // Call abstract initialization method\n      await this.onInitialize();\n\n      // Start heartbeat",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 5,
        "end": 100,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 60
        },
        "endLoc": {
          "line": 100,
          "column": 19,
          "position": 742
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/core-integration.ts",
        "start": 5,
        "end": 100,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 62
        },
        "endLoc": {
          "line": 100,
          "column": 19,
          "position": 743
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "this.startHeartbeat();\n\n      this.setState('connected');\n      this.emit('initialized', { name: this.config.name });\n    } catch (error: any) {\n      this.handleError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abstract method for integration-specific initialization\n   */\n  protected abstract onInitialize",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 101,
        "end": 114,
        "startLoc": {
          "line": 101,
          "column": 7,
          "position": 745
        },
        "endLoc": {
          "line": 114,
          "column": 13,
          "position": 829
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/lifecycle-hooks.ts",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 2,
          "position": 78
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": "async connect(): Promise<void> {\n    try {\n      this.setState('initializing');\n\n      // Call abstract connect method\n      await this.onConnect();\n\n      this.setState('connected');\n      this.retryCount = 0;\n      this.emit('connected', { name: this.config.name });\n    } catch (error: any) {\n      this.handleError(error);\n\n      // Retry logic\n      if (this.retryCount < this.maxRetries) {\n        this.retryCount++;\n        const delay = 2 ** this.retryCount * 1000;\n\n        this.emit('retry', {\n          name: this.config.name,\n          attempt: this.retryCount,\n          delay,\n        });\n\n        setTimeout(() => this.connect(), delay);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Abstract method for integration-specific connection\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 119,
        "end": 152,
        "startLoc": {
          "line": 119,
          "column": 3,
          "position": 845
        },
        "endLoc": {
          "line": 152,
          "column": 6,
          "position": 1085
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/lifecycle-hooks.ts",
        "start": 23,
        "end": 59,
        "startLoc": {
          "line": 23,
          "column": 1,
          "position": 95
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 334
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "async disconnect(): Promise<void> {\n    try {\n      // Stop heartbeat\n      this.stopHeartbeat();\n\n      // Call abstract disconnect method\n      await this.onDisconnect();\n\n      this.setState('disconnected');\n      this.emit('disconnected', { name: this.config.name });\n    } catch (error: any) {\n      this.handleError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abstract method for integration-specific disconnection\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 158,
        "end": 176,
        "startLoc": {
          "line": 158,
          "column": 3,
          "position": 1108
        },
        "endLoc": {
          "line": 176,
          "column": 6,
          "position": 1222
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/lifecycle-hooks.ts",
        "start": 68,
        "end": 89,
        "startLoc": {
          "line": 68,
          "column": 1,
          "position": 356
        },
        "endLoc": {
          "line": 89,
          "column": 4,
          "position": 469
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "protected async validateConfiguration(): Promise<void> {\n    // Check required credentials\n    if (this.config.requiredCredentials && this.config.requiredCredentials.length > 0) {\n      for (const credentialName of this.config.requiredCredentials) {\n        const hasCredential = await this.checkCredential(credentialName);\n        if (!hasCredential) {\n          throw new Error(`Missing required credential: ${credentialName}`);\n        }\n      }\n    }\n\n    // Call abstract validation method\n    await this.onValidateConfiguration();\n  }\n\n  /**\n   * Abstract method for integration-specific configuration validation\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 182,
        "end": 199,
        "startLoc": {
          "line": 182,
          "column": 3,
          "position": 1245
        },
        "endLoc": {
          "line": 199,
          "column": 6,
          "position": 1380
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/lifecycle-hooks.ts",
        "start": 98,
        "end": 119,
        "startLoc": {
          "line": 98,
          "column": 1,
          "position": 491
        },
        "endLoc": {
          "line": 119,
          "column": 4,
          "position": 625
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "checkCredential(name: string): Promise<boolean> {\n    if (!this.credentialManager || !this.context) {\n      return false;\n    }\n\n    const credentials = this.credentialManager.findCredentials({\n      integrationName: this.config.name,\n      userId: this.context.userId,\n      isActive: true,\n    });\n\n    return credentials.some((cred) => cred.name === name);\n  }\n\n  /**\n   * Get credential value\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 224,
        "end": 240,
        "startLoc": {
          "line": 224,
          "column": 2,
          "position": 1503
        },
        "endLoc": {
          "line": 240,
          "column": 6,
          "position": 1626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/error-management.ts",
        "start": 29,
        "end": 47,
        "startLoc": {
          "line": 29,
          "column": 1,
          "position": 103
        },
        "endLoc": {
          "line": 47,
          "column": 4,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "getCredential(name: string): Promise<string | null> {\n    if (!this.credentialManager || !this.context) {\n      return null;\n    }\n\n    const credentials = this.credentialManager.findCredentials({\n      integrationName: this.config.name,\n      userId: this.context.userId,\n      isActive: true,\n    });\n\n    const credential = credentials.find((cred) => cred.name === name);\n    if (credential?.id) {\n      const fullCredential = await this.credentialManager.retrieveCredential(\n        credential.id,\n        this.context.userId\n      );\n      return fullCredential?.value || null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Execute action\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 241,
        "end": 266,
        "startLoc": {
          "line": 241,
          "column": 2,
          "position": 1633
        },
        "endLoc": {
          "line": 266,
          "column": 6,
          "position": 1832
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/error-management.ts",
        "start": 50,
        "end": 77,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 232
        },
        "endLoc": {
          "line": 77,
          "column": 4,
          "position": 430
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "execute(action: string, params: any): Promise<any> {\n    if (this.state.status !== 'connected') {\n      throw new Error(`Integration ${this.config.name} is not connected`);\n    }\n\n    try {\n      // Update last activity\n      this.state.lastActivity = new Date();\n\n      // Call abstract execute method\n      const result = await this.onExecute(action, params);\n\n      this.emit('action:executed', {\n        name: this.config.name,\n        action,\n        params,\n      });\n\n      return result;\n    } catch (error: any) {\n      this.handleError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abstract method for integration-specific action execution\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 267,
        "end": 294,
        "startLoc": {
          "line": 267,
          "column": 2,
          "position": 1837
        },
        "endLoc": {
          "line": 294,
          "column": 6,
          "position": 2026
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/error-management.ts",
        "start": 79,
        "end": 108,
        "startLoc": {
          "line": 79,
          "column": 1,
          "position": 435
        },
        "endLoc": {
          "line": 108,
          "column": 4,
          "position": 623
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "if (!this.config.webhooks?.enabled) {\n      throw new Error(`Webhooks not enabled for ${this.config.name}`);\n    }\n\n    try {\n      // Call abstract webhook handler\n      const result = await this.onWebhook(path, data);\n\n      this.emit('webhook:handled', {\n        name: this.config.name,\n        path,\n        data,\n      });\n\n      return result;\n    } catch (error: any) {\n      this.handleError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abstract method for integration-specific webhook handling\n   */\n  protected abstract onWebhook",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 301,
        "end": 325,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2084
        },
        "endLoc": {
          "line": 325,
          "column": 10,
          "position": 2237
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/validation-framework.ts",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 2,
          "position": 147
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "protected setState(status: IntegrationState['status'], errorMessage?: string): void {\n    const previousStatus = this.state.status;\n    this.state.status = status;\n\n    if (errorMessage) {\n      this.state.errorMessage = errorMessage;\n    } else if (status === 'connected') {\n      this.state.errorMessage = undefined;\n      this.state.errorCount = 0;\n    }\n\n    if (previousStatus !== status) {\n      this.emit('state:changed', {\n        name: this.config.name,\n        previousStatus,\n        newStatus: status,\n        errorMessage,\n      });\n    }\n  }\n\n  /**\n   * Handle error\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 330,
        "end": 353,
        "startLoc": {
          "line": 330,
          "column": 3,
          "position": 2263
        },
        "endLoc": {
          "line": 353,
          "column": 6,
          "position": 2443
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/validation-framework.ts",
        "start": 33,
        "end": 59,
        "startLoc": {
          "line": 33,
          "column": 1,
          "position": 173
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 352
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "protected handleError(error: Error): void {\n    this.state.errorCount++;\n    this.setState('error', error.message);\n\n    this.emit('error', {\n      name: this.config.name,\n      error: error.message,\n      errorCount: this.state.errorCount,\n    });\n\n    // Suspend if too many errors\n    if (this.state.errorCount >= 10) {\n      this.suspend();\n    }\n  }\n\n  /**\n   * Start heartbeat\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 354,
        "end": 372,
        "startLoc": {
          "line": 354,
          "column": 3,
          "position": 2446
        },
        "endLoc": {
          "line": 372,
          "column": 6,
          "position": 2568
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/validation-framework.ts",
        "start": 60,
        "end": 81,
        "startLoc": {
          "line": 60,
          "column": 1,
          "position": 354
        },
        "endLoc": {
          "line": 81,
          "column": 4,
          "position": 475
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ": void {\n    if (this.heartbeatInterval) {\n      return;\n    }\n\n    this.heartbeatInterval = setInterval(async () => {\n      try {\n        await this.onHeartbeat();\n        this.emit('heartbeat', {\n          name: this.config.name,\n          status: this.state.status,\n        });\n      } catch (error: any) {\n        this.handleError(error);\n      }\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Stop heartbeat\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 373,
        "end": 393,
        "startLoc": {
          "line": 373,
          "column": 2,
          "position": 2576
        },
        "endLoc": {
          "line": 393,
          "column": 6,
          "position": 2712
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/validation-framework.ts",
        "start": 84,
        "end": 105,
        "startLoc": {
          "line": 84,
          "column": 1,
          "position": 484
        },
        "endLoc": {
          "line": 105,
          "column": 4,
          "position": 618
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "updateSettings(settings: Record<string, any>): Promise<void> {\n    if (!this.context) {\n      throw new Error('Integration not initialized');\n    }\n\n    this.context.settings = {\n      ...this.context.settings,\n      ...settings,\n    };\n\n    await this.onSettingsUpdate(settings);\n\n    this.emit('settings:updated', {\n      name: this.config.name,\n      settings,\n    });\n  }\n\n  /**\n   * Abstract method for integration-specific settings update\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 451,
        "end": 471,
        "startLoc": {
          "line": 451,
          "column": 2,
          "position": 3009
        },
        "endLoc": {
          "line": 471,
          "column": 6,
          "position": 3135
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/helper-utilities.ts",
        "start": 66,
        "end": 88,
        "startLoc": {
          "line": 66,
          "column": 1,
          "position": 240
        },
        "endLoc": {
          "line": 88,
          "column": 4,
          "position": 365
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ": Record<string, any> {\n    return {\n      name: this.config.name,\n      version: this.config.version,\n      description: this.config.description,\n      icon: this.config.icon,\n      category: this.config.category,\n      tags: this.config.tags,\n      author: this.config.author,\n      documentation: this.config.documentation,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 491,
        "end": 500,
        "startLoc": {
          "line": 491,
          "column": 2,
          "position": 3241
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3344
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/helper-utilities.ts",
        "start": 116,
        "end": 126,
        "startLoc": {
          "line": 116,
          "column": 1,
          "position": 467
        },
        "endLoc": {
          "line": 126,
          "column": 2,
          "position": 570
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "}\n\n  /**\n   * Cleanup resources\n   */\n  async cleanup(): Promise<void> {\n    this.stopHeartbeat();\n    await this.disconnect();\n    this.removeAllListeners();\n\n    this.emit('cleanup', { name: this.config.name });\n  }\n}\n\nexport default BaseIntegration;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration.ts",
        "start": 506,
        "end": 520,
        "startLoc": {
          "line": 506,
          "column": 3,
          "position": 3395
        },
        "endLoc": {
          "line": 520,
          "column": 2,
          "position": 3477
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/metadata-handling.ts",
        "start": 6,
        "end": 21,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 47
        },
        "endLoc": {
          "line": 21,
          "column": 2,
          "position": 128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "protected async makeRequest(endpoint: string, options: RequestOptions = {}): Promise<any> {\n    // Check rate limits\n    await this.checkRateLimit();\n\n    // Build full URL\n    const url = this.buildUrl(endpoint, options.queryParams);\n\n    // Add authentication headers\n    const headers = await this.getAuthHeaders(options.headers);\n\n    // Make the request with retries\n    const response = await this.executeWithRetry(\n      async () => {\n        return this.performRequest(url, {\n          ...options,\n          headers,\n        });\n      },\n      options.retryCount || 3,\n      options.retryDelay || 1000\n    );\n\n    // Update rate limit counters\n    this.incrementRequestCount();\n\n    return response;\n  }\n\n  /**\n   * Build full URL with query parameters\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 114,
        "end": 144,
        "startLoc": {
          "line": 114,
          "column": 3,
          "position": 747
        },
        "endLoc": {
          "line": 144,
          "column": 6,
          "position": 943
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/lifecycle-management.ts",
        "start": 18,
        "end": 55,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 49
        },
        "endLoc": {
          "line": 55,
          "column": 4,
          "position": 246
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "private buildUrl(endpoint: string, queryParams?: Record<string, any>): string {\n    const baseUrl = this.config.baseUrl || '';\n    let url = endpoint.startsWith('http') ? endpoint : `${baseUrl}${endpoint}`;\n\n    if (queryParams) {\n      const params = new URLSearchParams();\n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      const queryString = params.toString();\n      if (queryString) {\n        url += `${url.includes('?') ? '&' : '?'}${queryString}`;\n      }\n    }\n\n    return url;\n  }\n\n  /**\n   * Get authentication headers based on auth type\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 145,
        "end": 167,
        "startLoc": {
          "line": 145,
          "column": 3,
          "position": 946
        },
        "endLoc": {
          "line": 167,
          "column": 6,
          "position": 1182
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/lifecycle-management.ts",
        "start": 56,
        "end": 81,
        "startLoc": {
          "line": 56,
          "column": 1,
          "position": 248
        },
        "endLoc": {
          "line": 81,
          "column": 4,
          "position": 483
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "getAuthHeaders(\n    additionalHeaders?: Record<string, string>\n  ): Promise<Record<string, string>> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...additionalHeaders,\n    };\n\n    if (!this.credentials) {\n      return headers;\n    }\n\n    switch (this.config.authType) {\n      case 'apiKey':\n        headers.Authorization = `Bearer ${this.credentials.data.apiKey}`;\n        break;\n\n      case 'oauth2':\n        // Check if token needs refresh\n        if (this.credentials.expiresAt && new Date() >= this.credentials.expiresAt) {\n          await this.refreshOAuth2Token();\n        }\n        headers.Authorization = `Bearer ${this.credentials.data.accessToken}`;\n        break;\n\n      case 'basic': {\n        const auth = Buffer.from(\n          `${this.credentials.data.username}:${this.credentials.data.password}`\n        ).toString('base64');\n        headers.Authorization = `Basic ${auth}`;\n        break;\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 168,
        "end": 199,
        "startLoc": {
          "line": 168,
          "column": 2,
          "position": 1189
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1469
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/lifecycle-management.ts",
        "start": 84,
        "end": 117,
        "startLoc": {
          "line": 84,
          "column": 1,
          "position": 490
        },
        "endLoc": {
          "line": 117,
          "column": 2,
          "position": 771
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": "performRequest(url: string, options: RequestOptions): Promise<any> {\n    const controller = new AbortController();\n    const timeout = options.timeout || 30000;\n\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const response = await fetch(url, {\n        method: options.method || 'GET',\n        headers: options.headers,\n        body: options.body ? JSON.stringify(options.body) : undefined,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw await this.handleResponseError(response);\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType?.includes('application/json')) {\n        return await response.json();\n      }\n\n      return await response.text();\n    } catch (error: any) {\n      clearTimeout(timeoutId);\n\n      if (error.name === 'AbortError') {\n        throw this.createError('TIMEOUT', `Request timed out after ${timeout}ms`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Handle HTTP response errors\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 233,
        "end": 272,
        "startLoc": {
          "line": 233,
          "column": 2,
          "position": 1632
        },
        "endLoc": {
          "line": 272,
          "column": 6,
          "position": 1963
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/error-handling.ts",
        "start": 40,
        "end": 81,
        "startLoc": {
          "line": 40,
          "column": 1,
          "position": 152
        },
        "endLoc": {
          "line": 81,
          "column": 4,
          "position": 482
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "handleResponseError(response: Response): Promise<IntegrationError> {\n    let errorBody: any;\n\n    try {\n      errorBody = await response.json();\n    } catch {\n      errorBody = await response.text();\n    }\n\n    const error = this.createError(\n      `HTTP_${response.status}`,\n      errorBody?.message || `Request failed with status ${response.status}`,\n      response.status,\n      errorBody\n    );\n\n    // Determine if error is retryable\n    error.retryable = [408, 429, 500, 502, 503, 504].includes(response.status);\n\n    return error;\n  }\n\n  /**\n   * Execute function with retry logic\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 273,
        "end": 297,
        "startLoc": {
          "line": 273,
          "column": 2,
          "position": 1970
        },
        "endLoc": {
          "line": 297,
          "column": 6,
          "position": 2142
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/error-handling.ts",
        "start": 84,
        "end": 110,
        "startLoc": {
          "line": 84,
          "column": 1,
          "position": 489
        },
        "endLoc": {
          "line": 110,
          "column": 4,
          "position": 660
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "private async executeWithRetry<T>(\n    fn: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error:",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 298,
        "end": 308,
        "startLoc": {
          "line": 298,
          "column": 3,
          "position": 2145
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2260
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 260,
        "end": 79,
        "startLoc": {
          "line": 260,
          "column": 3,
          "position": 2064
        },
        "endLoc": {
          "line": 79,
          "column": 2,
          "position": 584
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "): Promise<T> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error: any) {\n        lastError = error;\n\n        if (!error.retryable || attempt === maxRetries) {\n          throw error;\n        }\n\n        // Exponential backoff\n        const waitTime = delay * 2 ** attempt;\n        await this.sleep(waitTime);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Check rate limits\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 302,
        "end": 326,
        "startLoc": {
          "line": 302,
          "column": 3,
          "position": 2192
        },
        "endLoc": {
          "line": 326,
          "column": 6,
          "position": 2356
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/validation-methods.ts",
        "start": 2,
        "end": 27,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 10
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 172
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ": Promise<void> {\n    if (!this.config.rateLimit) {\n      return;\n    }\n\n    const now = Date.now();\n    const periodMs = this.config.rateLimit.period * 1000;\n\n    // Reset counter if period has passed\n    if (now - this.requestResetTime > periodMs) {\n      this.requestCount = 0;\n      this.requestResetTime = now;\n    }\n\n    // Check if limit exceeded\n    if (this.requestCount >= this.config.rateLimit.requests) {\n      const waitTime = periodMs - (now - this.requestResetTime);\n      throw this.createError(\n        'RATE_LIMIT_EXCEEDED',\n        `Rate limit exceeded. Try again in ${Math.ceil(waitTime / 1000)} seconds`,\n        429\n      );\n    }\n  }\n\n  /**\n   * Increment request counter\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 327,
        "end": 354,
        "startLoc": {
          "line": 327,
          "column": 2,
          "position": 2366
        },
        "endLoc": {
          "line": 354,
          "column": 6,
          "position": 2567
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/validation-methods.ts",
        "start": 31,
        "end": 59,
        "startLoc": {
          "line": 31,
          "column": 1,
          "position": 184
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 383
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "protected createError(\n    code: string,\n    message: string,\n    statusCode?: number,\n    details?: any\n  ): IntegrationError {\n    const error = new Error(message) as IntegrationError;\n    error.code = code;\n    error.statusCode = statusCode;\n    error.details = details;\n    error.name = 'IntegrationError';\n    return error;\n  }\n\n  /**\n   * Sleep utility\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 362,
        "end": 378,
        "startLoc": {
          "line": 362,
          "column": 3,
          "position": 2596
        },
        "endLoc": {
          "line": 378,
          "column": 6,
          "position": 2708
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/validation-methods.ts",
        "start": 70,
        "end": 89,
        "startLoc": {
          "line": 70,
          "column": 1,
          "position": 410
        },
        "endLoc": {
          "line": 89,
          "column": 4,
          "position": 521
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": "name: string;\n  displayName: string;\n  description: string;\n  parameters: ActionParameter[];\n  outputs: ActionOutput[];\n}\n\nexport interface IntegrationTrigger {\n  name: string;\n  displayName: string;\n  description: string;\n  type: 'webhook' | 'polling' | 'manual';\n  parameters: TriggerParameter[];\n  outputs: TriggerOutput[];\n}\n\nexport interface ActionParameter {\n  name: string;\n  displayName: string;\n  type: 'string' | 'number' | 'boolean' | 'json' | 'options' | 'file';\n  required: boolean;\n  default?: any;\n  description?: string;\n  options?: Array<{ name: string; value: any }>;\n  validation?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    enum?: any[];\n  };\n}\n\nexport interface ActionOutput {\n  name: string;\n  displayName: string;\n  type: string;\n  description?: string;\n}\n\nexport interface TriggerParameter extends ActionParameter {}\nexport interface TriggerOutput extends ActionOutput {}\n\nexport default BaseIntegration;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 401,
        "end": 443,
        "startLoc": {
          "line": 401,
          "column": 3,
          "position": 2842
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 3164
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/utility-helpers.ts",
        "start": 1,
        "end": 43,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 318
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "?: Record<string, string>;\n}\n\nexport interface OAuth2Token {\n  accessToken: string;\n  refreshToken?: string;\n  tokenType: string;\n  expiresIn?: number;\n  expiresAt?: Date;\n  scope?: string;\n  idToken?: string;\n  raw?: any;\n}\n\nexport interface OAuth2Session",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 17,
        "end": 31,
        "startLoc": {
          "line": 17,
          "column": 17,
          "position": 155
        },
        "endLoc": {
          "line": 31,
          "column": 14,
          "position": 247
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/oauth/oauth2-handler.ts",
        "start": 17,
        "end": 31,
        "startLoc": {
          "line": 17,
          "column": 13,
          "position": 150
        },
        "endLoc": {
          "line": 31,
          "column": 12,
          "position": 242
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "params.prompt = this.config.prompt;\n    }\n\n    // PKCE support\n    let codeVerifier: string | undefined;\n    let codeChallenge: string | undefined;\n\n    if (this.config.usePKCE) {\n      codeVerifier = this.generateCodeVerifier();\n      codeChallenge = await this.generateCodeChallenge(codeVerifier);\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n    }\n\n    // Add parameters to URL\n    Object.entries(params).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n\n    const authRequest: AuthorizationRequest = {\n      authorizationUrl: url.toString(),\n      state,\n      codeVerifier,\n      codeChallenge,\n      nonce,\n    };\n\n    // Store pending authorization\n    this.pendingAuthorizations.set(state, authRequest);\n\n    // Clean up old pending authorizations after 10 minutes\n    setTimeout(\n      () => {\n        this.pendingAuthorizations.delete(state);\n      },\n      10 * 60 * 1000\n    );\n\n    this.emit('authorization:generated', {\n      integrationName,\n      userId,\n      state,\n    });\n\n    return authRequest;\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForToken(\n    code: string,\n    state: string,\n    integrationName: string,\n    userId: string\n  ): Promise<OAuth2Token> {\n    // Verify state\n    const pendingAuth = this.pendingAuthorizations.get(state);\n    if (!pendingAuth) {\n      throw new Error('Invalid or expired state parameter');\n    }\n\n    try {\n      const params: Record<string, string> = {\n        grant_type: 'authorization_code',\n        code,\n        client_id: this.config.clientId,\n        client_secret: this.config.clientSecret,\n        redirect_uri: this.config.redirectUri,\n      };\n\n      // Add PKCE verifier if used\n      if (this.config.usePKCE && pendingAuth.codeVerifier) {\n        params.code_verifier = pendingAuth.codeVerifier;\n      }\n\n      // Make token request\n      const response = await this.httpClient.post(\n        this.config.tokenUrl,\n        new URLSearchParams(params),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        }\n      );\n\n      const tokenData = response.data;\n\n      // Create token object\n      const token: OAuth2Token = {\n        accessToken: tokenData.access_token,\n        refreshToken: tokenData.refresh_token,\n        tokenType: tokenData.token_type || 'Bearer',\n        expiresIn: tokenData.expires_in,\n        expiresAt: tokenData.expires_in\n          ? new Date(Date.now() + tokenData.expires_in * 1000)\n          : undefined,\n        scope: tokenData.scope,\n        idToken: tokenData.id_token,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 101,
        "end": 200,
        "startLoc": {
          "line": 101,
          "column": 7,
          "position": 790
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1481
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/authorization-flow.ts",
        "start": 1,
        "end": 101,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 671
        }
      }
    },
    {
      "format": "typescript",
      "lines": 97,
      "fragment": "// Create and store session\n      const sessionId = this.generateSessionId();\n      const session: OAuth2Session = {\n        id: sessionId,\n        integrationName,\n        userId,\n        token,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        state,\n        codeVerifier: pendingAuth.codeVerifier,\n        codeChallenge: pendingAuth.codeChallenge,\n        nonce: pendingAuth.nonce,\n      };\n\n      this.sessions.set(sessionId, session);\n\n      // Clean up pending authorization\n      this.pendingAuthorizations.delete(state);\n\n      this.emit('token:obtained', {\n        sessionId,\n        integrationName,\n        userId,\n      });\n\n      return token;\n    } catch (error: any) {\n      this.emit('token:error', {\n        integrationName,\n        userId,\n        error: error.message,\n      });\n\n      throw new Error(`Failed to exchange code for token: ${error.message}`);\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshAccessToken(sessionId: string): Promise<OAuth2Token> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n\n    if (!session.token.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const params: Record<string, string> = {\n        grant_type: 'refresh_token',\n        refresh_token: session.token.refreshToken,\n        client_id: this.config.clientId,\n        client_secret: this.config.clientSecret,\n      };\n\n      const response = await this.httpClient.post(\n        this.config.tokenUrl,\n        new URLSearchParams(params),\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        }\n      );\n\n      const tokenData = response.data;\n\n      // Update token\n      session.token = {\n        accessToken: tokenData.access_token,\n        refreshToken: tokenData.refresh_token || session.token.refreshToken,\n        tokenType: tokenData.token_type || 'Bearer',\n        expiresIn: tokenData.expires_in,\n        expiresAt: tokenData.expires_in\n          ? new Date(Date.now() + tokenData.expires_in * 1000)\n          : undefined,\n        scope: tokenData.scope || session.token.scope,\n        idToken: tokenData.id_token,\n        raw: tokenData,\n      };\n\n      session.updatedAt = new Date();\n\n      this.emit('token:refreshed', {\n        sessionId,\n        integrationName: session.integrationName,\n        userId: session.userId,\n      });\n\n      return session.token;\n    } catch (error: any) {\n      this.emit('token:refresh_error', {\n        sessionId,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 204,
        "end": 300,
        "startLoc": {
          "line": 204,
          "column": 7,
          "position": 1496
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2194
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/token-management.ts",
        "start": 4,
        "end": 102,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 695
        }
      }
    },
    {
      "format": "typescript",
      "lines": 63,
      "fragment": "throw new Error(`Failed to refresh token: ${error.message}`);\n    }\n  }\n\n  /**\n   * Revoke token\n   */\n  async revokeToken(sessionId: string, revokeUrl?: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n\n    if (revokeUrl) {\n      try {\n        await this.httpClient.post(\n          revokeUrl,\n          new URLSearchParams({\n            token: session.token.accessToken,\n            token_type_hint: 'access_token',\n            client_id: this.config.clientId,\n            client_secret: this.config.clientSecret,\n          }),\n          {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n          }\n        );\n\n        // Also revoke refresh token if available\n        if (session.token.refreshToken) {\n          await this.httpClient.post(\n            revokeUrl,\n            new URLSearchParams({\n              token: session.token.refreshToken,\n              token_type_hint: 'refresh_token',\n              client_id: this.config.clientId,\n              client_secret: this.config.clientSecret,\n            }),\n            {\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            }\n          );\n        }\n      } catch (_error: any) {}\n    }\n\n    // Remove session\n    this.sessions.delete(sessionId);\n\n    this.emit('token:revoked', {\n      sessionId,\n      integrationName: session.integrationName,\n      userId: session.userId,\n    });\n  }\n\n  /**\n   * Get valid access token (auto-refresh if needed)\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 304,
        "end": 366,
        "startLoc": {
          "line": 304,
          "column": 7,
          "position": 2212
        },
        "endLoc": {
          "line": 366,
          "column": 6,
          "position": 2602
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/session-handling.ts",
        "start": 4,
        "end": 67,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 67,
          "column": 4,
          "position": 399
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "getValidAccessToken(sessionId: string): Promise<string> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n\n    // Check if token is expired or about to expire (5 minutes buffer)\n    const now = new Date();\n    const bufferTime = 5 * 60 * 1000; // 5 minutes\n\n    if (\n      session.token.expiresAt &&\n      new Date(session.token.expiresAt.getTime() - bufferTime) <= now\n    ) {\n      // Token is expired or about to expire, refresh it\n      if (session.token.refreshToken) {\n        const newToken = await this.refreshAccessToken(sessionId);\n        return newToken.accessToken;\n      } else {\n        throw new Error('Token expired and no refresh token available');\n      }\n    }\n\n    return session.token.accessToken;\n  }\n\n  /**\n   * Create authenticated HTTP client\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 367,
        "end": 395,
        "startLoc": {
          "line": 367,
          "column": 2,
          "position": 2607
        },
        "endLoc": {
          "line": 395,
          "column": 6,
          "position": 2827
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/session-handling.ts",
        "start": 69,
        "end": 96,
        "startLoc": {
          "line": 69,
          "column": 1,
          "position": 404
        },
        "endLoc": {
          "line": 96,
          "column": 4,
          "position": 618
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ": {\n    totalSessions: number;\n    pendingAuthorizations: number;\n    sessionsByIntegration: Record<string, number>;\n    sessionsByUser: Record<string, number>;\n  } {\n    const sessionsByIntegration: Record<string, number> = {};\n    const sessionsByUser: Record<string, number> = {};\n\n    this.sessions.forEach((session) => {\n      sessionsByIntegration[session.integrationName] =\n        (sessionsByIntegration[session.integrationName] || 0) + 1;\n      sessionsByUser[session.userId] = (sessionsByUser[session.userId] || 0) + 1;\n    });\n\n    return {\n      totalSessions: this.sessions.size,\n      pendingAuthorizations: this.pendingAuthorizations.size,\n      sessionsByIntegration,\n      sessionsByUser,\n    };\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler.ts",
        "start": 478,
        "end": 500,
        "startLoc": {
          "line": 478,
          "column": 2,
          "position": 3327
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3537
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/token-validation.ts",
        "start": 102,
        "end": 126,
        "startLoc": {
          "line": 102,
          "column": 1,
          "position": 433
        },
        "endLoc": {
          "line": 126,
          "column": 2,
          "position": 641
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ");\n\n    // Get applied migrations\n    const appliedResult = await this.query<{ version: number }>(\n      'SELECT version FROM migrations ORDER BY version'\n    );\n    const applied = new Set(appliedResult.rows.map((r) => r.version));\n\n    // Run pending migrations\n    for (const migration of migrations.sort((a, b) => a.version - b.version)) {\n      if (!applied.has(migration.version)) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection.ts",
        "start": 290,
        "end": 300,
        "startLoc": {
          "line": 290,
          "column": 6,
          "position": 1774
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 1898
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/query-operations.ts",
        "start": 134,
        "end": 144,
        "startLoc": {
          "line": 134,
          "column": 2,
          "position": 314
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 438
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "await this.transaction(async (client) => {\n          await client.query(migration.up);\n          await client.query('INSERT INTO migrations (version, name) VALUES ($1, $2)', [\n            migration.version,\n            migration.name,\n          ]);\n        });\n      }\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getPoolStats(): {\n    total: number;\n    idle: number;\n    waiting: number;\n  } | null {\n    if (!this.pool) return null;\n\n    return {\n      total: this.pool.totalCount,\n      idle: this.pool.idleCount,\n      waiting: this.pool.waitingCount,\n    };\n  }\n\n  /**\n   * Disconnect from PostgreSQL\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection.ts",
        "start": 301,
        "end": 331,
        "startLoc": {
          "line": 301,
          "column": 9,
          "position": 1901
        },
        "endLoc": {
          "line": 331,
          "column": 6,
          "position": 2078
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/transaction-management.ts",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 172
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": Promise<void> {\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n\n    if (this.pool) {\n      await this.pool.end();\n      this.pool = null;\n      this.isConnected = false;\n      this.emit('disconnected');\n    }\n  }\n\n  /**\n   * Check if connected\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection.ts",
        "start": 332,
        "end": 348,
        "startLoc": {
          "line": 332,
          "column": 2,
          "position": 2086
        },
        "endLoc": {
          "line": 348,
          "column": 6,
          "position": 2189
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/transaction-management.ts",
        "start": 37,
        "end": 54,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 182
        },
        "endLoc": {
          "line": 54,
          "column": 4,
          "position": 283
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ": boolean {\n    return this.isConnected && this.pool !== null;\n  }\n}\n\n// Export singleton instance\nlet pgConnection: PostgreSQLConnection | null = null;\n\nexport function getPostgreSQLConnection(config?: PostgreSQLConfig): PostgreSQLConnection {\n  if (!pgConnection && config) {\n    pgConnection = new PostgreSQLConnection(config);\n  }\n\n  if (!pgConnection) {\n    throw new Error('PostgreSQL connection not initialized. Provide config on first call.');\n  }\n\n  return pgConnection;\n}\n\nexport default PostgreSQLConnection;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection.ts",
        "start": 349,
        "end": 369,
        "startLoc": {
          "line": 349,
          "column": 2,
          "position": 2195
        },
        "endLoc": {
          "line": 369,
          "column": 2,
          "position": 2332
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/transaction-management.ts",
        "start": 56,
        "end": 77,
        "startLoc": {
          "line": 56,
          "column": 1,
          "position": 290
        },
        "endLoc": {
          "line": 77,
          "column": 2,
          "position": 426
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "}\n\n  /**\n   * Handle connection errors and attempt reconnection\n   */\n  private handleConnectionError(): void {\n    if (this.reconnectInterval) return;\n\n    this.isConnected = false;\n\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      this.emit('reconnectFailed');\n      return;\n    }\n\n    const delay = Math.min(1000 * 2 ** this.reconnectAttempts, 30000);\n\n    this.reconnectInterval = setTimeout(async () => {\n      this.reconnectInterval = null;\n      this.reconnectAttempts++;\n\n      try {\n        await this.connect();\n      } catch (_error) {\n        this.handleConnectionError();\n      }\n    }, delay);\n  }\n\n  /**\n   * Ping the database to verify connection\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 102,
        "end": 133,
        "startLoc": {
          "line": 102,
          "column": 3,
          "position": 810
        },
        "endLoc": {
          "line": 133,
          "column": 6,
          "position": 1001
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/error-handling.ts",
        "start": 2,
        "end": 34,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 192
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ": Promise<boolean> {\n    try {\n      if (!this.db) {\n        throw new Error('Database not connected');\n      }\n\n      const result = await this.db.admin().ping();\n      return result.ok === 1;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get database instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 134,
        "end": 149,
        "startLoc": {
          "line": 134,
          "column": 2,
          "position": 1009
        },
        "endLoc": {
          "line": 149,
          "column": 6,
          "position": 1109
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/error-handling.ts",
        "start": 37,
        "end": 53,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 202
        },
        "endLoc": {
          "line": 53,
          "column": 4,
          "position": 300
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ": Promise<void> {\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n\n    if (this.client) {\n      await this.client.close();\n      this.client = null;\n      this.db = null;\n      this.isConnected = false;\n      this.emit('disconnected');\n    }\n  }\n\n  /**\n   * Check if connected\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 170,
        "end": 187,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 1245
        },
        "endLoc": {
          "line": 187,
          "column": 6,
          "position": 1358
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/error-handling.ts",
        "start": 80,
        "end": 98,
        "startLoc": {
          "line": 80,
          "column": 1,
          "position": 437
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 548
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "): Promise<void> {\n    if (!this.db) {\n      throw new Error('Database not connected');\n    }\n\n    for (const indexConfig of indexes) {\n      const collection = this.db.collection(indexConfig.collection);\n      await collection.createIndex(indexConfig.index, indexConfig.options || {});\n    }\n  }\n\n  /**\n   * Run a transaction\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 201,
        "end": 214,
        "startLoc": {
          "line": 201,
          "column": 3,
          "position": 1446
        },
        "endLoc": {
          "line": 214,
          "column": 6,
          "position": 1548
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/utility-methods.ts",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 4,
          "position": 100
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "runTransaction<T>(callback: (session: any) => Promise<T>, options?: any): Promise<T> {\n    if (!this.client) {\n      throw new Error('MongoDB client not connected');\n    }\n\n    const session = this.client.startSession();\n\n    try {\n      const result = await session.withTransaction(async () => callback(session), options);\n      return result as T;\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  /**\n   * Get connection statistics\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 215,
        "end": 232,
        "startLoc": {
          "line": 215,
          "column": 2,
          "position": 1553
        },
        "endLoc": {
          "line": 232,
          "column": 6,
          "position": 1705
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/utility-methods.ts",
        "start": 17,
        "end": 36,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 105
        },
        "endLoc": {
          "line": 36,
          "column": 4,
          "position": 256
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": ": Promise<any> {\n    if (!this.db) {\n      throw new Error('Database not connected');\n    }\n\n    const stats = await this.db.stats();\n    const serverStatus = await this.db.admin().serverStatus();\n\n    return {\n      database: stats,\n      server: {\n        connections: serverStatus.connections,\n        network: serverStatus.network,\n        opcounters: serverStatus.opcounters,\n        mem: serverStatus.mem,\n      },\n    };\n  }\n}\n\n// Export singleton instance\nlet mongoConnection: MongoDBConnection | null = null;\n\nexport function getMongoConnection(config?: MongoDBConfig): MongoDBConnection {\n  if (!mongoConnection && config) {\n    mongoConnection = new MongoDBConnection(config);\n  }\n\n  if (!mongoConnection) {\n    throw new Error('MongoDB connection not initialized. Provide config on first call.');\n  }\n\n  return mongoConnection;\n}\n\nexport default MongoDBConnection;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection.ts",
        "start": 233,
        "end": 268,
        "startLoc": {
          "line": 233,
          "column": 2,
          "position": 1713
        },
        "endLoc": {
          "line": 268,
          "column": 2,
          "position": 1965
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/connection/utility-methods.ts",
        "start": 39,
        "end": 75,
        "startLoc": {
          "line": 39,
          "column": 1,
          "position": 266
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 517
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "data: Partial<T>): Promise<ServiceResult<T>> {\n    return this.execute(async () => {\n      // Validate using validator if provided\n      if (this.validator) {\n        const validationResult = await this.validator.validate(data);\n        if (!validationResult.valid) {\n          throw new Error(`Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`);\n        }\n      }\n      \n      await this.validateUpdate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/service/base-service.ts",
        "start": 134,
        "end": 144,
        "startLoc": {
          "line": 134,
          "column": 2,
          "position": 1075
        },
        "endLoc": {
          "line": 144,
          "column": 15,
          "position": 1199
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/service/base-service.ts",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 766
        },
        "endLoc": {
          "line": 109,
          "column": 15,
          "position": 890
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(schema: SchemaDefinition) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n    const validator = new SchemaValidator(schema);\n\n    descriptor.value = async function (...args: any[]) {\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts",
        "start": 63,
        "end": 74,
        "startLoc": {
          "line": 63,
          "column": 15,
          "position": 498
        },
        "endLoc": {
          "line": 74,
          "column": 6,
          "position": 601
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 14,
          "position": 268
        },
        "endLoc": {
          "line": 44,
          "column": 4,
          "position": 371
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(logger?: Logger) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const className = target.constructor.name;\n\n    descriptor.value = async function (...args: any[]) {\n      const methodLogger = logger || new Logger(`${className}:${propertyKey}`);\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts",
        "start": 32,
        "end": 43,
        "startLoc": {
          "line": 32,
          "column": 6,
          "position": 262
        },
        "endLoc": {
          "line": 43,
          "column": 6,
          "position": 382
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts",
        "start": 4,
        "end": 16,
        "startLoc": {
          "line": 4,
          "column": 4,
          "position": 21
        },
        "endLoc": {
          "line": 16,
          "column": 4,
          "position": 143
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ") {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      if (!user.permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 50,
        "startLoc": {
          "line": 34,
          "column": 7,
          "position": 270
        },
        "endLoc": {
          "line": 50,
          "column": 12,
          "position": 408
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 4,
        "end": 20,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 31
        },
        "endLoc": {
          "line": 20,
          "column": 6,
          "position": 169
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ") {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      // Extract resource ID from args using the path",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 64,
        "end": 80,
        "startLoc": {
          "line": 64,
          "column": 5,
          "position": 494
        },
        "endLoc": {
          "line": 80,
          "column": 48,
          "position": 626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 4,
        "end": 20,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 31
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      // Extract action from method name or args",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 110,
        "end": 126,
        "startLoc": {
          "line": 110,
          "column": 9,
          "position": 822
        },
        "endLoc": {
          "line": 126,
          "column": 43,
          "position": 957
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 20,
        "startLoc": {
          "line": 34,
          "column": 11,
          "position": 267
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 146,
        "end": 162,
        "startLoc": {
          "line": 146,
          "column": 6,
          "position": 1090
        },
        "endLoc": {
          "line": 162,
          "column": 6,
          "position": 1225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 20,
        "startLoc": {
          "line": 34,
          "column": 11,
          "position": 267
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": "const nodeName = options.name || answers.name;\n        const category = options.category || answers.category;\n        const template = options.template || answers.template || 'basic';\n\n        spinner.text = `Creating ${nodeName} node...`;\n\n        // Create node directory\n        const nodeDir = join(\n          process.cwd(),\n          'nodes',\n          category.toLowerCase(),\n          nodeName.toLowerCase()\n        );\n        ensureDirSync(nodeDir);\n\n        // Generate node files\n        await generateNodeFiles(nodeDir, {\n          ...answers,\n          name: nodeName,\n          category,\n          template,\n        });\n\n        spinner.succeed(chalk.green(`✅ Node '${nodeName}' created successfully!`));\n\n        if (!options.skipInstall) {\n          const installSpinner = ora('Installing dependencies...').start();\n          try {\n            await execAsync('pnpm install', { cwd: nodeDir });\n            installSpinner.succeed(chalk.green('Dependencies installed'));\n          } catch (_error) {\n            installSpinner.fail(chalk.red('Failed to install dependencies'));\n          }\n        }\n      } catch (_error) {\n        spinner.fail(chalk.red('Failed to create node'));\n        process.exit(1);\n      }\n    });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts",
        "start": 106,
        "end": 144,
        "startLoc": {
          "line": 106,
          "column": 9,
          "position": 886
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1207
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/command-handlers.ts",
        "start": 10,
        "end": 45,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 34
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 334
        }
      }
    },
    {
      "format": "typescript",
      "lines": 55,
      "fragment": "}\n\nfunction testNodeCommand(): Command {\n  return new Command('test')\n    .description('Test a node')\n    .option('-n, --name <name>', 'Node name')\n    .option('-d, --data <data>', 'Test data JSON')\n    .action(async (_options) => {\n      const spinner = ora('Running node tests...').start();\n\n      try {\n        // Implementation for testing nodes\n        spinner.succeed(chalk.green('Tests passed!'));\n      } catch (_error) {\n        spinner.fail(chalk.red('Tests failed'));\n        process.exit(1);\n      }\n    });\n}\n\nfunction buildNodeCommand(): Command {\n  return new Command('build')\n    .description('Build a node')\n    .option('-n, --name <name>', 'Node name')\n    .option('-w, --watch', 'Watch for changes')\n    .action(async (options) => {\n      const spinner = ora('Building node...').start();\n\n      try {\n        const command = options.watch ? 'pnpm build:watch' : 'pnpm build';\n        await execAsync(command);\n        spinner.succeed(chalk.green('Node built successfully!'));\n      } catch (_error) {\n        spinner.fail(chalk.red('Build failed'));\n        process.exit(1);\n      }\n    });\n}\n\nfunction validateNodeCommand(): Command {\n  return new Command('validate')\n    .description('Validate a node definition')\n    .option('-n, --name <name>', 'Node name')\n    .action(async (_options) => {\n      const spinner = ora('Validating node...').start();\n\n      try {\n        // Implementation for validating nodes\n        spinner.succeed(chalk.green('Node is valid!'));\n      } catch (_error) {\n        spinner.fail(chalk.red('Validation failed'));\n        process.exit(1);\n      }\n    });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts",
        "start": 145,
        "end": 199,
        "startLoc": {
          "line": 145,
          "column": 1,
          "position": 1209
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1666
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/command-handlers.ts",
        "start": 45,
        "end": 99,
        "startLoc": {
          "line": 45,
          "column": 1,
          "position": 334
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 791
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "async function generateNodeFiles(nodeDir: string, data: any): Promise<void> {\n  // Package.json template\n  const packageJsonTemplate = `{\n  \"name\": \"@reporunner/node-{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"build:watch\": \"tsc --watch\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"eslint src/**/*.ts\",\n    \"lint:fix\": \"eslint src/**/*.ts --fix\"\n  },\n  \"dependencies\": {\n    \"@reporunner/core\": \"workspace:*\",\n    \"@reporunner/shared\": \"workspace:*\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"catalog:\",\n    \"@types/node\": \"catalog:\",\n    \"jest\": \"catalog:\",\n    \"@types/jest\": \"catalog:\",\n    \"eslint\": \"catalog:\"\n  },\n  \"keywords\": [\"reporunner\", \"node\", \"{{category}}\", \"{{name}}\"],\n  \"author\": \"{{author}}\"\n}`;\n\n  // Main node template\n  const nodeTemplate = getNodeTemplate(data.template);\n\n  // Credentials template\n  const credentialsTemplate = getCredentialsTemplate(data.credentialTypes || []);\n\n  // Properties template\n  const propertiesTemplate = getPropertiesTemplate(data.template);\n\n  // README template\n  const readmeTemplate = `# {{name}} Node\n\n{{description}}\n\n## Installation\n\n\\`\\`\\`bash\npnpm install\n\\`\\`\\`\n\n## Development\n\n\\`\\`\\`bash\n# Build\npnpm build\n\n# Watch for changes\npnpm build:watch\n\n# Run tests\npnpm test\n\\`\\`\\`\n\n## Usage\n\nThis node provides {{name}} integration for Reporunner workflows.\n\n### Operations\n\n- **Get Data**: Retrieve data from {{name}}\n{{#addCredentials}}\n\n### Credentials\n\nThis node requires {{name}} credentials. Configure them in your Reporunner instance.\n{{/addCredentials}}\n\n## Author\n\n{{author}}\n`;\n\n  // TypeScript config\n  const tsConfigTemplate = `{\n  \"extends\": \"../../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"dist\", \"node_modules\", \"**/*.test.ts\"]\n}`;\n\n  // Generate files\n  writeFileSync(join(nodeDir, 'package.json'), Mustache.render(packageJsonTemplate, data));\n\n  writeFileSync(join(nodeDir, 'src/index.ts'), Mustache.render(nodeTemplate, data));\n\n  writeFileSync(join(nodeDir, 'src/credentials.ts'), Mustache.render(credentialsTemplate, data));",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts",
        "start": 201,
        "end": 300,
        "startLoc": {
          "line": 201,
          "column": 1,
          "position": 1669
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 1872
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/file-generation.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 203
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "writeFileSync(join(nodeDir, 'src/properties.ts'), Mustache.render(propertiesTemplate, data));\n\n  writeFileSync(join(nodeDir, 'README.md'), Mustache.render(readmeTemplate, data));\n\n  writeFileSync(join(nodeDir, 'tsconfig.json'), tsConfigTemplate);\n\n  /",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts",
        "start": 302,
        "end": 308,
        "startLoc": {
          "line": 302,
          "column": 3,
          "position": 1876
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 1943
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/node-templates.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 7,
          "column": 24,
          "position": 64
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ") {\n    return async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n      try {\n        if (!req.userId) {\n          return res.status(401).json({ error: 'Not authenticated' });\n        }\n\n        const userRoleIds = await config.getUserRoles(req.userId);\n        const userRoles = config.roles.filter((role) => userRoleIds.includes(role.id));\n        const hasRequiredRole",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts",
        "start": 57,
        "end": 66,
        "startLoc": {
          "line": 57,
          "column": 2,
          "position": 526
        },
        "endLoc": {
          "line": 66,
          "column": 16,
          "position": 654
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts",
        "start": 22,
        "end": 32,
        "startLoc": {
          "line": 22,
          "column": 11,
          "position": 175
        },
        "endLoc": {
          "line": 32,
          "column": 14,
          "position": 304
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "${rule.enum.join(', ')}`);\n      }\n\n      // Custom validation\n      if (rule.custom) {\n        const result = rule.custom(value);\n        if (typeof result === 'string') {\n          errors.push(result);\n        } else if (!result) {\n          errors.push(`",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/validation.ts",
        "start": 66,
        "end": 75,
        "startLoc": {
          "line": 66,
          "column": 18,
          "position": 745
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 835
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/data-transformation.ts",
        "start": 16,
        "end": 25,
        "startLoc": {
          "line": 16,
          "column": 24,
          "position": 130
        },
        "endLoc": {
          "line": 25,
          "column": 27,
          "position": 217
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "z.object({\n  id: z.string(),\n  source: z.string(),\n  target: z.string(),\n  sourceHandle: z.string().optional(),\n  targetHandle: z.string().optional(),\n});",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/core/src/schemas/index.ts",
        "start": 21,
        "end": 27,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 185
        },
        "endLoc": {
          "line": 27,
          "column": 2,
          "position": 256
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller/controller-core.ts",
        "start": 21,
        "end": 28,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 230
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 304
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "{\n  id: string;\n  workflowId: string;\n  userId: string;\n  status: 'pending' | 'running' | 'success' | 'error' | 'cancelled';\n  startedAt: Date;\n  completedAt?: Date;\n  executedNodes: string[];\n  currentNode?: string;\n  results: Map<string, any>;\n  error?: string;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/types/workflow.ts",
        "start": 27,
        "end": 38,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 143
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/interfaces/index.ts",
        "start": 5,
        "end": 16,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 9
        },
        "endLoc": {
          "line": 16,
          "column": 9,
          "position": 109
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ");\n\n    return result.rows.map((row: any) => ({\n      id: row.id,\n      contentId: row.content_id,\n      contentType: row.content_type,\n      textContent: row.text_content,\n      metadata: row.metadata,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      similarity: parseFloat(row.similarity),\n    }));\n  }\n\n  /**\n   * Delete embedding by content ID\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/EmbeddingsService.ts",
        "start": 204,
        "end": 220,
        "startLoc": {
          "line": 204,
          "column": 2,
          "position": 1317
        },
        "endLoc": {
          "line": 220,
          "column": 6,
          "position": 1428
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/EmbeddingsService.ts",
        "start": 153,
        "end": 168,
        "startLoc": {
          "line": 153,
          "column": 7,
          "position": 1020
        },
        "endLoc": {
          "line": 168,
          "column": 6,
          "position": 1130
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 212,
        "end": 219,
        "startLoc": {
          "line": 212,
          "column": 15,
          "position": 1481
        },
        "endLoc": {
          "line": 219,
          "column": 6,
          "position": 1561
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 175,
        "end": 182,
        "startLoc": {
          "line": 175,
          "column": 7,
          "position": 1225
        },
        "endLoc": {
          "line": 182,
          "column": 3,
          "position": 1305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const userPresence = workflowUsers?.get(userId);\n\n    if (userPresence) {\n      userPresence.selection",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 251,
        "end": 261,
        "startLoc": {
          "line": 251,
          "column": 3,
          "position": 1756
        },
        "endLoc": {
          "line": 261,
          "column": 10,
          "position": 1864
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 175,
        "end": 222,
        "startLoc": {
          "line": 175,
          "column": 7,
          "position": 1225
        },
        "endLoc": {
          "line": 222,
          "column": 7,
          "position": 1589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "]\n  ): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const userPresence = workflowUsers?.get(userId);\n\n    if (userPresence) {\n      userPresence.activeArea",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 288,
        "end": 299,
        "startLoc": {
          "line": 288,
          "column": 13,
          "position": 2005
        },
        "endLoc": {
          "line": 299,
          "column": 11,
          "position": 2116
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 250,
        "end": 222,
        "startLoc": {
          "line": 250,
          "column": 12,
          "position": 1753
        },
        "endLoc": {
          "line": 222,
          "column": 7,
          "position": 1589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "router.get('/errors/:errorId', (req, res) => {\n    const { errorId } = req.params;\n    const error = errorTracker.getError(errorId);\n\n    if (!error) {\n      res.status(404).json({\n        success: false,\n        message: 'Error not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: { error },\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 111,
        "end": 127,
        "startLoc": {
          "line": 111,
          "column": 3,
          "position": 965
        },
        "endLoc": {
          "line": 127,
          "column": 2,
          "position": 1097
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/error-routes.ts",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 30,
          "column": 7,
          "position": 173
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "router.post('/errors/patterns/:fingerprint/resolve', (req, res) => {\n    const { fingerprint } = req.params;\n    const { resolvedBy = 'unknown' } = req.body;\n\n    const success = errorTracker.resolvePattern(fingerprint, resolvedBy);\n\n    if (!success) {\n      res.status(404).json({\n        success: false,\n        message: 'Error pattern not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      message: 'Error pattern resolved',\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 138,
        "end": 156,
        "startLoc": {
          "line": 138,
          "column": 3,
          "position": 1171
        },
        "endLoc": {
          "line": 156,
          "column": 2,
          "position": 1323
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/error-routes.ts",
        "start": 41,
        "end": 63,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 241
        },
        "endLoc": {
          "line": 63,
          "column": 24,
          "position": 395
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": "// Debug Session Routes\n  router.post('/debug/sessions', (req, res) => {\n    const { context = {} } = req.body;\n    const sessionId = debugTools.startDebugSession(context);\n\n    res.status(201).json({\n      success: true,\n      data: { sessionId },\n    });\n  });\n\n  router.get('/debug/sessions/:sessionId', (req, res) => {\n    const { sessionId } = req.params;\n    const session = debugTools.activeSessions.get(sessionId);\n\n    if (!session) {\n      res.status(404).json({\n        success: false,\n        message: 'Debug session not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: { session },\n    });\n  });\n\n  router.post('/debug/sessions/:sessionId/end', (req, res) => {\n    const { sessionId } = req.params;\n    const session = debugTools.endDebugSession(sessionId);\n\n    if (!session) {\n      res.status(404).json({\n        success: false,\n        message: 'Debug session not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 158,
        "end": 200,
        "startLoc": {
          "line": 158,
          "column": 3,
          "position": 1327
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1676
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/error-routes.ts",
        "start": 63,
        "end": 105,
        "startLoc": {
          "line": 63,
          "column": 1,
          "position": 395
        },
        "endLoc": {
          "line": 105,
          "column": 2,
          "position": 739
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "(sessionId);\n\n    if (!session) {\n      res.status(404).json({\n        success: false,\n        message: 'Debug session not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: { session },\n    });\n  });\n\n  router.get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 189,
        "end": 205,
        "startLoc": {
          "line": 189,
          "column": 16,
          "position": 1609
        },
        "endLoc": {
          "line": 205,
          "column": 4,
          "position": 1703
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/error-routes.ts",
        "start": 76,
        "end": 92,
        "startLoc": {
          "line": 76,
          "column": 4,
          "position": 538
        },
        "endLoc": {
          "line": 92,
          "column": 5,
          "position": 630
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "router.get('/debug/sessions/:sessionId/export', (req, res) => {\n    const { sessionId } = req.params;\n    const { format = 'json' } = req.query;\n\n    const exported = debugTools.exportDebugSession(sessionId, format as 'json' | 'csv');\n\n    if (!exported) {\n      res.status(404).json({\n        success: false,\n        message: 'Debug session not found',\n      });\n      return;\n    }\n\n    const contentType = format === 'csv' ? 'text/csv' : 'application/json';\n    const filename = `debug-session-${sessionId}.${format}`;\n\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n    res.send(exported);\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 205,
        "end": 225,
        "startLoc": {
          "line": 205,
          "column": 3,
          "position": 1701
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1913
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/profiling-routes.ts",
        "start": 8,
        "end": 32,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 18
        },
        "endLoc": {
          "line": 32,
          "column": 32,
          "position": 232
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "// Performance Profiling Routes\n  router.post('/debug/profiling/start', (req, res) => {\n    const { name, sampleInterval, duration } = req.body;\n\n    if (!name) {\n      res.status(400).json({\n        success: false,\n        message: 'Profile name is required',\n      });\n      return;\n    }\n\n    const profileId = debugTools.startProfiling(name, {\n      sampleInterval: sampleInterval ? parseInt(sampleInterval, 10) : undefined,\n      duration: duration ? parseInt(duration, 10) : undefined,\n    });\n\n    res.status(201).json({\n      success: true,\n      data: { profileId },\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 227,
        "end": 248,
        "startLoc": {
          "line": 227,
          "column": 3,
          "position": 1917
        },
        "endLoc": {
          "line": 248,
          "column": 2,
          "position": 2112
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/profiling-routes.ts",
        "start": 32,
        "end": 57,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 232
        },
        "endLoc": {
          "line": 57,
          "column": 7,
          "position": 428
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "router.post('/debug/profiling/:profileId/stop', (req, res) => {\n    const { profileId } = req.params;\n    const profile = debugTools.stopProfiling(profileId);\n\n    if (!profile) {\n      res.status(404).json({\n        success: false,\n        message: 'Profile not found',\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: { profile },\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 250,
        "end": 266,
        "startLoc": {
          "line": 250,
          "column": 3,
          "position": 2116
        },
        "endLoc": {
          "line": 266,
          "column": 2,
          "position": 2248
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/profiling-routes.ts",
        "start": 57,
        "end": 77,
        "startLoc": {
          "line": 57,
          "column": 1,
          "position": 428
        },
        "endLoc": {
          "line": 77,
          "column": 26,
          "position": 562
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "// Memory Analysis Routes\n  router.post('/debug/memory/snapshot', (req, res) => {\n    const { name = 'manual' } = req.body;\n    const snapshotId = debugTools.takeMemorySnapshot(name);\n\n    res.status(201).json({\n      success: true,\n      data: { snapshotId },\n    });\n  });\n\n  router.post('/debug/memory/leak-detection/start', (req, res) => {\n    const { interval = 30000 } = req.body;\n    debugTools.startMemoryLeakDetection(interval);\n\n    res.json({\n      success: true,\n      message: 'Memory leak detection started',\n    });\n  });\n\n  router.post('/debug/memory/leak-detection/stop', (_req, res) => {\n    debugTools.stopMemoryLeakDetection();\n\n    res.json({\n      success: true,\n      message: 'Memory leak detection stopped',\n    });\n  });\n\n  // Configuration Routes\n  router.get('/debug/config', (_req, res) => {\n    const config = {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 268,
        "end": 300,
        "startLoc": {
          "line": 268,
          "column": 3,
          "position": 2252
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2520
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/profiling-routes.ts",
        "start": 77,
        "end": 109,
        "startLoc": {
          "line": 77,
          "column": 1,
          "position": 562
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 822
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "router.post('/debug/config/debug-mode', (req, res) => {\n    const { enabled } = req.body;\n\n    if (typeof enabled !== 'boolean') {\n      res.status(400).json({\n        success: false,\n        message: 'enabled field must be boolean',\n      });\n      return;\n    }\n\n    debugTools.setGlobalDebugMode(enabled);\n\n    res.json({\n      success: true,\n      message: `Debug mode ${enabled ? 'enabled' : 'disabled'}`,\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 315,
        "end": 332,
        "startLoc": {
          "line": 315,
          "column": 3,
          "position": 2620
        },
        "endLoc": {
          "line": 332,
          "column": 2,
          "position": 2759
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/config-routes.ts",
        "start": 17,
        "end": 38,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 95
        },
        "endLoc": {
          "line": 38,
          "column": 7,
          "position": 236
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "router.post('/debug/config/log-level', (req, res) => {\n    const { level } = req.body;\n\n    const validLevels = ['error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly'];\n    if (!validLevels.includes(level)) {\n      res.status(400).json({\n        success: false,\n        message: `Invalid log level. Valid levels: ${validLevels.join(', ')}`,\n      });\n      return;\n    }\n\n    logger.setLogLevel(level);\n\n    res.json({\n      success: true,\n      message: `Log level set to ${level}`,\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 334,
        "end": 352,
        "startLoc": {
          "line": 334,
          "column": 3,
          "position": 2763
        },
        "endLoc": {
          "line": 352,
          "column": 2,
          "position": 2934
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/config-routes.ts",
        "start": 38,
        "end": 60,
        "startLoc": {
          "line": 38,
          "column": 1,
          "position": 236
        },
        "endLoc": {
          "line": 60,
          "column": 21,
          "position": 409
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "// State Dump Routes\n  router.get('/debug/state', (req, res) => {\n    const { sessionId } = req.query;\n    const state = debugTools.dumpState(sessionId as string);\n\n    res.json({\n      success: true,\n      data: state,\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 354,
        "end": 363,
        "startLoc": {
          "line": 354,
          "column": 3,
          "position": 2938
        },
        "endLoc": {
          "line": 363,
          "column": 2,
          "position": 3024
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/config-routes.ts",
        "start": 60,
        "end": 73,
        "startLoc": {
          "line": 60,
          "column": 1,
          "position": 409
        },
        "endLoc": {
          "line": 73,
          "column": 54,
          "position": 496
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "// Test Error Generation (for testing error tracking)\n  router.post('/debug/test/error', (req, res) => {\n    const { type = 'generic', message = 'Test error', severity = 'medium' } = req.body;\n    if (type === 'throw') {\n      throw new Error(message);\n    } else if (type === 'async') {\n      Promise.reject(new Error(message));\n      res.json({ success: true, message: 'Async error triggered' });\n    } else {\n      const error = new Error(message);\n      errorTracker.trackError(\n        error,\n        {\n          component: 'debug-test',\n          requestId: (req as any).id,\n        },\n        severity\n      );\n\n      res.json({\n        success: true,\n        message: 'Test error tracked',\n      });\n    }\n  });\n\n  // Performance Test Routes\n  router.post('/debug/test/performance', (req, res) => {\n    const { duration = 100, cpu = false, memory = false } = req.body;\n\n    const startTime = Date.now();\n\n    if (cpu) {\n      // CPU intensive task\n      const end = Date.now() + duration;\n      while (Date.now() < end) {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 365,
        "end": 400,
        "startLoc": {
          "line": 365,
          "column": 3,
          "position": 3028
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3381
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/config-routes.ts",
        "start": 73,
        "end": 108,
        "startLoc": {
          "line": 73,
          "column": 1,
          "position": 496
        },
        "endLoc": {
          "line": 108,
          "column": 2,
          "position": 845
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "Math.random();\n      }\n    }\n\n    if (memory) {\n      // Memory intensive task\n      const largeArray = new Array(1000000).fill('test data');\n      setTimeout(() => {\n        // Release after a moment\n        largeArray.length = 0;\n      }, 100);\n    }\n\n    const actualDuration = Date.now() - startTime;\n\n    res.json({\n      success: true,\n      data: {\n        requestedDuration: duration,\n        actualDuration,\n        cpuTest: cpu,\n        memoryTest: memory,\n      },\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 401,
        "end": 425,
        "startLoc": {
          "line": 401,
          "column": 9,
          "position": 3384
        },
        "endLoc": {
          "line": 425,
          "column": 2,
          "position": 3541
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/testing-routes.ts",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 41,
          "position": 152
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "// MongoDB Debugging (if using Mongoose)\n  router.get('/debug/database/connections', (_req, res) => {\n    const mongoose = require('mongoose');\n\n    const connectionInfo = {\n      readyState: mongoose.connection.readyState,\n      host: mongoose.connection.host,\n      port: mongoose.connection.port,\n      name: mongoose.connection.name,\n      models: Object.keys(mongoose.connection.models),\n    };\n\n    res.json({\n      success: true,\n      data: connectionInfo,\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug.ts",
        "start": 427,
        "end": 443,
        "startLoc": {
          "line": 427,
          "column": 3,
          "position": 3545
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 3683
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/testing-routes.ts",
        "start": 27,
        "end": 47,
        "startLoc": {
          "line": 27,
          "column": 1,
          "position": 152
        },
        "endLoc": {
          "line": 47,
          "column": 22,
          "position": 291
        }
      }
    },
    {
      "format": "typescript",
      "lines": 79,
      "fragment": "const workflowEdgeSchema = new Schema(\n  {\n    id: { type: String, required: true },\n    source: { type: String, required: true },\n    target: { type: String, required: true },\n    sourceHandle: { type: String },\n    targetHandle: { type: String },\n    type: { type: String },\n  },\n  { _id: false }\n);\n\nconst workflowSchema = new Schema<IWorkflow>(\n  {\n    name: {\n      type: String,\n      required: [true, 'Workflow name is required'],\n      trim: true,\n      maxlength: [100, 'Workflow name cannot be more than 100 characters'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot be more than 500 characters'],\n    },\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      ref: 'User',\n    },\n    nodes: [workflowNodeSchema],\n    edges: [workflowEdgeSchema],\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n    isPublic: {\n      type: Boolean,\n      default: false,\n    },\n    tags: [\n      {\n        type: String,\n        trim: true,\n        lowercase: true,\n      },\n    ],\n    version: {\n      type: Number,\n      default: 1,\n    },\n    settings: {\n      errorHandling: {\n        type: String,\n        enum: ['stop', 'continue'],\n        default: 'stop',\n      },\n      timeout: {\n        type: Number,\n        default: 300000, // 5 minutes\n        min: [1000, 'Timeout must be at least 1 second'],\n        max: [1800000, 'Timeout cannot exceed 30 minutes'],\n      },\n      retryAttempts: {\n        type: Number,\n        default: 3,\n        min: [0, 'Retry attempts cannot be negative'],\n        max: [10, 'Maximum 10 retry attempts allowed'],\n      },\n      concurrent: {\n        type: Boolean,\n        default: false,\n      },\n    },\n    statistics: {\n      totalExecutions: { type: Number, default: 0 },\n      successfulExecutions: { type: Number, default: 0 },\n      failedExecutions: { type: Number, default: 0 },\n      lastExecuted: { type: Date },",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Workflow.ts",
        "start": 122,
        "end": 200,
        "startLoc": {
          "line": 122,
          "column": 1,
          "position": 1114
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1759
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/workflow/workflow-middleware.ts",
        "start": 57,
        "end": 135,
        "startLoc": {
          "line": 57,
          "column": 1,
          "position": 224
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 869
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "workflowSchema.index({ tags: 1 });\nworkflowSchema.index({ 'statistics.lastExecuted': -1 });\n\n// Virtual for success rate\nworkflowSchema.virtual('successRate').get(function () {\n  if (this.statistics.totalExecutions === 0) return 0;\n  return (this.statistics.successfulExecutions / this.statistics.totalExecutions) * 100;\n});\n\n// Pre-save middleware to increment version\nworkflowSchema.pre('save', function (next) {\n  if (this.isModified('nodes') || this.isModified('edges')) {\n    this.version += 1;\n  }\n  next();\n});\n\nexport const Workflow = mongoose.model<IWorkflow>('Workflow', workflowSchema);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Workflow.ts",
        "start": 215,
        "end": 232,
        "startLoc": {
          "line": 215,
          "column": 1,
          "position": 1875
        },
        "endLoc": {
          "line": 232,
          "column": 2,
          "position": 2058
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/workflow/workflow-methods.ts",
        "start": 34,
        "end": 51,
        "startLoc": {
          "line": 34,
          "column": 1,
          "position": 119
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 302
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ": false,\n    },\n    refreshTokens: {\n      type: [String],\n      default: [],\n      select: false,\n    },\n    lastLogin: {\n      type: Date,\n    },\n    lastPasswordChange: {\n      type: Date,\n    },\n    failedLoginAttempts: {\n      type: Number,\n      default: 0,\n    },\n    lockUntil: {\n      type: Date,\n    },\n    ssoProvider: {\n      type: String,\n      enum: ['google', 'microsoft', 'okta', 'auth0'],\n    },\n    ssoId: {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/User.ts",
        "start": 114,
        "end": 138,
        "startLoc": {
          "line": 114,
          "column": 7,
          "position": 873
        },
        "endLoc": {
          "line": 138,
          "column": 2,
          "position": 1030
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/user/user-middleware.ts",
        "start": 19,
        "end": 56,
        "startLoc": {
          "line": 19,
          "column": 3,
          "position": 87
        },
        "endLoc": {
          "line": 56,
          "column": 5,
          "position": 246
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n\n// Virtual for full name\nuserSchema.virtual('fullName').get(function () {\n  return `${this.firstName} ${this.lastName}`;\n});\n\n// Indexes for performance\nuserSchema.index({ isActive: 1 });\nuserSchema.index({ organizationId: 1 });\nuserSchema.index({ role: 1 });\nuserSchema.index({ ssoProvider: 1, ssoId: 1 });\nuserSchema.index({ emailVerificationToken: 1 });\nuserSchema.index({ passwordResetToken: 1 });\n\n// Pre-save middleware to hash password\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) return next();\n\n  const saltRounds = parseInt(process.env.BCRYPT_SALT_ROUNDS || '12', 10);\n  this.password = await bcrypt.hash(this.password, saltRounds);\n  next();\n});\n\n// Pre-save middleware to set password change date",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/User.ts",
        "start": 176,
        "end": 200,
        "startLoc": {
          "line": 176,
          "column": 1,
          "position": 1267
        },
        "endLoc": {
          "line": 200,
          "column": 51,
          "position": 1508
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/user/user-middleware.ts",
        "start": 80,
        "end": 104,
        "startLoc": {
          "line": 80,
          "column": 1,
          "position": 423
        },
        "endLoc": {
          "line": 104,
          "column": 51,
          "position": 664
        }
      }
    },
    {
      "format": "typescript",
      "lines": 69,
      "fragment": "userSchema.pre('save', function (next) {\n  if (this.isModified('password') && !this.isNew) {\n    this.lastPasswordChange = new Date();\n  }\n  next();\n});\n\n// Method to compare password\nuserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Method to check if user has specific permission\nuserSchema.methods.hasPermission = function (permission: string): boolean {\n  // Super admin has all permissions\n  if (this.role === 'super_admin') return true;\n\n  // Check if user has the specific permission\n  return this.permissions.includes(permission);\n};\n\n// Method to check if account is locked\nuserSchema.methods.isLocked = function (): boolean {\n  return !!(this.lockUntil && this.lockUntil > new Date());\n};\n\n// Static method to handle failed login attempts\nuserSchema.methods.incLoginAttempts = function () {\n  const maxAttempts = 5;\n  const lockTime = 2 * 60 * 60 * 1000; // 2 hours\n\n  // If we have a previous lock that has expired, restart at 1\n  if (this.lockUntil && this.lockUntil < new Date()) {\n    return this.updateOne({\n      $unset: { lockUntil: 1 },\n      $set: { failedLoginAttempts: 1 },\n    });\n  }\n\n  const updates = { $inc: { failedLoginAttempts: 1 } };\n\n  // If we've hit max attempts and it's not locked already, lock the account\n  if (this.failedLoginAttempts + 1 >= maxAttempts && !this.isLocked()) {\n    (updates as any).$set = { lockUntil: new Date(Date.now() + lockTime) };\n  }\n\n  return this.updateOne(updates);\n};\n\n// Static method to reset login attempts\nuserSchema.methods.resetLoginAttempts = function () {\n  return this.updateOne({\n    $unset: { failedLoginAttempts: 1, lockUntil: 1 },\n  });\n};\n\n// Remove sensitive data from JSON output\nuserSchema.methods.toJSON = function () {\n  const userObject = this.toObject();\n  userObject.password = undefined;\n  userObject.refreshTokens = undefined;\n  userObject.emailVerificationToken = undefined;\n  userObject.emailVerificationTokenExpires = undefined;\n  userObject.passwordResetToken = undefined;\n  userObject.passwordResetTokenExpires = undefined;\n  return userObject;\n};\n\nexport const User = mongoose.model<IUser>('User', userSchema);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/User.ts",
        "start": 201,
        "end": 269,
        "startLoc": {
          "line": 201,
          "column": 1,
          "position": 1510
        },
        "endLoc": {
          "line": 269,
          "column": 2,
          "position": 2154
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/user/user-methods.ts",
        "start": 1,
        "end": 69,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 69,
          "column": 2,
          "position": 644
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ",\n      },\n      sessionTimeout: {\n        type: Number,\n        default: 480, // 8 hours in minutes\n        min: 15,\n        max: 1440, // 24 hours\n      },\n      ssoEnabled: {\n        type: Boolean,\n        default: false,\n      },\n      ssoProvider: {\n        type: String,\n        enum: ['google', 'microsoft', 'okta', 'auth0'],\n      },\n      ssoSettings: {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Organization.ts",
        "start": 128,
        "end": 144,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 925
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1036
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/organization/organization-middleware.ts",
        "start": 27,
        "end": 51,
        "startLoc": {
          "line": 27,
          "column": 3,
          "position": 145
        },
        "endLoc": {
          "line": 51,
          "column": 5,
          "position": 259
        }
      }
    },
    {
      "format": "typescript",
      "lines": 75,
      "fragment": "operationSchema.index({ operationId: 1 }, { unique: true });\noperationSchema.index({ status: 1 });\noperationSchema.index({ 'target.type': 1, 'target.id': 1 });\n\n// TTL index to cleanup old operations (30 days)\noperationSchema.index({ createdAt: 1 }, { expireAfterSeconds: 30 * 24 * 60 * 60 });\n\n// Methods for operational transform\noperationSchema.methods.transform = function (_otherOperation: IOperation) {\n  // This will be implemented by the OperationalTransform service\n  // For now, return a simple transform\n  return {\n    operation: this,\n    transformed: false,\n    conflicts: [],\n  };\n};\n\noperationSchema.methods.compose = function (otherOperation: IOperation) {\n  // Compose two operations into one if possible\n  if (\n    this.target.id === otherOperation.target.id &&\n    this.target.type === otherOperation.target.type\n  ) {\n    return {\n      ...this.toObject(),\n      data: {\n        before: this.data.before,\n        after: otherOperation.data.after,\n        delta: { ...this.data.delta, ...otherOperation.data.delta },\n      },\n      version: Math.max(this.version, otherOperation.version),\n      transformations: [...this.transformations, ...otherOperation.transformations],\n    };\n  }\n  return null;\n};\n\noperationSchema.methods.inverse = function () {\n  // Create inverse operation for undo functionality\n  return {\n    ...this.toObject(),\n    operationId: `${this.operationId}_inverse`,\n    data: {\n      before: this.data.after,\n      after: this.data.before,\n      delta: this.invertDelta(this.data.delta),\n    },\n    metadata: {\n      ...this.metadata,\n      source: 'system',\n      timestamp: new Date(),\n    },\n  };\n};\n\noperationSchema.methods.invertDelta = function (delta: any) {\n  if (!delta) return null;\n\n  // Simple delta inversion - this would be more complex in practice\n  const inverted: any = {};\n\n  for (const [key, value] of Object.entries(delta)) {\n    if (typeof value === 'object' && value !== null) {\n      inverted[key] = this.invertDelta(value);\n    } else {\n      // For simple values, we'd need the previous state to create proper inverse\n      inverted[key] = null; // This would be properly implemented\n    }\n  }\n\n  return inverted;\n};\n\nexport const Operation = mongoose.model<IOperation>('Operation', operationSchema);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Operation.ts",
        "start": 215,
        "end": 289,
        "startLoc": {
          "line": 215,
          "column": 1,
          "position": 1452
        },
        "endLoc": {
          "line": 289,
          "column": 2,
          "position": 2115
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/operation/operation-methods.ts",
        "start": 34,
        "end": 108,
        "startLoc": {
          "line": 34,
          "column": 1,
          "position": 135
        },
        "endLoc": {
          "line": 108,
          "column": 2,
          "position": 798
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "import mongoose, { type Document, Schema } from 'mongoose';\n\nexport interface INodeExecution {\n  nodeId: string;\n  nodeName: string;\n  status: 'pending' | 'running' | 'success' | 'error' | 'skipped';\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number;\n  input?: Record<string, any>;\n  output?: Record<string, any>;\n  error?: {\n    message: string;\n    stack?: string;\n    code?: string;\n  };\n  retryAttempt: number;\n}\n\nexport interface IExecution extends Document {\n  _id: string;\n  workflowId: string;\n  userId: string;\n  status: 'pending' | 'running' | 'success' | 'error' | 'cancelled' | 'timeout';\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  triggerType: 'manual' | 'webhook' | 'schedule' | 'api';\n  triggerData?: Record<string, any>;\n  nodeExecutions: INodeExecution[];\n  totalNodes: number;\n  completedNodes: number;\n  errorMessage?: string;\n  metadata: {\n    version: number;\n    environment: string;\n    userAgent?: string;\n    ipAddress?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  updateNodeExecution(nodeId: string, update: Partial<INodeExecution>): Promise<IExecution>;\n}\n\nconst nodeExecutionSchema = new Schema({\n  nodeId: { type: String, required: true },\n  nodeName: { type: String, required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'running', 'success', 'error', 'skipped'],\n    default: 'pending',\n  },\n  startTime: { type: Date },\n  endTime: { type: Date },\n  duration: { type: Number },\n  input: { type: Schema.Types.Mixed },\n  output: { type: Schema.Types.Mixed },\n  error: {\n    message: { type: String },\n    stack: { type: String },\n    code: { type: String },\n  },\n  retryAttempt: { type: Number, default: 0 },\n});\n\nconst executionSchema = new Schema<IExecution>(\n  {\n    workflowId: {\n      type: String,\n      required: [true, 'Workflow ID is required'],\n      ref: 'Workflow',\n    },\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      ref: 'User',\n    },\n    status: {\n      type: String,\n      enum: ['pending', 'running', 'success', 'error', 'cancelled', 'timeout'],\n      default: 'pending',\n    },\n    startTime: {\n      type: Date,\n      required: true,\n      default: Date.now,\n    },\n    endTime: { type: Date },\n    duration: { type: Number },\n    triggerType: {\n      type: String,\n      enum: ['manual', 'webhook', 'schedule', 'api'],\n      required: true,\n    },\n    triggerData: { type: Schema.Types.Mixed },\n    nodeExecutions: [nodeExecutionSchema],\n    totalNodes: {\n      type: Number,\n      required: true,\n      min: [1, 'Total nodes must be at least 1'],",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Execution.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 941
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-schema.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 941
        }
      }
    },
    {
      "format": "typescript",
      "lines": 72,
      "fragment": "executionSchema.index({ triggerType: 1 });\nexecutionSchema.index({ startTime: -1 });\n\n// Virtual for progress percentage\nexecutionSchema.virtual('progress').get(function () {\n  if (this.totalNodes === 0) return 0;\n  return Math.round((this.completedNodes / this.totalNodes) * 100);\n});\n\n// Virtual for success rate\nexecutionSchema.virtual('isSuccessful').get(function () {\n  return this.status === 'success';\n});\n\n// Pre-save middleware to calculate duration\nexecutionSchema.pre('save', function (next) {\n  if (this.endTime && this.startTime) {\n    this.duration = this.endTime.getTime() - this.startTime.getTime();\n  }\n  next();\n});\n\n// Method to update node execution\nexecutionSchema.methods.updateNodeExecution = function (\n  nodeId: string,\n  update: Partial<INodeExecution>\n) {\n  const nodeExecution = this.nodeExecutions.find((ne: INodeExecution) => ne.nodeId === nodeId);\n  if (nodeExecution) {\n    Object.assign(nodeExecution, update);\n\n    // Calculate duration if both start and end times are present\n    if (nodeExecution.startTime && nodeExecution.endTime) {\n      nodeExecution.duration = nodeExecution.endTime.getTime() - nodeExecution.startTime.getTime();\n    }\n\n    // Update completed nodes count\n    if (update.status === 'success' || update.status === 'error' || update.status === 'skipped') {\n      this.completedNodes = this.nodeExecutions.filter((ne: INodeExecution) =>\n        ['success', 'error', 'skipped'].includes(ne.status)\n      ).length;\n    }\n  }\n  return this.save();\n};\n\n// Static method to get execution statistics\nexecutionSchema.statics.getStatistics = async function (workflowId: string, days: number = 30) {\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - days);\n\n  const stats = await this.aggregate([\n    {\n      $match: {\n        workflowId,\n        startTime: { $gte: startDate },\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        totalExecutions: { $sum: 1 },\n        successfulExecutions: { $sum: { $cond: [{ $eq: ['$status', 'success'] }, 1, 0] } },\n        failedExecutions: { $sum: { $cond: [{ $eq: ['$status', 'error'] }, 1, 0] } },\n        averageDuration: { $avg: '$duration' },\n      },\n    },\n  ]);\n\n  return (\n    stats[0] || {\n      totalExecutions: 0,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Execution.ts",
        "start": 129,
        "end": 200,
        "startLoc": {
          "line": 129,
          "column": 1,
          "position": 1197
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1921
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-middleware.ts",
        "start": 61,
        "end": 132,
        "startLoc": {
          "line": 61,
          "column": 1,
          "position": 261
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 985
        }
      }
    },
    {
      "format": "typescript",
      "lines": 80,
      "fragment": "// Virtual for expiry status\ncredentialSchema.virtual('isExpired').get(function () {\n  if (!this.expiresAt) return false;\n  return new Date() > this.expiresAt;\n});\n\n// Encryption key from environment\nconst getEncryptionKey = (): Buffer => {\n  const keyHex = process.env.CREDENTIAL_ENCRYPTION_KEY;\n  if (!keyHex) {\n    throw new Error('CREDENTIAL_ENCRYPTION_KEY environment variable is required');\n  }\n  if (keyHex.length !== 64) {\n    throw new Error('CREDENTIAL_ENCRYPTION_KEY must be exactly 64 hex characters (32 bytes)');\n  }\n  try {\n    return Buffer.from(keyHex, 'hex');\n  } catch (_error) {\n    throw new Error('CREDENTIAL_ENCRYPTION_KEY must be a valid hex string');\n  }\n};\n\nconst ENCRYPTION_KEY = getEncryptionKey();\n\n// Debug: Log if we're using env key or random key\nconsole.log('📄 Credentials model loading...');\nconsole.log('   CREDENTIAL_ENCRYPTION_KEY available:', !!process.env.CREDENTIAL_ENCRYPTION_KEY);\nif (process.env.CREDENTIAL_ENCRYPTION_KEY) {\n  console.log('✓ Using CREDENTIAL_ENCRYPTION_KEY from environment');\n} else {\n  console.log(\n    '⚠️  WARNING: CREDENTIAL_ENCRYPTION_KEY not set, using random key - credentials will be lost on restart!'\n  );\n}\n\nconst IV_LENGTH = 16;\nconst ALGORITHM = 'aes-256-cbc';\n\n// Method to encrypt credential data\ncredentialSchema.methods.encrypt = (data: Record<string, any>): Record<string, any> => {\n  try {\n    const iv = crypto.randomBytes(IV_LENGTH);\n    const cipher = crypto.createCipheriv(ALGORITHM, ENCRYPTION_KEY, iv);\n\n    let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n\n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n    };\n  } catch (error: any) {\n    console.error('Encryption error:', error);\n    throw new Error(`Failed to encrypt credential data: ${error.message}`);\n  }\n};\n\n// Method to decrypt credential data\ncredentialSchema.methods.decrypt = (encryptedData: Record<string, any>): Record<string, any> => {\n  if (!encryptedData || typeof encryptedData !== 'object') {\n    throw new Error('Invalid encrypted data format');\n  }\n\n  try {\n    // Check if data has proper IV format\n    if (encryptedData.iv && encryptedData.encrypted) {\n      const iv = Buffer.from(encryptedData.iv, 'hex');\n      if (iv.length !== IV_LENGTH) {\n        throw new Error('Invalid IV length');\n      }\n\n      const decipher = crypto.createDecipheriv(ALGORITHM, ENCRYPTION_KEY, iv);\n      let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      const parsedData = JSON.parse(decrypted);\n      return parsedData;\n    } else {\n      throw new Error('Missing encryption IV. This credential needs to be re-created.');\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Credentials.ts",
        "start": 121,
        "end": 200,
        "startLoc": {
          "line": 121,
          "column": 1,
          "position": 877
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1602
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-middleware.ts",
        "start": 43,
        "end": 122,
        "startLoc": {
          "line": 43,
          "column": 1,
          "position": 156
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 881
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "} catch (error: any) {\n    console.error('Failed to decrypt credential data:', error);\n\n    // Provide more specific error message\n    if (error.code === 'ERR_OSSL_BAD_DECRYPT') {\n      throw new Error(\n        'Failed to decrypt credential data. The credential may be corrupted or using an outdated encryption method.'\n      );\n    } else if (error.message.includes('JSON')) {\n      throw new Error(\n        'Failed to parse decrypted credential data. The credential may be corrupted.'\n      );\n    } else {\n      throw new Error(`Failed to decrypt credential data: ${error.message}`);\n    }\n  }\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Credentials.ts",
        "start": 201,
        "end": 217,
        "startLoc": {
          "line": 201,
          "column": 3,
          "position": 1605
        },
        "endLoc": {
          "line": 217,
          "column": 2,
          "position": 1730
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-methods.ts",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 39,
          "position": 122
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "// Pre-save middleware to encrypt data\ncredentialSchema.pre('save', async function (next) {\n  if (this.isModified('data') && this.data) {\n    // Check if data is already encrypted (has iv and encrypted properties)\n    if (typeof this.data === 'object' && this.data.iv && this.data.encrypted) {\n      // Data is already encrypted, don't encrypt again\n      return next();\n    }\n\n    // Encrypt the data\n    this.data = this.encrypt(this.data);\n  }\n  next();\n});",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Credentials.ts",
        "start": 219,
        "end": 232,
        "startLoc": {
          "line": 219,
          "column": 1,
          "position": 1733
        },
        "endLoc": {
          "line": 232,
          "column": 2,
          "position": 1854
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-methods.ts",
        "start": 18,
        "end": 35,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 122
        },
        "endLoc": {
          "line": 35,
          "column": 32,
          "position": 246
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": "// Static method to find active credentials\ncredentialSchema.statics.findActive = function (userId: string, integration?: string) {\n  const query: any = { userId, isActive: true };\n  if (integration) {\n    query.integration = integration;\n  }\n\n  // Check for expired credentials\n  query.$or = [{ expiresAt: { $exists: false } }, { expiresAt: { $gt: new Date() } }];\n\n  return this.find(query);\n};\n\n// Method to refresh OAuth2 credentials\ncredentialSchema.methods.refreshOAuth2Token = async function (_refreshToken: string) {\n  if (this.type !== 'oauth2') {\n    throw new Error('This method is only available for OAuth2 credentials');\n  }\n\n  // This would typically make an API call to refresh the token\n  // Implementation depends on the specific OAuth2 provider\n\n  this.lastUsed = new Date();\n  return this.save();\n};\n\n// Method to mark as used\ncredentialSchema.methods.markAsUsed = function () {\n  this.lastUsed = new Date();\n  return this.save();\n};\n\n// Remove credential data from JSON output\ncredentialSchema.methods.toJSON = function () {\n  const credentialObject = this.toObject();\n  credentialObject.data = undefined;\n  return credentialObject;\n};\n\nexport const Credential = mongoose.model<ICredential>('Credential', credentialSchema);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Credentials.ts",
        "start": 240,
        "end": 279,
        "startLoc": {
          "line": 240,
          "column": 1,
          "position": 1916
        },
        "endLoc": {
          "line": 279,
          "column": 2,
          "position": 2260
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/credentials/credentials-methods.ts",
        "start": 42,
        "end": 81,
        "startLoc": {
          "line": 42,
          "column": 1,
          "position": 304
        },
        "endLoc": {
          "line": 81,
          "column": 2,
          "position": 648
        }
      }
    },
    {
      "format": "typescript",
      "lines": 44,
      "fragment": ");\n\n// Indexes for performance\ncommentSchema.index({ workflowId: 1, createdAt: -1 });\ncommentSchema.index({ sessionId: 1 });\ncommentSchema.index({ authorId: 1, createdAt: -1 });\ncommentSchema.index({ parentCommentId: 1 });\ncommentSchema.index({ status: 1 });\ncommentSchema.index({ 'position.nodeId': 1 });\ncommentSchema.index({ 'position.edgeId': 1 });\ncommentSchema.index({ tags: 1 });\n\n// Virtual for replies\ncommentSchema.virtual('replies', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'parentCommentId',\n});\n\n// Virtual for author information\ncommentSchema.virtual('author', {\n  ref: 'User',\n  localField: 'authorId',\n  foreignField: '_id',\n  justOne: true,\n});\n\n// Methods\ncommentSchema.methods.addReply = function (replyData: any) {\n  this.thread.push({\n    ...replyData,\n    timestamp: new Date(),\n  });\n  return this.save();\n};\n\ncommentSchema.methods.addReaction = function (userId: string, reactionType: string) {\n  // Remove existing reaction from this user\n  this.reactions = this.reactions.filter((r: any) => r.userId !== userId);\n\n  // Add new reaction\n  this.reactions.push({\n    userId,\n    type: reactionType,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Comment.ts",
        "start": 257,
        "end": 300,
        "startLoc": {
          "line": 257,
          "column": 1,
          "position": 1665
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2034
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-reactions.ts",
        "start": 47,
        "end": 90,
        "startLoc": {
          "line": 47,
          "column": 1,
          "position": 292
        },
        "endLoc": {
          "line": 90,
          "column": 2,
          "position": 661
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "commentSchema.methods.resolve = function (resolvedBy: string) {\n  this.status = 'resolved';\n  this.resolvedBy = resolvedBy;\n  this.resolvedAt = new Date();\n  return this.save();\n};\n\ncommentSchema.methods.edit = function (newContent: string, editedBy: string) {\n  // Store edit history\n  this.editHistory.push({\n    timestamp: new Date(),\n    previousContent: this.content,\n    editedBy,\n  });\n\n  this.content = newContent;\n  return this.save();\n};\n\n// Pre-save middleware to validate mentions\ncommentSchema.pre('save', function (next) {\n  // Validate that mention indices are within content bounds\n  for (const mention of this.mentions) {\n    if (mention.startIndex < 0 || mention.endIndex > this.content.length) {\n      next(new Error('Invalid mention indices'));\n      return;\n    }\n  }\n  next();\n});\n\nexport const Comment = mongoose.model<IComment>('Comment', commentSchema);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/Comment.ts",
        "start": 312,
        "end": 343,
        "startLoc": {
          "line": 312,
          "column": 1,
          "position": 2132
        },
        "endLoc": {
          "line": 343,
          "column": 2,
          "position": 2409
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-methods.ts",
        "start": 13,
        "end": 44,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 90
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 367
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ",\n      },\n    ],\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n    endedAt: {\n      type: Date,\n    },\n    currentVersion: {\n      type: Number,\n      default: 0,\n    },\n    lastActivity: {\n      type: Date,\n      default: Date.now,\n    },\n    settings: {\n      allowAnonymous",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/CollaborationSession.ts",
        "start": 118,
        "end": 137,
        "startLoc": {
          "line": 118,
          "column": 2,
          "position": 808
        },
        "endLoc": {
          "line": 137,
          "column": 15,
          "position": 916
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/collaborationsession/collaboration-middleware.ts",
        "start": 32,
        "end": 61,
        "startLoc": {
          "line": 32,
          "column": 3,
          "position": 154
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 262
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ");\n\n// Indexes for performance\ncollaborationSessionSchema.index({ workflowId: 1 });\ncollaborationSessionSchema.index({ sessionId: 1 }, { unique: true });\ncollaborationSessionSchema.index({ ownerId: 1 });\ncollaborationSessionSchema.index({ organizationId: 1 });\ncollaborationSessionSchema.index({ status: 1 });\ncollaborationSessionSchema.index({ lastActivity: 1 });\n\n// TTL index to automatically cleanup old sessions (7 days)\ncollaborationSessionSchema.index({ lastActivity: 1 }, { expireAfterSeconds: 7 * 24 * 60 * 60 });\n\n// Virtual for active participants\ncollaborationSessionSchema.virtual('activeParticipants').get(function () {\n  const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n  return this.participants.filter((p) => p.lastSeen > fiveMinutesAgo);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/CollaborationSession.ts",
        "start": 184,
        "end": 200,
        "startLoc": {
          "line": 184,
          "column": 1,
          "position": 1222
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1441
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/models/collaborationsession/collaboration-middleware.ts",
        "start": 94,
        "end": 110,
        "startLoc": {
          "line": 94,
          "column": 1,
          "position": 505
        },
        "endLoc": {
          "line": 110,
          "column": 2,
          "position": 724
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "{\n    requestId: req.id,\n    method: req.method,\n    url: req.originalUrl,\n    userAgent: req.get('User-Agent'),\n    ip: req.ip,\n    userId: (req as any).user?.id,\n  });\n\n  // Log detailed request information",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 144,
        "end": 153,
        "startLoc": {
          "line": 144,
          "column": 2,
          "position": 1059
        },
        "endLoc": {
          "line": 153,
          "column": 36,
          "position": 1134
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 102,
        "end": 111,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 731
        },
        "endLoc": {
          "line": 111,
          "column": 40,
          "position": 806
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n      body: req.body,\n    },\n  });\n\n  // Intercept response\n  const originalSend = res.send;\n  res.send = function (data: any) {\n    if (req.debugSession) {\n      debugTools.addDebugEvent(req.debugSession, {\n        timestamp: Date.now(),\n        type: 'log',\n        level: 'debug',\n        message: 'Response sent'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 162,
        "end": 175,
        "startLoc": {
          "line": 162,
          "column": 7,
          "position": 1211
        },
        "endLoc": {
          "line": 175,
          "column": 16,
          "position": 1317
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts",
        "start": 490,
        "end": 503,
        "startLoc": {
          "line": 490,
          "column": 6,
          "position": 4076
        },
        "endLoc": {
          "line": 503,
          "column": 21,
          "position": 4182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ",\n        data: {\n          statusCode: res.statusCode,\n          headers: res.getHeaders(),\n          body: data,\n        },\n      });\n\n      debugTools.endDebugSession(req.debugSession);\n    }\n\n    return originalSend.call(this, data);\n  };\n\n  next();\n}\n\n/**\n * Error tracking middleware\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 175,
        "end": 194,
        "startLoc": {
          "line": 175,
          "column": 16,
          "position": 1318
        },
        "endLoc": {
          "line": 194,
          "column": 4,
          "position": 1406
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts",
        "start": 503,
        "end": 518,
        "startLoc": {
          "line": 503,
          "column": 21,
          "position": 4183
        },
        "endLoc": {
          "line": 518,
          "column": 2,
          "position": 4270
        }
      }
    },
    {
      "format": "typescript",
      "lines": 95,
      "fragment": "break;\n    }\n  }\n\n  // Monitor for brute force attempts\n  const failedAttempts = res.locals.failedAttempts || 0;\n  if (failedAttempts > 5) {\n    logger.logSecurityEvent('Potential brute force attack', 'high', {\n      requestId: req.id,\n      ip: req.ip,\n      failedAttempts,\n      url: req.originalUrl,\n    });\n  }\n\n  next();\n}\n\n/**\n * Rate limiting middleware\n */\n// Simple in-memory rate limiting (in production, use Redis)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nexport function rateLimitingMiddleware(\n  req: DebuggingRequest,\n  res: Response,\n  next: NextFunction\n): void {\n  const key = req.ip || 'unknown';\n  const now = Date.now();\n  const windowMs = 60 * 1000; // 1 minute\n  const maxRequests = 100;\n\n  let store = rateLimitStore.get(key);\n\n  if (!store || now > store.resetTime) {\n    store = { count: 1, resetTime: now + windowMs };\n    rateLimitStore.set(key, store);\n  } else {\n    store.count++;\n  }\n\n  // Set rate limit headers\n  res.setHeader('X-RateLimit-Limit', maxRequests);\n  res.setHeader('X-RateLimit-Remaining', Math.max(0, maxRequests - store.count));\n  res.setHeader('X-RateLimit-Reset', new Date(store.resetTime).toISOString());\n\n  if (store.count > maxRequests) {\n    logger.logSecurityEvent('Rate limit exceeded', 'medium', {\n      requestId: req.id,\n      ip: req.ip,\n      count: store.count,\n      limit: maxRequests,\n    });\n\n    res.status(429).json({\n      success: false,\n      message: 'Too many requests',\n      retryAfter: Math.ceil((store.resetTime - now) / 1000),\n    });\n    return;\n  }\n\n  next();\n}\n\n/**\n * Complete debugging middleware stack\n */\nexport function createDebuggingMiddleware() {\n  return [\n    requestIdMiddleware,\n    performanceMiddleware,\n    loggingMiddleware,\n    securityMiddleware,\n    rateLimitingMiddleware,\n    debugMiddleware,\n  ];\n}\n\n/**\n * Database query monitoring middleware (for Mongoose)\n */\nexport function setupDatabaseMonitoring(): void {\n  const mongoose = require('mongoose');\n\n  // Monitor slow queries\n  mongoose.set('debug', (collectionName: string, method: string, query: any, _doc: any) => {\n    const startTime = Date.now();\n\n    // This is a simplified implementation\n    logger.debug('Database query', {\n      collection: collectionName,\n      method,",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 306,
        "end": 400,
        "startLoc": {
          "line": 306,
          "column": 7,
          "position": 2342
        },
        "endLoc": {
          "line": 400,
          "column": 2,
          "position": 3026
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/security-middleware.ts",
        "start": 6,
        "end": 100,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 18
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 696
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "// In a real implementation, you'd measure actual query duration\n    const duration = Date.now() - startTime;\n    if (duration > 100) {\n      logger.warn('Slow database query', {\n        collection: collectionName,\n        method,\n        duration,\n        query: JSON.stringify(query),\n        component: 'database',\n      });\n    }\n\n    performanceMonitor.recordMetric({\n      name: 'database_query_duration',\n      value: duration,\n      unit: 'ms',\n      timestamp: Date.now(),\n      tags: {\n        collection: collectionName,\n        method,\n      },\n    });\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 405,
        "end": 427,
        "startLoc": {
          "line": 405,
          "column": 5,
          "position": 3054
        },
        "endLoc": {
          "line": 427,
          "column": 2,
          "position": 3208
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/monitoring-utilities.ts",
        "start": 5,
        "end": 28,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 24
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 173
        }
      }
    },
    {
      "format": "typescript",
      "lines": 59,
      "fragment": "}\n\n/**\n * WebSocket debugging middleware\n */\nexport function createWebSocketDebugging(io: any): void {\n  io.use((socket: any, next: any) => {\n    // Add debugging to socket\n    socket.debugSession = debugTools.startDebugSession({\n      socketId: socket.id,\n      component: 'websocket',\n      handshake: socket.handshake,\n    });\n\n    logger.debug('WebSocket connection established', {\n      socketId: socket.id,\n      component: 'websocket',\n    });\n\n    socket.on('disconnect', () => {\n      logger.debug('WebSocket connection closed', {\n        socketId: socket.id,\n        component: 'websocket',\n      });\n\n      if (socket.debugSession) {\n        debugTools.endDebugSession(socket.debugSession);\n      }\n    });\n\n    // Monitor socket events\n    const originalEmit = socket.emit;\n    socket.emit = function (...args: any[]) {\n      if (socket.debugSession) {\n        debugTools.addDebugEvent(socket.debugSession, {\n          timestamp: Date.now(),\n          type: 'log',\n          level: 'debug',\n          message: 'Socket event emitted',\n          data: {\n            event: args[0],\n            data: args.slice(1),\n          },\n        });\n      }\n\n      return originalEmit.apply(this, args);\n    };\n\n    next();\n  });\n}\n\nexport default {\n  createDebuggingMiddleware,\n  errorTrackingMiddleware,\n  setupDatabaseMonitoring,\n  createWebSocketDebugging,\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 428,
        "end": 486,
        "startLoc": {
          "line": 428,
          "column": 1,
          "position": 3210
        },
        "endLoc": {
          "line": 486,
          "column": 2,
          "position": 3599
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/monitoring-utilities.ts",
        "start": 28,
        "end": 86,
        "startLoc": {
          "line": 28,
          "column": 1,
          "position": 173
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 562
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "if (error instanceof jwt.JsonWebTokenError) {\n        next(new AppError('Invalid authentication token', 401));\n      } else if (error instanceof jwt.TokenExpiredError) {\n        next(new AppError('Authentication token has expired', 401));\n      } else {\n        next(error);\n      }\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 101,
        "end": 109,
        "startLoc": {
          "line": 101,
          "column": 7,
          "position": 716
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 801
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 4,
          "position": 83
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "optionalAuth = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const token = this.extractToken(req);\n      if (!token) {\n        return next();\n      }\n\n      await this.authenticate(req, res, next);\n    } catch (_error) {\n      // For optional auth, continue without user data\n      next();\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 114,
        "end": 126,
        "startLoc": {
          "line": 114,
          "column": 3,
          "position": 808
        },
        "endLoc": {
          "line": 126,
          "column": 2,
          "position": 927
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 14,
        "end": 31,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 85
        },
        "endLoc": {
          "line": 31,
          "column": 4,
          "position": 205
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "requirePermission = (permission: Permission) => {\n    return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        // Super admin has all permissions\n        if (req.user.role === 'super_admin') {\n          return next();\n        }\n\n        // Check if user has the required permission\n        if (!req.user.permissions.includes(permission)) {\n          throw new AppError('Insufficient permissions', 403);\n        }\n\n        next();\n      } catch (error) {\n        next(error);\n      }\n    };\n  };\n\n  /**\n   * Require one of multiple permissions\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 131,
        "end": 157,
        "startLoc": {
          "line": 131,
          "column": 3,
          "position": 934
        },
        "endLoc": {
          "line": 157,
          "column": 6,
          "position": 1127
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 32,
        "end": 58,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 207
        },
        "endLoc": {
          "line": 58,
          "column": 4,
          "position": 398
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "requireAnyPermission = (permissions: Permission[]) => {\n    return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        // Super admin has all permissions\n        if (req.user.role === 'super_admin') {\n          return next();\n        }\n\n        // Check if user has any of the required permissions\n        const hasPermission = permissions.some((permission) =>\n          req.user?.permissions.includes(permission)\n        );\n\n        if (!hasPermission) {\n          throw new AppError('Insufficient permissions', 403);\n        }\n\n        next();\n      } catch (error) {\n        next(error);\n      }\n    };\n  };\n\n  /**\n   * Require specific role\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 158,
        "end": 188,
        "startLoc": {
          "line": 158,
          "column": 3,
          "position": 1130
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1351
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 59,
        "end": 89,
        "startLoc": {
          "line": 59,
          "column": 1,
          "position": 400
        },
        "endLoc": {
          "line": 89,
          "column": 4,
          "position": 619
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "requireRole = (roles: string | string[]) => {\n    const roleArray = Array.isArray(roles) ? roles : [roles];\n\n    return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        if (!roleArray.includes(req.user.role)) {\n          throw new AppError('Insufficient role privileges', 403);\n        }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 189,
        "end": 200,
        "startLoc": {
          "line": 189,
          "column": 3,
          "position": 1354
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1504
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/permission-middleware.ts",
        "start": 90,
        "end": 101,
        "startLoc": {
          "line": 90,
          "column": 1,
          "position": 621
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 771
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "requireEmailVerification = async (\n    req: Request,\n    _res: Response,\n    next: NextFunction\n  ): Promise<void> => {\n    try {\n      if (!req.user) {\n        throw new AppError('Authentication required', 401);\n      }\n\n      if (!req.user.isEmailVerified) {\n        throw new AppError('Email verification required', 403);\n      }\n\n      next();\n    } catch (error) {\n      next(error);\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 212,
        "end": 230,
        "startLoc": {
          "line": 212,
          "column": 3,
          "position": 1547
        },
        "endLoc": {
          "line": 230,
          "column": 2,
          "position": 1684
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/access-control.ts",
        "start": 12,
        "end": 35,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 31
        },
        "endLoc": {
          "line": 35,
          "column": 4,
          "position": 168
        }
      }
    },
    {
      "format": "typescript",
      "lines": 37,
      "fragment": "requireOwnershipOrAdmin = (resourceUserIdField: string = 'userId') => {\n    return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        // Admin and super_admin can access any resource\n        if (['admin', 'super_admin'].includes(req.user.role)) {\n          return next();\n        }\n\n        // Get resource user ID from params, body, or query\n        const resourceUserId =\n          req.params[resourceUserIdField] ||\n          req.body[resourceUserIdField] ||\n          req.query[resourceUserIdField];\n\n        if (!resourceUserId) {\n          throw new AppError('Resource ownership cannot be determined', 400);\n        }\n\n        // Check if user owns the resource\n        if (req.user.id !== resourceUserId) {\n          throw new AppError('Access denied: insufficient privileges', 403);\n        }\n\n        next();\n      } catch (error) {\n        next(error);\n      }\n    };\n  };\n\n  /**\n   * Rate limiting by user\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 235,
        "end": 271,
        "startLoc": {
          "line": 235,
          "column": 3,
          "position": 1691
        },
        "endLoc": {
          "line": 271,
          "column": 6,
          "position": 1960
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/access-control.ts",
        "start": 36,
        "end": 72,
        "startLoc": {
          "line": 36,
          "column": 1,
          "position": 170
        },
        "endLoc": {
          "line": 72,
          "column": 4,
          "position": 437
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "rateLimitByUser = (maxRequests: number, windowMs: number) => {\n    const userRequests = new Map<string, { count: number; resetTime: number }>();\n\n    return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        const userId = req.user.id;\n        const now = Date.now();\n        const userLimit = userRequests.get(userId);\n\n        if (!userLimit || now > userLimit.resetTime) {\n          // Reset window\n          userRequests.set(userId, {\n            count: 1,\n            resetTime: now + windowMs,\n          });\n          return next();\n        }\n\n        if (userLimit.count >= maxRequests) {\n          res.status(429).json({\n            success: false,\n            error: 'Too many requests',\n            retryAfter: Math.ceil((userLimit.resetTime - now) / 1000),\n          });\n          return;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 272,
        "end": 300,
        "startLoc": {
          "line": 272,
          "column": 3,
          "position": 1963
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2271
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/access-control.ts",
        "start": 73,
        "end": 101,
        "startLoc": {
          "line": 73,
          "column": 1,
          "position": 439
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 747
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "requireOrganization = async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n    try {\n      if (!req.user) {\n        throw new AppError('Authentication required', 401);\n      }\n\n      if (!req.user.organizationId) {\n        throw new AppError('Organization membership required', 403);\n      }\n\n      next();\n    } catch (error) {\n      next(error);\n    }\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 314,
        "end": 328,
        "startLoc": {
          "line": 314,
          "column": 3,
          "position": 2324
        },
        "endLoc": {
          "line": 328,
          "column": 2,
          "position": 2455
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/auth-utilities.ts",
        "start": 15,
        "end": 34,
        "startLoc": {
          "line": 15,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 171
        }
      }
    },
    {
      "format": "typescript",
      "lines": 49,
      "fragment": "private extractToken(req: Request): string | null {\n    // Check Authorization header\n    const authHeader = req.headers.authorization;\n    if (authHeader?.startsWith('Bearer ')) {\n      return authHeader.substring(7);\n    }\n\n    // Legacy support for bearer (lowercase)\n    if (authHeader?.toLowerCase().startsWith('bearer ')) {\n      return authHeader.split(' ')[1];\n    }\n\n    // Legacy support: token without Bearer prefix (only if no spaces)\n    if (authHeader && !authHeader.includes(' ')) {\n      return authHeader;\n    }\n\n    // Check cookies (for browser requests)\n    if (req.cookies?.token) {\n      return req.cookies.token;\n    }\n\n    // Check query parameter (for websocket connections)\n    if (req.query?.token && typeof req.query.token === 'string') {\n      return req.query.token;\n    }\n\n    return null;\n  }\n}\n\n// Export singleton instance\nexport const authMiddleware = new AuthMiddleware();\n\n// Export individual middleware functions for convenience and backward compatibility\nexport const authenticate = authMiddleware.authenticate;\nexport const optionalAuth = authMiddleware.optionalAuth;\nexport const requirePermission = authMiddleware.requirePermission;\nexport const requireAnyPermission = authMiddleware.requireAnyPermission;\nexport const requireRole = authMiddleware.requireRole;\nexport const requireEmailVerification = authMiddleware.requireEmailVerification;\nexport const requireOwnershipOrAdmin = authMiddleware.requireOwnershipOrAdmin;\nexport const rateLimitByUser = authMiddleware.rateLimitByUser;\nexport const requireOrganization = authMiddleware.requireOrganization;\n\n// Legacy compatibility exports\nexport const authorize = (...roles: string[]) => {\n  return authMiddleware.requireRole(roles);\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 333,
        "end": 381,
        "startLoc": {
          "line": 333,
          "column": 3,
          "position": 2462
        },
        "endLoc": {
          "line": 381,
          "column": 2,
          "position": 2862
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/auth-utilities.ts",
        "start": 35,
        "end": 86,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 173
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 573
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ");\n      const duration = Date.now() - startTime;\n\n      if (testCase.expectedOutput) {\n        const isMatch = JSON.stringify(actualOutput) === JSON.stringify(testCase.expectedOutput);\n\n        if (!isMatch) {\n          return {\n            testCaseId: testCase.id,\n            status: 'failed',\n            duration,\n            actualOutput,\n            assertion: 'Output does not match expected',\n          };\n        }\n      }\n\n      return {\n        testCaseId: testCase.id,\n        status: 'passed',\n        duration,\n        actualOutput,\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts",
        "start": 160,
        "end": 187,
        "startLoc": {
          "line": 160,
          "column": 8,
          "position": 1490
        },
        "endLoc": {
          "line": 187,
          "column": 7,
          "position": 1698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts",
        "start": 43,
        "end": 70,
        "startLoc": {
          "line": 43,
          "column": 6,
          "position": 341
        },
        "endLoc": {
          "line": 70,
          "column": 3,
          "position": 549
        }
      }
    },
    {
      "format": "typescript",
      "lines": 99,
      "fragment": "export interface DevToolsConfig {\n  environment: 'development' | 'staging' | 'production';\n  debugLevel: 'error' | 'warn' | 'info' | 'debug' | 'verbose';\n  enableHotReload: boolean;\n  enableProfiler: boolean;\n  watchPaths: string[];\n}\n\nexport interface WorkflowTestResult {\n  workflowId: string;\n  executionId: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  nodeResults: Array<{\n    nodeId: string;\n    status: 'passed' | 'failed' | 'skipped';\n    duration: number;\n    error?: string;\n  }>;\n  error?: string;\n}\n\nexport interface PerformanceMetrics {\n  timestamp: Date;\n  cpu: {\n    usage: number;\n    load: number[];\n  };\n  memory: {\n    used: number;\n    heap: number;\n    external: number;\n  };\n  eventLoop: {\n    delay: number;\n    utilization: number;\n  };\n}\n\nexport class DevTools {\n  private config: DevToolsConfig;\n  private watchers: Map<string, any> = new Map();\n  private profiler?: any;\n\n  constructor(config: Partial<DevToolsConfig> = {}) {\n    this.config = {\n      environment: 'development',\n      debugLevel: 'info',\n      enableHotReload: true,\n      enableProfiler: false,\n      watchPaths: ['src/**/*.ts', 'workflows/**/*.json'],\n      ...config,\n    };\n  }\n\n  async generateWorkflow(options: {\n    name: string;\n    description?: string;\n    template?: 'basic' | 'api' | 'data-processing' | 'ai-workflow';\n    outputPath?: string;\n  }): Promise<string> {\n    const template = this.getWorkflowTemplate(options.template || 'basic');\n\n    const _workflow = {\n      ...template,\n      name: options.name,\n      description: options.description || `Generated workflow: ${options.name}`,\n      createdAt: new Date().toISOString(),\n    };\n\n    const outputPath =\n      options.outputPath || `./workflows/${options.name.toLowerCase().replace(/\\s+/g, '-')}.json`;\n\n    return outputPath;\n  }\n\n  async generateNode(options: {\n    type: string;\n    name: string;\n    category: string;\n    outputPath?: string;\n  }): Promise<string> {\n    const nodeTemplate = this.getNodeTemplate(options.type);\n\n    const _node = {\n      ...nodeTemplate,\n      name: options.name,\n      category: options.category,\n      createdAt: new Date().toISOString(),\n    };\n\n    const outputPath =\n      options.outputPath || `./src/nodes/${options.category}/${options.name.toLowerCase()}.ts`;\n\n    return outputPath;\n  }\n\n  async testWorkflow(workflowId: string, _testData?: any): Promise<WorkflowTestResult> {\n    const startTime = Date.now();",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 806
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/dev-tools-core.ts",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 806
        }
      }
    },
    {
      "format": "typescript",
      "lines": 53,
      "fragment": "try {\n      // TODO: Execute workflow with test data\n      const result: WorkflowTestResult = {\n        workflowId,\n        executionId: this.generateId(),\n        status: 'passed',\n        duration: Date.now() - startTime,\n        nodeResults: [],\n      };\n\n      return result;\n    } catch (error) {\n      return {\n        workflowId,\n        executionId: this.generateId(),\n        status: 'failed',\n        duration: Date.now() - startTime,\n        nodeResults: [],\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async benchmarkWorkflow(\n    workflowId: string,\n    iterations: number = 10\n  ): Promise<{\n    averageDuration: number;\n    minDuration: number;\n    maxDuration: number;\n    successRate: number;\n    results: WorkflowTestResult[];\n  }> {\n    const results: WorkflowTestResult[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const result = await this.testWorkflow(workflowId);\n      results.push(result);\n    }\n\n    const durations = results.map((r) => r.duration);\n    const successCount = results.filter((r) => r.status === 'passed').length;\n\n    return {\n      averageDuration: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n      minDuration: Math.min(...durations),\n      maxDuration: Math.max(...durations),\n      successRate: (successCount / iterations) * 100,\n      results,\n    };\n  }\n\n  startWatching():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 101,
        "end": 153,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 810
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1276
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/testing-benchmarking.ts",
        "start": 1,
        "end": 56,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 462
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ": void {\n    if (!this.config.enableHotReload) return;\n\n    for (const pattern of this.config.watchPaths) {\n      // Mock watcher\n      const watcher = {\n        close: () => {},\n      };\n\n      this.watchers.set(pattern, watcher);\n    }\n  }\n\n  stopWatching():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 153,
        "end": 166,
        "startLoc": {
          "line": 153,
          "column": 2,
          "position": 1276
        },
        "endLoc": {
          "line": 166,
          "column": 2,
          "position": 1372
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/testing-benchmarking.ts",
        "start": 57,
        "end": 71,
        "startLoc": {
          "line": 57,
          "column": 1,
          "position": 464
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 558
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "validateWorkflows(_directory: string = './workflows'): Promise<{\n    valid: number;\n    invalid: number;\n    errors: Array<{ file: string; errors: string[] }>;\n  }> {\n    // TODO: Implement workflow validation\n    // This would scan workflow files and validate their structure\n\n    return {\n      valid: 0,\n      invalid: 0,\n      errors: [],\n    };\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 187,
        "end": 200,
        "startLoc": {
          "line": 187,
          "column": 2,
          "position": 1541
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1642
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/testing-benchmarking.ts",
        "start": 99,
        "end": 116,
        "startLoc": {
          "line": 99,
          "column": 1,
          "position": 728
        },
        "endLoc": {
          "line": 116,
          "column": 2,
          "position": 830
        }
      }
    },
    {
      "format": "typescript",
      "lines": 99,
      "fragment": "analyzePerformance(_workflowId: string): Promise<{\n    bottlenecks: Array<{\n      nodeId: string;\n      avgDuration: number;\n      callCount: number;\n      errorRate: number;\n    }>;\n    recommendations: string[];\n  }> {\n    // TODO: Analyze workflow performance and identify bottlenecks\n\n    return {\n      bottlenecks: [],\n      recommendations: [\n        'Consider adding caching to frequently accessed data',\n        'Optimize database queries in data processing nodes',\n        'Use parallel execution where possible',\n      ],\n    };\n  }\n\n  generateMockData(_schema: any): any {\n    // TODO: Generate mock data based on schema\n    // This would be useful for testing workflows\n\n    return {\n      id: this.generateId(),\n      timestamp: new Date().toISOString(),\n      data: 'mock data',\n    };\n  }\n\n  private getWorkflowTemplate(type: string): any {\n    const templates = {\n      basic: {\n        nodes: [\n          {\n            id: 'start',\n            type: 'trigger',\n            position: { x: 100, y: 100 },\n            data: { label: 'Start' },\n          },\n          {\n            id: 'end',\n            type: 'action',\n            position: { x: 300, y: 100 },\n            data: { label: 'End' },\n          },\n        ],\n        edges: [\n          {\n            id: 'start-end',\n            source: 'start',\n            target: 'end',\n          },\n        ],\n      },\n      api: {\n        nodes: [\n          {\n            id: 'webhook',\n            type: 'webhook-trigger',\n            position: { x: 100, y: 100 },\n            data: { label: 'Webhook Trigger' },\n          },\n          {\n            id: 'http',\n            type: 'http-request',\n            position: { x: 300, y: 100 },\n            data: { label: 'HTTP Request' },\n          },\n          {\n            id: 'response',\n            type: 'webhook-response',\n            position: { x: 500, y: 100 },\n            data: { label: 'Send Response' },\n          },\n        ],\n        edges: [\n          { id: 'webhook-http', source: 'webhook', target: 'http' },\n          { id: 'http-response', source: 'http', target: 'response' },\n        ],\n      },\n    };\n\n    return templates[type as keyof typeof templates] || templates.basic;\n  }\n\n  private getNodeTemplate(type: string): any {\n    const templates = {\n      action: {\n        type: 'action',\n        properties: {\n          operation: {\n            type: 'select',\n            required: true,\n            options: ['create', 'read', 'update', 'delete'],\n          },\n        },",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 202,
        "end": 300,
        "startLoc": {
          "line": 202,
          "column": 2,
          "position": 1648
        },
        "endLoc": {
          "line": 300,
          "column": 2,
          "position": 2385
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/performance-analysis.ts",
        "start": 2,
        "end": 112,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 112,
          "column": 2,
          "position": 739
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "return templates[type as keyof typeof templates] || templates.action;\n  }\n\n  private collectMetrics(): PerformanceMetrics {\n    const memUsage = process.memoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      timestamp: new Date(),\n      cpu: {\n        usage: 0, // TODO: Calculate CPU usage\n        load: [0, 0, 0], // TODO: Get system load\n      },\n      memory: {\n        used: memUsage.rss / 1024 / 1024, // MB\n        heap: memUsage.heapUsed / 1024 / 1024, // MB\n        external: memUsage.external / 1024 / 1024, // MB\n      },\n      eventLoop: {\n        delay: 0, // TODO: Measure event loop delay\n        utilization: 0, // TODO: Calculate event loop utilization\n      },\n    };\n    return metrics;\n  }\n\n  private generateId():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts",
        "start": 318,
        "end": 343,
        "startLoc": {
          "line": 318,
          "column": 5,
          "position": 2511
        },
        "endLoc": {
          "line": 343,
          "column": 2,
          "position": 2738
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/template-utilities.ts",
        "start": 25,
        "end": 52,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 121
        },
        "endLoc": {
          "line": 52,
          "column": 2,
          "position": 345
        }
      }
    },
    {
      "format": "typescript",
      "lines": 102,
      "fragment": "import { MongoDBConnection } from './mongodb/connection';\nimport { PostgreSQLConnection } from './postgresql/connection';\nimport { RedisConnection } from './redis/connection';\nimport type { DatabaseConfig } from './types';\n\n/**\n * Hybrid database manager that orchestrates MongoDB, PostgreSQL, and Redis connections\n *\n * Architecture:\n * - MongoDB: Primary database for workflows, executions, users, organizations\n * - PostgreSQL: AI database with pgvector for embeddings and vector search\n * - Redis: Caching, sessions, and queue management\n */\nexport class DatabaseManager {\n  private mongodb: MongoDBConnection;\n  private postgresql: PostgreSQLConnection;\n  private redis: RedisConnection;\n  private isInitialized = false;\n\n  constructor(config: DatabaseConfig) {\n    this.mongodb = new MongoDBConnection(config.mongodb);\n    this.postgresql = new PostgreSQLConnection(config.postgresql);\n    this.redis = new RedisConnection(config.redis);\n  }\n\n  /**\n   * Initialize all database connections\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n    await this.mongodb.connect();\n    await this.postgresql.connect();\n    await this.postgresql.enableVectorExtension();\n    await this.redis.connect();\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Shutdown all database connections gracefully\n   */\n  async shutdown(): Promise<void> {\n    await Promise.all([\n      this.mongodb.disconnect(),\n      this.postgresql.disconnect(),\n      this.redis.disconnect(),\n    ]);\n\n    this.isInitialized = false;\n  }\n\n  /**\n   * Check health of all database connections\n   */\n  async healthCheck(): Promise<{\n    mongodb: boolean;\n    postgresql: boolean;\n    redis: boolean;\n    overall: boolean;\n  }> {\n    const [mongoHealth, pgHealth, redisHealth] = await Promise.allSettled([\n      this.mongodb.ping(),\n      this.postgresql.ping(),\n      this.redis.ping(),\n    ]);\n\n    const health = {\n      mongodb: mongoHealth.status === 'fulfilled' && mongoHealth.value,\n      postgresql: pgHealth.status === 'fulfilled' && pgHealth.value,\n      redis: redisHealth.status === 'fulfilled' && redisHealth.value,\n      overall: false,\n    };\n\n    health.overall = health.mongodb && health.postgresql && health.redis;\n    return health;\n  }\n\n  /**\n   * Get MongoDB connection instance\n   */\n  getMongoDB(): MongoDBConnection {\n    if (!this.isInitialized) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n    return this.mongodb;\n  }\n\n  /**\n   * Get PostgreSQL connection instance\n   */\n  getPostgreSQL(): PostgreSQLConnection {\n    if (!this.isInitialized) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n    return this.postgresql;\n  }\n\n  /**\n   * Get Redis connection instance\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager.ts",
        "start": 1,
        "end": 102,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 102,
          "column": 6,
          "position": 668
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/hybrid-manager.ts",
        "start": 1,
        "end": 101,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 101,
          "column": 1,
          "position": 667
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "transaction<T>(\n    operations: {\n      mongodb?: () => Promise<any>;\n      postgresql?: () => Promise<any>;\n    },\n    options: {\n      retries?: number;\n      timeout?: number;\n    } = {}\n  ): Promise<T> {\n    const { retries = 3, timeout = 30000 } = options;\n    let attempt = 0;\n\n    while (attempt < retries) {\n      try {\n        const results: any[] = [];\n\n        // Execute MongoDB operations in transaction\n        if (operations.mongodb) {\n          const mongoResult = await this.mongodb.transaction(operations.mongodb);\n          results.push(mongoResult);\n        }\n\n        // Execute PostgreSQL operations in transaction\n        if (operations.postgresql) {\n          const pgResult = await this.postgresql.transaction(operations.postgresql);\n          results.push(pgResult);\n        }\n\n        return results.length === 1 ? results[0] : results;\n      } catch (error) {\n        attempt++;\n        if (attempt >= retries) {\n          throw error;\n        }\n\n        // Exponential backoff\n        await new Promise((resolve) => setTimeout(resolve, 2 ** attempt * 1000));\n      }\n    }\n\n    throw new Error('Transaction failed after maximum retries');\n  }\n\n  /**\n   * Migrate databases to latest schema\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager.ts",
        "start": 113,
        "end": 159,
        "startLoc": {
          "line": 113,
          "column": 2,
          "position": 724
        },
        "endLoc": {
          "line": 159,
          "column": 6,
          "position": 1099
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/connection-orchestration.ts",
        "start": 15,
        "end": 66,
        "startLoc": {
          "line": 15,
          "column": 1,
          "position": 66
        },
        "endLoc": {
          "line": 66,
          "column": 4,
          "position": 436
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "const [mongoStats, pgStats, redisStats] = await Promise.all([\n      this.mongodb.getStats(),\n      this.postgresql.getStats(),\n      this.redis.getStats(),\n    ]);\n\n    return {\n      mongodb: mongoStats,\n      postgresql: pgStats,\n      redis: redisStats,\n    };\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager.ts",
        "start": 201,
        "end": 213,
        "startLoc": {
          "line": 201,
          "column": 5,
          "position": 1333
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1424
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/database-manager/health-monitoring.ts",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 2,
          "position": 88
        }
      }
    },
    {
      "format": "typescript",
      "lines": 100,
      "fragment": "import type { NextFunction, Request, Response } from 'express';\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n  meta?: {\n    timestamp: string;\n    requestId: string;\n    pagination?: {\n      page: number;\n      limit: number;\n      total: number;\n      totalPages: number;\n    };\n  };\n}\n\nexport interface RequestContext {\n  requestId: string;\n  userId?: string;\n  organizationId?: string;\n  roles?: string[];\n  permissions?: string[];\n  ip: string;\n  userAgent: string;\n  startTime: Date;\n}\n\nexport interface PaginationOptions {\n  page: number;\n  limit: number;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  value?: any;\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public statusCode: number,\n    public code: string,\n    message: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n\n  static badRequest(message: string, details?: any): ApiError {\n    return new ApiError(400, 'BAD_REQUEST', message, details);\n  }\n\n  static unauthorized(message: string = 'Unauthorized'): ApiError {\n    return new ApiError(401, 'UNAUTHORIZED', message);\n  }\n\n  static forbidden(message: string = 'Forbidden'): ApiError {\n    return new ApiError(403, 'FORBIDDEN', message);\n  }\n\n  static notFound(message: string = 'Resource not found'): ApiError {\n    return new ApiError(404, 'NOT_FOUND', message);\n  }\n\n  static conflict(message: string, details?: any): ApiError {\n    return new ApiError(409, 'CONFLICT', message, details);\n  }\n\n  static validationFailed(errors: ValidationError[]): ApiError {\n    return new ApiError(422, 'VALIDATION_FAILED', 'Validation failed', errors);\n  }\n\n  static tooManyRequests(message: string = 'Too many requests'): ApiError {\n    return new ApiError(429, 'TOO_MANY_REQUESTS', message);\n  }\n\n  static internalError(message: string = 'Internal server error', details?: any): ApiError {\n    return new ApiError(500, 'INTERNAL_ERROR', message, details);\n  }\n\n  static serviceUnavailable(message: string = 'Service unavailable'): ApiError {\n    return new ApiError(503, 'SERVICE_UNAVAILABLE', message);\n  }\n}\n\nexport class ResponseHelper {\n  static success<T>(data: T, meta?: Partial<ApiResponse['meta']>): ApiResponse<T> {\n    return {\n      success: true,\n      data,\n      meta: {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 838
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/api-response-types.ts",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 838
        }
      }
    },
    {
      "format": "typescript",
      "lines": 44,
      "fragment": "}\n\n  static error(error: ApiError | Error, requestId?: string): ApiResponse {\n    const isApiError = error instanceof ApiError;\n\n    return {\n      success: false,\n      error: {\n        code: isApiError ? error.code : 'INTERNAL_ERROR',\n        message: error.message,\n        details: isApiError ? error.details : undefined,\n      },\n      meta: {\n        timestamp: new Date().toISOString(),\n        requestId: requestId || ResponseHelper.generateRequestId(),\n      },\n    };\n  }\n\n  static paginated<T>(\n    data: T[],\n    pagination: PaginationOptions,\n    total: number,\n    requestId?: string\n  ): ApiResponse<T[]> {\n    const totalPages = Math.ceil(total / pagination.limit);\n\n    return {\n      success: true,\n      data,\n      meta: {\n        timestamp: new Date().toISOString(),\n        requestId: requestId || ResponseHelper.generateRequestId(),\n        pagination: {\n          page: pagination.page,\n          limit: pagination.limit,\n          total,\n          totalPages,\n        },\n      },\n    };\n  }\n\n  private static generateRequestId():",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts",
        "start": 106,
        "end": 149,
        "startLoc": {
          "line": 106,
          "column": 3,
          "position": 880
        },
        "endLoc": {
          "line": 149,
          "column": 2,
          "position": 1220
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/middleware-handlers.ts",
        "start": 6,
        "end": 55,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 38
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 375
        }
      }
    },
    {
      "format": "typescript",
      "lines": 52,
      "fragment": ": string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n}\n\nexport const asyncHandler = (\n  fn: (req: Request, res: Response, next: NextFunction) => Promise<any>\n) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nexport const contextMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const context: RequestContext = {\n    requestId: Math.random().toString(36).substr(2, 9),\n    userId: req.user?.id,\n    organizationId: req.user?.organizationId,\n    roles: req.user?.roles || [],\n    permissions: req.user?.permissions || [],\n    ip: req.ip || req.connection.remoteAddress || 'unknown',\n    userAgent: req.get('User-Agent') || 'unknown',\n    startTime: new Date(),\n  };\n\n  req.context = context;\n  res.setHeader('X-Request-ID', context.requestId);\n\n  next();\n};\n\nexport const errorHandler = (\n  error: Error,\n  req: Request,\n  res: Response,\n  _next: NextFunction\n): void => {\n  const context = req.context as RequestContext;\n  const requestId = context?.requestId;\n\n  if (error instanceof ApiError) {\n    res.status(error.statusCode).json(ResponseHelper.error(error, requestId));\n  } else {\n    const internalError = ApiError.internalError();\n    res.status(500).json(ResponseHelper.error(internalError, requestId));\n  }\n};\n\nexport const notFoundHandler = (req: Request, res: Response, _next: NextFunction): void => {\n  const context = req.context as RequestContext;\n  const error = ApiError.notFound(`Route ${req.method} ${req.path} not found`);\n  res.status(404).json(ResponseHelper.error(error, context?.requestId));",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts",
        "start": 149,
        "end": 200,
        "startLoc": {
          "line": 149,
          "column": 2,
          "position": 1220
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1837
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/middleware-handlers.ts",
        "start": 56,
        "end": 108,
        "startLoc": {
          "line": 56,
          "column": 1,
          "position": 377
        },
        "endLoc": {
          "line": 108,
          "column": 2,
          "position": 993
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": "export const validatePagination = (req: Request, _res: Response, next: NextFunction): void => {\n  const page = parseInt(req.query.page as string, 10) || 1;\n  const limit = Math.min(parseInt(req.query.limit as string, 10) || 20, 100);\n  const sortBy = req.query.sortBy as string;\n  const sortOrder = (req.query.sortOrder as string) === 'desc' ? 'desc' : 'asc';\n\n  if (page < 1) {\n    throw ApiError.badRequest('Page must be greater than 0');\n  }\n\n  if (limit < 1) {\n    throw ApiError.badRequest('Limit must be greater than 0');\n  }\n\n  req.pagination = {\n    page,\n    limit,\n    sortBy,\n    sortOrder,\n  };\n\n  next();\n};\n\n// Extend Express Request interface\ndeclare global {\n  namespace Express {\n    interface Request {\n      context?: RequestContext;\n      user?: {\n        id: string;\n        organizationId: string;\n        roles: string[];\n        permissions: string[];\n      };\n      pagination?: PaginationOptions;\n    }\n  }\n}\n\nexport * from './middleware';\nexport * from './utils';\nexport * from './validation';",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts",
        "start": 203,
        "end": 245,
        "startLoc": {
          "line": 203,
          "column": 1,
          "position": 1843
        },
        "endLoc": {
          "line": 245,
          "column": 2,
          "position": 2203
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index/validation-extensions.ts",
        "start": 3,
        "end": 45,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 363
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "};\n      }\n\n      // Generate tokens\n      const { token, refreshToken } = await this.generateTokens(user);\n\n      // Update last login\n      await this.config.database.updateUser(user.id, {\n        lastLoginAt: new Date(),\n      });\n\n      await this.emitAuthEvent(AuthEvent.LOGIN_SUCCESS, {\n        userId: user.id,\n        email: user.email,\n        organizationId: user.organizationId,\n        metadata,\n      });\n\n      return {\n        success: true,\n        user,\n        token,\n        refreshToken,\n        expiresIn: this.getTokenExpiration(),\n      };\n    } catch (_error) {\n      return { success: false, error: 'Invalid two-factor token'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/auth-manager.ts",
        "start": 150,
        "end": 176,
        "startLoc": {
          "line": 150,
          "column": 2,
          "position": 1327
        },
        "endLoc": {
          "line": 176,
          "column": 27,
          "position": 1515
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/auth-manager.ts",
        "start": 94,
        "end": 120,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 850
        },
        "endLoc": {
          "line": 120,
          "column": 24,
          "position": 1038
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "(user: User): string {\n    const payload: JWTPayload = {\n      sub: user.id,\n      email: user.email,\n      username: user.username,\n      organizationId: user.organizationId,\n      roles: user.roles,\n      permissions: user.permissions,\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + this.getRefreshTokenExpiration",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/auth-manager.ts",
        "start": 321,
        "end": 330,
        "startLoc": {
          "line": 321,
          "column": 21,
          "position": 2637
        },
        "endLoc": {
          "line": 330,
          "column": 26,
          "position": 2758
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/auth-manager.ts",
        "start": 302,
        "end": 311,
        "startLoc": {
          "line": 302,
          "column": 20,
          "position": 2470
        },
        "endLoc": {
          "line": 311,
          "column": 19,
          "position": 2591
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "this.app.use(\n      helmet({\n        contentSecurityPolicy: {\n          directives: {\n            defaultSrc: [\"'self'\"],\n            styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n            scriptSrc: [\"'self'\"],\n            imgSrc: [\"'self'\", 'data:', 'https:'],\n          },\n        },\n      })\n    );\n\n    // CORS\n    this.app.use(\n      cors({\n        origin: process",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/server.ts",
        "start": 36,
        "end": 52,
        "startLoc": {
          "line": 36,
          "column": 5,
          "position": 299
        },
        "endLoc": {
          "line": 52,
          "column": 8,
          "position": 405
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/api-gateway/src/index.ts",
        "start": 72,
        "end": 88,
        "startLoc": {
          "line": 72,
          "column": 5,
          "position": 668
        },
        "endLoc": {
          "line": 88,
          "column": 7,
          "position": 774
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n    return this.generateMockEmbedding();\n  }\n\n  private generateMockEmbedding(): number[] {\n    return Array(this.model.dimensions)\n      .fill(0)\n      .map(() => Math.random() * 2 - 1);\n  }\n}\n\nexport function",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/embeddings.ts",
        "start": 105,
        "end": 116,
        "startLoc": {
          "line": 105,
          "column": 41,
          "position": 862
        },
        "endLoc": {
          "line": 116,
          "column": 9,
          "position": 945
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/embeddings.ts",
        "start": 71,
        "end": 82,
        "startLoc": {
          "line": 71,
          "column": 36,
          "position": 604
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 687
        }
      }
    }
  ],
  "filename": "/home/margon/Reporunner/reporunner/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}