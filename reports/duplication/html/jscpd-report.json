{
  "statistics": {
    "detectionDate": "2025-09-27T01:27:44.881Z",
    "formats": {
      "typescript": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/properties/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/enhanced-properties/index.ts": {
            "lines": 12,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/communication/gmail/enhanced-node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/properties/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/actions/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/properties/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/actions/index.ts": {
            "lines": 8,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/nodeconfigs/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/infrastructure/repositories/mongo-tenant.repository/repository-queries.ts": {
            "lines": 41,
            "tokens": 420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/properties.ts": {
            "lines": 564,
            "tokens": 3969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/node.ts": {
            "lines": 60,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/index.ts": {
            "lines": 3,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/model-trainer/credentials.ts": {
            "lines": 231,
            "tokens": 1572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/properties.ts": {
            "lines": 708,
            "tokens": 5462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/node.ts": {
            "lines": 72,
            "tokens": 476,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/index.ts": {
            "lines": 3,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/data/nodes/ai-ml/ml-pipeline/credentials.ts": {
            "lines": 377,
            "tokens": 2324,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeConfigs.ts": {
            "lines": 354,
            "tokens": 2374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/healthcheck/domain/repositories/IHealthCheckRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/logging/logger/domain/repositories/ILoggerRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/debugtools/domain/repositories/IDebugToolsRepository.ts": {
            "lines": 27,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/presentation/controllers/tenant.controller.ts": {
            "lines": 179,
            "tokens": 1606,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/application/validators/tenant.validator.ts": {
            "lines": 55,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/webhooktrigger.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/vectorstoretool.node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/vectorstore.node/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/transform.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/pgvector.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/llm.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/file.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/database.node/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/aiagent.node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/types.ts": {
            "lines": 30,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 36,
            "duplicatedTokens": 516,
            "percentage": 600,
            "percentageTokens": 560.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/domain/repositories/IPermissionRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/domain/repositories/IOperationalTransformRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/domain/repositories/IEmbeddingsRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/domain/repositories/IDatabaseRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/application/use-cases/database-service.ts": {
            "lines": 57,
            "tokens": 383,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/domain/repositories/ICursorTrackingRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/repositories/ICollaborationRepository.ts": {
            "lines": 6,
            "tokens": 92,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 86,
            "percentage": 100,
            "percentageTokens": 93.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/entities/Session.entity.ts": {
            "lines": 137,
            "tokens": 1147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/workflowengine/index.ts": {
            "lines": 10,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/SecurityHeadersBuilder.ts": {
            "lines": 174,
            "tokens": 1170,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 164,
            "percentage": 16.09,
            "percentageTokens": 14.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/HSTSBuilder.ts": {
            "lines": 84,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/CSPBuilder.ts": {
            "lines": 159,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/Store.ts": {
            "lines": 23,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/RedisStore.ts": {
            "lines": 69,
            "tokens": 555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/stores/MemoryStore.ts": {
            "lines": 69,
            "tokens": 610,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/services/SessionService.ts": {
            "lines": 197,
            "tokens": 1638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/services/RoleService.ts": {
            "lines": 113,
            "tokens": 759,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/workflowexporter/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/typevalidation/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/transformnodeutils/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/propertyevaluator/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodegenerator/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/expressionevaluator/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/enhancedpropertyevaluator/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/collaboration/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/authentication/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/rbacstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/leanworkflowstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/enhancedexecutionstore/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/collaborationstore/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/analyticsstore/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/aiassistantstore/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowoptimizer/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowdebugger/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerconnectionvalidator/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/conflictresolver/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/workflowschemas/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/types/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/WebhookTrigger.node.ts": {
            "lines": 324,
            "tokens": 2175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStoreTool.node.ts": {
            "lines": 421,
            "tokens": 3053,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 114,
            "percentage": 4.99,
            "percentageTokens": 3.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStore.node.ts": {
            "lines": 509,
            "tokens": 3774,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 114,
            "percentage": 4.13,
            "percentageTokens": 3.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Trigger.node.ts": {
            "lines": 110,
            "tokens": 733,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 94,
            "percentage": 6.36,
            "percentageTokens": 12.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Transform.node.ts": {
            "lines": 387,
            "tokens": 2344,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/PgVector.node.ts": {
            "lines": 309,
            "tokens": 2404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Ollama.node.ts": {
            "lines": 163,
            "tokens": 1115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Loop.node.ts": {
            "lines": 143,
            "tokens": 985,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/LLM.node.ts": {
            "lines": 322,
            "tokens": 2456,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts": {
            "lines": 251,
            "tokens": 1959,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 211,
            "percentage": 7.17,
            "percentageTokens": 10.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/File.node.ts": {
            "lines": 360,
            "tokens": 2466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Embedding.node.ts": {
            "lines": 243,
            "tokens": 1682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Email.node.ts": {
            "lines": 298,
            "tokens": 2186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Delay.node.ts": {
            "lines": 85,
            "tokens": 596,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Database.node.ts": {
            "lines": 310,
            "tokens": 2224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Condition.node.ts": {
            "lines": 219,
            "tokens": 1781,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Action.node.ts": {
            "lines": 214,
            "tokens": 1529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 117,
            "percentage": 5.14,
            "percentageTokens": 7.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/apiclient/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/containerfactory/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/defaultTheme.ts": {
            "lines": 78,
            "tokens": 473,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 286,
            "percentage": 60.26,
            "percentageTokens": 60.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/darkTheme.ts": {
            "lines": 78,
            "tokens": 473,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 286,
            "percentage": 60.26,
            "percentageTokens": 60.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/ThemeManager.ts": {
            "lines": 228,
            "tokens": 1921,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/index.ts": {
            "lines": 8,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/usecontainerinteractions/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/index.ts": {
            "lines": 13,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts": {
            "lines": 189,
            "tokens": 1900,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 125,
            "duplicatedTokens": 982,
            "percentage": 66.14,
            "percentageTokens": 51.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts": {
            "lines": 251,
            "tokens": 2515,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 59,
            "duplicatedTokens": 466,
            "percentage": 23.51,
            "percentageTokens": 18.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts": {
            "lines": 123,
            "tokens": 861,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 168,
            "percentage": 17.89,
            "percentageTokens": 19.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts": {
            "lines": 376,
            "tokens": 2950,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 172,
            "percentage": 5.32,
            "percentageTokens": 5.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/routes/workflowRoutes.ts": {
            "lines": 206,
            "tokens": 1192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/interfaces/index.ts": {
            "lines": 26,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/controllers/WorkflowController.ts": {
            "lines": 229,
            "tokens": 1938,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/routes/oauthRoutes.ts": {
            "lines": 75,
            "tokens": 444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/interfaces/index.ts": {
            "lines": 59,
            "tokens": 361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/controllers/OAuthController.ts": {
            "lines": 140,
            "tokens": 1147,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 85,
            "percentage": 4.29,
            "percentageTokens": 7.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/routes/nodeExecutionRoutes.ts": {
            "lines": 21,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/repositories/ExecutionRepository.ts": {
            "lines": 72,
            "tokens": 484,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/interfaces/index.ts": {
            "lines": 58,
            "tokens": 383,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 99,
            "percentage": 18.97,
            "percentageTokens": 25.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/controllers/NodeExecutionController.ts": {
            "lines": 41,
            "tokens": 358,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 85,
            "percentage": 14.63,
            "percentageTokens": 23.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/interfaces/index.ts": {
            "lines": 36,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/controllers/CredentialController.ts": {
            "lines": 106,
            "tokens": 870,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/routes/collaborationRoutes.ts": {
            "lines": 69,
            "tokens": 376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts": {
            "lines": 328,
            "tokens": 2551,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 46,
            "duplicatedTokens": 361,
            "percentage": 14.02,
            "percentageTokens": 14.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts": {
            "lines": 526,
            "tokens": 4206,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 156,
            "duplicatedTokens": 1313,
            "percentage": 29.66,
            "percentageTokens": 31.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/validators/authValidators.ts": {
            "lines": 84,
            "tokens": 524,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/routes/authRoutes.ts": {
            "lines": 81,
            "tokens": 315,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/interfaces/index.ts": {
            "lines": 34,
            "tokens": 181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts": {
            "lines": 125,
            "tokens": 1138,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 214,
            "percentage": 17.6,
            "percentageTokens": 18.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts": {
            "lines": 406,
            "tokens": 3276,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 241,
            "percentage": 7.64,
            "percentageTokens": 7.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/CustomValidator.ts": {
            "lines": 120,
            "tokens": 845,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 147,
            "percentage": 15.83,
            "percentageTokens": 17.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/types/ValidationResult.ts": {
            "lines": 85,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/schema/ValidationSchema.ts": {
            "lines": 184,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts": {
            "lines": 287,
            "tokens": 1985,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 154,
            "percentage": 5.57,
            "percentageTokens": 7.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/CommonRules.ts": {
            "lines": 426,
            "tokens": 3425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/errors/ValidationError.ts": {
            "lines": 257,
            "tokens": 1751,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/context/ValidationContext.ts": {
            "lines": 304,
            "tokens": 1976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/FileValidator.ts": {
            "lines": 29,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts": {
            "lines": 204,
            "tokens": 1454,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 319,
            "percentage": 22.06,
            "percentageTokens": 21.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/types/UploadedFile.ts": {
            "lines": 183,
            "tokens": 699,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/types/UploadOptions.ts": {
            "lines": 161,
            "tokens": 462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/transforms/NoopTransform.ts": {
            "lines": 16,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/transforms/FileTransform.ts": {
            "lines": 11,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/StorageEngine.ts": {
            "lines": 90,
            "tokens": 395,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/LocalStorageEngine.ts": {
            "lines": 285,
            "tokens": 2199,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 93,
            "percentage": 4.21,
            "percentageTokens": 4.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/FileFilter.ts": {
            "lines": 10,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts": {
            "lines": 100,
            "tokens": 766,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 33,
            "duplicatedTokens": 226,
            "percentage": 33,
            "percentageTokens": 29.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/errors/UploadError.ts": {
            "lines": 196,
            "tokens": 1144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/index.ts": {
            "lines": 5,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts": {
            "lines": 524,
            "tokens": 4705,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 110,
            "duplicatedTokens": 833,
            "percentage": 20.99,
            "percentageTokens": 17.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/refactored/index.ts": {
            "lines": 181,
            "tokens": 1597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-utilities.ts": {
            "lines": 140,
            "tokens": 814,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-types.ts": {
            "lines": 99,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-service.ts": {
            "lines": 101,
            "tokens": 714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-operations.ts": {
            "lines": 99,
            "tokens": 1173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-migration.ts": {
            "lines": 106,
            "tokens": 823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-management.ts": {
            "lines": 107,
            "tokens": 867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/tenant-compliance.ts": {
            "lines": 121,
            "tokens": 840,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/service-exports.ts": {
            "lines": 117,
            "tokens": 776,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/tenant-service/src/index/index.ts": {
            "lines": 14,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/webhook-providers.ts": {
            "lines": 101,
            "tokens": 773,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/template-types.ts": {
            "lines": 99,
            "tokens": 757,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/template-management.ts": {
            "lines": 117,
            "tokens": 887,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/service-core.ts": {
            "lines": 99,
            "tokens": 912,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 81,
            "percentage": 10.1,
            "percentageTokens": 8.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/provider-exports.ts": {
            "lines": 23,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/notification-types.ts": {
            "lines": 99,
            "tokens": 739,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/index.ts": {
            "lines": 11,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/email-providers.ts": {
            "lines": 121,
            "tokens": 1006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/channel-management.ts": {
            "lines": 112,
            "tokens": 997,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/index/node-executors.ts": {
            "lines": 127,
            "tokens": 852,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/index/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/services/AuthService.ts": {
            "lines": 582,
            "tokens": 4533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/auth-service/src/rbac/permission-engine.ts": {
            "lines": 281,
            "tokens": 2088,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/visualization.ts": {
            "lines": 109,
            "tokens": 825,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/report-generation.ts": {
            "lines": 112,
            "tokens": 718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/real-time-analytics.ts": {
            "lines": 114,
            "tokens": 896,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/query-engine.ts": {
            "lines": 101,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/predictive-analytics.ts": {
            "lines": 116,
            "tokens": 903,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/performance-optimization.ts": {
            "lines": 102,
            "tokens": 774,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/metrics-aggregation.ts": {
            "lines": 109,
            "tokens": 706,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/index.ts": {
            "lines": 13,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/export-operations.ts": {
            "lines": 118,
            "tokens": 1053,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/data-processing.ts": {
            "lines": 120,
            "tokens": 875,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/data-collection.ts": {
            "lines": 115,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-types.ts": {
            "lines": 99,
            "tokens": 756,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-service.ts": {
            "lines": 99,
            "tokens": 992,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 81,
            "percentage": 10.1,
            "percentageTokens": 8.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/alert-monitoring.ts": {
            "lines": 104,
            "tokens": 766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation/ValidationMiddleware.ts": {
            "lines": 182,
            "tokens": 1444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/SecurityHeadersMiddleware.ts": {
            "lines": 216,
            "tokens": 1567,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 164,
            "percentage": 12.96,
            "percentageTokens": 10.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit/RateLimiter.ts": {
            "lines": 91,
            "tokens": 515,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware/index.ts": {
            "lines": 6,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/base/SecurityMiddleware.ts": {
            "lines": 129,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware/auth-utilities.ts": {
            "lines": 15,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth/AuthMiddleware.ts": {
            "lines": 184,
            "tokens": 1281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/operational-transform/operation-engine/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/state-store/src/index/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/scheduler/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager/delivery-tracking.ts": {
            "lines": 44,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/utils/rate-limiter/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/testing/test-framework/test-configuration.ts": {
            "lines": 6,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/testing/test-framework/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/security/credential-manager/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/monitoring/health-monitor/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/integration-registry/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/base-integration/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/validation-rules.ts": {
            "lines": 105,
            "tokens": 974,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts": {
            "lines": 99,
            "tokens": 870,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 66,
            "duplicatedTokens": 596,
            "percentage": 66.67,
            "percentageTokens": 68.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/auth/oauth2-handler/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/postgresql/connection/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/schemas/workflow.schema.ts": {
            "lines": 95,
            "tokens": 1097,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/mongodb/schemas/user.schema.ts": {
            "lines": 158,
            "tokens": 1766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts": {
            "lines": 183,
            "tokens": 1879,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 163,
            "duplicatedTokens": 1586,
            "percentage": 89.07,
            "percentageTokens": 84.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts": {
            "lines": 223,
            "tokens": 2231,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 163,
            "duplicatedTokens": 1586,
            "percentage": 73.09,
            "percentageTokens": 71.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/middleware/validation/BaseValidationMiddleware.ts": {
            "lines": 259,
            "tokens": 1512,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node/credential-templates.ts": {
            "lines": 56,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts": {
            "lines": 199,
            "tokens": 1605,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 162,
            "percentage": 7.04,
            "percentageTokens": 10.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts": {
            "lines": 116,
            "tokens": 1238,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 214,
            "percentage": 18.97,
            "percentageTokens": 17.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/monitoring/base-monitoring-repository.ts": {
            "lines": 69,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/theme.ts": {
            "lines": 44,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/responsive.ts": {
            "lines": 28,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/index.ts": {
            "lines": 12,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/utils/classNames.ts": {
            "lines": 31,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/typography.ts": {
            "lines": 42,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/spacing.ts": {
            "lines": 27,
            "tokens": 158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/index.ts": {
            "lines": 13,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/tokens/colors.ts": {
            "lines": 50,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/themes/index.ts": {
            "lines": 8,
            "tokens": 23,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/themes/gmailTheme.ts": {
            "lines": 249,
            "tokens": 1217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/reverseTypeAdapters.ts": {
            "lines": 139,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/nodeVersioning.ts": {
            "lines": 475,
            "tokens": 3745,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/utils/enhancedPropertyEvaluator.ts": {
            "lines": 598,
            "tokens": 4588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/workflow.ts": {
            "lines": 128,
            "tokens": 1048,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/security.ts": {
            "lines": 674,
            "tokens": 4915,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/nodeTypes.ts": {
            "lines": 77,
            "tokens": 572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/node.ts": {
            "lines": 4,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/debugging.ts": {
            "lines": 220,
            "tokens": 1842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts": {
            "lines": 395,
            "tokens": 2436,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 366,
            "percentage": 15.7,
            "percentageTokens": 15.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/containerNodes.ts": {
            "lines": 262,
            "tokens": 1844,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/collaboration.ts": {
            "lines": 582,
            "tokens": 3900,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/authentication.ts": {
            "lines": 445,
            "tokens": 3340,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/integrationStore.ts": {
            "lines": 154,
            "tokens": 1386,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts": {
            "lines": 178,
            "tokens": 1480,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 186,
            "percentage": 13.48,
            "percentageTokens": 12.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/analyticsStore.ts": {
            "lines": 383,
            "tokens": 3630,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/aiAssistantStore.ts": {
            "lines": 469,
            "tokens": 3556,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowTemplates.ts": {
            "lines": 834,
            "tokens": 6376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/workflowOptimizer.ts": {
            "lines": 750,
            "tokens": 6256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/securityService.ts": {
            "lines": 856,
            "tokens": 6558,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/performanceMonitor.ts": {
            "lines": 588,
            "tokens": 4661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/costOptimizer.ts": {
            "lines": 656,
            "tokens": 5459,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/containerConnectionValidator.ts": {
            "lines": 491,
            "tokens": 3215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/auditService.ts": {
            "lines": 736,
            "tokens": 5666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/PerformanceService.ts": {
            "lines": 568,
            "tokens": 4120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/services/LoggingService.ts": {
            "lines": 499,
            "tokens": 3312,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts": {
            "lines": 316,
            "tokens": 3702,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 252,
            "percentage": 5.06,
            "percentageTokens": 6.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/CredentialSchemas.ts": {
            "lines": 276,
            "tokens": 3007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/AuthSchemas.ts": {
            "lines": 263,
            "tokens": 2725,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/types.ts": {
            "lines": 449,
            "tokens": 3117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts": {
            "lines": 731,
            "tokens": 5547,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 584,
            "percentage": 6.02,
            "percentageTokens": 10.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/index.ts": {
            "lines": 13,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/constants/categories.ts": {
            "lines": 93,
            "tokens": 867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/WorkflowApiService.ts": {
            "lines": 488,
            "tokens": 3072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/CredentialApiService.ts": {
            "lines": 635,
            "tokens": 4064,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts": {
            "lines": 547,
            "tokens": 3544,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 440,
            "percentage": 9.87,
            "percentageTokens": 12.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/ApiClient.ts": {
            "lines": 428,
            "tokens": 3205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/services/intelligentAutoConnect.ts": {
            "lines": 327,
            "tokens": 2693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/types.ts": {
            "lines": 375,
            "tokens": 2754,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/nodeUiRegistry.ts": {
            "lines": 252,
            "tokens": 1480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ComponentFactory.ts": {
            "lines": 376,
            "tokens": 2953,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts": {
            "lines": 281,
            "tokens": 2322,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 192,
            "percentage": 7.83,
            "percentageTokens": 8.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useScrollAnimations.ts": {
            "lines": 258,
            "tokens": 2144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useGmailCredential.ts": {
            "lines": 58,
            "tokens": 409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useCredentialForm.ts": {
            "lines": 191,
            "tokens": 1516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useContainerInteractions.ts": {
            "lines": 401,
            "tokens": 3121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/PerformanceMonitor.ts": {
            "lines": 414,
            "tokens": 3472,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/ErrorTracker.ts": {
            "lines": 547,
            "tokens": 4728,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/logging/Logger.ts": {
            "lines": 350,
            "tokens": 2846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts": {
            "lines": 600,
            "tokens": 4874,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 194,
            "percentage": 5.33,
            "percentageTokens": 3.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/routes/debug/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/operation/operation-middleware.ts": {
            "lines": 74,
            "tokens": 519,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/execution/execution-methods.ts": {
            "lines": 7,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/comment/comment-middleware.ts": {
            "lines": 75,
            "tokens": 471,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/credentials/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/workers/worker-manager.ts": {
            "lines": 10,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/workflow-types.ts": {
            "lines": 85,
            "tokens": 788,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/node-context-types.ts": {
            "lines": 77,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/types/event-trigger-types.ts": {
            "lines": 101,
            "tokens": 698,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/queue/queue-manager.ts": {
            "lines": 16,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/execution/execution-engine.ts": {
            "lines": 16,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow-engine/src/events/event-bus.ts": {
            "lines": 9,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/WorkflowEngine.ts": {
            "lines": 390,
            "tokens": 2924,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/execution/QueueManager.ts": {
            "lines": 354,
            "tokens": 2765,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/ValidationMiddleware.ts": {
            "lines": 314,
            "tokens": 2194,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 94,
            "percentage": 3.82,
            "percentageTokens": 4.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/styles.ts": {
            "lines": 222,
            "tokens": 1940,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/types/component.ts": {
            "lines": 282,
            "tokens": 925,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/usePrevious.ts": {
            "lines": 13,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useEventListener.ts": {
            "lines": 34,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useDisclosure.ts": {
            "lines": 39,
            "tokens": 293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useDebounce.ts": {
            "lines": 19,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/hooks/useAsync.ts": {
            "lines": 65,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/utils/logger.ts": {
            "lines": 4,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/errors/application-error.ts": {
            "lines": 8,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/shared/src/constants/app-constants.ts": {
            "lines": 4,
            "tokens": 32,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/validation.ts": {
            "lines": 36,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/queue.ts": {
            "lines": 127,
            "tokens": 1068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/worker.ts": {
            "lines": 42,
            "tokens": 277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/execution-service/src/queue.ts": {
            "lines": 35,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/audit-service/src/compliance.ts": {
            "lines": 144,
            "tokens": 1335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/collectors.ts": {
            "lines": 145,
            "tokens": 1058,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter/distributed-limiter.ts": {
            "lines": 8,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts": {
            "lines": 696,
            "tokens": 5135,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 41,
            "duplicatedTokens": 286,
            "percentage": 5.89,
            "percentageTokens": 5.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers.middleware.ts": {
            "lines": 366,
            "tokens": 2797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/rate-limit.middleware.ts": {
            "lines": 349,
            "tokens": 2531,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts": {
            "lines": 665,
            "tokens": 5512,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 192,
            "percentage": 1.5,
            "percentageTokens": 3.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts": {
            "lines": 415,
            "tokens": 3147,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 422,
            "percentage": 12.05,
            "percentageTokens": 13.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/jwt-session/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/security-headers.example.ts": {
            "lines": 190,
            "tokens": 1341,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/rate-limit.example.ts": {
            "lines": 90,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/examples/auth.example.ts": {
            "lines": 187,
            "tokens": 1352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/audit-logger/index.ts": {
            "lines": 7,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts": {
            "lines": 556,
            "tokens": 4981,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 62,
            "duplicatedTokens": 824,
            "percentage": 11.15,
            "percentageTokens": 16.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/resource-manager/src/index.ts": {
            "lines": 497,
            "tokens": 4227,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/execution-engine/src/workflow-execution-engine.ts": {
            "lines": 615,
            "tokens": 4846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/platform/event-bus/src/handlers.ts": {
            "lines": 24,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts": {
            "lines": 434,
            "tokens": 3258,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 115,
            "percentage": 2.3,
            "percentageTokens": 3.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/index/utility-exports.ts": {
            "lines": 64,
            "tokens": 410,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/index/integration-exports.ts": {
            "lines": 100,
            "tokens": 585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/core/event-bus.ts": {
            "lines": 458,
            "tokens": 3351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts": {
            "lines": 442,
            "tokens": 3164,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 115,
            "percentage": 2.26,
            "percentageTokens": 3.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/variants.ts": {
            "lines": 102,
            "tokens": 604,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/utils/cn.ts": {
            "lines": 30,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/tokens/spacing.ts": {
            "lines": 59,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/tokens/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/hooks/use-state.ts": {
            "lines": 2,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/design-system/src/hooks/use-rbac-store.ts": {
            "lines": 2,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/vector-types.ts": {
            "lines": 12,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/query-types.ts": {
            "lines": 99,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/types/entity-schemas.ts": {
            "lines": 104,
            "tokens": 1224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/validation/validator.ts": {
            "lines": 117,
            "tokens": 1015,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/validation.ts": {
            "lines": 214,
            "tokens": 1641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/logger.ts": {
            "lines": 121,
            "tokens": 1004,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/utils/errors.ts": {
            "lines": 58,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/types/repository.types.ts": {
            "lines": 94,
            "tokens": 584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/service/base-service.interface.ts": {
            "lines": 90,
            "tokens": 488,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/cached-repository.ts": {
            "lines": 176,
            "tokens": 1433,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/base-repository.ts": {
            "lines": 135,
            "tokens": 1100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/base-repository.interface.ts": {
            "lines": 78,
            "tokens": 395,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/middleware/MiddlewareFactory.ts": {
            "lines": 126,
            "tokens": 702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/middleware/BaseMiddleware.ts": {
            "lines": 159,
            "tokens": 997,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/interfaces/index.ts": {
            "lines": 48,
            "tokens": 632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/events/event-bus.ts": {
            "lines": 69,
            "tokens": 522,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts": {
            "lines": 139,
            "tokens": 1166,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 206,
            "percentage": 15.83,
            "percentageTokens": 17.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts": {
            "lines": 136,
            "tokens": 1286,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 240,
            "percentage": 16.18,
            "percentageTokens": 18.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts": {
            "lines": 174,
            "tokens": 1312,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 128,
            "duplicatedTokens": 1080,
            "percentage": 73.56,
            "percentageTokens": 82.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/cache/cache.interface.ts": {
            "lines": 28,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/base/BaseService.ts": {
            "lines": 156,
            "tokens": 1272,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/base/BaseMiddleware.ts": {
            "lines": 122,
            "tokens": 778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/constants/src/index/node-providers.ts": {
            "lines": 56,
            "tokens": 330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/workflow.ts": {
            "lines": 17,
            "tokens": 136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/start.ts": {
            "lines": 9,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/node.ts": {
            "lines": 457,
            "tokens": 2131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/dev.ts": {
            "lines": 26,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/deploy.ts": {
            "lines": 6,
            "tokens": 68,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/create.ts": {
            "lines": 20,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/build.ts": {
            "lines": 16,
            "tokens": 158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/commands/auth.ts": {
            "lines": 5,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/two-factor.ts": {
            "lines": 147,
            "tokens": 1046,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/password-validator.ts": {
            "lines": 240,
            "tokens": 2111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/utils/audit-logger.ts": {
            "lines": 108,
            "tokens": 936,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/types/rbac-security-types.ts": {
            "lines": 99,
            "tokens": 817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/types/auth-provider-types.ts": {
            "lines": 50,
            "tokens": 308,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/providers/saml-provider.ts": {
            "lines": 48,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/providers/ldap-provider.ts": {
            "lines": 53,
            "tokens": 371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/session-middleware.ts": {
            "lines": 142,
            "tokens": 1256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts": {
            "lines": 80,
            "tokens": 778,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 256,
            "percentage": 22.5,
            "percentageTokens": 32.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/jwt-middleware.ts": {
            "lines": 67,
            "tokens": 612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/workflow.types/workflow-schemas.ts": {
            "lines": 5,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/auth.types/organization-types.ts": {
            "lines": 99,
            "tokens": 673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/auth.types/auth-requests.ts": {
            "lines": 94,
            "tokens": 913,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-gateway/src/index/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/tags.ts": {
            "lines": 46,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/spec-generator.ts": {
            "lines": 47,
            "tokens": 411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/security.ts": {
            "lines": 28,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/schemas.ts": {
            "lines": 110,
            "tokens": 693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/responses.ts": {
            "lines": 85,
            "tokens": 469,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/parameters.ts": {
            "lines": 85,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/swagger/info.ts": {
            "lines": 76,
            "tokens": 175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/workflows.ts": {
            "lines": 428,
            "tokens": 885,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/users.ts": {
            "lines": 76,
            "tokens": 306,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/nodes.ts": {
            "lines": 77,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/index.ts": {
            "lines": 52,
            "tokens": 561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/auth.ts": {
            "lines": 73,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/analytics.ts": {
            "lines": 46,
            "tokens": 236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/routes/ai.ts": {
            "lines": 47,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/validation.ts": {
            "lines": 90,
            "tokens": 948,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 90,
            "percentage": 10,
            "percentageTokens": 9.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/logging.ts": {
            "lines": 47,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/error-handler.ts": {
            "lines": 39,
            "tokens": 334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/auth.ts": {
            "lines": 50,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/vector-store/vector-store.ts": {
            "lines": 326,
            "tokens": 2353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/utils/tokenizer.ts": {
            "lines": 125,
            "tokens": 979,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/utils/text-splitter.ts": {
            "lines": 121,
            "tokens": 1041,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-embedding-node.ts": {
            "lines": 26,
            "tokens": 244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-completion-node.ts": {
            "lines": 19,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-classification-node.ts": {
            "lines": 37,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/nodes/ai-chat-node.ts": {
            "lines": 27,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/base/ai-provider.ts": {
            "lines": 103,
            "tokens": 684,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utils/auth-forms.ts": {
            "lines": 21,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/string-utils.ts": {
            "lines": 56,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/logging-utils.ts": {
            "lines": 47,
            "tokens": 397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/json-utils.ts": {
            "lines": 33,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/index.ts": {
            "lines": 9,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/date-utils.ts": {
            "lines": 47,
            "tokens": 406,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/conditional-utils.ts": {
            "lines": 20,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/utilities/array-utils.ts": {
            "lines": 48,
            "tokens": 583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/optimization-utils/file-consolidator.ts": {
            "lines": 47,
            "tokens": 338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/optimization-utils/deduplication-helper.ts": {
            "lines": 41,
            "tokens": 355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/config/shared-config.ts": {
            "lines": 65,
            "tokens": 535,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/interfaces.ts": {
            "lines": 26,
            "tokens": 285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/index.ts": {
            "lines": 8,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/enhanced-base-controller.ts": {
            "lines": 142,
            "tokens": 1526,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-use-cases.ts": {
            "lines": 61,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-service.ts": {
            "lines": 88,
            "tokens": 843,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-repository.ts": {
            "lines": 52,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/base/base-controller.ts": {
            "lines": 78,
            "tokens": 768,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/core/src/schemas/index.ts": {
            "lines": 75,
            "tokens": 782,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 71,
            "percentage": 8,
            "percentageTokens": 9.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/validation.ts": {
            "lines": 75,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/response.ts": {
            "lines": 159,
            "tokens": 1067,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/logger.ts": {
            "lines": 67,
            "tokens": 529,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/utils/asyncHandler.ts": {
            "lines": 93,
            "tokens": 708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/workflow.ts": {
            "lines": 61,
            "tokens": 391,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 99,
            "percentage": 18.03,
            "percentageTokens": 25.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/express.ts": {
            "lines": 41,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/types/common.ts": {
            "lines": 74,
            "tokens": 477,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/PermissionService.ts": {
            "lines": 318,
            "tokens": 1859,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/OperationalTransformService.ts": {
            "lines": 484,
            "tokens": 3944,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts": {
            "lines": 545,
            "tokens": 4079,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 56,
            "duplicatedTokens": 598,
            "percentage": 10.28,
            "percentageTokens": 14.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/services/CollaborationService.ts": {
            "lines": 657,
            "tokens": 4899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Workflow.ts": {
            "lines": 231,
            "tokens": 2058,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/User.ts": {
            "lines": 268,
            "tokens": 2154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Organization.ts": {
            "lines": 233,
            "tokens": 1721,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Operation.ts": {
            "lines": 288,
            "tokens": 2115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Execution.ts": {
            "lines": 207,
            "tokens": 1975,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/Comment.ts": {
            "lines": 342,
            "tokens": 2409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/models/CollaborationSession.ts": {
            "lines": 257,
            "tokens": 1979,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/errorHandlers.ts": {
            "lines": 107,
            "tokens": 1051,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts": {
            "lines": 485,
            "tokens": 3599,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 344,
            "percentage": 10.31,
            "percentageTokens": 9.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts": {
            "lines": 380,
            "tokens": 2862,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 216,
            "percentage": 6.32,
            "percentageTokens": 7.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IService.ts": {
            "lines": 50,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IRepository.ts": {
            "lines": 18,
            "tokens": 221,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/interfaces/IController.ts": {
            "lines": 31,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/domains/index.ts": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/nodeTypes.ts": {
            "lines": 47,
            "tokens": 262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/index.ts": {
            "lines": 7,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/httpStatus.ts": {
            "lines": 41,
            "tokens": 299,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/execution.ts": {
            "lines": 32,
            "tokens": 202,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/constants/database.ts": {
            "lines": 40,
            "tokens": 360,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/index.ts": {
            "lines": 5,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/config/database.ts": {
            "lines": 54,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/base/BaseRepository.ts": {
            "lines": 90,
            "tokens": 680,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/backend/src/base/BaseController.ts": {
            "lines": 87,
            "tokens": 754,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/workflow/src/index.ts": {
            "lines": 24,
            "tokens": 147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/rate-limiter.ts": {
            "lines": 508,
            "tokens": 3591,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/encryption.service.ts": {
            "lines": 321,
            "tokens": 2603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/audit-logger.ts": {
            "lines": 750,
            "tokens": 5958,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/metrics.ts": {
            "lines": 23,
            "tokens": 196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/index.ts": {
            "lines": 28,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/monitoring/src/alerts.ts": {
            "lines": 37,
            "tokens": 293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/gateway/src/middleware.ts": {
            "lines": 30,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/gateway/src/index.ts": {
            "lines": 43,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/rbac.ts": {
            "lines": 32,
            "tokens": 229,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/index.ts": {
            "lines": 36,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/enterprise/src/audit.ts": {
            "lines": 33,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts": {
            "lines": 194,
            "tokens": 1739,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 416,
            "percentage": 27.84,
            "percentageTokens": 23.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/index.ts": {
            "lines": 349,
            "tokens": 2798,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/generators.ts": {
            "lines": 197,
            "tokens": 911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/cli.ts": {
            "lines": 122,
            "tokens": 1144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/database/src/index.ts": {
            "lines": 11,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/index.ts": {
            "lines": 53,
            "tokens": 505,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/index.ts": {
            "lines": 9,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/cli/src/cli.ts": {
            "lines": 81,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/backend-common/src/index.ts": {
            "lines": 244,
            "tokens": 2203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api-types/src/workflow.types.ts": {
            "lines": 80,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/server.ts": {
            "lines": 198,
            "tokens": 1482,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/shared/src/index.ts": {
            "lines": 16,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/core/src/index.ts": {
            "lines": 8,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 69513,
          "tokens": 525931,
          "sources": 504,
          "clones": 86,
          "duplicatedLines": 1168,
          "duplicatedTokens": 10362,
          "percentage": 1.68,
          "percentageTokens": 1.97,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx": {
            "lines": 206,
            "tokens": 1352,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1352,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx": {
            "lines": 215,
            "tokens": 1718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 215,
            "duplicatedTokens": 1718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx": {
            "lines": 253,
            "tokens": 2135,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx": {
            "lines": 88,
            "tokens": 701,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar.tsx": {
            "lines": 42,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeMenu.tsx": {
            "lines": 70,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx": {
            "lines": 368,
            "tokens": 2002,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 138,
            "duplicatedTokens": 802,
            "percentage": 37.5,
            "percentageTokens": 40.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx": {
            "lines": 186,
            "tokens": 1347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx": {
            "lines": 561,
            "tokens": 3879,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx": {
            "lines": 186,
            "tokens": 1321,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx": {
            "lines": 674,
            "tokens": 5282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 674,
            "duplicatedTokens": 5282,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx": {
            "lines": 467,
            "tokens": 3597,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 467,
            "duplicatedTokens": 3597,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx": {
            "lines": 192,
            "tokens": 1494,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1494,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx": {
            "lines": 69,
            "tokens": 571,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 571,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx": {
            "lines": 246,
            "tokens": 2027,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 246,
            "duplicatedTokens": 2027,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx": {
            "lines": 401,
            "tokens": 3279,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 401,
            "duplicatedTokens": 3279,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx": {
            "lines": 213,
            "tokens": 1957,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 267,
            "duplicatedTokens": 2372,
            "percentage": 125.35,
            "percentageTokens": 121.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx": {
            "lines": 124,
            "tokens": 933,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 124,
            "duplicatedTokens": 933,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx": {
            "lines": 584,
            "tokens": 4371,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 612,
            "duplicatedTokens": 4541,
            "percentage": 104.79,
            "percentageTokens": 103.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx": {
            "lines": 551,
            "tokens": 4638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 551,
            "duplicatedTokens": 4638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx": {
            "lines": 457,
            "tokens": 4042,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 457,
            "duplicatedTokens": 4042,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx": {
            "lines": 92,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 92,
            "duplicatedTokens": 625,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx": {
            "lines": 433,
            "tokens": 3173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx": {
            "lines": 210,
            "tokens": 1722,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1722,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx": {
            "lines": 441,
            "tokens": 3826,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 597,
            "duplicatedTokens": 5224,
            "percentage": 135.37,
            "percentageTokens": 136.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx": {
            "lines": 388,
            "tokens": 3119,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 388,
            "duplicatedTokens": 3119,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx": {
            "lines": 265,
            "tokens": 1879,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 292,
            "duplicatedTokens": 2091,
            "percentage": 110.19,
            "percentageTokens": 111.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx": {
            "lines": 498,
            "tokens": 3855,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 525,
            "duplicatedTokens": 4067,
            "percentage": 105.42,
            "percentageTokens": 105.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx": {
            "lines": 614,
            "tokens": 4647,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 634,
            "duplicatedTokens": 4877,
            "percentage": 103.26,
            "percentageTokens": 104.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx": {
            "lines": 332,
            "tokens": 2463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 332,
            "duplicatedTokens": 2463,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx": {
            "lines": 381,
            "tokens": 3316,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 381,
            "duplicatedTokens": 3316,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx": {
            "lines": 164,
            "tokens": 1329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 164,
            "duplicatedTokens": 1329,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx": {
            "lines": 206,
            "tokens": 1352,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1352,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/CustomNodeToolbar.tsx": {
            "lines": 37,
            "tokens": 223,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx": {
            "lines": 215,
            "tokens": 1718,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 215,
            "duplicatedTokens": 1718,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx": {
            "lines": 504,
            "tokens": 4037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 504,
            "duplicatedTokens": 4037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx": {
            "lines": 706,
            "tokens": 5978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 706,
            "duplicatedTokens": 5978,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx": {
            "lines": 385,
            "tokens": 2704,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 385,
            "duplicatedTokens": 2704,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx": {
            "lines": 290,
            "tokens": 2563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 290,
            "duplicatedTokens": 2563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx": {
            "lines": 69,
            "tokens": 491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx": {
            "lines": 172,
            "tokens": 1268,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 172,
            "duplicatedTokens": 1268,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx": {
            "lines": 170,
            "tokens": 1174,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1174,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx": {
            "lines": 235,
            "tokens": 1943,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 235,
            "duplicatedTokens": 1943,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx": {
            "lines": 569,
            "tokens": 4345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 569,
            "duplicatedTokens": 4345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/TestCredentialButton.tsx": {
            "lines": 24,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/CredentialNameField.tsx": {
            "lines": 3,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/index.tsx": {
            "lines": 15,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/GmailSetupSteps.tsx": {
            "lines": 2,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/index.tsx": {
            "lines": 22,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/AIProviderFields.tsx": {
            "lines": 13,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx": {
            "lines": 375,
            "tokens": 3019,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 375,
            "duplicatedTokens": 3019,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx": {
            "lines": 527,
            "tokens": 4309,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 527,
            "duplicatedTokens": 4309,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2422,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 365,
            "duplicatedTokens": 2644,
            "percentage": 107.35,
            "percentageTokens": 109.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 59,
            "duplicatedTokens": 519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/ErrorBoundary/GlobalErrorBoundary.tsx": {
            "lines": 39,
            "tokens": 337,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx": {
            "lines": 107,
            "tokens": 959,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx": {
            "lines": 104,
            "tokens": 982,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx": {
            "lines": 286,
            "tokens": 2056,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx": {
            "lines": 126,
            "tokens": 940,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 54,
            "duplicatedTokens": 415,
            "percentage": 42.86,
            "percentageTokens": 44.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/StatusBadge.tsx": {
            "lines": 5,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx": {
            "lines": 3,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx": {
            "lines": 64,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx": {
            "lines": 274,
            "tokens": 1925,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 114,
            "duplicatedTokens": 780,
            "percentage": 41.61,
            "percentageTokens": 40.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx": {
            "lines": 118,
            "tokens": 723,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 278,
            "duplicatedTokens": 1701,
            "percentage": 235.59,
            "percentageTokens": 235.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 386,
            "tokens": 3090,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx": {
            "lines": 744,
            "tokens": 6211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx": {
            "lines": 340,
            "tokens": 2425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 331,
            "duplicatedTokens": 2356,
            "percentage": 97.35,
            "percentageTokens": 97.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx": {
            "lines": 57,
            "tokens": 427,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx": {
            "lines": 34,
            "tokens": 278,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 301,
            "tokens": 2567,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx": {
            "lines": 59,
            "tokens": 519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 59,
            "duplicatedTokens": 519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx": {
            "lines": 71,
            "tokens": 529,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx": {
            "lines": 57,
            "tokens": 352,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 56,
            "duplicatedTokens": 279,
            "percentage": 98.25,
            "percentageTokens": 79.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx": {
            "lines": 236,
            "tokens": 1946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx": {
            "lines": 462,
            "tokens": 3418,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx": {
            "lines": 179,
            "tokens": 1260,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx": {
            "lines": 674,
            "tokens": 5282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 674,
            "duplicatedTokens": 5282,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx": {
            "lines": 467,
            "tokens": 3597,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 467,
            "duplicatedTokens": 3597,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx": {
            "lines": 192,
            "tokens": 1494,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1494,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx": {
            "lines": 69,
            "tokens": 571,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 571,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionStateOverlay.tsx": {
            "lines": 8,
            "tokens": 47,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx": {
            "lines": 246,
            "tokens": 2027,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 246,
            "duplicatedTokens": 2027,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx": {
            "lines": 401,
            "tokens": 3279,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 401,
            "duplicatedTokens": 3279,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx": {
            "lines": 213,
            "tokens": 1957,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 213,
            "duplicatedTokens": 1957,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx": {
            "lines": 124,
            "tokens": 933,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 124,
            "duplicatedTokens": 933,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx": {
            "lines": 584,
            "tokens": 4371,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 584,
            "duplicatedTokens": 4371,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx": {
            "lines": 551,
            "tokens": 4638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 551,
            "duplicatedTokens": 4638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx": {
            "lines": 457,
            "tokens": 4042,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 457,
            "duplicatedTokens": 4042,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx": {
            "lines": 92,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 92,
            "duplicatedTokens": 625,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx": {
            "lines": 109,
            "tokens": 770,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx": {
            "lines": 210,
            "tokens": 1722,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 210,
            "duplicatedTokens": 1722,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx": {
            "lines": 11,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx": {
            "lines": 388,
            "tokens": 3119,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 388,
            "duplicatedTokens": 3119,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx": {
            "lines": 441,
            "tokens": 3826,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 441,
            "duplicatedTokens": 3826,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx": {
            "lines": 265,
            "tokens": 1879,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 265,
            "duplicatedTokens": 1879,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx": {
            "lines": 498,
            "tokens": 3855,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 498,
            "duplicatedTokens": 3855,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx": {
            "lines": 614,
            "tokens": 4647,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 614,
            "duplicatedTokens": 4647,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx": {
            "lines": 381,
            "tokens": 3316,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 381,
            "duplicatedTokens": 3316,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx": {
            "lines": 164,
            "tokens": 1329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 164,
            "duplicatedTokens": 1329,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx": {
            "lines": 56,
            "tokens": 385,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx": {
            "lines": 332,
            "tokens": 2463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 332,
            "duplicatedTokens": 2463,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentOutputPanel.tsx": {
            "lines": 36,
            "tokens": 288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx": {
            "lines": 249,
            "tokens": 2561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx": {
            "lines": 504,
            "tokens": 4037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 504,
            "duplicatedTokens": 4037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx": {
            "lines": 706,
            "tokens": 5978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 706,
            "duplicatedTokens": 5978,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx": {
            "lines": 385,
            "tokens": 2704,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 385,
            "duplicatedTokens": 2704,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx": {
            "lines": 127,
            "tokens": 1023,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx": {
            "lines": 39,
            "tokens": 303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/SocialProof.tsx": {
            "lines": 94,
            "tokens": 794,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx": {
            "lines": 290,
            "tokens": 2563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 290,
            "duplicatedTokens": 2563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx": {
            "lines": 69,
            "tokens": 491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx": {
            "lines": 79,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx": {
            "lines": 172,
            "tokens": 1268,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 172,
            "duplicatedTokens": 1268,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Footer.tsx": {
            "lines": 20,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx": {
            "lines": 170,
            "tokens": 1174,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1174,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/EnterpriseFeatures.tsx": {
            "lines": 65,
            "tokens": 609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CompetitiveAdvantage.tsx": {
            "lines": 28,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx": {
            "lines": 106,
            "tokens": 844,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CallToAction.tsx": {
            "lines": 60,
            "tokens": 541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx": {
            "lines": 235,
            "tokens": 1943,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 235,
            "duplicatedTokens": 1943,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx": {
            "lines": 569,
            "tokens": 4345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 569,
            "duplicatedTokens": 4345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Auth/ProtectedRoute.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx": {
            "lines": 375,
            "tokens": 3019,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 375,
            "duplicatedTokens": 3019,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx": {
            "lines": 527,
            "tokens": 4309,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 527,
            "duplicatedTokens": 4309,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/overlay/dialog.tsx": {
            "lines": 34,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/field.tsx": {
            "lines": 42,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormLabel.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormInput.tsx": {
            "lines": 20,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormField.tsx": {
            "lines": 11,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/tab-container.tsx": {
            "lines": 24,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx": {
            "lines": 39,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/button.tsx": {
            "lines": 7,
            "tokens": 30,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/alert.tsx": {
            "lines": 9,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/VirtualizedList.tsx": {
            "lines": 58,
            "tokens": 466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/TestResultDisplay.tsx": {
            "lines": 0,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/PageLayout.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/JsonViewer.tsx": {
            "lines": 26,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/AuthForm.tsx": {
            "lines": 54,
            "tokens": 393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/WorkflowEditor.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx": {
            "lines": 39,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx": {
            "lines": 284,
            "tokens": 2232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx": {
            "lines": 287,
            "tokens": 2411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx": {
            "lines": 210,
            "tokens": 1807,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx": {
            "lines": 2,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx": {
            "lines": 206,
            "tokens": 1666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx": {
            "lines": 269,
            "tokens": 2214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx": {
            "lines": 2,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx": {
            "lines": 178,
            "tokens": 1314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx": {
            "lines": 95,
            "tokens": 750,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx": {
            "lines": 152,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx": {
            "lines": 115,
            "tokens": 1079,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx": {
            "lines": 258,
            "tokens": 2160,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx": {
            "lines": 234,
            "tokens": 1884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx": {
            "lines": 159,
            "tokens": 1388,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx": {
            "lines": 262,
            "tokens": 2152,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx": {
            "lines": 301,
            "tokens": 2172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx": {
            "lines": 255,
            "tokens": 2154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx": {
            "lines": 347,
            "tokens": 2718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx": {
            "lines": 162,
            "tokens": 978,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 121,
            "duplicatedTokens": 761,
            "percentage": 74.69,
            "percentageTokens": 77.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx": {
            "lines": 161,
            "tokens": 923,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 89,
            "duplicatedTokens": 541,
            "percentage": 55.28,
            "percentageTokens": 58.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/withHOC.tsx": {
            "lines": 100,
            "tokens": 976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/App.tsx": {
            "lines": 51,
            "tokens": 723,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/main.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 35871,
          "tokens": 282718,
          "sources": 164,
          "clones": 51,
          "duplicatedLines": 12774,
          "duplicatedTokens": 100850,
          "percentage": 35.61,
          "percentageTokens": 35.67,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "tsx": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx": {
            "lines": 348,
            "tokens": 2626,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 362,
            "duplicatedTokens": 2713,
            "percentage": 104.02,
            "percentageTokens": 103.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx": {
            "lines": 461,
            "tokens": 3686,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 461,
            "duplicatedTokens": 3654,
            "percentage": 100,
            "percentageTokens": 99.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode/ContainerNode.tsx": {
            "lines": 380,
            "tokens": 3040,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/index.tsx": {
            "lines": 341,
            "tokens": 2674,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar.tsx": {
            "lines": 75,
            "tokens": 422,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeMenu.tsx": {
            "lines": 123,
            "tokens": 806,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx": {
            "lines": 455,
            "tokens": 2509,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 126,
            "duplicatedTokens": 652,
            "percentage": 27.69,
            "percentageTokens": 25.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailTriggerNodeBody.tsx": {
            "lines": 358,
            "tokens": 2718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/GmailNode/GmailPropertiesPanel.tsx": {
            "lines": 729,
            "tokens": 5257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/nodes/DatabaseNode/DatabaseNodeBody.tsx": {
            "lines": 354,
            "tokens": 2722,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx": {
            "lines": 987,
            "tokens": 8185,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 994,
            "duplicatedTokens": 8272,
            "percentage": 100.71,
            "percentageTokens": 101.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx": {
            "lines": 725,
            "tokens": 5690,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 721,
            "duplicatedTokens": 5638,
            "percentage": 99.45,
            "percentageTokens": 99.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx": {
            "lines": 556,
            "tokens": 4676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 546,
            "duplicatedTokens": 4546,
            "percentage": 98.2,
            "percentageTokens": 97.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx": {
            "lines": 283,
            "tokens": 2360,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 299,
            "duplicatedTokens": 2537,
            "percentage": 105.65,
            "percentageTokens": 107.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx": {
            "lines": 398,
            "tokens": 3247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 394,
            "duplicatedTokens": 3195,
            "percentage": 98.99,
            "percentageTokens": 98.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx": {
            "lines": 496,
            "tokens": 3952,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 524,
            "duplicatedTokens": 4160,
            "percentage": 105.65,
            "percentageTokens": 105.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx": {
            "lines": 347,
            "tokens": 3357,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 393,
            "duplicatedTokens": 3681,
            "percentage": 113.26,
            "percentageTokens": 109.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx": {
            "lines": 255,
            "tokens": 1992,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 264,
            "duplicatedTokens": 2061,
            "percentage": 103.53,
            "percentageTokens": 103.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx": {
            "lines": 764,
            "tokens": 5749,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 799,
            "duplicatedTokens": 6034,
            "percentage": 104.58,
            "percentageTokens": 104.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx": {
            "lines": 800,
            "tokens": 6588,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 795,
            "duplicatedTokens": 6523,
            "percentage": 99.38,
            "percentageTokens": 99.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx": {
            "lines": 604,
            "tokens": 5285,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 601,
            "duplicatedTokens": 5246,
            "percentage": 99.5,
            "percentageTokens": 99.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx": {
            "lines": 307,
            "tokens": 2379,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 375,
            "duplicatedTokens": 2717,
            "percentage": 122.15,
            "percentageTokens": 114.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx": {
            "lines": 778,
            "tokens": 6027,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 115,
            "duplicatedTokens": 754,
            "percentage": 14.78,
            "percentageTokens": 12.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx": {
            "lines": 375,
            "tokens": 2850,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 382,
            "duplicatedTokens": 2909,
            "percentage": 101.87,
            "percentageTokens": 102.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx": {
            "lines": 564,
            "tokens": 4986,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 641,
            "duplicatedTokens": 5701,
            "percentage": 113.65,
            "percentageTokens": 114.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx": {
            "lines": 775,
            "tokens": 6595,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 771,
            "duplicatedTokens": 6543,
            "percentage": 99.48,
            "percentageTokens": 99.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx": {
            "lines": 441,
            "tokens": 3403,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 512,
            "duplicatedTokens": 3980,
            "percentage": 116.1,
            "percentageTokens": 116.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx": {
            "lines": 668,
            "tokens": 5124,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 714,
            "duplicatedTokens": 5504,
            "percentage": 106.89,
            "percentageTokens": 107.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx": {
            "lines": 752,
            "tokens": 5436,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 749,
            "duplicatedTokens": 5397,
            "percentage": 99.6,
            "percentageTokens": 99.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx": {
            "lines": 580,
            "tokens": 4401,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 577,
            "duplicatedTokens": 4362,
            "percentage": 99.48,
            "percentageTokens": 99.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx": {
            "lines": 496,
            "tokens": 4246,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 486,
            "duplicatedTokens": 4116,
            "percentage": 97.98,
            "percentageTokens": 96.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx": {
            "lines": 526,
            "tokens": 4652,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 523,
            "duplicatedTokens": 4590,
            "percentage": 99.43,
            "percentageTokens": 98.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx": {
            "lines": 341,
            "tokens": 2535,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 343,
            "duplicatedTokens": 2538,
            "percentage": 100.59,
            "percentageTokens": 100.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/CustomNodeToolbar.tsx": {
            "lines": 96,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx": {
            "lines": 452,
            "tokens": 3569,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 452,
            "duplicatedTokens": 3569,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx": {
            "lines": 997,
            "tokens": 7737,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 994,
            "duplicatedTokens": 7698,
            "percentage": 99.7,
            "percentageTokens": 99.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx": {
            "lines": 910,
            "tokens": 7693,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 907,
            "duplicatedTokens": 7654,
            "percentage": 99.67,
            "percentageTokens": 99.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx": {
            "lines": 567,
            "tokens": 4129,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 565,
            "duplicatedTokens": 4080,
            "percentage": 99.65,
            "percentageTokens": 98.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx": {
            "lines": 511,
            "tokens": 3952,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 509,
            "duplicatedTokens": 3926,
            "percentage": 99.61,
            "percentageTokens": 99.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx": {
            "lines": 284,
            "tokens": 2050,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 283,
            "duplicatedTokens": 2037,
            "percentage": 99.65,
            "percentageTokens": 99.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx": {
            "lines": 376,
            "tokens": 2674,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 369,
            "duplicatedTokens": 2583,
            "percentage": 98.14,
            "percentageTokens": 96.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx": {
            "lines": 460,
            "tokens": 3542,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 459,
            "duplicatedTokens": 3529,
            "percentage": 99.78,
            "percentageTokens": 99.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx": {
            "lines": 394,
            "tokens": 3409,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 391,
            "duplicatedTokens": 3370,
            "percentage": 99.24,
            "percentageTokens": 98.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx": {
            "lines": 923,
            "tokens": 7093,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 922,
            "duplicatedTokens": 7057,
            "percentage": 99.89,
            "percentageTokens": 99.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/TestCredentialButton.tsx": {
            "lines": 66,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/shared/CredentialNameField.tsx": {
            "lines": 41,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/index.tsx": {
            "lines": 70,
            "tokens": 357,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/GmailCredentialForm/GmailSetupSteps.tsx": {
            "lines": 24,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/index.tsx": {
            "lines": 95,
            "tokens": 458,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Credentials/AIProviderCredentialForm/AIProviderFields.tsx": {
            "lines": 54,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx": {
            "lines": 704,
            "tokens": 6019,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 704,
            "duplicatedTokens": 5996,
            "percentage": 100,
            "percentageTokens": 99.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx": {
            "lines": 760,
            "tokens": 6211,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 760,
            "duplicatedTokens": 6188,
            "percentage": 100,
            "percentageTokens": 99.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx": {
            "lines": 453,
            "tokens": 3350,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 453,
            "duplicatedTokens": 3338,
            "percentage": 100,
            "percentageTokens": 99.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx": {
            "lines": 361,
            "tokens": 2817,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 329,
            "duplicatedTokens": 2527,
            "percentage": 91.14,
            "percentageTokens": 89.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/ErrorBoundary/GlobalErrorBoundary.tsx": {
            "lines": 195,
            "tokens": 1506,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx": {
            "lines": 328,
            "tokens": 3106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 103,
            "percentage": 1.83,
            "percentageTokens": 3.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx": {
            "lines": 243,
            "tokens": 2135,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 103,
            "percentage": 2.47,
            "percentageTokens": 4.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/JsonView.tsx": {
            "lines": 437,
            "tokens": 2719,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx": {
            "lines": 273,
            "tokens": 2400,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 268,
            "percentage": 13.92,
            "percentageTokens": 11.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/StatusBadge.tsx": {
            "lines": 94,
            "tokens": 587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeLabel.tsx": {
            "lines": 45,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx": {
            "lines": 52,
            "tokens": 414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 83,
            "percentage": 17.31,
            "percentageTokens": 20.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx": {
            "lines": 103,
            "tokens": 647,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 28,
            "duplicatedTokens": 232,
            "percentage": 27.18,
            "percentageTokens": 35.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx": {
            "lines": 544,
            "tokens": 4034,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 162,
            "percentage": 3.68,
            "percentageTokens": 4.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx": {
            "lines": 202,
            "tokens": 1331,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 180,
            "duplicatedTokens": 1182,
            "percentage": 89.11,
            "percentageTokens": 88.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 474,
            "tokens": 3758,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 89,
            "percentage": 1.48,
            "percentageTokens": 2.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx": {
            "lines": 881,
            "tokens": 7349,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 200,
            "duplicatedTokens": 1566,
            "percentage": 22.7,
            "percentageTokens": 21.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx": {
            "lines": 455,
            "tokens": 3356,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 453,
            "duplicatedTokens": 3338,
            "percentage": 99.56,
            "percentageTokens": 99.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeHandle.tsx": {
            "lines": 282,
            "tokens": 2068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/NodeBadge.tsx": {
            "lines": 203,
            "tokens": 1736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 457,
            "tokens": 3921,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 89,
            "percentage": 1.53,
            "percentageTokens": 2.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx": {
            "lines": 366,
            "tokens": 2901,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 329,
            "duplicatedTokens": 2527,
            "percentage": 89.89,
            "percentageTokens": 87.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx": {
            "lines": 506,
            "tokens": 4045,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 32,
            "duplicatedTokens": 324,
            "percentage": 6.32,
            "percentageTokens": 8.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx": {
            "lines": 116,
            "tokens": 838,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 81,
            "duplicatedTokens": 451,
            "percentage": 69.83,
            "percentageTokens": 53.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx": {
            "lines": 400,
            "tokens": 3499,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 67,
            "duplicatedTokens": 722,
            "percentage": 16.75,
            "percentageTokens": 20.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/WorkflowTemplatesPanel.tsx": {
            "lines": 679,
            "tokens": 5168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx": {
            "lines": 307,
            "tokens": 2080,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 236,
            "percentage": 9.12,
            "percentageTokens": 11.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx": {
            "lines": 984,
            "tokens": 8146,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 984,
            "duplicatedTokens": 8146,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx": {
            "lines": 721,
            "tokens": 5638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 721,
            "duplicatedTokens": 5638,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx": {
            "lines": 546,
            "tokens": 4546,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 546,
            "duplicatedTokens": 4546,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx": {
            "lines": 282,
            "tokens": 2347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 282,
            "duplicatedTokens": 2347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionStateOverlay.tsx": {
            "lines": 128,
            "tokens": 914,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx": {
            "lines": 394,
            "tokens": 3195,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 394,
            "duplicatedTokens": 3195,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx": {
            "lines": 492,
            "tokens": 3900,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 492,
            "duplicatedTokens": 3900,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx": {
            "lines": 345,
            "tokens": 3331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 345,
            "duplicatedTokens": 3331,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx": {
            "lines": 254,
            "tokens": 1979,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 254,
            "duplicatedTokens": 1979,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx": {
            "lines": 759,
            "tokens": 5684,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 759,
            "duplicatedTokens": 5684,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx": {
            "lines": 795,
            "tokens": 6523,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 795,
            "duplicatedTokens": 6523,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx": {
            "lines": 601,
            "tokens": 5246,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 601,
            "duplicatedTokens": 5246,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx": {
            "lines": 298,
            "tokens": 2262,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 295,
            "duplicatedTokens": 2189,
            "percentage": 98.99,
            "percentageTokens": 96.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx": {
            "lines": 215,
            "tokens": 1432,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 107,
            "percentage": 9.3,
            "percentageTokens": 7.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx": {
            "lines": 373,
            "tokens": 2824,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 373,
            "duplicatedTokens": 2824,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx": {
            "lines": 174,
            "tokens": 1243,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 80,
            "duplicatedTokens": 528,
            "percentage": 45.98,
            "percentageTokens": 42.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx": {
            "lines": 771,
            "tokens": 6543,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 771,
            "duplicatedTokens": 6543,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx": {
            "lines": 562,
            "tokens": 4960,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 560,
            "duplicatedTokens": 4931,
            "percentage": 99.64,
            "percentageTokens": 99.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx": {
            "lines": 434,
            "tokens": 3312,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 434,
            "duplicatedTokens": 3312,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx": {
            "lines": 664,
            "tokens": 5072,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 664,
            "duplicatedTokens": 5072,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx": {
            "lines": 749,
            "tokens": 5397,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 749,
            "duplicatedTokens": 5397,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx": {
            "lines": 486,
            "tokens": 4116,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 486,
            "duplicatedTokens": 4116,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx": {
            "lines": 521,
            "tokens": 4587,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 523,
            "duplicatedTokens": 4590,
            "percentage": 100.38,
            "percentageTokens": 100.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx": {
            "lines": 160,
            "tokens": 1015,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 48,
            "duplicatedTokens": 318,
            "percentage": 30,
            "percentageTokens": 31.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx": {
            "lines": 577,
            "tokens": 4362,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 577,
            "duplicatedTokens": 4362,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentOutputPanel.tsx": {
            "lines": 260,
            "tokens": 2342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx": {
            "lines": 371,
            "tokens": 3693,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 63,
            "duplicatedTokens": 562,
            "percentage": 16.98,
            "percentageTokens": 15.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx": {
            "lines": 994,
            "tokens": 7698,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 994,
            "duplicatedTokens": 7698,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx": {
            "lines": 907,
            "tokens": 7654,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 907,
            "duplicatedTokens": 7654,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx": {
            "lines": 563,
            "tokens": 4077,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 565,
            "duplicatedTokens": 4080,
            "percentage": 100.36,
            "percentageTokens": 100.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx": {
            "lines": 191,
            "tokens": 1598,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 179,
            "percentage": 10.99,
            "percentageTokens": 11.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx": {
            "lines": 32,
            "tokens": 265,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 68,
            "percentage": 25,
            "percentageTokens": 25.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx": {
            "lines": 113,
            "tokens": 906,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 33,
            "duplicatedTokens": 279,
            "percentage": 29.2,
            "percentageTokens": 30.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/SocialProof.tsx": {
            "lines": 238,
            "tokens": 1882,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx": {
            "lines": 509,
            "tokens": 3926,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 509,
            "duplicatedTokens": 3926,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx": {
            "lines": 283,
            "tokens": 2037,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 283,
            "duplicatedTokens": 2037,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx": {
            "lines": 161,
            "tokens": 1290,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 68,
            "percentage": 4.97,
            "percentageTokens": 5.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx": {
            "lines": 369,
            "tokens": 2583,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 369,
            "duplicatedTokens": 2583,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Footer.tsx": {
            "lines": 245,
            "tokens": 2007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx": {
            "lines": 459,
            "tokens": 3529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 459,
            "duplicatedTokens": 3529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/EnterpriseFeatures.tsx": {
            "lines": 219,
            "tokens": 1818,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CompetitiveAdvantage.tsx": {
            "lines": 144,
            "tokens": 965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx": {
            "lines": 510,
            "tokens": 3699,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 124,
            "percentage": 1.96,
            "percentageTokens": 3.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/CallToAction.tsx": {
            "lines": 136,
            "tokens": 1075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx": {
            "lines": 391,
            "tokens": 3370,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 391,
            "duplicatedTokens": 3370,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx": {
            "lines": 920,
            "tokens": 7054,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 922,
            "duplicatedTokens": 7057,
            "percentage": 100.22,
            "percentageTokens": 100.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Auth/ProtectedRoute.tsx": {
            "lines": 38,
            "tokens": 330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx": {
            "lines": 702,
            "tokens": 5993,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 704,
            "duplicatedTokens": 5996,
            "percentage": 100.28,
            "percentageTokens": 100.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx": {
            "lines": 758,
            "tokens": 6185,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 760,
            "duplicatedTokens": 6188,
            "percentage": 100.26,
            "percentageTokens": 100.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/overlay/dialog.tsx": {
            "lines": 181,
            "tokens": 943,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/field.tsx": {
            "lines": 135,
            "tokens": 767,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormLabel.tsx": {
            "lines": 43,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormInput.tsx": {
            "lines": 56,
            "tokens": 289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/form/FormField.tsx": {
            "lines": 41,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/tab-container.tsx": {
            "lines": 91,
            "tokens": 434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx": {
            "lines": 112,
            "tokens": 555,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 89,
            "percentage": 11.61,
            "percentageTokens": 16.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/button.tsx": {
            "lines": 86,
            "tokens": 423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/alert.tsx": {
            "lines": 141,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/VirtualizedList.tsx": {
            "lines": 229,
            "tokens": 1514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/TestResultDisplay.tsx": {
            "lines": 33,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/PageLayout.tsx": {
            "lines": 30,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/JsonViewer.tsx": {
            "lines": 103,
            "tokens": 831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/AuthForm.tsx": {
            "lines": 97,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/WorkflowEditor.tsx": {
            "lines": 63,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx": {
            "lines": 524,
            "tokens": 5320,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 108,
            "duplicatedTokens": 824,
            "percentage": 20.61,
            "percentageTokens": 15.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Settings.tsx": {
            "lines": 434,
            "tokens": 3445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx": {
            "lines": 664,
            "tokens": 5252,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 454,
            "percentage": 8.73,
            "percentageTokens": 8.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx": {
            "lines": 591,
            "tokens": 4708,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 320,
            "percentage": 7.11,
            "percentageTokens": 6.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Register.tsx": {
            "lines": 28,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx": {
            "lines": 464,
            "tokens": 3851,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 128,
            "percentage": 3.66,
            "percentageTokens": 3.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx": {
            "lines": 716,
            "tokens": 4897,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 274,
            "percentage": 5.03,
            "percentageTokens": 5.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Login.tsx": {
            "lines": 28,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/LandingPage.tsx": {
            "lines": 57,
            "tokens": 335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx": {
            "lines": 585,
            "tokens": 4554,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 250,
            "percentage": 5.3,
            "percentageTokens": 5.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Integrations.tsx": {
            "lines": 235,
            "tokens": 2007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx": {
            "lines": 560,
            "tokens": 3676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 113,
            "percentage": 2.68,
            "percentageTokens": 3.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx": {
            "lines": 277,
            "tokens": 2557,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 105,
            "percentage": 3.61,
            "percentageTokens": 4.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx": {
            "lines": 592,
            "tokens": 4465,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 97,
            "percentage": 2.2,
            "percentageTokens": 2.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx": {
            "lines": 638,
            "tokens": 4869,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 53,
            "duplicatedTokens": 405,
            "percentage": 8.31,
            "percentageTokens": 8.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx": {
            "lines": 322,
            "tokens": 2766,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 35,
            "duplicatedTokens": 311,
            "percentage": 10.87,
            "percentageTokens": 11.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx": {
            "lines": 419,
            "tokens": 3508,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 106,
            "percentage": 3.1,
            "percentageTokens": 3.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx": {
            "lines": 599,
            "tokens": 4581,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 274,
            "percentage": 6.01,
            "percentageTokens": 5.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx": {
            "lines": 524,
            "tokens": 3934,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 114,
            "percentage": 2.86,
            "percentageTokens": 2.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx": {
            "lines": 820,
            "tokens": 5431,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 44,
            "duplicatedTokens": 343,
            "percentage": 5.37,
            "percentageTokens": 6.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx": {
            "lines": 228,
            "tokens": 1547,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 56,
            "duplicatedTokens": 388,
            "percentage": 24.56,
            "percentageTokens": 25.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx": {
            "lines": 218,
            "tokens": 1367,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 125,
            "duplicatedTokens": 845,
            "percentage": 57.34,
            "percentageTokens": 61.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/RouteTransition.tsx": {
            "lines": 29,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/utils/withHOC.tsx": {
            "lines": 134,
            "tokens": 1280,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/App.tsx": {
            "lines": 135,
            "tokens": 1331,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/main.tsx": {
            "lines": 39,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 65781,
          "tokens": 516839,
          "sources": 167,
          "clones": 126,
          "duplicatedLines": 21267,
          "duplicatedTokens": 169356,
          "percentage": 32.33,
          "percentageTokens": 32.77,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx": {
            "lines": 14,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx": {
            "lines": 8,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 22,
          "tokens": 86,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 171187,
      "tokens": 1325574,
      "sources": 837,
      "clones": 263,
      "duplicatedLines": 35209,
      "duplicatedTokens": 280568,
      "percentage": 20.57,
      "percentageTokens": 21.17,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "${output.id}`}>\n            {/* Connection Line for Standard Outputs */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Draggable Plus Icon Handle for Standard Outputs */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */}\n      {isAIAgent &&\n        !hasOutgoingConnection &&\n        config.outputs?.map((output) => (\n          <React.Fragment key={`plus-${output.id}`}>\n            {/* Connection Line for Output */}\n            <div\n              className=\"absolute w-14 h-px bg-gray-400\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-50px',\n                transform: 'translateY(-50%)',\n                zIndex: -1,\n              }}\n            />\n            {/* Plus Icon Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 363,
        "end": 432,
        "startLoc": {
          "line": 363,
          "column": 7,
          "position": 1999
        },
        "endLoc": {
          "line": 432,
          "column": 2,
          "position": 2400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 315,
        "end": 337,
        "startLoc": {
          "line": 315,
          "column": 17,
          "position": 1722
        },
        "endLoc": {
          "line": 337,
          "column": 2,
          "position": 1856
        }
      }
    },
    {
      "format": "tsx",
      "lines": 33,
      "fragment": "}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n\n      {/* Connection lines and plus icons for outputs (AI Agent only) */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 374,
        "end": 406,
        "startLoc": {
          "line": 374,
          "column": 54,
          "position": 2063
        },
        "endLoc": {
          "line": 406,
          "column": 66,
          "position": 2227
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 326,
        "end": 358,
        "startLoc": {
          "line": 326,
          "column": 47,
          "position": 1786
        },
        "endLoc": {
          "line": 358,
          "column": 119,
          "position": 1950
        }
      }
    },
    {
      "format": "tsx",
      "lines": 32,
      "fragment": "}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id={`plus-${output.id}`}\n              className=\"!w-6 !h-6 !bg-gray-700 !border !border-gray-400 !rounded-sm hover:!bg-gray-50 !cursor-pointer !transition-colors !flex !items-center !justify-center !absolute\"\n              style={{\n                top: output.position.top || '50%',\n                right: '-58px',\n                transform: 'translateY(-50%)',\n                zIndex: 1000,\n              }}\n            >\n              <svg\n                width=\"12\"\n                height=\"12\"\n                viewBox=\"0 0 12 12\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-500 pointer-events-none\"\n              >\n                <path\n                  d=\"M6 1V11M1 6H11\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </Handle>\n          </React.Fragment>\n        ))}\n    <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 421,
        "end": 452,
        "startLoc": {
          "line": 421,
          "column": 23,
          "position": 2330
        },
        "endLoc": {
          "line": 452,
          "column": 2,
          "position": 2492
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/BaseNode/NodeHandles.tsx",
        "start": 326,
        "end": 358,
        "startLoc": {
          "line": 326,
          "column": 47,
          "position": 1786
        },
        "endLoc": {
          "line": 358,
          "column": 2,
          "position": 1949
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": ">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 435,
        "end": 440,
        "startLoc": {
          "line": 435,
          "column": 7,
          "position": 3859
        },
        "endLoc": {
          "line": 440,
          "column": 3,
          "position": 3922
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 412,
        "end": 417,
        "startLoc": {
          "line": 412,
          "column": 2,
          "position": 3612
        },
        "endLoc": {
          "line": 417,
          "column": 2,
          "position": 3675
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 136,
        "end": 152,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 950
        },
        "endLoc": {
          "line": 152,
          "column": 11,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 117,
        "end": 133,
        "startLoc": {
          "line": 117,
          "column": 7,
          "position": 807
        },
        "endLoc": {
          "line": 133,
          "column": 14,
          "position": 933
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "};\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 89,
        "end": 99,
        "startLoc": {
          "line": 89,
          "column": 3,
          "position": 786
        },
        "endLoc": {
          "line": 99,
          "column": 3,
          "position": 868
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 258,
        "end": 268,
        "startLoc": {
          "line": 258,
          "column": 3,
          "position": 2671
        },
        "endLoc": {
          "line": 268,
          "column": 3,
          "position": 2753
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": "}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 250,
        "end": 264,
        "startLoc": {
          "line": 250,
          "column": 2,
          "position": 1888
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 1973
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 215,
        "end": 231,
        "startLoc": {
          "line": 215,
          "column": 7,
          "position": 1667
        },
        "endLoc": {
          "line": 231,
          "column": 7,
          "position": 1772
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 52,
        "end": 61,
        "startLoc": {
          "line": 52,
          "column": 5,
          "position": 438
        },
        "endLoc": {
          "line": 61,
          "column": 3,
          "position": 528
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 40,
        "end": 49,
        "startLoc": {
          "line": 40,
          "column": 6,
          "position": 316
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 406
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 463,
        "end": 474,
        "startLoc": {
          "line": 463,
          "column": 19,
          "position": 3486
        },
        "endLoc": {
          "line": 474,
          "column": 10,
          "position": 3571
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 442,
        "end": 453,
        "startLoc": {
          "line": 442,
          "column": 17,
          "position": 3306
        },
        "endLoc": {
          "line": 453,
          "column": 10,
          "position": 3391
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<div className=\"bg-blue-900/20 border border-blue-600/30 rounded p-4\">\n                      <div className=\"flex items-start space-x-2\">\n                        <svg\n                          className=\"w-5 h-5 text-blue-400 mt-0.5\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                        <div>\n                          <p className=\"text-sm text-blue-300\">\n                            <strong>{",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 484,
        "end": 499,
        "startLoc": {
          "line": 484,
          "column": 21,
          "position": 3872
        },
        "endLoc": {
          "line": 499,
          "column": 2,
          "position": 3966
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 404,
        "end": 419,
        "startLoc": {
          "line": 404,
          "column": 21,
          "position": 3243
        },
        "endLoc": {
          "line": 419,
          "column": 5,
          "position": 3337
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "<div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Credential Name <span className=\"text-red-400\">*</span>\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={credentialName}\n                        onChange={(e) => setCredentialName(e.target.value)}\n                        className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        placeholder={`e.g., ${credentialTypeDef.name} Account`}\n                      ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 507,
        "end": 517,
        "startLoc": {
          "line": 507,
          "column": 21,
          "position": 4014
        },
        "endLoc": {
          "line": 517,
          "column": 23,
          "position": 4105
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 454,
        "end": 463,
        "startLoc": {
          "line": 454,
          "column": 21,
          "position": 3636
        },
        "endLoc": {
          "line": 463,
          "column": 2,
          "position": 3717
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "}\n                    <div className=\"bg-blue-900/20 border border-blue-600/30 rounded p-4\">\n                      <div className=\"flex items-start space-x-2\">\n                        <svg\n                          className=\"w-5 h-5 text-blue-400 mt-0.5\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                        <div>\n                          <p className=\"text-sm text-blue-300\">\n                            Enterprise",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 711,
        "end": 727,
        "startLoc": {
          "line": 711,
          "column": 22,
          "position": 5566
        },
        "endLoc": {
          "line": 727,
          "column": 11,
          "position": 5660
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 403,
        "end": 419,
        "startLoc": {
          "line": 403,
          "column": 41,
          "position": 3240
        },
        "endLoc": {
          "line": 419,
          "column": 2,
          "position": 3334
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 361,
        "end": 370,
        "startLoc": {
          "line": 361,
          "column": 4,
          "position": 2738
        },
        "endLoc": {
          "line": 370,
          "column": 3,
          "position": 2823
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 399,
        "end": 409,
        "startLoc": {
          "line": 399,
          "column": 19,
          "position": 3144
        },
        "endLoc": {
          "line": 409,
          "column": 2,
          "position": 3230
        }
      }
    },
    {
      "format": "javascript",
      "lines": 79,
      "fragment": "}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 410,
        "end": 488,
        "startLoc": {
          "line": 410,
          "column": 5,
          "position": 3620
        },
        "endLoc": {
          "line": 488,
          "column": 51,
          "position": 4319
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 334,
        "end": 438,
        "startLoc": {
          "line": 334,
          "column": 14,
          "position": 2886
        },
        "endLoc": {
          "line": 438,
          "column": 6,
          "position": 3901
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 451,
        "end": 460,
        "startLoc": {
          "line": 451,
          "column": 21,
          "position": 3971
        },
        "endLoc": {
          "line": 460,
          "column": 27,
          "position": 4075
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 392,
        "end": 401,
        "startLoc": {
          "line": 392,
          "column": 23,
          "position": 3442
        },
        "endLoc": {
          "line": 401,
          "column": 28,
          "position": 3546
        }
      }
    },
    {
      "format": "javascript",
      "lines": 28,
      "fragment": "}\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 401,
        "end": 428,
        "startLoc": {
          "line": 401,
          "column": 23,
          "position": 3239
        },
        "endLoc": {
          "line": 428,
          "column": 16,
          "position": 3451
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 238,
        "end": 256,
        "startLoc": {
          "line": 238,
          "column": 17,
          "position": 2039
        },
        "endLoc": {
          "line": 256,
          "column": 14,
          "position": 2156
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle adding a comment",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 91,
        "end": 108,
        "startLoc": {
          "line": 91,
          "column": 3,
          "position": 597
        },
        "endLoc": {
          "line": 108,
          "column": 27,
          "position": 739
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 87,
        "end": 104,
        "startLoc": {
          "line": 87,
          "column": 3,
          "position": 745
        },
        "endLoc": {
          "line": 104,
          "column": 40,
          "position": 887
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Handle conflict resolution",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 128,
        "end": 141,
        "startLoc": {
          "line": 128,
          "column": 3,
          "position": 923
        },
        "endLoc": {
          "line": 141,
          "column": 30,
          "position": 1043
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 139,
        "end": 152,
        "startLoc": {
          "line": 139,
          "column": 3,
          "position": 1198
        },
        "endLoc": {
          "line": 152,
          "column": 25,
          "position": 1318
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ">\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 326,
        "end": 338,
        "startLoc": {
          "line": 326,
          "column": 21,
          "position": 2641
        },
        "endLoc": {
          "line": 338,
          "column": 4,
          "position": 2740
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 169,
        "end": 181,
        "startLoc": {
          "line": 169,
          "column": 2,
          "position": 1507
        },
        "endLoc": {
          "line": 181,
          "column": 7,
          "position": 1606
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 372,
        "end": 380,
        "startLoc": {
          "line": 372,
          "column": 2,
          "position": 3036
        },
        "endLoc": {
          "line": 380,
          "column": 41,
          "position": 3107
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 210,
        "end": 218,
        "startLoc": {
          "line": 210,
          "column": 7,
          "position": 1841
        },
        "endLoc": {
          "line": 218,
          "column": 46,
          "position": 1912
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 298,
        "end": 308,
        "startLoc": {
          "line": 298,
          "column": 4,
          "position": 2008
        },
        "endLoc": {
          "line": 308,
          "column": 14,
          "position": 2123
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 182,
        "end": 192,
        "startLoc": {
          "line": 182,
          "column": 4,
          "position": 1135
        },
        "endLoc": {
          "line": 192,
          "column": 11,
          "position": 1250
        }
      }
    },
    {
      "format": "javascript",
      "lines": 207,
      "fragment": "={Position.Left}\n          id=\"input_0\"\n          style={{\n            background: '#555',\n            width: 10,\n            height: 10,\n            // No top property - handle will be vertically centered by default\n          }}\n        />\n      );\n    }\n\n    // Output handles\n    if (nodeDefinition.outputs?.length > 0) {\n      nodeDefinition.outputs.forEach((_, index) => {\n        // For single output, don't set top (centers by default)\n        // For multiple outputs, calculate vertical distribution\n        const handleStyle: React.CSSProperties = {\n          background: '#555',\n          width: 10,\n          height: 10,\n        };\n\n        if (nodeDefinition.outputs.length > 1) {\n          handleStyle.top = `${((index + 1) / (nodeDefinition.outputs.length + 1)) * 100}%`;\n        }\n        // No top property for single output - centers by default\n\n        handles.push(\n          <Handle\n            key={`output-${index}`}\n            type=\"source\"\n            position={Position.Right}\n            id={`output_${index}`}\n            style={handleStyle}\n          />\n        );\n      });\n    }\n\n    return handles;\n  };\n\n  // Simple status indicator logic - integrated into main template\n\n  // Toolbar handlers\n  const handlePlay = (_nodeId: string) => {\n    // TODO: Implement play functionality\n  };\n\n  const handleStop = (_nodeId: string) => {\n    // TODO: Implement stop functionality\n  };\n\n  const handleDelete = (_nodeId: string) => {\n    data.onDelete?.();\n  };\n\n  const handleMenuToggle = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    // Handle double-click to open properties panel\n    event.stopPropagation();\n    data.onOpenProperties?.();\n  };\n\n  // Render shared node toolbar and menu\n  const renderToolbarAndMenu = () => {\n    const toolbarVisible = isHovered; // Show on hover only, not requiring selection\n\n    return (\n      <>\n        <NodeToolbar\n          visible={toolbarVisible}\n          onPlay={() => handlePlay(id)}\n          onStop={() => handleStop(id)}\n          onDelete={(e) => {\n            e.stopPropagation();\n            handleDelete(id);\n          }}\n          onMenuToggle={handleMenuToggle}\n          menuTriggerRef={menuTriggerRef as React.RefObject<HTMLButtonElement>}\n        />\n        {/* Custom dark-themed menu with smart positioning */}\n        {showMenu && (\n          <div\n            ref={menuRef}\n            className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n            style={positionStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                data.onOpenProperties?.();\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📂</span> Open\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement test functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🧪</span> Test\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement copy functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📄</span> Copy\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement duplicate functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📋</span> Duplicate\n            </button>\n            <hr className=\"my-1 border-gray-600\" />\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete(id);\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🗑️</span> Delete\n            </button>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  // Check for custom body component\n  const CustomBodyComponent = useMemo(() => {\n    if (!nodeDefinition?.customBodyComponent) return null;\n    return getCustomBodyComponent(nodeDefinition.customBodyComponent);\n  }, [nodeDefinition]);\n\n  // If custom body component exists, use it instead of default rendering\n  if (CustomBodyComponent) {\n    return (\n      <div\n        className={`registry-node ${selected ? 'selected' : ''} relative`}\n        style={{\n          opacity: data.disabled ? 0.5 : 1,\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onDoubleClick={handleDoubleClick}\n      >\n        {/* Custom body components handle their own handles and toolbars internally */}\n        <CustomBodyComponent\n          nodeId={id}\n          nodeData={data}\n          selected={selected}\n          isHovered={isHovered}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          onDelete={data.onDelete}\n          onEdit={data.onEdit}\n          onOpenProperties={data.onOpenProperties}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`registry-node ${selected ? 'selected' : ''} relative`}\n      style={{\n        opacity: data.disabled ? 0.5 : 1,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onDoubleClick={handleDoubleClick}\n    >\n      {renderHandles()}\n      {renderToolbarAndMenu()}\n\n      {/* Gmail-style Base Template for All Nodes */}\n      <div className=\"flex flex-col\">\n        <div className=\"relative\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 86,
        "end": 292,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 793
        },
        "endLoc": {
          "line": 292,
          "column": 2,
          "position": 2145
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 93,
        "end": 299,
        "startLoc": {
          "line": 93,
          "column": 9,
          "position": 884
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2236
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "import type React from 'react';\nimport { memo, useMemo, useRef, useState } from 'react';\nimport type { NodeProps } from 'reactflow';\nimport { Handle, Position } from 'reactflow';\nimport { getCustomBodyComponent } from '@/app/node-extensions/nodeUiRegistry';\nimport { nodeRegistry, type WorkflowNodeInstance } from '@/core';\nimport { useSmartMenuPosition } from '../../../hooks/useSmartMenuPosition';\nimport NodeToolbar from './BaseNode/NodeToolbar';\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 10,
          "position": 118
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 117
        }
      }
    },
    {
      "format": "tsx",
      "lines": 335,
      "fragment": ";\n\ninterface RegistryNodeData extends WorkflowNodeInstance {\n  onDelete?: () => void;\n  onEdit?: () => void;\n  onOpenProperties?: () => void;\n}\n\ninterface RegistryNodeProps extends NodeProps<RegistryNodeData> {}\n\n/**\n * RegistryNode - A React Flow node component that uses the Node Registry\n * This component looks up node definitions from the registry to render nodes\n */\nconst RegistryNode: React.FC<RegistryNodeProps> = ({ data, selected, id }) => {\n  // Hover state for custom toolbar\n  const [isHovered, setIsHovered] = useState(false);\n  // Menu state for NodeMenu\n  const [showMenu, setShowMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showMenu,\n    triggerRef: menuTriggerRef as React.RefObject<HTMLElement>,\n    menuRef: menuRef as React.RefObject<HTMLElement>,\n    offset: 4,\n    onClose: () => setShowMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n  // Look up the node definition from the registry\n  const nodeDefinition = useMemo(() => {\n    return nodeRegistry.getNodeTypeDescription(data.type);\n  }, [data.type]);\n\n  // Get visual configuration\n  const { icon, displayName, subtitle } = useMemo(() => {\n    if (!nodeDefinition) {\n      return {\n        icon: '❓',\n        displayName: data.type,\n        color: '#666',\n        subtitle: 'Unknown node type',\n      };\n    }\n\n    // Build subtitle from parameters if template exists\n    let subtitle = nodeDefinition.subtitle || '';\n    if (subtitle && data.parameters) {\n      subtitle = subtitle.replace(/\\{\\{[^}]+\\}\\}/g, (match) => {\n        const paramPath = match.replace('{{$parameter[\"', '').replace('\"]}}', '');\n        return data.parameters[paramPath] || '';\n      });\n    }\n\n    return {\n      icon: nodeDefinition.icon || nodeDefinition.iconUrl || '📦',\n      displayName: data.name || nodeDefinition.displayName,\n      color: nodeDefinition.defaults?.color || '#1890ff',\n      subtitle,\n    };\n  }, [nodeDefinition, data.name, data.parameters, data.type]);\n\n  // Determine node status\n\n  // Render handles based on node definition\n  const renderHandles = () => {\n    if (!nodeDefinition) return null;\n\n    const handles = [];\n\n    // Input handles\n    if (nodeDefinition.inputs?.length > 0) {\n      handles.push(\n        <Handle\n          key=\"input-main\"\n          type=\"target\"\n          position={Position.Left}\n          id=\"input_0\"\n          style={{\n            background: '#555',\n            width: 10,\n            height: 10,\n            // No top property - handle will be vertically centered by default\n          }}\n        />\n      );\n    }\n\n    // Output handles\n    if (nodeDefinition.outputs?.length > 0) {\n      nodeDefinition.outputs.forEach((_, index) => {\n        // For single output, don't set top (centers by default)\n        // For multiple outputs, calculate vertical distribution\n        const handleStyle: React.CSSProperties = {\n          background: '#555',\n          width: 10,\n          height: 10,\n        };\n\n        if (nodeDefinition.outputs.length > 1) {\n          handleStyle.top = `${((index + 1) / (nodeDefinition.outputs.length + 1)) * 100}%`;\n        }\n        // No top property for single output - centers by default\n\n        handles.push(\n          <Handle\n            key={`output-${index}`}\n            type=\"source\"\n            position={Position.Right}\n            id={`output_${index}`}\n            style={handleStyle}\n          />\n        );\n      });\n    }\n\n    return handles;\n  };\n\n  // Simple status indicator logic - integrated into main template\n\n  // Toolbar handlers\n  const handlePlay = (_nodeId: string) => {\n    // TODO: Implement play functionality\n  };\n\n  const handleStop = (_nodeId: string) => {\n    // TODO: Implement stop functionality\n  };\n\n  const handleDelete = (_nodeId: string) => {\n    data.onDelete?.();\n  };\n\n  const handleMenuToggle = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    // Handle double-click to open properties panel\n    event.stopPropagation();\n    data.onOpenProperties?.();\n  };\n\n  // Render shared node toolbar and menu\n  const renderToolbarAndMenu = () => {\n    const toolbarVisible = isHovered; // Show on hover only, not requiring selection\n\n    return (\n      <>\n        <NodeToolbar\n          visible={toolbarVisible}\n          onPlay={() => handlePlay(id)}\n          onStop={() => handleStop(id)}\n          onDelete={(e) => {\n            e.stopPropagation();\n            handleDelete(id);\n          }}\n          onMenuToggle={handleMenuToggle}\n          menuTriggerRef={menuTriggerRef as React.RefObject<HTMLButtonElement>}\n        />\n        {/* Custom dark-themed menu with smart positioning */}\n        {showMenu && (\n          <div\n            ref={menuRef}\n            className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n            style={positionStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                data.onOpenProperties?.();\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📂</span> Open\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement test functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🧪</span> Test\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement copy functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📄</span> Copy\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                // TODO: Implement duplicate functionality\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>📋</span> Duplicate\n            </button>\n            <hr className=\"my-1 border-gray-600\" />\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete(id);\n                setShowMenu(false);\n              }}\n              className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n            >\n              <span>🗑️</span> Delete\n            </button>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  // Check for custom body component\n  const CustomBodyComponent = useMemo(() => {\n    if (!nodeDefinition?.customBodyComponent) return null;\n    return getCustomBodyComponent(nodeDefinition.customBodyComponent);\n  }, [nodeDefinition]);\n\n  // If custom body component exists, use it instead of default rendering\n  if (CustomBodyComponent) {\n    return (\n      <div\n        className={`registry-node ${selected ? 'selected' : ''} relative`}\n        style={{\n          opacity: data.disabled ? 0.5 : 1,\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onDoubleClick={handleDoubleClick}\n      >\n        {/* Custom body components handle their own handles and toolbars internally */}\n        <CustomBodyComponent\n          nodeId={id}\n          nodeData={data}\n          selected={selected}\n          isHovered={isHovered}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          onDelete={data.onDelete}\n          onEdit={data.onEdit}\n          onOpenProperties={data.onOpenProperties}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`registry-node ${selected ? 'selected' : ''} relative`}\n      style={{\n        opacity: data.disabled ? 0.5 : 1,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onDoubleClick={handleDoubleClick}\n    >\n      {renderHandles()}\n      {renderToolbarAndMenu()}\n\n      {/* Gmail-style Base Template for All Nodes */}\n      <div className=\"flex flex-col\">\n        <div className=\"relative\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-red-400' : ''}\n            `}\n          >\n            {/* Dynamic Node Icon */}\n            <div className=\"flex items-center justify-center\">\n              {icon.startsWith('http') || icon.startsWith('/') ? (\n                <img\n                  src={icon}\n                  alt={displayName}\n                  className=\"w-6 h-6\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'none';\n                    const fallback = target.nextElementSibling;\n                    if (fallback) {\n                      fallback.classList.remove('hidden');\n                    }\n                  }}\n                />\n              ) : (\n                <span className=\"text-2xl\">{icon}</span>\n              )}\n              {/* Fallback icon for broken images */}\n              <span className=\"hidden text-xl\">📦</span>\n            </div>\n\n            {/* Status Indicators */}\n            {(data.disabled || data.retryOnFail || data.continueOnFail) && (\n              <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-xs\">\n                  {data.disabled ? '!' : data.retryOnFail ? 'R' : 'C'}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Node Label - Below the node */}\n        <div className=\"mt-2 text-white text-sm font-medium text-center max-w-[150px] truncate\">\n          {displayName}\n        </div>\n\n        {/* Subtitle if exists */}\n        {subtitle && (\n          <div className=\"text-xs text-gray-400 text-center max-w-[150px] truncate\">{subtitle}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RegistryNode);",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/RegistryNode.tsx",
        "start": 8,
        "end": 342,
        "startLoc": {
          "line": 8,
          "column": 25,
          "position": 115
        },
        "endLoc": {
          "line": 342,
          "column": 2,
          "position": 2535
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 15,
        "end": 349,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 206
        },
        "endLoc": {
          "line": 349,
          "column": 2,
          "position": 2626
        }
      }
    },
    {
      "format": "javascript",
      "lines": 216,
      "fragment": "={cn(\n          'relative border-2 rounded-lg transition-all duration-200',\n          selected && 'ring-2 ring-blue-500 ring-opacity-50',\n          isResizing && 'cursor-nw-resize'\n        )}\n        style={{\n          width: config.dimensions.width,\n          height: config.dimensions.height,\n          backgroundColor: config.style.backgroundColor,\n          borderColor: config.style.borderColor,\n          borderWidth: config.style.borderWidth,\n          borderRadius: config.style.borderRadius,\n          opacity: config.style.opacity,\n          zIndex: config.style.zIndex,\n        }}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {/* Container Header */}\n        <div className=\"absolute top-0 left-0 right-0 p-2 bg-gray-900 bg-opacity-80 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">{getContainerIcon()}</span>\n              <span className=\"text-sm font-semibold text-white\">{config.name}</span>\n              <Badge\n                count={config.children.length}\n                size=\"small\"\n                style={{ backgroundColor: '#1890ff' }}\n              />\n            </div>\n\n            <Space size=\"small\">\n              {state.status === 'running' ? (\n                <Tooltip title=\"Stop execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<StopOutlined />}\n                    onClick={handleStop}\n                    className=\"text-red-400 hover:text-red-300\"\n                  />\n                </Tooltip>\n              ) : (\n                <Tooltip title=\"Start execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<PlayCircleOutlined />}\n                    onClick={handleExecute}\n                    className=\"text-green-400 hover:text-green-300\"\n                  />\n                </Tooltip>\n              )}\n\n              <Dropdown menu={{ items: menuItems }} trigger={['click']} placement=\"bottomRight\">\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<MoreOutlined />}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </Dropdown>\n            </Space>\n          </div>\n        </div>\n\n        {/* Container Status */}\n        <div className=\"absolute top-8 left-2 right-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center gap-1\">\n              {getStatusIcon()}\n              <span className=\"text-gray-300 capitalize\">{state.status}</span>\n            </div>\n\n            {state.currentIteration !== undefined && (\n              <div className=\"text-gray-400\">\n                {state.currentIteration}/{state.totalIterations || '∞'}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Container Content Area */}\n        <div className=\"absolute top-16 left-2 right-2 bottom-2 bg-gray-800 bg-opacity-50 rounded border border-gray-600\">\n          <div className=\"p-2 h-full overflow-auto\">\n            {config.children.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl mb-2\">📁</div>\n                  <div className=\"text-sm\">Drop nodes here</div>\n                  <div className=\"text-xs\">to add them to this container</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {config.children.map((childId) => (\n                  <div key={childId} className=\"p-1 bg-gray-700 rounded text-xs text-gray-300\">\n                    {childId}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Resize Handle */}\n        <div\n          ref={resizeRef}\n          className=\"absolute bottom-0 right-0 w-3 h-3 cursor-nw-resize bg-blue-500 opacity-0 hover:opacity-100 transition-opacity\"\n          onMouseDown={handleMouseDown}\n        />\n\n        {/* Input Handle */}\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id=\"input\"\n          className=\"w-3 h-3 bg-blue-500 border-2 border-white\"\n        />\n\n        {/* Output Handles */}\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id=\"output\"\n          className=\"w-3 h-3 bg-green-500 border-2 border-white\"\n        />\n      </div>\n\n      {/* Configuration Modal */}\n      <Modal\n        title={`Configure ${config.name}`}\n        open={isConfigModalOpen}\n        onCancel={() => setIsConfigModalOpen(false)}\n        onOk={() => configForm.submit()}\n        width={600}\n      >\n        <Form\n          form={configForm}\n          layout=\"vertical\"\n          initialValues={config.executionConfig}\n          onFinish={handleConfigChange}\n        >\n          {config.type === 'loop' && (\n            <>\n              <Form.Item name=\"loopType\" label=\"Loop Type\">\n                <Select>\n                  <Select.Option value=\"for\">For Loop</Select.Option>\n                  <Select.Option value=\"while\">While Loop</Select.Option>\n                  <Select.Option value=\"foreach\">For Each</Select.Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\">\n                <InputNumber min={1} max={1000} />\n              </Form.Item>\n\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\">\n                <InputNumber min={1} max={20} />\n              </Form.Item>\n\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'conditional' && (\n            <Form.Item name=\"conditionExpression\" label=\"Condition Expression\">\n              <Input.TextArea\n                placeholder=\"Enter JavaScript expression, e.g., $input.value > 10\"\n                rows={3}\n              />\n            </Form.Item>\n          )}\n\n          {config.type === 'try-catch' && (\n            <>\n              <Form.Item name=\"retryAttempts\" label=\"Retry Attempts\">\n                <InputNumber min={0} max={10} />\n              </Form.Item>\n\n              <Form.Item name=\"retryDelay\" label=\"Retry Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"errorHandling\" label=\"Error Handling\">\n                <Select>\n                  <Select.Option value=\"stop\">Stop on Error</Select.Option>\n                  <Select.Option value=\"continue\">Continue on Error</Select.Option>\n                  <Select.Option value=\"retry\">Retry on Error</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'batch' && (\n            <>\n              <Form.Item name=\"batchSize\" label=\"Batch Size\">\n                <InputNumber min={1} max={100} />\n              </Form.Item>\n\n              <Form.Item name=\"batchDelay\" label=\"Batch Delay (ms)\">\n                <InputNumber min={0} max={10000}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx",
        "start": 221,
        "end": 436,
        "startLoc": {
          "line": 221,
          "column": 10,
          "position": 1742
        },
        "endLoc": {
          "line": 436,
          "column": 2,
          "position": 3460
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 230,
        "end": 445,
        "startLoc": {
          "line": 230,
          "column": 10,
          "position": 1859
        },
        "endLoc": {
          "line": 445,
          "column": 2,
          "position": 3577
        }
      }
    },
    {
      "format": "tsx",
      "lines": 453,
      "fragment": "/**\n * Container Node Component\n *\n * Advanced container nodes that can hold other nodes and provide\n * complex execution patterns like loops, parallel processing, and conditionals.\n */\n\nimport {\n  CompressOutlined,\n  DeleteOutlined,\n  ExpandOutlined,\n  MoreOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Select,\n  Space,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useRef, useState } from 'react';\nimport { Handle, type NodeProps, Position } from 'reactflow';\nimport type {\n  ContainerDropEvent,\n  ContainerExecutionState,\n  ContainerNodeConfig,\n  ContainerResizeEvent,\n} from '@/core/types/containerNodes';\nimport { cn } from '@/design-system/utils';\n\ninterface ContainerNodeProps extends NodeProps {\n  data: {\n    config: ContainerNodeConfig;\n    state: ContainerExecutionState;\n    onResize?: (event: ContainerResizeEvent) => void;\n    onDrop?: (event: ContainerDropEvent) => void;\n    onConfigChange?: (config: ContainerNodeConfig) => void;\n    onExecute?: (containerId: string) => void;\n    onStop?: (containerId: string) => void;\n  };\n}\n\nconst ContainerNode: React.FC<ContainerNodeProps> = ({ data, selected }) => {\n  const { config, state, onResize, onDrop, onConfigChange, onExecute, onStop } = data;\n  const [isResizing, setIsResizing] = useState(false);\n  const [isConfigModalOpen, setIsConfigModalOpen] = useState(false);\n  const [configForm] = Form.useForm();\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      if (e.target !== resizeRef.current) return;\n\n      e.preventDefault();\n      setIsResizing(true);\n\n      const startX = e.clientX;\n      const startY = e.clientY;\n      const startWidth = config.dimensions.width;\n      const startHeight = config.dimensions.height;\n\n      const handleMouseMove = (e: MouseEvent) => {\n        const deltaX = e.clientX - startX;\n        const deltaY = e.clientY - startY;\n\n        const newWidth = Math.max(200, startWidth + deltaX);\n        const newHeight = Math.max(150, startHeight + deltaY);\n\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: newWidth, height: newHeight },\n          childrenPositions: [], // Would be calculated based on children\n        });\n      };\n\n      const handleMouseUp = () => {\n        setIsResizing(false);\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    },\n    [config, onResize]\n  );\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n\n      const nodeData = e.dataTransfer.getData('application/reactflow');\n      if (!nodeData) return;\n\n      const nodeInfo = JSON.parse(nodeData);\n      const rect = e.currentTarget.getBoundingClientRect();\n      const position = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      };\n\n      onDrop?.({\n        containerId: config.id,\n        nodeId: nodeInfo.id,\n        position,\n      });\n    },\n    [config.id, onDrop]\n  );\n\n  const handleExecute = useCallback(() => {\n    onExecute?.(config.id);\n  }, [config.id, onExecute]);\n\n  const handleStop = useCallback(() => {\n    onStop?.(config.id);\n  }, [config.id, onStop]);\n\n  const handleConfigChange = useCallback(\n    (values: any) => {\n      const newConfig = {\n        ...config,\n        executionConfig: { ...config.executionConfig, ...values },\n      };\n      onConfigChange?.(newConfig);\n      setIsConfigModalOpen(false);\n    },\n    [config, onConfigChange]\n  );\n\n  const getStatusIcon = () => {\n    switch (state.status) {\n      case 'running':\n        return <PlayCircleOutlined className=\"text-green-500\" />;\n      case 'completed':\n        return <PlayCircleOutlined className=\"text-blue-500\" />;\n      case 'failed':\n        return <StopOutlined className=\"text-red-500\" />;\n      case 'paused':\n        return <PauseCircleOutlined className=\"text-yellow-500\" />;\n      default:\n        return <PlayCircleOutlined className=\"text-gray-500\" />;\n    }\n  };\n\n  const getContainerIcon = () => {\n    switch (config.type) {\n      case 'loop':\n        return '🔄';\n      case 'parallel':\n        return '⚡';\n      case 'conditional':\n        return '❓';\n      case 'try-catch':\n        return '🛡️';\n      case 'batch':\n        return '📦';\n      default:\n        return '📁';\n    }\n  };\n\n  const menuItems = [\n    {\n      key: 'config',\n      label: 'Configure',\n      icon: <SettingOutlined />,\n      onClick: () => setIsConfigModalOpen(true),\n    },\n    {\n      key: 'expand',\n      label: 'Expand',\n      icon: <ExpandOutlined />,\n      onClick: () => {\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: 600, height: 500 },\n          childrenPositions: [],\n        });\n      },\n    },\n    {\n      key: 'compress',\n      label: 'Compress',\n      icon: <CompressOutlined />,\n      onClick: () => {\n        onResize?.({\n          containerId: config.id,\n          newDimensions: { width: 300, height: 200 },\n          childrenPositions: [],\n        });\n      },\n    },\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'delete',\n      label: 'Delete Container',\n      icon: <DeleteOutlined />,\n      danger: true,\n      onClick: () => {\n        // Handle container deletion\n      },\n    },\n  ];\n\n  return (\n    <>\n      <div\n        className={cn(\n          'relative border-2 rounded-lg transition-all duration-200',\n          selected && 'ring-2 ring-blue-500 ring-opacity-50',\n          isResizing && 'cursor-nw-resize'\n        )}\n        style={{\n          width: config.dimensions.width,\n          height: config.dimensions.height,\n          backgroundColor: config.style.backgroundColor,\n          borderColor: config.style.borderColor,\n          borderWidth: config.style.borderWidth,\n          borderRadius: config.style.borderRadius,\n          opacity: config.style.opacity,\n          zIndex: config.style.zIndex,\n        }}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {/* Container Header */}\n        <div className=\"absolute top-0 left-0 right-0 p-2 bg-gray-900 bg-opacity-80 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">{getContainerIcon()}</span>\n              <span className=\"text-sm font-semibold text-white\">{config.name}</span>\n              <Badge\n                count={config.children.length}\n                size=\"small\"\n                style={{ backgroundColor: '#1890ff' }}\n              />\n            </div>\n\n            <Space size=\"small\">\n              {state.status === 'running' ? (\n                <Tooltip title=\"Stop execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<StopOutlined />}\n                    onClick={handleStop}\n                    className=\"text-red-400 hover:text-red-300\"\n                  />\n                </Tooltip>\n              ) : (\n                <Tooltip title=\"Start execution\">\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={<PlayCircleOutlined />}\n                    onClick={handleExecute}\n                    className=\"text-green-400 hover:text-green-300\"\n                  />\n                </Tooltip>\n              )}\n\n              <Dropdown menu={{ items: menuItems }} trigger={['click']} placement=\"bottomRight\">\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<MoreOutlined />}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </Dropdown>\n            </Space>\n          </div>\n        </div>\n\n        {/* Container Status */}\n        <div className=\"absolute top-8 left-2 right-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center gap-1\">\n              {getStatusIcon()}\n              <span className=\"text-gray-300 capitalize\">{state.status}</span>\n            </div>\n\n            {state.currentIteration !== undefined && (\n              <div className=\"text-gray-400\">\n                {state.currentIteration}/{state.totalIterations || '∞'}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Container Content Area */}\n        <div className=\"absolute top-16 left-2 right-2 bottom-2 bg-gray-800 bg-opacity-50 rounded border border-gray-600\">\n          <div className=\"p-2 h-full overflow-auto\">\n            {config.children.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl mb-2\">📁</div>\n                  <div className=\"text-sm\">Drop nodes here</div>\n                  <div className=\"text-xs\">to add them to this container</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {config.children.map((childId) => (\n                  <div key={childId} className=\"p-1 bg-gray-700 rounded text-xs text-gray-300\">\n                    {childId}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Resize Handle */}\n        <div\n          ref={resizeRef}\n          className=\"absolute bottom-0 right-0 w-3 h-3 cursor-nw-resize bg-blue-500 opacity-0 hover:opacity-100 transition-opacity\"\n          onMouseDown={handleMouseDown}\n        />\n\n        {/* Input Handle */}\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id=\"input\"\n          className=\"w-3 h-3 bg-blue-500 border-2 border-white\"\n        />\n\n        {/* Output Handles */}\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id=\"output\"\n          className=\"w-3 h-3 bg-green-500 border-2 border-white\"\n        />\n      </div>\n\n      {/* Configuration Modal */}\n      <Modal\n        title={`Configure ${config.name}`}\n        open={isConfigModalOpen}\n        onCancel={() => setIsConfigModalOpen(false)}\n        onOk={() => configForm.submit()}\n        width={600}\n      >\n        <Form\n          form={configForm}\n          layout=\"vertical\"\n          initialValues={config.executionConfig}\n          onFinish={handleConfigChange}\n        >\n          {config.type === 'loop' && (\n            <>\n              <Form.Item name=\"loopType\" label=\"Loop Type\">\n                <Select>\n                  <Select.Option value=\"for\">For Loop</Select.Option>\n                  <Select.Option value=\"while\">While Loop</Select.Option>\n                  <Select.Option value=\"foreach\">For Each</Select.Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\">\n                <InputNumber min={1} max={1000} />\n              </Form.Item>\n\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\">\n                <InputNumber min={1} max={20} />\n              </Form.Item>\n\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'conditional' && (\n            <Form.Item name=\"conditionExpression\" label=\"Condition Expression\">\n              <Input.TextArea\n                placeholder=\"Enter JavaScript expression, e.g., $input.value > 10\"\n                rows={3}\n              />\n            </Form.Item>\n          )}\n\n          {config.type === 'try-catch' && (\n            <>\n              <Form.Item name=\"retryAttempts\" label=\"Retry Attempts\">\n                <InputNumber min={0} max={10} />\n              </Form.Item>\n\n              <Form.Item name=\"retryDelay\" label=\"Retry Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"errorHandling\" label=\"Error Handling\">\n                <Select>\n                  <Select.Option value=\"stop\">Stop on Error</Select.Option>\n                  <Select.Option value=\"continue\">Continue on Error</Select.Option>\n                  <Select.Option value=\"retry\">Retry on Error</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n\n          {config.type === 'batch' && (\n            <>\n              <Form.Item name=\"batchSize\" label=\"Batch Size\">\n                <InputNumber min={1} max={100} />\n              </Form.Item>\n\n              <Form.Item name=\"batchDelay\" label=\"Batch Delay (ms)\">\n                <InputNumber min={0} max={10000} />\n              </Form.Item>\n\n              <Form.Item name=\"batchStrategy\" label=\"Batch Strategy\">\n                <Select>\n                  <Select.Option value=\"sequential\">Sequential</Select.Option>\n                  <Select.Option value=\"parallel\">Parallel</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContainerNode;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/ContainerNode.tsx",
        "start": 1,
        "end": 453,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 453,
          "column": 2,
          "position": 3569
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/containernode/ContainerNode.tsx",
        "start": 10,
        "end": 462,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 117
        },
        "endLoc": {
          "line": 462,
          "column": 2,
          "position": 3686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/permission/domain/repositories/IPermissionRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/operationaltransform/domain/repositories/IOperationalTransformRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/embeddings/domain/repositories/IEmbeddingsRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/database/domain/repositories/IDatabaseRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/cursortracking/domain/repositories/ICursorTrackingRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n  findById(id: string): Promise<any>;\n  findAll(): Promise<any[]>;\n  create(data: any): Promise<any>;\n  update(id: string, data: any): Promise<any>;\n  delete(id: string): Promise<boolean>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/collaboration/domain/repositories/ICollaborationRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/versioncontrol/domain/repositories/IVersionControlRepository.ts",
        "start": 1,
        "end": 7,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 7,
          "column": 2,
          "position": 92
        }
      }
    },
    {
      "format": "javascript",
      "lines": 18,
      "fragment": "}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 266,
        "end": 283,
        "startLoc": {
          "line": 266,
          "column": 2,
          "position": 1985
        },
        "endLoc": {
          "line": 283,
          "column": 14,
          "position": 2129
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 245,
        "end": 266,
        "startLoc": {
          "line": 245,
          "column": 8,
          "position": 1821
        },
        "endLoc": {
          "line": 266,
          "column": 15,
          "position": 1975
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "const inferType = (value: any): string => {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n  if (Array.isArray(value)) return 'array';\n  if (typeof value === 'object') return 'object';\n  if (typeof value === 'string') {\n    // Check if it's a date string",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/SchemaView.tsx",
        "start": 76,
        "end": 82,
        "startLoc": {
          "line": 76,
          "column": 1,
          "position": 534
        },
        "endLoc": {
          "line": 82,
          "column": 31,
          "position": 637
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/TableView.tsx",
        "start": 29,
        "end": 35,
        "startLoc": {
          "line": 29,
          "column": 1,
          "position": 238
        },
        "endLoc": {
          "line": 35,
          "column": 3,
          "position": 341
        }
      }
    },
    {
      "format": "javascript",
      "lines": 55,
      "fragment": "} />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            {title}\n            {data && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Data loaded</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {data && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search data fields\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx",
        "start": 157,
        "end": 211,
        "startLoc": {
          "line": 157,
          "column": 8,
          "position": 1555
        },
        "endLoc": {
          "line": 211,
          "column": 2,
          "position": 1970
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 195,
        "end": 308,
        "startLoc": {
          "line": 195,
          "column": 4,
          "position": 2111
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 3071
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ";\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx",
        "start": 163,
        "end": 172,
        "startLoc": {
          "line": 163,
          "column": 2,
          "position": 1583
        },
        "endLoc": {
          "line": 172,
          "column": 2,
          "position": 1656
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 260,
        "end": 100,
        "startLoc": {
          "line": 260,
          "column": 5,
          "position": 2686
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 874
        }
      }
    },
    {
      "format": "tsx",
      "lines": 30,
      "fragment": "\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button\n                ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/DataVisualization/DataVisualizationPanel.tsx",
        "start": 192,
        "end": 221,
        "startLoc": {
          "line": 192,
          "column": 19,
          "position": 1819
        },
        "endLoc": {
          "line": 221,
          "column": 17,
          "position": 2014
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 289,
        "end": 317,
        "startLoc": {
          "line": 289,
          "column": 18,
          "position": 2920
        },
        "endLoc": {
          "line": 317,
          "column": 2,
          "position": 3115
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ",\n        type: 'options',\n        default: 'pinecone',\n        required: true,\n        options: [\n          {\n            name: 'Pinecone',\n            value: 'pinecone',\n          },\n          {\n            name: 'Weaviate',\n            value: 'weaviate',\n          },\n          {\n            name: 'Qdrant',\n            value: 'qdrant',\n          },\n          {\n            name: 'Chroma',\n            value: 'chroma',\n          },\n          {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStore.node.ts",
        "start": 85,
        "end": 106,
        "startLoc": {
          "line": 85,
          "column": 11,
          "position": 512
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/VectorStoreTool.node.ts",
        "start": 76,
        "end": 97,
        "startLoc": {
          "line": 76,
          "column": 14,
          "position": 462
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 576
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ",\n        options: [\n          { name: 'GET', value: 'GET' },\n          { name: 'POST', value: 'POST' },\n          { name: 'PUT', value: 'PUT' },\n          { name: 'DELETE', value: 'DELETE' },\n          { name: 'PATCH', value: 'PATCH' },\n          {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 21,
          "position": 176
        },
        "endLoc": {
          "line": 31,
          "column": 2,
          "position": 270
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Trigger.node.ts",
        "start": 79,
        "end": 86,
        "startLoc": {
          "line": 79,
          "column": 26,
          "position": 495
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ",\n        description: 'HTTP method to use',\n        options: [\n          { name: 'GET', value: 'GET' },\n          { name: 'POST', value: 'POST' },\n          { name: 'PUT', value: 'PUT' },\n          { name: 'DELETE', value: 'DELETE' },\n          { name: 'PATCH', value: 'PATCH' },\n        ],\n        displayOptions: {\n          show: {\n            actionType",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/Action.node.ts",
        "start": 67,
        "end": 78,
        "startLoc": {
          "line": 67,
          "column": 6,
          "position": 420
        },
        "endLoc": {
          "line": 78,
          "column": 11,
          "position": 537
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/definitions/HttpRequest.node.ts",
        "start": 23,
        "end": 89,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 169
        },
        "endLoc": {
          "line": 89,
          "column": 12,
          "position": 605
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": ",\n  },\n  typography: {\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    fontSize: {\n      xs: '10px',\n      sm: '12px',\n      md: '14px',\n      lg: '16px',\n      xl: '18px',\n    },\n    fontWeight: {\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700,\n    },\n    lineHeight: {\n      tight: 1.2,\n      normal: 1.5,\n      relaxed: 1.8,\n    },\n  },\n  spacing: {\n    xs: '4px',\n    sm: '8px',\n    md: '12px',\n    lg: '16px',\n    xl: '20px',\n    '2xl': '24px',\n  },\n  animations: {\n    duration: {\n      fast: '150ms',\n      normal: '250ms',\n      slow: '350ms',\n    },\n    easing: {\n      linear: 'linear',\n      ease: 'ease',\n      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n      easeOut: 'cubic-bezier(0, 0, 0.2, 1)',\n      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.15)'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/darkTheme.ts",
        "start": 21,
        "end": 68,
        "startLoc": {
          "line": 21,
          "column": 10,
          "position": 120
        },
        "endLoc": {
          "line": 68,
          "column": 34,
          "position": 406
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/themes/defaultTheme.ts",
        "start": 21,
        "end": 68,
        "startLoc": {
          "line": 21,
          "column": 10,
          "position": 120
        },
        "endLoc": {
          "line": 68,
          "column": 34,
          "position": 406
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              const fallback = target.nextElementSibling;\n              if (fallback) {\n                fallback.classList.remove('hidden');\n              }\n            }}\n          />\n          <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/NodeIcon.tsx",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 234
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 317
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 308,
        "end": 317,
        "startLoc": {
          "line": 308,
          "column": 19,
          "position": 2302
        },
        "endLoc": {
          "line": 317,
          "column": 2,
          "position": 2385
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 56,
        "end": 63,
        "startLoc": {
          "line": 56,
          "column": 9,
          "position": 343
        },
        "endLoc": {
          "line": 63,
          "column": 484,
          "position": 401
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 213
        },
        "endLoc": {
          "line": 42,
          "column": 119,
          "position": 271
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 88,
        "end": 95,
        "startLoc": {
          "line": 88,
          "column": 7,
          "position": 552
        },
        "endLoc": {
          "line": 95,
          "column": 125,
          "position": 610
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/shared/HoverActions.tsx",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 213
        },
        "endLoc": {
          "line": 42,
          "column": 119,
          "position": 271
        }
      }
    },
    {
      "format": "javascript",
      "lines": 58,
      "fragment": "={{ marginBottom: '16px' }}\n      />\n\n      <Collapse\n        items={[\n          {\n            key: 'performance',\n            label: (\n              <div className=\"flex items-center gap-2\">\n                <ExperimentOutlined />\n                <span>Performance & Sampling</span>\n              </div>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                {advancedProperties.map((property) => {\n                  const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      key={property.name}\n                      property={property}\n                      value={formValues[property.name]}\n                      onChange={(value) => handleFieldChange(property.name, value)}\n                      errors={errors[property.name]}\n                      theme={theme}\n                      context={formValues}\n                    />\n                  );\n                })}\n              </div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n\n  const renderTestingTab = () => (\n    <div className=\"space-y-4\">\n      <Alert\n        message=\"Test Your AI Agent\"\n        description=\"Test your AI agent configuration with sample data.\"\n        type=\"success\"\n        showIcon\n      />\n\n      <Card size=\"small\" title=\"Quick Test\">\n        <div className=\"space-y-4\">\n          <PropertyField\n            property={{\n              displayName",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 296,
        "end": 353,
        "startLoc": {
          "line": 296,
          "column": 6,
          "position": 2317
        },
        "endLoc": {
          "line": 353,
          "column": 26,
          "position": 2707
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 261,
        "end": 296,
        "startLoc": {
          "line": 261,
          "column": 6,
          "position": 2065
        },
        "endLoc": {
          "line": 296,
          "column": 14,
          "position": 2320
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "const shouldShow =\n                    !property.displayOptions?.show ||\n                    Object.entries(property.displayOptions.show).every(([key, values]) =>\n                      values?.includes(formValues[key])\n                    );\n\n                  if (!shouldShow) return null;\n\n                  return (\n                    <PropertyField\n                      ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 312,
        "end": 322,
        "startLoc": {
          "line": 312,
          "column": 19,
          "position": 2428
        },
        "endLoc": {
          "line": 322,
          "column": 23,
          "position": 2509
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/panels/AIAgentPropertiesPanel.tsx",
        "start": 266,
        "end": 276,
        "startLoc": {
          "line": 266,
          "column": 9,
          "position": 2097
        },
        "endLoc": {
          "line": 276,
          "column": 13,
          "position": 2178
        }
      }
    },
    {
      "format": "javascript",
      "lines": 30,
      "fragment": "();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 146,
        "end": 175,
        "startLoc": {
          "line": 146,
          "column": 16,
          "position": 994
        },
        "endLoc": {
          "line": 175,
          "column": 29,
          "position": 1171
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 137,
        "end": 156,
        "startLoc": {
          "line": 137,
          "column": 2,
          "position": 940
        },
        "endLoc": {
          "line": 156,
          "column": 21,
          "position": 1051
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "className=\"w-6 h-6\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const fallback = target.nextElementSibling;\n                  if (fallback) {\n                    fallback.classList.remove('hidden');\n                  }\n                }}\n              />\n              <span className=",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 100,
        "end": 110,
        "startLoc": {
          "line": 100,
          "column": 17,
          "position": 664
        },
        "endLoc": {
          "line": 110,
          "column": 2,
          "position": 756
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodeTypes/registrynode/RegistryNode.tsx",
        "start": 307,
        "end": 44,
        "startLoc": {
          "line": 307,
          "column": 19,
          "position": 2297
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 340
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "\n        value={currentValues}\n        onChange={onChange}\n        placeholder={property.placeholder || `Select ${property.displayName.toLowerCase()}`}\n        disabled={disabled}\n        className=\"w-full [&_.ant-select-selector]:bg-gray-800 [&_.ant-select-selector]:border-gray-600\"\n        showSearch\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={String(option.value)} value={option.value} title={option.description}>\n            <div>\n              <div className=\"text-gray-200\">{option.name}</div>\n              {option.description && (\n                <div className=\"text-xs text-gray-400\">{option.description}</div>\n              )}\n            </div>\n          </Option>\n        ))}\n      </Select>\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 6. Text/TextArea Property Renderer",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 181,
        "end": 206,
        "startLoc": {
          "line": 181,
          "column": 2,
          "position": 1540
        },
        "endLoc": {
          "line": 206,
          "column": 38,
          "position": 1755
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 142,
        "end": 167,
        "startLoc": {
          "line": 142,
          "column": 7,
          "position": 1178
        },
        "endLoc": {
          "line": 167,
          "column": 38,
          "position": 1410
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 256,
        "end": 265,
        "startLoc": {
          "line": 256,
          "column": 14,
          "position": 2172
        },
        "endLoc": {
          "line": 265,
          "column": 4,
          "position": 2246
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 233,
        "end": 242,
        "startLoc": {
          "line": 233,
          "column": 17,
          "position": 1987
        },
        "endLoc": {
          "line": 242,
          "column": 11,
          "position": 2061
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "|| [];\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n\n      <div className=\"border border-gray-600 rounded-lg p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"text-sm font-medium text-gray-200\">Filter",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 625,
        "end": 633,
        "startLoc": {
          "line": 625,
          "column": 2,
          "position": 5182
        },
        "endLoc": {
          "line": 633,
          "column": 7,
          "position": 5257
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 571,
        "end": 579,
        "startLoc": {
          "line": 571,
          "column": 2,
          "position": 4751
        },
        "endLoc": {
          "line": 579,
          "column": 6,
          "position": 4826
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "\n                  className=\"flex-1 bg-gray-800 border-gray-600\"\n                />\n                <Button\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {property.description && <p className=\"text-xs text-gray-400\">{property.description}</p>}\n    </div>\n  );\n};\n\n// 16-22. Additional Complex Property Renderers",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 661,
        "end": 680,
        "startLoc": {
          "line": 661,
          "column": 2,
          "position": 5552
        },
        "endLoc": {
          "line": 680,
          "column": 48,
          "position": 5653
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 604,
        "end": 623,
        "startLoc": {
          "line": 604,
          "column": 2,
          "position": 5033
        },
        "endLoc": {
          "line": 623,
          "column": 32,
          "position": 5134
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <TextArea",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 681,
        "end": 690,
        "startLoc": {
          "line": 681,
          "column": 19,
          "position": 5660
        },
        "endLoc": {
          "line": 690,
          "column": 9,
          "position": 5734
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 233,
        "end": 242,
        "startLoc": {
          "line": 233,
          "column": 17,
          "position": 1987
        },
        "endLoc": {
          "line": 242,
          "column": 11,
          "position": 2061
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 706,
        "end": 715,
        "startLoc": {
          "line": 706,
          "column": 25,
          "position": 5867
        },
        "endLoc": {
          "line": 715,
          "column": 7,
          "position": 5941
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 233,
        "end": 242,
        "startLoc": {
          "line": 233,
          "column": 17,
          "position": 1987
        },
        "endLoc": {
          "line": 242,
          "column": 11,
          "position": 2061
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <Select\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select node",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 731,
        "end": 743,
        "startLoc": {
          "line": 731,
          "column": 21,
          "position": 6065
        },
        "endLoc": {
          "line": 743,
          "column": 12,
          "position": 6156
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 233,
        "end": 718,
        "startLoc": {
          "line": 233,
          "column": 17,
          "position": 1987
        },
        "endLoc": {
          "line": 718,
          "column": 16,
          "position": 5958
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ": React.FC<PropertyRendererProps> = ({\n  property,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-200\">{property.displayName}</label>\n      <div className=\"flex space-x-2",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 756,
        "end": 765,
        "startLoc": {
          "line": 756,
          "column": 26,
          "position": 6261
        },
        "endLoc": {
          "line": 765,
          "column": 15,
          "position": 6340
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyRenderers.tsx",
        "start": 233,
        "end": 265,
        "startLoc": {
          "line": 233,
          "column": 17,
          "position": 1987
        },
        "endLoc": {
          "line": 265,
          "column": 28,
          "position": 2251
        }
      }
    },
    {
      "format": "javascript",
      "lines": 332,
      "fragment": "={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx",
        "start": 108,
        "end": 439,
        "startLoc": {
          "line": 108,
          "column": 6,
          "position": 889
        },
        "endLoc": {
          "line": 439,
          "column": 7,
          "position": 3245
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 106,
        "end": 437,
        "startLoc": {
          "line": 106,
          "column": 6,
          "position": 886
        },
        "endLoc": {
          "line": 437,
          "column": 5,
          "position": 3242
        }
      }
    },
    {
      "format": "tsx",
      "lines": 30,
      "fragment": "/**\n * PropertyField Component\n * Dynamic form field renderer for node properties with advanced features\n */\n\nimport {\n  EyeInvisibleOutlined,\n  EyeOutlined,\n  InfoCircleOutlined,\n  MinusOutlined,\n  PlusOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useNodeTheme } from '../themes'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx",
        "start": 2,
        "end": 31,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 31,
          "column": 12,
          "position": 147
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 1,
        "end": 30,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 30,
          "column": 38,
          "position": 145
        }
      }
    },
    {
      "format": "tsx",
      "lines": 425,
      "fragment": ";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: NodeTheme;\n  context?: Record<string, any>;\n  errors?: string[];\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme: propTheme,\n\n  errors = [],\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [internalValue, setInternalValue] = useState(value);\n  const [showPassword, setShowPassword] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const handleChange = (newValue: any) => {\n    setInternalValue(newValue);\n\n    // Validate the new value\n    const error = validateValue(newValue);\n    setValidationError(error);\n\n    // Only call onChange if validation passes\n    if (!error) {\n      onChange(newValue);\n    }\n  };\n\n  const validateValue = (val: any): string | null => {\n    if (property.required && (val === undefined || val === null || val === '')) {\n      return `${property.displayName} is required`;\n    }\n\n    if (property.type === 'string' || property.type === 'text') {\n      if (property.typeOptions?.minValue && val.length < property.typeOptions.minValue) {\n        return `${property.displayName} must be at least ${property.typeOptions.minValue} characters`;\n      }\n      if (property.typeOptions?.maxValue && val.length > property.typeOptions.maxValue) {\n        return `${property.displayName} must be no more than ${property.typeOptions.maxValue} characters`;\n      }\n    }\n\n    if (property.type === 'number') {\n      if (property.min !== undefined && val < property.min) {\n        return `${property.displayName} must be at least ${property.min}`;\n      }\n      if (property.max !== undefined && val > property.max) {\n        return `${property.displayName} must be no more than ${property.max}`;\n      }\n    }\n\n    return null;\n  };\n\n  const renderLabel = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '4px',\n          marginBottom: '4px',\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.sm,\n          fontWeight: theme.typography.fontWeight.medium,\n        }}\n      >\n        <span>\n          {property.displayName}\n          {property.required && (\n            <span style={{ color: theme.colors.error, marginLeft: '2px' }}>*</span>\n          )}\n        </span>\n\n        {property.description && (\n          <Tooltip title={property.description} placement=\"top\">\n            <InfoCircleOutlined\n              style={{\n                fontSize: '12px',\n                color: theme.colors.textSecondary,\n                cursor: 'help',\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {property.hint && (\n          <Badge\n            count=\"?\"\n            size=\"small\"\n            style={{\n              backgroundColor: theme.colors.info,\n              fontSize: '10px',\n            }}\n            title={property.hint}\n          />\n        )}\n      </div>\n    );\n  };\n\n  const renderError = () => {\n    const allErrors = [...errors];\n    if (validationError) {\n      allErrors.push(validationError);\n    }\n\n    if (allErrors.length === 0) return null;\n\n    return (\n      <div\n        style={{\n          marginTop: '4px',\n          fontSize: theme.typography.fontSize.xs,\n          color: theme.colors.error,\n        }}\n      >\n        {allErrors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      disabled,\n      style: { width: '100%' },\n      placeholder: property.placeholder,\n    };\n\n    switch (property.type) {\n      case 'string':\n        if (property.typeOptions?.password) {\n          return (\n            <Input\n              {...commonProps}\n              type={showPassword ? 'text' : 'password'}\n              value={internalValue || property.default || ''}\n              onChange={(e) => handleChange(e.target.value)}\n              suffix={\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={showPassword ? <EyeInvisibleOutlined /> : <EyeOutlined />}\n                  onClick={() => setShowPassword(!showPassword)}\n                />\n              }\n            />\n          );\n        }\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={property.rows || property.typeOptions?.rows || 4}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            min={property.min}\n            max={property.max}\n            step={property.step}\n            precision={property.typeOptions?.numberPrecision}\n            value={internalValue || property.default || 0}\n            onChange={handleChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch\n            disabled={disabled}\n            checked={internalValue !== undefined ? internalValue : property.default}\n            onChange={handleChange}\n          />\n        );\n\n      case 'select':\n      case 'options':\n        return (\n          <Select\n            {...commonProps}\n            value={internalValue || property.default}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={internalValue || property.default || []}\n            onChange={handleChange}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.children as unknown as string)?.toLowerCase().includes(input.toLowerCase())\n            }\n          >\n            {property.options?.map((option) => (\n              <Option key={String(option.value)} value={option.value}>\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker {...commonProps} showTime value={internalValue} onChange={handleChange} />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={internalValue || property.default || '#1890ff'}\n            onChange={(color) => handleChange(color.toHexString())}\n            disabled={disabled}\n            showText\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            disabled={disabled}\n            beforeUpload={() => false} // Prevent auto upload\n            onChange={(info) => handleChange(info.fileList)}\n            fileList={internalValue || []}\n          >\n            <Button icon={<UploadOutlined />}>{property.placeholder || 'Upload File'}</Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            rows={6}\n            value={\n              typeof internalValue === 'object'\n                ? JSON.stringify(internalValue, null, 2)\n                : internalValue || property.default || '{}'\n            }\n            onChange={(e) => {\n              try {\n                const parsed = JSON.parse(e.target.value);\n                handleChange(parsed);\n              } catch {\n                // Keep the raw value for partial JSON\n                handleChange(e.target.value);\n              }\n            }}\n            placeholder=\"Enter valid JSON\"\n          />\n        );\n\n      case 'collection':\n        return renderCollectionField();\n\n      case 'fixedCollection':\n        return renderFixedCollectionField();\n\n      case 'credentialsSelect':\n        return renderCredentialsSelect();\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={internalValue || property.default || ''}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const items = internalValue || [];\n\n    return (\n      <Card size=\"small\" style={{ backgroundColor: theme.colors.background }}>\n        {items.map((item: any, index: number) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: '8px',\n              borderColor: theme.colors.border,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<MinusOutlined />}\n                onClick={() => {\n                  const newItems = items.filter((_: any, i: number) => i !== index);\n                  handleChange(newItems);\n                }}\n              />\n            }\n          >\n            {property.values?.map((subProperty) => (\n              <PropertyField\n                key={subProperty.name}\n                property={subProperty}\n                value={item[subProperty.name]}\n                onChange={(subValue) => {\n                  const newItems = [...items];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [subProperty.name]: subValue,\n                  };\n                  handleChange(newItems);\n                }}\n                theme={theme}\n                disabled={disabled}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          block\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const newItem: Record<string, any> = {};\n            property.values?.forEach((subProperty) => {\n              newItem[subProperty.name] = subProperty.default;\n            });\n            handleChange([...items, newItem]);\n          }}\n        >\n          Add Item\n        </Button>\n      </Card>\n    );\n  };\n\n  const renderFixedCollectionField = () => {\n    // Similar to collection but with fixed structure\n    return renderCollectionField();\n  };\n\n  const renderCredentialsSelect = () => {\n    // Mock credentials for now - would be populated from credential store\n    const mockCredentials = [\n      { value: 'cred1', name: 'Gmail OAuth2' },\n      { value: 'cred2', name: 'OpenAI API Key' },\n      { value: 'cred3', name: 'Slack Bot Token' },\n    ];\n\n    return (\n      <Select\n        placeholder=\"Select credentials\"\n        value={internalValue}\n        onChange={handleChange}\n        disabled={disabled}\n        style={{ width: '100%' }}\n      >\n        {mockCredentials.map((cred) => (\n          <Option key={String(cred.value)} value={cred.value}>\n            {cred.name}\n          </Option>\n        ))}\n      </Select>\n    );\n  };\n\n  return (\n    <div style={{ marginBottom: theme.spacing.md }}>\n      {renderLabel()}\n      {renderField()}\n      {renderError()}\n    </div>\n  );\n};\n\nexport default PropertyField;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/PropertyField.tsx",
        "start": 32,
        "end": 456,
        "startLoc": {
          "line": 32,
          "column": 11,
          "position": 163
        },
        "endLoc": {
          "line": 456,
          "column": 2,
          "position": 3356
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/PropertyField.tsx",
        "start": 31,
        "end": 454,
        "startLoc": {
          "line": 31,
          "column": 37,
          "position": 161
        },
        "endLoc": {
          "line": 454,
          "column": 2,
          "position": 3350
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "const fieldNames = new Set<string>();\n    inputData.forEach((item) => {\n      if (item.json && typeof item.json === 'object') {\n        Object.keys(item.json).forEach((key) => fieldNames.add(key));\n      }\n    });\n\n    return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedTransformPropertyPanel.tsx",
        "start": 131,
        "end": 138,
        "startLoc": {
          "line": 131,
          "column": 5,
          "position": 1117
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 1206
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/TransformAssignmentCollection.tsx",
        "start": 294,
        "end": 301,
        "startLoc": {
          "line": 294,
          "column": 5,
          "position": 2272
        },
        "endLoc": {
          "line": 301,
          "column": 61,
          "position": 2361
        }
      }
    },
    {
      "format": "javascript",
      "lines": 60,
      "fragment": "={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 296,
        "end": 355,
        "startLoc": {
          "line": 296,
          "column": 6,
          "position": 2321
        },
        "endLoc": {
          "line": 355,
          "column": 2,
          "position": 2840
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 291,
        "end": 350,
        "startLoc": {
          "line": 291,
          "column": 6,
          "position": 2237
        },
        "endLoc": {
          "line": 350,
          "column": 2,
          "position": 2756
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "/**\n * Enhanced Node Toolbar\n * Advanced toolbar with customizable actions, themes, and interactions\n */\n\nimport {\n  BugOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  PlayCircleOutlined,\n  ReloadOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { useNodeTheme } from '../themes'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 12,
          "position": 98
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 38,
          "position": 98
        }
      }
    },
    {
      "format": "tsx",
      "lines": 135,
      "fragment": ";\n\ninterface EnhancedNodeToolbarProps {\n  nodeId: string;\n  visible: boolean;\n  actions?: ToolbarAction[];\n  theme?: NodeTheme;\n  onActionClick: (actionId: string, nodeId: string) => void;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'default' | 'compact' | 'floating';\n}\n\nconst EnhancedNodeToolbar: React.FC<EnhancedNodeToolbarProps> = ({\n  nodeId,\n  visible,\n  actions = [],\n  theme: propTheme,\n  onActionClick,\n  position = 'top',\n  size = 'medium',\n  variant = 'default',\n}) => {\n  const { theme: contextTheme } = useNodeTheme();\n  const theme = propTheme || contextTheme;\n  const [hoveredAction, setHoveredAction] = useState<string | null>(null);\n  const toolbarRef = useRef<HTMLDivElement>(null);\n\n  // Default actions if none provided\n  const defaultActions: ToolbarAction[] = [\n    {\n      id: 'play',\n      icon: 'PlayCircleOutlined',\n      label: 'Run Node',\n      action: 'execute',\n      shortcut: 'Ctrl+R',\n    },\n    {\n      id: 'stop',\n      icon: 'StopOutlined',\n      label: 'Stop Execution',\n      action: 'stop',\n    },\n    {\n      id: 'copy',\n      icon: 'CopyOutlined',\n      label: 'Duplicate Node',\n      action: 'duplicate',\n      shortcut: 'Ctrl+D',\n    },\n    {\n      id: 'edit',\n      icon: 'EditOutlined',\n      label: 'Edit Node',\n      action: 'edit',\n      shortcut: 'Enter',\n    },\n    {\n      id: 'delete',\n      icon: 'DeleteOutlined',\n      label: 'Delete Node',\n      action: 'delete',\n      shortcut: 'Del',\n    },\n    {\n      id: 'more',\n      icon: 'MoreOutlined',\n      label: 'More Actions',\n      action: 'menu',\n    },\n  ];\n\n  const finalActions = actions.length > 0 ? actions : defaultActions;\n\n  const getPositionStyles = (): React.CSSProperties => {\n    const offset = variant === 'floating' ? 12 : 8;\n    const baseStyles: React.CSSProperties = {\n      position: 'absolute',\n      zIndex: 9999,\n    };\n\n    switch (position) {\n      case 'top':\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'bottom':\n        return {\n          ...baseStyles,\n          bottom: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n      case 'left':\n        return {\n          ...baseStyles,\n          left: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      case 'right':\n        return {\n          ...baseStyles,\n          right: `-${offset + 120}px`,\n          top: '50%',\n          transform: 'translateY(-50%)',\n        };\n      default:\n        return {\n          ...baseStyles,\n          top: `-${offset + 32}px`,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        };\n    }\n  };\n\n  const getSizeConfig = () => {\n    switch (size) {\n      case 'small':\n        return { buttonSize: 24, iconSize: 12, padding: '4px' };\n      case 'large':\n        return { buttonSize: 36, iconSize: 16, padding: '8px' };\n      default:\n        return { buttonSize: 28, iconSize: 14, padding: '6px' };\n    }\n  };\n\n  const getVariantStyles = (): React.CSSProperties => {\n    const { padding } = getSizeConfig();\n\n    // Defensive theme access with fallbacks",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 20,
        "end": 154,
        "startLoc": {
          "line": 20,
          "column": 11,
          "position": 117
        },
        "endLoc": {
          "line": 154,
          "column": 41,
          "position": 1159
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 20,
        "end": 154,
        "startLoc": {
          "line": 20,
          "column": 37,
          "position": 117
        },
        "endLoc": {
          "line": 154,
          "column": 6,
          "position": 1159
        }
      }
    },
    {
      "format": "tsx",
      "lines": 178,
      "fragment": ",\n        };\n    }\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const iconMap: Record<string, React.ComponentType<any>> = {\n      PlayCircleOutlined,\n      StopOutlined,\n      DeleteOutlined,\n      MoreOutlined,\n      CopyOutlined,\n      EditOutlined,\n      SettingOutlined,\n      BugOutlined,\n      ReloadOutlined,\n    };\n\n    const IconComponent = iconMap[iconName] || MoreOutlined;\n    return IconComponent;\n  };\n\n  const handleActionClick = (action: ToolbarAction, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    // Special handling for menu action\n    if (action.id === 'more') {\n      // Show additional actions menu\n      return;\n    }\n\n    onActionClick(action.id, nodeId);\n  };\n\n  const getButtonStyles = (actionId: string): React.CSSProperties => {\n    const { buttonSize, iconSize } = getSizeConfig();\n    const isHovered = hoveredAction === actionId;\n\n    const buttonColor = getActionColor(actionId);\n\n    return {\n      width: buttonSize,\n      height: buttonSize,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: theme.borderRadius.sm,\n      background: isHovered ? buttonColor : 'transparent',\n      color: isHovered ? theme.colors.background : getActionTextColor(actionId),\n      border: 'none',\n      cursor: 'pointer',\n      transition: `all ${theme.animations.duration.fast} ${theme.animations.easing.easeOut}`,\n      fontSize: iconSize,\n      transform: isHovered ? 'scale(1.1)' : 'scale(1)',\n    };\n  };\n\n  const getActionColor = (actionId: string): string => {\n    switch (actionId) {\n      case 'play':\n        return theme.colors.success;\n      case 'stop':\n        return theme.colors.error;\n      case 'delete':\n        return theme.colors.error;\n      case 'copy':\n        return theme.colors.info;\n      case 'edit':\n        return theme.colors.primary;\n      default:\n        return theme.colors.textSecondary;\n    }\n  };\n\n  const getActionTextColor = (actionId: string): string => {\n    if (variant === 'floating') {\n      return getActionColor(actionId);\n    }\n    return theme.colors.background;\n  };\n\n  const renderMoreMenu = () => {\n    const moreActions: ToolbarAction[] = [\n      {\n        id: 'settings',\n        icon: 'SettingOutlined',\n        label: 'Node Settings',\n        action: 'settings',\n      },\n      {\n        id: 'debug',\n        icon: 'BugOutlined',\n        label: 'Debug Node',\n        action: 'debug',\n      },\n      {\n        id: 'reload',\n        icon: 'ReloadOutlined',\n        label: 'Reload Node',\n        action: 'reload',\n      },\n    ];\n\n    const menuItems = moreActions.map((action) => ({\n      key: action.id,\n      label: (\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          {React.createElement(getIconComponent(action.icon))}\n          <span>{action.label}</span>\n          {action.shortcut && (\n            <span style={{ marginLeft: 'auto', fontSize: '11px', opacity: 0.6 }}>\n              {action.shortcut}\n            </span>\n          )}\n        </div>\n      ),\n      onClick: () => onActionClick(action.id, nodeId),\n    }));\n\n    return <Menu items={menuItems} />;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div ref={toolbarRef} style={getPositionStyles()}>\n      <div style={getVariantStyles()}>\n        {finalActions.map((action) => {\n          if (action.id === 'more') {\n            return (\n              <Dropdown\n                key={action.id}\n                overlay={renderMoreMenu()}\n                trigger={['click']}\n                placement=\"bottomCenter\"\n              >\n                <button\n                  style={getButtonStyles(action.id)}\n                  onMouseEnter={() => setHoveredAction(action.id)}\n                  onMouseLeave={() => setHoveredAction(null)}\n                >\n                  {React.createElement(getIconComponent(action.icon))}\n                </button>\n              </Dropdown>\n            );\n          }\n\n          return (\n            <Tooltip\n              key={action.id}\n              title={\n                <div>\n                  <div>{action.label}</div>\n                  {action.shortcut && (\n                    <div style={{ fontSize: '11px', opacity: 0.8 }}>{action.shortcut}</div>\n                  )}\n                </div>\n              }\n              placement=\"bottom\"\n              mouseEnterDelay={0.5}\n            >\n              <button\n                style={getButtonStyles(action.id)}\n                onClick={(e) => handleActionClick(action, e)}\n                onMouseEnter={() => setHoveredAction(action.id)}\n                onMouseLeave={() => setHoveredAction(null)}\n              >\n                {React.createElement(getIconComponent(action.icon))}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedNodeToolbar;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/EnhancedNodeToolbar.tsx",
        "start": 190,
        "end": 367,
        "startLoc": {
          "line": 190,
          "column": 33,
          "position": 1514
        },
        "endLoc": {
          "line": 367,
          "column": 2,
          "position": 2901
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/design-system/components/common/EnhancedNodeToolbar.tsx",
        "start": 185,
        "end": 362,
        "startLoc": {
          "line": 185,
          "column": 3,
          "position": 1430
        },
        "endLoc": {
          "line": 362,
          "column": 2,
          "position": 2817
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "if (displayOptions.show) {\n      Object.keys(displayOptions.show).forEach((field) => dependencies.add(field));\n    }\n\n    if (displayOptions.hide) {\n      Object.keys(displayOptions.hide).forEach((field) => dependencies.add(field));\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 481,
        "end": 489,
        "startLoc": {
          "line": 481,
          "column": 5,
          "position": 3806
        },
        "endLoc": {
          "line": 489,
          "column": 3,
          "position": 3890
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 310,
        "end": 318,
        "startLoc": {
          "line": 310,
          "column": 5,
          "position": 2540
        },
        "endLoc": {
          "line": 318,
          "column": 36,
          "position": 2624
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "if (displayOptions.showIf) {\n      displayOptions.showIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if (displayOptions.hideIf) {\n      displayOptions.hideIf.forEach((condition) => dependencies.add(condition.field));\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 489,
        "end": 497,
        "startLoc": {
          "line": 489,
          "column": 5,
          "position": 3890
        },
        "endLoc": {
          "line": 497,
          "column": 3,
          "position": 3968
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/components/ConditionalPropertyRenderer.tsx",
        "start": 319,
        "end": 327,
        "startLoc": {
          "line": 319,
          "column": 5,
          "position": 2627
        },
        "endLoc": {
          "line": 327,
          "column": 34,
          "position": 2705
        }
      }
    },
    {
      "format": "javascript",
      "lines": 34,
      "fragment": " : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Database Icon */}\n            <NodeIcon icon={icon",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 59,
        "end": 92,
        "startLoc": {
          "line": 59,
          "column": 90,
          "position": 483
        },
        "endLoc": {
          "line": 92,
          "column": 5,
          "position": 645
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 63,
        "end": 115,
        "startLoc": {
          "line": 63,
          "column": 89,
          "position": 481
        },
        "endLoc": {
          "line": 115,
          "column": 10,
          "position": 784
        }
      }
    },
    {
      "format": "tsx",
      "lines": 47,
      "fragment": "const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-blue-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-blue-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* Database Icon */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 45,
        "end": 91,
        "startLoc": {
          "line": 45,
          "column": 3,
          "position": 381
        },
        "endLoc": {
          "line": 91,
          "column": 20,
          "position": 635
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 49,
        "end": 95,
        "startLoc": {
          "line": 49,
          "column": 3,
          "position": 379
        },
        "endLoc": {
          "line": 95,
          "column": 17,
          "position": 633
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ",\n          nodes: workflowJson.nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: { x: node.position[0], y: node.position[1] },\n            data: {\n              label: node.name,\n              parameters: node.parameters,\n              credentials:\n                typeof node.credentials === 'object' && node.credentials\n                  ? Object.keys(node.credentials)[0] || undefined\n                  : (node.credentials as string | undefined),\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: [], // Convert connections to edges if needed\n          tags",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx",
        "start": 50,
        "end": 67,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 514
        },
        "endLoc": {
          "line": 67,
          "column": 5,
          "position": 704
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 113,
        "end": 130,
        "startLoc": {
          "line": 113,
          "column": 29,
          "position": 958
        },
        "endLoc": {
          "line": 130,
          "column": 8,
          "position": 1148
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "// Convert BackendWorkflow to WorkflowDefinition format\n        const workflowDefinition = {\n          name: `Test Workflow ${Date.now()}`,\n          version: 1,\n          nodes: workflowJson.nodes.map((node) => ({\n            id: node.id,\n            type: node.type,\n            position: { x: node.position[0], y: node.position[1] },\n            data: {\n              label: node.name,\n              parameters: node.parameters,\n              credentials:\n                typeof node.credentials === 'object' && node.credentials\n                  ? Object.keys(node.credentials)[0] || undefined\n                  : (node.credentials as string | undefined),\n              disabled: node.disabled,\n              notes: node.notes,\n            },\n          })),\n          edges: [], // Convert connections to edges if needed\n          tags: ['test'],\n          isActive: true,\n        };\n        const result = await workflowApiService.testWorkflow(workflowDefinition);\n        setTestResult({\n          type: 'dry_run'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx",
        "start": 77,
        "end": 102,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 783
        },
        "endLoc": {
          "line": 102,
          "column": 10,
          "position": 1049
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowTester/WorkflowTester.tsx",
        "start": 47,
        "end": 72,
        "startLoc": {
          "line": 47,
          "column": 9,
          "position": 483
        },
        "endLoc": {
          "line": 72,
          "column": 13,
          "position": 749
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Convert workflow coordinates to screen coordinates",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx",
        "start": 32,
        "end": 49,
        "startLoc": {
          "line": 32,
          "column": 3,
          "position": 207
        },
        "endLoc": {
          "line": 49,
          "column": 54,
          "position": 349
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 87,
        "end": 104,
        "startLoc": {
          "line": 87,
          "column": 3,
          "position": 745
        },
        "endLoc": {
          "line": 104,
          "column": 40,
          "position": 887
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ");\n\n  // Convert workflow coordinates to screen coordinates\n  const workflowToScreen = useCallback(\n    (x: number, y: number) => ({\n      x: (x + transform.x) * transform.zoom,\n      y: (y + transform.y) * transform.zoom,\n    }),\n    [transform]\n  );\n\n  // Get node position and dimensions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/UserPresenceOverlay.tsx",
        "start": 47,
        "end": 58,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 344
        },
        "endLoc": {
          "line": 58,
          "column": 36,
          "position": 438
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 66,
        "end": 77,
        "startLoc": {
          "line": 66,
          "column": 5,
          "position": 563
        },
        "endLoc": {
          "line": 77,
          "column": 54,
          "position": 657
        }
      }
    },
    {
      "format": "javascript",
      "lines": 675,
      "fragment": "={form}\n      layout=\"vertical\"\n      onFinish={handleCreateTrigger}\n      initialValues={{\n        enabled: true,\n        triggerType: 'webhook',\n        rateLimitEnabled: false,\n        retryEnabled: false,\n        requireHttps: true,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Trigger Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"API webhook trigger\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Receives webhooks from external API\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"triggerType\" label=\"Trigger Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"webhook\">\n            <Space>\n              <GlobalOutlined />\n              Webhook\n            </Space>\n          </Option>\n          <Option value=\"http_request\">\n            <Space>\n              <ApiOutlined />\n              HTTP Request\n            </Space>\n          </Option>\n          <Option value=\"email\">\n            <Space>\n              <MailOutlined />\n              Email\n            </Space>\n          </Option>\n          <Option value=\"file_change\">\n            <Space>\n              <FileTextOutlined />\n              File Change\n            </Space>\n          </Option>\n          <Option value=\"database_change\">\n            <Space>\n              <DatabaseOutlined />\n              Database Change\n            </Space>\n          </Option>\n          <Option value=\"api_poll\">\n            <Space>\n              <ApiOutlined />\n              API Polling\n            </Space>\n          </Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['triggerType']} noStyle>\n        {({ getFieldValue }) => {\n          const triggerType = getFieldValue('triggerType');\n          return renderTriggerTypeFields(triggerType);\n        }}\n      </Form.Item>\n\n      <Collapse ghost>\n        <Panel header=\"Advanced Configuration\" key=\"advanced\">\n          {renderAdvancedFields()}\n        </Panel>\n      </Collapse>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingTrigger ? 'Update Trigger' : 'Create Trigger'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingTrigger(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderTriggerTypeFields = (triggerType: string) => {\n    switch (triggerType) {\n      case 'webhook':\n        return (\n          <>\n            <Form.Item name=\"methods\" label=\"HTTP Methods\">\n              <Select mode=\"multiple\" placeholder=\"Select methods\">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n                <Option value=\"PATCH\">PATCH</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"contentTypes\" label=\"Content Types (comma-separated)\">\n              <Input placeholder=\"application/json, application/xml\" />\n            </Form.Item>\n            <Form.Item name=\"secretKey\" label=\"Secret Key (optional)\">\n              <Input.Password placeholder=\"For webhook signature validation\" />\n            </Form.Item>\n          </>\n        );\n      case 'http_request':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/status\" />\n            </Form.Item>\n            <Form.Item name=\"method\" label=\"HTTP Method\">\n              <Select>\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"changeDetection\" label=\"Change Detection\">\n              <Select>\n                <Option value=\"hash\">Content Hash</Option>\n                <Option value=\"content\">Full Content</Option>\n                <Option value=\"headers\">Headers</Option>\n                <Option value=\"size\">Content Size</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'email':\n        return (\n          <>\n            <Form.Item name=\"provider\" label=\"Email Provider\">\n              <Select>\n                <Option value=\"gmail\">Gmail</Option>\n                <Option value=\"outlook\">Outlook</Option>\n                <Option value=\"imap\">IMAP</Option>\n                <Option value=\"exchange\">Exchange</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"mailbox\" label=\"Mailbox\">\n              <Input placeholder=\"INBOX\" />\n            </Form.Item>\n            <Form.Item name=\"fromEmails\" label=\"From Emails (comma-separated)\">\n              <Input placeholder=\"user@example.com, alerts@service.com\" />\n            </Form.Item>\n            <Form.Item name=\"subjectFilter\" label=\"Subject Filter\">\n              <Input placeholder=\"Alert: \" />\n            </Form.Item>\n          </>\n        );\n      case 'file_change':\n        return (\n          <>\n            <Form.Item name=\"path\" label=\"Path to Monitor\" rules={[{ required: true }]}>\n              <Input placeholder=\"/data/uploads\" />\n            </Form.Item>\n            <Form.Item name=\"recursive\" label=\"Recursive\" valuePropName=\"checked\">\n              <Switch />\n            </Form.Item>\n            <Form.Item name=\"events\" label=\"File Events\">\n              <Select mode=\"multiple\" placeholder=\"Select events\">\n                <Option value=\"created\">Created</Option>\n                <Option value=\"modified\">Modified</Option>\n                <Option value=\"deleted\">Deleted</Option>\n                <Option value=\"moved\">Moved</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"patterns\" label=\"File Patterns (comma-separated)\">\n              <Input placeholder=\"*.pdf, *.docx\" />\n            </Form.Item>\n          </>\n        );\n      case 'database_change':\n        return (\n          <>\n            <Form.Item\n              name=\"connectionString\"\n              label=\"Connection String\"\n              rules={[{ required: true }]}\n            >\n              <Input.Password placeholder=\"mongodb://localhost:27017/mydb\" />\n            </Form.Item>\n            <Form.Item name=\"database\" label=\"Database\">\n              <Input placeholder=\"myapp\" />\n            </Form.Item>\n            <Form.Item name=\"table\" label=\"Table/Collection\">\n              <Input placeholder=\"users\" />\n            </Form.Item>\n            <Form.Item name=\"operation\" label=\"Operation\">\n              <Select>\n                <Option value=\"insert\">Insert</Option>\n                <Option value=\"update\">Update</Option>\n                <Option value=\"delete\">Delete</Option>\n                <Option value=\"any\">Any</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'api_poll':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"API URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/data\" />\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"responseField\" label=\"Response Field to Monitor\">\n              <Input placeholder=\"data.status\" />\n            </Form.Item>\n            <Form.Item name=\"changeThreshold\" label=\"Change Threshold (for numbers)\">\n              <InputNumber min={0} step={0.1} />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderAdvancedFields = () => (\n    <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n      <Divider>Rate Limiting</Divider>\n      <Form.Item name=\"rateLimitEnabled\" label=\"Enable Rate Limiting\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item dependencies={['rateLimitEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('rateLimitEnabled')) return null;\n          return (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Form.Item name=\"maxTriggersPerMinute\" label=\"Max/Minute\">\n                <InputNumber min={1} />\n              </Form.Item>\n              <Form.Item name=\"maxTriggersPerHour\" label=\"Max/Hour\">\n                <InputNumber min={1} />\n              </Form.Item>\n            </div>\n          );\n        }}\n      </Form.Item>\n\n      <Divider>Security</Divider>\n      <Form.Item name=\"requireHttps\" label=\"Require HTTPS\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item name=\"allowedIPs\" label=\"Allowed IPs (comma-separated)\">\n        <Input placeholder=\"192.168.1.1, 10.0.0.0/8\" />\n      </Form.Item>\n      <Form.Item name=\"maxPayloadSize\" label=\"Max Payload Size (bytes)\">\n        <InputNumber min={1024} placeholder=\"1048576\" />\n      </Form.Item>\n\n      <Divider>Headers</Divider>\n      <Form.Item name=\"headers\" label=\"Custom Headers (key:value per line)\">\n        <TextArea\n          placeholder=\"Authorization: Bearer token&#10;Content-Type: application/json\"\n          rows={3}\n        />\n      </Form.Item>\n    </Space>\n  );\n\n  const renderTriggersList = () => (\n    <List\n      dataSource={triggers}\n      renderItem={(trigger) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={trigger.enabled}\n              onChange={(checked) => handleToggleTrigger(trigger.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => {\n                setSelectedTrigger(trigger);\n                setTestModalVisible(true);\n              }}\n            >\n              Test\n            </Button>,\n            trigger.triggerType === 'webhook' && (\n              <Button\n                type=\"link\"\n                icon={<CopyOutlined />}\n                onClick={() => {\n                  const config = trigger.configuration as any;\n                  navigator.clipboard.writeText(config.endpoint);\n                  message.success('Webhook URL copied');\n                }}\n              >\n                Copy URL\n              </Button>\n            ),\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingTrigger(trigger.id);\n                // Populate form with existing values\n                form.setFieldsValue({\n                  name: trigger.name,\n                  description: trigger.description,\n                  enabled: trigger.enabled,\n                  triggerType: trigger.triggerType,\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteTrigger(trigger.id)}\n            />,\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {getTriggerIcon(trigger.triggerType)}\n                {trigger.name}\n                <Tag color={trigger.enabled ? 'green' : 'default'}>{trigger.triggerType}</Tag>\n                <Badge\n                  count={trigger.triggerCount}\n                  style={{ backgroundColor: colors.primary[500] }}\n                />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {trigger.description}\n                <Space>\n                  <Badge status={trigger.enabled ? 'success' : 'default'} />\n                  {trigger.enabled ? 'Active' : 'Inactive'}\n                  {trigger.lastTriggered && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(trigger.lastTriggered).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n                {trigger.triggerType === 'webhook' && (\n                  <Text code style={{ fontSize: '12px' }}>\n                    {(trigger.configuration as any).endpoint}\n                  </Text>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No triggers configured' }}\n    />\n  );\n\n  const renderEventsList = () => (\n    <Table\n      dataSource={recentEvents}\n      size=\"small\"\n      pagination={{ pageSize: 20 }}\n      columns={[\n        {\n          title: 'Time',\n          dataIndex: 'timestamp',\n          key: 'timestamp',\n          width: 150,\n          render: (timestamp) => new Date(timestamp).toLocaleString(),\n        },\n        {\n          title: 'Trigger',\n          dataIndex: 'triggerId',\n          key: 'triggerId',\n          width: 200,\n          render: (triggerId) => {\n            const trigger = triggers.find((t) => t.id === triggerId);\n            return trigger ? trigger.name : triggerId;\n          },\n        },\n        {\n          title: 'Status',\n          dataIndex: 'status',\n          key: 'status',\n          width: 100,\n          render: (status) => <Tag color={getEventStatusColor(status)}>{status}</Tag>,\n        },\n        {\n          title: 'Processing Time',\n          dataIndex: 'processingTimeMs',\n          key: 'processingTimeMs',\n          width: 120,\n          render: (time) => `${time.toFixed(2)}ms`,\n        },\n        {\n          title: 'Source',\n          dataIndex: ['metadata', 'source'],\n          key: 'source',\n          width: 120,\n        },\n        {\n          title: 'Actions',\n          key: 'actions',\n          width: 100,\n          render: (_, event) => (\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                Modal.info({\n                  title: 'Event Details',\n                  content: (\n                    <div>\n                      <Paragraph>\n                        <Text strong>ID:</Text> {event.id}\n                      </Paragraph>\n                      <Paragraph>\n                        <Text strong>Raw Data:</Text>\n                        <pre\n                          style={{\n                            marginTop: 8,\n                            background: colors.gray[50],\n                            padding: 12,\n                            borderRadius: 4,\n                          }}\n                        >\n                          {JSON.stringify(event.rawData, null, 2)}\n                        </pre>\n                      </Paragraph>\n                      {event.error && (\n                        <Paragraph>\n                          <Text strong>Error:</Text>\n                          <pre\n                            style={{\n                              marginTop: 8,\n                              background: colors.error[50],\n                              padding: 12,\n                              borderRadius: 4,\n                              color: colors.error[600],\n                            }}\n                          >\n                            {event.error}\n                          </pre>\n                        </Paragraph>\n                      )}\n                    </div>\n                  ),\n                  width: 600,\n                });\n              }}\n            />\n          ),\n        },\n      ]}\n    />\n  );\n\n  const renderMetrics = () => {\n    if (!metrics) return <div>Select a trigger to view metrics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic title=\"Total Events\" value={metrics.totalEvents} />\n          <Statistic\n            title=\"Processed Events\"\n            value={metrics.processedEvents}\n            valueStyle={{ color: colors.success[600] }}\n          />\n          <Statistic\n            title=\"Error Rate\"\n            value={metrics.errorRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: metrics.errorRate > 5 ? colors.error[600] : colors.success[600],\n            }}\n          />\n          <Statistic\n            title=\"Avg Processing Time\"\n            value={metrics.averageProcessingTime}\n            precision={2}\n            suffix=\"ms\"\n          />\n        </div>\n\n        {metrics.topSources.length > 0 && (\n          <Card title=\"Top Sources\" size=\"small\">\n            <List\n              dataSource={metrics.topSources}\n              renderItem={(source) => (\n                <List.Item>\n                  <List.Item.Meta title={source.source} description={`${source.count} events`} />\n                  <Progress\n                    percent={(source.count / metrics.totalEvents) * 100}\n                    size=\"small\"\n                    style={{ width: 100 }}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getTriggerIcon = (triggerType: string) => {\n    const iconMap = {\n      webhook: <GlobalOutlined />,\n      http_request: <ApiOutlined />,\n      email: <MailOutlined />,\n      file_change: <FileTextOutlined />,\n      database_change: <DatabaseOutlined />,\n      api_poll: <ApiOutlined />,\n      calendar_event: <CalendarOutlined />,\n    };\n    return iconMap[triggerType as keyof typeof iconMap] || <SettingOutlined />;\n  };\n\n  const getEventStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'filtered':\n        return 'orange';\n      case 'rate_limited':\n        return 'purple';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <ThunderboltOutlined />\n            Advanced Triggers\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1200}\n        footer={null}\n        className={cn('trigger-management-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Triggers ({triggers.length})\n              </span>\n            }\n            key=\"triggers\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card title=\"Create Trigger\" size=\"small\">\n                {renderTriggerForm()}\n                {webhookUrl && (\n                  <Alert\n                    message=\"Webhook URL\"\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Text code>{webhookUrl}</Text>\n                        <Button\n                          size=\"small\"\n                          icon={<CopyOutlined />}\n                          onClick={() => {\n                            navigator.clipboard.writeText(webhookUrl);\n                            message.success('URL copied');\n                          }}\n                        >\n                          Copy URL\n                        </Button>\n                      </Space>\n                    }\n                    type=\"success\"\n                    style={{ marginTop: 16 }}\n                  />\n                )}\n              </Card>\n              <Card title=\"Active Triggers\" size=\"small\">\n                {renderTriggersList()}\n              </Card>\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CheckCircleOutlined />\n                Events\n              </span>\n            }\n            key=\"events\"\n          >\n            {renderEventsList()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <div>📊</div>\n                Metrics\n              </span>\n            }\n            key=\"metrics\"\n          >\n            <div className=\"mb-4\">\n              <Select\n                placeholder=\"Select a trigger to view metrics\"\n                value={selectedTrigger?.id}\n                onChange={(triggerId) => {\n                  const trigger = triggers.find((t) => t.id === triggerId);\n                  setSelectedTrigger(trigger || null);\n                }}\n                style={{ width: 300 }}\n              >\n                {triggers.map((trigger) => (\n                  <Option key={trigger.id} value={trigger.id}>\n                    {trigger.name}\n                  </Option>\n                ))}\n              </Select>\n            </div>\n            {renderMetrics()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Trigger\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedTrigger) {\n            handleTestTrigger(selectedTrigger.id);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                { test: true, timestamp: new Date().toISOString() },\n                null,\n                2\n              )}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx",
        "start": 304,
        "end": 978,
        "startLoc": {
          "line": 304,
          "column": 5,
          "position": 2835
        },
        "endLoc": {
          "line": 978,
          "column": 2,
          "position": 8117
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 307,
        "end": 981,
        "startLoc": {
          "line": 307,
          "column": 5,
          "position": 2874
        },
        "endLoc": {
          "line": 981,
          "column": 2,
          "position": 8156
        }
      }
    },
    {
      "format": "tsx",
      "lines": 985,
      "fragment": "/**\n * Advanced Trigger Management Panel\n *\n * Comprehensive trigger configuration interface for webhooks, API polling,\n * file monitoring, email triggers, and event-driven workflow execution.\n */\n\nimport {\n  ApiOutlined,\n  CalendarOutlined,\n  CheckCircleOutlined,\n  CopyOutlined,\n  DatabaseOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  FileTextOutlined,\n  GlobalOutlined,\n  MailOutlined,\n  PlayCircleOutlined,\n  SettingOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Collapse,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Progress,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  advancedTriggerSystem,\n  type TriggerConfiguration,\n  type TriggerEvent,\n  type TriggerMetrics,\n} from '@/core/services/advancedTriggerSystem';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { Text, Paragraph } = Typography;\nconst { Panel } = Collapse;\n\ninterface TriggerPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const TriggerPanel: React.FC<TriggerPanelProps> = ({ workflowId, visible, onClose }) => {\n  const [triggers, setTriggers] = useState<TriggerConfiguration[]>([]);\n  const [recentEvents, setRecentEvents] = useState<TriggerEvent[]>([]);\n  const [selectedTrigger, setSelectedTrigger] = useState<TriggerConfiguration | null>(null);\n  const [metrics, setMetrics] = useState<TriggerMetrics | null>(null);\n  const [activeTab, setActiveTab] = useState('triggers');\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingTrigger, setEditingTrigger] = useState<string | null>(null);\n  const [testModalVisible, setTestModalVisible] = useState(false);\n  const [webhookUrl, setWebhookUrl] = useState('');\n\n  useEffect(() => {\n    if (visible) {\n      loadTriggers();\n      loadRecentEvents();\n    }\n  }, [visible, loadRecentEvents, loadTriggers]);\n\n  useEffect(() => {\n    if (selectedTrigger) {\n      loadMetrics(selectedTrigger.id);\n    }\n  }, [selectedTrigger, loadMetrics]);\n\n  const loadTriggers = () => {\n    const allTriggers = advancedTriggerSystem.getAllTriggers();\n    const workflowTriggers = allTriggers.filter((t) => t.workflowId === workflowId);\n    setTriggers(workflowTriggers);\n  };\n\n  const loadRecentEvents = () => {\n    const allTriggers = advancedTriggerSystem.getAllTriggers();\n    const workflowTriggers = allTriggers.filter((t) => t.workflowId === workflowId);\n\n    const events: TriggerEvent[] = [];\n    workflowTriggers.forEach((trigger) => {\n      const triggerEvents = advancedTriggerSystem.getRecentEvents(trigger.id, 50);\n      events.push(...triggerEvents);\n    });\n\n    // Sort by timestamp descending\n    events.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    setRecentEvents(events.slice(0, 100));\n  };\n\n  const loadMetrics = (triggerId: string) => {\n    try {\n      const triggerMetrics = advancedTriggerSystem.getTriggerMetrics(triggerId);\n      setMetrics(triggerMetrics);\n    } catch (_error) {}\n  };\n\n  const handleCreateTrigger = async (values: any) => {\n    setLoading(true);\n    try {\n      const triggerConfig = {\n        workflowId,\n        name: values.name,\n        description: values.description,\n        enabled: values.enabled ?? true,\n        triggerType: values.triggerType,\n        configuration: buildTriggerConfiguration(values),\n        filters: values.filters || [],\n        transformations: values.transformations || [],\n        authentication: values.authentication,\n        rateLimit: {\n          enabled: values.rateLimitEnabled ?? false,\n          maxTriggersPerMinute: values.maxTriggersPerMinute ?? 60,\n          maxTriggersPerHour: values.maxTriggersPerHour ?? 1000,\n          maxTriggersPerDay: values.maxTriggersPerDay ?? 10000,\n          burstLimit: values.burstLimit ?? 10,\n        },\n        retryPolicy: {\n          enabled: values.retryEnabled ?? false,\n          maxAttempts: values.maxAttempts ?? 3,\n          backoffMs: values.backoffMs ?? 1000,\n          exponentialBackoff: values.exponentialBackoff ?? true,\n        },\n        security: {\n          allowedIPs: values.allowedIPs?.split(',').map((ip: string) => ip.trim()) ?? [],\n          blockedIPs: values.blockedIPs?.split(',').map((ip: string) => ip.trim()) ?? [],\n          requireHttps: values.requireHttps ?? true,\n          validateSignature: values.validateSignature ?? false,\n          maxPayloadSize: values.maxPayloadSize ?? 1048576, // 1MB\n        },\n        metadata: {},\n      };\n\n      const created = advancedTriggerSystem.createTrigger(triggerConfig);\n\n      if (created.triggerType === 'webhook') {\n        const config = created.configuration as any;\n        setWebhookUrl(config.endpoint);\n      }\n\n      message.success('Trigger created successfully');\n      loadTriggers();\n      form.resetFields();\n      setEditingTrigger(null);\n    } catch (_error) {\n      message.error('Failed to create trigger');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buildTriggerConfiguration = (values: any) => {\n    switch (values.triggerType) {\n      case 'webhook':\n        return {\n          endpoint: '', // Auto-generated\n          methods: values.methods || ['POST'],\n          contentTypes: values.contentTypes?.split(',').map((t: string) => t.trim()) || [\n            'application/json',\n          ],\n          headers: parseKeyValuePairs(values.headers),\n          responseTemplate: values.responseTemplate,\n          secretKey: values.secretKey,\n        };\n      case 'http_request':\n        return {\n          url: values.url,\n          method: values.method || 'GET',\n          headers: parseKeyValuePairs(values.headers),\n          body: values.body,\n          pollIntervalMs: values.pollIntervalMs || 300000,\n          changeDetection: values.changeDetection || 'hash',\n        };\n      case 'email':\n        return {\n          provider: values.provider || 'gmail',\n          mailbox: values.mailbox || 'INBOX',\n          filters: {\n            from: values.fromEmails?.split(',').map((e: string) => e.trim()),\n            subject: values.subjectFilter,\n            body: values.bodyFilter,\n            hasAttachment: values.hasAttachment,\n          },\n          markAsRead: values.markAsRead ?? false,\n          moveToFolder: values.moveToFolder,\n        };\n      case 'file_change':\n        return {\n          path: values.path,\n          recursive: values.recursive ?? true,\n          events: values.events || ['created', 'modified'],\n          patterns: values.patterns?.split(',').map((p: string) => p.trim()) || ['*'],\n          ignorePatterns: values.ignorePatterns?.split(',').map((p: string) => p.trim()) || [],\n          debounceMs: values.debounceMs || 1000,\n        };\n      case 'database_change':\n        return {\n          connectionString: values.connectionString,\n          database: values.database,\n          table: values.table,\n          operation: values.operation || 'any',\n          columns: values.columns?.split(',').map((c: string) => c.trim()),\n          conditions: parseKeyValuePairs(values.conditions),\n          pollIntervalMs: values.pollIntervalMs || 60000,\n        };\n      case 'api_poll':\n        return {\n          url: values.url || '',\n          method: values.method || 'GET',\n          headers: parseKeyValuePairs(values.headers),\n          body: values.body,\n          pollIntervalMs: values.pollIntervalMs || 300000,\n          responseField: values.responseField,\n          changeThreshold: values.changeThreshold,\n        };\n      default:\n        // Fallback to webhook config for unknown types\n        return {\n          endpoint: '',\n          methods: ['POST'],\n          contentTypes: ['application/json'],\n          headers: {},\n          responseTemplate: '',\n          secretKey: '',\n        };\n    }\n  };\n\n  const parseKeyValuePairs = (input: string): Record<string, string> => {\n    if (!input) return {};\n\n    const pairs: Record<string, string> = {};\n    input.split('\\n').forEach((line) => {\n      const [key, ...valueParts] = line.split(':');\n      if (key && valueParts.length > 0) {\n        pairs[key.trim()] = valueParts.join(':').trim();\n      }\n    });\n    return pairs;\n  };\n\n  const handleToggleTrigger = (triggerId: string, enabled: boolean) => {\n    try {\n      advancedTriggerSystem.toggleTrigger(triggerId, enabled);\n      message.success(`Trigger ${enabled ? 'enabled' : 'disabled'}`);\n      loadTriggers();\n    } catch (_error) {\n      message.error('Failed to toggle trigger');\n    }\n  };\n\n  const handleDeleteTrigger = (triggerId: string) => {\n    try {\n      advancedTriggerSystem.deleteTrigger(triggerId);\n      message.success('Trigger deleted');\n      loadTriggers();\n      if (selectedTrigger?.id === triggerId) {\n        setSelectedTrigger(null);\n        setMetrics(null);\n      }\n    } catch (_error) {\n      message.error('Failed to delete trigger');\n    }\n  };\n\n  const handleTestTrigger = async (triggerId: string, testData?: any) => {\n    try {\n      await advancedTriggerSystem.testTrigger(triggerId, testData);\n      message.success('Trigger test completed');\n      loadRecentEvents();\n      setTestModalVisible(false);\n    } catch (_error) {\n      message.error('Trigger test failed');\n    }\n  };\n\n  const renderTriggerForm = () => (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleCreateTrigger}\n      initialValues={{\n        enabled: true,\n        triggerType: 'webhook',\n        rateLimitEnabled: false,\n        retryEnabled: false,\n        requireHttps: true,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Trigger Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"API webhook trigger\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Receives webhooks from external API\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"triggerType\" label=\"Trigger Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"webhook\">\n            <Space>\n              <GlobalOutlined />\n              Webhook\n            </Space>\n          </Option>\n          <Option value=\"http_request\">\n            <Space>\n              <ApiOutlined />\n              HTTP Request\n            </Space>\n          </Option>\n          <Option value=\"email\">\n            <Space>\n              <MailOutlined />\n              Email\n            </Space>\n          </Option>\n          <Option value=\"file_change\">\n            <Space>\n              <FileTextOutlined />\n              File Change\n            </Space>\n          </Option>\n          <Option value=\"database_change\">\n            <Space>\n              <DatabaseOutlined />\n              Database Change\n            </Space>\n          </Option>\n          <Option value=\"api_poll\">\n            <Space>\n              <ApiOutlined />\n              API Polling\n            </Space>\n          </Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['triggerType']} noStyle>\n        {({ getFieldValue }) => {\n          const triggerType = getFieldValue('triggerType');\n          return renderTriggerTypeFields(triggerType);\n        }}\n      </Form.Item>\n\n      <Collapse ghost>\n        <Panel header=\"Advanced Configuration\" key=\"advanced\">\n          {renderAdvancedFields()}\n        </Panel>\n      </Collapse>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingTrigger ? 'Update Trigger' : 'Create Trigger'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingTrigger(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderTriggerTypeFields = (triggerType: string) => {\n    switch (triggerType) {\n      case 'webhook':\n        return (\n          <>\n            <Form.Item name=\"methods\" label=\"HTTP Methods\">\n              <Select mode=\"multiple\" placeholder=\"Select methods\">\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n                <Option value=\"PATCH\">PATCH</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"contentTypes\" label=\"Content Types (comma-separated)\">\n              <Input placeholder=\"application/json, application/xml\" />\n            </Form.Item>\n            <Form.Item name=\"secretKey\" label=\"Secret Key (optional)\">\n              <Input.Password placeholder=\"For webhook signature validation\" />\n            </Form.Item>\n          </>\n        );\n      case 'http_request':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/status\" />\n            </Form.Item>\n            <Form.Item name=\"method\" label=\"HTTP Method\">\n              <Select>\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"changeDetection\" label=\"Change Detection\">\n              <Select>\n                <Option value=\"hash\">Content Hash</Option>\n                <Option value=\"content\">Full Content</Option>\n                <Option value=\"headers\">Headers</Option>\n                <Option value=\"size\">Content Size</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'email':\n        return (\n          <>\n            <Form.Item name=\"provider\" label=\"Email Provider\">\n              <Select>\n                <Option value=\"gmail\">Gmail</Option>\n                <Option value=\"outlook\">Outlook</Option>\n                <Option value=\"imap\">IMAP</Option>\n                <Option value=\"exchange\">Exchange</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"mailbox\" label=\"Mailbox\">\n              <Input placeholder=\"INBOX\" />\n            </Form.Item>\n            <Form.Item name=\"fromEmails\" label=\"From Emails (comma-separated)\">\n              <Input placeholder=\"user@example.com, alerts@service.com\" />\n            </Form.Item>\n            <Form.Item name=\"subjectFilter\" label=\"Subject Filter\">\n              <Input placeholder=\"Alert: \" />\n            </Form.Item>\n          </>\n        );\n      case 'file_change':\n        return (\n          <>\n            <Form.Item name=\"path\" label=\"Path to Monitor\" rules={[{ required: true }]}>\n              <Input placeholder=\"/data/uploads\" />\n            </Form.Item>\n            <Form.Item name=\"recursive\" label=\"Recursive\" valuePropName=\"checked\">\n              <Switch />\n            </Form.Item>\n            <Form.Item name=\"events\" label=\"File Events\">\n              <Select mode=\"multiple\" placeholder=\"Select events\">\n                <Option value=\"created\">Created</Option>\n                <Option value=\"modified\">Modified</Option>\n                <Option value=\"deleted\">Deleted</Option>\n                <Option value=\"moved\">Moved</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"patterns\" label=\"File Patterns (comma-separated)\">\n              <Input placeholder=\"*.pdf, *.docx\" />\n            </Form.Item>\n          </>\n        );\n      case 'database_change':\n        return (\n          <>\n            <Form.Item\n              name=\"connectionString\"\n              label=\"Connection String\"\n              rules={[{ required: true }]}\n            >\n              <Input.Password placeholder=\"mongodb://localhost:27017/mydb\" />\n            </Form.Item>\n            <Form.Item name=\"database\" label=\"Database\">\n              <Input placeholder=\"myapp\" />\n            </Form.Item>\n            <Form.Item name=\"table\" label=\"Table/Collection\">\n              <Input placeholder=\"users\" />\n            </Form.Item>\n            <Form.Item name=\"operation\" label=\"Operation\">\n              <Select>\n                <Option value=\"insert\">Insert</Option>\n                <Option value=\"update\">Update</Option>\n                <Option value=\"delete\">Delete</Option>\n                <Option value=\"any\">Any</Option>\n              </Select>\n            </Form.Item>\n          </>\n        );\n      case 'api_poll':\n        return (\n          <>\n            <Form.Item name=\"url\" label=\"API URL\" rules={[{ required: true }]}>\n              <Input placeholder=\"https://api.example.com/data\" />\n            </Form.Item>\n            <Form.Item name=\"pollIntervalMs\" label=\"Poll Interval (ms)\">\n              <InputNumber min={10000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"responseField\" label=\"Response Field to Monitor\">\n              <Input placeholder=\"data.status\" />\n            </Form.Item>\n            <Form.Item name=\"changeThreshold\" label=\"Change Threshold (for numbers)\">\n              <InputNumber min={0} step={0.1} />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderAdvancedFields = () => (\n    <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n      <Divider>Rate Limiting</Divider>\n      <Form.Item name=\"rateLimitEnabled\" label=\"Enable Rate Limiting\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item dependencies={['rateLimitEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('rateLimitEnabled')) return null;\n          return (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Form.Item name=\"maxTriggersPerMinute\" label=\"Max/Minute\">\n                <InputNumber min={1} />\n              </Form.Item>\n              <Form.Item name=\"maxTriggersPerHour\" label=\"Max/Hour\">\n                <InputNumber min={1} />\n              </Form.Item>\n            </div>\n          );\n        }}\n      </Form.Item>\n\n      <Divider>Security</Divider>\n      <Form.Item name=\"requireHttps\" label=\"Require HTTPS\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n      <Form.Item name=\"allowedIPs\" label=\"Allowed IPs (comma-separated)\">\n        <Input placeholder=\"192.168.1.1, 10.0.0.0/8\" />\n      </Form.Item>\n      <Form.Item name=\"maxPayloadSize\" label=\"Max Payload Size (bytes)\">\n        <InputNumber min={1024} placeholder=\"1048576\" />\n      </Form.Item>\n\n      <Divider>Headers</Divider>\n      <Form.Item name=\"headers\" label=\"Custom Headers (key:value per line)\">\n        <TextArea\n          placeholder=\"Authorization: Bearer token&#10;Content-Type: application/json\"\n          rows={3}\n        />\n      </Form.Item>\n    </Space>\n  );\n\n  const renderTriggersList = () => (\n    <List\n      dataSource={triggers}\n      renderItem={(trigger) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={trigger.enabled}\n              onChange={(checked) => handleToggleTrigger(trigger.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => {\n                setSelectedTrigger(trigger);\n                setTestModalVisible(true);\n              }}\n            >\n              Test\n            </Button>,\n            trigger.triggerType === 'webhook' && (\n              <Button\n                type=\"link\"\n                icon={<CopyOutlined />}\n                onClick={() => {\n                  const config = trigger.configuration as any;\n                  navigator.clipboard.writeText(config.endpoint);\n                  message.success('Webhook URL copied');\n                }}\n              >\n                Copy URL\n              </Button>\n            ),\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingTrigger(trigger.id);\n                // Populate form with existing values\n                form.setFieldsValue({\n                  name: trigger.name,\n                  description: trigger.description,\n                  enabled: trigger.enabled,\n                  triggerType: trigger.triggerType,\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteTrigger(trigger.id)}\n            />,\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {getTriggerIcon(trigger.triggerType)}\n                {trigger.name}\n                <Tag color={trigger.enabled ? 'green' : 'default'}>{trigger.triggerType}</Tag>\n                <Badge\n                  count={trigger.triggerCount}\n                  style={{ backgroundColor: colors.primary[500] }}\n                />\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {trigger.description}\n                <Space>\n                  <Badge status={trigger.enabled ? 'success' : 'default'} />\n                  {trigger.enabled ? 'Active' : 'Inactive'}\n                  {trigger.lastTriggered && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(trigger.lastTriggered).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n                {trigger.triggerType === 'webhook' && (\n                  <Text code style={{ fontSize: '12px' }}>\n                    {(trigger.configuration as any).endpoint}\n                  </Text>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No triggers configured' }}\n    />\n  );\n\n  const renderEventsList = () => (\n    <Table\n      dataSource={recentEvents}\n      size=\"small\"\n      pagination={{ pageSize: 20 }}\n      columns={[\n        {\n          title: 'Time',\n          dataIndex: 'timestamp',\n          key: 'timestamp',\n          width: 150,\n          render: (timestamp) => new Date(timestamp).toLocaleString(),\n        },\n        {\n          title: 'Trigger',\n          dataIndex: 'triggerId',\n          key: 'triggerId',\n          width: 200,\n          render: (triggerId) => {\n            const trigger = triggers.find((t) => t.id === triggerId);\n            return trigger ? trigger.name : triggerId;\n          },\n        },\n        {\n          title: 'Status',\n          dataIndex: 'status',\n          key: 'status',\n          width: 100,\n          render: (status) => <Tag color={getEventStatusColor(status)}>{status}</Tag>,\n        },\n        {\n          title: 'Processing Time',\n          dataIndex: 'processingTimeMs',\n          key: 'processingTimeMs',\n          width: 120,\n          render: (time) => `${time.toFixed(2)}ms`,\n        },\n        {\n          title: 'Source',\n          dataIndex: ['metadata', 'source'],\n          key: 'source',\n          width: 120,\n        },\n        {\n          title: 'Actions',\n          key: 'actions',\n          width: 100,\n          render: (_, event) => (\n            <Button\n              type=\"link\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                Modal.info({\n                  title: 'Event Details',\n                  content: (\n                    <div>\n                      <Paragraph>\n                        <Text strong>ID:</Text> {event.id}\n                      </Paragraph>\n                      <Paragraph>\n                        <Text strong>Raw Data:</Text>\n                        <pre\n                          style={{\n                            marginTop: 8,\n                            background: colors.gray[50],\n                            padding: 12,\n                            borderRadius: 4,\n                          }}\n                        >\n                          {JSON.stringify(event.rawData, null, 2)}\n                        </pre>\n                      </Paragraph>\n                      {event.error && (\n                        <Paragraph>\n                          <Text strong>Error:</Text>\n                          <pre\n                            style={{\n                              marginTop: 8,\n                              background: colors.error[50],\n                              padding: 12,\n                              borderRadius: 4,\n                              color: colors.error[600],\n                            }}\n                          >\n                            {event.error}\n                          </pre>\n                        </Paragraph>\n                      )}\n                    </div>\n                  ),\n                  width: 600,\n                });\n              }}\n            />\n          ),\n        },\n      ]}\n    />\n  );\n\n  const renderMetrics = () => {\n    if (!metrics) return <div>Select a trigger to view metrics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic title=\"Total Events\" value={metrics.totalEvents} />\n          <Statistic\n            title=\"Processed Events\"\n            value={metrics.processedEvents}\n            valueStyle={{ color: colors.success[600] }}\n          />\n          <Statistic\n            title=\"Error Rate\"\n            value={metrics.errorRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: metrics.errorRate > 5 ? colors.error[600] : colors.success[600],\n            }}\n          />\n          <Statistic\n            title=\"Avg Processing Time\"\n            value={metrics.averageProcessingTime}\n            precision={2}\n            suffix=\"ms\"\n          />\n        </div>\n\n        {metrics.topSources.length > 0 && (\n          <Card title=\"Top Sources\" size=\"small\">\n            <List\n              dataSource={metrics.topSources}\n              renderItem={(source) => (\n                <List.Item>\n                  <List.Item.Meta title={source.source} description={`${source.count} events`} />\n                  <Progress\n                    percent={(source.count / metrics.totalEvents) * 100}\n                    size=\"small\"\n                    style={{ width: 100 }}\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getTriggerIcon = (triggerType: string) => {\n    const iconMap = {\n      webhook: <GlobalOutlined />,\n      http_request: <ApiOutlined />,\n      email: <MailOutlined />,\n      file_change: <FileTextOutlined />,\n      database_change: <DatabaseOutlined />,\n      api_poll: <ApiOutlined />,\n      calendar_event: <CalendarOutlined />,\n    };\n    return iconMap[triggerType as keyof typeof iconMap] || <SettingOutlined />;\n  };\n\n  const getEventStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'filtered':\n        return 'orange';\n      case 'rate_limited':\n        return 'purple';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <ThunderboltOutlined />\n            Advanced Triggers\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1200}\n        footer={null}\n        className={cn('trigger-management-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Triggers ({triggers.length})\n              </span>\n            }\n            key=\"triggers\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card title=\"Create Trigger\" size=\"small\">\n                {renderTriggerForm()}\n                {webhookUrl && (\n                  <Alert\n                    message=\"Webhook URL\"\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Text code>{webhookUrl}</Text>\n                        <Button\n                          size=\"small\"\n                          icon={<CopyOutlined />}\n                          onClick={() => {\n                            navigator.clipboard.writeText(webhookUrl);\n                            message.success('URL copied');\n                          }}\n                        >\n                          Copy URL\n                        </Button>\n                      </Space>\n                    }\n                    type=\"success\"\n                    style={{ marginTop: 16 }}\n                  />\n                )}\n              </Card>\n              <Card title=\"Active Triggers\" size=\"small\">\n                {renderTriggersList()}\n              </Card>\n            </div>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CheckCircleOutlined />\n                Events\n              </span>\n            }\n            key=\"events\"\n          >\n            {renderEventsList()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <div>📊</div>\n                Metrics\n              </span>\n            }\n            key=\"metrics\"\n          >\n            <div className=\"mb-4\">\n              <Select\n                placeholder=\"Select a trigger to view metrics\"\n                value={selectedTrigger?.id}\n                onChange={(triggerId) => {\n                  const trigger = triggers.find((t) => t.id === triggerId);\n                  setSelectedTrigger(trigger || null);\n                }}\n                style={{ width: 300 }}\n              >\n                {triggers.map((trigger) => (\n                  <Option key={trigger.id} value={trigger.id}>\n                    {trigger.name}\n                  </Option>\n                ))}\n              </Select>\n            </div>\n            {renderMetrics()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Trigger\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedTrigger) {\n            handleTestTrigger(selectedTrigger.id);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                { test: true, timestamp: new Date().toISOString() },\n                null,\n                2\n              )}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/TriggerPanel.tsx",
        "start": 1,
        "end": 985,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 985,
          "column": 2,
          "position": 8146
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/triggerpanel/TriggerPanel.tsx",
        "start": 4,
        "end": 988,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 988,
          "column": 2,
          "position": 8185
        }
      }
    },
    {
      "format": "javascript",
      "lines": 468,
      "fragment": "={form}\n      layout=\"vertical\"\n      onFinish={handleCreateSchedule}\n      initialValues={{\n        enabled: true,\n        scheduleType: 'cron',\n        timezone: 'UTC',\n        retryEnabled: false,\n        maxAttempts: 3,\n        backoffStrategy: 'exponential',\n        maxConcurrent: 1,\n        queueStrategy: 'fifo',\n        skipIfRunning: false,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Schedule Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"Daily data sync\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Optional description of what this schedule does\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"scheduleType\" label=\"Schedule Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"cron\">Cron Expression</Option>\n          <Option value=\"interval\">Fixed Interval</Option>\n          <Option value=\"once\">One Time</Option>\n          <Option value=\"event-driven\">Event Driven</Option>\n          <Option value=\"conditional\">Conditional</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['scheduleType']} noStyle>\n        {({ getFieldValue }) => {\n          const scheduleType = getFieldValue('scheduleType');\n          return renderScheduleTypeFields(scheduleType);\n        }}\n      </Form.Item>\n\n      <Divider>Advanced Settings</Divider>\n\n      <Form.Item name=\"timezone\" label=\"Timezone\">\n        <Select showSearch>\n          <Option value=\"UTC\">UTC</Option>\n          <Option value=\"America/New_York\">America/New_York</Option>\n          <Option value=\"America/Los_Angeles\">America/Los_Angeles</Option>\n          <Option value=\"Europe/London\">Europe/London</Option>\n          <Option value=\"Asia/Tokyo\">Asia/Tokyo</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"maxConcurrent\" label=\"Max Concurrent Executions\">\n        <InputNumber min={1} max={10} />\n      </Form.Item>\n\n      <Form.Item name=\"queueStrategy\" label=\"Queue Strategy\">\n        <Select>\n          <Option value=\"fifo\">First In, First Out</Option>\n          <Option value=\"lifo\">Last In, First Out</Option>\n          <Option value=\"priority\">Priority Based</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"skipIfRunning\" label=\"Skip If Already Running\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Divider>Retry Policy</Divider>\n\n      <Form.Item name=\"retryEnabled\" label=\"Enable Retries\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item dependencies={['retryEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('retryEnabled')) return null;\n          return (\n            <>\n              <Form.Item name=\"maxAttempts\" label=\"Max Retry Attempts\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n              <Form.Item name=\"backoffStrategy\" label=\"Backoff Strategy\">\n                <Select>\n                  <Option value=\"linear\">Linear</Option>\n                  <Option value=\"exponential\">Exponential</Option>\n                  <Option value=\"fixed\">Fixed</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item name=\"initialDelay\" label=\"Initial Delay (ms)\">\n                <InputNumber min={100} />\n              </Form.Item>\n            </>\n          );\n        }}\n      </Form.Item>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingSchedule ? 'Update Schedule' : 'Create Schedule'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingSchedule(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderScheduleTypeFields = (scheduleType: string) => {\n    switch (scheduleType) {\n      case 'cron':\n        return (\n          <>\n            <Form.Item\n              name=\"cronExpression\"\n              label={\n                <Space>\n                  Cron Expression\n                  <Tooltip title=\"Format: second minute hour day month weekday\">\n                    <InfoCircleOutlined />\n                  </Tooltip>\n                </Space>\n              }\n              rules={[{ required: true, message: 'Please enter a cron expression' }]}\n            >\n              <Input placeholder=\"0 0 9 * * *\" />\n            </Form.Item>\n            <Form.Item name=\"cronDescription\" label=\"Description\">\n              <Input placeholder=\"Every day at 9:00 AM\" />\n            </Form.Item>\n          </>\n        );\n      case 'interval':\n        return (\n          <>\n            <Form.Item name=\"intervalMs\" label=\"Interval (milliseconds)\">\n              <InputNumber min={1000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"maxExecutions\" label=\"Max Executions (optional)\">\n              <InputNumber min={1} />\n            </Form.Item>\n          </>\n        );\n      case 'once':\n        return (\n          <Form.Item name=\"executeAt\" label=\"Execute At\">\n            <DatePicker showTime />\n          </Form.Item>\n        );\n      case 'event-driven':\n        return (\n          <>\n            <Form.Item name=\"eventType\" label=\"Event Type\">\n              <Input placeholder=\"webhook\" />\n            </Form.Item>\n            <Form.Item name=\"eventSource\" label=\"Event Source\">\n              <Input placeholder=\"api.example.com\" />\n            </Form.Item>\n          </>\n        );\n      case 'conditional':\n        return (\n          <>\n            <Form.Item name=\"condition\" label=\"JavaScript Condition\">\n              <TextArea placeholder=\"return data.status === 'ready'\" rows={3} />\n            </Form.Item>\n            <Form.Item name=\"checkIntervalMs\" label=\"Check Interval (ms)\">\n              <InputNumber min={1000} placeholder=\"60000\" />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderSchedulesList = () => (\n    <List\n      dataSource={schedules}\n      renderItem={(schedule) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={schedule.enabled}\n              onChange={(checked) => handleToggleSchedule(schedule.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => handleTriggerSchedule(schedule.id)}\n              disabled={!schedule.enabled}\n            >\n              Trigger\n            </Button>,\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingSchedule(schedule.id);\n                form.setFieldsValue({\n                  name: schedule.name,\n                  description: schedule.description,\n                  enabled: schedule.enabled,\n                  scheduleType: schedule.scheduleType,\n                  // Add other fields based on schedule type\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteSchedule(schedule.id)}\n            />,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {schedule.name}\n                <Tag color={schedule.enabled ? 'green' : 'default'}>{schedule.scheduleType}</Tag>\n                {schedule.nextExecution && (\n                  <Tag color=\"blue\">Next: {new Date(schedule.nextExecution).toLocaleString()}</Tag>\n                )}\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {schedule.description}\n                <Space>\n                  <Badge status={schedule.enabled ? 'success' : 'default'} />\n                  {schedule.enabled ? 'Active' : 'Inactive'}\n                  {schedule.lastExecuted && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(schedule.lastExecuted).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No schedules configured' }}\n    />\n  );\n\n  const renderExecutionsList = () => (\n    <List\n      dataSource={activeExecutions}\n      renderItem={(execution) => (\n        <List.Item\n          actions={[\n            execution.status === 'running' && (\n              <Button\n                type=\"link\"\n                danger\n                icon={<PauseCircleOutlined />}\n                onClick={() => handleCancelExecution(execution.id)}\n              >\n                Cancel\n              </Button>\n            ),\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                Execution {execution.id.split('_')[1]}\n                <Tag color={getExecutionStatusColor(execution.status)}>{execution.status}</Tag>\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                <div>Scheduled: {new Date(execution.scheduledAt).toLocaleString()}</div>\n                {execution.startedAt && (\n                  <div>Started: {new Date(execution.startedAt).toLocaleString()}</div>\n                )}\n                {execution.duration && (\n                  <div>Duration: {(execution.duration / 1000).toFixed(2)}s</div>\n                )}\n                {execution.error && (\n                  <div style={{ color: colors.error[500] }}>Error: {execution.error}</div>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No active executions' }}\n    />\n  );\n\n  const renderAnalytics = () => {\n    if (!analytics) return <div>Select a schedule to view analytics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic\n            title=\"Success Rate\"\n            value={analytics.successRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: analytics.successRate > 90 ? colors.success[600] : colors.warning[600],\n            }}\n          />\n          <Statistic title=\"Total Executions\" value={analytics.totalExecutions} />\n          <Statistic\n            title=\"Average Duration\"\n            value={analytics.averageDuration / 1000}\n            precision={2}\n            suffix=\"s\"\n          />\n          <Statistic\n            title=\"Failed Executions\"\n            value={analytics.failedExecutions}\n            valueStyle={{\n              color: analytics.failedExecutions > 0 ? colors.error[600] : colors.success[600],\n            }}\n          />\n        </div>\n\n        {analytics.recommendations.length > 0 && (\n          <Card title=\"Recommendations\" size=\"small\">\n            <List\n              dataSource={analytics.recommendations}\n              renderItem={(rec) => (\n                <List.Item>\n                  <List.Item.Meta\n                    title={\n                      <Space>\n                        {rec.description}\n                        <Tag\n                          color={\n                            rec.priority === 'high'\n                              ? 'red'\n                              : rec.priority === 'medium'\n                                ? 'orange'\n                                : 'green'\n                          }\n                        >\n                          {rec.priority}\n                        </Tag>\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <div>\n                          <strong>Implementation:</strong> {rec.implementation}\n                        </div>\n                        <div>\n                          <strong>Impact:</strong> {rec.estimatedImpact}\n                        </div>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getExecutionStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'blue';\n      case 'completed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'cancelled':\n        return 'orange';\n      case 'skipped':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <ClockCircleOutlined />\n          Workflow Scheduling\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1000}\n      footer={null}\n      className={cn('workflow-scheduling-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <CalendarOutlined />\n              Schedules ({schedules.length})\n            </span>\n          }\n          key=\"schedules\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card title=\"Create Schedule\" size=\"small\">\n              {renderScheduleForm()}\n            </Card>\n            <Card title=\"Active Schedules\" size=\"small\">\n              {renderSchedulesList()}\n            </Card>\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Executions ({activeExecutions.length})\n            </span>\n          }\n          key=\"executions\"\n        >\n          {renderExecutionsList()}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Analytics\n            </span>\n          }\n          key=\"analytics\"\n        >\n          <div className=\"mb-4\">\n            <Select\n              placeholder=\"Select a schedule to view analytics\"\n              value={selectedSchedule?.id}\n              onChange={(scheduleId) => {\n                const schedule = schedules.find((s) => s.id === scheduleId);\n                setSelectedSchedule(schedule || null);\n              }}\n              style={{ width: 300 }}\n            >\n              {schedules.map((schedule) => (\n                <Option key={schedule.id} value={schedule.id}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx",
        "start": 244,
        "end": 711,
        "startLoc": {
          "line": 244,
          "column": 5,
          "position": 1984
        },
        "endLoc": {
          "line": 711,
          "column": 2,
          "position": 5581
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx",
        "start": 248,
        "end": 715,
        "startLoc": {
          "line": 248,
          "column": 5,
          "position": 2036
        },
        "endLoc": {
          "line": 715,
          "column": 2,
          "position": 5633
        }
      }
    },
    {
      "format": "tsx",
      "lines": 722,
      "fragment": "/**\n * Workflow Scheduling Panel\n *\n * Provides comprehensive workflow scheduling interface with cron expressions,\n * interval scheduling, conditional execution, and advanced configuration options.\n */\n\nimport {\n  BarChartOutlined,\n  CalendarOutlined,\n  ClockCircleOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  InfoCircleOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  DatePicker,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Tabs,\n  Tag,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type ScheduleAnalytics,\n  type ScheduleConfiguration,\n  type ScheduledExecution,\n  workflowScheduler,\n} from '@/core/services/workflowScheduler';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\n\ninterface SchedulingPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const SchedulingPanel: React.FC<SchedulingPanelProps> = ({\n  workflowId,\n  visible,\n  onClose,\n}) => {\n  const [schedules, setSchedules] = useState<ScheduleConfiguration[]>([]);\n  const [activeExecutions, setActiveExecutions] = useState<ScheduledExecution[]>([]);\n  const [selectedSchedule, setSelectedSchedule] = useState<ScheduleConfiguration | null>(null);\n  const [analytics, setAnalytics] = useState<ScheduleAnalytics | null>(null);\n  const [activeTab, setActiveTab] = useState('schedules');\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (visible) {\n      loadSchedules();\n      loadActiveExecutions();\n    }\n  }, [visible, loadActiveExecutions, loadSchedules]);\n\n  useEffect(() => {\n    if (selectedSchedule) {\n      loadAnalytics(selectedSchedule.id);\n    }\n  }, [selectedSchedule, loadAnalytics]);\n\n  const loadSchedules = () => {\n    const allSchedules = workflowScheduler.getAllSchedules();\n    const workflowSchedules = allSchedules.filter((s) => s.workflowId === workflowId);\n    setSchedules(workflowSchedules);\n  };\n\n  const loadActiveExecutions = () => {\n    const allExecutions = workflowScheduler.getActiveExecutions();\n    const workflowExecutions = allExecutions.filter((e) => e.workflowId === workflowId);\n    setActiveExecutions(workflowExecutions);\n  };\n\n  const loadAnalytics = async (scheduleId: string) => {\n    try {\n      const analytics = await workflowScheduler.getScheduleAnalytics(scheduleId);\n      setAnalytics(analytics);\n    } catch (_error) {}\n  };\n\n  const handleCreateSchedule = async (values: any) => {\n    setLoading(true);\n    try {\n      const scheduleConfig = {\n        workflowId,\n        name: values.name,\n        description: values.description,\n        enabled: values.enabled ?? true,\n        scheduleType: values.scheduleType,\n        configuration: buildScheduleConfiguration(values),\n        timezone: values.timezone || 'UTC',\n        retryPolicy: {\n          enabled: values.retryEnabled ?? false,\n          maxAttempts: values.maxAttempts ?? 3,\n          backoffStrategy: values.backoffStrategy ?? 'exponential',\n          initialDelayMs: values.initialDelay ?? 1000,\n          maxDelayMs: values.maxDelay ?? 300000,\n          retryConditions: values.retryConditions?.split(',').map((c: string) => c.trim()) ?? [],\n        },\n        concurrency: {\n          maxConcurrent: values.maxConcurrent ?? 1,\n          queueStrategy: values.queueStrategy ?? 'fifo',\n          skipIfRunning: values.skipIfRunning ?? false,\n          timeout: values.timeout ?? 3600000,\n        },\n        conditions: [],\n        notifications: {\n          onSuccess: [],\n          onFailure: [],\n          onSkip: [],\n          onRetry: [],\n        },\n        metadata: {},\n      };\n\n      workflowScheduler.createSchedule(scheduleConfig);\n      message.success('Schedule created successfully');\n      loadSchedules();\n      form.resetFields();\n      setEditingSchedule(null);\n    } catch (_error) {\n      message.error('Failed to create schedule');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buildScheduleConfiguration = (values: any) => {\n    switch (values.scheduleType) {\n      case 'cron':\n        return {\n          expression: values.cronExpression,\n          description: values.cronDescription,\n        };\n      case 'interval':\n        return {\n          intervalMs: values.intervalMs,\n          maxExecutions: values.maxExecutions,\n          startTime: values.startTime?.toISOString(),\n          endTime: values.endTime?.toISOString(),\n        };\n      case 'once':\n        return {\n          executeAt: values.executeAt?.toISOString(),\n          delay: values.delay,\n        };\n      case 'event-driven':\n        return {\n          eventType: values.eventType,\n          eventSource: values.eventSource,\n          filters: [],\n          debounceMs: values.debounceMs,\n          maxEventsPerWindow: values.maxEventsPerWindow,\n        };\n      case 'conditional':\n        return {\n          condition: values.condition,\n          checkIntervalMs: values.checkIntervalMs,\n          maxChecks: values.maxChecks,\n          dependencies: values.dependencies?.split(',').map((d: string) => d.trim()) ?? [],\n        };\n      default:\n        return {\n          eventType: '',\n          eventSource: '',\n          filters: [],\n          debounceMs: 0,\n          maxEventsPerWindow: 0,\n        };\n    }\n  };\n\n  const handleToggleSchedule = async (scheduleId: string, enabled: boolean) => {\n    try {\n      workflowScheduler.toggleSchedule(scheduleId, enabled);\n      message.success(`Schedule ${enabled ? 'enabled' : 'disabled'}`);\n      loadSchedules();\n    } catch (_error) {\n      message.error('Failed to toggle schedule');\n    }\n  };\n\n  const handleDeleteSchedule = async (scheduleId: string) => {\n    try {\n      workflowScheduler.deleteSchedule(scheduleId);\n      message.success('Schedule deleted');\n      loadSchedules();\n      if (selectedSchedule?.id === scheduleId) {\n        setSelectedSchedule(null);\n        setAnalytics(null);\n      }\n    } catch (_error) {\n      message.error('Failed to delete schedule');\n    }\n  };\n\n  const handleTriggerSchedule = async (scheduleId: string) => {\n    try {\n      await workflowScheduler.triggerSchedule(scheduleId, true);\n      message.success('Schedule triggered successfully');\n      loadActiveExecutions();\n    } catch (_error) {\n      message.error('Failed to trigger schedule');\n    }\n  };\n\n  const handleCancelExecution = (executionId: string) => {\n    try {\n      workflowScheduler.cancelExecution(executionId);\n      message.success('Execution cancelled');\n      loadActiveExecutions();\n    } catch (_error) {\n      message.error('Failed to cancel execution');\n    }\n  };\n\n  const renderScheduleForm = () => (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={handleCreateSchedule}\n      initialValues={{\n        enabled: true,\n        scheduleType: 'cron',\n        timezone: 'UTC',\n        retryEnabled: false,\n        maxAttempts: 3,\n        backoffStrategy: 'exponential',\n        maxConcurrent: 1,\n        queueStrategy: 'fifo',\n        skipIfRunning: false,\n      }}\n    >\n      <Form.Item\n        name=\"name\"\n        label=\"Schedule Name\"\n        rules={[{ required: true, message: 'Please enter a name' }]}\n      >\n        <Input placeholder=\"Daily data sync\" />\n      </Form.Item>\n\n      <Form.Item name=\"description\" label=\"Description\">\n        <TextArea placeholder=\"Optional description of what this schedule does\" rows={2} />\n      </Form.Item>\n\n      <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item name=\"scheduleType\" label=\"Schedule Type\">\n        <Select onChange={() => form.resetFields(['configuration'])}>\n          <Option value=\"cron\">Cron Expression</Option>\n          <Option value=\"interval\">Fixed Interval</Option>\n          <Option value=\"once\">One Time</Option>\n          <Option value=\"event-driven\">Event Driven</Option>\n          <Option value=\"conditional\">Conditional</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item dependencies={['scheduleType']} noStyle>\n        {({ getFieldValue }) => {\n          const scheduleType = getFieldValue('scheduleType');\n          return renderScheduleTypeFields(scheduleType);\n        }}\n      </Form.Item>\n\n      <Divider>Advanced Settings</Divider>\n\n      <Form.Item name=\"timezone\" label=\"Timezone\">\n        <Select showSearch>\n          <Option value=\"UTC\">UTC</Option>\n          <Option value=\"America/New_York\">America/New_York</Option>\n          <Option value=\"America/Los_Angeles\">America/Los_Angeles</Option>\n          <Option value=\"Europe/London\">Europe/London</Option>\n          <Option value=\"Asia/Tokyo\">Asia/Tokyo</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"maxConcurrent\" label=\"Max Concurrent Executions\">\n        <InputNumber min={1} max={10} />\n      </Form.Item>\n\n      <Form.Item name=\"queueStrategy\" label=\"Queue Strategy\">\n        <Select>\n          <Option value=\"fifo\">First In, First Out</Option>\n          <Option value=\"lifo\">Last In, First Out</Option>\n          <Option value=\"priority\">Priority Based</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item name=\"skipIfRunning\" label=\"Skip If Already Running\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Divider>Retry Policy</Divider>\n\n      <Form.Item name=\"retryEnabled\" label=\"Enable Retries\" valuePropName=\"checked\">\n        <Switch />\n      </Form.Item>\n\n      <Form.Item dependencies={['retryEnabled']} noStyle>\n        {({ getFieldValue }) => {\n          if (!getFieldValue('retryEnabled')) return null;\n          return (\n            <>\n              <Form.Item name=\"maxAttempts\" label=\"Max Retry Attempts\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n              <Form.Item name=\"backoffStrategy\" label=\"Backoff Strategy\">\n                <Select>\n                  <Option value=\"linear\">Linear</Option>\n                  <Option value=\"exponential\">Exponential</Option>\n                  <Option value=\"fixed\">Fixed</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item name=\"initialDelay\" label=\"Initial Delay (ms)\">\n                <InputNumber min={100} />\n              </Form.Item>\n            </>\n          );\n        }}\n      </Form.Item>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {editingSchedule ? 'Update Schedule' : 'Create Schedule'}\n          </Button>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              setEditingSchedule(null);\n            }}\n          >\n            Cancel\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n\n  const renderScheduleTypeFields = (scheduleType: string) => {\n    switch (scheduleType) {\n      case 'cron':\n        return (\n          <>\n            <Form.Item\n              name=\"cronExpression\"\n              label={\n                <Space>\n                  Cron Expression\n                  <Tooltip title=\"Format: second minute hour day month weekday\">\n                    <InfoCircleOutlined />\n                  </Tooltip>\n                </Space>\n              }\n              rules={[{ required: true, message: 'Please enter a cron expression' }]}\n            >\n              <Input placeholder=\"0 0 9 * * *\" />\n            </Form.Item>\n            <Form.Item name=\"cronDescription\" label=\"Description\">\n              <Input placeholder=\"Every day at 9:00 AM\" />\n            </Form.Item>\n          </>\n        );\n      case 'interval':\n        return (\n          <>\n            <Form.Item name=\"intervalMs\" label=\"Interval (milliseconds)\">\n              <InputNumber min={1000} placeholder=\"300000\" />\n            </Form.Item>\n            <Form.Item name=\"maxExecutions\" label=\"Max Executions (optional)\">\n              <InputNumber min={1} />\n            </Form.Item>\n          </>\n        );\n      case 'once':\n        return (\n          <Form.Item name=\"executeAt\" label=\"Execute At\">\n            <DatePicker showTime />\n          </Form.Item>\n        );\n      case 'event-driven':\n        return (\n          <>\n            <Form.Item name=\"eventType\" label=\"Event Type\">\n              <Input placeholder=\"webhook\" />\n            </Form.Item>\n            <Form.Item name=\"eventSource\" label=\"Event Source\">\n              <Input placeholder=\"api.example.com\" />\n            </Form.Item>\n          </>\n        );\n      case 'conditional':\n        return (\n          <>\n            <Form.Item name=\"condition\" label=\"JavaScript Condition\">\n              <TextArea placeholder=\"return data.status === 'ready'\" rows={3} />\n            </Form.Item>\n            <Form.Item name=\"checkIntervalMs\" label=\"Check Interval (ms)\">\n              <InputNumber min={1000} placeholder=\"60000\" />\n            </Form.Item>\n          </>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderSchedulesList = () => (\n    <List\n      dataSource={schedules}\n      renderItem={(schedule) => (\n        <List.Item\n          actions={[\n            <Switch\n              checked={schedule.enabled}\n              onChange={(checked) => handleToggleSchedule(schedule.id, checked)}\n              checkedChildren=\"ON\"\n              unCheckedChildren=\"OFF\"\n            />,\n            <Button\n              type=\"link\"\n              icon={<PlayCircleOutlined />}\n              onClick={() => handleTriggerSchedule(schedule.id)}\n              disabled={!schedule.enabled}\n            >\n              Trigger\n            </Button>,\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setEditingSchedule(schedule.id);\n                form.setFieldsValue({\n                  name: schedule.name,\n                  description: schedule.description,\n                  enabled: schedule.enabled,\n                  scheduleType: schedule.scheduleType,\n                  // Add other fields based on schedule type\n                });\n              }}\n            />,\n            <Button\n              type=\"link\"\n              danger\n              icon={<DeleteOutlined />}\n              onClick={() => handleDeleteSchedule(schedule.id)}\n            />,\n          ]}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                {schedule.name}\n                <Tag color={schedule.enabled ? 'green' : 'default'}>{schedule.scheduleType}</Tag>\n                {schedule.nextExecution && (\n                  <Tag color=\"blue\">Next: {new Date(schedule.nextExecution).toLocaleString()}</Tag>\n                )}\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                {schedule.description}\n                <Space>\n                  <Badge status={schedule.enabled ? 'success' : 'default'} />\n                  {schedule.enabled ? 'Active' : 'Inactive'}\n                  {schedule.lastExecuted && (\n                    <span style={{ color: colors.gray[500] }}>\n                      Last: {new Date(schedule.lastExecuted).toLocaleString()}\n                    </span>\n                  )}\n                </Space>\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No schedules configured' }}\n    />\n  );\n\n  const renderExecutionsList = () => (\n    <List\n      dataSource={activeExecutions}\n      renderItem={(execution) => (\n        <List.Item\n          actions={[\n            execution.status === 'running' && (\n              <Button\n                type=\"link\"\n                danger\n                icon={<PauseCircleOutlined />}\n                onClick={() => handleCancelExecution(execution.id)}\n              >\n                Cancel\n              </Button>\n            ),\n          ].filter(Boolean)}\n        >\n          <List.Item.Meta\n            title={\n              <Space>\n                Execution {execution.id.split('_')[1]}\n                <Tag color={getExecutionStatusColor(execution.status)}>{execution.status}</Tag>\n              </Space>\n            }\n            description={\n              <Space direction=\"vertical\" size=\"small\">\n                <div>Scheduled: {new Date(execution.scheduledAt).toLocaleString()}</div>\n                {execution.startedAt && (\n                  <div>Started: {new Date(execution.startedAt).toLocaleString()}</div>\n                )}\n                {execution.duration && (\n                  <div>Duration: {(execution.duration / 1000).toFixed(2)}s</div>\n                )}\n                {execution.error && (\n                  <div style={{ color: colors.error[500] }}>Error: {execution.error}</div>\n                )}\n              </Space>\n            }\n          />\n        </List.Item>\n      )}\n      locale={{ emptyText: 'No active executions' }}\n    />\n  );\n\n  const renderAnalytics = () => {\n    if (!analytics) return <div>Select a schedule to view analytics</div>;\n\n    return (\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Statistic\n            title=\"Success Rate\"\n            value={analytics.successRate}\n            precision={1}\n            suffix=\"%\"\n            valueStyle={{\n              color: analytics.successRate > 90 ? colors.success[600] : colors.warning[600],\n            }}\n          />\n          <Statistic title=\"Total Executions\" value={analytics.totalExecutions} />\n          <Statistic\n            title=\"Average Duration\"\n            value={analytics.averageDuration / 1000}\n            precision={2}\n            suffix=\"s\"\n          />\n          <Statistic\n            title=\"Failed Executions\"\n            value={analytics.failedExecutions}\n            valueStyle={{\n              color: analytics.failedExecutions > 0 ? colors.error[600] : colors.success[600],\n            }}\n          />\n        </div>\n\n        {analytics.recommendations.length > 0 && (\n          <Card title=\"Recommendations\" size=\"small\">\n            <List\n              dataSource={analytics.recommendations}\n              renderItem={(rec) => (\n                <List.Item>\n                  <List.Item.Meta\n                    title={\n                      <Space>\n                        {rec.description}\n                        <Tag\n                          color={\n                            rec.priority === 'high'\n                              ? 'red'\n                              : rec.priority === 'medium'\n                                ? 'orange'\n                                : 'green'\n                          }\n                        >\n                          {rec.priority}\n                        </Tag>\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <div>\n                          <strong>Implementation:</strong> {rec.implementation}\n                        </div>\n                        <div>\n                          <strong>Impact:</strong> {rec.estimatedImpact}\n                        </div>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n      </Space>\n    );\n  };\n\n  const getExecutionStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'blue';\n      case 'completed':\n        return 'green';\n      case 'failed':\n        return 'red';\n      case 'cancelled':\n        return 'orange';\n      case 'skipped':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <ClockCircleOutlined />\n          Workflow Scheduling\n        </Space>\n      }\n      open={visible}\n      onCancel={onClose}\n      width={1000}\n      footer={null}\n      className={cn('workflow-scheduling-panel')}\n    >\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane\n          tab={\n            <span>\n              <CalendarOutlined />\n              Schedules ({schedules.length})\n            </span>\n          }\n          key=\"schedules\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card title=\"Create Schedule\" size=\"small\">\n              {renderScheduleForm()}\n            </Card>\n            <Card title=\"Active Schedules\" size=\"small\">\n              {renderSchedulesList()}\n            </Card>\n          </div>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <ThunderboltOutlined />\n              Executions ({activeExecutions.length})\n            </span>\n          }\n          key=\"executions\"\n        >\n          {renderExecutionsList()}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Analytics\n            </span>\n          }\n          key=\"analytics\"\n        >\n          <div className=\"mb-4\">\n            <Select\n              placeholder=\"Select a schedule to view analytics\"\n              value={selectedSchedule?.id}\n              onChange={(scheduleId) => {\n                const schedule = schedules.find((s) => s.id === scheduleId);\n                setSelectedSchedule(schedule || null);\n              }}\n              style={{ width: 300 }}\n            >\n              {schedules.map((schedule) => (\n                <Option key={schedule.id} value={schedule.id}>\n                  {schedule.name}\n                </Option>\n              ))}\n            </Select>\n          </div>\n          {renderAnalytics()}\n        </TabPane>\n      </Tabs>\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/SchedulingPanel.tsx",
        "start": 1,
        "end": 722,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 722,
          "column": 2,
          "position": 5638
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/schedulingpanel/SchedulingPanel.tsx",
        "start": 5,
        "end": 726,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 726,
          "column": 2,
          "position": 5690
        }
      }
    },
    {
      "format": "javascript",
      "lines": 193,
      "fragment": "={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors flex items-center space-x-2\"\n          >\n            <span>←</span>\n            <span>Back to canvas</span>\n          </button>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <span>/</span>\n            <span>{nodeDefinition.displayName}</span>\n            <span className=\"text-xs px-2 py-1 bg-gray-700 rounded\">{currentNode.type}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={handleSaveWorkflow}\n            disabled={isSaving || !currentWorkflow}\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm rounded transition-colors\"\n            title=\"Save workflow without closing modal\"\n          >\n            <SaveOutlined className={isSaving ? 'animate-spin' : ''} />\n            <span>{isSaving ? 'Saving...' : 'Save'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left Column: Input Data */}\n        <div\n          className=\"bg-gray-900 border-r border-gray-600 flex flex-col\"\n          style={{ width: `${leftWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📥</span>\n              INPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {(enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n            testResults?.data &&\n            Array.isArray(testResults.data) &&\n            testResults.data.length > 0 ? (\n              <EmailInputPanel\n                emails={testResults.data}\n                selectedEmailId={selectedEmail?.id}\n                onEmailSelect={setSelectedEmail}\n              />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent input data would appear here</div>\n            ) : currentNode?.type === 'condition' ? (\n              <div className=\"text-gray-400 text-sm\">Condition input data would appear here</div>\n            ) : (\n              <DataVisualizationPanel\n                data={inputData}\n                title=\"Input Data\"\n                description=\"Data from connected nodes\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Middle Column: Parameters & Settings */}\n        <div\n          className=\"bg-gray-800 flex flex-col border-l border-r border-gray-600\"\n          style={{ width: `${middleWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-700 flex items-center justify-between flex-shrink-0\">\n            <div\n              className=\"cursor-col-resize p-2 hover:bg-gray-600 rounded mr-2 flex items-center\"\n              onMouseDown={handleMouseDown}\n              title=\"Drag to resize column width\"\n            >\n              <div className=\"text-gray-300 text-xs font-mono\">⋮⋮</div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <h2 className=\"text-lg font-semibold text-white\">{nodeDefinition.displayName}</h2>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleTestNode}\n                disabled={isTestingNode}\n                className={`px-3 py-1 rounded text-sm transition-colors ${\n                  isTestingNode\n                    ? 'bg-yellow-600 text-white cursor-wait'\n                    : 'bg-green-600 hover:bg-green-700 text-white'\n                }`}\n              >\n                {isTestingNode ? '⏳ Testing...' : '🧪 Test step'}\n              </button>\n\n              {/* Debug: Test credential modal button */}\n              <button\n                onClick={() => {\n                  handleCreateCredential('gmailOAuth2');\n                }}\n                className=\"px-2 py-1 rounded text-xs bg-purple-600 hover:bg-purple-700 text-white transition-colors\"\n              >\n                🔧 Test Modal\n              </button>\n            </div>\n          </div>\n          <div className=\"flex-1 p-6 overflow-y-auto\">\n            {/* Use enhanced property rendering for Transform nodes and other enhanced types */}\n            {currentNode?.type === 'transform' || enhancedNodeType?.id ? (\n              <PropertyGroupRenderer\n                properties={\n                  registryProperties as Array<\n                    INodeProperty & { displayOptions?: EnhancedDisplayOptions }\n                  >\n                }\n                values={formState}\n                onChange={handleParameterChange}\n                evaluationContext={{\n                  $json: inputData,\n                  $node: {},\n                  $vars: {},\n                  $parameters: formState,\n                }}\n                context={evaluationContext}\n              />\n            ) : (\n              <DynamicPropertyRenderer\n                properties={registryProperties as INodeProperty[]}\n                formState={formState}\n                onChange={handleParameterChange}\n                context={evaluationContext}\n              />\n            )}\n\n            {/* Display test results */}\n            {testResults && (\n              <div className=\"mt-6 p-4 rounded border-l-4 border-l-blue-500 bg-gray-700\">\n                <h4 className=\"text-white font-medium mb-2\">Test Results</h4>\n                <div\n                  className={`text-sm ${testResults.success ? 'text-green-400' : 'text-red-400'}`}\n                >\n                  {testResults.message}\n                </div>\n                {testResults.data && (\n                  <div className=\"mt-2 text-xs text-gray-300\">\n                    {Array.isArray(testResults.data)\n                      ? `Found ${testResults.data.length} items`\n                      : 'Data received'}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Column: Output Data */}\n        <div\n          className=\"bg-gray-900 border-l border-gray-600 flex flex-col\"\n          style={{ width: rightWidth, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📤</span>\n              OUTPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail') ? (\n              <EmailOutputPanel selectedEmail={selectedEmail} />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent output data would appear here</div>\n            ) : currentNode?.type === 'transform' ? (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Transform Output\"\n                description=\"Transformed data output\"\n              />\n            ) : (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Output Data\"\n                description=\"Output from node execution\"\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Credential Modal */}\n      <CredentialModal\n        isOpen={isCredentialModalOpen}\n        onClose={() => {\n          setIsCredentialModalOpen(false);\n        }}\n        credentialType={currentCredentialType}\n        onSave={handleSaveCredential}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx",
        "start": 342,
        "end": 534,
        "startLoc": {
          "line": 342,
          "column": 8,
          "position": 3019
        },
        "endLoc": {
          "line": 534,
          "column": 2,
          "position": 4513
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx",
        "start": 352,
        "end": 544,
        "startLoc": {
          "line": 352,
          "column": 8,
          "position": 3149
        },
        "endLoc": {
          "line": 544,
          "column": 2,
          "position": 4643
        }
      }
    },
    {
      "format": "tsx",
      "lines": 547,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { SaveOutlined } from '@ant-design/icons';\nimport { message } from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { EnhancedDisplayOptions } from '@/app/node-extensions/components/ConditionalPropertyRenderer';\nimport { PropertyGroupRenderer } from '@/app/node-extensions/components/ConditionalPropertyRenderer';\nimport { CredentialApiService, nodeRegistry, useLeanWorkflowStore } from '@/core';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { useCredentialStore } from '@/core/stores/credentialStore';\nimport type {\n  PropertyEvaluationContext,\n  PropertyFormState,\n  PropertyValue,\n} from '@/core/types/dynamicProperties';\nimport DataVisualizationPanel from '@/design-system/components/DataVisualization/DataVisualizationPanel';\nimport CredentialModal from './CredentialModal';\nimport DynamicPropertyRenderer from './DynamicPropertyRenderer';\nimport EmailInputPanel from './EmailInputPanel';\nimport EmailOutputPanel from './EmailOutputPanel';\n\nconst credentialApiService = new CredentialApiService();\n\nimport { gmailEnhancedProperties } from '@/app/data/nodes/communication/gmail/enhanced-properties';\nimport { nodeMigrationService } from '@/core/utils/nodeVersioning';\n\ninterface NodeConfigurationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  nodeId?: string;\n}\n\nconst NodeConfigurationPanel: React.FC<NodeConfigurationPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const { getNodeById, updateNodeParameters, saveWorkflow, currentWorkflow, nodes, edges } =\n    useLeanWorkflowStore();\n  const { credentials, loadCredentials, credentialTypes } = useCredentialStore();\n\n  const [leftWidth, setLeftWidth] = useState(700);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isTestingNode, setIsTestingNode] = useState(false);\n  const [testResults, setTestResults] = useState<any>(null);\n  const [selectedEmail, setSelectedEmail] = useState<any>(null);\n  const [isCredentialModalOpen, setIsCredentialModalOpen] = useState(false);\n  const [currentCredentialType, setCurrentCredentialType] = useState('');\n\n  const middleWidth = 550;\n\n  const currentNode = useMemo(() => {\n    if (!nodeId) return null;\n    return getNodeById(nodeId);\n  }, [nodeId, getNodeById]);\n\n  const nodeDefinition = useMemo(() => {\n    if (!currentNode) return null;\n    return nodeRegistry.getNodeTypeDescription(currentNode.type);\n  }, [currentNode]);\n\n  // Get enhanced node type from node data (Gmail-specific)\n  const enhancedNodeType = useMemo(() => {\n    if (!currentNode) return null;\n\n    // For registry-based system, derive node type from node.type\n    if (currentNode.type === 'gmail-enhanced' || currentNode.type?.includes('gmail')) {\n      return { id: 'gmail-enhanced' };\n    }\n    if (currentNode.type === 'ai-agent') {\n      return { id: 'ai-agent' };\n    }\n\n    return null;\n  }, [currentNode]);\n\n  // Get connected input nodes for display\n  const connectedInputNodes = useMemo(() => {\n    if (!currentNode || !Array.isArray(nodes) || !Array.isArray(edges)) return [];\n    return edges\n      .filter((edge) => edge.target === currentNode.id)\n      .map((edge) => nodes.find((node) => node.id === edge.source))\n      .filter(Boolean);\n  }, [currentNode, edges, nodes]);\n\n  // Extract input data from connected nodes\n  const inputData = useMemo(() => {\n    const data: any = {};\n    connectedInputNodes.forEach((node: any, index) => {\n      if (node?.parameters?.outputData) {\n        data[`input_${index}`] = node.parameters.outputData;\n      }\n    });\n    return data;\n  }, [connectedInputNodes]);\n\n  useEffect(() => {\n    if (currentNode) {\n      setFormState(currentNode.parameters || {});\n    }\n  }, [currentNode]);\n\n  // Auto-select first email when Gmail test results come in\n  useEffect(() => {\n    if (\n      testResults?.success &&\n      (enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n      testResults?.data &&\n      Array.isArray(testResults.data) &&\n      testResults.data.length > 0\n    ) {\n      setSelectedEmail(testResults.data[0]);\n    }\n  }, [testResults, enhancedNodeType?.id, currentNode?.type]);\n\n  // Load credentials on mount\n  useEffect(() => {\n    loadCredentials();\n  }, [loadCredentials]);\n\n  // Debug modal state changes\n  useEffect(() => {}, []);\n\n  const handleParameterChange = useCallback(\n    (parameterName: string, value: PropertyValue) => {\n      const newFormState = { ...formState, [parameterName]: value };\n      setFormState(newFormState);\n      if (currentNode) {\n        updateNodeParameters(currentNode.id, newFormState);\n      }\n    },\n    [formState, currentNode, updateNodeParameters]\n  );\n\n  // Gmail-specific test functionality\n  const handleTestNode = useCallback(async () => {\n    if (!currentNode || !nodeDefinition) return;\n\n    setIsTestingNode(true);\n    setTestResults(null);\n\n    try {\n      // Check if this is a Gmail enhanced node\n      if (currentNode.type?.includes('gmail') || enhancedNodeType?.id === 'gmail-enhanced') {\n        // Use the registry test method for Gmail trigger\n        const result = await nodeRegistry.testNodeType(\n          currentNode.type,\n          formState,\n          currentNode.credentials || {}\n        );\n\n        setTestResults({\n          success: result.success,\n          message: result.message || 'Gmail test completed',\n          data: result.data,\n        });\n      } else {\n        // Generic node testing\n        const result = await nodeRegistry.testNodeType(\n          currentNode.type,\n          formState,\n          currentNode.credentials || {}\n        );\n\n        setTestResults({\n          success: result.success,\n          message: result.message || 'Test completed',\n          data: result.data,\n        });\n      }\n    } catch (error: any) {\n      setTestResults({\n        success: false,\n        message: error.message || 'Test failed',\n      });\n    } finally {\n      setIsTestingNode(false);\n    }\n  }, [currentNode, nodeDefinition, formState, enhancedNodeType]);\n\n  // Credential management handlers\n  const handleCreateCredential = useCallback((type: string) => {\n    setCurrentCredentialType(type);\n    setIsCredentialModalOpen(true);\n  }, []);\n\n  const handleCredentialSelect = useCallback(\n    (credential: any) => {\n      // Handle credential selection\n      const credentialId = credential.id;\n      handleParameterChange('credential', credentialId);\n    },\n    [handleParameterChange]\n  );\n\n  const handleCredentialChange = useCallback(\n    (credentialId: string) => {\n      handleParameterChange('credential', credentialId);\n    },\n    [handleParameterChange]\n  );\n\n  const handleSaveCredential = useCallback(\n    async (credentialData: any) => {\n      try {\n        await credentialApiService.createCredential(credentialData);\n        await loadCredentials();\n        setIsCredentialModalOpen(false);\n        message.success('Credential saved successfully');\n      } catch (error: any) {\n        message.error(`Failed to save credential: ${error.message}`);\n      }\n    },\n    [loadCredentials]\n  );\n\n  // Create evaluation context for dynamic properties\n  const evaluationContext: PropertyEvaluationContext = useMemo(\n    () => ({\n      formState,\n      nodeData: currentNode ? { ...currentNode } : undefined,\n      credentials: credentials as Array<Record<string, unknown>>,\n      credentialTypes: credentialTypes as unknown as Array<Record<string, unknown>>,\n      onCreateCredential: handleCreateCredential,\n      onCredentialSelect: handleCredentialSelect,\n      onCredentialChange: handleCredentialChange,\n    }),\n    [\n      formState,\n      currentNode,\n      credentials,\n      credentialTypes,\n      handleCreateCredential,\n      handleCredentialSelect,\n      handleCredentialChange,\n    ]\n  );\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging) return;\n      const containerWidth = window.innerWidth;\n      const minLeftWidth = 200;\n      const maxLeftWidth = containerWidth - middleWidth - 200;\n      setLeftWidth((prevWidth) =>\n        Math.max(minLeftWidth, Math.min(maxLeftWidth, prevWidth + e.movementX))\n      );\n    },\n    [isDragging]\n  );\n\n  useEffect(() => {\n    if (isDragging) {\n      document.body.style.cursor = 'col-resize';\n      document.body.style.userSelect = 'none';\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const handleSaveWorkflow = useCallback(async () => {\n    if (!currentWorkflow) {\n      message.error('No workflow to save');\n      return;\n    }\n    setIsSaving(true);\n    try {\n      await saveWorkflow();\n      message.success('Workflow saved successfully');\n    } catch (error: any) {\n      message.error(`Failed to save workflow: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [currentWorkflow, saveWorkflow]);\n\n  // Enhanced property resolution with Transform node support\n  const registryProperties = useMemo(() => {\n    // For enhanced nodes like Gmail, get properties from enhanced node type\n    if (enhancedNodeType?.id === 'gmail-enhanced') {\n      // Use directly imported Gmail enhanced properties for comprehensive form\n      return gmailEnhancedProperties;\n    }\n\n    // For Transform nodes, check if migration is needed and use enhanced version\n    if (currentNode?.type === 'transform') {\n      try {\n        const currentVersion = currentNode.typeVersion || currentNode.version || 1;\n        const latestVersion = nodeMigrationService.getLatestVersion('transform');\n\n        if (currentVersion < latestVersion) {\n          // Migrate the node instance\n          const migratedNode = nodeMigrationService.migrateNodeInstance(currentNode, latestVersion);\n\n          // Update the node with migrated parameters\n          if (migratedNode.parameters !== currentNode.parameters) {\n            updateNodeParameters(currentNode.id, migratedNode.parameters);\n          }\n        }\n\n        // Get the enhanced transform node properties (synchronously)\n        const enhancedTransformNode = nodeRegistry.getEnhancedNodeTypeSync('transform');\n        if (enhancedTransformNode?.configuration?.properties) {\n          return enhancedTransformNode.configuration.properties;\n        }\n      } catch (_error) {}\n    }\n\n    if (!nodeDefinition?.properties) return [];\n    return nodeDefinition.properties;\n  }, [nodeDefinition, enhancedNodeType, currentNode, updateNodeParameters]);\n\n  if (!isOpen || !currentNode || !nodeDefinition) {\n    return null;\n  }\n\n  const rightWidth = `calc(100vw - ${leftWidth}px - ${middleWidth}px)`;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col bg-gray-900\">\n      <div className=\"w-full p-4 border-b border-gray-700 bg-gray-900 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors flex items-center space-x-2\"\n          >\n            <span>←</span>\n            <span>Back to canvas</span>\n          </button>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <span>/</span>\n            <span>{nodeDefinition.displayName}</span>\n            <span className=\"text-xs px-2 py-1 bg-gray-700 rounded\">{currentNode.type}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={handleSaveWorkflow}\n            disabled={isSaving || !currentWorkflow}\n            className=\"flex items-center space-x-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm rounded transition-colors\"\n            title=\"Save workflow without closing modal\"\n          >\n            <SaveOutlined className={isSaving ? 'animate-spin' : ''} />\n            <span>{isSaving ? 'Saving...' : 'Save'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left Column: Input Data */}\n        <div\n          className=\"bg-gray-900 border-r border-gray-600 flex flex-col\"\n          style={{ width: `${leftWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📥</span>\n              INPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {(enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail')) &&\n            testResults?.data &&\n            Array.isArray(testResults.data) &&\n            testResults.data.length > 0 ? (\n              <EmailInputPanel\n                emails={testResults.data}\n                selectedEmailId={selectedEmail?.id}\n                onEmailSelect={setSelectedEmail}\n              />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent input data would appear here</div>\n            ) : currentNode?.type === 'condition' ? (\n              <div className=\"text-gray-400 text-sm\">Condition input data would appear here</div>\n            ) : (\n              <DataVisualizationPanel\n                data={inputData}\n                title=\"Input Data\"\n                description=\"Data from connected nodes\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Middle Column: Parameters & Settings */}\n        <div\n          className=\"bg-gray-800 flex flex-col border-l border-r border-gray-600\"\n          style={{ width: `${middleWidth}px`, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-700 flex items-center justify-between flex-shrink-0\">\n            <div\n              className=\"cursor-col-resize p-2 hover:bg-gray-600 rounded mr-2 flex items-center\"\n              onMouseDown={handleMouseDown}\n              title=\"Drag to resize column width\"\n            >\n              <div className=\"text-gray-300 text-xs font-mono\">⋮⋮</div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <h2 className=\"text-lg font-semibold text-white\">{nodeDefinition.displayName}</h2>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleTestNode}\n                disabled={isTestingNode}\n                className={`px-3 py-1 rounded text-sm transition-colors ${\n                  isTestingNode\n                    ? 'bg-yellow-600 text-white cursor-wait'\n                    : 'bg-green-600 hover:bg-green-700 text-white'\n                }`}\n              >\n                {isTestingNode ? '⏳ Testing...' : '🧪 Test step'}\n              </button>\n\n              {/* Debug: Test credential modal button */}\n              <button\n                onClick={() => {\n                  handleCreateCredential('gmailOAuth2');\n                }}\n                className=\"px-2 py-1 rounded text-xs bg-purple-600 hover:bg-purple-700 text-white transition-colors\"\n              >\n                🔧 Test Modal\n              </button>\n            </div>\n          </div>\n          <div className=\"flex-1 p-6 overflow-y-auto\">\n            {/* Use enhanced property rendering for Transform nodes and other enhanced types */}\n            {currentNode?.type === 'transform' || enhancedNodeType?.id ? (\n              <PropertyGroupRenderer\n                properties={\n                  registryProperties as Array<\n                    INodeProperty & { displayOptions?: EnhancedDisplayOptions }\n                  >\n                }\n                values={formState}\n                onChange={handleParameterChange}\n                evaluationContext={{\n                  $json: inputData,\n                  $node: {},\n                  $vars: {},\n                  $parameters: formState,\n                }}\n                context={evaluationContext}\n              />\n            ) : (\n              <DynamicPropertyRenderer\n                properties={registryProperties as INodeProperty[]}\n                formState={formState}\n                onChange={handleParameterChange}\n                context={evaluationContext}\n              />\n            )}\n\n            {/* Display test results */}\n            {testResults && (\n              <div className=\"mt-6 p-4 rounded border-l-4 border-l-blue-500 bg-gray-700\">\n                <h4 className=\"text-white font-medium mb-2\">Test Results</h4>\n                <div\n                  className={`text-sm ${testResults.success ? 'text-green-400' : 'text-red-400'}`}\n                >\n                  {testResults.message}\n                </div>\n                {testResults.data && (\n                  <div className=\"mt-2 text-xs text-gray-300\">\n                    {Array.isArray(testResults.data)\n                      ? `Found ${testResults.data.length} items`\n                      : 'Data received'}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Column: Output Data */}\n        <div\n          className=\"bg-gray-900 border-l border-gray-600 flex flex-col\"\n          style={{ width: rightWidth, height: 'calc(100vh - 80px)' }}\n        >\n          <div className=\"p-4 border-b border-gray-600 bg-gray-800 flex-shrink-0\">\n            <h3 className=\"text-sm font-medium text-gray-100 mb-3 flex items-center\">\n              <span className=\"mr-2\">📤</span>\n              OUTPUT\n            </h3>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {/* Conditional rendering based on node type */}\n            {enhancedNodeType?.id === 'gmail-enhanced' || currentNode?.type?.includes('gmail') ? (\n              <EmailOutputPanel selectedEmail={selectedEmail} />\n            ) : enhancedNodeType?.id === 'ai-agent' || currentNode?.type === 'ai-agent' ? (\n              <div className=\"text-gray-400 text-sm\">AI Agent output data would appear here</div>\n            ) : currentNode?.type === 'transform' ? (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Transform Output\"\n                description=\"Transformed data output\"\n              />\n            ) : (\n              <DataVisualizationPanel\n                data={testResults?.data}\n                title=\"Output Data\"\n                description=\"Output from node execution\"\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Credential Modal */}\n      <CredentialModal\n        isOpen={isCredentialModalOpen}\n        onClose={() => {\n          setIsCredentialModalOpen(false);\n        }}\n        credentialType={currentCredentialType}\n        onSave={handleSaveCredential}\n      />\n\n      {/* Debug info - commented out for production */}\n      {/* {console.log('🔧 Modal state debug:', {\n        isCredentialModalOpen,\n        currentCredentialType,\n        credentials: credentials?.length\n      })} */}\n    </div>\n  );\n};\n\nexport default NodeConfigurationPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/NodePropertyPanel.tsx",
        "start": 1,
        "end": 547,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 547,
          "column": 2,
          "position": 4546
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/nodepropertypanel/NodePropertyPanel.tsx",
        "start": 11,
        "end": 557,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 130
        },
        "endLoc": {
          "line": 557,
          "column": 2,
          "position": 4676
        }
      }
    },
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "={<StopOutlined />} onClick={handleStop} size=\"small\">\n              Stop\n            </Button>\n          ) : (\n            <Dropdown\n              menu={{ items: runMenuItems }}\n              trigger={['click']}\n              disabled={nodes.length === 0}\n            >\n              <Button type=\"primary\" icon={<PlayCircleOutlined />} loading={testing} size=\"small\">\n                Run <DownOutlined />\n              </Button>\n            </Dropdown>\n          )}\n\n          {/* Test button */}\n          <Button\n            icon={<BugOutlined />}\n            onClick={handleTest}\n            disabled={nodes.length === 0}\n            size=\"small\"\n          >\n            Test\n          </Button>\n\n          {/* Execution status */}\n          {currentExecution && (\n            <Badge\n              status={\n                currentExecution.status === 'running'\n                  ? 'processing'\n                  : currentExecution.status === 'completed'\n                    ? 'success'\n                    : currentExecution.status === 'failed'\n                      ? 'error'\n                      : 'default'\n              }\n              text={\n                <span className=\"text-sm\">\n                  {currentExecution.status === 'running'\n                    ? `Running (${(currentExecution as any).progress?.completedNodes?.length || 0}/${(currentExecution as any).progress?.totalNodes || 0})`\n                    : `${currentExecution.status} - ${Math.round((currentExecution.duration || 0) / 1000)}s`}\n                </span>\n              }\n            />\n          )}\n        </Space>\n\n        <Space>\n          {/* Workflow info */}\n          <span className=\"text-sm text-gray-500\">\n            {nodes.length} nodes • {edges.length} connections\n          </span>\n\n          {/* More actions */}\n          <Dropdown menu={{ items: moreMenuItems }} trigger={['click']}>\n            <Button icon={<SettingOutlined />} size=\"small\">\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Space>\n      </div>\n\n      {/* Workflow Tester Modal */}\n      {showTester && (\n        <WorkflowTester nodes={nodes} edges={edges} onClose={() => setShowTester(false)} />\n      )}\n\n      {/* Execution History Modal */}\n      {showHistory && <ExecutionHistory onClose={() => setShowHistory(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx",
        "start": 211,
        "end": 280,
        "startLoc": {
          "line": 211,
          "column": 5,
          "position": 1761
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 2332
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 212,
        "end": 281,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 1774
        },
        "endLoc": {
          "line": 281,
          "column": 2,
          "position": 2345
        }
      }
    },
    {
      "format": "tsx",
      "lines": 283,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Execution Toolbar Component - Controls for running workflows\n\nimport {\n  BugOutlined,\n  DownOutlined,\n  ExportOutlined,\n  HistoryOutlined,\n  PlayCircleOutlined,\n  SaveOutlined,\n  SettingOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport { Badge, Button, Dropdown, message, Space } from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { Edge, Node } from 'reactflow';\nimport { WorkflowApiService } from '@/core';\nimport type { WorkflowExecution } from '@/core/schemas';\nimport { exportWorkflowToBackend, validateWorkflowForExport } from '@/core/utils/workflowExporter';\nimport { ExecutionHistory } from '../ExecutionHistory/ExecutionHistory';\nimport { WorkflowTester } from '../WorkflowTester/WorkflowTester';\n\nconst workflowApiService = new WorkflowApiService();\n\ninterface ExecutionToolbarProps {\n  nodes: Node[];\n  edges: Edge[];\n  currentExecution?: WorkflowExecution | null;\n  onExecutionStart?: (executionId: string) => void;\n  onExecutionStop?: () => void;\n}\n\nexport const ExecutionToolbar: React.FC<ExecutionToolbarProps> = ({\n  nodes,\n  edges,\n  currentExecution,\n  onExecutionStart,\n  onExecutionStop,\n}) => {\n  const [testing, setTesting] = useState(false);\n  const [showTester, setShowTester] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [, setSaving] = useState(false);\n\n  const isRunning = currentExecution?.status === 'running';\n  const canRun = nodes.length > 0 && !isRunning;\n\n  const handleTest = () => {\n    setShowTester(true);\n  };\n\n  const handleRun = async () => {\n    if (!canRun) return;\n\n    // Validate workflow first\n    const validation = validateWorkflowForExport(nodes, edges);\n    if (!validation.isValid) {\n      message.error(`Cannot run workflow: ${validation.errors.join(', ')}`);\n      return;\n    }\n\n    if (validation.warnings.length > 0) {\n      message.warning(`Warnings: ${validation.warnings.join(', ')}`);\n    }\n\n    try {\n      setTesting(true);\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n\n      const execution = await workflowApiService.executeWorkflow({\n        workflow: workflowJson,\n        triggerData: {},\n        options: {\n          timeout: 600000, // 10 minutes\n        },\n      });\n\n      message.success('Workflow execution started');\n      onExecutionStart?.(execution.id);\n    } catch (error: any) {\n      message.error(`Failed to start workflow: ${error.message}`);\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const handleStop = async () => {\n    if (!currentExecution) return;\n\n    try {\n      await workflowApiService.stopExecution(currentExecution.id);\n      message.success('Workflow execution stopped');\n      onExecutionStop?.();\n    } catch (error: any) {\n      message.error(`Failed to stop workflow: ${error.message}`);\n    }\n  };\n\n  const handleSave = async () => {\n    if (nodes.length === 0) {\n      message.warning('Cannot save empty workflow');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n\n      await workflowApiService.createWorkflow({\n        name: `Workflow ${new Date().toLocaleDateString()}`,\n        description: 'Saved from workflow editor',\n        nodes: workflowJson.nodes.map((node) => ({\n          id: node.id,\n          type: node.type,\n          position: { x: node.position[0], y: node.position[1] },\n          data: {\n            label: node.name,\n            parameters: node.parameters,\n            credentials:\n              typeof node.credentials === 'object' && node.credentials\n                ? Object.keys(node.credentials)[0] || undefined\n                : (node.credentials as string | undefined),\n            disabled: node.disabled,\n            notes: node.notes,\n          },\n        })),\n        edges: [], // Convert connections to edges if needed\n        version: 1,\n        isActive: true,\n        tags: ['editor'],\n      });\n\n      message.success('Workflow saved successfully');\n    } catch (error: any) {\n      message.error(`Failed to save workflow: ${error.message}`);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleExport = () => {\n    if (nodes.length === 0) {\n      message.warning('Cannot export empty workflow');\n      return;\n    }\n\n    try {\n      const workflowJson = exportWorkflowToBackend(nodes, edges);\n      const blob = new Blob([JSON.stringify(workflowJson, null, 2)], {\n        type: 'application/json',\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `workflow-${Date.now()}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      message.success('Workflow exported successfully');\n    } catch (error: any) {\n      message.error(`Failed to export workflow: ${error.message}`);\n    }\n  };\n\n  const runMenuItems = [\n    {\n      key: 'run',\n      label: 'Run Workflow',\n      icon: <PlayCircleOutlined />,\n      onClick: handleRun,\n      disabled: !canRun,\n    },\n    {\n      key: 'test',\n      label: 'Test Workflow',\n      icon: <BugOutlined />,\n      onClick: handleTest,\n    },\n  ];\n\n  const moreMenuItems = [\n    {\n      key: 'save',\n      label: 'Save Workflow',\n      icon: <SaveOutlined />,\n      onClick: handleSave,\n    },\n    {\n      key: 'export',\n      label: 'Export JSON',\n      icon: <ExportOutlined />,\n      onClick: handleExport,\n    },\n    {\n      key: 'history',\n      label: 'Execution History',\n      icon: <HistoryOutlined />,\n      onClick: () => setShowHistory(true),\n    },\n  ];\n\n  return (\n    <div className=\"execution-toolbar\">\n      <div className=\"bg-white border-b border-gray-200 px-4 py-2 flex items-center justify-between\">\n        <Space>\n          {/* Primary execution controls */}\n          {isRunning ? (\n            <Button danger icon={<StopOutlined />} onClick={handleStop} size=\"small\">\n              Stop\n            </Button>\n          ) : (\n            <Dropdown\n              menu={{ items: runMenuItems }}\n              trigger={['click']}\n              disabled={nodes.length === 0}\n            >\n              <Button type=\"primary\" icon={<PlayCircleOutlined />} loading={testing} size=\"small\">\n                Run <DownOutlined />\n              </Button>\n            </Dropdown>\n          )}\n\n          {/* Test button */}\n          <Button\n            icon={<BugOutlined />}\n            onClick={handleTest}\n            disabled={nodes.length === 0}\n            size=\"small\"\n          >\n            Test\n          </Button>\n\n          {/* Execution status */}\n          {currentExecution && (\n            <Badge\n              status={\n                currentExecution.status === 'running'\n                  ? 'processing'\n                  : currentExecution.status === 'completed'\n                    ? 'success'\n                    : currentExecution.status === 'failed'\n                      ? 'error'\n                      : 'default'\n              }\n              text={\n                <span className=\"text-sm\">\n                  {currentExecution.status === 'running'\n                    ? `Running (${(currentExecution as any).progress?.completedNodes?.length || 0}/${(currentExecution as any).progress?.totalNodes || 0})`\n                    : `${currentExecution.status} - ${Math.round((currentExecution.duration || 0) / 1000)}s`}\n                </span>\n              }\n            />\n          )}\n        </Space>\n\n        <Space>\n          {/* Workflow info */}\n          <span className=\"text-sm text-gray-500\">\n            {nodes.length} nodes • {edges.length} connections\n          </span>\n\n          {/* More actions */}\n          <Dropdown menu={{ items: moreMenuItems }} trigger={['click']}>\n            <Button icon={<SettingOutlined />} size=\"small\">\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Space>\n      </div>\n\n      {/* Workflow Tester Modal */}\n      {showTester && (\n        <WorkflowTester nodes={nodes} edges={edges} onClose={() => setShowTester(false)} />\n      )}\n\n      {/* Execution History Modal */}\n      {showHistory && <ExecutionHistory onClose={() => setShowHistory(false)} />}\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionToolbar.tsx",
        "start": 1,
        "end": 283,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 283,
          "column": 2,
          "position": 2347
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executiontoolbar/ExecutionToolbar.tsx",
        "start": 2,
        "end": 284,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 284,
          "column": 2,
          "position": 2360
        }
      }
    },
    {
      "format": "javascript",
      "lines": 247,
      "fragment": "={() => setAutoScroll(!autoScroll)}\n              className={cn(\n                'text-xs px-2 py-1 rounded',\n                autoScroll ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'\n              )}\n            >\n              Auto-scroll\n            </button>\n            <button\n              onClick={() => {\n                // Clear logs implementation\n              }}\n              className=\"text-xs px-2 py-1 rounded bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n        <div\n          ref={consoleRef}\n          className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto text-xs font-mono\"\n        >\n          {logs.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No logs yet. Execute a workflow to see real-time logs.\n            </div>\n          ) : (\n            logs.map((log, index) => (\n              <div\n                key={index}\n                className={cn(\n                  'mb-1 p-1 rounded',\n                  log.level === 'error' && 'bg-red-900 text-red-200',\n                  log.level === 'warn' && 'bg-yellow-900 text-yellow-200',\n                  log.level === 'info' && 'text-gray-300',\n                  log.level === 'debug' && 'text-gray-500'\n                )}\n              >\n                <span className=\"text-gray-500\">\n                  [{new Date(log.timestamp).toLocaleTimeString()}]\n                </span>\n                <span className=\"ml-2 text-blue-400\">[{log.nodeId}]</span>\n                <span className=\"ml-2\">{log.message}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderVariablesTab = () => {\n    const variables = getExecutionVariables();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Variables</h3>\n        <div className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto\">\n          {Object.keys(variables).length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No variables available. Execute nodes to see output data.\n            </div>\n          ) : (\n            Object.entries(variables).map(([key, value]) => (\n              <div key={key} className=\"mb-3 p-2 bg-gray-800 rounded\">\n                <div className=\"text-blue-400 text-xs font-mono mb-1\">{key}</div>\n                <div className=\"text-gray-300 text-xs break-all\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}\n                  </pre>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetricsTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Performance Metrics</h3>\n        <div className=\"flex-1 space-y-3\">\n          {/* Execution time metrics */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Node Execution Times</h4>\n            {performanceMetrics.nodeExecutionTimes.size === 0 ? (\n              <div className=\"text-gray-500 text-xs\">No timing data available</div>\n            ) : (\n              <div className=\"space-y-1\">\n                {Array.from(performanceMetrics.nodeExecutionTimes.entries()).map(\n                  ([nodeId, time]) => (\n                    <div key={nodeId} className=\"flex justify-between text-xs\">\n                      <span className=\"text-blue-400\">{nodeId}</span>\n                      <span className=\"text-gray-300\">\n                        {time < 1000 ? `${time}ms` : `${(time / 1000).toFixed(2)}s`}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Resource usage */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Resource Usage</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Peak Memory:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.peakMemory\n                    ? `${(performanceMetrics.resourceUsage.peakMemory / 1024 / 1024).toFixed(1)} MB`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">CPU Time:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.totalCpuTime\n                    ? `${performanceMetrics.resourceUsage.totalCpuTime}ms`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Network Requests:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.networkRequests || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderHistoryTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Execution History</h3>\n        <div className=\"flex-1 space-y-2 overflow-y-auto\">\n          {executionHistory.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">No execution history</div>\n          ) : (\n            executionHistory.slice(0, 10).map((execution) => (\n              <div\n                key={execution.id}\n                className=\"bg-gray-900 rounded border border-gray-700 p-2 hover:bg-gray-800 cursor-pointer\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div\n                      className={cn(\n                        'text-xs font-medium',\n                        execution.status === 'completed' && 'text-green-400',\n                        execution.status === 'failed' && 'text-red-400',\n                        execution.status === 'running' && 'text-blue-400'\n                      )}\n                    >\n                      {execution.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-1\">\n                      {execution.startTime && new Date(execution.startTime).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {execution.duration && `${(execution.duration / 1000).toFixed(1)}s`}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!isVisible) {\n    return (\n      <button\n        onClick={onToggle}\n        className={cn(\n          'fixed z-40 bg-gray-800 text-white p-2 rounded-l shadow-lg hover:bg-gray-700 transition-colors',\n          position === 'right'\n            ? 'right-0 top-1/2 -translate-y-1/2'\n            : 'bottom-0 left-1/2 -translate-x-1/2 rounded-t'\n        )}\n        title=\"Show execution panel\"\n      >\n        {position === 'right' ? '←' : '↑'} Execution\n      </button>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-30 bg-gray-800 border-l border-gray-700 shadow-xl',\n        position === 'right' ? 'right-0 top-0 h-full w-80' : 'bottom-0 left-0 right-0 h-80 border-t'\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-sm font-semibold text-white\">Execution Monitor</h2>\n          <div\n            className={cn('w-2 h-2 rounded-full', isConnected ? 'bg-green-500' : 'bg-red-500')}\n            title={isConnected ? 'Connected' : 'Disconnected'}\n          />\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setDebugMode(!debugMode)}\n            className={cn(\n              'text-xs px-2 py-1 rounded',\n              debugMode ? 'bg-yellow-600 text-white' : 'bg-gray-700 text-gray-300'\n            )}\n          >\n            Debug\n          </button>\n          <button onClick={onToggle} className=\"text-gray-400 hover:text-white\">\n            ✕\n          </button>\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      {currentExecution && (\n        <div className=\"p-3 border-b border-gray-700\">{renderProgressBar()}</div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-700\">\n        {(['console', 'variables', 'metrics', 'history'] as const).map((tab) => (\n          <button\n            key={tab}\n            onClick={() => setActiveTab(tab)}\n            className={cn(\n              'px-3 py-2 text-xs font-medium border-b-2 transition-colors',\n              activeTab === tab\n                ? 'border-blue-500 text-blue-400'\n                : 'border-transparent text-gray-400 hover:text-gray-200'\n            )}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx",
        "start": 131,
        "end": 377,
        "startLoc": {
          "line": 131,
          "column": 8,
          "position": 1026
        },
        "endLoc": {
          "line": 377,
          "column": 2,
          "position": 3053
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx",
        "start": 135,
        "end": 381,
        "startLoc": {
          "line": 135,
          "column": 8,
          "position": 1078
        },
        "endLoc": {
          "line": 381,
          "column": 2,
          "position": 3105
        }
      }
    },
    {
      "format": "tsx",
      "lines": 395,
      "fragment": "/**\n * Execution Panel\n *\n * Real-time execution monitoring panel inspired by SIM's copilot panel\n * and n8n's execution monitoring. Provides execution console, variables,\n * and performance metrics in a collapsible side panel.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { useEnhancedExecutionStore } from '@/core/stores/enhancedExecutionStore';\nimport { cn } from '@/design-system/utils';\n\ninterface ExecutionPanelProps {\n  isVisible: boolean;\n  onToggle: () => void;\n  position?: 'right' | 'bottom';\n}\n\nexport const ExecutionPanel: React.FC<ExecutionPanelProps> = ({\n  isVisible,\n  onToggle,\n  position = 'right',\n}) => {\n  const [activeTab, setActiveTab] = useState<'console' | 'variables' | 'metrics' | 'history'>(\n    'console'\n  );\n  const [autoScroll, setAutoScroll] = useState(true);\n\n  const {\n    currentExecution,\n    progress,\n    nodeStates,\n    performanceMetrics,\n    executionHistory,\n    isConnected,\n    lastUpdateTimestamp,\n    debugMode,\n    setDebugMode,\n  } = useEnhancedExecutionStore();\n\n  // Auto-scroll to bottom for console logs\n  const consoleRef = React.useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (autoScroll && consoleRef.current) {\n      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;\n    }\n  }, [autoScroll]);\n\n  // Get all logs from all nodes\n  const getAllLogs = () => {\n    const logs: Array<{\n      nodeId: string;\n      level: string;\n      message: string;\n      timestamp: string;\n    }> = [];\n\n    nodeStates.forEach((state, nodeId) => {\n      if (state.debugInfo?.logs) {\n        state.debugInfo.logs.forEach((log) => {\n          logs.push({\n            nodeId,\n            ...log,\n          });\n        });\n      }\n    });\n\n    return logs.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  };\n\n  // Get current execution variables\n  const getExecutionVariables = () => {\n    const variables: Record<string, any> = {};\n\n    nodeStates.forEach((state, nodeId) => {\n      if (state.outputData) {\n        variables[`${nodeId}_output`] = state.outputData;\n      }\n      if (state.debugInfo?.watchedVariables) {\n        Object.entries(state.debugInfo.watchedVariables).forEach(([key, value]) => {\n          variables[`${nodeId}_${key}`] = value;\n        });\n      }\n    });\n\n    return variables;\n  };\n\n  const renderProgressBar = () => {\n    if (!progress) return null;\n\n    const { progressPercentage, completedNodes, totalNodes, failedNodes } = progress;\n\n    return (\n      <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-medium text-gray-300\">Execution Progress</span>\n          <span className=\"text-sm text-gray-400\">\n            {completedNodes}/{totalNodes} nodes\n          </span>\n        </div>\n\n        <div className=\"w-full bg-gray-700 rounded-full h-2\">\n          <div\n            className={cn(\n              'h-2 rounded-full transition-all duration-300',\n              failedNodes > 0 ? 'bg-red-500' : 'bg-blue-500'\n            )}\n            style={{ width: `${progressPercentage}%` }}\n          />\n        </div>\n\n        {failedNodes > 0 && (\n          <div className=\"mt-2 text-xs text-red-400\">{failedNodes} node(s) failed</div>\n        )}\n      </div>\n    );\n  };\n\n  const renderConsoleTab = () => {\n    const logs = getAllLogs();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h3 className=\"text-sm font-medium text-gray-300\">Console</h3>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setAutoScroll(!autoScroll)}\n              className={cn(\n                'text-xs px-2 py-1 rounded',\n                autoScroll ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'\n              )}\n            >\n              Auto-scroll\n            </button>\n            <button\n              onClick={() => {\n                // Clear logs implementation\n              }}\n              className=\"text-xs px-2 py-1 rounded bg-gray-700 text-gray-300 hover:bg-gray-600\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n\n        <div\n          ref={consoleRef}\n          className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto text-xs font-mono\"\n        >\n          {logs.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No logs yet. Execute a workflow to see real-time logs.\n            </div>\n          ) : (\n            logs.map((log, index) => (\n              <div\n                key={index}\n                className={cn(\n                  'mb-1 p-1 rounded',\n                  log.level === 'error' && 'bg-red-900 text-red-200',\n                  log.level === 'warn' && 'bg-yellow-900 text-yellow-200',\n                  log.level === 'info' && 'text-gray-300',\n                  log.level === 'debug' && 'text-gray-500'\n                )}\n              >\n                <span className=\"text-gray-500\">\n                  [{new Date(log.timestamp).toLocaleTimeString()}]\n                </span>\n                <span className=\"ml-2 text-blue-400\">[{log.nodeId}]</span>\n                <span className=\"ml-2\">{log.message}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderVariablesTab = () => {\n    const variables = getExecutionVariables();\n\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Variables</h3>\n        <div className=\"flex-1 bg-gray-900 rounded border border-gray-700 p-2 overflow-y-auto\">\n          {Object.keys(variables).length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">\n              No variables available. Execute nodes to see output data.\n            </div>\n          ) : (\n            Object.entries(variables).map(([key, value]) => (\n              <div key={key} className=\"mb-3 p-2 bg-gray-800 rounded\">\n                <div className=\"text-blue-400 text-xs font-mono mb-1\">{key}</div>\n                <div className=\"text-gray-300 text-xs break-all\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}\n                  </pre>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetricsTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Performance Metrics</h3>\n        <div className=\"flex-1 space-y-3\">\n          {/* Execution time metrics */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Node Execution Times</h4>\n            {performanceMetrics.nodeExecutionTimes.size === 0 ? (\n              <div className=\"text-gray-500 text-xs\">No timing data available</div>\n            ) : (\n              <div className=\"space-y-1\">\n                {Array.from(performanceMetrics.nodeExecutionTimes.entries()).map(\n                  ([nodeId, time]) => (\n                    <div key={nodeId} className=\"flex justify-between text-xs\">\n                      <span className=\"text-blue-400\">{nodeId}</span>\n                      <span className=\"text-gray-300\">\n                        {time < 1000 ? `${time}ms` : `${(time / 1000).toFixed(2)}s`}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Resource usage */}\n          <div className=\"bg-gray-900 rounded border border-gray-700 p-3\">\n            <h4 className=\"text-xs font-semibold text-gray-400 mb-2\">Resource Usage</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Peak Memory:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.peakMemory\n                    ? `${(performanceMetrics.resourceUsage.peakMemory / 1024 / 1024).toFixed(1)} MB`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">CPU Time:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.totalCpuTime\n                    ? `${performanceMetrics.resourceUsage.totalCpuTime}ms`\n                    : 'N/A'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Network Requests:</span>\n                <span className=\"text-gray-300\">\n                  {performanceMetrics.resourceUsage.networkRequests || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderHistoryTab = () => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Execution History</h3>\n        <div className=\"flex-1 space-y-2 overflow-y-auto\">\n          {executionHistory.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-4\">No execution history</div>\n          ) : (\n            executionHistory.slice(0, 10).map((execution) => (\n              <div\n                key={execution.id}\n                className=\"bg-gray-900 rounded border border-gray-700 p-2 hover:bg-gray-800 cursor-pointer\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div\n                      className={cn(\n                        'text-xs font-medium',\n                        execution.status === 'completed' && 'text-green-400',\n                        execution.status === 'failed' && 'text-red-400',\n                        execution.status === 'running' && 'text-blue-400'\n                      )}\n                    >\n                      {execution.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-1\">\n                      {execution.startTime && new Date(execution.startTime).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {execution.duration && `${(execution.duration / 1000).toFixed(1)}s`}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!isVisible) {\n    return (\n      <button\n        onClick={onToggle}\n        className={cn(\n          'fixed z-40 bg-gray-800 text-white p-2 rounded-l shadow-lg hover:bg-gray-700 transition-colors',\n          position === 'right'\n            ? 'right-0 top-1/2 -translate-y-1/2'\n            : 'bottom-0 left-1/2 -translate-x-1/2 rounded-t'\n        )}\n        title=\"Show execution panel\"\n      >\n        {position === 'right' ? '←' : '↑'} Execution\n      </button>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-30 bg-gray-800 border-l border-gray-700 shadow-xl',\n        position === 'right' ? 'right-0 top-0 h-full w-80' : 'bottom-0 left-0 right-0 h-80 border-t'\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-sm font-semibold text-white\">Execution Monitor</h2>\n          <div\n            className={cn('w-2 h-2 rounded-full', isConnected ? 'bg-green-500' : 'bg-red-500')}\n            title={isConnected ? 'Connected' : 'Disconnected'}\n          />\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setDebugMode(!debugMode)}\n            className={cn(\n              'text-xs px-2 py-1 rounded',\n              debugMode ? 'bg-yellow-600 text-white' : 'bg-gray-700 text-gray-300'\n            )}\n          >\n            Debug\n          </button>\n          <button onClick={onToggle} className=\"text-gray-400 hover:text-white\">\n            ✕\n          </button>\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      {currentExecution && (\n        <div className=\"p-3 border-b border-gray-700\">{renderProgressBar()}</div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-700\">\n        {(['console', 'variables', 'metrics', 'history'] as const).map((tab) => (\n          <button\n            key={tab}\n            onClick={() => setActiveTab(tab)}\n            className={cn(\n              'px-3 py-2 text-xs font-medium border-b-2 transition-colors',\n              activeTab === tab\n                ? 'border-blue-500 text-blue-400'\n                : 'border-transparent text-gray-400 hover:text-gray-200'\n            )}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 p-3 overflow-hidden\">\n        {activeTab === 'console' && renderConsoleTab()}\n        {activeTab === 'variables' && renderVariablesTab()}\n        {activeTab === 'metrics' && renderMetricsTab()}\n        {activeTab === 'history' && renderHistoryTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default ExecutionPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ExecutionPanel.tsx",
        "start": 1,
        "end": 395,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 395,
          "column": 2,
          "position": 3195
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/executionpanel/ExecutionPanel.tsx",
        "start": 5,
        "end": 399,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 399,
          "column": 2,
          "position": 3247
        }
      }
    },
    {
      "format": "javascript",
      "lines": 402,
      "fragment": "={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            rows={4}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'boolean':\n        return <Switch checked={value || false} onChange={onChange} disabled={disabled} />;\n\n      case 'select':\n        return (\n          <Select\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n        return (\n          <Select\n            mode=\"multiple\"\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            showTime\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={value}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={disabled}\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            beforeUpload={() => false}\n            onChange={(info) => {\n              if (info.file) {\n                onChange(info.file);\n              }\n            }}\n            disabled={disabled}\n          >\n            <Button icon={<PlusOutlined />} disabled={disabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <div>\n            <TextArea\n              value={typeof value === 'string' ? value : JSON.stringify(value, null, 2)}\n              onChange={(e) => {\n                try {\n                  const parsed = JSON.parse(e.target.value);\n                  onChange(parsed);\n                } catch {\n                  onChange(e.target.value);\n                }\n              }}\n              placeholder={property.placeholder}\n              disabled={disabled}\n              rows={6}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            {value && typeof value === 'object' && (\n              <div className=\"mt-2\">\n                <Button size=\"small\" onClick={() => setIsExpanded(!isExpanded)} type=\"text\">\n                  {isExpanded ? 'Collapse' : 'Expand'} JSON\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'expression':\n        return (\n          <div>\n            <TextArea\n              value={value || ''}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder={property.placeholder || 'Enter JavaScript expression...'}\n              disabled={disabled}\n              rows={3}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Use $input to reference input data, e.g., $input.user.name\n            </div>\n          </div>\n        );\n\n      case 'collection':\n        return (\n          <div className=\"space-y-2\">\n            {(value || []).map((item: any, index: number) => (\n              <Card\n                key={index}\n                size=\"small\"\n                className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n                title={`Item ${index + 1}`}\n                extra={\n                  <Button\n                    type=\"text\"\n                    danger\n                    size=\"small\"\n                    icon={<DeleteOutlined />}\n                    onClick={() => {\n                      const newValue = [...(value || [])];\n                      newValue.splice(index, 1);\n                      onChange(newValue);\n                    }}\n                    disabled={disabled}\n                  />\n                }\n              >\n                <div className=\"space-y-2\">\n                  {property.collectionSchema?.map((field: any) => (\n                    <div key={field.name}>\n                      <label className=\"text-sm font-medium text-gray-300\">\n                        {field.label || field.name}\n                      </label>\n                      <PropertyField\n                        property={field}\n                        value={item[field.name]}\n                        onChange={(fieldValue) => {\n                          const newValue = [...(value || [])];\n                          newValue[index] = { ...newValue[index], [field.name]: fieldValue };\n                          onChange(newValue);\n                        }}\n                        disabled={disabled}\n                        theme={theme}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            ))}\n            <Button\n              type=\"dashed\"\n              onClick={() => {\n                const newValue = [...(value || []), {}];\n                onChange(newValue);\n              }}\n              disabled={disabled}\n              className=\"w-full\"\n            >\n              <PlusOutlined /> Add Item\n            </Button>\n          </div>\n        );\n\n      case 'credentialsSelect':\n        return (\n          <div className=\"space-y-2\">\n            <Select\n              value={value?.credentialId}\n              onChange={(credentialId) => onChange({ ...value, credentialId })}\n              placeholder=\"Select credential\"\n              disabled={disabled}\n              className=\"w-full\"\n              style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n            >\n              {/* This would be populated with available credentials */}\n              <Option value=\"gmail-oauth\">Gmail OAuth</Option>\n              <Option value=\"openai-api\">OpenAI API Key</Option>\n            </Select>\n            {value?.credentialId && (\n              <div className=\"flex items-center gap-2\">\n                <Tag color=\"green\">Connected</Tag>\n                <Button size=\"small\" type=\"link\">\n                  Test Connection\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      default:\n        return (\n          <Alert message={`Unsupported property type: ${property.type}`} type=\"warning\" showIcon />\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-1\">\n      {renderField()}\n      {property.description && (\n        <div className=\"text-xs text-gray-500 flex items-center gap-1\">\n          <InfoCircleOutlined />\n          {property.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const EnhancedPropertyRenderer: React.FC<EnhancedPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  onValidationChange,\n  theme = 'dark',\n  disabled = false,\n}) => {\n  const [validationErrors, setValidationErrors] = useState<Map<string, string>>(new Map());\n\n  const validateProperty = useCallback((property: INodeProperty, value: any): string | null => {\n    // Required validation\n    if (property.required && (!value || value === '')) {\n      return `${property.label || property.name} is required`;\n    }\n\n    // Type-specific validation\n    switch (property.type) {\n      case 'string':\n      case 'text':\n        if (property.maxLength && value && value.length > property.maxLength) {\n          return `Maximum length is ${property.maxLength} characters`;\n        }\n        if (property.minLength && value && value.length < property.minLength) {\n          return `Minimum length is ${property.minLength} characters`;\n        }\n        if (property.pattern && value && !new RegExp(property.pattern).test(value)) {\n          return `Value must match pattern: ${property.pattern}`;\n        }\n        break;\n\n      case 'number':\n        if (property.min !== undefined && value < property.min) {\n          return `Minimum value is ${property.min}`;\n        }\n        if (property.max !== undefined && value > property.max) {\n          return `Maximum value is ${property.max}`;\n        }\n        break;\n\n      case 'json':\n        if (value && typeof value === 'string') {\n          try {\n            JSON.parse(value);\n          } catch {\n            return 'Invalid JSON format';\n          }\n        }\n        break;\n    }\n\n    return null;\n  }, []);\n\n  const validateAll = useCallback(() => {\n    const errors = new Map<string, string>();\n\n    properties.forEach((property) => {\n      const value = formState[property.name];\n      const error = validateProperty(property, value);\n      if (error) {\n        errors.set(property.name, error);\n      }\n    });\n\n    setValidationErrors(errors);\n    onValidationChange?.({\n      isValid: errors.size === 0,\n      errors,\n    });\n\n    return errors.size === 0;\n  }, [properties, formState, validateProperty, onValidationChange]);\n\n  // Validate on form state change\n  React.useEffect(() => {\n    validateAll();\n  }, [validateAll]);\n\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      onChange(name, value);\n    },\n    [onChange]\n  );\n\n  const visibleProperties = useMemo(() => {\n    return properties.filter((property) => {\n      // Simple visibility logic - can be enhanced with complex conditions\n      if (property.displayOptions?.show) {\n        const conditions = property.displayOptions.show;\n        return Object.entries(conditions).every(([key, values]) => {\n          const formValue = formState[key];\n          return (values as any[]).includes(formValue);\n        });\n      }\n      return true;\n    });\n  }, [properties, formState]);\n\n  return (\n    <div className=\"space-y-4\">\n      {visibleProperties.map((property) => {\n        const error = validationErrors.get(property.name);\n        const value = formState[property.name];\n\n        return (\n          <div key={property.name} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-300 flex items-center gap-2\">\n                {property.label || property.name}\n                {property.required && <span className=\"text-red-400\">*</span>}\n                {property.description && (\n                  <Tooltip title={property.description}>\n                    <InfoCircleOutlined className=\"text-gray-500\" />\n                  </Tooltip>\n                )}\n              </label>\n              {error && (\n                <Tooltip title={error}>\n                  <ExclamationCircleOutlined className=\"text-red-400\" />\n                </Tooltip>\n              )}\n            </div>\n\n            <PropertyField\n              property={property}\n              value={value}\n              onChange={(newValue) => handlePropertyChange(property.name, newValue)}\n              disabled={disabled}\n              theme={theme}\n            />\n\n            {error && <Alert message={error}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx",
        "start": 76,
        "end": 477,
        "startLoc": {
          "line": 76,
          "column": 6,
          "position": 478
        },
        "endLoc": {
          "line": 477,
          "column": 2,
          "position": 3757
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 80,
        "end": 481,
        "startLoc": {
          "line": 80,
          "column": 6,
          "position": 530
        },
        "endLoc": {
          "line": 481,
          "column": 2,
          "position": 3809
        }
      }
    },
    {
      "format": "tsx",
      "lines": 493,
      "fragment": "/**\n * Enhanced Property Renderer\n *\n * Advanced property form rendering with conditional logic, validation,\n * and dynamic field types. Supports 22+ property types with real-time\n * validation and dependency management.\n */\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InfoCircleOutlined,\n  PlusOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Tag,\n  Tooltip,\n  Upload,\n} from 'antd';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport type { INodeProperty } from '@/core/nodes/types';\nimport { cn } from '@/design-system/utils';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nexport interface PropertyFormState {\n  [key: string]: any;\n}\n\nexport interface PropertyValidationResult {\n  isValid: boolean;\n  errors: Map<string, string>;\n}\n\nexport interface EnhancedPropertyRendererProps {\n  properties: INodeProperty[];\n  formState: PropertyFormState;\n  onChange: (name: string, value: any) => void;\n  onValidationChange?: (result: PropertyValidationResult) => void;\n  theme?: 'light' | 'dark';\n  disabled?: boolean;\n}\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: any;\n  onChange: (value: any) => void;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const renderField = () => {\n    switch (property.type) {\n      case 'string':\n        return (\n          <Input\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            value={value || ''}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            rows={4}\n            className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'boolean':\n        return <Switch checked={value || false} onChange={onChange} disabled={disabled} />;\n\n      case 'select':\n        return (\n          <Select\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n        return (\n          <Select\n            mode=\"multiple\"\n            value={value || []}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          >\n            {property.options?.map((option: any) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            value={value}\n            onChange={onChange}\n            placeholder={property.placeholder}\n            disabled={disabled}\n            showTime\n            className=\"w-full\"\n            style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={value}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={disabled}\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            beforeUpload={() => false}\n            onChange={(info) => {\n              if (info.file) {\n                onChange(info.file);\n              }\n            }}\n            disabled={disabled}\n          >\n            <Button icon={<PlusOutlined />} disabled={disabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      case 'json':\n        return (\n          <div>\n            <TextArea\n              value={typeof value === 'string' ? value : JSON.stringify(value, null, 2)}\n              onChange={(e) => {\n                try {\n                  const parsed = JSON.parse(e.target.value);\n                  onChange(parsed);\n                } catch {\n                  onChange(e.target.value);\n                }\n              }}\n              placeholder={property.placeholder}\n              disabled={disabled}\n              rows={6}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            {value && typeof value === 'object' && (\n              <div className=\"mt-2\">\n                <Button size=\"small\" onClick={() => setIsExpanded(!isExpanded)} type=\"text\">\n                  {isExpanded ? 'Collapse' : 'Expand'} JSON\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'expression':\n        return (\n          <div>\n            <TextArea\n              value={value || ''}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder={property.placeholder || 'Enter JavaScript expression...'}\n              disabled={disabled}\n              rows={3}\n              className={cn(\n                'font-mono text-xs',\n                theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''\n              )}\n            />\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Use $input to reference input data, e.g., $input.user.name\n            </div>\n          </div>\n        );\n\n      case 'collection':\n        return (\n          <div className=\"space-y-2\">\n            {(value || []).map((item: any, index: number) => (\n              <Card\n                key={index}\n                size=\"small\"\n                className={theme === 'dark' ? 'bg-gray-800 border-gray-600' : ''}\n                title={`Item ${index + 1}`}\n                extra={\n                  <Button\n                    type=\"text\"\n                    danger\n                    size=\"small\"\n                    icon={<DeleteOutlined />}\n                    onClick={() => {\n                      const newValue = [...(value || [])];\n                      newValue.splice(index, 1);\n                      onChange(newValue);\n                    }}\n                    disabled={disabled}\n                  />\n                }\n              >\n                <div className=\"space-y-2\">\n                  {property.collectionSchema?.map((field: any) => (\n                    <div key={field.name}>\n                      <label className=\"text-sm font-medium text-gray-300\">\n                        {field.label || field.name}\n                      </label>\n                      <PropertyField\n                        property={field}\n                        value={item[field.name]}\n                        onChange={(fieldValue) => {\n                          const newValue = [...(value || [])];\n                          newValue[index] = { ...newValue[index], [field.name]: fieldValue };\n                          onChange(newValue);\n                        }}\n                        disabled={disabled}\n                        theme={theme}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            ))}\n            <Button\n              type=\"dashed\"\n              onClick={() => {\n                const newValue = [...(value || []), {}];\n                onChange(newValue);\n              }}\n              disabled={disabled}\n              className=\"w-full\"\n            >\n              <PlusOutlined /> Add Item\n            </Button>\n          </div>\n        );\n\n      case 'credentialsSelect':\n        return (\n          <div className=\"space-y-2\">\n            <Select\n              value={value?.credentialId}\n              onChange={(credentialId) => onChange({ ...value, credentialId })}\n              placeholder=\"Select credential\"\n              disabled={disabled}\n              className=\"w-full\"\n              style={{ backgroundColor: theme === 'dark' ? '#1f2937' : undefined }}\n            >\n              {/* This would be populated with available credentials */}\n              <Option value=\"gmail-oauth\">Gmail OAuth</Option>\n              <Option value=\"openai-api\">OpenAI API Key</Option>\n            </Select>\n            {value?.credentialId && (\n              <div className=\"flex items-center gap-2\">\n                <Tag color=\"green\">Connected</Tag>\n                <Button size=\"small\" type=\"link\">\n                  Test Connection\n                </Button>\n              </div>\n            )}\n          </div>\n        );\n\n      default:\n        return (\n          <Alert message={`Unsupported property type: ${property.type}`} type=\"warning\" showIcon />\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-1\">\n      {renderField()}\n      {property.description && (\n        <div className=\"text-xs text-gray-500 flex items-center gap-1\">\n          <InfoCircleOutlined />\n          {property.description}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const EnhancedPropertyRenderer: React.FC<EnhancedPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  onValidationChange,\n  theme = 'dark',\n  disabled = false,\n}) => {\n  const [validationErrors, setValidationErrors] = useState<Map<string, string>>(new Map());\n\n  const validateProperty = useCallback((property: INodeProperty, value: any): string | null => {\n    // Required validation\n    if (property.required && (!value || value === '')) {\n      return `${property.label || property.name} is required`;\n    }\n\n    // Type-specific validation\n    switch (property.type) {\n      case 'string':\n      case 'text':\n        if (property.maxLength && value && value.length > property.maxLength) {\n          return `Maximum length is ${property.maxLength} characters`;\n        }\n        if (property.minLength && value && value.length < property.minLength) {\n          return `Minimum length is ${property.minLength} characters`;\n        }\n        if (property.pattern && value && !new RegExp(property.pattern).test(value)) {\n          return `Value must match pattern: ${property.pattern}`;\n        }\n        break;\n\n      case 'number':\n        if (property.min !== undefined && value < property.min) {\n          return `Minimum value is ${property.min}`;\n        }\n        if (property.max !== undefined && value > property.max) {\n          return `Maximum value is ${property.max}`;\n        }\n        break;\n\n      case 'json':\n        if (value && typeof value === 'string') {\n          try {\n            JSON.parse(value);\n          } catch {\n            return 'Invalid JSON format';\n          }\n        }\n        break;\n    }\n\n    return null;\n  }, []);\n\n  const validateAll = useCallback(() => {\n    const errors = new Map<string, string>();\n\n    properties.forEach((property) => {\n      const value = formState[property.name];\n      const error = validateProperty(property, value);\n      if (error) {\n        errors.set(property.name, error);\n      }\n    });\n\n    setValidationErrors(errors);\n    onValidationChange?.({\n      isValid: errors.size === 0,\n      errors,\n    });\n\n    return errors.size === 0;\n  }, [properties, formState, validateProperty, onValidationChange]);\n\n  // Validate on form state change\n  React.useEffect(() => {\n    validateAll();\n  }, [validateAll]);\n\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      onChange(name, value);\n    },\n    [onChange]\n  );\n\n  const visibleProperties = useMemo(() => {\n    return properties.filter((property) => {\n      // Simple visibility logic - can be enhanced with complex conditions\n      if (property.displayOptions?.show) {\n        const conditions = property.displayOptions.show;\n        return Object.entries(conditions).every(([key, values]) => {\n          const formValue = formState[key];\n          return (values as any[]).includes(formValue);\n        });\n      }\n      return true;\n    });\n  }, [properties, formState]);\n\n  return (\n    <div className=\"space-y-4\">\n      {visibleProperties.map((property) => {\n        const error = validationErrors.get(property.name);\n        const value = formState[property.name];\n\n        return (\n          <div key={property.name} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-300 flex items-center gap-2\">\n                {property.label || property.name}\n                {property.required && <span className=\"text-red-400\">*</span>}\n                {property.description && (\n                  <Tooltip title={property.description}>\n                    <InfoCircleOutlined className=\"text-gray-500\" />\n                  </Tooltip>\n                )}\n              </label>\n              {error && (\n                <Tooltip title={error}>\n                  <ExclamationCircleOutlined className=\"text-red-400\" />\n                </Tooltip>\n              )}\n            </div>\n\n            <PropertyField\n              property={property}\n              value={value}\n              onChange={(newValue) => handlePropertyChange(property.name, newValue)}\n              disabled={disabled}\n              theme={theme}\n            />\n\n            {error && <Alert message={error} type=\"error\" showIcon className=\"text-xs\" />}\n          </div>\n        );\n      })}\n\n      {visibleProperties.length === 0 && (\n        <div className=\"text-center text-gray-500 py-8\">\n          <div className=\"text-2xl mb-2\">⚙️</div>\n          <div>No properties to configure</div>\n          <div className=\"text-xs mt-2\">All properties are hidden by conditional logic</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedPropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EnhancedPropertyRenderer.tsx",
        "start": 1,
        "end": 493,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 493,
          "column": 2,
          "position": 3900
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/enhancedpropertyrenderer/EnhancedPropertyRenderer.tsx",
        "start": 5,
        "end": 497,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 497,
          "column": 2,
          "position": 3952
        }
      }
    },
    {
      "format": "javascript",
      "lines": 214,
      "fragment": "={path} className=\"border-b border-gray-700 last:border-b-0\">\n        <div\n          className={`flex items-center py-2 px-3 hover:bg-gray-700 transition-colors ${nestLevel > 0 ? 'pl-8' : ''}`}\n          style={{ paddingLeft: `${nestLevel * 24 + 12}px` }}\n        >\n          {/* Toggle button for expandable items */}\n          {hasChildren && (\n            <button\n              onClick={() => toggleExpanded(path)}\n              className=\"mr-2 p-1 hover:bg-gray-600 rounded\"\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"w-3 h-3 text-gray-400\" />\n              ) : (\n                <ChevronRight className=\"w-3 h-3 text-gray-400\" />\n              )}\n            </button>\n          )}\n          {!hasChildren && <div className=\"w-6 mr-2\" />}\n\n          {/* Property name pill */}\n          <div className=\"flex items-center bg-gray-600 rounded px-2 py-1 mr-3 min-w-0\">\n            <div className=\"mr-2 flex-shrink-0\">{getTypeIcon(value)}</div>\n            <span className=\"text-sm font-medium text-white truncate\">\n              {Array.isArray(value) ? `${key}` : key}\n            </span>\n          </div>\n\n          {/* Value display */}\n          <div className=\"flex-1 min-w-0\">\n            {!hasChildren ? (\n              <span className=\"text-sm text-gray-300 break-all\">\n                {typeof value === 'string' && value.includes('\\n') ? (\n                  <div className=\"whitespace-pre-wrap\">{value}</div>\n                ) : (\n                  String(value)\n                )}\n              </span>\n            ) : (\n              <span className=\"text-sm text-gray-400\">\n                {Array.isArray(value) ? `Array (${value.length} items)` : 'Object'}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Render children if expanded */}\n        {hasChildren && isExpanded && (\n          <div>\n            {Array.isArray(value)\n              ? value.map((item, index) =>\n                  renderSchemaItem(`[${index}]`, item, `${path}[${index}]`, nestLevel + 1)\n                )\n              : Object.entries(value).map(([childKey, childValue]) =>\n                  renderSchemaItem(childKey, childValue, `${path}.${childKey}`, nestLevel + 1)\n                )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render table view\n  const renderTableView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    const flattenObject = (obj: any, prefix = ''): Record<string, any> => {\n      const result: Record<string, any> = {};\n\n      for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (Array.isArray(value)) {\n          result[newKey] = value.join(', ');\n        } else if (typeof value === 'object' && value !== null) {\n          // For nested objects, show a preview\n          result[newKey] = `Object (${Object.keys(value).length} properties)`;\n        } else {\n          result[newKey] = value;\n        }\n      }\n\n      return result;\n    };\n\n    const flatData = flattenObject(selectedEmail);\n\n    return (\n      <div className=\"overflow-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-gray-600\">\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Property</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Value</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(flatData).map(([key, value]) => (\n              <tr key={key} className=\"border-b border-gray-700 hover:bg-gray-700\">\n                <td className=\"py-2 px-3 text-blue-300 font-mono text-xs\">{key}</td>\n                <td className=\"py-2 px-3 text-gray-300 break-all\">\n                  {typeof value === 'string' && value.length > 100\n                    ? `${value.substring(0, 100)}...`\n                    : String(value)}\n                </td>\n                <td className=\"py-2 px-3 text-gray-400 text-xs\">{typeof value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render JSON view\n  const renderJsonView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    return (\n      <div className=\"overflow-auto\">\n        <pre className=\"text-sm text-gray-300 whitespace-pre-wrap p-4 bg-gray-900 rounded border border-gray-600 font-mono\">\n          {JSON.stringify(filteredData || selectedEmail, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    if (!selectedEmail) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📧</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">Select an email from the input column</p>\n          <p className=\"text-gray-400\">to view its detailed structure</p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            {filteredData ? (\n              Object.entries(filteredData).map(([key, value]) => renderSchemaItem(key, value, key))\n            ) : (\n              <div className=\"text-gray-400 text-center py-8\">No matching data found</div>\n            )}\n          </div>\n        );\n      case 'table':\n        return renderTableView();\n      case 'json':\n        return renderJsonView();\n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤</span>\n            OUTPUT\n            {selectedEmail && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Email selected</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {selectedEmail && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search email data\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx",
        "start": 93,
        "end": 306,
        "startLoc": {
          "line": 93,
          "column": 4,
          "position": 1088
        },
        "endLoc": {
          "line": 306,
          "column": 2,
          "position": 3045
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 95,
        "end": 308,
        "startLoc": {
          "line": 95,
          "column": 4,
          "position": 1114
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 3071
        }
      }
    },
    {
      "format": "tsx",
      "lines": 346,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { CheckCircle, ChevronDown, ChevronRight, Edit, Pin, Search } from 'lucide-react';\nimport type React from 'react';\nimport { useMemo, useState } from 'react';\n\ntype DisplayMode = 'schema' | 'table' | 'json';\n\ninterface EmailOutputPanelProps {\n  selectedEmail?: any;\n  isVisible?: boolean;\n}\n\nconst EmailOutputPanel: React.FC<EmailOutputPanelProps> = ({ selectedEmail, isVisible = true }) => {\n  const [displayMode, setDisplayMode] = useState<DisplayMode>('schema');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(\n    new Set(['labelIds', 'headers', 'from', 'to'])\n  );\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm || !selectedEmail) return selectedEmail;\n\n    const filterObject = (obj: any, path = ''): any => {\n      if (typeof obj === 'string') {\n        return obj.toLowerCase().includes(searchTerm.toLowerCase()) ? obj : null;\n      }\n      if (typeof obj === 'number') {\n        return obj.toString().includes(searchTerm) ? obj : null;\n      }\n      if (Array.isArray(obj)) {\n        const filtered = obj.filter((item, index) => {\n          const result = filterObject(item, `${path}[${index}]`);\n          return result !== null;\n        });\n        return filtered.length > 0 ? filtered : null;\n      }\n      if (typeof obj === 'object' && obj !== null) {\n        const filtered: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          const newPath = path ? `${path}.${key}` : key;\n          if (key.toLowerCase().includes(searchTerm.toLowerCase())) {\n            filtered[key] = value;\n          } else {\n            const result = filterObject(value, newPath);\n            if (result !== null) {\n              filtered[key] = result;\n            }\n          }\n        }\n        return Object.keys(filtered).length > 0 ? filtered : null;\n      }\n      return null;\n    };\n\n    return filterObject(selectedEmail);\n  }, [selectedEmail, searchTerm]);\n\n  const toggleExpanded = (path: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  // Get data type icon\n  const getTypeIcon = (value: any) => {\n    if (typeof value === 'string') {\n      return <span className=\"text-blue-400\">Aa</span>;\n    }\n    if (typeof value === 'number') {\n      return <span className=\"text-green-400\">#</span>;\n    }\n    if (Array.isArray(value)) {\n      return <span className=\"text-purple-400\">[]</span>;\n    }\n    if (typeof value === 'object') {\n      return <span className=\"text-yellow-400\">{}</span>;\n    }\n    return <span className=\"text-gray-400\">?</span>;\n  };\n\n  // Render schema view\n  const renderSchemaItem = (key: string, value: any, path: string, nestLevel: number = 0) => {\n    const isExpanded = expandedItems.has(path);\n    const hasChildren = Array.isArray(value) || (typeof value === 'object' && value !== null);\n\n    return (\n      <div key={path} className=\"border-b border-gray-700 last:border-b-0\">\n        <div\n          className={`flex items-center py-2 px-3 hover:bg-gray-700 transition-colors ${nestLevel > 0 ? 'pl-8' : ''}`}\n          style={{ paddingLeft: `${nestLevel * 24 + 12}px` }}\n        >\n          {/* Toggle button for expandable items */}\n          {hasChildren && (\n            <button\n              onClick={() => toggleExpanded(path)}\n              className=\"mr-2 p-1 hover:bg-gray-600 rounded\"\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"w-3 h-3 text-gray-400\" />\n              ) : (\n                <ChevronRight className=\"w-3 h-3 text-gray-400\" />\n              )}\n            </button>\n          )}\n          {!hasChildren && <div className=\"w-6 mr-2\" />}\n\n          {/* Property name pill */}\n          <div className=\"flex items-center bg-gray-600 rounded px-2 py-1 mr-3 min-w-0\">\n            <div className=\"mr-2 flex-shrink-0\">{getTypeIcon(value)}</div>\n            <span className=\"text-sm font-medium text-white truncate\">\n              {Array.isArray(value) ? `${key}` : key}\n            </span>\n          </div>\n\n          {/* Value display */}\n          <div className=\"flex-1 min-w-0\">\n            {!hasChildren ? (\n              <span className=\"text-sm text-gray-300 break-all\">\n                {typeof value === 'string' && value.includes('\\n') ? (\n                  <div className=\"whitespace-pre-wrap\">{value}</div>\n                ) : (\n                  String(value)\n                )}\n              </span>\n            ) : (\n              <span className=\"text-sm text-gray-400\">\n                {Array.isArray(value) ? `Array (${value.length} items)` : 'Object'}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Render children if expanded */}\n        {hasChildren && isExpanded && (\n          <div>\n            {Array.isArray(value)\n              ? value.map((item, index) =>\n                  renderSchemaItem(`[${index}]`, item, `${path}[${index}]`, nestLevel + 1)\n                )\n              : Object.entries(value).map(([childKey, childValue]) =>\n                  renderSchemaItem(childKey, childValue, `${path}.${childKey}`, nestLevel + 1)\n                )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render table view\n  const renderTableView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    const flattenObject = (obj: any, prefix = ''): Record<string, any> => {\n      const result: Record<string, any> = {};\n\n      for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (Array.isArray(value)) {\n          result[newKey] = value.join(', ');\n        } else if (typeof value === 'object' && value !== null) {\n          // For nested objects, show a preview\n          result[newKey] = `Object (${Object.keys(value).length} properties)`;\n        } else {\n          result[newKey] = value;\n        }\n      }\n\n      return result;\n    };\n\n    const flatData = flattenObject(selectedEmail);\n\n    return (\n      <div className=\"overflow-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b border-gray-600\">\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Property</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Value</th>\n              <th className=\"text-left py-2 px-3 text-gray-300 font-medium\">Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(flatData).map(([key, value]) => (\n              <tr key={key} className=\"border-b border-gray-700 hover:bg-gray-700\">\n                <td className=\"py-2 px-3 text-blue-300 font-mono text-xs\">{key}</td>\n                <td className=\"py-2 px-3 text-gray-300 break-all\">\n                  {typeof value === 'string' && value.length > 100\n                    ? `${value.substring(0, 100)}...`\n                    : String(value)}\n                </td>\n                <td className=\"py-2 px-3 text-gray-400 text-xs\">{typeof value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render JSON view\n  const renderJsonView = () => {\n    if (!selectedEmail)\n      return <div className=\"text-gray-400 text-center py-8\">No email selected</div>;\n\n    return (\n      <div className=\"overflow-auto\">\n        <pre className=\"text-sm text-gray-300 whitespace-pre-wrap p-4 bg-gray-900 rounded border border-gray-600 font-mono\">\n          {JSON.stringify(filteredData || selectedEmail, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    if (!selectedEmail) {\n      return (\n        <div className=\"text-center text-gray-300 py-12 text-sm\">\n          <div className=\"mb-4\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n              <span className=\"text-2xl\">📧</span>\n            </div>\n          </div>\n          <p className=\"mb-2\">Select an email from the input column</p>\n          <p className=\"text-gray-400\">to view its detailed structure</p>\n        </div>\n      );\n    }\n\n    switch (displayMode) {\n      case 'schema':\n        return (\n          <div className=\"overflow-auto max-h-full\">\n            {filteredData ? (\n              Object.entries(filteredData).map(([key, value]) => renderSchemaItem(key, value, key))\n            ) : (\n              <div className=\"text-gray-400 text-center py-8\">No matching data found</div>\n            )}\n          </div>\n        );\n      case 'table':\n        return renderTableView();\n      case 'json':\n        return renderJsonView();\n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📤</span>\n            OUTPUT\n            {selectedEmail && (\n              <div className=\"ml-2 flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-xs text-gray-400 ml-1\">Email selected</span>\n              </div>\n            )}\n          </h3>\n        </div>\n\n        {/* Controls */}\n        {selectedEmail && (\n          <div className=\"flex items-center justify-between space-x-4\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-xs\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Search email data\"\n                className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n              />\n            </div>\n\n            {/* Display mode tabs */}\n            <div className=\"flex bg-gray-700 rounded overflow-hidden\">\n              {[\n                { key: 'schema', label: 'Schema' },\n                { key: 'table', label: 'Table' },\n                { key: 'json', label: 'JSON' },\n              ].map(({ key, label }) => (\n                <button\n                  key={key}\n                  onClick={() => setDisplayMode(key as DisplayMode)}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    displayMode === key\n                      ? 'bg-gray-600 text-white'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-600'\n                  }`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\">\n                <Edit className=\"w-4 h-4\" />\n                edit\n              </button>\n              <button className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-600 rounded transition-colors\">\n                <Pin className=\"w-4 h-4\" /> pin\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Email info */}\n        {selectedEmail && (\n          <div className=\"mt-3 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">From:</span> {selectedEmail.from || 'Unknown'}\n            </div>\n            <div className=\"text-sm text-gray-300\">\n              <span className=\"text-blue-300\">Subject:</span>{' '}\n              {selectedEmail.subject || 'No subject'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">{renderContent()}</div>\n    </div>\n  );\n};\n\nexport default EmailOutputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailOutputPanel.tsx",
        "start": 1,
        "end": 346,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 346,
          "column": 2,
          "position": 3331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailoutputpanel/EmailOutputPanel.tsx",
        "start": 3,
        "end": 348,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 348,
          "column": 2,
          "position": 3357
        }
      }
    },
    {
      "format": "javascript",
      "lines": 125,
      "fragment": "={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search emails...\"\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Email List */}\n      <div className=\"flex-1 overflow-auto\">\n        {emails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n                <Mail className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </div>\n            <p className=\"mb-2\">No emails loaded</p>\n            <p className=\"text-gray-400\">Test the Gmail trigger to see emails</p>\n          </div>\n        ) : filteredEmails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <p>No emails match your search</p>\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredEmails.map((email, index) => {\n              const isSelected = selectedEmailId === email.id;\n              const senderName = getSenderName(email.from);\n              const avatarColor = getAvatarColor(email.from);\n\n              return (\n                <div\n                  key={email.id || index}\n                  onClick={() => onEmailSelect(email)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                    isSelected\n                      ? 'bg-blue-600 border-blue-500 text-white'\n                      : 'bg-gray-800 border-gray-700 hover:bg-gray-700 hover:border-gray-600 text-gray-100'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center flex-shrink-0 text-white text-sm font-medium`}\n                    >\n                      {senderName.charAt(0).toUpperCase()}\n                    </div>\n\n                    {/* Email Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header */}\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-2 min-w-0\">\n                          <span\n                            className={`font-medium text-sm truncate ${\n                              isSelected ? 'text-white' : 'text-gray-200'\n                            }`}\n                          >\n                            {senderName}\n                          </span>\n\n                          {/* Indicators */}\n                          <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                            {email.hasAttachments && (\n                              <Paperclip className=\"w-3 h-3 text-gray-400\" />\n                            )}\n                            {email.isUnread && (\n                              <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                            )}\n                            {email.labels?.includes('STARRED') && (\n                              <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          <Clock className=\"w-3 h-3 text-gray-400\" />\n                          <span\n                            className={`text-xs ${isSelected ? 'text-blue-100' : 'text-gray-400'}`}\n                          >\n                            {formatDate(email.date)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Subject */}\n                      <div\n                        className={`text-sm font-medium mb-1 truncate ${\n                          isSelected ? 'text-white' : 'text-gray-100'\n                        }`}\n                      >\n                        {email.subject || '(No subject)'}\n                      </div>\n\n                      {/* Snippet */}\n                      <div\n                        className={`text-xs leading-relaxed line-clamp-2 ${\n                          isSelected ? 'text-blue-100' : 'text-gray-400'\n                        }`}\n                      >\n                        {email.snippet || email.body || 'No content preview available'}\n                      </div>\n\n                      {/* Labels */}\n                      {email.labels && email.labels.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {email.labels.slice(0, 3).map((label: string) => (\n                            <span\n                              key={label}\n                              className={`px-2 py-1 text-xs rounded-full ${\n                                isSelected\n                                  ? 'bg-blue-700 text-blue-100'\n                                  : 'bg-gray-700 text-gray-300'\n                              }`}\n                            >\n                              {label}\n                            </span>\n                          ))}\n                          {email.labels.length > 3 && (\n                            <span\n                              className={`text-xs ${\n                                isSelected ? 'text-blue-200' : 'text-gray-400'\n                              }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx",
        "start": 112,
        "end": 236,
        "startLoc": {
          "line": 112,
          "column": 6,
          "position": 952
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 1885
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 113,
        "end": 237,
        "startLoc": {
          "line": 113,
          "column": 6,
          "position": 965
        },
        "endLoc": {
          "line": 237,
          "column": 2,
          "position": 1898
        }
      }
    },
    {
      "format": "tsx",
      "lines": 255,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Clock, Mail, Paperclip, Search, Star } from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\ninterface EmailInputPanelProps {\n  emails?: any[];\n  selectedEmailId?: string;\n  onEmailSelect: (email: any) => void;\n  isVisible?: boolean;\n}\n\nconst EmailInputPanel: React.FC<EmailInputPanelProps> = ({\n  emails = [],\n  selectedEmailId,\n  onEmailSelect,\n  isVisible = true,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Filter emails based on search term\n  const filteredEmails = emails.filter((email) => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      email.subject?.toLowerCase().includes(searchLower) ||\n      email.from?.toLowerCase().includes(searchLower) ||\n      email.snippet?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    try {\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffHours < 1) {\n        return 'Just now';\n      } else if (diffHours < 24) {\n        return `${diffHours}h ago`;\n      } else if (diffDays < 7) {\n        return `${diffDays}d ago`;\n      } else {\n        return date.toLocaleDateString();\n      }\n    } catch {\n      return dateString;\n    }\n  };\n\n  // Extract sender name from email\n  const getSenderName = (from: string) => {\n    if (!from) return 'Unknown';\n\n    // Handle \"Name <email@domain.com>\" format\n    const match = from.match(/^(.+?)\\s*<(.+)>$/);\n    if (match) {\n      return match[1].trim();\n    }\n\n    // Handle plain email format\n    if (from.includes('@')) {\n      return from.split('@')[0];\n    }\n\n    return from;\n  };\n\n  // Get sender avatar color based on email\n  const getAvatarColor = (from: string) => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-yellow-500',\n      'bg-red-500',\n      'bg-purple-500',\n      'bg-pink-500',\n      'bg-indigo-500',\n      'bg-teal-500',\n    ];\n    const hash = from.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 p-4 border-b border-gray-600 bg-gray-800\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-100 flex items-center\">\n            <span className=\"mr-2\">📥</span>\n            INPUT\n            <span className=\"ml-2 text-xs bg-blue-600 text-white px-2 py-1 rounded-full\">\n              {filteredEmails.length} emails\n            </span>\n          </h3>\n        </div>\n\n        {/* Search */}\n        {emails.length > 0 && (\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search emails...\"\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm focus:ring-2 focus:ring-blue-400 focus:border-blue-400 focus:bg-gray-700\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Email List */}\n      <div className=\"flex-1 overflow-auto\">\n        {emails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700 flex items-center justify-center\">\n                <Mail className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            </div>\n            <p className=\"mb-2\">No emails loaded</p>\n            <p className=\"text-gray-400\">Test the Gmail trigger to see emails</p>\n          </div>\n        ) : filteredEmails.length === 0 ? (\n          <div className=\"text-center text-gray-300 py-12 text-sm\">\n            <p>No emails match your search</p>\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredEmails.map((email, index) => {\n              const isSelected = selectedEmailId === email.id;\n              const senderName = getSenderName(email.from);\n              const avatarColor = getAvatarColor(email.from);\n\n              return (\n                <div\n                  key={email.id || index}\n                  onClick={() => onEmailSelect(email)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                    isSelected\n                      ? 'bg-blue-600 border-blue-500 text-white'\n                      : 'bg-gray-800 border-gray-700 hover:bg-gray-700 hover:border-gray-600 text-gray-100'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center flex-shrink-0 text-white text-sm font-medium`}\n                    >\n                      {senderName.charAt(0).toUpperCase()}\n                    </div>\n\n                    {/* Email Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header */}\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-2 min-w-0\">\n                          <span\n                            className={`font-medium text-sm truncate ${\n                              isSelected ? 'text-white' : 'text-gray-200'\n                            }`}\n                          >\n                            {senderName}\n                          </span>\n\n                          {/* Indicators */}\n                          <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                            {email.hasAttachments && (\n                              <Paperclip className=\"w-3 h-3 text-gray-400\" />\n                            )}\n                            {email.isUnread && (\n                              <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                            )}\n                            {email.labels?.includes('STARRED') && (\n                              <Star className=\"w-3 h-3 text-yellow-400 fill-current\" />\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          <Clock className=\"w-3 h-3 text-gray-400\" />\n                          <span\n                            className={`text-xs ${isSelected ? 'text-blue-100' : 'text-gray-400'}`}\n                          >\n                            {formatDate(email.date)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Subject */}\n                      <div\n                        className={`text-sm font-medium mb-1 truncate ${\n                          isSelected ? 'text-white' : 'text-gray-100'\n                        }`}\n                      >\n                        {email.subject || '(No subject)'}\n                      </div>\n\n                      {/* Snippet */}\n                      <div\n                        className={`text-xs leading-relaxed line-clamp-2 ${\n                          isSelected ? 'text-blue-100' : 'text-gray-400'\n                        }`}\n                      >\n                        {email.snippet || email.body || 'No content preview available'}\n                      </div>\n\n                      {/* Labels */}\n                      {email.labels && email.labels.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {email.labels.slice(0, 3).map((label: string) => (\n                            <span\n                              key={label}\n                              className={`px-2 py-1 text-xs rounded-full ${\n                                isSelected\n                                  ? 'bg-blue-700 text-blue-100'\n                                  : 'bg-gray-700 text-gray-300'\n                              }`}\n                            >\n                              {label}\n                            </span>\n                          ))}\n                          {email.labels.length > 3 && (\n                            <span\n                              className={`text-xs ${\n                                isSelected ? 'text-blue-200' : 'text-gray-400'\n                              }`}\n                            >\n                              +{email.labels.length - 3} more\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmailInputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/EmailInputPanel.tsx",
        "start": 1,
        "end": 255,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 255,
          "column": 2,
          "position": 1979
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/emailinputpanel/EmailInputPanel.tsx",
        "start": 2,
        "end": 256,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 256,
          "column": 2,
          "position": 1992
        }
      }
    },
    {
      "format": "javascript",
      "lines": 585,
      "fragment": "={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n            rows={property.rows || 4}\n            autoSize={{ minRows: property.rows || 4, maxRows: 10 }}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            value={value as number}\n            onChange={(val) => onChange(val)}\n            min={property.min}\n            max={property.max}\n            step={property.step || 1}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch checked={(value as boolean) || false} onChange={onChange} disabled={isDisabled} />\n        );\n\n      case 'select':\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={onChange}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={(value as string[]) || []}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(props) => {\n              const { label, closable, onClose } = props;\n              return (\n                <span\n                  style={{\n                    backgroundColor: '#1f2937',\n                    border: '1px solid #4b5563',\n                    color: '#ffffff',\n                    borderRadius: '4px',\n                    padding: '2px 8px',\n                    margin: '2px',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    fontSize: '12px',\n                  }}\n                >\n                  {label}\n                  {closable && (\n                    <span\n                      onClick={onClose}\n                      style={{\n                        marginLeft: '4px',\n                        cursor: 'pointer',\n                        color: '#9ca3af',\n                      }}\n                      onMouseEnter={(e) => (e.currentTarget.style.color = '#ffffff')}\n                      onMouseLeave={(e) => (e.currentTarget.style.color = '#9ca3af')}\n                    >\n                      ×\n                    </span>\n                  )}\n                </span>\n              );\n            }}\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'credentialsSelect': {\n        // Get available credentials from context (registry system)\n        const credentialTypes = property.credentialTypes || [];\n        const availableCredentials =\n          context.credentials?.filter(\n            (cred: any) => credentialTypes.length === 0 || credentialTypes.includes(cred.type)\n          ) || [];\n\n        // Debug logging for credential filtering\n        if (property.name === 'credential' && credentialTypes.includes('gmailOAuth2')) {\n        }\n\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={(selectedValue) => {\n              onChange(selectedValue);\n\n              // Sync with the other credential field\n              if (context.onCredentialChange) {\n                context.onCredentialChange(selectedValue);\n              }\n\n              // Trigger auto-population if a credential is selected\n              if (selectedValue && context.onCredentialSelect) {\n                const selectedCredential = availableCredentials.find(\n                  (cred: any) => cred.id === selectedValue\n                );\n                if (selectedCredential) {\n                  context.onCredentialSelect(selectedCredential);\n                }\n              }\n            }}\n            placeholder=\"Select a credential...\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            dropdownRender={(menu) => (\n              <div>\n                {menu}\n                {credentialTypes.length > 0 && (\n                  <div\n                    style={{\n                      padding: '8px',\n                      borderTop: '1px solid #6b7280',\n                      backgroundColor: '#374151',\n                    }}\n                  >\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      onClick={() => {\n                        // Trigger credential creation modal\n                        if (context.onCreateCredential) {\n                          context.onCreateCredential(credentialTypes[0]);\n                        } else {\n                        }\n                      }}\n                      style={{\n                        color: '#3b82f6',\n                        padding: '2px 8px',\n                        height: 'auto',\n                      }}\n                    >\n                      + Create New Credential\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          >\n            <Option value=\"\" style={{ backgroundColor: '#374151', color: '#ffffff' }}>\n              No credential selected\n            </Option>\n            {availableCredentials.map((credential: any) => {\n              const credTypeDef = context.credentialTypes?.find(\n                (ct: any) => ct.name === credential.type\n              );\n              const icon =\n                credTypeDef?.icon && typeof credTypeDef.icon === 'string'\n                  ? credTypeDef.icon\n                  : getCredentialIcon(credential.type);\n              const displayName =\n                credential.name || `${credTypeDef?.displayName || credential.type} Credential`;\n\n              return (\n                <Option\n                  key={credential.id}\n                  value={credential.id}\n                  style={{ backgroundColor: '#374151', color: '#ffffff' }}\n                >\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px',\n                    }}\n                  >\n                    <span style={{ fontSize: '14px' }}>{icon}</span>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 500 }}>{displayName}</div>\n                      <div style={{ fontSize: '11px', color: '#9ca3af' }}>\n                        {credential.testedAt\n                          ? credential.isValid\n                            ? '✓ Tested'\n                            : '⚠ Test failed'\n                          : 'Not tested'}\n                        {credential.updatedAt && (\n                          <span style={{ marginLeft: '8px' }}>\n                            {new Date(credential.updatedAt).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div style={{ display: 'flex', gap: '4px' }}>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onEditCredential) {\n                            context.onEditCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#3b82f6')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Edit credential\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onDeleteCredential && confirm(`Delete \"${displayName}\"?`)) {\n                            context.onDeleteCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Delete credential\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </div>\n                </Option>\n              );\n            })}\n          </Select>\n        );\n      }\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            {...commonProps}\n            showTime\n            value={value ? new Date(value as string) : null}\n            onChange={(date) => onChange(date?.toISOString() || null)}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={(value as string) || '#000000'}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={isDisabled}\n          />\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || '{}'}\n            onChange={(e) => onChange(e.target.value)}\n            rows={6}\n            placeholder=\"Enter valid JSON...\"\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            {...commonProps}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                onChange(info.file.response?.url || info.file.name);\n              }\n            }}\n          >\n            <Button icon={<UploadOutlined />} disabled={isDisabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const collectionValue = (value as any[]) || [];\n    const isMultiple = property.typeOptions?.multipleValues;\n\n    if (!isMultiple) {\n      // Single collection item\n      const itemValue = collectionValue[0] || {};\n      return (\n        <Card\n          size=\"small\"\n          style={{\n            marginBottom: 8,\n            backgroundColor: themeStyles.backgroundColor,\n            borderColor: themeStyles.borderColor,\n            color: themeStyles.color,\n          }}\n        >\n          {property.values?.map((valueProperty: any) => (\n            <PropertyField\n              key={valueProperty.name}\n              property={valueProperty as INodeProperty}\n              value={itemValue[valueProperty.name]}\n              onChange={(newValue) => {\n                const newItem = {\n                  ...itemValue,\n                  [valueProperty.name]: newValue,\n                };\n                onChange([newItem]);\n              }}\n              context={context}\n              disabled={isDisabled}\n              theme={theme}\n            />\n          ))}\n        </Card>\n      );\n    }\n\n    // Multiple collection items\n    return (\n      <div>\n        {collectionValue.map((item, index) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: 8,\n              backgroundColor: themeStyles.backgroundColor,\n              borderColor: themeStyles.borderColor,\n              color: themeStyles.color,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  const newValue = collectionValue.filter((_, i) => i !== index);\n                  onChange(newValue);\n                }}\n                disabled={isDisabled}\n              />\n            }\n          >\n            {property.values?.map((valueProperty: any) => (\n              <PropertyField\n                key={`${index}-${valueProperty.name}`}\n                property={valueProperty as INodeProperty}\n                value={item[valueProperty.name]}\n                onChange={(newValue) => {\n                  const newItems = [...collectionValue];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [valueProperty.name]: newValue,\n                  };\n                  onChange(newItems);\n                }}\n                context={context}\n                disabled={isDisabled}\n                theme={theme}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const defaultItem: Record<string, any> = {};\n            property.values?.forEach((valueProperty: any) => {\n              defaultItem[valueProperty.name] =\n                valueProperty.default !== undefined ? valueProperty.default : '';\n            });\n            onChange([...collectionValue, defaultItem]);\n          }}\n          disabled={isDisabled}\n          block\n          style={{\n            backgroundColor: '#4b5563', // Darker background\n            borderColor: '#6b7280', // Lighter border\n            color: '#ffffff', // Pure white text\n          }}\n        >\n          {property.typeOptions?.multipleValueButtonText || `Add ${property.displayName}`}\n        </Button>\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    if (property.type === 'collection' || property.type === 'fixedCollection') {\n      return renderCollectionField();\n    }\n    return renderBasicField();\n  };\n\n  return (\n    <div className=\"mb-4\">\n      {/* Custom label for dark theme */}\n      <label className=\"block text-sm font-medium text-gray-100 mb-2\">\n        {property.displayName}\n        {evaluation.required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      {/* Form field */}\n      {renderField()}\n\n      {/* Description */}\n      {property.description && (\n        <div className=\"text-xs text-gray-300 mt-1\">{property.description}</div>\n      )}\n\n      {/* Error messages */}\n      {hasErrors && (\n        <div className=\"mt-1\">\n          <div className=\"text-xs text-red-300\">Validation error occurred</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DynamicPropertyRenderer: React.FC<DynamicPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  context = {},\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const credentialProp = properties.find((p) => p.name === 'credential');\n  if (credentialProp) {\n  }\n\n  const [localFormState, setLocalFormState] = useState<PropertyFormState>(formState);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalFormState(formState);\n  }, [formState]);\n\n  const evaluationContext: PropertyEvaluationContext = {\n    formState: localFormState,\n    nodeData: context.nodeData,\n    credentials: context.credentials,\n    workflow: context.workflow,\n  };\n\n  const handleChange = useCallback(\n    (name: string, value: PropertyValue) => {\n      const newFormState = { ...localFormState, [name]: value };\n      setLocalFormState(newFormState);\n      onChange(name, value);\n    },\n    [localFormState, onChange]\n  );\n\n  // Group properties if they have grouping information\n  const groupedProperties = properties.reduce(\n    (groups, property) => {\n      const groupName = 'default'; // Can be extended to support property groups\n      if (!groups[groupName]) {\n        groups[groupName] = [];\n      }\n      groups[groupName].push(property);\n      return groups;\n    },\n    {} as Record<string, INodeProperty[]>\n  );\n\n  return (\n    <div className=\"dynamic-property-renderer\">\n      {Object.entries(groupedProperties).map(([groupName, groupProperties]) => (\n        <div key={groupName}>\n          {(groupProperties as INodeProperty[]).map((property: any, index: number) => (\n            <PropertyField\n              key={`${property.name}-${index}`}\n              property={property}\n              value={localFormState[property.name]}\n              onChange={(value) => handleChange(property.name, value)}\n              context={evaluationContext}\n              disabled={disabled}\n              theme={theme}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx",
        "start": 167,
        "end": 751,
        "startLoc": {
          "line": 167,
          "column": 6,
          "position": 1275
        },
        "endLoc": {
          "line": 751,
          "column": 2,
          "position": 5646
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 172,
        "end": 756,
        "startLoc": {
          "line": 172,
          "column": 6,
          "position": 1340
        },
        "endLoc": {
          "line": 756,
          "column": 2,
          "position": 5711
        }
      }
    },
    {
      "format": "tsx",
      "lines": 760,
      "fragment": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { DeleteOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  ColorPicker,\n  DatePicker,\n  Input,\n  InputNumber,\n  Select,\n  Switch,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport type {\n  INodeProperty,\n  PropertyEvaluationContext,\n  PropertyFormState,\n  PropertyValue,\n} from '@/core';\n\n// Simple property evaluation for INodeProperty (registry system)\nconst evaluateINodeProperty = (property: INodeProperty, context: PropertyEvaluationContext) => {\n  // For registry system, we use simpler logic\n  const formState = context.formState || {};\n  const displayOptions = property.displayOptions;\n\n  let visible = true;\n  const disabled = false;\n  const required = property.required || false;\n\n  if (displayOptions?.show) {\n    visible = Object.entries(displayOptions.show).every(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n  }\n\n  if (displayOptions?.hide) {\n    const shouldHide = Object.entries(displayOptions.hide).some(([key, values]) => {\n      const currentValue = formState[key];\n      return (\n        Array.isArray(values) &&\n        currentValue !== undefined &&\n        currentValue !== null &&\n        values.includes(currentValue as string | number | boolean)\n      );\n    });\n    if (shouldHide) visible = false;\n  }\n\n  return { visible, disabled, required };\n};\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\ninterface DynamicPropertyRendererProps {\n  properties: INodeProperty[];\n  formState: PropertyFormState;\n  onChange: (name: string, value: PropertyValue) => void;\n  context?: Partial<PropertyEvaluationContext>;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\ninterface PropertyFieldProps {\n  property: INodeProperty;\n  value: PropertyValue;\n  onChange: (value: PropertyValue) => void;\n  context: PropertyEvaluationContext;\n  disabled?: boolean;\n  theme?: 'light' | 'dark';\n}\n\n// Theme-based styling helper\nconst getThemeStyles = (theme: 'light' | 'dark', hasErrors: boolean = false) => {\n  if (theme === 'light') {\n    return {\n      backgroundColor: '#ffffff',\n      borderColor: hasErrors ? '#ff4d4f' : '#d1d5db',\n      color: '#1f2937',\n      dropdownStyle: {\n        backgroundColor: '#ffffff',\n        border: '1px solid #d1d5db',\n      },\n    };\n  } else {\n    return {\n      backgroundColor: '#4b5563',\n      borderColor: hasErrors ? '#ff4d4f' : '#6b7280',\n      color: '#ffffff',\n      dropdownStyle: {\n        backgroundColor: '#374151',\n        border: '1px solid #6b7280',\n      },\n    };\n  }\n};\n\nconst PropertyField: React.FC<PropertyFieldProps> = ({\n  property,\n  value,\n  onChange,\n  context,\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const evaluation = evaluateINodeProperty(property, context);\n\n  if (!evaluation.visible) {\n    return null;\n  }\n\n  const hasErrors = false; // Simplified validation for registry system\n  const isDisabled = disabled || evaluation.disabled;\n  const themeStyles = getThemeStyles(theme, hasErrors);\n\n  const commonProps = {\n    placeholder: property.placeholder,\n    disabled: isDisabled,\n    style: {\n      backgroundColor: themeStyles.backgroundColor,\n      borderColor: themeStyles.borderColor,\n      color: themeStyles.color,\n      ...(hasErrors ? { borderColor: '#ff4d4f' } : {}),\n    },\n  };\n\n  // Helper function to get credential icons\n  const getCredentialIcon = (type: string) => {\n    switch (type) {\n      case 'openaiApi':\n        return '🤖';\n      case 'anthropicApi':\n        return '🧠';\n      case 'googleAiApi':\n        return '🔷';\n      case 'azureOpenAiApi':\n        return '☁️';\n      case 'awsBedrockApi':\n        return '🟠';\n      case 'gmailOAuth2':\n        return '📧';\n      case 'postgres':\n        return '🐘';\n      case 'mysql':\n        return '🐬';\n      default:\n        return '🔑';\n    }\n  };\n\n  const renderBasicField = () => {\n    switch (property.type) {\n      case 'string':\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n\n      case 'text':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n            rows={property.rows || 4}\n            autoSize={{ minRows: property.rows || 4, maxRows: 10 }}\n          />\n        );\n\n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            value={value as number}\n            onChange={(val) => onChange(val)}\n            min={property.min}\n            max={property.max}\n            step={property.step || 1}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <Switch checked={(value as boolean) || false} onChange={onChange} disabled={isDisabled} />\n        );\n\n      case 'select':\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={onChange}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'multiSelect':\n      case 'multiOptions':\n        return (\n          <Select\n            {...commonProps}\n            mode=\"multiple\"\n            value={(value as string[]) || []}\n            onChange={onChange}\n            className=\"ant-select-multiple\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            tagRender={(props) => {\n              const { label, closable, onClose } = props;\n              return (\n                <span\n                  style={{\n                    backgroundColor: '#1f2937',\n                    border: '1px solid #4b5563',\n                    color: '#ffffff',\n                    borderRadius: '4px',\n                    padding: '2px 8px',\n                    margin: '2px',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    fontSize: '12px',\n                  }}\n                >\n                  {label}\n                  {closable && (\n                    <span\n                      onClick={onClose}\n                      style={{\n                        marginLeft: '4px',\n                        cursor: 'pointer',\n                        color: '#9ca3af',\n                      }}\n                      onMouseEnter={(e) => (e.currentTarget.style.color = '#ffffff')}\n                      onMouseLeave={(e) => (e.currentTarget.style.color = '#9ca3af')}\n                    >\n                      ×\n                    </span>\n                  )}\n                </span>\n              );\n            }}\n          >\n            {property.options?.map((option: any) => (\n              <Option\n                key={String(option.value)}\n                value={option.value}\n                style={{\n                  backgroundColor: '#374151', // Dark option background\n                  color: '#ffffff', // White text\n                }}\n              >\n                {option.name}\n              </Option>\n            ))}\n          </Select>\n        );\n\n      case 'credentialsSelect': {\n        // Get available credentials from context (registry system)\n        const credentialTypes = property.credentialTypes || [];\n        const availableCredentials =\n          context.credentials?.filter(\n            (cred: any) => credentialTypes.length === 0 || credentialTypes.includes(cred.type)\n          ) || [];\n\n        // Debug logging for credential filtering\n        if (property.name === 'credential' && credentialTypes.includes('gmailOAuth2')) {\n        }\n\n        return (\n          <Select\n            {...commonProps}\n            value={value as string}\n            onChange={(selectedValue) => {\n              onChange(selectedValue);\n\n              // Sync with the other credential field\n              if (context.onCredentialChange) {\n                context.onCredentialChange(selectedValue);\n              }\n\n              // Trigger auto-population if a credential is selected\n              if (selectedValue && context.onCredentialSelect) {\n                const selectedCredential = availableCredentials.find(\n                  (cred: any) => cred.id === selectedValue\n                );\n                if (selectedCredential) {\n                  context.onCredentialSelect(selectedCredential);\n                }\n              }\n            }}\n            placeholder=\"Select a credential...\"\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n            dropdownStyle={{\n              backgroundColor: '#374151', // Dark dropdown background\n              border: '1px solid #6b7280', // Lighter border\n            }}\n            dropdownClassName=\"custom-dark-dropdown\"\n            dropdownRender={(menu) => (\n              <div>\n                {menu}\n                {credentialTypes.length > 0 && (\n                  <div\n                    style={{\n                      padding: '8px',\n                      borderTop: '1px solid #6b7280',\n                      backgroundColor: '#374151',\n                    }}\n                  >\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      onClick={() => {\n                        // Trigger credential creation modal\n                        if (context.onCreateCredential) {\n                          context.onCreateCredential(credentialTypes[0]);\n                        } else {\n                        }\n                      }}\n                      style={{\n                        color: '#3b82f6',\n                        padding: '2px 8px',\n                        height: 'auto',\n                      }}\n                    >\n                      + Create New Credential\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          >\n            <Option value=\"\" style={{ backgroundColor: '#374151', color: '#ffffff' }}>\n              No credential selected\n            </Option>\n            {availableCredentials.map((credential: any) => {\n              const credTypeDef = context.credentialTypes?.find(\n                (ct: any) => ct.name === credential.type\n              );\n              const icon =\n                credTypeDef?.icon && typeof credTypeDef.icon === 'string'\n                  ? credTypeDef.icon\n                  : getCredentialIcon(credential.type);\n              const displayName =\n                credential.name || `${credTypeDef?.displayName || credential.type} Credential`;\n\n              return (\n                <Option\n                  key={credential.id}\n                  value={credential.id}\n                  style={{ backgroundColor: '#374151', color: '#ffffff' }}\n                >\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px',\n                    }}\n                  >\n                    <span style={{ fontSize: '14px' }}>{icon}</span>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 500 }}>{displayName}</div>\n                      <div style={{ fontSize: '11px', color: '#9ca3af' }}>\n                        {credential.testedAt\n                          ? credential.isValid\n                            ? '✓ Tested'\n                            : '⚠ Test failed'\n                          : 'Not tested'}\n                        {credential.updatedAt && (\n                          <span style={{ marginLeft: '8px' }}>\n                            {new Date(credential.updatedAt).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div style={{ display: 'flex', gap: '4px' }}>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onEditCredential) {\n                            context.onEditCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#3b82f6')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Edit credential\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (context.onDeleteCredential && confirm(`Delete \"${displayName}\"?`)) {\n                            context.onDeleteCredential(credential);\n                          }\n                        }}\n                        style={{\n                          background: 'none',\n                          border: 'none',\n                          color: '#6b7280',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          padding: '2px',\n                        }}\n                        onMouseEnter={(e) => (e.currentTarget.style.color = '#ef4444')}\n                        onMouseLeave={(e) => (e.currentTarget.style.color = '#6b7280')}\n                        title=\"Delete credential\"\n                      >\n                        🗑️\n                      </button>\n                    </div>\n                  </div>\n                </Option>\n              );\n            })}\n          </Select>\n        );\n      }\n\n      case 'dateTime':\n        return (\n          <DatePicker\n            {...commonProps}\n            showTime\n            value={value ? new Date(value as string) : null}\n            onChange={(date) => onChange(date?.toISOString() || null)}\n            style={{\n              width: '100%',\n              backgroundColor: '#4b5563', // Darker gray-600\n              borderColor: hasErrors ? '#ff4d4f' : '#6b7280', // Lighter border\n              color: '#ffffff', // Pure white text\n            }}\n          />\n        );\n\n      case 'color':\n        return (\n          <ColorPicker\n            value={(value as string) || '#000000'}\n            onChange={(color) => onChange(color.toHexString())}\n            disabled={isDisabled}\n          />\n        );\n\n      case 'json':\n        return (\n          <TextArea\n            {...commonProps}\n            value={(value as string) || '{}'}\n            onChange={(e) => onChange(e.target.value)}\n            rows={6}\n            placeholder=\"Enter valid JSON...\"\n          />\n        );\n\n      case 'file':\n        return (\n          <Upload\n            {...commonProps}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                onChange(info.file.response?.url || info.file.name);\n              }\n            }}\n          >\n            <Button icon={<UploadOutlined />} disabled={isDisabled}>\n              Upload File\n            </Button>\n          </Upload>\n        );\n\n      default:\n        return (\n          <Input\n            {...commonProps}\n            value={(value as string) || ''}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        );\n    }\n  };\n\n  const renderCollectionField = () => {\n    const collectionValue = (value as any[]) || [];\n    const isMultiple = property.typeOptions?.multipleValues;\n\n    if (!isMultiple) {\n      // Single collection item\n      const itemValue = collectionValue[0] || {};\n      return (\n        <Card\n          size=\"small\"\n          style={{\n            marginBottom: 8,\n            backgroundColor: themeStyles.backgroundColor,\n            borderColor: themeStyles.borderColor,\n            color: themeStyles.color,\n          }}\n        >\n          {property.values?.map((valueProperty: any) => (\n            <PropertyField\n              key={valueProperty.name}\n              property={valueProperty as INodeProperty}\n              value={itemValue[valueProperty.name]}\n              onChange={(newValue) => {\n                const newItem = {\n                  ...itemValue,\n                  [valueProperty.name]: newValue,\n                };\n                onChange([newItem]);\n              }}\n              context={context}\n              disabled={isDisabled}\n              theme={theme}\n            />\n          ))}\n        </Card>\n      );\n    }\n\n    // Multiple collection items\n    return (\n      <div>\n        {collectionValue.map((item, index) => (\n          <Card\n            key={index}\n            size=\"small\"\n            style={{\n              marginBottom: 8,\n              backgroundColor: themeStyles.backgroundColor,\n              borderColor: themeStyles.borderColor,\n              color: themeStyles.color,\n            }}\n            extra={\n              <Button\n                type=\"text\"\n                danger\n                size=\"small\"\n                icon={<DeleteOutlined />}\n                onClick={() => {\n                  const newValue = collectionValue.filter((_, i) => i !== index);\n                  onChange(newValue);\n                }}\n                disabled={isDisabled}\n              />\n            }\n          >\n            {property.values?.map((valueProperty: any) => (\n              <PropertyField\n                key={`${index}-${valueProperty.name}`}\n                property={valueProperty as INodeProperty}\n                value={item[valueProperty.name]}\n                onChange={(newValue) => {\n                  const newItems = [...collectionValue];\n                  newItems[index] = {\n                    ...newItems[index],\n                    [valueProperty.name]: newValue,\n                  };\n                  onChange(newItems);\n                }}\n                context={context}\n                disabled={isDisabled}\n                theme={theme}\n              />\n            ))}\n          </Card>\n        ))}\n\n        <Button\n          type=\"dashed\"\n          icon={<PlusOutlined />}\n          onClick={() => {\n            const defaultItem: Record<string, any> = {};\n            property.values?.forEach((valueProperty: any) => {\n              defaultItem[valueProperty.name] =\n                valueProperty.default !== undefined ? valueProperty.default : '';\n            });\n            onChange([...collectionValue, defaultItem]);\n          }}\n          disabled={isDisabled}\n          block\n          style={{\n            backgroundColor: '#4b5563', // Darker background\n            borderColor: '#6b7280', // Lighter border\n            color: '#ffffff', // Pure white text\n          }}\n        >\n          {property.typeOptions?.multipleValueButtonText || `Add ${property.displayName}`}\n        </Button>\n      </div>\n    );\n  };\n\n  const renderField = () => {\n    if (property.type === 'collection' || property.type === 'fixedCollection') {\n      return renderCollectionField();\n    }\n    return renderBasicField();\n  };\n\n  return (\n    <div className=\"mb-4\">\n      {/* Custom label for dark theme */}\n      <label className=\"block text-sm font-medium text-gray-100 mb-2\">\n        {property.displayName}\n        {evaluation.required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      {/* Form field */}\n      {renderField()}\n\n      {/* Description */}\n      {property.description && (\n        <div className=\"text-xs text-gray-300 mt-1\">{property.description}</div>\n      )}\n\n      {/* Error messages */}\n      {hasErrors && (\n        <div className=\"mt-1\">\n          <div className=\"text-xs text-red-300\">Validation error occurred</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DynamicPropertyRenderer: React.FC<DynamicPropertyRendererProps> = ({\n  properties,\n  formState,\n  onChange,\n  context = {},\n  disabled = false,\n  theme = 'dark',\n}) => {\n  const credentialProp = properties.find((p) => p.name === 'credential');\n  if (credentialProp) {\n  }\n\n  const [localFormState, setLocalFormState] = useState<PropertyFormState>(formState);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalFormState(formState);\n  }, [formState]);\n\n  const evaluationContext: PropertyEvaluationContext = {\n    formState: localFormState,\n    nodeData: context.nodeData,\n    credentials: context.credentials,\n    workflow: context.workflow,\n  };\n\n  const handleChange = useCallback(\n    (name: string, value: PropertyValue) => {\n      const newFormState = { ...localFormState, [name]: value };\n      setLocalFormState(newFormState);\n      onChange(name, value);\n    },\n    [localFormState, onChange]\n  );\n\n  // Group properties if they have grouping information\n  const groupedProperties = properties.reduce(\n    (groups, property) => {\n      const groupName = 'default'; // Can be extended to support property groups\n      if (!groups[groupName]) {\n        groups[groupName] = [];\n      }\n      groups[groupName].push(property);\n      return groups;\n    },\n    {} as Record<string, INodeProperty[]>\n  );\n\n  return (\n    <div className=\"dynamic-property-renderer\">\n      {Object.entries(groupedProperties).map(([groupName, groupProperties]) => (\n        <div key={groupName}>\n          {(groupProperties as INodeProperty[]).map((property: any, index: number) => (\n            <PropertyField\n              key={`${property.name}-${index}`}\n              property={property}\n              value={localFormState[property.name]}\n              onChange={(value) => handleChange(property.name, value)}\n              context={evaluationContext}\n              disabled={disabled}\n              theme={theme}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default DynamicPropertyRenderer;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DynamicPropertyRenderer.tsx",
        "start": 1,
        "end": 760,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 760,
          "column": 2,
          "position": 5684
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/dynamicpropertyrenderer/DynamicPropertyRenderer.tsx",
        "start": 6,
        "end": 765,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 765,
          "column": 2,
          "position": 5749
        }
      }
    },
    {
      "format": "javascript",
      "lines": 552,
      "fragment": "={5} className=\"text-white mb-0\">\n              Debug Controls\n            </Title>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge\n              status={getStatusColor() as any}\n              text={getStatusText()}\n              className=\"text-gray-300\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {!isDebugging ? (\n            <Button\n              type=\"primary\"\n              icon={<PlayCircleOutlined />}\n              onClick={startDebugging}\n              disabled={!workflowId || !executionId}\n            >\n              Start Debugging\n            </Button>\n          ) : (\n            <>\n              {isPaused ? (\n                <Button type=\"primary\" icon={<PlayCircleOutlined />} onClick={resumeExecution}>\n                  Resume\n                </Button>\n              ) : (\n                <Button icon={<PauseCircleOutlined />} onClick={pauseExecution}>\n                  Pause\n                </Button>\n              )}\n\n              <Button\n                icon={<StepForwardOutlined />}\n                onClick={stepOver}\n                disabled={!isPaused}\n                title=\"Step Over\"\n              />\n\n              <Button\n                icon={<StepBackwardOutlined />}\n                onClick={stepInto}\n                disabled={!isPaused}\n                title=\"Step Into\"\n              />\n\n              <Button\n                icon={<StopOutlined />}\n                onClick={stepOut}\n                disabled={!isPaused}\n                title=\"Step Out\"\n              />\n\n              <Button danger icon={<StopOutlined />} onClick={stopDebugging}>\n                Stop\n              </Button>\n            </>\n          )}\n        </div>\n\n        {session && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <Text className=\"text-gray-400\">Session ID:</Text>\n              <div className=\"text-white font-mono\">{session.id}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Step Count:</Text>\n              <div className=\"text-white\">{session.stepCount}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Duration:</Text>\n              <div className=\"text-white\">\n                {Math.round((Date.now() - session.startTime) / 1000)}s\n              </div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Current Node:</Text>\n              <div className=\"text-white\">{session.currentNodeId || 'None'}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n\n  const renderBreakpoints = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Breakpoints\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsBreakpointModalOpen(true)}\n        >\n          Add Breakpoint\n        </Button>\n      </div>\n\n      {session && session.breakpoints.size === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <BugOutlined className=\"text-4xl mb-2\" />\n          <div>No breakpoints set</div>\n          <div className=\"text-xs mt-2\">Add breakpoints to pause execution at specific nodes</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Array.from(session?.breakpoints.entries() || []).map(([nodeId, breakpoints]) =>\n            breakpoints.map((breakpoint) => (\n              <Card key={breakpoint.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      size=\"small\"\n                      checked={breakpoint.enabled}\n                      onChange={() => toggleBreakpoint(nodeId, breakpoint.id)}\n                    />\n                    <div>\n                      <div className=\"text-white text-sm font-medium\">Node: {nodeId}</div>\n                      {breakpoint.condition && (\n                        <div className=\"text-gray-400 text-xs\">\n                          Condition: {breakpoint.condition}\n                        </div>\n                      )}\n                      <div className=\"text-gray-500 text-xs\">Hits: {breakpoint.hitCount}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Badge\n                      count={breakpoint.hitCount}\n                      size=\"small\"\n                      style={{ backgroundColor: '#1890ff' }}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeBreakpoint(nodeId, breakpoint.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                    />\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderWatchExpressions = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Watch Expressions\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsWatchModalOpen(true)}\n        >\n          Add Watch\n        </Button>\n      </div>\n\n      {watchExpressions.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <EyeOutlined className=\"text-4xl mb-2\" />\n          <div>No watch expressions</div>\n          <div className=\"text-xs mt-2\">Add expressions to monitor variable values</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {watchExpressions.map((watch) => (\n            <Card key={watch.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"text-white text-sm font-mono\">{watch.expression}</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">\n                    {watch.error ? (\n                      <span className=\"text-red-400\">Error: {watch.error}</span>\n                    ) : (\n                      <>\n                        <span className=\"text-green-400\">Value: </span>\n                        <span className=\"font-mono\">\n                          {typeof watch.value === 'object'\n                            ? JSON.stringify(watch.value)\n                            : String(watch.value)}\n                        </span>\n                        <span className=\"text-gray-500 ml-2\">({watch.type})</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  onClick={() => removeWatchExpression(watch.id)}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCallStack = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Call Stack\n      </Title>\n\n      {callStack.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <CodeOutlined className=\"text-4xl mb-2\" />\n          <div>Call stack is empty</div>\n          <div className=\"text-xs mt-2\">Start debugging to see the call stack</div>\n        </div>\n      ) : (\n        <Timeline\n          items={callStack.map((frame, index) => ({\n            color: index === callStack.length - 1 ? 'blue' : 'gray',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white font-medium\">{frame.nodeName}</div>\n                <div className=\"text-gray-400 text-sm\">{frame.nodeType}</div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(frame.timestamp).toLocaleTimeString()}\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderVariables = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Variables\n      </Title>\n\n      {Object.keys(variables).length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <InfoCircleOutlined className=\"text-4xl mb-2\" />\n          <div>No variables available</div>\n          <div className=\"text-xs mt-2\">Variables will appear during execution</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Object.entries(variables).map(([key, value]) => (\n            <Card key={key} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"space-y-2\">\n                <div className=\"text-white font-medium\">{key}</div>\n                <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"200px\" />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderExecutionHistory = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Execution History\n      </Title>\n\n      {executionHistory.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <HistoryOutlined className=\"text-4xl mb-2\" />\n          <div>No execution history</div>\n          <div className=\"text-xs mt-2\">Execution steps will appear here</div>\n        </div>\n      ) : (\n        <Timeline\n          items={executionHistory.map((step) => ({\n            color:\n              step.action === 'error' ? 'red' : step.action === 'breakpoint' ? 'orange' : 'blue',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-white font-medium\">{step.nodeId}</span>\n                  <Tag\n                    color={\n                      step.action === 'error'\n                        ? 'red'\n                        : step.action === 'breakpoint'\n                          ? 'orange'\n                          : step.action === 'start'\n                            ? 'blue'\n                            : 'green'\n                    }\n                  >\n                    {step.action}\n                  </Tag>\n                </div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(step.timestamp).toLocaleTimeString()}\n                  {step.duration && ` (${step.duration}ms)`}\n                </div>\n                {step.error && (\n                  <div className=\"text-red-400 text-xs\">Error: {step.error.message}</div>\n                )}\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderMetrics = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Debug Metrics\n      </Title>\n\n      {!metrics ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <SettingOutlined className=\"text-4xl mb-2\" />\n          <div>No metrics available</div>\n          <div className=\"text-xs mt-2\">Start debugging to see performance metrics</div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-400\">{metrics.totalSteps}</div>\n              <div className=\"text-gray-400 text-sm\">Total Steps</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-400\">{metrics.breakpointHits}</div>\n              <div className=\"text-gray-400 text-sm\">Breakpoint Hits</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-400\">{metrics.errors}</div>\n              <div className=\"text-gray-400 text-sm\">Errors</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                {Math.round(metrics.averageStepTime)}ms\n              </div>\n              <div className=\"text-gray-400 text-sm\">Avg Step Time</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-400\">{metrics.callStackDepth}</div>\n              <div className=\"text-gray-400 text-sm\">Call Stack Depth</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {Math.round(metrics.memoryUsage)}MB\n              </div>\n              <div className=\"text-gray-400 text-sm\">Memory Usage</div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <BugOutlined className=\"text-red-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Debug Panel\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced debugging tools for workflow execution\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        {renderDebugControls()}\n\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"debug-tabs\"\n          items={[\n            {\n              key: 'breakpoints',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Breakpoints\n                  {session && session.breakpoints.size > 0 && (\n                    <Badge\n                      count={Array.from(session.breakpoints.values()).flat().length}\n                      size=\"small\"\n                      className=\"ml-2\"\n                    />\n                  )}\n                </span>\n              ),\n              children: renderBreakpoints(),\n            },\n            {\n              key: 'watch',\n              label: (\n                <span>\n                  <EyeOutlined className=\"mr-1\" />\n                  Watch\n                  {watchExpressions.length > 0 && (\n                    <Badge count={watchExpressions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderWatchExpressions(),\n            },\n            {\n              key: 'callstack',\n              label: (\n                <span>\n                  <CodeOutlined className=\"mr-1\" />\n                  Call Stack\n                  {callStack.length > 0 && (\n                    <Badge count={callStack.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderCallStack(),\n            },\n            {\n              key: 'variables',\n              label: (\n                <span>\n                  <InfoCircleOutlined className=\"mr-1\" />\n                  Variables\n                  {Object.keys(variables).length > 0 && (\n                    <Badge count={Object.keys(variables).length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderVariables(),\n            },\n            {\n              key: 'history',\n              label: (\n                <span>\n                  <HistoryOutlined className=\"mr-1\" />\n                  History\n                  {executionHistory.length > 0 && (\n                    <Badge count={executionHistory.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderExecutionHistory(),\n            },\n            {\n              key: 'metrics',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Metrics\n                </span>\n              ),\n              children: renderMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Add Breakpoint Modal */}\n      <Modal\n        title=\"Add Breakpoint\"\n        open={isBreakpointModalOpen}\n        onCancel={() => setIsBreakpointModalOpen(false)}\n        onOk={() => {\n          if (selectedNodeId) {\n            addBreakpoint(selectedNodeId);\n            setIsBreakpointModalOpen(false);\n            setSelectedNodeId('');\n          }\n        }}\n        width={400}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Node ID\" required>\n            <Input\n              value={selectedNodeId}\n              onChange={(e) => setSelectedNodeId(e.target.value)}\n              placeholder=\"Enter node ID\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Add Watch Expression Modal */}\n      <Modal\n        title=\"Add Watch Expression\"\n        open={isWatchModalOpen}\n        onCancel={() => setIsWatchModalOpen(false)}\n        onOk={addWatchExpression}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Expression\" required>\n            <Input\n              value={newWatchExpression}\n              onChange={(e) => setNewWatchExpression(e.target.value)}\n              placeholder=\"e.g., $input.user.name, variables.count, $output.result\"\n            />\n          </Form.Item>\n          <Alert\n            message=\"Expression Examples\"\n            description={\n              <ul className=\"mt-2 text-sm\">\n                <li>\n                  <code>$input.user.name</code> - Access input data\n                </li>\n                <li>\n                  <code>$output.result</code> - Access output data\n                </li>\n                <li>\n                  <code>variables.count</code> - Access workflow variables\n                </li>\n                <li>\n                  <code>JSON.stringify($input)</code> - Convert to JSON\n                </li>\n              </ul>\n            }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx",
        "start": 235,
        "end": 786,
        "startLoc": {
          "line": 235,
          "column": 6,
          "position": 1845
        },
        "endLoc": {
          "line": 786,
          "column": 2,
          "position": 6483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx",
        "start": 240,
        "end": 791,
        "startLoc": {
          "line": 240,
          "column": 6,
          "position": 1910
        },
        "endLoc": {
          "line": 791,
          "column": 2,
          "position": 6548
        }
      }
    },
    {
      "format": "tsx",
      "lines": 796,
      "fragment": "/**\n * Debug Panel Component\n *\n * Comprehensive debugging interface providing:\n * - Breakpoint management and execution control\n * - Step-through debugging with call stack visualization\n * - Data inspection and variable watching\n * - Execution history and replay functionality\n * - Performance profiling and metrics\n */\n\nimport {\n  BugOutlined,\n  CodeOutlined,\n  DeleteOutlined,\n  EyeOutlined,\n  HistoryOutlined,\n  InfoCircleOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  PlusOutlined,\n  SettingOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  StopOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Form,\n  Input,\n  Modal,\n  Switch,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { enhancedDebuggingService } from '@/core/services/enhancedDebuggingService';\nimport type {\n  CallStackFrame,\n  DebugEvent,\n  DebugMetrics,\n  DebugSession,\n  ExecutionStep,\n  WatchExpression,\n} from '@/core/types/debugging';\nimport { JsonViewer } from '@/design-system';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\n\ninterface DebugPanelProps {\n  workflowId?: string;\n  executionId?: string;\n  className?: string;\n}\n\nconst DebugPanel: React.FC<DebugPanelProps> = ({ workflowId, executionId, className }) => {\n  const [activeTab, setActiveTab] = useState('controls');\n  const [session, setSession] = useState<DebugSession | null>(null);\n  const [isDebugging, setIsDebugging] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [_currentStep, _setCurrentStep] = useState<ExecutionStep | null>(null);\n\n  const [watchExpressions, _setWatchExpressions] = useState<WatchExpression[]>([]);\n  const [callStack, setCallStack] = useState<CallStackFrame[]>([]);\n  const [variables, setVariables] = useState<Record<string, any>>({});\n  const [executionHistory, _setExecutionHistory] = useState<ExecutionStep[]>([]);\n  const [metrics, setMetrics] = useState<DebugMetrics | null>(null);\n  const [isBreakpointModalOpen, setIsBreakpointModalOpen] = useState(false);\n  const [isWatchModalOpen, setIsWatchModalOpen] = useState(false);\n  const [selectedNodeId, setSelectedNodeId] = useState<string>('');\n  const [newWatchExpression, setNewWatchExpression] = useState('');\n\n  // Subscribe to debug events\n  useEffect(() => {\n    const unsubscribe = enhancedDebuggingService.subscribe((event: DebugEvent) => {\n      handleDebugEvent(event);\n    });\n\n    return unsubscribe;\n  }, [handleDebugEvent]);\n\n  const handleDebugEvent = useCallback(\n    (event: DebugEvent) => {\n      switch (event.type) {\n        case 'session-started':\n          setIsDebugging(true);\n          break;\n        case 'session-ended':\n          setIsDebugging(false);\n          setIsPaused(false);\n          setSession(null);\n          break;\n        case 'step-completed':\n          _setCurrentStep(event.data);\n          updateSessionData();\n          break;\n        case 'breakpoint-hit':\n          setIsPaused(true);\n          updateSessionData();\n          break;\n        case 'error-occurred':\n          setIsPaused(true);\n          updateSessionData();\n          break;\n      }\n    },\n    [updateSessionData]\n  );\n\n  const updateSessionData = useCallback(() => {\n    const currentSession = enhancedDebuggingService.getCurrentSession();\n    if (currentSession) {\n      setSession(currentSession);\n      setCallStack(enhancedDebuggingService.getCallStack());\n      setVariables(enhancedDebuggingService.getVariables());\n      setMetrics(enhancedDebuggingService.getDebugMetrics());\n    }\n  }, []);\n\n  const startDebugging = useCallback(async () => {\n    if (!workflowId || !executionId) return;\n\n    try {\n      await enhancedDebuggingService.startDebugging(workflowId, executionId);\n      setIsDebugging(true);\n      updateSessionData();\n    } catch (_error) {}\n  }, [workflowId, executionId, updateSessionData]);\n\n  const stopDebugging = useCallback(() => {\n    enhancedDebuggingService.stopDebugging();\n    setIsDebugging(false);\n    setIsPaused(false);\n    setSession(null);\n  }, []);\n\n  const pauseExecution = useCallback(() => {\n    enhancedDebuggingService.pauseExecution();\n    setIsPaused(true);\n  }, []);\n\n  const resumeExecution = useCallback(() => {\n    enhancedDebuggingService.resumeExecution();\n    setIsPaused(false);\n  }, []);\n\n  const stepOver = useCallback(() => {\n    enhancedDebuggingService.stepOver();\n    setIsPaused(true);\n  }, []);\n\n  const stepInto = useCallback(() => {\n    enhancedDebuggingService.stepInto();\n    setIsPaused(true);\n  }, []);\n\n  const stepOut = useCallback(() => {\n    enhancedDebuggingService.stepOut();\n    setIsPaused(true);\n  }, []);\n\n  const addBreakpoint = useCallback(\n    (nodeId: string, condition?: string) => {\n      enhancedDebuggingService.addBreakpoint(nodeId, {\n        nodeId,\n        enabled: true,\n        hitCount: 0,\n        condition,\n        actions: [{ type: 'pause' }],\n        createdAt: Date.now(),\n      });\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const removeBreakpoint = useCallback(\n    (nodeId: string, breakpointId: string) => {\n      enhancedDebuggingService.removeBreakpoint(nodeId, breakpointId);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const toggleBreakpoint = useCallback(\n    (nodeId: string, breakpointId: string) => {\n      enhancedDebuggingService.toggleBreakpoint(nodeId, breakpointId);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const addWatchExpression = useCallback(() => {\n    if (newWatchExpression.trim()) {\n      enhancedDebuggingService.addWatchExpression(newWatchExpression.trim());\n      setNewWatchExpression('');\n      setIsWatchModalOpen(false);\n      updateSessionData();\n    }\n  }, [newWatchExpression, updateSessionData]);\n\n  const removeWatchExpression = useCallback(\n    (id: string) => {\n      enhancedDebuggingService.removeWatchExpression(id);\n      updateSessionData();\n    },\n    [updateSessionData]\n  );\n\n  const getStatusColor = () => {\n    if (!isDebugging) return 'gray';\n    if (isPaused) return 'orange';\n    return 'green';\n  };\n\n  const getStatusText = () => {\n    if (!isDebugging) return 'Not Debugging';\n    if (isPaused) return 'Paused';\n    return 'Running';\n  };\n\n  const renderDebugControls = () => (\n    <Card size=\"small\" className=\"bg-gray-800 border-gray-600 mb-4\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <BugOutlined className=\"text-blue-400\" />\n            <Title level={5} className=\"text-white mb-0\">\n              Debug Controls\n            </Title>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge\n              status={getStatusColor() as any}\n              text={getStatusText()}\n              className=\"text-gray-300\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {!isDebugging ? (\n            <Button\n              type=\"primary\"\n              icon={<PlayCircleOutlined />}\n              onClick={startDebugging}\n              disabled={!workflowId || !executionId}\n            >\n              Start Debugging\n            </Button>\n          ) : (\n            <>\n              {isPaused ? (\n                <Button type=\"primary\" icon={<PlayCircleOutlined />} onClick={resumeExecution}>\n                  Resume\n                </Button>\n              ) : (\n                <Button icon={<PauseCircleOutlined />} onClick={pauseExecution}>\n                  Pause\n                </Button>\n              )}\n\n              <Button\n                icon={<StepForwardOutlined />}\n                onClick={stepOver}\n                disabled={!isPaused}\n                title=\"Step Over\"\n              />\n\n              <Button\n                icon={<StepBackwardOutlined />}\n                onClick={stepInto}\n                disabled={!isPaused}\n                title=\"Step Into\"\n              />\n\n              <Button\n                icon={<StopOutlined />}\n                onClick={stepOut}\n                disabled={!isPaused}\n                title=\"Step Out\"\n              />\n\n              <Button danger icon={<StopOutlined />} onClick={stopDebugging}>\n                Stop\n              </Button>\n            </>\n          )}\n        </div>\n\n        {session && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <Text className=\"text-gray-400\">Session ID:</Text>\n              <div className=\"text-white font-mono\">{session.id}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Step Count:</Text>\n              <div className=\"text-white\">{session.stepCount}</div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Duration:</Text>\n              <div className=\"text-white\">\n                {Math.round((Date.now() - session.startTime) / 1000)}s\n              </div>\n            </div>\n            <div>\n              <Text className=\"text-gray-400\">Current Node:</Text>\n              <div className=\"text-white\">{session.currentNodeId || 'None'}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n\n  const renderBreakpoints = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Breakpoints\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsBreakpointModalOpen(true)}\n        >\n          Add Breakpoint\n        </Button>\n      </div>\n\n      {session && session.breakpoints.size === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <BugOutlined className=\"text-4xl mb-2\" />\n          <div>No breakpoints set</div>\n          <div className=\"text-xs mt-2\">Add breakpoints to pause execution at specific nodes</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Array.from(session?.breakpoints.entries() || []).map(([nodeId, breakpoints]) =>\n            breakpoints.map((breakpoint) => (\n              <Card key={breakpoint.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      size=\"small\"\n                      checked={breakpoint.enabled}\n                      onChange={() => toggleBreakpoint(nodeId, breakpoint.id)}\n                    />\n                    <div>\n                      <div className=\"text-white text-sm font-medium\">Node: {nodeId}</div>\n                      {breakpoint.condition && (\n                        <div className=\"text-gray-400 text-xs\">\n                          Condition: {breakpoint.condition}\n                        </div>\n                      )}\n                      <div className=\"text-gray-500 text-xs\">Hits: {breakpoint.hitCount}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Badge\n                      count={breakpoint.hitCount}\n                      size=\"small\"\n                      style={{ backgroundColor: '#1890ff' }}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeBreakpoint(nodeId, breakpoint.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                    />\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderWatchExpressions = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <Title level={5} className=\"text-white mb-0\">\n          Watch Expressions\n        </Title>\n        <Button\n          type=\"dashed\"\n          size=\"small\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsWatchModalOpen(true)}\n        >\n          Add Watch\n        </Button>\n      </div>\n\n      {watchExpressions.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <EyeOutlined className=\"text-4xl mb-2\" />\n          <div>No watch expressions</div>\n          <div className=\"text-xs mt-2\">Add expressions to monitor variable values</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {watchExpressions.map((watch) => (\n            <Card key={watch.id} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"text-white text-sm font-mono\">{watch.expression}</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">\n                    {watch.error ? (\n                      <span className=\"text-red-400\">Error: {watch.error}</span>\n                    ) : (\n                      <>\n                        <span className=\"text-green-400\">Value: </span>\n                        <span className=\"font-mono\">\n                          {typeof watch.value === 'object'\n                            ? JSON.stringify(watch.value)\n                            : String(watch.value)}\n                        </span>\n                        <span className=\"text-gray-500 ml-2\">({watch.type})</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  onClick={() => removeWatchExpression(watch.id)}\n                  className=\"text-red-400 hover:text-red-300\"\n                />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCallStack = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Call Stack\n      </Title>\n\n      {callStack.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <CodeOutlined className=\"text-4xl mb-2\" />\n          <div>Call stack is empty</div>\n          <div className=\"text-xs mt-2\">Start debugging to see the call stack</div>\n        </div>\n      ) : (\n        <Timeline\n          items={callStack.map((frame, index) => ({\n            color: index === callStack.length - 1 ? 'blue' : 'gray',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white font-medium\">{frame.nodeName}</div>\n                <div className=\"text-gray-400 text-sm\">{frame.nodeType}</div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(frame.timestamp).toLocaleTimeString()}\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderVariables = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Variables\n      </Title>\n\n      {Object.keys(variables).length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <InfoCircleOutlined className=\"text-4xl mb-2\" />\n          <div>No variables available</div>\n          <div className=\"text-xs mt-2\">Variables will appear during execution</div>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {Object.entries(variables).map(([key, value]) => (\n            <Card key={key} size=\"small\" className=\"bg-gray-800 border-gray-600\">\n              <div className=\"space-y-2\">\n                <div className=\"text-white font-medium\">{key}</div>\n                <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"200px\" />\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderExecutionHistory = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Execution History\n      </Title>\n\n      {executionHistory.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <HistoryOutlined className=\"text-4xl mb-2\" />\n          <div>No execution history</div>\n          <div className=\"text-xs mt-2\">Execution steps will appear here</div>\n        </div>\n      ) : (\n        <Timeline\n          items={executionHistory.map((step) => ({\n            color:\n              step.action === 'error' ? 'red' : step.action === 'breakpoint' ? 'orange' : 'blue',\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-white font-medium\">{step.nodeId}</span>\n                  <Tag\n                    color={\n                      step.action === 'error'\n                        ? 'red'\n                        : step.action === 'breakpoint'\n                          ? 'orange'\n                          : step.action === 'start'\n                            ? 'blue'\n                            : 'green'\n                    }\n                  >\n                    {step.action}\n                  </Tag>\n                </div>\n                <div className=\"text-gray-500 text-xs\">\n                  {new Date(step.timestamp).toLocaleTimeString()}\n                  {step.duration && ` (${step.duration}ms)`}\n                </div>\n                {step.error && (\n                  <div className=\"text-red-400 text-xs\">Error: {step.error.message}</div>\n                )}\n              </div>\n            ),\n          }))}\n        />\n      )}\n    </div>\n  );\n\n  const renderMetrics = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white mb-0\">\n        Debug Metrics\n      </Title>\n\n      {!metrics ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <SettingOutlined className=\"text-4xl mb-2\" />\n          <div>No metrics available</div>\n          <div className=\"text-xs mt-2\">Start debugging to see performance metrics</div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-400\">{metrics.totalSteps}</div>\n              <div className=\"text-gray-400 text-sm\">Total Steps</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-400\">{metrics.breakpointHits}</div>\n              <div className=\"text-gray-400 text-sm\">Breakpoint Hits</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-400\">{metrics.errors}</div>\n              <div className=\"text-gray-400 text-sm\">Errors</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                {Math.round(metrics.averageStepTime)}ms\n              </div>\n              <div className=\"text-gray-400 text-sm\">Avg Step Time</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-400\">{metrics.callStackDepth}</div>\n              <div className=\"text-gray-400 text-sm\">Call Stack Depth</div>\n            </div>\n          </Card>\n\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {Math.round(metrics.memoryUsage)}MB\n              </div>\n              <div className=\"text-gray-400 text-sm\">Memory Usage</div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <BugOutlined className=\"text-red-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Debug Panel\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced debugging tools for workflow execution\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        {renderDebugControls()}\n\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"debug-tabs\"\n          items={[\n            {\n              key: 'breakpoints',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Breakpoints\n                  {session && session.breakpoints.size > 0 && (\n                    <Badge\n                      count={Array.from(session.breakpoints.values()).flat().length}\n                      size=\"small\"\n                      className=\"ml-2\"\n                    />\n                  )}\n                </span>\n              ),\n              children: renderBreakpoints(),\n            },\n            {\n              key: 'watch',\n              label: (\n                <span>\n                  <EyeOutlined className=\"mr-1\" />\n                  Watch\n                  {watchExpressions.length > 0 && (\n                    <Badge count={watchExpressions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderWatchExpressions(),\n            },\n            {\n              key: 'callstack',\n              label: (\n                <span>\n                  <CodeOutlined className=\"mr-1\" />\n                  Call Stack\n                  {callStack.length > 0 && (\n                    <Badge count={callStack.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderCallStack(),\n            },\n            {\n              key: 'variables',\n              label: (\n                <span>\n                  <InfoCircleOutlined className=\"mr-1\" />\n                  Variables\n                  {Object.keys(variables).length > 0 && (\n                    <Badge count={Object.keys(variables).length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderVariables(),\n            },\n            {\n              key: 'history',\n              label: (\n                <span>\n                  <HistoryOutlined className=\"mr-1\" />\n                  History\n                  {executionHistory.length > 0 && (\n                    <Badge count={executionHistory.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: renderExecutionHistory(),\n            },\n            {\n              key: 'metrics',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Metrics\n                </span>\n              ),\n              children: renderMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Add Breakpoint Modal */}\n      <Modal\n        title=\"Add Breakpoint\"\n        open={isBreakpointModalOpen}\n        onCancel={() => setIsBreakpointModalOpen(false)}\n        onOk={() => {\n          if (selectedNodeId) {\n            addBreakpoint(selectedNodeId);\n            setIsBreakpointModalOpen(false);\n            setSelectedNodeId('');\n          }\n        }}\n        width={400}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Node ID\" required>\n            <Input\n              value={selectedNodeId}\n              onChange={(e) => setSelectedNodeId(e.target.value)}\n              placeholder=\"Enter node ID\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Add Watch Expression Modal */}\n      <Modal\n        title=\"Add Watch Expression\"\n        open={isWatchModalOpen}\n        onCancel={() => setIsWatchModalOpen(false)}\n        onOk={addWatchExpression}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Expression\" required>\n            <Input\n              value={newWatchExpression}\n              onChange={(e) => setNewWatchExpression(e.target.value)}\n              placeholder=\"e.g., $input.user.name, variables.count, $output.result\"\n            />\n          </Form.Item>\n          <Alert\n            message=\"Expression Examples\"\n            description={\n              <ul className=\"mt-2 text-sm\">\n                <li>\n                  <code>$input.user.name</code> - Access input data\n                </li>\n                <li>\n                  <code>$output.result</code> - Access output data\n                </li>\n                <li>\n                  <code>variables.count</code> - Access workflow variables\n                </li>\n                <li>\n                  <code>JSON.stringify($input)</code> - Convert to JSON\n                </li>\n              </ul>\n            }\n            type=\"info\"\n            showIcon\n          />\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DebugPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DebugPanel.tsx",
        "start": 1,
        "end": 796,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 796,
          "column": 2,
          "position": 6523
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/debugpanel/DebugPanel.tsx",
        "start": 6,
        "end": 801,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 65
        },
        "endLoc": {
          "line": 801,
          "column": 2,
          "position": 6588
        }
      }
    },
    {
      "format": "javascript",
      "lines": 458,
      "fragment": "={node.key}\n        title={\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-white\">{node.title}</span>\n            <Tag color={getTypeColor(node.type)}>{node.type}</Tag>\n            <span className=\"text-gray-400 text-xs\">{formatSize(node.size)}</span>\n          </div>\n        }\n        isLeaf={node.isLeaf}\n      >\n        {node.children && renderTreeNodes(node.children)}\n      </TreeNode>\n    ));\n  }, []);\n\n  const renderDataTable = useCallback(() => {\n    if (!Array.isArray(selectedData)) {\n      return <Alert message=\"Table view only available for arrays\" type=\"info\" showIcon />;\n    }\n\n    const columns = getTableColumns(selectedData);\n    const tableData = selectedData.map((item, index) => ({\n      key: index,\n      index,\n      ...item,\n    }));\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        pagination={{ pageSize: 10 }}\n        size=\"small\"\n        className=\"bg-gray-800\"\n        scroll={{ x: 'max-content' }}\n      />\n    );\n  }, [selectedData]);\n\n  const renderDataAnalysis = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white\">\n        Data Analysis\n      </Title>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-400\">{dataStats.totalSize}</div>\n            <div className=\"text-gray-400 text-sm\">Total Size</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-400\">{dataStats.depth}</div>\n            <div className=\"text-gray-400 text-sm\">Max Depth</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-400\">{dataStats.keyCount}</div>\n            <div className=\"text-gray-400 text-sm\">Total Keys</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-400\">{dataStats.arrayCount}</div>\n            <div className=\"text-gray-400 text-sm\">Arrays</div>\n          </div>\n        </Card>\n      </div>\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-3\">\n          Type Distribution\n        </Title>\n        <div className=\"space-y-2\">\n          {Object.entries(dataStats.typeDistribution).map(([type, count]) => (\n            <div key={type} className=\"flex items-center justify-between\">\n              <span className=\"text-gray-300\">{type}</span>\n              <div className=\"flex items-center gap-2\">\n                <Progress\n                  percent={(count / dataStats.keyCount) * 100}\n                  strokeColor={getTypeColor(type)}\n                  showInfo={false}\n                  size=\"small\"\n                  className=\"flex-1\"\n                />\n                <span className=\"text-gray-400 text-sm w-8\">{count}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const content = (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <EyeOutlined className=\"text-blue-400 text-lg\" />\n            <Title level={4} className=\"text-white mb-0\">\n              Data Inspector\n            </Title>\n          </div>\n          <Space>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={isFullscreen ? <CompressOutlined /> : <ExpandOutlined />}\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n            {onClose && (\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-300\"\n              >\n                Close\n              </Button>\n            )}\n          </Space>\n        </div>\n\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div>\n            <Text className=\"text-gray-400\">Node:</Text>\n            <span className=\"text-white ml-1\">{nodeId}</span>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Type:</Text>\n            <Tag color={getTypeColor(type)} className=\"ml-1\">\n              {type}\n            </Tag>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Size:</Text>\n            <span className=\"text-white ml-1\">{formatSize(dataStats.totalSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <Search\n            placeholder=\"Search data...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n            prefix={<SearchOutlined className=\"text-gray-400\" />}\n          />\n\n          <Select value={filterType} onChange={setFilterType} className=\"w-32\">\n            <Option value=\"all\">All Types</Option>\n            <Option value=\"string\">String</Option>\n            <Option value=\"number\">Number</Option>\n            <Option value=\"boolean\">Boolean</Option>\n            <Option value=\"object\">Object</Option>\n            <Option value=\"array\">Array</Option>\n          </Select>\n\n          <Select value={viewMode} onChange={setViewMode} className=\"w-24\">\n            <Option value=\"tree\">Tree</Option>\n            <Option value=\"json\">JSON</Option>\n            <Option value=\"table\">Table</Option>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Text className=\"text-gray-400\">Selected Path:</Text>\n            <Text className=\"text-white font-mono text-sm\">{selectedPath || 'root'}</Text>\n          </div>\n\n          <Space>\n            <Tooltip title=\"Copy Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CopyOutlined />}\n                onClick={handleCopyData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Export Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<DownloadOutlined />}\n                onClick={handleExportData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        <Tabs\n          activeKey={viewMode}\n          onChange={(key) => setViewMode(key as 'tree' | 'json' | 'table')}\n          items={[\n            {\n              key: 'tree',\n              label: 'Tree View',\n              children: (\n                <div className=\"h-96 overflow-auto border border-gray-600 rounded bg-gray-800\">\n                  <Tree\n                    showLine\n                    defaultExpandAll={false}\n                    expandedKeys={expandedKeys}\n                    selectedKeys={selectedPath ? [selectedPath] : []}\n                    onSelect={handleTreeSelect}\n                    onExpand={handleExpand}\n                    className=\"p-4\"\n                  >\n                    {renderTreeNodes(filteredTree)}\n                  </Tree>\n                </div>\n              ),\n            },\n            {\n              key: 'json',\n              label: 'JSON View',\n              children: (\n                <div className=\"h-96 overflow-auto\">\n                  <JsonViewer\n                    data={selectedData}\n                    theme=\"dark\"\n                    collapsed={2}\n                    maxHeight=\"100%\"\n                    enableClipboard\n                  />\n                </div>\n              ),\n            },\n            {\n              key: 'table',\n              label: 'Table View',\n              children: <div className=\"h-96 overflow-auto\">{renderDataTable()}</div>,\n            },\n          ]}\n        />\n\n        <Divider className=\"my-4\" />\n\n        {renderDataAnalysis()}\n      </div>\n    </div>\n  );\n\n  if (isFullscreen) {\n    return (\n      <Modal\n        title=\"Data Inspector - Fullscreen\"\n        open={isFullscreen}\n        onCancel={() => setIsFullscreen(false)}\n        footer={null}\n        width=\"90vw\"\n        style={{ top: 20 }}\n        bodyStyle={{ height: '80vh', padding: 0 }}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};\n\n// Helper functions\n\nfunction convertToTree(data: any, path: string, _key: string): DataNode[] {\n  if (data === null || data === undefined) {\n    return [\n      {\n        key: path || 'root',\n        title: 'null',\n        value: data,\n        type: 'null',\n        size: 0,\n        path: path || 'root',\n        isLeaf: true,\n      },\n    ];\n  }\n\n  if (Array.isArray(data)) {\n    return [\n      {\n        key: path || 'root',\n        title: `Array (${data.length} items)`,\n        value: data,\n        type: 'array',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: data.flatMap((item, index) =>\n          convertToTree(item, `${path}[${index}]`, `[${index}]`)\n        ),\n      },\n    ];\n  }\n\n  if (typeof data === 'object') {\n    const entries = Object.entries(data);\n    return [\n      {\n        key: path || 'root',\n        title: `Object (${entries.length} properties)`,\n        value: data,\n        type: 'object',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: entries.flatMap(([key, value]) =>\n          convertToTree(value, path ? `${path}.${key}` : key, key)\n        ),\n      },\n    ];\n  }\n\n  return [\n    {\n      key: path || 'root',\n      title: String(data),\n      value: data,\n      type: typeof data,\n      size: JSON.stringify(data).length,\n      path: path || 'root',\n      isLeaf: true,\n    },\n  ];\n}\n\nfunction filterTree(nodes: DataNode[], searchTerm: string, filterType: string): DataNode[] {\n  if (!searchTerm && filterType === 'all') return nodes;\n\n  return nodes\n    .filter((node) => {\n      const matchesSearch =\n        !searchTerm ||\n        node.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.path.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesType = filterType === 'all' || node.type === filterType;\n\n      return matchesSearch && matchesType;\n    })\n    .map((node) => ({\n      ...node,\n      children: node.children ? filterTree(node.children, searchTerm, filterType) : undefined,\n    }));\n}\n\nfunction getDataByPath(data: any, path: string): any {\n  if (path === 'root' || !path) return data;\n\n  try {\n    return path.split('.').reduce((obj, key) => {\n      if (key.includes('[') && key.includes(']')) {\n        const arrayKey = key.substring(0, key.indexOf('['));\n        const index = parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')), 10);\n        return obj[arrayKey][index];\n      }\n      return obj[key];\n    }, data);\n  } catch (_error) {\n    return undefined;\n  }\n}\n\nfunction analyzeData(data: any): {\n  totalSize: number;\n  depth: number;\n  keyCount: number;\n  arrayCount: number;\n  typeDistribution: Record<string, number>;\n} {\n  const stats = {\n    totalSize: JSON.stringify(data).length,\n    depth: 0,\n    keyCount: 0,\n    arrayCount: 0,\n    typeDistribution: {} as Record<string, number>,\n  };\n\n  function analyze(obj: any, currentDepth: number = 0) {\n    stats.depth = Math.max(stats.depth, currentDepth);\n\n    if (Array.isArray(obj)) {\n      stats.arrayCount++;\n      stats.typeDistribution.array = (stats.typeDistribution.array || 0) + 1;\n      obj.forEach((item) => analyze(item, currentDepth + 1));\n    } else if (obj !== null && typeof obj === 'object') {\n      stats.typeDistribution.object = (stats.typeDistribution.object || 0) + 1;\n      Object.entries(obj).forEach(([_key, value]) => {\n        stats.keyCount++;\n        analyze(value, currentDepth + 1);\n      });\n    } else {\n      const type = typeof obj;\n      stats.typeDistribution[type] = (stats.typeDistribution[type] || 0) + 1;\n    }\n  }\n\n  analyze(data);\n  return stats;\n}\n\nfunction getTypeColor(type: string): string {\n  switch (type) {\n    case 'string':\n      return 'green';\n    case 'number':\n      return 'blue';\n    case 'boolean':\n      return 'orange';\n    case 'object':\n      return 'purple';\n    case 'array':\n      return 'cyan';\n    case 'null':\n      return 'gray';\n    case 'undefined':\n      return 'red';\n    default:\n      return 'default';\n  }\n}\n\nfunction formatSize(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n}\n\nfunction getTableColumns(data: any[]): any[] {\n  if (data.length === 0) return [];\n\n  const sample = data[0];\n  if (typeof sample !== 'object' || Array.isArray(sample)) {\n    return [\n      { title: 'Index', dataIndex: 'index', key: 'index' },\n      { title: 'Value', dataIndex: '0', key: 'value' },\n    ];\n  }\n\n  return Object.keys(sample).map((key) => ({\n    title: key,\n    dataIndex: key,\n    key,\n    render: (value: any) => {\n      if (typeof value === 'object') {\n        return <JsonViewer data={value} theme=\"dark\" collapsed={1}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx",
        "start": 138,
        "end": 595,
        "startLoc": {
          "line": 138,
          "column": 4,
          "position": 1163
        },
        "endLoc": {
          "line": 595,
          "column": 2,
          "position": 5205
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx",
        "start": 141,
        "end": 598,
        "startLoc": {
          "line": 141,
          "column": 4,
          "position": 1202
        },
        "endLoc": {
          "line": 598,
          "column": 2,
          "position": 5244
        }
      }
    },
    {
      "format": "tsx",
      "lines": 602,
      "fragment": "/**\n * Data Inspector Component\n *\n * Advanced data inspection tool providing:\n * - Hierarchical data visualization\n * - JSONPath navigation\n * - Data type analysis\n * - Size and performance metrics\n * - Export and copy functionality\n * - Search and filtering\n */\n\nimport {\n  CompressOutlined,\n  CopyOutlined,\n  DownloadOutlined,\n  ExpandOutlined,\n  EyeOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Divider,\n  Input,\n  Modal,\n  Progress,\n  Select,\n  Space,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Tree,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport type { DataInspector } from '@/core/types/debugging';\nimport { JsonViewer } from '@/design-system';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { Option } = Select;\nconst { TreeNode } = Tree;\n\ninterface DataInspectorProps {\n  data: any;\n  nodeId: string;\n  type: DataInspector['type'];\n  onClose?: () => void;\n  className?: string;\n}\n\ninterface DataNode {\n  key: string;\n  title: string;\n  value: any;\n  type: string;\n  size: number;\n  path: string;\n  children?: DataNode[];\n  isLeaf?: boolean;\n}\n\nconst DataInspector: React.FC<DataInspectorProps> = ({\n  data,\n  nodeId,\n  type,\n  onClose,\n  className,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPath, setSelectedPath] = useState<string>('');\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<'tree' | 'json' | 'table'>('tree');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // Convert data to tree structure\n  const dataTree = useMemo(() => {\n    return convertToTree(data, '', 'root');\n  }, [data]);\n\n  // Filter tree based on search and type\n  const filteredTree = useMemo(() => {\n    return filterTree(dataTree, searchTerm, filterType);\n  }, [dataTree, searchTerm, filterType]);\n\n  // Get data statistics\n  const dataStats = useMemo(() => {\n    return analyzeData(data);\n  }, [data]);\n\n  // Get selected data\n  const selectedData = useMemo(() => {\n    if (!selectedPath) return data;\n    return getDataByPath(data, selectedPath);\n  }, [data, selectedPath]);\n\n  const handleCopyData = useCallback(async () => {\n    try {\n      const text =\n        typeof selectedData === 'string' ? selectedData : JSON.stringify(selectedData, null, 2);\n      await navigator.clipboard.writeText(text);\n    } catch (_error) {}\n  }, [selectedData]);\n\n  const handleExportData = useCallback(() => {\n    const blob = new Blob([JSON.stringify(selectedData, null, 2)], {\n      type: 'application/json',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `data_${nodeId}_${type}_${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [selectedData, nodeId, type]);\n\n  const handleTreeSelect = useCallback((selectedKeys: React.Key[]) => {\n    if (selectedKeys.length > 0) {\n      setSelectedPath(selectedKeys[0] as string);\n    }\n  }, []);\n\n  const handleExpand = useCallback((expandedKeys: React.Key[]) => {\n    setExpandedKeys(expandedKeys as string[]);\n  }, []);\n\n  const renderTreeNodes = useCallback((nodes: DataNode[]): React.ReactNode => {\n    return nodes.map((node) => (\n      <TreeNode\n        key={node.key}\n        title={\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-white\">{node.title}</span>\n            <Tag color={getTypeColor(node.type)}>{node.type}</Tag>\n            <span className=\"text-gray-400 text-xs\">{formatSize(node.size)}</span>\n          </div>\n        }\n        isLeaf={node.isLeaf}\n      >\n        {node.children && renderTreeNodes(node.children)}\n      </TreeNode>\n    ));\n  }, []);\n\n  const renderDataTable = useCallback(() => {\n    if (!Array.isArray(selectedData)) {\n      return <Alert message=\"Table view only available for arrays\" type=\"info\" showIcon />;\n    }\n\n    const columns = getTableColumns(selectedData);\n    const tableData = selectedData.map((item, index) => ({\n      key: index,\n      index,\n      ...item,\n    }));\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        pagination={{ pageSize: 10 }}\n        size=\"small\"\n        className=\"bg-gray-800\"\n        scroll={{ x: 'max-content' }}\n      />\n    );\n  }, [selectedData]);\n\n  const renderDataAnalysis = () => (\n    <div className=\"space-y-4\">\n      <Title level={5} className=\"text-white\">\n        Data Analysis\n      </Title>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-400\">{dataStats.totalSize}</div>\n            <div className=\"text-gray-400 text-sm\">Total Size</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-400\">{dataStats.depth}</div>\n            <div className=\"text-gray-400 text-sm\">Max Depth</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-400\">{dataStats.keyCount}</div>\n            <div className=\"text-gray-400 text-sm\">Total Keys</div>\n          </div>\n        </Card>\n\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-400\">{dataStats.arrayCount}</div>\n            <div className=\"text-gray-400 text-sm\">Arrays</div>\n          </div>\n        </Card>\n      </div>\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-3\">\n          Type Distribution\n        </Title>\n        <div className=\"space-y-2\">\n          {Object.entries(dataStats.typeDistribution).map(([type, count]) => (\n            <div key={type} className=\"flex items-center justify-between\">\n              <span className=\"text-gray-300\">{type}</span>\n              <div className=\"flex items-center gap-2\">\n                <Progress\n                  percent={(count / dataStats.keyCount) * 100}\n                  strokeColor={getTypeColor(type)}\n                  showInfo={false}\n                  size=\"small\"\n                  className=\"flex-1\"\n                />\n                <span className=\"text-gray-400 text-sm w-8\">{count}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const content = (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <EyeOutlined className=\"text-blue-400 text-lg\" />\n            <Title level={4} className=\"text-white mb-0\">\n              Data Inspector\n            </Title>\n          </div>\n          <Space>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={isFullscreen ? <CompressOutlined /> : <ExpandOutlined />}\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n            {onClose && (\n              <Button\n                type=\"text\"\n                size=\"small\"\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-300\"\n              >\n                Close\n              </Button>\n            )}\n          </Space>\n        </div>\n\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div>\n            <Text className=\"text-gray-400\">Node:</Text>\n            <span className=\"text-white ml-1\">{nodeId}</span>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Type:</Text>\n            <Tag color={getTypeColor(type)} className=\"ml-1\">\n              {type}\n            </Tag>\n          </div>\n          <div>\n            <Text className=\"text-gray-400\">Size:</Text>\n            <span className=\"text-white ml-1\">{formatSize(dataStats.totalSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <Search\n            placeholder=\"Search data...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n            prefix={<SearchOutlined className=\"text-gray-400\" />}\n          />\n\n          <Select value={filterType} onChange={setFilterType} className=\"w-32\">\n            <Option value=\"all\">All Types</Option>\n            <Option value=\"string\">String</Option>\n            <Option value=\"number\">Number</Option>\n            <Option value=\"boolean\">Boolean</Option>\n            <Option value=\"object\">Object</Option>\n            <Option value=\"array\">Array</Option>\n          </Select>\n\n          <Select value={viewMode} onChange={setViewMode} className=\"w-24\">\n            <Option value=\"tree\">Tree</Option>\n            <Option value=\"json\">JSON</Option>\n            <Option value=\"table\">Table</Option>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Text className=\"text-gray-400\">Selected Path:</Text>\n            <Text className=\"text-white font-mono text-sm\">{selectedPath || 'root'}</Text>\n          </div>\n\n          <Space>\n            <Tooltip title=\"Copy Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CopyOutlined />}\n                onClick={handleCopyData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n            <Tooltip title=\"Export Data\">\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<DownloadOutlined />}\n                onClick={handleExportData}\n                className=\"text-gray-400 hover:text-gray-300\"\n              />\n            </Tooltip>\n          </Space>\n        </div>\n\n        <Tabs\n          activeKey={viewMode}\n          onChange={(key) => setViewMode(key as 'tree' | 'json' | 'table')}\n          items={[\n            {\n              key: 'tree',\n              label: 'Tree View',\n              children: (\n                <div className=\"h-96 overflow-auto border border-gray-600 rounded bg-gray-800\">\n                  <Tree\n                    showLine\n                    defaultExpandAll={false}\n                    expandedKeys={expandedKeys}\n                    selectedKeys={selectedPath ? [selectedPath] : []}\n                    onSelect={handleTreeSelect}\n                    onExpand={handleExpand}\n                    className=\"p-4\"\n                  >\n                    {renderTreeNodes(filteredTree)}\n                  </Tree>\n                </div>\n              ),\n            },\n            {\n              key: 'json',\n              label: 'JSON View',\n              children: (\n                <div className=\"h-96 overflow-auto\">\n                  <JsonViewer\n                    data={selectedData}\n                    theme=\"dark\"\n                    collapsed={2}\n                    maxHeight=\"100%\"\n                    enableClipboard\n                  />\n                </div>\n              ),\n            },\n            {\n              key: 'table',\n              label: 'Table View',\n              children: <div className=\"h-96 overflow-auto\">{renderDataTable()}</div>,\n            },\n          ]}\n        />\n\n        <Divider className=\"my-4\" />\n\n        {renderDataAnalysis()}\n      </div>\n    </div>\n  );\n\n  if (isFullscreen) {\n    return (\n      <Modal\n        title=\"Data Inspector - Fullscreen\"\n        open={isFullscreen}\n        onCancel={() => setIsFullscreen(false)}\n        footer={null}\n        width=\"90vw\"\n        style={{ top: 20 }}\n        bodyStyle={{ height: '80vh', padding: 0 }}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};\n\n// Helper functions\n\nfunction convertToTree(data: any, path: string, _key: string): DataNode[] {\n  if (data === null || data === undefined) {\n    return [\n      {\n        key: path || 'root',\n        title: 'null',\n        value: data,\n        type: 'null',\n        size: 0,\n        path: path || 'root',\n        isLeaf: true,\n      },\n    ];\n  }\n\n  if (Array.isArray(data)) {\n    return [\n      {\n        key: path || 'root',\n        title: `Array (${data.length} items)`,\n        value: data,\n        type: 'array',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: data.flatMap((item, index) =>\n          convertToTree(item, `${path}[${index}]`, `[${index}]`)\n        ),\n      },\n    ];\n  }\n\n  if (typeof data === 'object') {\n    const entries = Object.entries(data);\n    return [\n      {\n        key: path || 'root',\n        title: `Object (${entries.length} properties)`,\n        value: data,\n        type: 'object',\n        size: JSON.stringify(data).length,\n        path: path || 'root',\n        children: entries.flatMap(([key, value]) =>\n          convertToTree(value, path ? `${path}.${key}` : key, key)\n        ),\n      },\n    ];\n  }\n\n  return [\n    {\n      key: path || 'root',\n      title: String(data),\n      value: data,\n      type: typeof data,\n      size: JSON.stringify(data).length,\n      path: path || 'root',\n      isLeaf: true,\n    },\n  ];\n}\n\nfunction filterTree(nodes: DataNode[], searchTerm: string, filterType: string): DataNode[] {\n  if (!searchTerm && filterType === 'all') return nodes;\n\n  return nodes\n    .filter((node) => {\n      const matchesSearch =\n        !searchTerm ||\n        node.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.path.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesType = filterType === 'all' || node.type === filterType;\n\n      return matchesSearch && matchesType;\n    })\n    .map((node) => ({\n      ...node,\n      children: node.children ? filterTree(node.children, searchTerm, filterType) : undefined,\n    }));\n}\n\nfunction getDataByPath(data: any, path: string): any {\n  if (path === 'root' || !path) return data;\n\n  try {\n    return path.split('.').reduce((obj, key) => {\n      if (key.includes('[') && key.includes(']')) {\n        const arrayKey = key.substring(0, key.indexOf('['));\n        const index = parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')), 10);\n        return obj[arrayKey][index];\n      }\n      return obj[key];\n    }, data);\n  } catch (_error) {\n    return undefined;\n  }\n}\n\nfunction analyzeData(data: any): {\n  totalSize: number;\n  depth: number;\n  keyCount: number;\n  arrayCount: number;\n  typeDistribution: Record<string, number>;\n} {\n  const stats = {\n    totalSize: JSON.stringify(data).length,\n    depth: 0,\n    keyCount: 0,\n    arrayCount: 0,\n    typeDistribution: {} as Record<string, number>,\n  };\n\n  function analyze(obj: any, currentDepth: number = 0) {\n    stats.depth = Math.max(stats.depth, currentDepth);\n\n    if (Array.isArray(obj)) {\n      stats.arrayCount++;\n      stats.typeDistribution.array = (stats.typeDistribution.array || 0) + 1;\n      obj.forEach((item) => analyze(item, currentDepth + 1));\n    } else if (obj !== null && typeof obj === 'object') {\n      stats.typeDistribution.object = (stats.typeDistribution.object || 0) + 1;\n      Object.entries(obj).forEach(([_key, value]) => {\n        stats.keyCount++;\n        analyze(value, currentDepth + 1);\n      });\n    } else {\n      const type = typeof obj;\n      stats.typeDistribution[type] = (stats.typeDistribution[type] || 0) + 1;\n    }\n  }\n\n  analyze(data);\n  return stats;\n}\n\nfunction getTypeColor(type: string): string {\n  switch (type) {\n    case 'string':\n      return 'green';\n    case 'number':\n      return 'blue';\n    case 'boolean':\n      return 'orange';\n    case 'object':\n      return 'purple';\n    case 'array':\n      return 'cyan';\n    case 'null':\n      return 'gray';\n    case 'undefined':\n      return 'red';\n    default:\n      return 'default';\n  }\n}\n\nfunction formatSize(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n}\n\nfunction getTableColumns(data: any[]): any[] {\n  if (data.length === 0) return [];\n\n  const sample = data[0];\n  if (typeof sample !== 'object' || Array.isArray(sample)) {\n    return [\n      { title: 'Index', dataIndex: 'index', key: 'index' },\n      { title: 'Value', dataIndex: '0', key: 'value' },\n    ];\n  }\n\n  return Object.keys(sample).map((key) => ({\n    title: key,\n    dataIndex: key,\n    key,\n    render: (value: any) => {\n      if (typeof value === 'object') {\n        return <JsonViewer data={value} theme=\"dark\" collapsed={1} maxHeight=\"100px\" />;\n      }\n      return String(value);\n    },\n  }));\n}\n\nexport default DataInspector;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/DataInspector.tsx",
        "start": 1,
        "end": 602,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 602,
          "column": 2,
          "position": 5246
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/datainspector/DataInspector.tsx",
        "start": 4,
        "end": 605,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 605,
          "column": 2,
          "position": 5285
        }
      }
    },
    {
      "format": "javascript",
      "lines": 93,
      "fragment": "={bringToFront ? 'bring-to-front' : ''}\n      style={{ zIndex: bringToFront ? 1 : 0 }}\n    >\n      {/* Arrow marker definition */}\n      <defs>\n        <marker\n          id={`arrowhead-${id}`}\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={delayedHovered || isHovered ? '#3b82f6' : getEdgeColor()}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <React.Fragment key={`${id}-${index}`}>\n          {/* Invisible wider path for easier hover detection */}\n          <path\n            d={segment[0]}\n            style={{\n              stroke: 'transparent',\n              strokeWidth: 40,\n              fill: 'none',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          />\n\n          {/* Visible edge path */}\n          <path\n            d={segment[0]}\n            style={getEdgeStyle()}\n            className={`react-flow__edge-path ${isHovered || delayedHovered ? 'hovered' : ''}`}\n            markerEnd={`url(#arrowhead-${id})`}\n            pointerEvents=\"none\"\n          />\n        </React.Fragment>\n      ))}\n\n      <EdgeLabelRenderer>\n        {/* Toolbar with delete button */}\n        {renderToolbar && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1]}px)`,\n              pointerEvents: 'all',\n              zIndex: delayedHovered || isHovered ? 1 : 0,\n            }}\n            className=\"nodrag nopan\"\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <button\n              onMouseDown={handleDelete}\n              className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg transition-all duration-200 border-2 border-white hover:scale-110\"\n              title=\"Delete connection\"\n              style={{\n                cursor: 'pointer',\n                fontSize: '20px',\n                fontWeight: 'bold',\n              }}\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        {/* Connection status indicator */}\n        {status && status !== 'success' && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1] - (isConnectorStraight ? 20 : 0)}px)`,\n              pointerEvents: 'none',\n              zIndex: 999,\n            }}\n          >\n            <div\n              className={`\n              w-2 h-2 rounded-full\n              ${status === 'error' ? 'bg-red-500' : ''}\n              ${status === 'running' ? 'bg-yellow-500 animate-pulse' : ''}\n              ${status === 'pinned' ? 'bg-purple-500' : ''}\n            `}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx",
        "start": 198,
        "end": 290,
        "startLoc": {
          "line": 198,
          "column": 10,
          "position": 1601
        },
        "endLoc": {
          "line": 290,
          "column": 2,
          "position": 2226
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 207,
        "end": 299,
        "startLoc": {
          "line": 207,
          "column": 10,
          "position": 1718
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2343
        }
      }
    },
    {
      "format": "tsx",
      "lines": 296,
      "fragment": ";\n\n// Edge rendering constants\nconst EDGE_PADDING_BOTTOM = 80;\nconst EDGE_PADDING_X = 10;\nconst EDGE_BORDER_RADIUS = 6;\nconst HANDLE_SIZE = 20;\n\n// Check if connection is backwards (target is to the left of source)\nconst isRightOfSourceHandle = (sourceX: number, targetX: number) => sourceX - HANDLE_SIZE > targetX;\n\n// Get edge render data with path selection logic\nconst getEdgeRenderData = (props: {\n  sourceX: number;\n  sourceY: number;\n  sourcePosition: Position;\n  targetX: number;\n  targetY: number;\n  targetPosition: Position;\n  connectionType?: ConnectionTypeValue;\n}) => {\n  const {\n    targetX,\n    targetY,\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetPosition,\n    connectionType = ConnectionType.Main,\n  } = props;\n  const isConnectorStraight = sourceY === targetY;\n\n  // Use Bezier path for normal connections or non-main connections\n  if (!isRightOfSourceHandle(sourceX, targetX) || connectionType !== ConnectionType.Main) {\n    const segment = getBezierPath(props);\n    return {\n      segments: [segment],\n      labelPosition: [segment[1], segment[2]],\n      isConnectorStraight,\n    };\n  }\n\n  // Connection is backwards and the source is on the right side\n  // Use smooth step path to avoid overlapping the source node\n  const firstSegmentTargetX = (sourceX + targetX) / 2;\n  const firstSegmentTargetY = sourceY + EDGE_PADDING_BOTTOM;\n  const firstSegment = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    targetX: firstSegmentTargetX,\n    targetY: firstSegmentTargetY,\n    sourcePosition,\n    targetPosition: Position.Right,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  const secondSegment = getSmoothStepPath({\n    sourceX: firstSegmentTargetX,\n    sourceY: firstSegmentTargetY,\n    targetX,\n    targetY,\n    sourcePosition: Position.Left,\n    targetPosition,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  return {\n    segments: [firstSegment, secondSegment],\n    labelPosition: [firstSegmentTargetX, firstSegmentTargetY],\n    isConnectorStraight,\n  };\n};\n\nconst CustomEdge: React.FC<CustomEdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  selected = false,\n  hovered = false,\n  bringToFront = false,\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [delayedHovered, setDelayedHovered] = useState(hovered);\n  const delayedHoveredTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const visibilityTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connectionType = data?.connectionType || ConnectionType.Main;\n  const status = data?.status;\n  const isMainConnection = connectionType === ConnectionType.Main;\n\n  // Implement visibility delay to prevent flickering\n  useEffect(() => {\n    visibilityTimeoutRef.current = setTimeout(() => {\n      setIsVisible(true);\n    }, 30);\n\n    return () => {\n      if (visibilityTimeoutRef.current) {\n        clearTimeout(visibilityTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Implement delayed hover state\n  useEffect(() => {\n    if (hovered) {\n      if (delayedHoveredTimeoutRef.current) {\n        clearTimeout(delayedHoveredTimeoutRef.current);\n      }\n      setDelayedHovered(true);\n    } else {\n      delayedHoveredTimeoutRef.current = setTimeout(() => {\n        setDelayedHovered(false);\n      }, 100);\n    }\n\n    return () => {\n      if (delayedHoveredTimeoutRef.current) {\n        clearTimeout(delayedHoveredTimeoutRef.current);\n      }\n    };\n  }, [hovered]);\n\n  // Calculate edge render data\n  const renderData = useMemo(\n    () =>\n      getEdgeRenderData({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        connectionType,\n      }),\n    [sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition, connectionType]\n  );\n\n  const { segments, labelPosition, isConnectorStraight } = renderData;\n\n  // Dynamic edge styling\n  const getEdgeColor = () => {\n    if (status === 'success') return '#10b981'; // green\n    if (status === 'error') return '#ef4444'; // red\n    if (status === 'running') return '#f59e0b'; // yellow\n    if (status === 'pinned') return '#8b5cf6'; // purple\n    if (!isMainConnection) return '#6b7280'; // gray for supplemental\n    if (selected) return '#1f2937'; // dark gray for selected\n    return '#E2DFD0'; // default dark gray\n  };\n\n  const getEdgeStyle = () => ({\n    ...style,\n    ...(isMainConnection ? {} : { strokeDasharray: '8,8' }),\n    strokeWidth: delayedHovered || isHovered ? 2 : 1,\n    stroke: delayedHovered || isHovered ? '#3b82f6' : getEdgeColor(), // blue on hover\n    fill: 'none',\n    transition: 'stroke 0.3s ease, opacity 0.3s ease, stroke-width 0.3s ease',\n    opacity: isVisible ? 1 : 0,\n  });\n\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true);\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false);\n  }, []);\n\n  const handleDelete = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation();\n      event.preventDefault();\n      if (data?.onDelete) {\n        data.onDelete(id);\n      }\n    },\n    [id, data]\n  );\n\n  const renderToolbar = (selected || delayedHovered || isHovered) && data?.onDelete;\n\n  return (\n    <g\n      data-testid=\"edge\"\n      className={bringToFront ? 'bring-to-front' : ''}\n      style={{ zIndex: bringToFront ? 1 : 0 }}\n    >\n      {/* Arrow marker definition */}\n      <defs>\n        <marker\n          id={`arrowhead-${id}`}\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={delayedHovered || isHovered ? '#3b82f6' : getEdgeColor()}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <React.Fragment key={`${id}-${index}`}>\n          {/* Invisible wider path for easier hover detection */}\n          <path\n            d={segment[0]}\n            style={{\n              stroke: 'transparent',\n              strokeWidth: 40,\n              fill: 'none',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          />\n\n          {/* Visible edge path */}\n          <path\n            d={segment[0]}\n            style={getEdgeStyle()}\n            className={`react-flow__edge-path ${isHovered || delayedHovered ? 'hovered' : ''}`}\n            markerEnd={`url(#arrowhead-${id})`}\n            pointerEvents=\"none\"\n          />\n        </React.Fragment>\n      ))}\n\n      <EdgeLabelRenderer>\n        {/* Toolbar with delete button */}\n        {renderToolbar && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1]}px)`,\n              pointerEvents: 'all',\n              zIndex: delayedHovered || isHovered ? 1 : 0,\n            }}\n            className=\"nodrag nopan\"\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n          >\n            <button\n              onMouseDown={handleDelete}\n              className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg transition-all duration-200 border-2 border-white hover:scale-110\"\n              title=\"Delete connection\"\n              style={{\n                cursor: 'pointer',\n                fontSize: '20px',\n                fontWeight: 'bold',\n              }}\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        {/* Connection status indicator */}\n        {status && status !== 'success' && (\n          <div\n            style={{\n              position: 'absolute',\n              transform: `translate(-50%, -50%) translate(${labelPosition[0]}px, ${labelPosition[1] - (isConnectorStraight ? 20 : 0)}px)`,\n              pointerEvents: 'none',\n              zIndex: 999,\n            }}\n          >\n            <div\n              className={`\n              w-2 h-2 rounded-full\n              ${status === 'error' ? 'bg-red-500' : ''}\n              ${status === 'running' ? 'bg-yellow-500 animate-pulse' : ''}\n              ${status === 'pinned' ? 'bg-purple-500' : ''}\n            `}\n            />\n          </div>\n        )}\n      </EdgeLabelRenderer>\n    </g>\n  );\n};\n\nexport default CustomEdge;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CustomEdge.tsx",
        "start": 4,
        "end": 299,
        "startLoc": {
          "line": 4,
          "column": 20,
          "position": 73
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 2262
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 13,
        "end": 308,
        "startLoc": {
          "line": 13,
          "column": 19,
          "position": 190
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2379
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": ") {\n      case 'gmail':\n        return '📧';\n      case 'google':\n        return '🔍';\n      case 'openaiApi':\n        return '🤖';\n      case 'anthropicApi':\n        return '🧠';\n      case 'googleAiApi':\n        return '🔷';\n      case 'azureOpenAiApi':\n        return '☁️';\n      case 'awsBedrockApi':\n        return '🟠';\n      default:\n        return '🔑';\n    }\n  };\n\n  // Tab content components",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CredentialModal.tsx",
        "start": 76,
        "end": 96,
        "startLoc": {
          "line": 76,
          "column": 15,
          "position": 493
        },
        "endLoc": {
          "line": 96,
          "column": 26,
          "position": 600
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 285,
        "end": 305,
        "startLoc": {
          "line": 285,
          "column": 5,
          "position": 2414
        },
        "endLoc": {
          "line": 305,
          "column": 7,
          "position": 2521
        }
      }
    },
    {
      "format": "javascript",
      "lines": 211,
      "fragment": "={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Title level={4} className=\"text-white mb-0\">\n            Container Nodes\n          </Title>\n          <Tooltip title=\"Add custom container\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                // Open custom container creation\n              }}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Tooltip>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced workflow structures for complex automation patterns\n        </Text>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <Collapse ghost defaultActiveKey={['containers']} className=\"bg-transparent\">\n          <Panel\n            header={\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-white font-medium\">Container Types</span>\n                <Badge count={containerTemplates.length} size=\"small\" />\n              </div>\n            }\n            key=\"containers\"\n            className=\"bg-gray-800\"\n          >\n            <div className=\"space-y-2\">\n              {containerTemplates.map((template) => (\n                <Card\n                  key={template.id}\n                  size=\"small\"\n                  className=\"bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors cursor-pointer\"\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, template)}\n                  onClick={() => openCreateModal(template)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center text-lg\"\n                      style={{ backgroundColor: `${template.color}20` }}\n                    >\n                      {template.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-white font-medium text-sm\">{template.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{template.description}</div>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Tooltip title=\"Drag to canvas\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<ReloadOutlined />}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                      <Tooltip title=\"Create directly\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<PlusOutlined />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            openCreateModal(template);\n                          }}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div className=\"space-y-2\">\n          <Title level={5} className=\"text-white mb-2\">\n            Quick Actions\n          </Title>\n\n          <Space direction=\"vertical\" className=\"w-full\">\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple loop container\n                const container = createLoopContainer(`loop_${Date.now()}`, 'Quick Loop', {\n                  x: 200,\n                  y: 200,\n                });\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ReloadOutlined className=\"text-blue-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Loop</div>\n                  <div className=\"text-gray-400 text-xs\">10 iterations, 1s delay</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple parallel container\n                const container = createParallelContainer(\n                  `parallel_${Date.now()}`,\n                  'Quick Parallel',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ThunderboltOutlined className=\"text-green-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Parallel</div>\n                  <div className=\"text-gray-400 text-xs\">5 concurrent executions</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple conditional container\n                const container = createConditionalContainer(\n                  `conditional_${Date.now()}`,\n                  'Quick Conditional',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <QuestionCircleOutlined className=\"text-yellow-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Conditional</div>\n                  <div className=\"text-gray-400 text-xs\">Basic if-then logic</div>\n                </div>\n              </div>\n            </Button>\n          </Space>\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-700\">\n          <div className=\"flex items-center gap-2 text-gray-400 text-xs\">\n            <InfoCircleOutlined />\n            <span>Drag containers to canvas or click to create directly</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Container Modal */}\n      <Modal\n        title={`Create ${selectedTemplate?.name || 'Container'}`}\n        open={isCreateModalOpen}\n        onCancel={() => {\n          setIsCreateModalOpen(false);\n          setSelectedTemplate(null);\n        }}\n        onOk={() => createForm.submit()}\n        width={500}\n      >\n        <Form form={createForm} layout=\"vertical\" onFinish={handleCreateContainer}>\n          <Form.Item\n            name=\"name\"\n            label=\"Container Name\"\n            rules={[{ required: true, message: 'Please enter a container name' }]}\n          >\n            <Input placeholder=\"Enter container name\" />\n          </Form.Item>\n\n          {selectedTemplate && (\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-lg\">{selectedTemplate.icon}</span>\n                <span className=\"font-medium\">{selectedTemplate.name}</span>\n              </div>\n              <div className=\"text-gray-600 text-sm\">{selectedTemplate.description}</div>\n            </div>\n          )}\n\n          {selectedTemplate?.id === 'loop' && (\n            <>\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\" initialValue={10}>\n                <InputNumber min={1} max={1000} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\" initialValue={1000}>\n                <InputNumber min={0} max={10000} className=\"w-full\" />\n              </Form.Item>\n            </>\n          )}\n\n          {selectedTemplate?.id === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\" initialValue={5}>\n                <InputNumber min={1} max={20}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx",
        "start": 147,
        "end": 357,
        "startLoc": {
          "line": 147,
          "column": 10,
          "position": 955
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2677
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 149,
        "end": 359,
        "startLoc": {
          "line": 149,
          "column": 10,
          "position": 981
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2703
        }
      }
    },
    {
      "format": "tsx",
      "lines": 374,
      "fragment": "/**\n * Container Node Panel\n *\n * Side panel for adding and managing container nodes in the workflow editor.\n * Provides drag-and-drop functionality for creating loop, parallel, conditional,\n * try-catch, and batch containers.\n */\n\nimport {\n  InfoCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  Collapse,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useState } from 'react';\nimport {\n  type ContainerNodeConfig,\n  createBatchContainer,\n  createConditionalContainer,\n  createLoopContainer,\n  createParallelContainer,\n  createTryCatchContainer,\n} from '@/core/types/containerNodes';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Panel } = Collapse;\n\ninterface ContainerNodePanelProps {\n  onAddContainer: (container: ContainerNodeConfig) => void;\n  className?: string;\n}\n\ninterface ContainerTemplate {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  createFunction: (\n    id: string,\n    name: string,\n    position: { x: number; y: number }\n  ) => ContainerNodeConfig;\n}\n\nconst ContainerNodePanel: React.FC<ContainerNodePanelProps> = ({ onAddContainer, className }) => {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<ContainerTemplate | null>(null);\n  const [createForm] = Form.useForm();\n\n  const containerTemplates: ContainerTemplate[] = [\n    {\n      id: 'loop',\n      name: 'Loop Container',\n      description: 'Execute child nodes repeatedly based on conditions',\n      icon: '🔄',\n      color: '#3b82f6',\n      createFunction: createLoopContainer,\n    },\n    {\n      id: 'parallel',\n      name: 'Parallel Container',\n      description: 'Execute child nodes simultaneously with concurrency control',\n      icon: '⚡',\n      color: '#22c55e',\n      createFunction: createParallelContainer,\n    },\n    {\n      id: 'conditional',\n      name: 'Conditional Container',\n      description: 'Execute child nodes based on conditional logic',\n      icon: '❓',\n      color: '#f59e0b',\n      createFunction: createConditionalContainer,\n    },\n    {\n      id: 'try-catch',\n      name: 'Try-Catch Container',\n      description: 'Handle errors and retry logic for child nodes',\n      icon: '🛡️',\n      color: '#ef4444',\n      createFunction: createTryCatchContainer,\n    },\n    {\n      id: 'batch',\n      name: 'Batch Container',\n      description: 'Process data in batches with size and delay controls',\n      icon: '📦',\n      color: '#a855f7',\n      createFunction: createBatchContainer,\n    },\n  ];\n\n  const handleDragStart = (event: React.DragEvent, template: ContainerTemplate) => {\n    event.dataTransfer.setData(\n      'application/reactflow',\n      JSON.stringify({\n        type: 'container',\n        template: template.id,\n        name: template.name,\n      })\n    );\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleCreateContainer = (values: any) => {\n    if (!selectedTemplate) return;\n\n    const container = selectedTemplate.createFunction(\n      `container_${Date.now()}`,\n      values.name,\n      { x: 100, y: 100 } // Default position\n    );\n\n    onAddContainer(container);\n    setIsCreateModalOpen(false);\n    createForm.resetFields();\n    setSelectedTemplate(null);\n  };\n\n  const openCreateModal = (template: ContainerTemplate) => {\n    setSelectedTemplate(template);\n    setIsCreateModalOpen(true);\n    createForm.setFieldsValue({\n      name: template.name,\n    });\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Title level={4} className=\"text-white mb-0\">\n            Container Nodes\n          </Title>\n          <Tooltip title=\"Add custom container\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                // Open custom container creation\n              }}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Tooltip>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Advanced workflow structures for complex automation patterns\n        </Text>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <Collapse ghost defaultActiveKey={['containers']} className=\"bg-transparent\">\n          <Panel\n            header={\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-white font-medium\">Container Types</span>\n                <Badge count={containerTemplates.length} size=\"small\" />\n              </div>\n            }\n            key=\"containers\"\n            className=\"bg-gray-800\"\n          >\n            <div className=\"space-y-2\">\n              {containerTemplates.map((template) => (\n                <Card\n                  key={template.id}\n                  size=\"small\"\n                  className=\"bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors cursor-pointer\"\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, template)}\n                  onClick={() => openCreateModal(template)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center text-lg\"\n                      style={{ backgroundColor: `${template.color}20` }}\n                    >\n                      {template.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-white font-medium text-sm\">{template.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{template.description}</div>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Tooltip title=\"Drag to canvas\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<ReloadOutlined />}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                      <Tooltip title=\"Create directly\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<PlusOutlined />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            openCreateModal(template);\n                          }}\n                          className=\"text-gray-400 hover:text-gray-300\"\n                        />\n                      </Tooltip>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div className=\"space-y-2\">\n          <Title level={5} className=\"text-white mb-2\">\n            Quick Actions\n          </Title>\n\n          <Space direction=\"vertical\" className=\"w-full\">\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple loop container\n                const container = createLoopContainer(`loop_${Date.now()}`, 'Quick Loop', {\n                  x: 200,\n                  y: 200,\n                });\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ReloadOutlined className=\"text-blue-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Loop</div>\n                  <div className=\"text-gray-400 text-xs\">10 iterations, 1s delay</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple parallel container\n                const container = createParallelContainer(\n                  `parallel_${Date.now()}`,\n                  'Quick Parallel',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ThunderboltOutlined className=\"text-green-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Parallel</div>\n                  <div className=\"text-gray-400 text-xs\">5 concurrent executions</div>\n                </div>\n              </div>\n            </Button>\n\n            <Button\n              type=\"dashed\"\n              className=\"w-full text-left h-auto p-3\"\n              onClick={() => {\n                // Create a simple conditional container\n                const container = createConditionalContainer(\n                  `conditional_${Date.now()}`,\n                  'Quick Conditional',\n                  { x: 200, y: 200 }\n                );\n                onAddContainer(container);\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <QuestionCircleOutlined className=\"text-yellow-400\" />\n                <div>\n                  <div className=\"text-white text-sm\">Quick Conditional</div>\n                  <div className=\"text-gray-400 text-xs\">Basic if-then logic</div>\n                </div>\n              </div>\n            </Button>\n          </Space>\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-700\">\n          <div className=\"flex items-center gap-2 text-gray-400 text-xs\">\n            <InfoCircleOutlined />\n            <span>Drag containers to canvas or click to create directly</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Create Container Modal */}\n      <Modal\n        title={`Create ${selectedTemplate?.name || 'Container'}`}\n        open={isCreateModalOpen}\n        onCancel={() => {\n          setIsCreateModalOpen(false);\n          setSelectedTemplate(null);\n        }}\n        onOk={() => createForm.submit()}\n        width={500}\n      >\n        <Form form={createForm} layout=\"vertical\" onFinish={handleCreateContainer}>\n          <Form.Item\n            name=\"name\"\n            label=\"Container Name\"\n            rules={[{ required: true, message: 'Please enter a container name' }]}\n          >\n            <Input placeholder=\"Enter container name\" />\n          </Form.Item>\n\n          {selectedTemplate && (\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-lg\">{selectedTemplate.icon}</span>\n                <span className=\"font-medium\">{selectedTemplate.name}</span>\n              </div>\n              <div className=\"text-gray-600 text-sm\">{selectedTemplate.description}</div>\n            </div>\n          )}\n\n          {selectedTemplate?.id === 'loop' && (\n            <>\n              <Form.Item name=\"loopLimit\" label=\"Maximum Iterations\" initialValue={10}>\n                <InputNumber min={1} max={1000} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"loopDelay\" label=\"Delay Between Iterations (ms)\" initialValue={1000}>\n                <InputNumber min={0} max={10000} className=\"w-full\" />\n              </Form.Item>\n            </>\n          )}\n\n          {selectedTemplate?.id === 'parallel' && (\n            <>\n              <Form.Item name=\"maxConcurrency\" label=\"Maximum Concurrency\" initialValue={5}>\n                <InputNumber min={1} max={20} className=\"w-full\" />\n              </Form.Item>\n              <Form.Item name=\"parallelStrategy\" label=\"Execution Strategy\" initialValue=\"all\">\n                <Select>\n                  <Select.Option value=\"all\">Wait for All</Select.Option>\n                  <Select.Option value=\"race\">First to Complete</Select.Option>\n                  <Select.Option value=\"any\">Any to Complete</Select.Option>\n                </Select>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ContainerNodePanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ContainerNodePanel.tsx",
        "start": 1,
        "end": 374,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 374,
          "column": 2,
          "position": 2824
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/containernodepanel/ContainerNodePanel.tsx",
        "start": 3,
        "end": 376,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 376,
          "column": 2,
          "position": 2850
        }
      }
    },
    {
      "format": "tsx",
      "lines": 64,
      "fragment": "= (props: {\n  sourceX: number;\n  sourceY: number;\n  sourcePosition: Position;\n  targetX: number;\n  targetY: number;\n  targetPosition: Position;\n  connectionType?: ConnectionTypeValue;\n}) => {\n  const {\n    targetX,\n    targetY,\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetPosition,\n    connectionType = ConnectionType.Main,\n  } = props;\n  const isConnectorStraight = sourceY === targetY;\n\n  // Use Bezier path for normal connections or non-main connections\n  if (!isRightOfSourceHandle(sourceX, targetX) || connectionType !== ConnectionType.Main) {\n    const segment = getBezierPath(props);\n    return {\n      segments: [segment],\n      labelPosition: [segment[1], segment[2]],\n      isConnectorStraight,\n    };\n  }\n\n  // Connection is backwards and the source is on the right side\n  // Use smooth step path to avoid overlapping the source node\n  const firstSegmentTargetX = (sourceX + targetX) / 2;\n  const firstSegmentTargetY = sourceY + EDGE_PADDING_BOTTOM;\n  const firstSegment = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    targetX: firstSegmentTargetX,\n    targetY: firstSegmentTargetY,\n    sourcePosition,\n    targetPosition: Position.Right,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  const secondSegment = getSmoothStepPath({\n    sourceX: firstSegmentTargetX,\n    sourceY: firstSegmentTargetY,\n    targetX,\n    targetY,\n    sourcePosition: Position.Left,\n    targetPosition,\n    borderRadius: EDGE_BORDER_RADIUS,\n    offset: EDGE_PADDING_X,\n  });\n\n  return {\n    segments: [firstSegment, secondSegment],\n    labelPosition: [firstSegmentTargetX, firstSegmentTargetY],\n    isConnectorStraight,\n  };\n};\n\nconst ConnectionLine",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx",
        "start": 28,
        "end": 91,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 230
        },
        "endLoc": {
          "line": 91,
          "column": 15,
          "position": 658
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 25,
        "end": 88,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 273
        },
        "endLoc": {
          "line": 88,
          "column": 11,
          "position": 701
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"9\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={isMainConnection ? '#374151' : '#6b7280'}\n            style={{\n              transition: 'fill 0.3s ease',\n            }}\n          />\n        </marker>\n      </defs>\n      {segments.map((segment, index) => (\n        <path",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConnectionLine.tsx",
        "start": 146,
        "end": 163,
        "startLoc": {
          "line": 146,
          "column": 2,
          "position": 1077
        },
        "endLoc": {
          "line": 163,
          "column": 5,
          "position": 1177
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/customedge/CustomEdge.tsx",
        "start": 213,
        "end": 230,
        "startLoc": {
          "line": 213,
          "column": 2,
          "position": 1773
        },
        "endLoc": {
          "line": 230,
          "column": 15,
          "position": 1877
        }
      }
    },
    {
      "format": "javascript",
      "lines": 389,
      "fragment": "={form}\n          layout=\"vertical\"\n          onFinish={handleCreateBranch}\n          initialValues={{\n            logicalOperator: 'AND',\n            defaultBranch: false,\n            priority: 1,\n            conditions: [],\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Branch Name\"\n            rules={[{ required: true, message: 'Please enter a branch name' }]}\n          >\n            <Input placeholder=\"Success path\" />\n          </Form.Item>\n\n          <Form.Item name=\"description\" label=\"Description\">\n            <TextArea placeholder=\"Handles successful API responses\" rows={2} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"sourceNodeId\"\n            label=\"Source Node\"\n            rules={[{ required: true, message: 'Please select a source node' }]}\n          >\n            <Select placeholder=\"Select node to branch from\">\n              {nodes.map((node) => (\n                <Option key={node.id} value={node.id}>\n                  {node.parameters?.name || node.name || node.id}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item name=\"logicalOperator\" label=\"Condition Logic\">\n            <Radio.Group>\n              <Radio value=\"AND\">ALL conditions must be true (AND)</Radio>\n              <Radio value=\"OR\">ANY condition must be true (OR)</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Divider>Conditions</Divider>\n\n          <Form.Item dependencies={['conditions']} noStyle>\n            {({ getFieldValue }) => {\n              const conditions: BranchCondition[] = getFieldValue('conditions') || [];\n              return (\n                <div className=\"space-y-2\">\n                  {conditions.map((condition) => (\n                    <Card key={condition.id} size=\"small\" className=\"border-l-4 border-l-blue-500\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <Space direction=\"vertical\" size=\"small\">\n                            <Text strong>{condition.field}</Text>\n                            <Tag color=\"blue\">{condition.operator}</Tag>\n                            <Text code>{JSON.stringify(condition.value)}</Text>\n                            {condition.negate && <Tag color=\"orange\">NEGATED</Tag>}\n                          </Space>\n                        </div>\n                        <Button\n                          type=\"link\"\n                          danger\n                          icon={<DeleteOutlined />}\n                          onClick={() => handleRemoveCondition(condition.id)}\n                        />\n                      </div>\n                    </Card>\n                  ))}\n                  {conditions.length === 0 && (\n                    <Alert\n                      message=\"No conditions defined\"\n                      description=\"Add conditions to control when this branch should be taken\"\n                      type=\"info\"\n                      showIcon\n                    />\n                  )}\n                </div>\n              );\n            }}\n          </Form.Item>\n\n          <Card title=\"Add Condition\" size=\"small\" className=\"mt-4\">\n            <Form form={conditionForm} layout=\"vertical\" onFinish={handleAddCondition}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"field\" label=\"Field Path\" rules={[{ required: true }]}>\n                    <Input placeholder=\"data.status\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"dataType\" label=\"Data Type\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"string\">String</Option>\n                      <Option value=\"number\">Number</Option>\n                      <Option value=\"boolean\">Boolean</Option>\n                      <Option value=\"date\">Date</Option>\n                      <Option value=\"array\">Array</Option>\n                      <Option value=\"object\">Object</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"operator\" label=\"Operator\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"equals\">Equals (=)</Option>\n                      <Option value=\"not_equals\">Not Equals (≠)</Option>\n                      <Option value=\"greater_than\">Greater Than (&gt;)</Option>\n                      <Option value=\"less_than\">Less Than (&lt;)</Option>\n                      <Option value=\"greater_equal\">Greater Equal (≥)</Option>\n                      <Option value=\"less_equal\">Less Equal (≤)</Option>\n                      <Option value=\"contains\">Contains</Option>\n                      <Option value=\"starts_with\">Starts With</Option>\n                      <Option value=\"ends_with\">Ends With</Option>\n                      <Option value=\"regex\">Regex Match</Option>\n                      <Option value=\"in_array\">In Array</Option>\n                      <Option value=\"is_empty\">Is Empty</Option>\n                      <Option value=\"is_not_empty\">Is Not Empty</Option>\n                      <Option value=\"exists\">Exists</Option>\n                      <Option value=\"not_exists\">Not Exists</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}>\n                    <Input placeholder=\"success\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"negate\" valuePropName=\"checked\">\n                    <Switch checkedChildren=\"Negate\" unCheckedChildren=\"Normal\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"caseSensitive\" valuePropName=\"checked\" initialValue={true}>\n                    <Switch checkedChildren=\"Case Sensitive\" unCheckedChildren=\"Ignore Case\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Form.Item>\n                <Button type=\"dashed\" htmlType=\"submit\" icon={<PlusOutlined />} block>\n                  Add Condition\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n\n          <Divider>Advanced Settings</Divider>\n\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"priority\" label=\"Priority\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"defaultBranch\" label=\"Default Branch\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                {editingBranch ? 'Update Branch' : 'Create Branch'}\n              </Button>\n              <Button\n                onClick={() => {\n                  form.resetFields();\n                  setEditingBranch(null);\n                }}\n              >\n                Cancel\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Card>\n\n      <Card title=\"Existing Branches\" size=\"small\">\n        <List\n          dataSource={branches}\n          renderItem={(branch) => (\n            <List.Item\n              actions={[\n                <Button\n                  type=\"link\"\n                  icon={<PlayCircleOutlined />}\n                  onClick={() => {\n                    setSelectedBranch(branch);\n                    setTestModalVisible(true);\n                  }}\n                >\n                  Test\n                </Button>,\n                <Button\n                  type=\"link\"\n                  icon={<EditOutlined />}\n                  onClick={() => {\n                    setEditingBranch(branch.id);\n                    form.setFieldsValue(branch);\n                  }}\n                />,\n                <Button\n                  type=\"link\"\n                  danger\n                  icon={<DeleteOutlined />}\n                  onClick={() => {\n                    setBranches((prev) => prev.filter((b) => b.id !== branch.id));\n                    message.success('Branch deleted');\n                  }}\n                />,\n              ]}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <BranchesOutlined />\n                    {branch.name}\n                    <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n                      {branch.logicalOperator}\n                    </Tag>\n                    {branch.defaultBranch && <Tag color=\"gold\">DEFAULT</Tag>}\n                  </Space>\n                }\n                description={\n                  <Space direction=\"vertical\" size=\"small\">\n                    {branch.description}\n                    <Text type=\"secondary\">\n                      {branch.conditions.length} condition(s) • Priority: {branch.priority}\n                    </Text>\n                    <div>\n                      {branch.conditions.map((condition) => (\n                        <Tag key={condition.id} color=\"geekblue\" style={{ marginBottom: 4 }}>\n                          {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n                        </Tag>\n                      ))}\n                    </div>\n                  </Space>\n                }\n              />\n            </List.Item>\n          )}\n          locale={{ emptyText: 'No branches configured' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderExpressionBuilder = () => (\n    <Card title=\"JavaScript Expression Builder\" size=\"small\">\n      <Alert\n        message=\"Advanced Expression Mode\"\n        description=\"Write custom JavaScript expressions for complex conditional logic. Use 'data' object to access workflow data.\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: 16 }}\n      />\n\n      <Form layout=\"vertical\">\n        <Form.Item label=\"Expression\">\n          <TextArea\n            rows={10}\n            placeholder={`// Example expressions:\nreturn data.status === 'success' && data.count > 10;\n\n// Multi-line logic\nif (data.user && data.user.role === 'admin') {\n  return data.permissions.includes('write');\n}\nreturn false;\n\n// Array operations\nreturn data.items.filter(item => item.active).length > 0;\n\n// Date comparisons\nconst today = new Date();\nconst itemDate = new Date(data.createdAt);\nreturn (today.getTime() - itemDate.getTime()) < (24 * 60 * 60 * 1000);`}\n            style={{ fontFamily: 'monospace' }}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" icon={<PlayCircleOutlined />}>\n              Test Expression\n            </Button>\n            <Button icon={<CodeOutlined />}>Validate Syntax</Button>\n            <Button>Save as Template</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n\n  const renderVisualFlowChart = () => {\n    const treeData = branches.map((branch) => ({\n      title: (\n        <Space>\n          <BranchesOutlined />\n          {branch.name}\n          <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n            {branch.conditions.length} conditions\n          </Tag>\n        </Space>\n      ),\n      key: branch.id,\n      children: branch.conditions.map((condition) => ({\n        title: (\n          <Space>\n            <QuestionCircleOutlined />\n            {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n            {condition.negate && <Tag color=\"orange\">NOT</Tag>}\n          </Space>\n        ),\n        key: condition.id,\n        icon: condition.negate ? <CloseCircleOutlined /> : <CheckCircleOutlined />,\n      })),\n    }));\n\n    return (\n      <Card title=\"Branch Flow Visualization\" size=\"small\">\n        <Tree\n          showIcon\n          defaultExpandAll\n          treeData={treeData}\n          style={{ background: colors.gray[50], padding: 16, borderRadius: 8 }}\n        />\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <BranchesOutlined />\n            Conditional Branching\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1400}\n        footer={null}\n        className={cn('conditional-branching-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Branch Builder\n              </span>\n            }\n            key=\"builder\"\n          >\n            {renderBranchBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CodeOutlined />\n                Expression Builder\n              </span>\n            }\n            key=\"expression\"\n          >\n            {renderExpressionBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BranchesOutlined />\n                Flow Visualization\n              </span>\n            }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx",
        "start": 344,
        "end": 732,
        "startLoc": {
          "line": 344,
          "column": 5,
          "position": 3156
        },
        "endLoc": {
          "line": 732,
          "column": 2,
          "position": 6275
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx",
        "start": 348,
        "end": 736,
        "startLoc": {
          "line": 348,
          "column": 5,
          "position": 3208
        },
        "endLoc": {
          "line": 736,
          "column": 2,
          "position": 6327
        }
      }
    },
    {
      "format": "tsx",
      "lines": 772,
      "fragment": "/**\n * Conditional Workflow Branching Panel\n *\n * Advanced conditional logic builder with visual branch creation,\n * dynamic routing, expression builder, and complex condition handling.\n */\n\nimport {\n  BranchesOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  CodeOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  PlayCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  List,\n  Modal,\n  message,\n  Radio,\n  Row,\n  Select,\n  Space,\n  Switch,\n  Tabs,\n  Tag,\n  Tree,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type { WorkflowNodeInstance } from '@/core/nodes/types';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { colors } from '@/design-system/tokens';\nimport { cn } from '@/design-system/utils';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { Text } = Typography;\n\ninterface ConditionalBranchingPanelProps {\n  workflowId: string;\n  visible: boolean;\n  onClose: () => void;\n  onAddBranch: (branchConfig: BranchConfiguration) => void;\n}\n\nexport interface BranchConfiguration {\n  id: string;\n  name: string;\n  description?: string;\n  sourceNodeId: string;\n  conditions: BranchCondition[];\n  logicalOperator: 'AND' | 'OR';\n  defaultBranch: boolean;\n  priority: number;\n  targetNodes: string[];\n  metadata: Record<string, any>;\n}\n\nexport interface BranchCondition {\n  id: string;\n  field: string;\n  operator: ComparisonOperator;\n  value: any;\n  dataType: 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object';\n  negate?: boolean;\n  caseSensitive?: boolean;\n}\n\ntype ComparisonOperator =\n  | 'equals'\n  | 'not_equals'\n  | 'greater_than'\n  | 'less_than'\n  | 'greater_equal'\n  | 'less_equal'\n  | 'contains'\n  | 'starts_with'\n  | 'ends_with'\n  | 'regex'\n  | 'in_array'\n  | 'is_empty'\n  | 'is_not_empty'\n  | 'exists'\n  | 'not_exists';\n\nexport const ConditionalBranchingPanel: React.FC<ConditionalBranchingPanelProps> = ({\n  workflowId,\n  visible,\n  onClose,\n  onAddBranch,\n}) => {\n  const { nodes, edges } = useLeanWorkflowStore();\n  const [branches, setBranches] = useState<BranchConfiguration[]>([]);\n  const [selectedBranch, setSelectedBranch] = useState<BranchConfiguration | null>(null);\n  const [activeTab, setActiveTab] = useState('builder');\n  const [form] = Form.useForm();\n  const [conditionForm] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [editingBranch, setEditingBranch] = useState<string | null>(null);\n  const [testModalVisible, setTestModalVisible] = useState(false);\n\n  useEffect(() => {\n    if (visible) {\n      loadExistingBranches();\n    }\n  }, [visible, loadExistingBranches]);\n\n  const loadExistingBranches = () => {\n    // Extract conditional branches from existing workflow\n    const conditionNodes = nodes.filter(\n      (node) =>\n        node.parameters?.type === 'condition' ||\n        node.parameters?.integrationData?.id === 'condition' ||\n        node.type === 'condition'\n    );\n\n    const extractedBranches: BranchConfiguration[] = conditionNodes.map((node) => ({\n      id: node.id,\n      name: node.parameters?.name || node.name || `Branch from ${node.id}`,\n      description: node.parameters?.description || '',\n      sourceNodeId: node.id,\n      conditions: extractConditionsFromNode(node),\n      logicalOperator: 'AND',\n      defaultBranch: false,\n      priority: 1,\n      targetNodes: getTargetNodes(node.id),\n      metadata: {},\n    }));\n\n    setBranches(extractedBranches);\n  };\n\n  const extractConditionsFromNode = (node: WorkflowNodeInstance): BranchCondition[] => {\n    const properties = node.parameters?.properties || node.parameters || {};\n    const conditions: BranchCondition[] = [];\n\n    // Extract conditions from node properties\n    if (properties.condition) {\n      // Simple condition\n      conditions.push({\n        id: `condition_${Date.now()}`,\n        field: properties.field || 'data',\n        operator: properties.operator || 'equals',\n        value: properties.value,\n        dataType: properties.dataType || 'string',\n        negate: properties.negate || false,\n        caseSensitive: properties.caseSensitive !== false,\n      });\n    } else if (properties.conditions) {\n      // Multiple conditions\n      properties.conditions.forEach((cond: any, index: number) => {\n        conditions.push({\n          id: `condition_${Date.now()}_${index}`,\n          field: cond.field,\n          operator: cond.operator,\n          value: cond.value,\n          dataType: cond.dataType || 'string',\n          negate: cond.negate || false,\n          caseSensitive: cond.caseSensitive !== false,\n        });\n      });\n    }\n\n    return conditions;\n  };\n\n  const getTargetNodes = (sourceNodeId: string): string[] => {\n    return edges.filter((edge) => edge.source === sourceNodeId).map((edge) => edge.target);\n  };\n\n  const handleCreateBranch = async (values: any) => {\n    setLoading(true);\n    try {\n      const branchConfig: BranchConfiguration = {\n        id: editingBranch || `branch_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n        name: values.name,\n        description: values.description,\n        sourceNodeId: values.sourceNodeId,\n        conditions: values.conditions || [],\n        logicalOperator: values.logicalOperator || 'AND',\n        defaultBranch: values.defaultBranch || false,\n        priority: values.priority || 1,\n        targetNodes: values.targetNodes || [],\n        metadata: {\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        },\n      };\n\n      if (editingBranch) {\n        setBranches((prev) => prev.map((b) => (b.id === editingBranch ? branchConfig : b)));\n        message.success('Branch updated successfully');\n      } else {\n        setBranches((prev) => [...prev, branchConfig]);\n        message.success('Branch created successfully');\n      }\n\n      onAddBranch(branchConfig);\n      form.resetFields();\n      setEditingBranch(null);\n    } catch (_error) {\n      message.error('Failed to create branch');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddCondition = (values: any) => {\n    const condition: BranchCondition = {\n      id: `condition_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n      field: values.field,\n      operator: values.operator,\n      value: values.value,\n      dataType: values.dataType,\n      negate: values.negate || false,\n      caseSensitive: values.caseSensitive !== false,\n    };\n\n    const currentConditions = form.getFieldValue('conditions') || [];\n    form.setFieldsValue({ conditions: [...currentConditions, condition] });\n    conditionForm.resetFields();\n  };\n\n  const handleRemoveCondition = (conditionId: string) => {\n    const currentConditions = form.getFieldValue('conditions') || [];\n    const updatedConditions = currentConditions.filter(\n      (c: BranchCondition) => c.id !== conditionId\n    );\n    form.setFieldsValue({ conditions: updatedConditions });\n  };\n\n  const handleTestBranch = async (branch: BranchConfiguration, testData: any) => {\n    try {\n      const result = evaluateBranchConditions(branch, testData);\n      message.success(`Branch evaluation result: ${result ? 'TRUE' : 'FALSE'}`);\n      return result;\n    } catch (_error) {\n      message.error('Branch test failed');\n      return false;\n    }\n  };\n\n  const evaluateBranchConditions = (branch: BranchConfiguration, data: any): boolean => {\n    if (branch.conditions.length === 0) return true;\n\n    const results = branch.conditions.map((condition) => evaluateCondition(condition, data));\n\n    return branch.logicalOperator === 'AND' ? results.every(Boolean) : results.some(Boolean);\n  };\n\n  const evaluateCondition = (condition: BranchCondition, data: any): boolean => {\n    const fieldValue = getNestedValue(data, condition.field);\n    let result = false;\n\n    switch (condition.operator) {\n      case 'equals':\n        result = fieldValue === condition.value;\n        break;\n      case 'not_equals':\n        result = fieldValue !== condition.value;\n        break;\n      case 'greater_than':\n        result = Number(fieldValue) > Number(condition.value);\n        break;\n      case 'less_than':\n        result = Number(fieldValue) < Number(condition.value);\n        break;\n      case 'greater_equal':\n        result = Number(fieldValue) >= Number(condition.value);\n        break;\n      case 'less_equal':\n        result = Number(fieldValue) <= Number(condition.value);\n        break;\n      case 'contains': {\n        const searchValue = condition.caseSensitive\n          ? condition.value\n          : condition.value.toLowerCase();\n        const searchIn = condition.caseSensitive\n          ? String(fieldValue)\n          : String(fieldValue).toLowerCase();\n        result = searchIn.includes(searchValue);\n        break;\n      }\n      case 'starts_with':\n        result = String(fieldValue).startsWith(String(condition.value));\n        break;\n      case 'ends_with':\n        result = String(fieldValue).endsWith(String(condition.value));\n        break;\n      case 'regex':\n        result = new RegExp(condition.value).test(String(fieldValue));\n        break;\n      case 'in_array':\n        result = Array.isArray(condition.value) && condition.value.includes(fieldValue);\n        break;\n      case 'is_empty':\n        result =\n          !fieldValue ||\n          fieldValue === '' ||\n          (Array.isArray(fieldValue) && fieldValue.length === 0);\n        break;\n      case 'is_not_empty':\n        result =\n          !!fieldValue &&\n          fieldValue !== '' &&\n          (!Array.isArray(fieldValue) || fieldValue.length > 0);\n        break;\n      case 'exists':\n        result = fieldValue !== undefined && fieldValue !== null;\n        break;\n      case 'not_exists':\n        result = fieldValue === undefined || fieldValue === null;\n        break;\n      default:\n        result = false;\n    }\n\n    return condition.negate ? !result : result;\n  };\n\n  const getNestedValue = (obj: any, path: string): any => {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  };\n\n  const renderBranchBuilder = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Card title=\"Branch Configuration\" size=\"small\">\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleCreateBranch}\n          initialValues={{\n            logicalOperator: 'AND',\n            defaultBranch: false,\n            priority: 1,\n            conditions: [],\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Branch Name\"\n            rules={[{ required: true, message: 'Please enter a branch name' }]}\n          >\n            <Input placeholder=\"Success path\" />\n          </Form.Item>\n\n          <Form.Item name=\"description\" label=\"Description\">\n            <TextArea placeholder=\"Handles successful API responses\" rows={2} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"sourceNodeId\"\n            label=\"Source Node\"\n            rules={[{ required: true, message: 'Please select a source node' }]}\n          >\n            <Select placeholder=\"Select node to branch from\">\n              {nodes.map((node) => (\n                <Option key={node.id} value={node.id}>\n                  {node.parameters?.name || node.name || node.id}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item name=\"logicalOperator\" label=\"Condition Logic\">\n            <Radio.Group>\n              <Radio value=\"AND\">ALL conditions must be true (AND)</Radio>\n              <Radio value=\"OR\">ANY condition must be true (OR)</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Divider>Conditions</Divider>\n\n          <Form.Item dependencies={['conditions']} noStyle>\n            {({ getFieldValue }) => {\n              const conditions: BranchCondition[] = getFieldValue('conditions') || [];\n              return (\n                <div className=\"space-y-2\">\n                  {conditions.map((condition) => (\n                    <Card key={condition.id} size=\"small\" className=\"border-l-4 border-l-blue-500\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <Space direction=\"vertical\" size=\"small\">\n                            <Text strong>{condition.field}</Text>\n                            <Tag color=\"blue\">{condition.operator}</Tag>\n                            <Text code>{JSON.stringify(condition.value)}</Text>\n                            {condition.negate && <Tag color=\"orange\">NEGATED</Tag>}\n                          </Space>\n                        </div>\n                        <Button\n                          type=\"link\"\n                          danger\n                          icon={<DeleteOutlined />}\n                          onClick={() => handleRemoveCondition(condition.id)}\n                        />\n                      </div>\n                    </Card>\n                  ))}\n                  {conditions.length === 0 && (\n                    <Alert\n                      message=\"No conditions defined\"\n                      description=\"Add conditions to control when this branch should be taken\"\n                      type=\"info\"\n                      showIcon\n                    />\n                  )}\n                </div>\n              );\n            }}\n          </Form.Item>\n\n          <Card title=\"Add Condition\" size=\"small\" className=\"mt-4\">\n            <Form form={conditionForm} layout=\"vertical\" onFinish={handleAddCondition}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"field\" label=\"Field Path\" rules={[{ required: true }]}>\n                    <Input placeholder=\"data.status\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"dataType\" label=\"Data Type\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"string\">String</Option>\n                      <Option value=\"number\">Number</Option>\n                      <Option value=\"boolean\">Boolean</Option>\n                      <Option value=\"date\">Date</Option>\n                      <Option value=\"array\">Array</Option>\n                      <Option value=\"object\">Object</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"operator\" label=\"Operator\" rules={[{ required: true }]}>\n                    <Select>\n                      <Option value=\"equals\">Equals (=)</Option>\n                      <Option value=\"not_equals\">Not Equals (≠)</Option>\n                      <Option value=\"greater_than\">Greater Than (&gt;)</Option>\n                      <Option value=\"less_than\">Less Than (&lt;)</Option>\n                      <Option value=\"greater_equal\">Greater Equal (≥)</Option>\n                      <Option value=\"less_equal\">Less Equal (≤)</Option>\n                      <Option value=\"contains\">Contains</Option>\n                      <Option value=\"starts_with\">Starts With</Option>\n                      <Option value=\"ends_with\">Ends With</Option>\n                      <Option value=\"regex\">Regex Match</Option>\n                      <Option value=\"in_array\">In Array</Option>\n                      <Option value=\"is_empty\">Is Empty</Option>\n                      <Option value=\"is_not_empty\">Is Not Empty</Option>\n                      <Option value=\"exists\">Exists</Option>\n                      <Option value=\"not_exists\">Not Exists</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}>\n                    <Input placeholder=\"success\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Form.Item name=\"negate\" valuePropName=\"checked\">\n                    <Switch checkedChildren=\"Negate\" unCheckedChildren=\"Normal\" />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item name=\"caseSensitive\" valuePropName=\"checked\" initialValue={true}>\n                    <Switch checkedChildren=\"Case Sensitive\" unCheckedChildren=\"Ignore Case\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n\n              <Form.Item>\n                <Button type=\"dashed\" htmlType=\"submit\" icon={<PlusOutlined />} block>\n                  Add Condition\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n\n          <Divider>Advanced Settings</Divider>\n\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item name=\"priority\" label=\"Priority\">\n                <InputNumber min={1} max={10} />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item name=\"defaultBranch\" label=\"Default Branch\" valuePropName=\"checked\">\n                <Switch />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                {editingBranch ? 'Update Branch' : 'Create Branch'}\n              </Button>\n              <Button\n                onClick={() => {\n                  form.resetFields();\n                  setEditingBranch(null);\n                }}\n              >\n                Cancel\n              </Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Card>\n\n      <Card title=\"Existing Branches\" size=\"small\">\n        <List\n          dataSource={branches}\n          renderItem={(branch) => (\n            <List.Item\n              actions={[\n                <Button\n                  type=\"link\"\n                  icon={<PlayCircleOutlined />}\n                  onClick={() => {\n                    setSelectedBranch(branch);\n                    setTestModalVisible(true);\n                  }}\n                >\n                  Test\n                </Button>,\n                <Button\n                  type=\"link\"\n                  icon={<EditOutlined />}\n                  onClick={() => {\n                    setEditingBranch(branch.id);\n                    form.setFieldsValue(branch);\n                  }}\n                />,\n                <Button\n                  type=\"link\"\n                  danger\n                  icon={<DeleteOutlined />}\n                  onClick={() => {\n                    setBranches((prev) => prev.filter((b) => b.id !== branch.id));\n                    message.success('Branch deleted');\n                  }}\n                />,\n              ]}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <BranchesOutlined />\n                    {branch.name}\n                    <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n                      {branch.logicalOperator}\n                    </Tag>\n                    {branch.defaultBranch && <Tag color=\"gold\">DEFAULT</Tag>}\n                  </Space>\n                }\n                description={\n                  <Space direction=\"vertical\" size=\"small\">\n                    {branch.description}\n                    <Text type=\"secondary\">\n                      {branch.conditions.length} condition(s) • Priority: {branch.priority}\n                    </Text>\n                    <div>\n                      {branch.conditions.map((condition) => (\n                        <Tag key={condition.id} color=\"geekblue\" style={{ marginBottom: 4 }}>\n                          {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n                        </Tag>\n                      ))}\n                    </div>\n                  </Space>\n                }\n              />\n            </List.Item>\n          )}\n          locale={{ emptyText: 'No branches configured' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderExpressionBuilder = () => (\n    <Card title=\"JavaScript Expression Builder\" size=\"small\">\n      <Alert\n        message=\"Advanced Expression Mode\"\n        description=\"Write custom JavaScript expressions for complex conditional logic. Use 'data' object to access workflow data.\"\n        type=\"info\"\n        showIcon\n        style={{ marginBottom: 16 }}\n      />\n\n      <Form layout=\"vertical\">\n        <Form.Item label=\"Expression\">\n          <TextArea\n            rows={10}\n            placeholder={`// Example expressions:\nreturn data.status === 'success' && data.count > 10;\n\n// Multi-line logic\nif (data.user && data.user.role === 'admin') {\n  return data.permissions.includes('write');\n}\nreturn false;\n\n// Array operations\nreturn data.items.filter(item => item.active).length > 0;\n\n// Date comparisons\nconst today = new Date();\nconst itemDate = new Date(data.createdAt);\nreturn (today.getTime() - itemDate.getTime()) < (24 * 60 * 60 * 1000);`}\n            style={{ fontFamily: 'monospace' }}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Space>\n            <Button type=\"primary\" icon={<PlayCircleOutlined />}>\n              Test Expression\n            </Button>\n            <Button icon={<CodeOutlined />}>Validate Syntax</Button>\n            <Button>Save as Template</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n\n  const renderVisualFlowChart = () => {\n    const treeData = branches.map((branch) => ({\n      title: (\n        <Space>\n          <BranchesOutlined />\n          {branch.name}\n          <Tag color={branch.defaultBranch ? 'gold' : 'blue'}>\n            {branch.conditions.length} conditions\n          </Tag>\n        </Space>\n      ),\n      key: branch.id,\n      children: branch.conditions.map((condition) => ({\n        title: (\n          <Space>\n            <QuestionCircleOutlined />\n            {condition.field} {condition.operator} {JSON.stringify(condition.value)}\n            {condition.negate && <Tag color=\"orange\">NOT</Tag>}\n          </Space>\n        ),\n        key: condition.id,\n        icon: condition.negate ? <CloseCircleOutlined /> : <CheckCircleOutlined />,\n      })),\n    }));\n\n    return (\n      <Card title=\"Branch Flow Visualization\" size=\"small\">\n        <Tree\n          showIcon\n          defaultExpandAll\n          treeData={treeData}\n          style={{ background: colors.gray[50], padding: 16, borderRadius: 8 }}\n        />\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          <Space>\n            <BranchesOutlined />\n            Conditional Branching\n          </Space>\n        }\n        open={visible}\n        onCancel={onClose}\n        width={1400}\n        footer={null}\n        className={cn('conditional-branching-panel')}\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab}>\n          <TabPane\n            tab={\n              <span>\n                <SettingOutlined />\n                Branch Builder\n              </span>\n            }\n            key=\"builder\"\n          >\n            {renderBranchBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CodeOutlined />\n                Expression Builder\n              </span>\n            }\n            key=\"expression\"\n          >\n            {renderExpressionBuilder()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <BranchesOutlined />\n                Flow Visualization\n              </span>\n            }\n            key=\"visualization\"\n          >\n            {renderVisualFlowChart()}\n          </TabPane>\n        </Tabs>\n      </Modal>\n\n      <Modal\n        title=\"Test Branch Logic\"\n        open={testModalVisible}\n        onCancel={() => setTestModalVisible(false)}\n        onOk={() => {\n          if (selectedBranch) {\n            const testData = { status: 'success', count: 15 }; // Example test data\n            handleTestBranch(selectedBranch, testData);\n            setTestModalVisible(false);\n          }\n        }}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Test Data (JSON)\">\n            <TextArea\n              rows={8}\n              placeholder={JSON.stringify(\n                {\n                  status: 'success',\n                  count: 15,\n                  user: { role: 'admin' },\n                  timestamp: new Date().toISOString(),\n                },\n                null,\n                2\n              )}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionalBranchingPanel.tsx",
        "start": 1,
        "end": 772,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 772,
          "column": 2,
          "position": 6543
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditionalbranchingpanel/ConditionalBranchingPanel.tsx",
        "start": 5,
        "end": 776,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 776,
          "column": 2,
          "position": 6595
        }
      }
    },
    {
      "format": "javascript",
      "lines": 442,
      "fragment": "={connectedInputNodes}\n            onFieldSelect={setSelectedField}\n          />\n        </div>\n      )}\n\n      {/* === CONNECTED INPUT NODES === */}\n      <div className=\"space-y-3\">\n        <div className=\"text-sm font-semibold text-gray-100 flex items-center space-x-2\">\n          <span>📥</span>\n          <span>Input Data Sources</span>\n        </div>\n\n        {connectedInputNodes.map((node, index) => {\n          // More robust data detection\n          const outputData = node?.data?.outputData;\n          const testResultsData = node?.data?.testResults?.data;\n          const hasOutputData = outputData || testResultsData;\n\n          // Prefer outputData over testResults, but use either if available\n          let nodeData = null;\n          if (outputData) {\n            nodeData = outputData;\n          } else if (testResultsData) {\n            nodeData = testResultsData;\n          }\n\n          const isExpanded = expandedNode === node?.id;\n\n          return (\n            <div\n              key={node?.id || index}\n              className=\"bg-gray-800 rounded-lg border border-gray-600 overflow-hidden\"\n            >\n              {/* === NODE HEADER === */}\n              <div\n                className=\"p-3 border-b border-gray-600 bg-gray-750 cursor-pointer hover:bg-gray-700 transition-colors\"\n                onClick={() => setExpandedNode(isExpanded ? null : node?.id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\" title={node?.data?.label || 'Node Icon'}>\n                      {getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Available</span>\n                      </span>\n                    ) : (\n                      <span className=\"px-2 py-1 bg-yellow-800 text-yellow-200 rounded text-xs flex items-center space-x-1\">\n                        <span>⏳</span>\n                        <span>No Data</span>\n                      </span>\n                    )}\n                    <span\n                      className={`transform transition-transform text-gray-400 ${isExpanded ? 'rotate-180' : ''}`}\n                    >\n                      ▼\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* === EXPANDABLE DATA CONTENT === */}\n              {isExpanded && (\n                <div className=\"p-3\">\n                  {hasOutputData ? (\n                    <div className=\"space-y-3\">\n                      {/* Enhanced JSON viewer for raw data */}\n                      <JsonViewer data={nodeData} maxHeight=\"400px\" enableClipboard={true} />\n\n                      {/* Then show the formatted renderer */}\n                      <ConditionDataRenderer\n                        data={nodeData}\n                        nodeType={getNodeType(node)}\n                        selectedField={selectedField}\n                        onFieldSelect={setSelectedField}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4 text-gray-400\">\n                      <div className=\"text-sm\">No output data available</div>\n                      <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* === CONDITION EVALUATION TIPS === */}\n      <div className=\"mt-6 p-3 bg-gray-800 rounded-lg border border-gray-600\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">💡</span>\n          <div className=\"text-sm font-medium text-gray-200\">Condition Tips</div>\n        </div>\n        <div className=\"space-y-2 text-xs text-gray-400\">\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Reference data fields directly in conditions (e.g.,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">subject</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">priority</code>)\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Use comparison operators:{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">==</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">!=</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&gt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&lt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">contains</code>\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Combine conditions with{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&&</code> (and) or{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">||</code> (or)\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Component to show summary of all available data fields\nconst DataFieldsSummary: React.FC<{\n  connectedInputNodes: any[];\n  onFieldSelect: (field: string) => void;\n}> = ({ connectedInputNodes, onFieldSelect }) => {\n  const allFields = new Set<string>();\n\n  // Collect all unique fields from connected nodes\n  connectedInputNodes.forEach((node, _index) => {\n    const outputData = node?.data?.outputData;\n    const testResultsData = node?.data?.testResults?.data;\n    const data = outputData || testResultsData;\n\n    if (data && typeof data === 'object') {\n      if (Array.isArray(data)) {\n        // Handle arrays (like emails)\n        if (data.length > 0 && typeof data[0] === 'object') {\n          Object.keys(data[0]).forEach((key) => allFields.add(key));\n        }\n      } else {\n        // Handle objects\n        Object.keys(data).forEach((key) => allFields.add(key));\n      }\n    }\n  });\n\n  const fieldsArray = Array.from(allFields).sort();\n\n  if (fieldsArray.length === 0) {\n    return (\n      <div className=\"text-xs text-gray-400\">\n        No structured fields available. Test connected nodes to analyze data fields.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {fieldsArray.map((field) => (\n        <button\n          key={field}\n          onClick={() => onFieldSelect(field)}\n          className=\"px-2 py-1 bg-purple-800 hover:bg-purple-700 text-purple-200 rounded text-xs transition-colors\"\n          title={`Click to highlight ${field} in data`}\n        >\n          {field}\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// Component to render data specifically for condition evaluation\nconst ConditionDataRenderer: React.FC<{\n  data: any;\n  nodeType: string;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, nodeType, selectedField, onFieldSelect }) => {\n  if (!data) {\n    return <div className=\"text-gray-400 text-sm\">No data available</div>;\n  }\n\n  // Handle different data structures\n\n  // Check if it's an array (like emails)\n  if (Array.isArray(data)) {\n    if (data.length > 0) {\n      const firstItem = data[0];\n      if (nodeType === 'gmail' || nodeType === 'gmail-trigger') {\n        return (\n          <EmailConditionView\n            email={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      } else {\n        // Generic array handling - show first item\n        return (\n          <GenericConditionView\n            data={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      }\n    }\n  }\n\n  // Handle email data (from Gmail triggers)\n  if ((nodeType === 'gmail' || nodeType === 'gmail-trigger') && typeof data === 'object') {\n    return (\n      <EmailConditionView\n        email={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle transformed data\n  if (nodeType === 'transform' && typeof data === 'object') {\n    return (\n      <TransformConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle AI Agent data\n  if (nodeType === 'ai-agent' && typeof data === 'object') {\n    return (\n      <AIConditionView data={data} selectedField={selectedField} onFieldSelect={onFieldSelect} />\n    );\n  }\n\n  // Generic structured data\n  if (typeof data === 'object' && data !== null) {\n    return (\n      <GenericConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-yellow-400\">Debug: {nodeType} node data (fallback renderer)</div>\n      <div className=\"bg-gray-900 p-3 rounded border border-gray-600\">\n        <div className=\"text-xs text-gray-400 mb-2\">\n          Type: {typeof data} {Array.isArray(data) && `(array with ${data.length} items)`}\n        </div>\n        <div className=\"font-mono text-xs text-gray-200 max-h-40 overflow-y-auto\">\n          {typeof data === 'string' ? data : JSON.stringify(data, null, 2)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Email-specific condition view\nconst EmailConditionView: React.FC<{\n  email: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ email, selectedField, onFieldSelect }) => {\n  const emailFields = [\n    { key: 'from', label: 'From', value: email.from },\n    { key: 'subject', label: 'Subject', value: email.subject },\n    { key: 'body', label: 'Body', value: email.body },\n    { key: 'isUnread', label: 'Unread', value: email.isUnread },\n    {\n      key: 'hasAttachments',\n      label: 'Has Attachments',\n      value: email.hasAttachments,\n    },\n    { key: 'labels', label: 'Labels', value: email.labels },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-blue-400 mb-2\">📧 Email fields available for conditions:</div>\n      {emailFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Transform data condition view\nconst TransformConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-green-400 mb-2\">\n        🔄 Transformed fields available for conditions:\n      </div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ${\n        isSelected\n          ? 'border-purple-500 bg-purple-900/20'\n          : 'border-gray-600 hover:border-gray-500 bg-gray-750'\n      }`}\n      onClick={() => onSelect(fieldKey)}\n    >\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className={`text-sm font-medium ${isSelected ? 'text-purple-200' : 'text-gray-200'}`}>\n          {label}\n        </span>\n        <code\n          className={`text-xs px-2 py-1 rounded ${\n            isSelected ? 'bg-purple-800 text-purple-200' : 'bg-gray-700 text-gray-300'\n          }`}\n        >\n          {fieldKey}\n        </code>\n      </div>\n      <div className={`text-xs ${isSelected ? 'text-purple-300' : 'text-gray-400'}`}>\n        Type: {typeof value} {Array.isArray(value) && '(array)'}\n      </div>\n      <div className={`text-sm mt-2 ${isSelected ? 'text-purple-100' : 'text-gray-300'}`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx",
        "start": 67,
        "end": 508,
        "startLoc": {
          "line": 67,
          "column": 20,
          "position": 649
        },
        "endLoc": {
          "line": 508,
          "column": 2,
          "position": 4475
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 69,
        "end": 510,
        "startLoc": {
          "line": 69,
          "column": 20,
          "position": 675
        },
        "endLoc": {
          "line": 510,
          "column": 2,
          "position": 4501
        }
      }
    },
    {
      "format": "tsx",
      "lines": 561,
      "fragment": ";\n\ninterface ConditionInputPanelProps {\n  connectedInputNodes: any[];\n  selectedNode?: any;\n  testResults?: any;\n}\n\nconst ConditionInputPanel: React.FC<ConditionInputPanelProps> = ({ connectedInputNodes }) => {\n  // Default to expanding the first node that has data\n  const [expandedNode, setExpandedNode] = useState<string | null>(() => {\n    const firstNodeWithData = connectedInputNodes.find(\n      (node) => node?.data?.outputData || node?.data?.testResults?.data\n    );\n    return firstNodeWithData?.id || null;\n  });\n  const [selectedField, setSelectedField] = useState<string | null>(null);\n\n  // Debug logging\n  React.useEffect(() => {}, []);\n\n  if (connectedInputNodes.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-gray-400\">\n        <div className=\"text-center space-y-3\">\n          <div className=\"text-3xl\">⚖️</div>\n          <div className=\"text-sm font-medium\">No Input Connections</div>\n          <div className=\"text-xs text-gray-500 max-w-48\">\n            Connect nodes to provide data for condition evaluation\n          </div>\n          <div className=\"mt-4 text-xs text-blue-400\">\n            💡 Conditions evaluate input data to make decisions\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* === CONDITION OVERVIEW === */}\n      <div className=\"bg-purple-900/20 border border-purple-600/30 rounded-lg p-3\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">⚖️</span>\n          <div className=\"text-sm font-medium text-purple-200\">Condition Evaluation</div>\n          <span className=\"px-2 py-1 bg-purple-800 text-purple-100 rounded text-xs\">\n            {connectedInputNodes.length} input\n            {connectedInputNodes.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n        <div className=\"text-xs text-purple-300\">\n          This data will be evaluated by the condition logic. Use field references in your condition\n          expressions.\n        </div>\n      </div>\n\n      {/* === DATA ANALYSIS SUMMARY === */}\n      {connectedInputNodes.length > 0 && (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-3\">\n          <div className=\"text-sm font-medium text-gray-200 mb-3 flex items-center space-x-2\">\n            <span>📊</span>\n            <span>Available Data Fields</span>\n          </div>\n          <DataFieldsSummary\n            connectedInputNodes={connectedInputNodes}\n            onFieldSelect={setSelectedField}\n          />\n        </div>\n      )}\n\n      {/* === CONNECTED INPUT NODES === */}\n      <div className=\"space-y-3\">\n        <div className=\"text-sm font-semibold text-gray-100 flex items-center space-x-2\">\n          <span>📥</span>\n          <span>Input Data Sources</span>\n        </div>\n\n        {connectedInputNodes.map((node, index) => {\n          // More robust data detection\n          const outputData = node?.data?.outputData;\n          const testResultsData = node?.data?.testResults?.data;\n          const hasOutputData = outputData || testResultsData;\n\n          // Prefer outputData over testResults, but use either if available\n          let nodeData = null;\n          if (outputData) {\n            nodeData = outputData;\n          } else if (testResultsData) {\n            nodeData = testResultsData;\n          }\n\n          const isExpanded = expandedNode === node?.id;\n\n          return (\n            <div\n              key={node?.id || index}\n              className=\"bg-gray-800 rounded-lg border border-gray-600 overflow-hidden\"\n            >\n              {/* === NODE HEADER === */}\n              <div\n                className=\"p-3 border-b border-gray-600 bg-gray-750 cursor-pointer hover:bg-gray-700 transition-colors\"\n                onClick={() => setExpandedNode(isExpanded ? null : node?.id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-xl\" title={node?.data?.label || 'Node Icon'}>\n                      {getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Available</span>\n                      </span>\n                    ) : (\n                      <span className=\"px-2 py-1 bg-yellow-800 text-yellow-200 rounded text-xs flex items-center space-x-1\">\n                        <span>⏳</span>\n                        <span>No Data</span>\n                      </span>\n                    )}\n                    <span\n                      className={`transform transition-transform text-gray-400 ${isExpanded ? 'rotate-180' : ''}`}\n                    >\n                      ▼\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* === EXPANDABLE DATA CONTENT === */}\n              {isExpanded && (\n                <div className=\"p-3\">\n                  {hasOutputData ? (\n                    <div className=\"space-y-3\">\n                      {/* Enhanced JSON viewer for raw data */}\n                      <JsonViewer data={nodeData} maxHeight=\"400px\" enableClipboard={true} />\n\n                      {/* Then show the formatted renderer */}\n                      <ConditionDataRenderer\n                        data={nodeData}\n                        nodeType={getNodeType(node)}\n                        selectedField={selectedField}\n                        onFieldSelect={setSelectedField}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4 text-gray-400\">\n                      <div className=\"text-sm\">No output data available</div>\n                      <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* === CONDITION EVALUATION TIPS === */}\n      <div className=\"mt-6 p-3 bg-gray-800 rounded-lg border border-gray-600\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <span className=\"text-lg\">💡</span>\n          <div className=\"text-sm font-medium text-gray-200\">Condition Tips</div>\n        </div>\n        <div className=\"space-y-2 text-xs text-gray-400\">\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Reference data fields directly in conditions (e.g.,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">subject</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">priority</code>)\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Use comparison operators:{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">==</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">!=</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&gt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&lt;</code>,{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">contains</code>\n            </span>\n          </div>\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"text-purple-400 mt-0.5\">•</span>\n            <span>\n              Combine conditions with{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">&&</code> (and) or{' '}\n              <code className=\"bg-gray-700 px-1 rounded text-gray-300\">||</code> (or)\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Component to show summary of all available data fields\nconst DataFieldsSummary: React.FC<{\n  connectedInputNodes: any[];\n  onFieldSelect: (field: string) => void;\n}> = ({ connectedInputNodes, onFieldSelect }) => {\n  const allFields = new Set<string>();\n\n  // Collect all unique fields from connected nodes\n  connectedInputNodes.forEach((node, _index) => {\n    const outputData = node?.data?.outputData;\n    const testResultsData = node?.data?.testResults?.data;\n    const data = outputData || testResultsData;\n\n    if (data && typeof data === 'object') {\n      if (Array.isArray(data)) {\n        // Handle arrays (like emails)\n        if (data.length > 0 && typeof data[0] === 'object') {\n          Object.keys(data[0]).forEach((key) => allFields.add(key));\n        }\n      } else {\n        // Handle objects\n        Object.keys(data).forEach((key) => allFields.add(key));\n      }\n    }\n  });\n\n  const fieldsArray = Array.from(allFields).sort();\n\n  if (fieldsArray.length === 0) {\n    return (\n      <div className=\"text-xs text-gray-400\">\n        No structured fields available. Test connected nodes to analyze data fields.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {fieldsArray.map((field) => (\n        <button\n          key={field}\n          onClick={() => onFieldSelect(field)}\n          className=\"px-2 py-1 bg-purple-800 hover:bg-purple-700 text-purple-200 rounded text-xs transition-colors\"\n          title={`Click to highlight ${field} in data`}\n        >\n          {field}\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// Component to render data specifically for condition evaluation\nconst ConditionDataRenderer: React.FC<{\n  data: any;\n  nodeType: string;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, nodeType, selectedField, onFieldSelect }) => {\n  if (!data) {\n    return <div className=\"text-gray-400 text-sm\">No data available</div>;\n  }\n\n  // Handle different data structures\n\n  // Check if it's an array (like emails)\n  if (Array.isArray(data)) {\n    if (data.length > 0) {\n      const firstItem = data[0];\n      if (nodeType === 'gmail' || nodeType === 'gmail-trigger') {\n        return (\n          <EmailConditionView\n            email={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      } else {\n        // Generic array handling - show first item\n        return (\n          <GenericConditionView\n            data={firstItem}\n            selectedField={selectedField}\n            onFieldSelect={onFieldSelect}\n          />\n        );\n      }\n    }\n  }\n\n  // Handle email data (from Gmail triggers)\n  if ((nodeType === 'gmail' || nodeType === 'gmail-trigger') && typeof data === 'object') {\n    return (\n      <EmailConditionView\n        email={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle transformed data\n  if (nodeType === 'transform' && typeof data === 'object') {\n    return (\n      <TransformConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  // Handle AI Agent data\n  if (nodeType === 'ai-agent' && typeof data === 'object') {\n    return (\n      <AIConditionView data={data} selectedField={selectedField} onFieldSelect={onFieldSelect} />\n    );\n  }\n\n  // Generic structured data\n  if (typeof data === 'object' && data !== null) {\n    return (\n      <GenericConditionView\n        data={data}\n        selectedField={selectedField}\n        onFieldSelect={onFieldSelect}\n      />\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-yellow-400\">Debug: {nodeType} node data (fallback renderer)</div>\n      <div className=\"bg-gray-900 p-3 rounded border border-gray-600\">\n        <div className=\"text-xs text-gray-400 mb-2\">\n          Type: {typeof data} {Array.isArray(data) && `(array with ${data.length} items)`}\n        </div>\n        <div className=\"font-mono text-xs text-gray-200 max-h-40 overflow-y-auto\">\n          {typeof data === 'string' ? data : JSON.stringify(data, null, 2)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Email-specific condition view\nconst EmailConditionView: React.FC<{\n  email: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ email, selectedField, onFieldSelect }) => {\n  const emailFields = [\n    { key: 'from', label: 'From', value: email.from },\n    { key: 'subject', label: 'Subject', value: email.subject },\n    { key: 'body', label: 'Body', value: email.body },\n    { key: 'isUnread', label: 'Unread', value: email.isUnread },\n    {\n      key: 'hasAttachments',\n      label: 'Has Attachments',\n      value: email.hasAttachments,\n    },\n    { key: 'labels', label: 'Labels', value: email.labels },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-blue-400 mb-2\">📧 Email fields available for conditions:</div>\n      {emailFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Transform data condition view\nconst TransformConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-green-400 mb-2\">\n        🔄 Transformed fields available for conditions:\n      </div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// AI Agent data condition view\nconst AIConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const aiFields = [\n    { key: 'output', label: 'AI Output', value: data.output },\n    { key: 'provider', label: 'Provider', value: data.provider },\n    { key: 'model', label: 'Model', value: data.model },\n    { key: 'usage', label: 'Token Usage', value: data.usage },\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-orange-400 mb-2\">\n        🤖 AI response fields available for conditions:\n      </div>\n      {aiFields.map((field) => (\n        <FieldRow\n          key={field.key}\n          fieldKey={field.key}\n          label={field.label}\n          value={field.value}\n          isSelected={selectedField === field.key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Generic data condition view\nconst GenericConditionView: React.FC<{\n  data: any;\n  selectedField: string | null;\n  onFieldSelect: (field: string) => void;\n}> = ({ data, selectedField, onFieldSelect }) => {\n  const fields = Object.keys(data);\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-xs text-gray-400 mb-2\">📊 Data fields available for conditions:</div>\n      {fields.map((key) => (\n        <FieldRow\n          key={key}\n          fieldKey={key}\n          label={key}\n          value={data[key]}\n          isSelected={selectedField === key}\n          onSelect={onFieldSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Reusable field row component\nconst FieldRow: React.FC<{\n  fieldKey: string;\n  label: string;\n  value: any;\n  isSelected: boolean;\n  onSelect: (field: string) => void;\n}> = ({ fieldKey, label, value, isSelected, onSelect }) => {\n  const displayValue =\n    typeof value === 'string' && value.length > 100 ? `${value.substring(0, 100)}...` : value;\n\n  return (\n    <div\n      className={`p-3 rounded border cursor-pointer transition-all ${\n        isSelected\n          ? 'border-purple-500 bg-purple-900/20'\n          : 'border-gray-600 hover:border-gray-500 bg-gray-750'\n      }`}\n      onClick={() => onSelect(fieldKey)}\n    >\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className={`text-sm font-medium ${isSelected ? 'text-purple-200' : 'text-gray-200'}`}>\n          {label}\n        </span>\n        <code\n          className={`text-xs px-2 py-1 rounded ${\n            isSelected ? 'bg-purple-800 text-purple-200' : 'bg-gray-700 text-gray-300'\n          }`}\n        >\n          {fieldKey}\n        </code>\n      </div>\n      <div className={`text-xs ${isSelected ? 'text-purple-300' : 'text-gray-400'}`}>\n        Type: {typeof value} {Array.isArray(value) && '(array)'}\n      </div>\n      <div className={`text-sm mt-2 ${isSelected ? 'text-purple-100' : 'text-gray-300'}`}>\n        {typeof displayValue === 'object'\n          ? JSON.stringify(displayValue, null, 2)\n          : String(displayValue || 'null')}\n      </div>\n    </div>\n  );\n};\n\n// Helper functions (same as in other panels)\nconst getNodeIcon = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return '📧';\n  }\n  if (node?.type === 'transform') {\n    return '🔄';\n  }\n  if (node?.type === 'ai-agent' || node?.data?.integrationData?.id === 'ai-agent') {\n    return '🤖';\n  }\n  if (node?.type === 'trigger') {\n    return '⚡';\n  }\n  return '📊';\n};\n\nconst getNodeType = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return 'gmail-trigger';\n  }\n  if (node?.type === 'transform') {\n    return 'transform';\n  }\n  if (node?.type === 'ai-agent' || node?.data?.integrationData?.id === 'ai-agent') {\n    return 'ai-agent';\n  }\n  return node?.type || 'unknown';\n};\n\nconst getNodeTypeDisplay = (node: any): string => {\n  return (\n    node?.data?.enhancedNodeType?.displayName ||\n    node?.data?.nodeTypeData?.displayName ||\n    node?.data?.nodeTypeData?.name ||\n    node?.type ||\n    'Unknown Node Type'\n  );\n};\n\nexport default ConditionInputPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/ConditionInputPanel.tsx",
        "start": 3,
        "end": 563,
        "startLoc": {
          "line": 3,
          "column": 18,
          "position": 29
        },
        "endLoc": {
          "line": 563,
          "column": 2,
          "position": 4960
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 5,
        "end": 565,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 55
        },
        "endLoc": {
          "line": 565,
          "column": 2,
          "position": 4986
        }
      }
    },
    {
      "format": "javascript",
      "lines": 266,
      "fragment": "={{ padding: 12 }}>\n        <div className=\"space-y-3\">\n          {/* Comment header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar size={24} src={comment.author.avatar} style={{ backgroundColor: userColor }}>\n                {comment.author.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div>\n                <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                  {comment.author.name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(comment.timestamp).toLocaleString()}\n                </div>\n              </div>\n            </div>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                onResolve();\n              }}\n              className=\"text-green-600 hover:bg-green-50\"\n            >\n              Resolve\n            </Button>\n          </div>\n\n          {/* Comment content */}\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">{comment.content}</div>\n\n          {/* Replies */}\n          {comment.replies.length > 0 && (\n            <div className=\"space-y-2 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n              {comment.replies.map((reply) => (\n                <div key={reply.id} className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={16}\n                      src={reply.author.avatar}\n                      style={{ backgroundColor: getUserColor(reply.author.id) }}\n                    >\n                      {reply.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                      {reply.author.name}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(reply.timestamp).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300 pl-6\">\n                    {reply.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Reply input */}\n          <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex space-x-2\">\n              <Input\n                size=\"small\"\n                placeholder=\"Reply...\"\n                value={replyContents[comment.id] || ''}\n                onChange={(e) =>\n                  setReplyContents({\n                    ...replyContents,\n                    [comment.id]: e.target.value,\n                  })\n                }\n                onPressEnter={() => handleReplyToComment(comment.id)}\n              />\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={() => handleReplyToComment(comment.id)}\n                disabled={!replyContents[comment.id]?.trim()}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n    );\n\n    return (\n      <Popover\n        content={commentThread}\n        title={null}\n        trigger=\"click\"\n        placement=\"topLeft\"\n        overlayClassName=\"comment-thread-popover\"\n      >\n        <div\n          className={`absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 z-40 ${\n            isSelected ? 'scale-110' : 'scale-100'\n          }`}\n          style={{\n            left: screenPosition.x,\n            top: screenPosition.y,\n          }}\n          onClick={onClick}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {/* Comment pin */}\n          <div\n            className={`relative w-8 h-8 rounded-full border-2 border-white shadow-lg flex items-center justify-center ${\n              isSelected || isHovered ? 'transform scale-110' : ''\n            }`}\n            style={{\n              backgroundColor: userColor,\n              boxShadow: isSelected ? `0 0 0 3px ${userColor}40` : '0 2px 8px rgba(0,0,0,0.15)',\n            }}\n          >\n            <CommentOutlined className=\"text-white text-sm\" />\n\n            {/* Unread replies indicator */}\n            {comment.replies.length > 0 && (\n              <Badge\n                count={comment.replies.length}\n                size=\"small\"\n                className=\"absolute -top-1 -right-1\"\n              />\n            )}\n          </div>\n\n          {/* Connection line to author avatar */}\n          {(isSelected || isHovered) && (\n            <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-white dark:bg-gray-800 px-2 py-1 rounded shadow-md border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-1\">\n                  <Avatar\n                    size={16}\n                    src={comment.author.avatar}\n                    style={{ backgroundColor: userColor }}\n                  >\n                    {comment.author.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                  <span className=\"text-xs font-medium text-gray-900 dark:text-gray-100\">\n                    {comment.author.name}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Popover>\n    );\n  };\n\n  // Pending comment input\n  const PendingCommentInput: React.FC<{ position: { x: number; y: number } }> = ({ position }) => {\n    const screenPos = workflowToScreen(position.x, position.y);\n\n    return (\n      <div\n        className=\"absolute z-50\"\n        style={{\n          left: screenPos.x + 20,\n          top: screenPos.y,\n        }}\n      >\n        <Card size=\"small\" className=\"w-80 shadow-lg\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar\n                size={24}\n                src={currentUser?.avatar}\n                style={{\n                  backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n                }}\n              >\n                {currentUser?.name.charAt(0).toUpperCase() || '?'}\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                Add a comment\n              </span>\n            </div>\n\n            <TextArea\n              rows={3}\n              placeholder=\"What do you think about this?\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n              autoFocus\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setPendingCommentPosition(null);\n                  setNewCommentContent('');\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim()}\n              >\n                Post\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Pin indicator */}\n        <div\n          className=\"absolute w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center\"\n          style={{\n            left: -20,\n            top: 20,\n            backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n          }}\n        >\n          <CommentOutlined className=\"text-white text-xs\" />\n        </div>\n      </div>\n    );\n  };\n\n  if (!showComments || !containerRef.current) return null;\n\n  return (\n    <>\n      {/* Canvas click handler for comment mode */}\n      {commentMode && (\n        <div\n          className=\"absolute inset-0 z-30 cursor-crosshair\"\n          onClick={handleCanvasClick}\n          style={{\n            background: commentMode\n              ? 'linear-gradient(45deg, transparent 40%, rgba(24, 144, 255, 0.1) 50%, transparent 60%)'\n              : 'transparent',\n          }}\n        />\n      )}\n\n      {/* Existing comments */}\n      {activeComments.map((comment) => {\n        const screenPos = workflowToScreen(comment.position.x, comment.position.y);\n\n        return (\n          <CommentPin\n            key={comment.id}\n            comment={comment}\n            screenPosition={screenPos}\n            isSelected={selectedCommentId === comment.id}\n            onClick={() => selectComment(comment.id)}\n            onResolve={() => resolveComment(comment.id)}\n          />\n        );\n      })}\n\n      {/* Pending comment input */}\n      {pendingCommentPosition && <PendingCommentInput position={pendingCommentPosition}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx",
        "start": 157,
        "end": 422,
        "startLoc": {
          "line": 157,
          "column": 10,
          "position": 1337
        },
        "endLoc": {
          "line": 422,
          "column": 2,
          "position": 3216
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 164,
        "end": 429,
        "startLoc": {
          "line": 164,
          "column": 10,
          "position": 1428
        },
        "endLoc": {
          "line": 429,
          "column": 2,
          "position": 3307
        }
      }
    },
    {
      "format": "tsx",
      "lines": 435,
      "fragment": "/**\n * Comment Annotations\n *\n * Visual comment pins and thread overlays for workflow canvas,\n * providing contextual commenting system similar to Figma's comments.\n */\n\nimport { CheckOutlined, CommentOutlined, SendOutlined } from '@ant-design/icons';\nimport { Avatar, Badge, Button, Card, Input, Popover } from 'antd';\nimport type React from 'react';\nimport { useCallback, useState } from 'react';\nimport type { CollaborationComment } from '../../../core/services/collaborationService';\nimport { useCollaborationStore } from '../../../core/stores/collaborationStore';\nimport { useLeanWorkflowStore } from '../../../core/stores/leanWorkflowStore';\n\nconst { TextArea } = Input;\n\ninterface CommentAnnotationsProps {\n  containerRef: React.RefObject<HTMLDivElement>;\n  transform: {\n    x: number;\n    y: number;\n    zoom: number;\n  };\n  onCommentClick?: (position: { x: number; y: number }) => void;\n}\n\ninterface CommentPinProps {\n  comment: CollaborationComment;\n  screenPosition: { x: number; y: number };\n  isSelected: boolean;\n  onClick: () => void;\n  onResolve: () => void;\n}\n\nexport const CommentAnnotations: React.FC<CommentAnnotationsProps> = ({\n  containerRef,\n  transform,\n  onCommentClick,\n}) => {\n  const {\n    activeComments,\n    selectedCommentId,\n    currentUser,\n    showComments,\n    commentMode,\n    selectComment,\n    resolveComment,\n    addComment,\n    replyToComment,\n  } = useCollaborationStore();\n  const { currentWorkflow } = useLeanWorkflowStore();\n\n  const [replyContents, setReplyContents] = useState<Record<string, string>>({});\n  const [newCommentContent, setNewCommentContent] = useState('');\n  const [pendingCommentPosition, setPendingCommentPosition] = useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n\n  // Convert workflow coordinates to screen coordinates\n  const workflowToScreen = useCallback(\n    (x: number, y: number) => ({\n      x: (x + transform.x) * transform.zoom,\n      y: (y + transform.y) * transform.zoom,\n    }),\n    [transform]\n  );\n\n  // Convert screen coordinates to workflow coordinates\n  const screenToWorkflow = useCallback(\n    (x: number, y: number) => ({\n      x: x / transform.zoom - transform.x,\n      y: y / transform.zoom - transform.y,\n    }),\n    [transform]\n  );\n\n  // Generate user colors\n  const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle canvas click for new comments\n  const handleCanvasClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (!commentMode || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      const workflowPos = screenToWorkflow(x, y);\n      setPendingCommentPosition(workflowPos);\n      onCommentClick?.(workflowPos);\n    },\n    [commentMode, containerRef, screenToWorkflow, onCommentClick]\n  );\n\n  // Handle adding new comment\n  const handleAddComment = useCallback(async () => {\n    if (!newCommentContent.trim() || !pendingCommentPosition) return;\n\n    try {\n      await addComment({\n        workflowId: currentWorkflow?.id || '',\n        content: newCommentContent,\n        position: pendingCommentPosition,\n        resolved: false,\n        mentions: [], // TODO: Parse mentions from content\n      });\n\n      setNewCommentContent('');\n      setPendingCommentPosition(null);\n    } catch (_error) {}\n  }, [newCommentContent, pendingCommentPosition, addComment, currentWorkflow?.id]);\n\n  // Handle replying to comment\n  const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Comment Pin Component\n  const CommentPin: React.FC<CommentPinProps> = ({\n    comment,\n    screenPosition,\n    isSelected,\n    onClick,\n    onResolve,\n  }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const userColor = getUserColor(comment.author.id);\n\n    const commentThread = (\n      <Card size=\"small\" className=\"w-80 max-h-96 overflow-auto\" bodyStyle={{ padding: 12 }}>\n        <div className=\"space-y-3\">\n          {/* Comment header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar size={24} src={comment.author.avatar} style={{ backgroundColor: userColor }}>\n                {comment.author.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div>\n                <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                  {comment.author.name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(comment.timestamp).toLocaleString()}\n                </div>\n              </div>\n            </div>\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                onResolve();\n              }}\n              className=\"text-green-600 hover:bg-green-50\"\n            >\n              Resolve\n            </Button>\n          </div>\n\n          {/* Comment content */}\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">{comment.content}</div>\n\n          {/* Replies */}\n          {comment.replies.length > 0 && (\n            <div className=\"space-y-2 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n              {comment.replies.map((reply) => (\n                <div key={reply.id} className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={16}\n                      src={reply.author.avatar}\n                      style={{ backgroundColor: getUserColor(reply.author.id) }}\n                    >\n                      {reply.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                      {reply.author.name}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(reply.timestamp).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300 pl-6\">\n                    {reply.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Reply input */}\n          <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex space-x-2\">\n              <Input\n                size=\"small\"\n                placeholder=\"Reply...\"\n                value={replyContents[comment.id] || ''}\n                onChange={(e) =>\n                  setReplyContents({\n                    ...replyContents,\n                    [comment.id]: e.target.value,\n                  })\n                }\n                onPressEnter={() => handleReplyToComment(comment.id)}\n              />\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={() => handleReplyToComment(comment.id)}\n                disabled={!replyContents[comment.id]?.trim()}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n    );\n\n    return (\n      <Popover\n        content={commentThread}\n        title={null}\n        trigger=\"click\"\n        placement=\"topLeft\"\n        overlayClassName=\"comment-thread-popover\"\n      >\n        <div\n          className={`absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 z-40 ${\n            isSelected ? 'scale-110' : 'scale-100'\n          }`}\n          style={{\n            left: screenPosition.x,\n            top: screenPosition.y,\n          }}\n          onClick={onClick}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {/* Comment pin */}\n          <div\n            className={`relative w-8 h-8 rounded-full border-2 border-white shadow-lg flex items-center justify-center ${\n              isSelected || isHovered ? 'transform scale-110' : ''\n            }`}\n            style={{\n              backgroundColor: userColor,\n              boxShadow: isSelected ? `0 0 0 3px ${userColor}40` : '0 2px 8px rgba(0,0,0,0.15)',\n            }}\n          >\n            <CommentOutlined className=\"text-white text-sm\" />\n\n            {/* Unread replies indicator */}\n            {comment.replies.length > 0 && (\n              <Badge\n                count={comment.replies.length}\n                size=\"small\"\n                className=\"absolute -top-1 -right-1\"\n              />\n            )}\n          </div>\n\n          {/* Connection line to author avatar */}\n          {(isSelected || isHovered) && (\n            <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-white dark:bg-gray-800 px-2 py-1 rounded shadow-md border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-1\">\n                  <Avatar\n                    size={16}\n                    src={comment.author.avatar}\n                    style={{ backgroundColor: userColor }}\n                  >\n                    {comment.author.name.charAt(0).toUpperCase()}\n                  </Avatar>\n                  <span className=\"text-xs font-medium text-gray-900 dark:text-gray-100\">\n                    {comment.author.name}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Popover>\n    );\n  };\n\n  // Pending comment input\n  const PendingCommentInput: React.FC<{ position: { x: number; y: number } }> = ({ position }) => {\n    const screenPos = workflowToScreen(position.x, position.y);\n\n    return (\n      <div\n        className=\"absolute z-50\"\n        style={{\n          left: screenPos.x + 20,\n          top: screenPos.y,\n        }}\n      >\n        <Card size=\"small\" className=\"w-80 shadow-lg\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar\n                size={24}\n                src={currentUser?.avatar}\n                style={{\n                  backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n                }}\n              >\n                {currentUser?.name.charAt(0).toUpperCase() || '?'}\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                Add a comment\n              </span>\n            </div>\n\n            <TextArea\n              rows={3}\n              placeholder=\"What do you think about this?\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n              autoFocus\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setPendingCommentPosition(null);\n                  setNewCommentContent('');\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim()}\n              >\n                Post\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Pin indicator */}\n        <div\n          className=\"absolute w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center\"\n          style={{\n            left: -20,\n            top: 20,\n            backgroundColor: currentUser ? getUserColor(currentUser.id) : '#ccc',\n          }}\n        >\n          <CommentOutlined className=\"text-white text-xs\" />\n        </div>\n      </div>\n    );\n  };\n\n  if (!showComments || !containerRef.current) return null;\n\n  return (\n    <>\n      {/* Canvas click handler for comment mode */}\n      {commentMode && (\n        <div\n          className=\"absolute inset-0 z-30 cursor-crosshair\"\n          onClick={handleCanvasClick}\n          style={{\n            background: commentMode\n              ? 'linear-gradient(45deg, transparent 40%, rgba(24, 144, 255, 0.1) 50%, transparent 60%)'\n              : 'transparent',\n          }}\n        />\n      )}\n\n      {/* Existing comments */}\n      {activeComments.map((comment) => {\n        const screenPos = workflowToScreen(comment.position.x, comment.position.y);\n\n        return (\n          <CommentPin\n            key={comment.id}\n            comment={comment}\n            screenPosition={screenPos}\n            isSelected={selectedCommentId === comment.id}\n            onClick={() => selectComment(comment.id)}\n            onResolve={() => resolveComment(comment.id)}\n          />\n        );\n      })}\n\n      {/* Pending comment input */}\n      {pendingCommentPosition && <PendingCommentInput position={pendingCommentPosition} />}\n\n      {/* Comment mode instructions */}\n      {commentMode && (\n        <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-4 py-2 rounded-lg shadow-md border border-blue-200 dark:border-blue-700\">\n            <CommentOutlined className=\"mr-2\" />\n            Click anywhere on the canvas to add a comment\n          </div>\n        </div>\n      )}\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CommentAnnotations.tsx",
        "start": 1,
        "end": 435,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 435,
          "column": 2,
          "position": 3312
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/commentannotations/CommentAnnotations.tsx",
        "start": 8,
        "end": 442,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 442,
          "column": 2,
          "position": 3403
        }
      }
    },
    {
      "format": "javascript",
      "lines": 499,
      "fragment": "={isConnected ? 'processing' : 'error'}\n          text={connectionStatus}\n          className=\"capitalize\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        {/* Current user */}\n        {currentUser && (\n          <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={currentUser.avatar}\n                style={{ backgroundColor: getUserColor(currentUser.id) }}\n              >\n                {currentUser.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {currentUser.name} (You)\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">{currentUser.email}</div>\n              </div>\n              <Badge status=\"processing\" />\n            </div>\n          </Card>\n        )}\n\n        {/* Other users */}\n        {userPresences.map((presence) => (\n          <Card key={presence.userId} size=\"small\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={presence.user.avatar}\n                style={{ backgroundColor: getUserColor(presence.userId) }}\n              >\n                {presence.user.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {presence.user.name}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {presence.user.email}\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end\">\n                <Badge\n                  status={presence.user.status === 'online' ? 'success' : 'default'}\n                  text={presence.user.status}\n                />\n                {presence.cursor && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Cursor: {Math.round(presence.cursor.x)}, {Math.round(presence.cursor.y)}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {userPresences.length === 0 && !currentUser && (\n        <Empty description=\"No active users\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n\n      <Divider />\n\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Presence Settings</h4>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Cursors</span>\n          <Switch size=\"small\" checked={showUserCursors} onChange={toggleUserCursors} />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Selections</span>\n          <Switch size=\"small\" checked={showUserSelections} onChange={toggleUserSelections} />\n        </div>\n      </div>\n    </div>\n  );\n\n  // Comments Tab\n  const CommentsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Comments ({activeComments.length})\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"small\"\n            type={commentMode ? 'primary' : 'default'}\n            icon={<CommentOutlined />}\n            onClick={toggleCommentMode}\n          >\n            {commentMode ? 'Cancel' : 'Add Comment'}\n          </Button>\n          <Switch\n            size=\"small\"\n            checked={showComments}\n            onChange={toggleComments}\n            checkedChildren=\"Show\"\n            unCheckedChildren=\"Hide\"\n          />\n        </div>\n      </div>\n\n      {commentMode && (\n        <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n          <div className=\"space-y-2\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Click on the canvas to place a comment, or add a general comment below.\n            </div>\n            <TextArea\n              rows={3}\n              placeholder=\"Add your comment...\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => setNewCommentPosition({ x: 100, y: 100 })}\n                disabled={!newCommentContent.trim()}\n              >\n                Add General Comment\n              </Button>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim() || !newCommentPosition}\n              >\n                Post Comment\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"space-y-3\">\n        {activeComments.length === 0 ? (\n          <Empty description=\"No active comments\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n        ) : (\n          activeComments.map((comment) => (\n            <Card\n              key={comment.id}\n              size=\"small\"\n              className={selectedCommentId === comment.id ? 'border-blue-500 shadow-md' : ''}\n              onClick={() => selectComment(comment.id)}\n            >\n              <div className=\"space-y-2\">\n                {/* Comment header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={24}\n                      src={comment.author.avatar}\n                      style={{ backgroundColor: getUserColor(comment.author.id) }}\n                    >\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    {comment.nodeId && <Tag color=\"blue\">Node Comment</Tag>}\n                    <Tooltip title=\"Resolve Comment\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<CheckOutlined />}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          resolveComment(comment.id);\n                        }}\n                      />\n                    </Tooltip>\n                  </div>\n                </div>\n\n                {/* Comment content */}\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 ml-8\">\n                  {comment.content}\n                </div>\n\n                {/* Replies */}\n                {comment.replies.length > 0 && (\n                  <div className=\"ml-8 space-y-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    {comment.replies.map((reply) => (\n                      <div key={reply.id} className=\"flex space-x-2\">\n                        <Avatar\n                          size={20}\n                          src={reply.author.avatar}\n                          style={{ backgroundColor: getUserColor(reply.author.id) }}\n                        >\n                          {reply.author.name.charAt(0).toUpperCase()}\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            {reply.content}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Reply input */}\n                <div className=\"ml-8 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      size=\"small\"\n                      placeholder=\"Reply...\"\n                      value={replyContents[comment.id] || ''}\n                      onChange={(e) =>\n                        setReplyContents({\n                          ...replyContents,\n                          [comment.id]: e.target.value,\n                        })\n                      }\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts.length} status=\"error\" />}\n      </div>\n\n      {activeConflicts.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <CheckOutlined className=\"text-4xl text-green-500 mb-2\" />\n          <div className=\"text-gray-600 dark:text-gray-400\">No conflicts detected</div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {activeConflicts.map((conflict) => (\n            <Card\n              key={conflict.id}\n              size=\"small\"\n              className=\"border-red-200 bg-red-50 dark:bg-red-900/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <ExclamationCircleOutlined className=\"text-red-500\" />\n                      <span className=\"font-medium text-red-700 dark:text-red-300\">\n                        {conflict.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      Affected nodes: {conflict.affectedNodes.join(', ')}\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(conflict.timestamp).toLocaleString()}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"small\"\n                    type=\"primary\"\n                    danger\n                    onClick={() => {\n                      setSelectedConflict(conflict);\n                      setConflictModalVisible(true);\n                    }}\n                  >\n                    Resolve\n                  </Button>\n                </div>\n\n                <div className=\"pl-6\">\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    {conflict.operations.length} conflicting operations\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  // Activity Tab\n  const ActivityTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Recent Activity</h3>\n\n      <Timeline className=\"mt-4\">\n        {operationHistory\n          .slice(-10)\n          .reverse()\n          .map((operation) => (\n            <Timeline.Item\n              key={operation.id}\n              dot={\n                <Avatar size={20} style={{ backgroundColor: getUserColor(operation.userId) }}>\n                  {operation.userId.charAt(0).toUpperCase()}\n                </Avatar>\n              }\n            >\n              <div className=\"space-y-1\">\n                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {operation.type.replace('_', ' ')}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(operation.timestamp).toLocaleString()}\n                </div>\n                {operation.data?.nodeId && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Node: {operation.data.nodeId}\n                  </div>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n      </Timeline>\n\n      {operationHistory.length === 0 && (\n        <Empty description=\"No recent activity\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      <Drawer\n        title=\"Collaboration\"\n        placement=\"right\"\n        onClose={onToggle}\n        open={isVisible}\n        width={400}\n        className=\"collaboration-drawer\"\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"h-full\">\n          <TabPane\n            tab={\n              <span>\n                <TeamOutlined />\n                Users\n              </span>\n            }\n            key=\"users\"\n          >\n            <UsersTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CommentOutlined />\n                Comments\n                {activeComments.length > 0 && (\n                  <Badge count={activeComments.length} size=\"small\" style={{ marginLeft: 4 }} />\n                )}\n              </span>\n            }\n            key=\"comments\"\n          >\n            <CommentsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <WarningOutlined />\n                Conflicts\n                {activeConflicts.length > 0 && (\n                  <Badge\n                    count={activeConflicts.length}\n                    size=\"small\"\n                    status=\"error\"\n                    style={{ marginLeft: 4 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"conflicts\"\n          >\n            <ConflictsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ClockCircleOutlined />\n                Activity\n              </span>\n            }\n            key=\"activity\"\n          >\n            <ActivityTab />\n          </TabPane>\n        </Tabs>\n      </Drawer>\n\n      {/* Conflict Resolution Modal */}\n      <Modal\n        title=\"Resolve Conflict\"\n        open={conflictModalVisible}\n        onCancel={() => {\n          setConflictModalVisible(false);\n          setSelectedConflict(null);\n        }}\n        footer={null}\n        width={600}\n      >\n        {selectedConflict && (\n          <div className=\"space-y-4\">\n            <Alert\n              type=\"warning\"\n              message={`${selectedConflict.type.replace('_', ' ')} Conflict`}\n              description={`This conflict involves ${selectedConflict.operations.length} operations affecting ${selectedConflict.affectedNodes.length} nodes.`}\n            />\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Choose Resolution Strategy:</h4>\n\n              <Radio.Group className=\"w-full\" size=\"small\">\n                <div className=\"space-y-2\">\n                  <Radio value=\"last_write_wins\">\n                    <div>\n                      <div className=\"font-medium\">Last Write Wins</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Keep the most recent changes and discard older ones\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"merge\">\n                    <div>\n                      <div className=\"font-medium\">Smart Merge</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Attempt to automatically merge compatible changes\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"manual\">\n                    <div>\n                      <div className=\"font-medium\">Manual Resolution</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Review each change individually and decide\n                      </div>\n                    </div>\n                  </Radio>\n                </div>\n              </Radio.Group>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button onClick={() => setConflictModalVisible(false)}>Cancel</Button>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  handleResolveConflict(selectedConflict, {\n                    strategy: 'last_write_wins',\n                  })\n                }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx",
        "start": 157,
        "end": 655,
        "startLoc": {
          "line": 157,
          "column": 7,
          "position": 1174
        },
        "endLoc": {
          "line": 655,
          "column": 2,
          "position": 5029
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 161,
        "end": 659,
        "startLoc": {
          "line": 161,
          "column": 7,
          "position": 1226
        },
        "endLoc": {
          "line": 659,
          "column": 2,
          "position": 5081
        }
      }
    },
    {
      "format": "tsx",
      "lines": 665,
      "fragment": "/**\n * Collaboration Panel\n *\n * Real-time collaboration interface with user presence, comments,\n * conflict resolution, and collaboration settings. Inspired by\n * Figma's collaboration features and Google Docs comments.\n */\n\nimport {\n  CheckOutlined,\n  ClockCircleOutlined,\n  CommentOutlined,\n  ExclamationCircleOutlined,\n  SendOutlined,\n  TeamOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Divider,\n  Drawer,\n  Empty,\n  Input,\n  Modal,\n  Radio,\n  Switch,\n  Tabs,\n  Tag,\n  Timeline,\n  Tooltip,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useState } from 'react';\nimport type { CollaborationConflict } from '../../../core/services/collaborationService';\nimport { useCollaborationStore } from '../../../core/stores/collaborationStore';\nimport { useLeanWorkflowStore } from '../../../core/stores/leanWorkflowStore';\n\nconst { TextArea } = Input;\nconst { TabPane } = Tabs;\n\ninterface CollaborationPanelProps {\n  isVisible: boolean;\n  onToggle: () => void;\n}\n\nexport const CollaborationPanel: React.FC<CollaborationPanelProps> = ({ isVisible, onToggle }) => {\n  const [activeTab, setActiveTab] = useState('users');\n  const [newCommentContent, setNewCommentContent] = useState('');\n  const [newCommentPosition, setNewCommentPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n  const [replyContents, setReplyContents] = useState<Record<string, string>>({});\n  const [conflictModalVisible, setConflictModalVisible] = useState(false);\n  const [selectedConflict, setSelectedConflict] = useState<CollaborationConflict | null>(null);\n\n  const {\n    isConnected,\n    connectionStatus,\n    currentUser,\n    userPresences,\n    operationHistory,\n    activeComments,\n    activeConflicts,\n    selectedCommentId,\n    showUserCursors,\n    showUserSelections,\n    showComments,\n    commentMode,\n    addComment,\n    replyToComment,\n    resolveComment,\n    resolveConflict,\n    selectComment,\n    toggleCommentMode,\n    toggleUserCursors,\n    toggleUserSelections,\n    toggleComments,\n  } = useCollaborationStore();\n\n  const { selectedNodeIds, currentWorkflow } = useLeanWorkflowStore();\n\n  // Generate user colors for consistent display\n  const getUserColor = useCallback((userId: string): string => {\n    const colors = [\n      '#1890ff',\n      '#52c41a',\n      '#faad14',\n      '#f5222d',\n      '#722ed1',\n      '#13c2c2',\n      '#eb2f96',\n      '#fa541c',\n      '#2f54eb',\n      '#a0d911',\n    ];\n    const hash = userId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return colors[hash % colors.length];\n  }, []);\n\n  // Handle adding a comment\n  const handleAddComment = useCallback(async () => {\n    if (!newCommentContent.trim() || !newCommentPosition) return;\n\n    try {\n      await addComment({\n        workflowId: currentWorkflow?.id || '',\n        content: newCommentContent,\n        position: newCommentPosition,\n        nodeId: selectedNodeIds.length === 1 ? selectedNodeIds[0] : undefined,\n        resolved: false,\n        mentions: [], // TODO: Parse mentions from content\n      });\n\n      setNewCommentContent('');\n      setNewCommentPosition(null);\n    } catch (_error) {}\n  }, [newCommentContent, newCommentPosition, selectedNodeIds, addComment, currentWorkflow?.id]);\n\n  // Handle replying to a comment\n  const handleReplyToComment = useCallback(\n    async (commentId: string) => {\n      const content = replyContents[commentId];\n      if (!content?.trim()) return;\n\n      try {\n        await replyToComment(commentId, content);\n        setReplyContents({ ...replyContents, [commentId]: '' });\n      } catch (_error) {}\n    },\n    [replyContents, replyToComment]\n  );\n\n  // Handle conflict resolution\n  const handleResolveConflict = useCallback(\n    async (conflict: CollaborationConflict, resolution: any) => {\n      try {\n        await resolveConflict(conflict.id, resolution);\n        setConflictModalVisible(false);\n        setSelectedConflict(null);\n      } catch (_error) {}\n    },\n    [resolveConflict]\n  );\n\n  // Users Tab\n  const UsersTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Active Users ({userPresences.length + (currentUser ? 1 : 0)})\n        </h3>\n        <Badge\n          status={isConnected ? 'processing' : 'error'}\n          text={connectionStatus}\n          className=\"capitalize\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        {/* Current user */}\n        {currentUser && (\n          <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={currentUser.avatar}\n                style={{ backgroundColor: getUserColor(currentUser.id) }}\n              >\n                {currentUser.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {currentUser.name} (You)\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">{currentUser.email}</div>\n              </div>\n              <Badge status=\"processing\" />\n            </div>\n          </Card>\n        )}\n\n        {/* Other users */}\n        {userPresences.map((presence) => (\n          <Card key={presence.userId} size=\"small\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar\n                size={32}\n                src={presence.user.avatar}\n                style={{ backgroundColor: getUserColor(presence.userId) }}\n              >\n                {presence.user.name.charAt(0).toUpperCase()}\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {presence.user.name}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {presence.user.email}\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end\">\n                <Badge\n                  status={presence.user.status === 'online' ? 'success' : 'default'}\n                  text={presence.user.status}\n                />\n                {presence.cursor && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Cursor: {Math.round(presence.cursor.x)}, {Math.round(presence.cursor.y)}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {userPresences.length === 0 && !currentUser && (\n        <Empty description=\"No active users\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n\n      <Divider />\n\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Presence Settings</h4>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Cursors</span>\n          <Switch size=\"small\" checked={showUserCursors} onChange={toggleUserCursors} />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Show User Selections</span>\n          <Switch size=\"small\" checked={showUserSelections} onChange={toggleUserSelections} />\n        </div>\n      </div>\n    </div>\n  );\n\n  // Comments Tab\n  const CommentsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Comments ({activeComments.length})\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"small\"\n            type={commentMode ? 'primary' : 'default'}\n            icon={<CommentOutlined />}\n            onClick={toggleCommentMode}\n          >\n            {commentMode ? 'Cancel' : 'Add Comment'}\n          </Button>\n          <Switch\n            size=\"small\"\n            checked={showComments}\n            onChange={toggleComments}\n            checkedChildren=\"Show\"\n            unCheckedChildren=\"Hide\"\n          />\n        </div>\n      </div>\n\n      {commentMode && (\n        <Card size=\"small\" className=\"bg-blue-50 border-blue-200 dark:bg-blue-900/20\">\n          <div className=\"space-y-2\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Click on the canvas to place a comment, or add a general comment below.\n            </div>\n            <TextArea\n              rows={3}\n              placeholder=\"Add your comment...\"\n              value={newCommentContent}\n              onChange={(e) => setNewCommentContent(e.target.value)}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                size=\"small\"\n                onClick={() => setNewCommentPosition({ x: 100, y: 100 })}\n                disabled={!newCommentContent.trim()}\n              >\n                Add General Comment\n              </Button>\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                icon={<SendOutlined />}\n                onClick={handleAddComment}\n                disabled={!newCommentContent.trim() || !newCommentPosition}\n              >\n                Post Comment\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"space-y-3\">\n        {activeComments.length === 0 ? (\n          <Empty description=\"No active comments\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n        ) : (\n          activeComments.map((comment) => (\n            <Card\n              key={comment.id}\n              size=\"small\"\n              className={selectedCommentId === comment.id ? 'border-blue-500 shadow-md' : ''}\n              onClick={() => selectComment(comment.id)}\n            >\n              <div className=\"space-y-2\">\n                {/* Comment header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar\n                      size={24}\n                      src={comment.author.avatar}\n                      style={{ backgroundColor: getUserColor(comment.author.id) }}\n                    >\n                      {comment.author.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                        {comment.author.name}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(comment.timestamp).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    {comment.nodeId && <Tag color=\"blue\">Node Comment</Tag>}\n                    <Tooltip title=\"Resolve Comment\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<CheckOutlined />}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          resolveComment(comment.id);\n                        }}\n                      />\n                    </Tooltip>\n                  </div>\n                </div>\n\n                {/* Comment content */}\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 ml-8\">\n                  {comment.content}\n                </div>\n\n                {/* Replies */}\n                {comment.replies.length > 0 && (\n                  <div className=\"ml-8 space-y-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    {comment.replies.map((reply) => (\n                      <div key={reply.id} className=\"flex space-x-2\">\n                        <Avatar\n                          size={20}\n                          src={reply.author.avatar}\n                          style={{ backgroundColor: getUserColor(reply.author.id) }}\n                        >\n                          {reply.author.name.charAt(0).toUpperCase()}\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium text-xs text-gray-900 dark:text-gray-100\">\n                              {reply.author.name}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(reply.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            {reply.content}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Reply input */}\n                <div className=\"ml-8 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      size=\"small\"\n                      placeholder=\"Reply...\"\n                      value={replyContents[comment.id] || ''}\n                      onChange={(e) =>\n                        setReplyContents({\n                          ...replyContents,\n                          [comment.id]: e.target.value,\n                        })\n                      }\n                      onPressEnter={() => handleReplyToComment(comment.id)}\n                    />\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<SendOutlined />}\n                      onClick={() => handleReplyToComment(comment.id)}\n                      disabled={!replyContents[comment.id]?.trim()}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Conflicts Tab\n  const ConflictsTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Conflicts ({activeConflicts.length})\n        </h3>\n        {activeConflicts.length > 0 && <Badge count={activeConflicts.length} status=\"error\" />}\n      </div>\n\n      {activeConflicts.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <CheckOutlined className=\"text-4xl text-green-500 mb-2\" />\n          <div className=\"text-gray-600 dark:text-gray-400\">No conflicts detected</div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {activeConflicts.map((conflict) => (\n            <Card\n              key={conflict.id}\n              size=\"small\"\n              className=\"border-red-200 bg-red-50 dark:bg-red-900/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <ExclamationCircleOutlined className=\"text-red-500\" />\n                      <span className=\"font-medium text-red-700 dark:text-red-300\">\n                        {conflict.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      Affected nodes: {conflict.affectedNodes.join(', ')}\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(conflict.timestamp).toLocaleString()}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"small\"\n                    type=\"primary\"\n                    danger\n                    onClick={() => {\n                      setSelectedConflict(conflict);\n                      setConflictModalVisible(true);\n                    }}\n                  >\n                    Resolve\n                  </Button>\n                </div>\n\n                <div className=\"pl-6\">\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    {conflict.operations.length} conflicting operations\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  // Activity Tab\n  const ActivityTab: React.FC = () => (\n    <div className=\"p-4 space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Recent Activity</h3>\n\n      <Timeline className=\"mt-4\">\n        {operationHistory\n          .slice(-10)\n          .reverse()\n          .map((operation) => (\n            <Timeline.Item\n              key={operation.id}\n              dot={\n                <Avatar size={20} style={{ backgroundColor: getUserColor(operation.userId) }}>\n                  {operation.userId.charAt(0).toUpperCase()}\n                </Avatar>\n              }\n            >\n              <div className=\"space-y-1\">\n                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {operation.type.replace('_', ' ')}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(operation.timestamp).toLocaleString()}\n                </div>\n                {operation.data?.nodeId && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Node: {operation.data.nodeId}\n                  </div>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n      </Timeline>\n\n      {operationHistory.length === 0 && (\n        <Empty description=\"No recent activity\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      <Drawer\n        title=\"Collaboration\"\n        placement=\"right\"\n        onClose={onToggle}\n        open={isVisible}\n        width={400}\n        className=\"collaboration-drawer\"\n      >\n        <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"h-full\">\n          <TabPane\n            tab={\n              <span>\n                <TeamOutlined />\n                Users\n              </span>\n            }\n            key=\"users\"\n          >\n            <UsersTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <CommentOutlined />\n                Comments\n                {activeComments.length > 0 && (\n                  <Badge count={activeComments.length} size=\"small\" style={{ marginLeft: 4 }} />\n                )}\n              </span>\n            }\n            key=\"comments\"\n          >\n            <CommentsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <WarningOutlined />\n                Conflicts\n                {activeConflicts.length > 0 && (\n                  <Badge\n                    count={activeConflicts.length}\n                    size=\"small\"\n                    status=\"error\"\n                    style={{ marginLeft: 4 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"conflicts\"\n          >\n            <ConflictsTab />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <ClockCircleOutlined />\n                Activity\n              </span>\n            }\n            key=\"activity\"\n          >\n            <ActivityTab />\n          </TabPane>\n        </Tabs>\n      </Drawer>\n\n      {/* Conflict Resolution Modal */}\n      <Modal\n        title=\"Resolve Conflict\"\n        open={conflictModalVisible}\n        onCancel={() => {\n          setConflictModalVisible(false);\n          setSelectedConflict(null);\n        }}\n        footer={null}\n        width={600}\n      >\n        {selectedConflict && (\n          <div className=\"space-y-4\">\n            <Alert\n              type=\"warning\"\n              message={`${selectedConflict.type.replace('_', ' ')} Conflict`}\n              description={`This conflict involves ${selectedConflict.operations.length} operations affecting ${selectedConflict.affectedNodes.length} nodes.`}\n            />\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Choose Resolution Strategy:</h4>\n\n              <Radio.Group className=\"w-full\" size=\"small\">\n                <div className=\"space-y-2\">\n                  <Radio value=\"last_write_wins\">\n                    <div>\n                      <div className=\"font-medium\">Last Write Wins</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Keep the most recent changes and discard older ones\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"merge\">\n                    <div>\n                      <div className=\"font-medium\">Smart Merge</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Attempt to automatically merge compatible changes\n                      </div>\n                    </div>\n                  </Radio>\n                  <Radio value=\"manual\">\n                    <div>\n                      <div className=\"font-medium\">Manual Resolution</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Review each change individually and decide\n                      </div>\n                    </div>\n                  </Radio>\n                </div>\n              </Radio.Group>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button onClick={() => setConflictModalVisible(false)}>Cancel</Button>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  handleResolveConflict(selectedConflict, {\n                    strategy: 'last_write_wins',\n                  })\n                }\n              >\n                Resolve Conflict\n              </Button>\n            </div>\n          </div>\n        )}\n      </Modal>\n    </>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/CollaborationPanel.tsx",
        "start": 1,
        "end": 665,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 665,
          "column": 2,
          "position": 5072
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/collaborationpanel/CollaborationPanel.tsx",
        "start": 5,
        "end": 669,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 52
        },
        "endLoc": {
          "line": 669,
          "column": 2,
          "position": 5124
        }
      }
    },
    {
      "format": "javascript",
      "lines": 615,
      "fragment": "={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Executions\"\n              value={executionSummary?.totalExecutions || 0}\n              prefix={<ThunderboltOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Success Rate\"\n              value={executionSummary?.successRate || 0}\n              suffix=\"%\"\n              precision={1}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{\n                color: (executionSummary?.successRate || 0) >= 95 ? '#3f8600' : '#cf1322',\n              }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Duration\"\n              value={formatDuration(executionSummary?.avgDuration || 0)}\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Efficiency Score\"\n              value={executionSummary?.efficiency || 0}\n              suffix=\"/100\"\n              precision={0}\n              prefix={<BarChartOutlined />}\n              valueStyle={{\n                color: (executionSummary?.efficiency || 0) >= 80 ? '#3f8600' : '#faad14',\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Performance Trend Chart */}\n      <Card title=\"Performance Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={performanceHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Duration']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.primary}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Alerts and Insights Row */}\n      <Row gutter={[16, 16]}>\n        {/* Top Bottlenecks */}\n        <Col span={12}>\n          <Card title=\"Top Performance Issues\" size=\"small\">\n            {topBottlenecks.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={topBottlenecks}\n                renderItem={(bottleneck) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={\n                        <Badge status={bottleneck.severity === 'critical' ? 'error' : 'warning'} />\n                      }\n                      title={\n                        <span>\n                          {bottleneck.description}\n                          <Tag\n                            color={\n                              bottleneck.severity === 'critical'\n                                ? 'red'\n                                : bottleneck.severity === 'high'\n                                  ? 'orange'\n                                  : 'yellow'\n                            }\n                            className=\"ml-2\"\n                          >\n                            {bottleneck.severity}\n                          </Tag>\n                        </span>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">{bottleneck.impact}</div>\n                          <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No performance issues detected\" />\n            )}\n          </Card>\n        </Col>\n\n        {/* Predictive Insights */}\n        <Col span={12}>\n          <Card title=\"AI Predictions\" size=\"small\">\n            {predictiveInsights.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={predictiveInsights}\n                renderItem={(insight) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={<RobotOutlined className=\"text-blue-500\" />}\n                      title={\n                        <div className=\"flex items-center\">\n                          <span>{insight.description}</span>\n                          <Tag color=\"blue\" className=\"ml-2\">\n                            {Math.round(insight.confidence * 100)}% confidence\n                          </Tag>\n                        </div>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">Impact: {insight.predictedImpact}</div>\n                          <div className=\"text-green-600 mt-1\">Timeframe: {insight.timeframe}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No predictions available\" />\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  // Performance Tab Component\n  const PerformanceTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Performance Charts Row */}\n      <Row gutter={[16, 16]}>\n        <Col span={12}>\n          <Card title=\"Execution Performance\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance']}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.primary}\n                  fill={chartColors.primary}\n                  fillOpacity={0.6}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n\n        <Col span={12}>\n          <Card title=\"Reliability Trend\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={reliabilityHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis domain={[0, 100]} />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(1)}%`, 'Success Rate']}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.success}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Node Performance Table */}\n      <Card title=\"Node Performance Analysis\" size=\"small\">\n        <Table\n          size=\"small\"\n          dataSource={currentAnalytics?.nodePerformance || []}\n          rowKey=\"nodeId\"\n          pagination={{ pageSize: 10 }}\n          columns={[\n            {\n              title: 'Node',\n              dataIndex: 'nodeName',\n              key: 'nodeName',\n              render: (name: string, record: NodePerformanceStats) => (\n                <div>\n                  <div className=\"font-medium\">{name}</div>\n                  <div className=\"text-xs text-gray-500\">{record.nodeType}</div>\n                </div>\n              ),\n            },\n            {\n              title: 'Executions',\n              dataIndex: 'executionCount',\n              key: 'executionCount',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.executionCount - b.executionCount,\n            },\n            {\n              title: 'Avg Duration',\n              dataIndex: 'averageDuration',\n              key: 'averageDuration',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.averageDuration - b.averageDuration,\n              render: (duration: number) => formatDuration(duration),\n            },\n            {\n              title: 'Success Rate',\n              dataIndex: 'failureRate',\n              key: 'failureRate',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.failureRate - b.failureRate,\n              render: (failureRate: number) => (\n                <span style={{ color: failureRate > 0.1 ? '#ff4d4f' : '#52c41a' }}>\n                  {((1 - failureRate) * 100).toFixed(1)}%\n                </span>\n              ),\n            },\n            {\n              title: 'Trend',\n              dataIndex: 'trend',\n              key: 'trend',\n              render: (trend: string) => (\n                <Tag\n                  color={trend === 'improving' ? 'green' : trend === 'degrading' ? 'red' : 'blue'}\n                >\n                  {trend}\n                </Tag>\n              ),\n            },\n            {\n              title: 'Actions',\n              key: 'actions',\n              render: (_, record: NodePerformanceStats) => (\n                <Button type=\"link\" size=\"small\" onClick={() => setSelectedNode(record.nodeId)}>\n                  Analyze\n                </Button>\n              ),\n            },\n          ]}\n        />\n      </Card>\n    </div>\n  );\n\n  // Cost Tab Component\n  const CostTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Cost Overview */}\n      <Row gutter={[16, 16]}>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Current Period Cost\"\n              value={costOptimization?.currentCost || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<DollarCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Potential Savings\"\n              value={costOptimization?.savings || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<RiseOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Cost Trend\"\n              value={costTrend}\n              suffix=\"%\"\n              precision={1}\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: costTrend > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Cost Chart */}\n      <Card title=\"Cost Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={costHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis tickFormatter={(value) => formatCurrency(value)} />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [formatCurrency(value), 'Cost']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.warning}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Cost Optimization Recommendations */}\n      {costOptimization && (\n        <Card title=\"Optimization Recommendations\" size=\"small\">\n          <List\n            dataSource={costOptimization.recommendations}\n            renderItem={(recommendation) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={<DollarCircleOutlined className=\"text-green-500\" />}\n                  title={\n                    <div className=\"flex items-center justify-between\">\n                      <span>{recommendation.description}</span>\n                      <Tag color=\"green\">\n                        Save {formatCurrency(recommendation.estimatedSavings)}\n                      </Tag>\n                    </div>\n                  }\n                  description={\n                    <div className=\"text-sm\">\n                      <div className=\"text-gray-600\">{recommendation.implementation}</div>\n                      <Tag\n                        color={\n                          recommendation.impact === 'high'\n                            ? 'red'\n                            : recommendation.impact === 'medium'\n                              ? 'orange'\n                              : 'blue'\n                        }\n                        className=\"mt-1\"\n                      >\n                        {recommendation.impact} impact\n                      </Tag>\n                    </div>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  // Insights Tab Component\n  const InsightsTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Predictive Insights */}\n      <Card title=\"Predictive Analytics\" size=\"small\">\n        {predictiveInsights.length > 0 ? (\n          <List\n            dataSource={predictiveInsights}\n            renderItem={(insight) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <RobotOutlined className=\"text-blue-500 mr-2\" />\n                        {insight.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag color=\"blue\">{Math.round(insight.confidence * 100)}% confidence</Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{insight.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Timeframe:</span>\n                        <div>{insight.timeframe}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Expected Impact:</span>\n                        <div>{insight.predictedImpact}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommended Actions:</span>\n                      <ul className=\"mt-2 space-y-1\">\n                        {insight.recommendedActions.map((action, index) => (\n                          <li key={index} className=\"text-sm text-green-600\">\n                            • {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"text-xs text-gray-500\">\n                      Based on: {insight.basedOn.join(', ')}\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No predictive insights available\" />\n        )}\n      </Card>\n\n      {/* Bottleneck Analysis */}\n      <Card title=\"Bottleneck Analysis\" size=\"small\">\n        {bottlenecks.length > 0 ? (\n          <List\n            dataSource={bottlenecks}\n            renderItem={(bottleneck) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <WarningOutlined\n                          className={`mr-2 ${\n                            bottleneck.severity === 'critical'\n                              ? 'text-red-500'\n                              : bottleneck.severity === 'high'\n                                ? 'text-orange-500'\n                                : 'text-yellow-500'\n                          }`}\n                        />\n                        {bottleneck.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag\n                        color={\n                          bottleneck.severity === 'critical'\n                            ? 'red'\n                            : bottleneck.severity === 'high'\n                              ? 'orange'\n                              : 'yellow'\n                        }\n                      >\n                        {bottleneck.severity}\n                      </Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{bottleneck.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Impact:</span>\n                        <div>{bottleneck.impact}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Improvement:</span>\n                        <div className=\"text-green-600\">{bottleneck.estimatedImprovement}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommendation:</span>\n                      <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No bottlenecks detected\" />\n        )}\n      </Card>\n    </div>\n  );\n\n  // Settings and Controls\n  const AnalyticsHeader: React.FC = () => (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex items-center space-x-4\">\n        <Select value={analyticsPeriod} onChange={setAnalyticsPeriod} style={{ width: 120 }}>\n          <Option value={1}>Last 24h</Option>\n          <Option value={7}>Last 7 days</Option>\n          <Option value={30}>Last 30 days</Option>\n          <Option value={90}>Last 90 days</Option>\n        </Select>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-600\">Auto-refresh:</span>\n          <Switch size=\"small\" checked={autoRefresh} onChange={toggleAutoRefresh} />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {lastUpdated && (\n          <span className=\"text-xs text-gray-500\">\n            Updated: {new Date(lastUpdated).toLocaleTimeString()}\n          </span>\n        )}\n\n        <Button\n          type=\"text\"\n          icon={<ReloadOutlined />}\n          onClick={refreshAnalytics}\n          loading={isLoading}\n        >\n          Refresh\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      title=\"Workflow Analytics Dashboard\"\n      open={isOpen}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className=\"analytics-dashboard-modal\"\n    >\n      <AnalyticsHeader />\n\n      <Tabs\n        activeKey={selectedTab}\n        onChange={(key) => setSelectedTab(key as any)}\n        className=\"analytics-tabs\"\n      >\n        <TabPane\n          tab={\n            <span>\n              <DashboardOutlined />\n              Overview\n            </span>\n          }\n          key=\"overview\"\n        >\n          <OverviewTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Performance\n            </span>\n          }\n          key=\"performance\"\n        >\n          <PerformanceTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <DollarCircleOutlined />\n              Costs\n            </span>\n          }\n          key=\"costs\"\n        >\n          <CostTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BulbOutlined />\n              Insights\n            </span>\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx",
        "start": 128,
        "end": 742,
        "startLoc": {
          "line": 128,
          "column": 7,
          "position": 714
        },
        "endLoc": {
          "line": 742,
          "column": 2,
          "position": 5361
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 131,
        "end": 745,
        "startLoc": {
          "line": 131,
          "column": 7,
          "position": 753
        },
        "endLoc": {
          "line": 745,
          "column": 2,
          "position": 5400
        }
      }
    },
    {
      "format": "tsx",
      "lines": 750,
      "fragment": "/**\n * Analytics Dashboard\n *\n * Comprehensive analytics and performance monitoring dashboard providing\n * insights, bottleneck detection, cost optimization, and predictive analytics.\n * Inspired by DataDog, New Relic, and Grafana dashboards.\n */\n\nimport {\n  BarChartOutlined,\n  BulbOutlined,\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  DashboardOutlined,\n  DollarCircleOutlined,\n  ReloadOutlined,\n  RiseOutlined,\n  RobotOutlined,\n  ThunderboltOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Badge,\n  Button,\n  Card,\n  Col,\n  Empty,\n  List,\n  Modal,\n  Row,\n  Select,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useMemo } from 'react';\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport type { NodePerformanceStats } from '../../../core/services/analyticsService';\nimport {\n  formatCurrency,\n  formatDuration,\n  getCostTrend,\n  getExecutionSummary,\n  getTopBottlenecks,\n  useAnalyticsStore,\n} from '../../../core/stores/analyticsStore';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\ninterface AnalyticsDashboardProps {\n  isOpen: boolean;\n  onClose: () => void;\n  workflowId?: string;\n}\n\nexport const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({\n  isOpen,\n  onClose,\n  workflowId,\n}) => {\n  const {\n    currentAnalytics,\n    isLoading,\n    lastUpdated,\n    bottlenecks,\n    predictiveInsights,\n    costOptimization,\n    performanceHistory,\n    costHistory,\n    reliabilityHistory,\n    selectedTab,\n    analyticsPeriod,\n    // showPredictions,  // TODO: Implement predictions UI\n    // showCostAnalysis, // TODO: Implement cost analysis UI\n    autoRefresh,\n    // selectedNodeId,   // TODO: Implement node selection\n    setSelectedTab,\n    setAnalyticsPeriod,\n    toggleAutoRefresh,\n    // togglePredictions,  // TODO: Implement predictions toggle\n    // toggleCostAnalysis, // TODO: Implement cost analysis toggle\n    setSelectedNode,\n    loadAnalytics,\n    refreshAnalytics,\n  } = useAnalyticsStore();\n\n  // Load analytics when modal opens\n  useEffect(() => {\n    if (isOpen && workflowId && workflowId !== currentAnalytics?.workflowId) {\n      loadAnalytics(workflowId);\n    }\n  }, [isOpen, workflowId, loadAnalytics, currentAnalytics?.workflowId]);\n\n  const executionSummary = useMemo(() => getExecutionSummary(currentAnalytics), [currentAnalytics]);\n\n  const topBottlenecks = useMemo(() => getTopBottlenecks(bottlenecks, 5), [bottlenecks]);\n\n  const costTrend = useMemo(() => getCostTrend(costHistory), [costHistory]);\n\n  // Chart colors\n  const chartColors = {\n    primary: '#1890ff',\n    success: '#52c41a',\n    warning: '#faad14',\n    danger: '#ff4d4f',\n    purple: '#722ed1',\n    cyan: '#13c2c2',\n  };\n\n  // Overview Tab Component\n  const OverviewTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Executions\"\n              value={executionSummary?.totalExecutions || 0}\n              prefix={<ThunderboltOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Success Rate\"\n              value={executionSummary?.successRate || 0}\n              suffix=\"%\"\n              precision={1}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{\n                color: (executionSummary?.successRate || 0) >= 95 ? '#3f8600' : '#cf1322',\n              }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Duration\"\n              value={formatDuration(executionSummary?.avgDuration || 0)}\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Efficiency Score\"\n              value={executionSummary?.efficiency || 0}\n              suffix=\"/100\"\n              precision={0}\n              prefix={<BarChartOutlined />}\n              valueStyle={{\n                color: (executionSummary?.efficiency || 0) >= 80 ? '#3f8600' : '#faad14',\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Performance Trend Chart */}\n      <Card title=\"Performance Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={performanceHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Duration']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.primary}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Alerts and Insights Row */}\n      <Row gutter={[16, 16]}>\n        {/* Top Bottlenecks */}\n        <Col span={12}>\n          <Card title=\"Top Performance Issues\" size=\"small\">\n            {topBottlenecks.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={topBottlenecks}\n                renderItem={(bottleneck) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={\n                        <Badge status={bottleneck.severity === 'critical' ? 'error' : 'warning'} />\n                      }\n                      title={\n                        <span>\n                          {bottleneck.description}\n                          <Tag\n                            color={\n                              bottleneck.severity === 'critical'\n                                ? 'red'\n                                : bottleneck.severity === 'high'\n                                  ? 'orange'\n                                  : 'yellow'\n                            }\n                            className=\"ml-2\"\n                          >\n                            {bottleneck.severity}\n                          </Tag>\n                        </span>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">{bottleneck.impact}</div>\n                          <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No performance issues detected\" />\n            )}\n          </Card>\n        </Col>\n\n        {/* Predictive Insights */}\n        <Col span={12}>\n          <Card title=\"AI Predictions\" size=\"small\">\n            {predictiveInsights.length > 0 ? (\n              <List\n                size=\"small\"\n                dataSource={predictiveInsights}\n                renderItem={(insight) => (\n                  <List.Item>\n                    <List.Item.Meta\n                      avatar={<RobotOutlined className=\"text-blue-500\" />}\n                      title={\n                        <div className=\"flex items-center\">\n                          <span>{insight.description}</span>\n                          <Tag color=\"blue\" className=\"ml-2\">\n                            {Math.round(insight.confidence * 100)}% confidence\n                          </Tag>\n                        </div>\n                      }\n                      description={\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-600\">Impact: {insight.predictedImpact}</div>\n                          <div className=\"text-green-600 mt-1\">Timeframe: {insight.timeframe}</div>\n                        </div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            ) : (\n              <Empty description=\"No predictions available\" />\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  // Performance Tab Component\n  const PerformanceTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Performance Charts Row */}\n      <Row gutter={[16, 16]}>\n        <Col span={12}>\n          <Card title=\"Execution Performance\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <AreaChart data={performanceHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(2)}ms`, 'Performance']}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.primary}\n                  fill={chartColors.primary}\n                  fillOpacity={0.6}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n\n        <Col span={12}>\n          <Card title=\"Reliability Trend\" size=\"small\">\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={reliabilityHistory}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"timestamp\"\n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis domain={[0, 100]} />\n                <RechartsTooltip\n                  labelFormatter={(value) => new Date(value).toLocaleString()}\n                  formatter={(value: number) => [`${value.toFixed(1)}%`, 'Success Rate']}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartColors.success}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Node Performance Table */}\n      <Card title=\"Node Performance Analysis\" size=\"small\">\n        <Table\n          size=\"small\"\n          dataSource={currentAnalytics?.nodePerformance || []}\n          rowKey=\"nodeId\"\n          pagination={{ pageSize: 10 }}\n          columns={[\n            {\n              title: 'Node',\n              dataIndex: 'nodeName',\n              key: 'nodeName',\n              render: (name: string, record: NodePerformanceStats) => (\n                <div>\n                  <div className=\"font-medium\">{name}</div>\n                  <div className=\"text-xs text-gray-500\">{record.nodeType}</div>\n                </div>\n              ),\n            },\n            {\n              title: 'Executions',\n              dataIndex: 'executionCount',\n              key: 'executionCount',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.executionCount - b.executionCount,\n            },\n            {\n              title: 'Avg Duration',\n              dataIndex: 'averageDuration',\n              key: 'averageDuration',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.averageDuration - b.averageDuration,\n              render: (duration: number) => formatDuration(duration),\n            },\n            {\n              title: 'Success Rate',\n              dataIndex: 'failureRate',\n              key: 'failureRate',\n              sorter: (a: NodePerformanceStats, b: NodePerformanceStats) =>\n                a.failureRate - b.failureRate,\n              render: (failureRate: number) => (\n                <span style={{ color: failureRate > 0.1 ? '#ff4d4f' : '#52c41a' }}>\n                  {((1 - failureRate) * 100).toFixed(1)}%\n                </span>\n              ),\n            },\n            {\n              title: 'Trend',\n              dataIndex: 'trend',\n              key: 'trend',\n              render: (trend: string) => (\n                <Tag\n                  color={trend === 'improving' ? 'green' : trend === 'degrading' ? 'red' : 'blue'}\n                >\n                  {trend}\n                </Tag>\n              ),\n            },\n            {\n              title: 'Actions',\n              key: 'actions',\n              render: (_, record: NodePerformanceStats) => (\n                <Button type=\"link\" size=\"small\" onClick={() => setSelectedNode(record.nodeId)}>\n                  Analyze\n                </Button>\n              ),\n            },\n          ]}\n        />\n      </Card>\n    </div>\n  );\n\n  // Cost Tab Component\n  const CostTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Cost Overview */}\n      <Row gutter={[16, 16]}>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Current Period Cost\"\n              value={costOptimization?.currentCost || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<DollarCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Potential Savings\"\n              value={costOptimization?.savings || 0}\n              formatter={(value) => formatCurrency(Number(value))}\n              prefix={<RiseOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card>\n            <Statistic\n              title=\"Cost Trend\"\n              value={costTrend}\n              suffix=\"%\"\n              precision={1}\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: costTrend > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Cost Chart */}\n      <Card title=\"Cost Trends\" size=\"small\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={costHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"timestamp\"\n              tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n            />\n            <YAxis tickFormatter={(value) => formatCurrency(value)} />\n            <RechartsTooltip\n              labelFormatter={(value) => new Date(value).toLocaleString()}\n              formatter={(value: number) => [formatCurrency(value), 'Cost']}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={chartColors.warning}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n\n      {/* Cost Optimization Recommendations */}\n      {costOptimization && (\n        <Card title=\"Optimization Recommendations\" size=\"small\">\n          <List\n            dataSource={costOptimization.recommendations}\n            renderItem={(recommendation) => (\n              <List.Item>\n                <List.Item.Meta\n                  avatar={<DollarCircleOutlined className=\"text-green-500\" />}\n                  title={\n                    <div className=\"flex items-center justify-between\">\n                      <span>{recommendation.description}</span>\n                      <Tag color=\"green\">\n                        Save {formatCurrency(recommendation.estimatedSavings)}\n                      </Tag>\n                    </div>\n                  }\n                  description={\n                    <div className=\"text-sm\">\n                      <div className=\"text-gray-600\">{recommendation.implementation}</div>\n                      <Tag\n                        color={\n                          recommendation.impact === 'high'\n                            ? 'red'\n                            : recommendation.impact === 'medium'\n                              ? 'orange'\n                              : 'blue'\n                        }\n                        className=\"mt-1\"\n                      >\n                        {recommendation.impact} impact\n                      </Tag>\n                    </div>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      )}\n    </div>\n  );\n\n  // Insights Tab Component\n  const InsightsTab: React.FC = () => (\n    <div className=\"space-y-6\">\n      {/* Predictive Insights */}\n      <Card title=\"Predictive Analytics\" size=\"small\">\n        {predictiveInsights.length > 0 ? (\n          <List\n            dataSource={predictiveInsights}\n            renderItem={(insight) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <RobotOutlined className=\"text-blue-500 mr-2\" />\n                        {insight.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag color=\"blue\">{Math.round(insight.confidence * 100)}% confidence</Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{insight.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Timeframe:</span>\n                        <div>{insight.timeframe}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Expected Impact:</span>\n                        <div>{insight.predictedImpact}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommended Actions:</span>\n                      <ul className=\"mt-2 space-y-1\">\n                        {insight.recommendedActions.map((action, index) => (\n                          <li key={index} className=\"text-sm text-green-600\">\n                            • {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"text-xs text-gray-500\">\n                      Based on: {insight.basedOn.join(', ')}\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No predictive insights available\" />\n        )}\n      </Card>\n\n      {/* Bottleneck Analysis */}\n      <Card title=\"Bottleneck Analysis\" size=\"small\">\n        {bottlenecks.length > 0 ? (\n          <List\n            dataSource={bottlenecks}\n            renderItem={(bottleneck) => (\n              <List.Item>\n                <Card size=\"small\" className=\"w-full\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium flex items-center\">\n                        <WarningOutlined\n                          className={`mr-2 ${\n                            bottleneck.severity === 'critical'\n                              ? 'text-red-500'\n                              : bottleneck.severity === 'high'\n                                ? 'text-orange-500'\n                                : 'text-yellow-500'\n                          }`}\n                        />\n                        {bottleneck.type.replace('_', ' ').toUpperCase()}\n                      </h4>\n                      <Tag\n                        color={\n                          bottleneck.severity === 'critical'\n                            ? 'red'\n                            : bottleneck.severity === 'high'\n                              ? 'orange'\n                              : 'yellow'\n                        }\n                      >\n                        {bottleneck.severity}\n                      </Tag>\n                    </div>\n\n                    <div className=\"text-gray-700\">{bottleneck.description}</div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Impact:</span>\n                        <div>{bottleneck.impact}</div>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-600\">Improvement:</span>\n                        <div className=\"text-green-600\">{bottleneck.estimatedImprovement}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-gray-600\">Recommendation:</span>\n                      <div className=\"text-blue-600 mt-1\">💡 {bottleneck.recommendation}</div>\n                    </div>\n                  </div>\n                </Card>\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Empty description=\"No bottlenecks detected\" />\n        )}\n      </Card>\n    </div>\n  );\n\n  // Settings and Controls\n  const AnalyticsHeader: React.FC = () => (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex items-center space-x-4\">\n        <Select value={analyticsPeriod} onChange={setAnalyticsPeriod} style={{ width: 120 }}>\n          <Option value={1}>Last 24h</Option>\n          <Option value={7}>Last 7 days</Option>\n          <Option value={30}>Last 30 days</Option>\n          <Option value={90}>Last 90 days</Option>\n        </Select>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-600\">Auto-refresh:</span>\n          <Switch size=\"small\" checked={autoRefresh} onChange={toggleAutoRefresh} />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {lastUpdated && (\n          <span className=\"text-xs text-gray-500\">\n            Updated: {new Date(lastUpdated).toLocaleTimeString()}\n          </span>\n        )}\n\n        <Button\n          type=\"text\"\n          icon={<ReloadOutlined />}\n          onClick={refreshAnalytics}\n          loading={isLoading}\n        >\n          Refresh\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      title=\"Workflow Analytics Dashboard\"\n      open={isOpen}\n      onCancel={onClose}\n      width={1200}\n      footer={null}\n      className=\"analytics-dashboard-modal\"\n    >\n      <AnalyticsHeader />\n\n      <Tabs\n        activeKey={selectedTab}\n        onChange={(key) => setSelectedTab(key as any)}\n        className=\"analytics-tabs\"\n      >\n        <TabPane\n          tab={\n            <span>\n              <DashboardOutlined />\n              Overview\n            </span>\n          }\n          key=\"overview\"\n        >\n          <OverviewTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BarChartOutlined />\n              Performance\n            </span>\n          }\n          key=\"performance\"\n        >\n          <PerformanceTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <DollarCircleOutlined />\n              Costs\n            </span>\n          }\n          key=\"costs\"\n        >\n          <CostTab />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <BulbOutlined />\n              Insights\n            </span>\n          }\n          key=\"insights\"\n        >\n          <InsightsTab />\n        </TabPane>\n      </Tabs>\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AnalyticsDashboard.tsx",
        "start": 1,
        "end": 750,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 750,
          "column": 2,
          "position": 5397
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/analyticsdashboard/AnalyticsDashboard.tsx",
        "start": 4,
        "end": 753,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 753,
          "column": 2,
          "position": 5436
        }
      }
    },
    {
      "format": "javascript",
      "lines": 382,
      "fragment": "={{ width }}>\n      {/* Panel Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700 bg-gray-900\">\n        <div className=\"flex items-center gap-2\">\n          <h3 className=\"text-sm font-semibold text-white\">{title}</h3>\n          {badge && (\n            <Badge count={badge} className=\"text-xs\" style={{ backgroundColor: '#1890ff' }} />\n          )}\n        </div>\n        {actions && <Space size=\"small\">{actions}</Space>}\n      </div>\n\n      {/* Panel Content */}\n      <div className=\"flex-1 overflow-auto\">{children}</div>\n\n      {/* Resize Handle */}\n      {onResize && (\n        <div\n          className={cn(\n            'absolute top-0 right-0 w-1 h-full cursor-col-resize bg-transparent hover:bg-blue-500 transition-colors',\n            isResizing && 'bg-blue-500'\n          )}\n          onMouseDown={handleMouseDown}\n        />\n      )}\n    </div>\n  );\n};\n\nconst InputDataPanel: React.FC<{\n  nodeId: string;\n  width: number;\n  onResize: (width: number) => void;\n}> = ({ nodeId, width, onResize }) => {\n  const { edges } = useLeanWorkflowStore();\n  const { getNodeState } = useEnhancedExecutionStore();\n\n  // Find incoming connections to this node\n  const incomingData = useMemo(() => {\n    const incomingEdges = edges.filter((edge) => edge.target === nodeId);\n    const data: Record<string, any> = {};\n\n    incomingEdges.forEach((edge) => {\n      const sourceNodeState = getNodeState(edge.source);\n      if (sourceNodeState?.outputData) {\n        data[edge.source] = sourceNodeState.outputData;\n      }\n    });\n\n    return data;\n  }, [edges, nodeId, getNodeState]);\n\n  const actions = [\n    <Tooltip key=\"refresh\" title=\"Refresh data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<SyncOutlined />}\n        onClick={() => {\n          // Refresh input data\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"copy\" title=\"Copy data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          navigator.clipboard.writeText(JSON.stringify(incomingData, null, 2));\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  return (\n    <ResizablePanel\n      title=\"Input Data\"\n      width={width}\n      onResize={onResize}\n      actions={actions}\n      badge={Object.keys(incomingData).length || undefined}\n    >\n      <div className=\"p-4\">\n        {Object.keys(incomingData).length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📥</div>\n            <div>No input data available</div>\n            <div className=\"text-xs mt-2\">\n              Connect nodes or execute the workflow to see input data\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(incomingData).map(([sourceNodeId, data]) => (\n              <Card\n                key={sourceNodeId}\n                size=\"small\"\n                title={`From: ${sourceNodeId}`}\n                className=\"bg-gray-900 border-gray-600\"\n              >\n                <JsonViewer data={data} theme=\"dark\" collapsed={1} enableClipboard />\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nconst ConfigurationPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeById, updateNodeParameters } = useLeanWorkflowStore();\n  const [activeTab, setActiveTab] = useState('properties');\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isValid, setIsValid] = useState(true);\n  const [errors, setErrors] = useState<Map<string, string>>(new Map());\n\n  const node = getNodeById(nodeId);\n  const nodeDefinition = node ? nodeRegistry.getNodeTypeDescription(node.type) : null;\n\n  // Get enhanced properties for this node\n  const enhancedProperties = useMemo(() => {\n    if (!nodeDefinition) return [];\n\n    // Use basic properties for now, can be enhanced later\n    return nodeDefinition.properties || [];\n  }, [nodeDefinition]);\n\n  // Initialize form state from node parameters\n  React.useEffect(() => {\n    if (node) {\n      setFormState(node.parameters || {});\n    }\n  }, [node]);\n\n  // Property change handlers\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      const newFormState = { ...formState, [name]: value };\n      setFormState(newFormState);\n      updateNodeParameters(nodeId, { [name]: value });\n    },\n    [formState, nodeId, updateNodeParameters]\n  );\n\n  const handleValidationChange = useCallback((result: PropertyValidationResult) => {\n    setIsValid(result.isValid);\n    setErrors(result.errors);\n  }, []);\n\n  const handleTest = useCallback(async () => {}, []);\n\n  const handleSave = useCallback(async () => {}, []);\n\n  const actions = [\n    <Tooltip key=\"test\" title=\"Test node\">\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        icon={<PlayCircleOutlined />}\n        onClick={handleTest}\n        disabled={!isValid}\n      >\n        Test\n      </Button>\n    </Tooltip>,\n    <Tooltip key=\"debug\" title=\"Debug mode\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<BugOutlined />}\n        onClick={() => {\n          // Toggle debug mode for this node\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"save\" title=\"Save configuration\">\n      <Button type=\"text\" size=\"small\" icon={<SaveOutlined />} onClick={handleSave} />\n    </Tooltip>,\n  ];\n\n  const tabItems = [\n    {\n      key: 'properties',\n      label: (\n        <span>\n          Properties\n          {errors.size > 0 && (\n            <Badge\n              count={errors.size}\n              size=\"small\"\n              style={{ backgroundColor: '#ff4d4f', marginLeft: 8 }}\n            />\n          )}\n        </span>\n      ),\n      children: (\n        <div className=\"p-4\">\n          {enhancedProperties.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              <div className=\"text-2xl mb-2\">⚙️</div>\n              <div>No properties available</div>\n              <div className=\"text-xs mt-2\">\n                This node type doesn't have configurable properties\n              </div>\n            </div>\n          ) : (\n            <EnhancedPropertyRenderer\n              properties={enhancedProperties}\n              formState={formState}\n              onChange={handlePropertyChange}\n              onValidationChange={handleValidationChange}\n              theme=\"dark\"\n            />\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'credentials',\n      label: 'Credentials',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">🔐</div>\n            <div>Credential management</div>\n            <div className=\"text-xs mt-2\">Configure authentication for this node</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'settings',\n      label: 'Settings',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">⚙️</div>\n            <div>Node settings</div>\n            <div className=\"text-xs mt-2\">Advanced configuration options</div>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <ResizablePanel title=\"Configuration\" width={550} actions={actions}>\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n        className=\"h-full\"\n        tabBarStyle={{ margin: 0, paddingLeft: 16, paddingRight: 16 }}\n      />\n    </ResizablePanel>\n  );\n};\n\nconst OutputPreviewPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeState } = useEnhancedExecutionStore();\n  const nodeState = getNodeState(nodeId);\n\n  const actions = [\n    <Tooltip key=\"copy\" title=\"Copy output\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          if (nodeState?.outputData) {\n            navigator.clipboard.writeText(JSON.stringify(nodeState.outputData, null, 2));\n          }\n        }}\n        disabled={!nodeState?.outputData}\n      />\n    </Tooltip>,\n    <Tooltip key=\"fullscreen\" title=\"Fullscreen view\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<FullscreenOutlined />}\n        onClick={() => {\n          // Open fullscreen view\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  const hasOutput = nodeState?.outputData;\n  const hasError = nodeState?.error;\n\n  return (\n    <ResizablePanel\n      title=\"Output Preview\"\n      width={400}\n      actions={actions}\n      badge={hasOutput ? '✓' : hasError ? '✗' : undefined}\n    >\n      <div className=\"p-4\">\n        {hasError && nodeState?.error ? (\n          <Card className=\"bg-red-900 border-red-600\" title=\"Execution Error\" size=\"small\">\n            <div className=\"text-red-200 text-sm\">\n              <div className=\"font-semibold mb-2\">{nodeState.error.message}</div>\n              {nodeState.error.stack && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer\">Stack Trace</summary>\n                  <pre className=\"text-xs mt-2 overflow-x-auto\">{nodeState.error.stack}</pre>\n                </details>\n              )}\n            </div>\n          </Card>\n        ) : hasOutput ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm font-medium text-green-400\">Output Data</span>\n              {nodeState.duration && (\n                <span className=\"text-xs text-gray-500\">\n                  {nodeState.duration < 1000\n                    ? `${nodeState.duration}ms`\n                    : `${(nodeState.duration / 1000).toFixed(2)}s`}\n                </span>\n              )}\n            </div>\n            <JsonViewer data={nodeState.outputData} theme=\"dark\" collapsed={1} enableClipboard />\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📤</div>\n            <div>No output data</div>\n            <div className=\"text-xs mt-2\">Execute this node to see output data</div>\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nexport const AdvancedPropertyPanel: React.FC<AdvancedPropertyPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const [inputPanelWidth, setInputPanelWidth] = useState(700);\n  const { getNodeById } = useLeanWorkflowStore();\n\n  const node = nodeId ? getNodeById(nodeId) : null;\n\n  if (!isOpen || !nodeId || !node) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      title={\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <SettingOutlined />\n            <span>{node.name || node.type}</span>\n            <Badge status=\"processing\" text={node.type} />\n          </div>\n          <Button type=\"text\" icon={<CloseOutlined />} onClick={onClose} size=\"small\" />\n        </div>\n      }\n      placement=\"bottom\"\n      height=\"80vh\"\n      open={isOpen}\n      onClose={onClose}\n      closable={false}\n      className=\"advanced-property-panel\"\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"flex h-full bg-gray-800\">\n        {/* INPUT Column */}\n        <InputDataPanel nodeId={nodeId} width={inputPanelWidth} onResize={setInputPanelWidth} />\n\n        {/* CONFIGURATION Column */}\n        <ConfigurationPanel nodeId={nodeId} />\n\n        {/* OUTPUT Column */}\n        <OutputPreviewPanel nodeId={nodeId}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx",
        "start": 100,
        "end": 481,
        "startLoc": {
          "line": 100,
          "column": 6,
          "position": 773
        },
        "endLoc": {
          "line": 481,
          "column": 2,
          "position": 4089
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx",
        "start": 110,
        "end": 491,
        "startLoc": {
          "line": 110,
          "column": 6,
          "position": 903
        },
        "endLoc": {
          "line": 491,
          "column": 2,
          "position": 4219
        }
      }
    },
    {
      "format": "tsx",
      "lines": 487,
      "fragment": "/**\n * Advanced Property Panel\n *\n * Three-column layout inspired by SIM's property panel:\n * - INPUT column (700px, resizable): Connected node data visualization\n * - CONFIGURATION column (550px): Dynamic property forms with enhanced features\n * - OUTPUT column: Real-time preview and execution results\n */\n\nimport {\n  BugOutlined,\n  CloseOutlined,\n  CopyOutlined,\n  FullscreenOutlined,\n  PlayCircleOutlined,\n  SaveOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport { Badge, Button, Card, Drawer, Space, Tabs, Tooltip } from 'antd';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { nodeRegistry } from '@/core/nodes';\nimport { useEnhancedExecutionStore } from '@/core/stores/enhancedExecutionStore';\nimport { useLeanWorkflowStore } from '@/core/stores/leanWorkflowStore';\nimport { cn, JsonViewer } from '@/design-system';\nimport type { PropertyValidationResult } from './EnhancedPropertyRenderer';\nimport EnhancedPropertyRenderer from './EnhancedPropertyRenderer';\n\n// Simple type definition for property form state\ntype PropertyFormState = Record<string, any>;\n\ninterface AdvancedPropertyPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  nodeId?: string;\n}\n\ninterface ResizablePanelProps {\n  children: React.ReactNode;\n  title: string;\n  width: number;\n  minWidth?: number;\n  maxWidth?: number;\n  onResize?: (width: number) => void;\n  actions?: React.ReactNode[];\n  badge?: string | number;\n}\n\nconst ResizablePanel: React.FC<ResizablePanelProps> = ({\n  children,\n  title,\n  width,\n  minWidth = 200,\n  maxWidth = 1000,\n  onResize,\n  actions,\n  badge,\n}) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [startWidth, setStartWidth] = useState(width);\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      setIsResizing(true);\n      setStartX(e.clientX);\n      setStartWidth(width);\n    },\n    [width]\n  );\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isResizing) return;\n\n      const deltaX = e.clientX - startX;\n      const newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth + deltaX));\n      onResize?.(newWidth);\n    },\n    [isResizing, startX, startWidth, minWidth, maxWidth, onResize]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    setIsResizing(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isResizing, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div className=\"h-full border-r border-gray-700 bg-gray-800 flex flex-col\" style={{ width }}>\n      {/* Panel Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-700 bg-gray-900\">\n        <div className=\"flex items-center gap-2\">\n          <h3 className=\"text-sm font-semibold text-white\">{title}</h3>\n          {badge && (\n            <Badge count={badge} className=\"text-xs\" style={{ backgroundColor: '#1890ff' }} />\n          )}\n        </div>\n        {actions && <Space size=\"small\">{actions}</Space>}\n      </div>\n\n      {/* Panel Content */}\n      <div className=\"flex-1 overflow-auto\">{children}</div>\n\n      {/* Resize Handle */}\n      {onResize && (\n        <div\n          className={cn(\n            'absolute top-0 right-0 w-1 h-full cursor-col-resize bg-transparent hover:bg-blue-500 transition-colors',\n            isResizing && 'bg-blue-500'\n          )}\n          onMouseDown={handleMouseDown}\n        />\n      )}\n    </div>\n  );\n};\n\nconst InputDataPanel: React.FC<{\n  nodeId: string;\n  width: number;\n  onResize: (width: number) => void;\n}> = ({ nodeId, width, onResize }) => {\n  const { edges } = useLeanWorkflowStore();\n  const { getNodeState } = useEnhancedExecutionStore();\n\n  // Find incoming connections to this node\n  const incomingData = useMemo(() => {\n    const incomingEdges = edges.filter((edge) => edge.target === nodeId);\n    const data: Record<string, any> = {};\n\n    incomingEdges.forEach((edge) => {\n      const sourceNodeState = getNodeState(edge.source);\n      if (sourceNodeState?.outputData) {\n        data[edge.source] = sourceNodeState.outputData;\n      }\n    });\n\n    return data;\n  }, [edges, nodeId, getNodeState]);\n\n  const actions = [\n    <Tooltip key=\"refresh\" title=\"Refresh data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<SyncOutlined />}\n        onClick={() => {\n          // Refresh input data\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"copy\" title=\"Copy data\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          navigator.clipboard.writeText(JSON.stringify(incomingData, null, 2));\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  return (\n    <ResizablePanel\n      title=\"Input Data\"\n      width={width}\n      onResize={onResize}\n      actions={actions}\n      badge={Object.keys(incomingData).length || undefined}\n    >\n      <div className=\"p-4\">\n        {Object.keys(incomingData).length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📥</div>\n            <div>No input data available</div>\n            <div className=\"text-xs mt-2\">\n              Connect nodes or execute the workflow to see input data\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(incomingData).map(([sourceNodeId, data]) => (\n              <Card\n                key={sourceNodeId}\n                size=\"small\"\n                title={`From: ${sourceNodeId}`}\n                className=\"bg-gray-900 border-gray-600\"\n              >\n                <JsonViewer data={data} theme=\"dark\" collapsed={1} enableClipboard />\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nconst ConfigurationPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeById, updateNodeParameters } = useLeanWorkflowStore();\n  const [activeTab, setActiveTab] = useState('properties');\n  const [formState, setFormState] = useState<PropertyFormState>({});\n  const [isValid, setIsValid] = useState(true);\n  const [errors, setErrors] = useState<Map<string, string>>(new Map());\n\n  const node = getNodeById(nodeId);\n  const nodeDefinition = node ? nodeRegistry.getNodeTypeDescription(node.type) : null;\n\n  // Get enhanced properties for this node\n  const enhancedProperties = useMemo(() => {\n    if (!nodeDefinition) return [];\n\n    // Use basic properties for now, can be enhanced later\n    return nodeDefinition.properties || [];\n  }, [nodeDefinition]);\n\n  // Initialize form state from node parameters\n  React.useEffect(() => {\n    if (node) {\n      setFormState(node.parameters || {});\n    }\n  }, [node]);\n\n  // Property change handlers\n  const handlePropertyChange = useCallback(\n    (name: string, value: any) => {\n      const newFormState = { ...formState, [name]: value };\n      setFormState(newFormState);\n      updateNodeParameters(nodeId, { [name]: value });\n    },\n    [formState, nodeId, updateNodeParameters]\n  );\n\n  const handleValidationChange = useCallback((result: PropertyValidationResult) => {\n    setIsValid(result.isValid);\n    setErrors(result.errors);\n  }, []);\n\n  const handleTest = useCallback(async () => {}, []);\n\n  const handleSave = useCallback(async () => {}, []);\n\n  const actions = [\n    <Tooltip key=\"test\" title=\"Test node\">\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        icon={<PlayCircleOutlined />}\n        onClick={handleTest}\n        disabled={!isValid}\n      >\n        Test\n      </Button>\n    </Tooltip>,\n    <Tooltip key=\"debug\" title=\"Debug mode\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<BugOutlined />}\n        onClick={() => {\n          // Toggle debug mode for this node\n        }}\n      />\n    </Tooltip>,\n    <Tooltip key=\"save\" title=\"Save configuration\">\n      <Button type=\"text\" size=\"small\" icon={<SaveOutlined />} onClick={handleSave} />\n    </Tooltip>,\n  ];\n\n  const tabItems = [\n    {\n      key: 'properties',\n      label: (\n        <span>\n          Properties\n          {errors.size > 0 && (\n            <Badge\n              count={errors.size}\n              size=\"small\"\n              style={{ backgroundColor: '#ff4d4f', marginLeft: 8 }}\n            />\n          )}\n        </span>\n      ),\n      children: (\n        <div className=\"p-4\">\n          {enhancedProperties.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              <div className=\"text-2xl mb-2\">⚙️</div>\n              <div>No properties available</div>\n              <div className=\"text-xs mt-2\">\n                This node type doesn't have configurable properties\n              </div>\n            </div>\n          ) : (\n            <EnhancedPropertyRenderer\n              properties={enhancedProperties}\n              formState={formState}\n              onChange={handlePropertyChange}\n              onValidationChange={handleValidationChange}\n              theme=\"dark\"\n            />\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'credentials',\n      label: 'Credentials',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">🔐</div>\n            <div>Credential management</div>\n            <div className=\"text-xs mt-2\">Configure authentication for this node</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'settings',\n      label: 'Settings',\n      children: (\n        <div className=\"p-4\">\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">⚙️</div>\n            <div>Node settings</div>\n            <div className=\"text-xs mt-2\">Advanced configuration options</div>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <ResizablePanel title=\"Configuration\" width={550} actions={actions}>\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabItems}\n        className=\"h-full\"\n        tabBarStyle={{ margin: 0, paddingLeft: 16, paddingRight: 16 }}\n      />\n    </ResizablePanel>\n  );\n};\n\nconst OutputPreviewPanel: React.FC<{ nodeId: string }> = ({ nodeId }) => {\n  const { getNodeState } = useEnhancedExecutionStore();\n  const nodeState = getNodeState(nodeId);\n\n  const actions = [\n    <Tooltip key=\"copy\" title=\"Copy output\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<CopyOutlined />}\n        onClick={() => {\n          if (nodeState?.outputData) {\n            navigator.clipboard.writeText(JSON.stringify(nodeState.outputData, null, 2));\n          }\n        }}\n        disabled={!nodeState?.outputData}\n      />\n    </Tooltip>,\n    <Tooltip key=\"fullscreen\" title=\"Fullscreen view\">\n      <Button\n        type=\"text\"\n        size=\"small\"\n        icon={<FullscreenOutlined />}\n        onClick={() => {\n          // Open fullscreen view\n        }}\n      />\n    </Tooltip>,\n  ];\n\n  const hasOutput = nodeState?.outputData;\n  const hasError = nodeState?.error;\n\n  return (\n    <ResizablePanel\n      title=\"Output Preview\"\n      width={400}\n      actions={actions}\n      badge={hasOutput ? '✓' : hasError ? '✗' : undefined}\n    >\n      <div className=\"p-4\">\n        {hasError && nodeState?.error ? (\n          <Card className=\"bg-red-900 border-red-600\" title=\"Execution Error\" size=\"small\">\n            <div className=\"text-red-200 text-sm\">\n              <div className=\"font-semibold mb-2\">{nodeState.error.message}</div>\n              {nodeState.error.stack && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer\">Stack Trace</summary>\n                  <pre className=\"text-xs mt-2 overflow-x-auto\">{nodeState.error.stack}</pre>\n                </details>\n              )}\n            </div>\n          </Card>\n        ) : hasOutput ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm font-medium text-green-400\">Output Data</span>\n              {nodeState.duration && (\n                <span className=\"text-xs text-gray-500\">\n                  {nodeState.duration < 1000\n                    ? `${nodeState.duration}ms`\n                    : `${(nodeState.duration / 1000).toFixed(2)}s`}\n                </span>\n              )}\n            </div>\n            <JsonViewer data={nodeState.outputData} theme=\"dark\" collapsed={1} enableClipboard />\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500 py-8\">\n            <div className=\"text-2xl mb-2\">📤</div>\n            <div>No output data</div>\n            <div className=\"text-xs mt-2\">Execute this node to see output data</div>\n          </div>\n        )}\n      </div>\n    </ResizablePanel>\n  );\n};\n\nexport const AdvancedPropertyPanel: React.FC<AdvancedPropertyPanelProps> = ({\n  isOpen,\n  onClose,\n  nodeId,\n}) => {\n  const [inputPanelWidth, setInputPanelWidth] = useState(700);\n  const { getNodeById } = useLeanWorkflowStore();\n\n  const node = nodeId ? getNodeById(nodeId) : null;\n\n  if (!isOpen || !nodeId || !node) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      title={\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <SettingOutlined />\n            <span>{node.name || node.type}</span>\n            <Badge status=\"processing\" text={node.type} />\n          </div>\n          <Button type=\"text\" icon={<CloseOutlined />} onClick={onClose} size=\"small\" />\n        </div>\n      }\n      placement=\"bottom\"\n      height=\"80vh\"\n      open={isOpen}\n      onClose={onClose}\n      closable={false}\n      className=\"advanced-property-panel\"\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"flex h-full bg-gray-800\">\n        {/* INPUT Column */}\n        <InputDataPanel nodeId={nodeId} width={inputPanelWidth} onResize={setInputPanelWidth} />\n\n        {/* CONFIGURATION Column */}\n        <ConfigurationPanel nodeId={nodeId} />\n\n        {/* OUTPUT Column */}\n        <OutputPreviewPanel nodeId={nodeId} />\n      </div>\n    </Drawer>\n  );\n};\n\nexport default AdvancedPropertyPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedPropertyPanel.tsx",
        "start": 1,
        "end": 487,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 487,
          "column": 2,
          "position": 4116
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancedpropertypanel/AdvancedPropertyPanel.tsx",
        "start": 11,
        "end": 497,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 130
        },
        "endLoc": {
          "line": 497,
          "column": 2,
          "position": 4246
        }
      }
    },
    {
      "format": "javascript",
      "lines": 165,
      "fragment": "={suggestion.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, suggestion);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAISuggestionAdd(suggestion);\n        }}\n        className=\"group p-2.5 border border-blue-200 bg-blue-50 rounded-md cursor-move hover:bg-blue-100 hover:border-blue-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm bg-blue-500\">\n            {suggestion.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-blue-900 truncate\">{suggestion.displayName}</p>\n              <span className=\"bg-blue-200 text-blue-800 text-xs px-1.5 py-0.5 rounded-full font-medium\">\n                AI\n              </span>\n            </div>\n            <p className=\"text-xs text-blue-700 truncate mt-0.5 leading-tight\">\n              {suggestion.description}\n            </p>\n            {suggestion.aiSuggestion && (\n              <div className=\"mt-1\">\n                <p className=\"text-xs text-blue-600 italic\">\n                  💡 {suggestion.aiSuggestion.reasoning}\n                </p>\n                <span className=\"bg-blue-200 text-blue-700 text-xs px-1.5 py-0.5 rounded mt-1 inline-block\">\n                  Confidence: {Math.round(suggestion.aiSuggestion.confidence * 100)}%\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAISuggestionAdd]\n  );\n\n  // Render function for node items in virtualized list\n  const renderNodeItem = useCallback(\n    (node: (typeof allAvailableNodes)[0], _index: number) => (\n      <div\n        key={node.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, node);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAddNode(node);\n        }}\n        className=\"group p-2.5 border border-gray-200 rounded-md cursor-move hover:bg-gray-50 hover:border-gray-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div\n            className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm\"\n            style={{ backgroundColor: node.color }}\n          >\n            {node.icon || node.displayName.charAt(0)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">{node.displayName}</p>\n            </div>\n            <p className=\"text-xs text-gray-500 truncate mt-0.5 leading-tight\">\n              {node.description}\n            </p>\n            <div className=\"mt-1.5\">\n              <span className=\"bg-gray-100 text-gray-600 text-xs px-1.5 py-0.5 rounded\">\n                {getCategoryMetadata(node.category || '')?.icon || ''} {node.category}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAddNode]\n  );\n\n  return (\n    <div\n      className={`${isCollapsed ? 'w-16' : 'w-80'} h-full bg-white border-r border-gray-200 flex flex-col transition-all duration-300 ease-in-out`}\n    >\n      {/* Toggle Button */}\n      <div className=\"flex justify-end p-4\">\n        <button\n          onClick={onToggle}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n          title={isCollapsed ? 'Expand node panel' : 'Collapse node panel'}\n        >\n          <span className=\"text-lg\">{isCollapsed ? '→' : '←'}</span>\n        </button>\n      </div>\n\n      {!isCollapsed && (\n        <div className=\"px-4 pb-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Nodes</h2>\n            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n              {allAvailableNodes.length}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600\">Drag to add to workflow</p>\n        </div>\n      )}\n\n      {/* Search and Filter */}\n      {!isCollapsed && (\n        <div className=\"p-4 border-b border-gray-200 space-y-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          />\n\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            aria-label=\"Select category\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          >\n            {categories.map((category) => {\n              const metadata = category !== 'all' ? getCategoryMetadata(category) : null;\n              return (\n                <option key={category} value={category}>\n                  {category === 'all' ? 'All Categories' : `${metadata?.icon || ''} ${category}`}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      )}\n\n      {/* AI Suggestions Section */}\n      {!isCollapsed && isAIEnabled && aiSuggestedNodes.length > 0 && showAISuggestions && (\n        <div className=\"border-b border-gray-200\">\n          <div className=\"px-4 py-3 bg-blue-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white text-xs\">🤖</span>\n                </div>\n                <h3 className=\"text-sm font-medium text-blue-900\">AI Suggestions</h3>\n                <span className=\"bg-blue-200 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n                  {aiSuggestedNodes.length}\n                </span>\n              </div>\n              <button\n                onClick={() => setShowAISuggestions(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 302,
        "end": 466,
        "startLoc": {
          "line": 302,
          "column": 4,
          "position": 2838
        },
        "endLoc": {
          "line": 466,
          "column": 2,
          "position": 4167
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 307,
        "end": 471,
        "startLoc": {
          "line": 307,
          "column": 4,
          "position": 2903
        },
        "endLoc": {
          "line": 471,
          "column": 2,
          "position": 4232
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "import type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { CONTAINER_TEMPLATES, ContainerFactory } from '@/app/services/containerFactory';\nimport { nodeRegistry, useLeanWorkflowStore } from '@/core';\nimport {\n  CATEGORY_DESCRIPTIONS,\n  CATEGORY_ICONS,\n  UNIFIED_CATEGORIES,\n} from '@/core/constants/categories';\nimport { useAIAssistantStore } from '@/core/stores/aiAssistantStore';\nimport { VirtualizedList } from '@/design-system';\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 10,
          "position": 112
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 7,
          "position": 111
        }
      }
    },
    {
      "format": "tsx",
      "lines": 512,
      "fragment": ";\n\ninterface AdvancedNodePanelProps {\n  isCollapsed: boolean;\n  onToggle: () => void;\n}\n\n// Helper function to get category metadata\nconst getCategoryMetadata = (category: string) => {\n  const icon = CATEGORY_ICONS[category as keyof typeof CATEGORY_ICONS];\n  const info = CATEGORY_DESCRIPTIONS[category as keyof typeof CATEGORY_DESCRIPTIONS];\n  return { icon, info };\n};\n\nconst AdvancedNodePanel: React.FC<AdvancedNodePanelProps> = ({ isCollapsed, onToggle }) => {\n  const { addNode, addEdge, nodes, edges } = useLeanWorkflowStore();\n  const { isEnabled: isAIEnabled, nodeSuggestions, getNodeSuggestions } = useAIAssistantStore();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [showAISuggestions, setShowAISuggestions] = useState(true);\n\n  // Get all nodes from the registry (replacing hardcoded array)\n  const allRegistryDescriptions = nodeRegistry.getAllNodeTypeDescriptions();\n\n  const registryNodes = allRegistryDescriptions\n    .map((description) => ({\n      id: `registry-${description.name || 'unknown'}`,\n      displayName: description.displayName || description.name || 'Unknown Node',\n      description: description.description || 'No description available',\n      icon: description.icon || '⚡',\n      category: description.categories?.[0] || UNIFIED_CATEGORIES.BUSINESS_PRODUCTIVITY,\n      color: description.defaults?.color || '#6B7280',\n      type: description.name || 'unknown',\n      nodeTypeData: {\n        name: description.name || 'unknown',\n        displayName: description.displayName || description.name || 'Unknown Node',\n      },\n      isCore: true, // All registry nodes are core nodes\n    }))\n    .filter((node) => node.type !== 'unknown'); // Filter out malformed nodes\n\n  // Add container nodes\n  const containerNodes = Object.values(CONTAINER_TEMPLATES).map((template) => ({\n    id: `container-${template.type}`,\n    displayName: template.label,\n    description: template.description,\n    icon: template.icon,\n    category: template.category,\n    color: '#8B5CF6', // Purple color for containers\n    type: 'container',\n    containerType: template.type,\n    nodeTypeData: {\n      name: 'container',\n      displayName: template.label,\n      containerType: template.type,\n    },\n    isCore: true,\n  })) as Array<{\n    id: string;\n    displayName: string;\n    description: string;\n    icon: string;\n    category: string;\n    color: string;\n    type: string;\n    containerType?: string;\n    nodeTypeData: {\n      name: string;\n      displayName: string;\n      containerType?: string;\n    };\n    isCore: boolean;\n  }>;\n\n  // Only log in development mode and only if there are issues\n  if (import.meta.env.DEV && registryNodes.length === 0) {\n  }\n\n  // Pure Registry System - use only registry nodes, no integration duplicates\n  const allAvailableNodes = [...registryNodes, ...containerNodes];\n\n  // Use unified categories\n  const categories = ['all', ...Object.values(UNIFIED_CATEGORIES).sort()];\n\n  // AI-powered node suggestions\n  useEffect(() => {\n    if (isAIEnabled && nodes.length > 0) {\n      const timeoutId = setTimeout(() => {\n        getNodeSuggestions({\n          currentNodes: nodes,\n          currentEdges: edges,\n          lastAction: 'node_added',\n        }).catch((_error) => {});\n      }, 500); // Debounce suggestions\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isAIEnabled, nodes, edges, getNodeSuggestions]);\n\n  // Convert AI suggestions to node format for rendering\n  const aiSuggestedNodes = nodeSuggestions.map((suggestion) => ({\n    id: `ai-suggestion-${suggestion.id}`,\n    displayName: suggestion.title,\n    description: suggestion.description,\n    icon: '🤖', // AI suggestion icon\n    category: 'AI_SUGGESTIONS',\n    color: '#3B82F6', // Blue color for AI suggestions\n    type: suggestion.type,\n    nodeTypeData: {\n      name: suggestion.type,\n      displayName: suggestion.title,\n    },\n    isCore: false,\n    aiSuggestion: suggestion,\n  }));\n\n  const handleAISuggestionAdd = useCallback(\n    (suggestion: (typeof aiSuggestedNodes)[0]) => {\n      if (suggestion.aiSuggestion) {\n        // Use default position since AIWorkflowSuggestion doesn't have placement\n        const defaultPosition = { x: 100, y: 100 };\n\n        // Create node at default position\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}-${suggestion.type}`;\n        const enhancedNodeType = nodeRegistry.getNodeTypeDescription(suggestion.type);\n\n        const newNode = {\n          id: newNodeId,\n          type: suggestion.type,\n          position: defaultPosition,\n          parameters: {\n            label: suggestion.displayName,\n            nodeType: suggestion.nodeTypeData.name,\n            configuration: {},\n            credentials: [],\n            icon: enhancedNodeType?.icon || suggestion.icon,\n            enhancedNodeType: enhancedNodeType,\n            nodeTypeData: suggestion.nodeTypeData,\n            config: {},\n          },\n        };\n\n        addNode(newNode);\n\n        // Skip auto-connect since AI suggestion doesn't have connections\n        const connections: any[] = [];\n        connections.forEach((connection: any) => {\n          if (connection.sourceNodeId && connection.type === 'input') {\n            const newEdge = {\n              id: `edge-${connection.sourceNodeId}-${newNodeId}`,\n              source: connection.sourceNodeId,\n              target: newNodeId,\n              type: 'default',\n            };\n            addEdge(newEdge);\n          } else if (connection.targetNodeId && connection.type === 'output') {\n            const newEdge = {\n              id: `edge-${newNodeId}-${connection.targetNodeId}`,\n              source: newNodeId,\n              target: connection.targetNodeId,\n              type: 'default',\n            };\n            addEdge(newEdge);\n          }\n        });\n      }\n    },\n    [addNode, addEdge]\n  );\n\n  // Filter and sort nodes in ascending order\n  const filteredNodes = allAvailableNodes\n    .filter((node) => {\n      const matchesSearch =\n        (node.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||\n        (node.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n      const matchesCategory = selectedCategory === 'all' || node.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => (a.displayName || '').localeCompare(b.displayName || ''));\n\n  const onDragStart = useCallback((event: React.DragEvent, node: (typeof allAvailableNodes)[0]) => {\n    try {\n      const dragData = {\n        type: node.type,\n        nodeTypeData: node.nodeTypeData,\n        ...(node.type === 'container' && {\n          containerType: (node as any).containerType,\n        }),\n      };\n\n      event.dataTransfer.setData('application/reactflow', JSON.stringify(dragData));\n      event.dataTransfer.effectAllowed = 'move';\n    } catch (_error) {}\n  }, []);\n\n  // Helper function to find the rightmost node (last in sequence)\n  const findLastNode = useCallback(() => {\n    if (nodes.length === 0) return null;\n\n    // Find node with no outgoing connections (target but no source edges)\n    const nodesWithOutgoing = new Set(edges.map((edge) => edge.source));\n    const candidateNodes = nodes.filter((node) => !nodesWithOutgoing.has(node.id));\n\n    if (candidateNodes.length === 0) {\n      // If all nodes have outgoing connections, use the rightmost positioned node\n      return nodes.reduce((rightmost, current) =>\n        current.position.x > rightmost.position.x ? current : rightmost\n      );\n    }\n\n    // Among candidates with no outgoing connections, pick the rightmost\n    return candidateNodes.reduce((rightmost, current) =>\n      current.position.x > rightmost.position.x ? current : rightmost\n    );\n  }, [nodes, edges]);\n\n  const handleAddNode = useCallback(\n    (node: (typeof allAvailableNodes)[0]) => {\n      // Find last node for auto-connection\n      const lastNode = findLastNode();\n\n      // Position new node to the right of the last node, or at origin if no nodes exist\n      const newPosition = lastNode\n        ? { x: lastNode.position.x + 300, y: lastNode.position.y }\n        : { x: 100, y: 100 };\n\n      let newNode;\n\n      // Handle container nodes differently\n      if (node.type === 'container') {\n        const containerNode = ContainerFactory.createContainer(\n          (node as any).containerType,\n          newPosition,\n          undefined,\n          node.displayName\n        );\n\n        // Convert to WorkflowNodeInstance format\n        newNode = {\n          id: containerNode.id,\n          type: containerNode.type || 'container',\n          position: containerNode.position,\n          parameters: containerNode.data || {},\n        };\n      } else {\n        // Generate a unique ID for the workflow node (simplified for registry nodes)\n        const baseId = node.nodeTypeData.name;\n        const newNodeId = `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}-${baseId}`;\n\n        // Get the node type description from registry\n        const enhancedNodeType = nodeRegistry.getNodeTypeDescription(node.type);\n\n        newNode = {\n          id: newNodeId,\n          type: node.type,\n          position: newPosition,\n          parameters: {\n            label: node.displayName,\n            nodeType: node.nodeTypeData.name,\n            configuration: {},\n            credentials: [],\n            // Include icon and enhancedNodeType for property panel\n            icon: enhancedNodeType?.icon || node.icon,\n            enhancedNodeType: enhancedNodeType,\n            // Node type data for registry system\n            nodeTypeData: node.nodeTypeData,\n            config: {},\n          },\n        };\n      }\n\n      addNode(newNode);\n\n      // Auto-connect to the last node if it exists\n      if (lastNode) {\n        const newEdge = {\n          id: `edge-${lastNode.id}-${newNode.id}`,\n          source: lastNode.id,\n          target: newNode.id,\n          type: 'default',\n        };\n        addEdge(newEdge);\n      }\n    },\n    [addNode, addEdge, findLastNode]\n  );\n\n  // Render function for AI suggestion items\n  const renderAISuggestionItem = useCallback(\n    (suggestion: (typeof aiSuggestedNodes)[0], _index: number) => (\n      <div\n        key={suggestion.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, suggestion);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAISuggestionAdd(suggestion);\n        }}\n        className=\"group p-2.5 border border-blue-200 bg-blue-50 rounded-md cursor-move hover:bg-blue-100 hover:border-blue-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm bg-blue-500\">\n            {suggestion.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-blue-900 truncate\">{suggestion.displayName}</p>\n              <span className=\"bg-blue-200 text-blue-800 text-xs px-1.5 py-0.5 rounded-full font-medium\">\n                AI\n              </span>\n            </div>\n            <p className=\"text-xs text-blue-700 truncate mt-0.5 leading-tight\">\n              {suggestion.description}\n            </p>\n            {suggestion.aiSuggestion && (\n              <div className=\"mt-1\">\n                <p className=\"text-xs text-blue-600 italic\">\n                  💡 {suggestion.aiSuggestion.reasoning}\n                </p>\n                <span className=\"bg-blue-200 text-blue-700 text-xs px-1.5 py-0.5 rounded mt-1 inline-block\">\n                  Confidence: {Math.round(suggestion.aiSuggestion.confidence * 100)}%\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAISuggestionAdd]\n  );\n\n  // Render function for node items in virtualized list\n  const renderNodeItem = useCallback(\n    (node: (typeof allAvailableNodes)[0], _index: number) => (\n      <div\n        key={node.id}\n        draggable\n        onDragStart={(e) => {\n          e.stopPropagation();\n          onDragStart(e, node);\n        }}\n        onDragEnd={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          handleAddNode(node);\n        }}\n        className=\"group p-2.5 border border-gray-200 rounded-md cursor-move hover:bg-gray-50 hover:border-gray-300 hover:shadow-sm transition-all duration-150 mb-1.5\"\n      >\n        <div className=\"flex items-start space-x-2.5\">\n          <div\n            className=\"w-7 h-7 rounded flex-shrink-0 flex items-center justify-center text-white text-xs font-medium shadow-sm\"\n            style={{ backgroundColor: node.color }}\n          >\n            {node.icon || node.displayName.charAt(0)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\">{node.displayName}</p>\n            </div>\n            <p className=\"text-xs text-gray-500 truncate mt-0.5 leading-tight\">\n              {node.description}\n            </p>\n            <div className=\"mt-1.5\">\n              <span className=\"bg-gray-100 text-gray-600 text-xs px-1.5 py-0.5 rounded\">\n                {getCategoryMetadata(node.category || '')?.icon || ''} {node.category}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    [onDragStart, handleAddNode]\n  );\n\n  return (\n    <div\n      className={`${isCollapsed ? 'w-16' : 'w-80'} h-full bg-white border-r border-gray-200 flex flex-col transition-all duration-300 ease-in-out`}\n    >\n      {/* Toggle Button */}\n      <div className=\"flex justify-end p-4\">\n        <button\n          onClick={onToggle}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n          title={isCollapsed ? 'Expand node panel' : 'Collapse node panel'}\n        >\n          <span className=\"text-lg\">{isCollapsed ? '→' : '←'}</span>\n        </button>\n      </div>\n\n      {!isCollapsed && (\n        <div className=\"px-4 pb-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Nodes</h2>\n            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n              {allAvailableNodes.length}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600\">Drag to add to workflow</p>\n        </div>\n      )}\n\n      {/* Search and Filter */}\n      {!isCollapsed && (\n        <div className=\"p-4 border-b border-gray-200 space-y-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search nodes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          />\n\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            aria-label=\"Select category\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n          >\n            {categories.map((category) => {\n              const metadata = category !== 'all' ? getCategoryMetadata(category) : null;\n              return (\n                <option key={category} value={category}>\n                  {category === 'all' ? 'All Categories' : `${metadata?.icon || ''} ${category}`}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      )}\n\n      {/* AI Suggestions Section */}\n      {!isCollapsed && isAIEnabled && aiSuggestedNodes.length > 0 && showAISuggestions && (\n        <div className=\"border-b border-gray-200\">\n          <div className=\"px-4 py-3 bg-blue-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white text-xs\">🤖</span>\n                </div>\n                <h3 className=\"text-sm font-medium text-blue-900\">AI Suggestions</h3>\n                <span className=\"bg-blue-200 text-blue-800 text-xs px-2 py-1 rounded-full font-medium\">\n                  {aiSuggestedNodes.length}\n                </span>\n              </div>\n              <button\n                onClick={() => setShowAISuggestions(false)}\n                className=\"text-blue-600 hover:text-blue-800 text-xs\"\n                title=\"Hide AI suggestions\"\n              >\n                ✕\n              </button>\n            </div>\n            <p className=\"text-xs text-blue-700 mt-1\">\n              Smart suggestions based on your current workflow\n            </p>\n          </div>\n          <div className=\"px-4 py-2 max-h-48 overflow-y-auto\">\n            {aiSuggestedNodes.map((suggestion, index) => renderAISuggestionItem(suggestion, index))}\n          </div>\n        </div>\n      )}\n\n      {/* Node List */}\n      {!isCollapsed && (\n        <div className=\"overflow-hidden flex flex-col\">\n          {filteredNodes.length === 0 ? (\n            <div className=\"h-96 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-gray-400 text-4xl mb-2\">🔍</div>\n                <p className=\"text-gray-500 text-sm\">No nodes found</p>\n                <p className=\"text-gray-400 text-xs mt-1\">Try adjusting your search or filter</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"px-4 pb-4\">\n              <VirtualizedList\n                items={filteredNodes}\n                renderItem={renderNodeItem}\n                height={700}\n                estimateSize={85} // Estimated height per node item\n                getItemKey={(node) => node.id}\n                gap={0}\n                className=\"node-list\"\n                emptyState={\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500 text-sm\">\n                      {searchTerm\n                        ? 'No nodes match your search'\n                        : 'No nodes available in this category'}\n                    </p>\n                  </div>\n                }\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedNodePanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AdvancedNodePanel.tsx",
        "start": 11,
        "end": 522,
        "startLoc": {
          "line": 11,
          "column": 18,
          "position": 109
        },
        "endLoc": {
          "line": 522,
          "column": 2,
          "position": 4587
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/advancednodepanel/AdvancedNodePanel.tsx",
        "start": 16,
        "end": 527,
        "startLoc": {
          "line": 16,
          "column": 19,
          "position": 174
        },
        "endLoc": {
          "line": 527,
          "column": 2,
          "position": 4652
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#6366F1",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 115,
        "end": 123,
        "startLoc": {
          "line": 115,
          "column": 17,
          "position": 742
        },
        "endLoc": {
          "line": 123,
          "column": 8,
          "position": 795
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#8B5CF6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 128,
        "end": 136,
        "startLoc": {
          "line": 128,
          "column": 17,
          "position": 831
        },
        "endLoc": {
          "line": 136,
          "column": 8,
          "position": 884
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      refX=\"9\"\n      refY=\"3\"\n      orient=\"auto\"\n      markerUnits=\"strokeWidth\"\n    >\n      <polygon points=\"0,0 0,6 9,3\" fill=\"#14B8A6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 141,
        "end": 149,
        "startLoc": {
          "line": 141,
          "column": 17,
          "position": 920
        },
        "endLoc": {
          "line": 149,
          "column": 8,
          "position": 973
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIEdges.tsx",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 17,
          "position": 653
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "javascript",
      "lines": 333,
      "fragment": "={suggestion.id}\n      size=\"small\"\n      className=\"mb-3 bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors\"\n      actions={[\n        <Tooltip key=\"details\" title=\"View Details\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<InfoCircleOutlined />}\n            onClick={() => handleViewSuggestionDetails(suggestion)}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </Tooltip>,\n        <Tooltip key=\"apply\" title=\"Apply Suggestion\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<CheckCircleOutlined />}\n            onClick={() => handleApplySuggestion(suggestion)}\n            className=\"text-green-400 hover:text-green-300\"\n          />\n        </Tooltip>,\n      ]}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getTypeIcon(suggestion.type)}\n            <span className=\"text-white font-medium text-sm\">{suggestion.title}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Tag color={getImpactColor(suggestion.impact)}>{suggestion.impact}</Tag>\n            <Badge\n              count={`${(suggestion.confidence * 100).toFixed(0)}%`}\n              style={{ backgroundColor: '#1890ff' }}\n            />\n          </div>\n        </div>\n\n        <Text className=\"text-gray-400 text-xs\">{suggestion.description}</Text>\n\n        <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n          <span>Category: {suggestion.category}</span>\n          {suggestion.estimatedBenefit.performance && (\n            <span>Performance: +{(suggestion.estimatedBenefit.performance * 100).toFixed(0)}%</span>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderAnalysisMetrics = () => {\n    if (!analysis) return null;\n\n    return (\n      <div className=\"space-y-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <Title level={5} className=\"text-white mb-3\">\n            Workflow Analysis\n          </Title>\n\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Complexity</span>\n                <span className=\"text-gray-400\">{(analysis.complexity * 100).toFixed(0)}%</span>\n              </div>\n              <Progress\n                percent={analysis.complexity * 100}\n                strokeColor=\"#3b82f6\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Performance</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.performance.estimatedImprovement * 100).toFixed(0)}% improvement\n                  possible\n                </span>\n              </div>\n              <Progress\n                percent={analysis.performance.estimatedImprovement * 100}\n                strokeColor=\"#22c55e\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Maintainability</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.maintainability.codeQuality * 100).toFixed(0)}%\n                </span>\n              </div>\n              <Progress\n                percent={analysis.maintainability.codeQuality * 100}\n                strokeColor=\"#f59e0b\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n          </div>\n        </Card>\n\n        {analysis.performance.bottlenecks.length > 0 && (\n          <Alert\n            message=\"Performance Bottlenecks Detected\"\n            description={\n              <ul className=\"mt-2\">\n                {analysis.performance.bottlenecks.map((bottleneck, index) => (\n                  <li key={index} className=\"text-sm\">\n                    {bottleneck}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"warning\"\n            showIcon\n            className=\"bg-yellow-900 border-yellow-600\"\n          />\n        )}\n\n        {analysis.reliability.missingErrorHandling.length > 0 && (\n          <Alert\n            message=\"Missing Error Handling\"\n            description={`${analysis.reliability.missingErrorHandling.length} nodes need error handling`}\n            type=\"error\"\n            showIcon\n            className=\"bg-red-900 border-red-600\"\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <RobotOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            AI Assistant\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Intelligent workflow optimization and generation\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"ai-assistant-tabs\"\n          items={[\n            {\n              key: 'suggestions',\n              label: (\n                <span>\n                  <BulbOutlined className=\"mr-1\" />\n                  Suggestions\n                  {suggestions.length > 0 && (\n                    <Badge count={suggestions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  {suggestions.length === 0 ? (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <BulbOutlined className=\"text-4xl mb-2\" />\n                      <div>No suggestions available</div>\n                      <div className=\"text-xs mt-2\">\n                        {workflow\n                          ? 'Workflow analysis in progress...'\n                          : 'Load a workflow to get AI suggestions'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>{suggestions.map(renderSuggestionCard)}</div>\n                  )}\n                </div>\n              ),\n            },\n            {\n              key: 'generate',\n              label: (\n                <span>\n                  <SendOutlined className=\"mr-1\" />\n                  Generate\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Natural Language to Workflow\n                    </Title>\n                    <div className=\"space-y-3\">\n                      <TextArea\n                        value={naturalLanguageInput}\n                        onChange={(e) => setNaturalLanguageInput(e.target.value)}\n                        placeholder=\"Describe your workflow in natural language...&#10;&#10;Example: 'Send an email notification when a new order is received, then update the inventory database'\"\n                        rows={4}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                      <Button\n                        type=\"primary\"\n                        icon={<SendOutlined />}\n                        onClick={handleGenerateWorkflow}\n                        loading={isGenerating}\n                        disabled={!naturalLanguageInput.trim()}\n                        className=\"w-full\"\n                      >\n                        Generate Workflow\n                      </Button>\n                    </div>\n                  </Card>\n\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Quick Templates\n                    </Title>\n                    <div className=\"space-y-2\">\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Send email notification when form is submitted')\n                        }\n                      >\n                        📧 Email Notification\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Process uploaded files and save to database')\n                        }\n                      >\n                        📁 File Processing\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Sync data between two APIs every hour')\n                        }\n                      >\n                        🔄 Data Synchronization\n                      </Button>\n                    </div>\n                  </Card>\n                </div>\n              ),\n            },\n            {\n              key: 'analysis',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Analysis\n                </span>\n              ),\n              children: renderAnalysisMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Suggestion Details Modal */}\n      <Modal\n        title={selectedSuggestion?.title}\n        open={isDetailModalOpen}\n        onCancel={() => setIsDetailModalOpen(false)}\n        footer={[\n          <Button key=\"cancel\" onClick={() => setIsDetailModalOpen(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"apply\"\n            type=\"primary\"\n            onClick={() => {\n              if (selectedSuggestion) {\n                handleApplySuggestion(selectedSuggestion);\n                setIsDetailModalOpen(false);\n              }\n            }}\n          >\n            Apply Suggestion\n          </Button>,\n        ]}\n        width={600}\n      >\n        {selectedSuggestion && (\n          <div className=\"space-y-4\">\n            <div>\n              <Text className=\"text-gray-600\">{selectedSuggestion.description}</Text>\n            </div>\n\n            <div>\n              <Title level={5}>Reasoning</Title>\n              <Text className=\"text-gray-600\">{selectedSuggestion.reasoning}</Text>\n            </div>\n\n            {selectedSuggestion.suggestedChanges.length > 0 && (\n              <div>\n                <Title level={5}>Suggested Changes</Title>\n                <List\n                  size=\"small\"\n                  dataSource={selectedSuggestion.suggestedChanges}\n                  renderItem={(change) => (\n                    <List.Item>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{change.type}</div>\n                        <div className=\"text-sm text-gray-600\">{change.reason}</div>\n                      </div>\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n\n            {Object.keys(selectedSuggestion.estimatedBenefit).length > 0 && (\n              <div>\n                <Title level={5}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx",
        "start": 210,
        "end": 542,
        "startLoc": {
          "line": 210,
          "column": 4,
          "position": 1593
        },
        "endLoc": {
          "line": 542,
          "column": 2,
          "position": 4056
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx",
        "start": 213,
        "end": 545,
        "startLoc": {
          "line": 213,
          "column": 4,
          "position": 1632
        },
        "endLoc": {
          "line": 545,
          "column": 2,
          "position": 4095
        }
      }
    },
    {
      "format": "tsx",
      "lines": 578,
      "fragment": "/**\n * AI Assistant Panel\n *\n * Comprehensive AI-powered workflow assistance panel providing:\n * - Natural language workflow generation\n * - Intelligent optimization suggestions\n * - Error diagnosis and solutions\n * - Performance recommendations\n * - Pattern recognition and best practices\n */\n\nimport {\n  BugOutlined,\n  BulbOutlined,\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  RobotOutlined,\n  // PatternOutlined,\n  SendOutlined,\n  SettingOutlined,\n  StarOutlined,\n  ThunderboltOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Input,\n  List,\n  Modal,\n  Progress,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { WorkflowDefinition } from '@/core/nodes/types';\nimport type {\n  AIWorkflowSuggestion,\n  ErrorDiagnosis,\n  NaturalLanguageRequest,\n  WorkflowAnalysis,\n} from '@/core/services/aiAssistantService';\nimport { aiAssistantService } from '@/core/services/aiAssistantService';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\ninterface AIAssistantPanelProps {\n  workflow?: WorkflowDefinition;\n  onApplySuggestion?: (suggestion: AIWorkflowSuggestion) => void;\n  onGenerateWorkflow?: (workflow: WorkflowDefinition) => void;\n  className?: string;\n}\n\nconst AIAssistantPanel: React.FC<AIAssistantPanelProps> = ({\n  workflow,\n  onApplySuggestion,\n  onGenerateWorkflow,\n  className,\n}) => {\n  const [activeTab, setActiveTab] = useState('suggestions');\n  const [naturalLanguageInput, setNaturalLanguageInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [suggestions, setSuggestions] = useState<AIWorkflowSuggestion[]>([]);\n  const [_errors] = useState<ErrorDiagnosis[]>([]); // TODO: Implement error handling\n  const [analysis, setAnalysis] = useState<WorkflowAnalysis | null>(null);\n  const [selectedSuggestion, setSelectedSuggestion] = useState<AIWorkflowSuggestion | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n\n  // Load suggestions when workflow changes\n  useEffect(() => {\n    if (workflow) {\n      loadSuggestions();\n      loadAnalysis();\n    }\n  }, [workflow, loadAnalysis, loadSuggestions]);\n\n  const loadSuggestions = useCallback(async () => {\n    if (!workflow) return;\n\n    try {\n      const workflowSuggestions = await aiAssistantService.analyzeWorkflow(workflow);\n      setSuggestions(workflowSuggestions);\n    } catch (_error) {}\n  }, [workflow]);\n\n  const loadAnalysis = useCallback(async () => {\n    if (!workflow) return;\n\n    try {\n      // Simulate analysis loading\n      const mockAnalysis: WorkflowAnalysis = {\n        complexity: 0.6,\n        performance: {\n          bottlenecks: ['Sequential processing', 'Large data sets'],\n          optimizationOpportunities: ['Parallel processing', 'Data caching'],\n          estimatedImprovement: 0.4,\n        },\n        reliability: {\n          errorProneNodes: ['http-node-1', 'database-node-2'],\n          missingErrorHandling: ['http-node-1'],\n          suggestions: ['Add try-catch containers', 'Implement retry logic'],\n        },\n        maintainability: {\n          codeQuality: 0.7,\n          documentation: 0.5,\n          modularity: 0.8,\n        },\n        patterns: {\n          detected: ['Sequential Pattern', 'Data Transformation Pattern'],\n          recommendations: ['Use Parallel Container', 'Add Error Handling'],\n        },\n      };\n      setAnalysis(mockAnalysis);\n    } catch (_error) {}\n  }, [workflow]);\n\n  const handleGenerateWorkflow = useCallback(async () => {\n    if (!naturalLanguageInput.trim()) return;\n\n    setIsGenerating(true);\n    try {\n      const request: NaturalLanguageRequest = {\n        text: naturalLanguageInput,\n        context: {\n          currentWorkflow: workflow,\n          userIntent: 'workflow-generation',\n        },\n      };\n\n      const result = await aiAssistantService.generateWorkflowFromText(request);\n      onGenerateWorkflow?.(result.workflow);\n\n      // Show success message\n      Modal.success({\n        title: 'Workflow Generated Successfully',\n        content: (\n          <div>\n            <p>{result.explanation}</p>\n            <p>Confidence: {(result.confidence * 100).toFixed(1)}%</p>\n            <p>Complexity: {(result.estimatedComplexity * 100).toFixed(1)}%</p>\n          </div>\n        ),\n      });\n    } catch (_error) {\n      Modal.error({\n        title: 'Generation Failed',\n        content: 'Failed to generate workflow from natural language description.',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [naturalLanguageInput, workflow, onGenerateWorkflow]);\n\n  const handleApplySuggestion = useCallback(\n    (suggestion: AIWorkflowSuggestion) => {\n      onApplySuggestion?.(suggestion);\n\n      // Remove applied suggestion\n      setSuggestions((prev) => prev.filter((s) => s.id !== suggestion.id));\n\n      Modal.success({\n        title: 'Suggestion Applied',\n        content: `${suggestion.title} has been applied to your workflow.`,\n      });\n    },\n    [onApplySuggestion]\n  );\n\n  const handleViewSuggestionDetails = useCallback((suggestion: AIWorkflowSuggestion) => {\n    setSelectedSuggestion(suggestion);\n    setIsDetailModalOpen(true);\n  }, []);\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'red';\n      case 'medium':\n        return 'orange';\n      case 'low':\n        return 'green';\n      default:\n        return 'blue';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'optimization':\n        return <ThunderboltOutlined className=\"text-yellow-500\" />;\n      case 'error-fix':\n        return <BugOutlined className=\"text-red-500\" />;\n      case 'enhancement':\n        return <StarOutlined className=\"text-blue-500\" />;\n      case 'pattern':\n        return <BulbOutlined className=\"text-purple-500\" />;\n      default:\n        return <BulbOutlined className=\"text-gray-500\" />;\n    }\n  };\n\n  const renderSuggestionCard = (suggestion: AIWorkflowSuggestion) => (\n    <Card\n      key={suggestion.id}\n      size=\"small\"\n      className=\"mb-3 bg-gray-800 border-gray-600 hover:border-gray-500 transition-colors\"\n      actions={[\n        <Tooltip key=\"details\" title=\"View Details\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<InfoCircleOutlined />}\n            onClick={() => handleViewSuggestionDetails(suggestion)}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </Tooltip>,\n        <Tooltip key=\"apply\" title=\"Apply Suggestion\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<CheckCircleOutlined />}\n            onClick={() => handleApplySuggestion(suggestion)}\n            className=\"text-green-400 hover:text-green-300\"\n          />\n        </Tooltip>,\n      ]}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getTypeIcon(suggestion.type)}\n            <span className=\"text-white font-medium text-sm\">{suggestion.title}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Tag color={getImpactColor(suggestion.impact)}>{suggestion.impact}</Tag>\n            <Badge\n              count={`${(suggestion.confidence * 100).toFixed(0)}%`}\n              style={{ backgroundColor: '#1890ff' }}\n            />\n          </div>\n        </div>\n\n        <Text className=\"text-gray-400 text-xs\">{suggestion.description}</Text>\n\n        <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n          <span>Category: {suggestion.category}</span>\n          {suggestion.estimatedBenefit.performance && (\n            <span>Performance: +{(suggestion.estimatedBenefit.performance * 100).toFixed(0)}%</span>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderAnalysisMetrics = () => {\n    if (!analysis) return null;\n\n    return (\n      <div className=\"space-y-4\">\n        <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n          <Title level={5} className=\"text-white mb-3\">\n            Workflow Analysis\n          </Title>\n\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Complexity</span>\n                <span className=\"text-gray-400\">{(analysis.complexity * 100).toFixed(0)}%</span>\n              </div>\n              <Progress\n                percent={analysis.complexity * 100}\n                strokeColor=\"#3b82f6\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Performance</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.performance.estimatedImprovement * 100).toFixed(0)}% improvement\n                  possible\n                </span>\n              </div>\n              <Progress\n                percent={analysis.performance.estimatedImprovement * 100}\n                strokeColor=\"#22c55e\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-300\">Maintainability</span>\n                <span className=\"text-gray-400\">\n                  {(analysis.maintainability.codeQuality * 100).toFixed(0)}%\n                </span>\n              </div>\n              <Progress\n                percent={analysis.maintainability.codeQuality * 100}\n                strokeColor=\"#f59e0b\"\n                showInfo={false}\n                size=\"small\"\n              />\n            </div>\n          </div>\n        </Card>\n\n        {analysis.performance.bottlenecks.length > 0 && (\n          <Alert\n            message=\"Performance Bottlenecks Detected\"\n            description={\n              <ul className=\"mt-2\">\n                {analysis.performance.bottlenecks.map((bottleneck, index) => (\n                  <li key={index} className=\"text-sm\">\n                    {bottleneck}\n                  </li>\n                ))}\n              </ul>\n            }\n            type=\"warning\"\n            showIcon\n            className=\"bg-yellow-900 border-yellow-600\"\n          />\n        )}\n\n        {analysis.reliability.missingErrorHandling.length > 0 && (\n          <Alert\n            message=\"Missing Error Handling\"\n            description={`${analysis.reliability.missingErrorHandling.length} nodes need error handling`}\n            type=\"error\"\n            showIcon\n            className=\"bg-red-900 border-red-600\"\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn('h-full bg-gray-900 border-r border-gray-700', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <RobotOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            AI Assistant\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Intelligent workflow optimization and generation\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"ai-assistant-tabs\"\n          items={[\n            {\n              key: 'suggestions',\n              label: (\n                <span>\n                  <BulbOutlined className=\"mr-1\" />\n                  Suggestions\n                  {suggestions.length > 0 && (\n                    <Badge count={suggestions.length} size=\"small\" className=\"ml-2\" />\n                  )}\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  {suggestions.length === 0 ? (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <BulbOutlined className=\"text-4xl mb-2\" />\n                      <div>No suggestions available</div>\n                      <div className=\"text-xs mt-2\">\n                        {workflow\n                          ? 'Workflow analysis in progress...'\n                          : 'Load a workflow to get AI suggestions'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>{suggestions.map(renderSuggestionCard)}</div>\n                  )}\n                </div>\n              ),\n            },\n            {\n              key: 'generate',\n              label: (\n                <span>\n                  <SendOutlined className=\"mr-1\" />\n                  Generate\n                </span>\n              ),\n              children: (\n                <div className=\"space-y-4\">\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Natural Language to Workflow\n                    </Title>\n                    <div className=\"space-y-3\">\n                      <TextArea\n                        value={naturalLanguageInput}\n                        onChange={(e) => setNaturalLanguageInput(e.target.value)}\n                        placeholder=\"Describe your workflow in natural language...&#10;&#10;Example: 'Send an email notification when a new order is received, then update the inventory database'\"\n                        rows={4}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                      />\n                      <Button\n                        type=\"primary\"\n                        icon={<SendOutlined />}\n                        onClick={handleGenerateWorkflow}\n                        loading={isGenerating}\n                        disabled={!naturalLanguageInput.trim()}\n                        className=\"w-full\"\n                      >\n                        Generate Workflow\n                      </Button>\n                    </div>\n                  </Card>\n\n                  <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n                    <Title level={5} className=\"text-white mb-3\">\n                      Quick Templates\n                    </Title>\n                    <div className=\"space-y-2\">\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Send email notification when form is submitted')\n                        }\n                      >\n                        📧 Email Notification\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Process uploaded files and save to database')\n                        }\n                      >\n                        📁 File Processing\n                      </Button>\n                      <Button\n                        type=\"dashed\"\n                        size=\"small\"\n                        className=\"w-full text-left\"\n                        onClick={() =>\n                          setNaturalLanguageInput('Sync data between two APIs every hour')\n                        }\n                      >\n                        🔄 Data Synchronization\n                      </Button>\n                    </div>\n                  </Card>\n                </div>\n              ),\n            },\n            {\n              key: 'analysis',\n              label: (\n                <span>\n                  <SettingOutlined className=\"mr-1\" />\n                  Analysis\n                </span>\n              ),\n              children: renderAnalysisMetrics(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Suggestion Details Modal */}\n      <Modal\n        title={selectedSuggestion?.title}\n        open={isDetailModalOpen}\n        onCancel={() => setIsDetailModalOpen(false)}\n        footer={[\n          <Button key=\"cancel\" onClick={() => setIsDetailModalOpen(false)}>\n            Close\n          </Button>,\n          <Button\n            key=\"apply\"\n            type=\"primary\"\n            onClick={() => {\n              if (selectedSuggestion) {\n                handleApplySuggestion(selectedSuggestion);\n                setIsDetailModalOpen(false);\n              }\n            }}\n          >\n            Apply Suggestion\n          </Button>,\n        ]}\n        width={600}\n      >\n        {selectedSuggestion && (\n          <div className=\"space-y-4\">\n            <div>\n              <Text className=\"text-gray-600\">{selectedSuggestion.description}</Text>\n            </div>\n\n            <div>\n              <Title level={5}>Reasoning</Title>\n              <Text className=\"text-gray-600\">{selectedSuggestion.reasoning}</Text>\n            </div>\n\n            {selectedSuggestion.suggestedChanges.length > 0 && (\n              <div>\n                <Title level={5}>Suggested Changes</Title>\n                <List\n                  size=\"small\"\n                  dataSource={selectedSuggestion.suggestedChanges}\n                  renderItem={(change) => (\n                    <List.Item>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{change.type}</div>\n                        <div className=\"text-sm text-gray-600\">{change.reason}</div>\n                      </div>\n                    </List.Item>\n                  )}\n                />\n              </div>\n            )}\n\n            {Object.keys(selectedSuggestion.estimatedBenefit).length > 0 && (\n              <div>\n                <Title level={5}>Estimated Benefits</Title>\n                <div className=\"space-y-2\">\n                  {selectedSuggestion.estimatedBenefit.performance && (\n                    <div className=\"flex justify-between\">\n                      <span>Performance:</span>\n                      <span className=\"text-green-500\">\n                        +{(selectedSuggestion.estimatedBenefit.performance * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                  {selectedSuggestion.estimatedBenefit.reliability && (\n                    <div className=\"flex justify-between\">\n                      <span>Reliability:</span>\n                      <span className=\"text-blue-500\">\n                        +{(selectedSuggestion.estimatedBenefit.reliability * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                  {selectedSuggestion.estimatedBenefit.maintainability && (\n                    <div className=\"flex justify-between\">\n                      <span>Maintainability:</span>\n                      <span className=\"text-purple-500\">\n                        +{(selectedSuggestion.estimatedBenefit.maintainability * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default AIAssistantPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAssistantPanel.tsx",
        "start": 1,
        "end": 578,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 578,
          "column": 2,
          "position": 4362
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/aiassistantpanel/AIAssistantPanel.tsx",
        "start": 4,
        "end": 581,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 581,
          "column": 2,
          "position": 4401
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "getNodeIcon(node)}\n                    </span>\n                    <div>\n                      <div className=\"text-sm font-medium text-white\">\n                        {node?.data?.label || 'Unnamed Node'}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">{getNodeTypeDisplay(node)}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {hasOutputData ? (\n                      <span className=\"px-2 py-1 bg-green-800 text-green-200 rounded text-xs flex items-center space-x-1\">\n                        <span>✓</span>\n                        <span>Data Ready",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 71,
        "end": 84,
        "startLoc": {
          "line": 71,
          "column": 2,
          "position": 699
        },
        "endLoc": {
          "line": 84,
          "column": 6,
          "position": 821
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 111,
        "end": 124,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 1014
        },
        "endLoc": {
          "line": 124,
          "column": 10,
          "position": 1136
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ") : (\n                  <div className=\"text-center py-4 text-gray-400\">\n                    <div className=\"text-sm\">No output data available</div>\n                    <div className=\"text-xs mt-1\">Test the connected node to generate data</div>\n                  </div>\n                )}\n              </div>\n            </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 100,
        "end": 107,
        "startLoc": {
          "line": 100,
          "column": 17,
          "position": 940
        },
        "endLoc": {
          "line": 107,
          "column": 3,
          "position": 1020
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 157,
        "end": 164,
        "startLoc": {
          "line": 157,
          "column": 19,
          "position": 1357
        },
        "endLoc": {
          "line": 164,
          "column": 2,
          "position": 1437
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "const getNodeIcon = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return '📧';\n  }\n  if (node?.type === 'transform') {\n    return '🔄';\n  }\n  if (node?.type === 'trigger'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 333,
        "end": 343,
        "startLoc": {
          "line": 333,
          "column": 1,
          "position": 3354
        },
        "endLoc": {
          "line": 343,
          "column": 10,
          "position": 3463
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 520,
        "end": 530,
        "startLoc": {
          "line": 520,
          "column": 1,
          "position": 4563
        },
        "endLoc": {
          "line": 530,
          "column": 11,
          "position": 4672
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": ";\n  }\n  if (node?.type === 'trigger') {\n    return '⚡';\n  }\n  return '📊';\n};\n\nconst getNodeType = (node: any): string => {\n  if (\n    node?.data?.integrationData?.id === 'gmail' ||\n    node?.data?.enhancedNodeType?.id === 'gmail-trigger'\n  ) {\n    return 'gmail-trigger';\n  }\n  if (node?.type === 'transform') {\n    return 'transform';\n  }\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 341,
        "end": 359,
        "startLoc": {
          "line": 341,
          "column": 5,
          "position": 3447
        },
        "endLoc": {
          "line": 359,
          "column": 7,
          "position": 3586
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 531,
        "end": 549,
        "startLoc": {
          "line": 531,
          "column": 5,
          "position": 4698
        },
        "endLoc": {
          "line": 549,
          "column": 3,
          "position": 4837
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\n  }\n  return node?.type || 'unknown';\n};\n\nconst getNodeTypeDisplay = (node: any): string => {\n  return (\n    node?.data?.enhancedNodeType?.displayName ||\n    node?.data?.nodeTypeData?.displayName ||\n    node?.data?.nodeTypeData?.name ||\n    node?.type ||\n    'Unknown Node Type'\n  );\n};\n\nexport default AIAgentInputPanel",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/AIAgentInputPanel.tsx",
        "start": 357,
        "end": 372,
        "startLoc": {
          "line": 357,
          "column": 12,
          "position": 3580
        },
        "endLoc": {
          "line": 372,
          "column": 18,
          "position": 3692
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/conditioninputpanel/ConditionInputPanel.tsx",
        "start": 550,
        "end": 565,
        "startLoc": {
          "line": 550,
          "column": 11,
          "position": 4873
        },
        "endLoc": {
          "line": 565,
          "column": 20,
          "position": 4985
        }
      }
    },
    {
      "format": "javascript",
      "lines": 505,
      "fragment": "={<UserOutlined />} />\n          <div>\n            <div className=\"text-white font-medium\">{record.name}</div>\n            <div className=\"text-gray-400 text-xs\">{record.email}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      key: 'role',\n      render: (record: User) => <Tag color={getRoleColor(record.role.id)}>{record.role.name}</Tag>,\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: User) => <Tag color={getStatusColor(record.status)}>{record.status}</Tag>,\n    },\n    {\n      title: 'MFA',\n      key: 'mfa',\n      render: (record: User) => (\n        <Badge\n          status={record.mfaEnabled ? 'success' : 'default'}\n          text={record.mfaEnabled ? 'Enabled' : 'Disabled'}\n        />\n      ),\n    },\n    {\n      title: 'Last Login',\n      key: 'lastLogin',\n      render: (record: User) => (\n        <div className=\"text-gray-400 text-xs\">\n          {record.lastLoginAt ? new Date(record.lastLoginAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: User) => (\n        <Space size=\"small\">\n          <Tooltip title=\"Edit User\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setSelectedUser(record);\n                setIsUserModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Manage MFA\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckCircleOutlined />}\n              onClick={() => {\n                // Handle MFA management\n              }}\n              className=\"text-purple-400 hover:text-purple-300\"\n            />\n          </Tooltip>\n          <Dropdown\n            menu={{\n              items: [\n                {\n                  key: 'suspend',\n                  label: record.status === 'active' ? 'Suspend User' : 'Activate User',\n                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\n                },\n                {\n                  key: 'delete',\n                  label: 'Delete User',\n                  icon: <DeleteOutlined />,\n                  danger: true,\n                },\n              ],\n            }}\n            trigger={['click']}\n          >\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<MoreOutlined />}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Dropdown>\n        </Space>\n      ),\n    },\n  ];\n\n  const apiKeyColumns = [\n    {\n      title: 'Name',\n      key: 'name',\n      render: (_record: APIKey) => (\n        <div>\n          <div className=\"text-white font-medium\">{_record.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.metadata.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Key',\n      key: 'key',\n      render: (_record: APIKey) => (\n        <div className=\"font-mono text-xs text-gray-300\">{_record.key.substring(0, 12)}...</div>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (_record: APIKey) => (\n        <Tag color={_record.status === 'active' ? 'green' : 'red'}>{_record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Expires',\n      key: 'expires',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.expiresAt ? new Date(_record.expiresAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Last Used',\n      key: 'lastUsed',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.lastUsedAt ? new Date(_record.lastUsedAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: APIKey) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Revoke Key\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<DeleteOutlined />}\n              className=\"text-red-400 hover:text-red-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderUserStats = () => (\n    <div className=\"grid grid-cols-4 gap-4 mb-6\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic title=\"Total Users\" value={users.length} valueStyle={{ color: '#3b82f6' }} />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Active Users\"\n          value={users.filter((u) => u.status === 'active').length}\n          valueStyle={{ color: '#22c55e' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Pending Invitations\"\n          value={invitations.filter((i) => i.status === 'pending').length}\n          valueStyle={{ color: '#f59e0b' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"MFA Enabled\"\n          value={users.filter((u) => u.mfaEnabled).length}\n          valueStyle={{ color: '#8b5cf6' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderUsersTab = () => (\n    <div className=\"space-y-4\">\n      {renderUserStats()}\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Users\n          </Title>\n          <Space>\n            <Search\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n            />\n            <Select value={selectedRole} onChange={setSelectedRole} className=\"w-32\">\n              <Option value=\"all\">All Roles</Option>\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n            <Button\n              type=\"primary\"\n              icon={<UserAddOutlined />}\n              onClick={() => setIsInviteModalOpen(true)}\n            >\n              Invite User\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={userColumns}\n          dataSource={filteredUsers}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderAPIKeysTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            API Keys\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsAPIKeyModalOpen(true)}>\n            Create API Key\n          </Button>\n        </div>\n\n        <Table\n          columns={apiKeyColumns}\n          dataSource={apiKeys}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderInvitationsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Pending Invitations\n          </Title>\n          <Button type=\"primary\" icon={<MailOutlined />} onClick={() => setIsInviteModalOpen(true)}>\n            Send Invitation\n          </Button>\n        </div>\n\n        <List\n          dataSource={invitations.filter((i) => i.status === 'pending')}\n          renderItem={(invitation) => (\n            <List.Item\n              actions={[\n                <Button key=\"resend\" type=\"text\" size=\"small\">\n                  Resend\n                </Button>,\n                <Button key=\"revoke\" type=\"text\" size=\"small\" danger>\n                  Revoke\n                </Button>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<Avatar icon={<MailOutlined />} />}\n                title={invitation.email}\n                description={\n                  <div>\n                    <div>Role: {invitation.role}</div>\n                    <div className=\"text-gray-400 text-xs\">\n                      Expires: {new Date(invitation.expiresAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderSSOTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-4\">\n          SSO Providers\n        </Title>\n\n        <div className=\"space-y-3\">\n          {ssoProviders.map((provider) => (\n            <div\n              key={provider.id}\n              className=\"flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img src={provider.metadata.logo} alt={provider.name} className=\"w-8 h-8 rounded\" />\n                <div>\n                  <div className=\"text-white font-medium\">{provider.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{provider.metadata.description}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={provider.enabled}\n                  onChange={(_checked) => {\n                    // Handle SSO provider toggle\n                  }}\n                />\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<SettingOutlined />}\n                  onClick={() => {\n                    // Handle SSO configuration\n                  }}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <TeamOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            User Management\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Manage users, roles, permissions, and authentication\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"user-management-tabs\"\n          items={[\n            {\n              key: 'users',\n              label: (\n                <span>\n                  <UserOutlined className=\"mr-1\" />\n                  Users\n                  <Badge count={users.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderUsersTab(),\n            },\n            {\n              key: 'apikeys',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  API Keys\n                  <Badge count={apiKeys.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAPIKeysTab(),\n            },\n            {\n              key: 'invitations',\n              label: (\n                <span>\n                  <MailOutlined className=\"mr-1\" />\n                  Invitations\n                  <Badge\n                    count={invitations.filter((i) => i.status === 'pending').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderInvitationsTab(),\n            },\n            {\n              key: 'sso',\n              label: (\n                <span>\n                  <LockOutlined className=\"mr-1\" />\n                  SSO\n                  <Badge\n                    count={ssoProviders.filter((p) => p.enabled).length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderSSOTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* User Edit Modal */}\n      <Modal\n        title=\"Edit User\"\n        open={isUserModalOpen}\n        onCancel={() => setIsUserModalOpen(false)}\n        onOk={() => setIsUserModalOpen(false)}\n        width={600}\n      >\n        {selectedUser && (\n          <Form layout=\"vertical\">\n            <Form.Item label=\"Name\">\n              <Input value={selectedUser.name} />\n            </Form.Item>\n            <Form.Item label=\"Email\">\n              <Input value={selectedUser.email} />\n            </Form.Item>\n            <Form.Item label=\"Role\">\n              <Select value={selectedUser.role.id}>\n                {roles.map((role) => (\n                  <Option key={role.id} value={role.id}>\n                    {role.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Status\">\n              <Select value={selectedUser.status}>\n                <Option value=\"active\">Active</Option>\n                <Option value=\"inactive\">Inactive</Option>\n                <Option value=\"suspended\">Suspended</Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        )}\n      </Modal>\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={isInviteModalOpen}\n        onCancel={() => setIsInviteModalOpen(false)}\n        onOk={() => setIsInviteModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Email\" required>\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n          <Form.Item label=\"Role\" required>\n            <Select placeholder=\"Select role\">\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Message\">\n            <Input.TextArea placeholder=\"Welcome message (optional)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create API Key Modal */}\n      <Modal\n        title=\"Create API Key\"\n        open={isAPIKeyModalOpen}\n        onCancel={() => setIsAPIKeyModalOpen(false)}\n        onOk={() => setIsAPIKeyModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"API Key Name\" />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Description (optional)\" rows={2}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx",
        "start": 467,
        "end": 971,
        "startLoc": {
          "line": 467,
          "column": 5,
          "position": 3428
        },
        "endLoc": {
          "line": 971,
          "column": 2,
          "position": 7465
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx",
        "start": 470,
        "end": 974,
        "startLoc": {
          "line": 470,
          "column": 5,
          "position": 3467
        },
        "endLoc": {
          "line": 974,
          "column": 2,
          "position": 7504
        }
      }
    },
    {
      "format": "tsx",
      "lines": 995,
      "fragment": "/**\n * User Management Panel\n *\n * Comprehensive user management interface providing:\n * - User listing and search\n * - Role assignment and permissions\n * - User invitation system\n * - MFA management\n * - API key management\n * - SSO configuration\n */\n\nimport {\n  CheckCircleOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  EyeOutlined,\n  KeyOutlined,\n  LockOutlined,\n  MailOutlined,\n  MoreOutlined,\n  SettingOutlined,\n  TeamOutlined,\n  UnlockOutlined,\n  UserAddOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Dropdown,\n  Form,\n  Input,\n  List,\n  Modal,\n  Select,\n  Space,\n  Statistic,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\n// import { advancedAuthService } from \"@/core/services/advancedAuthService\";\nimport type {\n  APIKey,\n  SSOProvider,\n  User,\n  UserInvitation,\n  UserRole,\n} from '@/core/types/authentication';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { Option } = Select;\n\ninterface UserManagementPanelProps {\n  className?: string;\n}\n\nconst UserManagementPanel: React.FC<UserManagementPanelProps> = ({ className }) => {\n  const [activeTab, setActiveTab] = useState('users');\n  const [users, setUsers] = useState<User[]>([]);\n  const [roles, setRoles] = useState<UserRole[]>([]);\n  const [apiKeys, setApiKeys] = useState<APIKey[]>([]);\n  const [invitations, setInvitations] = useState<UserInvitation[]>([]);\n  const [ssoProviders, setSSOProviders] = useState<SSOProvider[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState<string>('all');\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\n  const [isAPIKeyModalOpen, setIsAPIKeyModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load data on component mount\n  useEffect(() => {\n    loadUsers();\n    loadRoles();\n    loadAPIKeys();\n    loadInvitations();\n    loadSSOProviders();\n  }, [loadAPIKeys, loadInvitations, loadRoles, loadSSOProviders, loadUsers]);\n\n  const loadUsers = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // Simulate API call - in production, this would fetch from backend\n      const mockUsers: User[] = [\n        {\n          id: 'user_1',\n          email: 'admin@reporunner.com',\n          name: 'Admin User',\n          role: {\n            id: 'admin',\n            name: 'Administrator',\n            description: 'System administration',\n            level: 8,\n            permissions: [],\n            isSystem: true,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'active',\n          createdAt: Date.now(),\n          lastLoginAt: Date.now() - 3600000,\n          mfaEnabled: true,\n          preferences: {\n            theme: 'dark',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: true,\n              push: false,\n              inApp: true,\n              workflows: true,\n              executions: true,\n              security: true,\n            },\n            dashboard: {\n              layout: 'grid',\n              widgets: ['workflows', 'executions', 'recent'],\n              refreshInterval: 30000,\n            },\n            editor: {\n              autoSave: true,\n              autoComplete: true,\n              syntaxHighlighting: true,\n              wordWrap: true,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n        {\n          id: 'user_2',\n          email: 'editor@reporunner.com',\n          name: 'Editor User',\n          role: {\n            id: 'editor',\n            name: 'Editor',\n            description: 'Create and edit workflows',\n            level: 4,\n            permissions: [],\n            isSystem: false,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'active',\n          createdAt: Date.now() - 86400000,\n          lastLoginAt: Date.now() - 7200000,\n          mfaEnabled: false,\n          preferences: {\n            theme: 'light',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: true,\n              push: false,\n              inApp: true,\n              workflows: true,\n              executions: true,\n              security: true,\n            },\n            dashboard: {\n              layout: 'list',\n              widgets: ['workflows', 'executions'],\n              refreshInterval: 60000,\n            },\n            editor: {\n              autoSave: true,\n              autoComplete: true,\n              syntaxHighlighting: true,\n              wordWrap: false,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n        {\n          id: 'user_3',\n          email: 'viewer@reporunner.com',\n          name: 'Viewer User',\n          role: {\n            id: 'viewer',\n            name: 'Viewer',\n            description: 'View-only access',\n            level: 2,\n            permissions: [],\n            isSystem: true,\n            createdAt: Date.now(),\n            updatedAt: Date.now(),\n          },\n          status: 'pending',\n          createdAt: Date.now() - 172800000,\n          mfaEnabled: false,\n          preferences: {\n            theme: 'dark',\n            language: 'en',\n            timezone: 'UTC',\n            notifications: {\n              email: false,\n              push: false,\n              inApp: true,\n              workflows: false,\n              executions: false,\n              security: true,\n            },\n            dashboard: {\n              layout: 'grid',\n              widgets: ['workflows'],\n              refreshInterval: 300000,\n            },\n            editor: {\n              autoSave: false,\n              autoComplete: false,\n              syntaxHighlighting: true,\n              wordWrap: true,\n            },\n          },\n          permissions: [],\n          projects: [],\n        },\n      ];\n      setUsers(mockUsers);\n    } catch (_error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loadRoles = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockRoles: UserRole[] = [\n        {\n          id: 'owner',\n          name: 'Owner',\n          description: 'Full system access',\n          level: 10,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'admin',\n          name: 'Administrator',\n          description: 'System administration',\n          level: 8,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'manager',\n          name: 'Manager',\n          description: 'Project management',\n          level: 6,\n          permissions: [],\n          isSystem: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'editor',\n          name: 'Editor',\n          description: 'Create and edit workflows',\n          level: 4,\n          permissions: [],\n          isSystem: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n        {\n          id: 'viewer',\n          name: 'Viewer',\n          description: 'View-only access',\n          level: 2,\n          permissions: [],\n          isSystem: true,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        },\n      ];\n      setRoles(mockRoles);\n    } catch (_error) {}\n  }, []);\n\n  const loadAPIKeys = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockAPIKeys: APIKey[] = [\n        {\n          id: 'key_1',\n          name: 'Development API Key',\n          key: 'rr_dev_1234567890abcdef',\n          keyHash: 'hash1',\n          permissions: [],\n          expiresAt: Date.now() + 365 * 24 * 60 * 60 * 1000,\n          lastUsedAt: Date.now() - 3600000,\n          createdAt: Date.now() - 86400000,\n          createdBy: 'user_1',\n          status: 'active',\n          metadata: {\n            description: 'API key for development environment',\n          },\n        },\n        {\n          id: 'key_2',\n          name: 'Production API Key',\n          key: 'rr_prod_abcdef1234567890',\n          keyHash: 'hash2',\n          permissions: [],\n          expiresAt: Date.now() + 30 * 24 * 60 * 60 * 1000,\n          lastUsedAt: Date.now() - 1800000,\n          createdAt: Date.now() - 172800000,\n          createdBy: 'user_1',\n          status: 'active',\n          metadata: {\n            description: 'API key for production environment',\n          },\n        },\n      ];\n      setApiKeys(mockAPIKeys);\n    } catch (_error) {}\n  }, []);\n\n  const loadInvitations = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockInvitations: UserInvitation[] = [\n        {\n          id: 'invite_1',\n          email: 'newuser@example.com',\n          role: 'editor',\n          permissions: [],\n          projects: [],\n          invitedBy: 'user_1',\n          invitedAt: Date.now() - 86400000,\n          expiresAt: Date.now() + 6 * 24 * 60 * 60 * 1000,\n          status: 'pending',\n          token: 'token123',\n          message: 'Welcome to Reporunner!',\n        },\n      ];\n      setInvitations(mockInvitations);\n    } catch (_error) {}\n  }, []);\n\n  const loadSSOProviders = useCallback(async () => {\n    try {\n      // Simulate API call\n      const mockProviders: SSOProvider[] = [\n        {\n          id: 'google',\n          name: 'Google',\n          type: 'oauth2',\n          enabled: true,\n          configuration: {\n            issuer: 'https://accounts.google.com',\n            clientId: 'google-client-id',\n            redirectUri: 'http://localhost:3000/auth/callback/google',\n            scopes: ['openid', 'email', 'profile'],\n            endpoints: {\n              authorization: 'https://accounts.google.com/o/oauth2/v2/auth',\n              token: 'https://oauth2.googleapis.com/token',\n              userInfo: 'https://www.googleapis.com/oauth2/v2/userinfo',\n            },\n            attributes: {\n              email: 'email',\n              name: 'name',\n            },\n          },\n          metadata: {\n            logo: 'https://developers.google.com/identity/images/g-logo.png',\n            description: 'Sign in with Google',\n          },\n        },\n        {\n          id: 'microsoft',\n          name: 'Microsoft',\n          type: 'oauth2',\n          enabled: false,\n          configuration: {\n            issuer: 'https://login.microsoftonline.com/common',\n            clientId: 'microsoft-client-id',\n            redirectUri: 'http://localhost:3000/auth/callback/microsoft',\n            scopes: ['openid', 'email', 'profile'],\n            endpoints: {\n              authorization: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n              token: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n              userInfo: 'https://graph.microsoft.com/v1.0/me',\n            },\n            attributes: {\n              email: 'mail',\n              name: 'displayName',\n            },\n          },\n          metadata: {\n            logo: 'https://img.icons8.com/color/48/000000/microsoft.png',\n            description: 'Sign in with Microsoft',\n          },\n        },\n      ];\n      setSSOProviders(mockProviders);\n    } catch (_error) {}\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'green';\n      case 'inactive':\n        return 'gray';\n      case 'pending':\n        return 'orange';\n      case 'suspended':\n        return 'red';\n      default:\n        return 'default';\n    }\n  };\n\n  const getRoleColor = (roleId: string) => {\n    switch (roleId) {\n      case 'owner':\n        return 'red';\n      case 'admin':\n        return 'purple';\n      case 'manager':\n        return 'blue';\n      case 'editor':\n        return 'green';\n      case 'viewer':\n        return 'gray';\n      default:\n        return 'default';\n    }\n  };\n\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch =\n      !searchTerm ||\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesRole = selectedRole === 'all' || user.role.id === selectedRole;\n\n    return matchesSearch && matchesRole;\n  });\n\n  const userColumns = [\n    {\n      title: 'User',\n      key: 'user',\n      render: (record: User) => (\n        <div className=\"flex items-center gap-3\">\n          <Avatar size=\"small\" icon={<UserOutlined />} />\n          <div>\n            <div className=\"text-white font-medium\">{record.name}</div>\n            <div className=\"text-gray-400 text-xs\">{record.email}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      key: 'role',\n      render: (record: User) => <Tag color={getRoleColor(record.role.id)}>{record.role.name}</Tag>,\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: User) => <Tag color={getStatusColor(record.status)}>{record.status}</Tag>,\n    },\n    {\n      title: 'MFA',\n      key: 'mfa',\n      render: (record: User) => (\n        <Badge\n          status={record.mfaEnabled ? 'success' : 'default'}\n          text={record.mfaEnabled ? 'Enabled' : 'Disabled'}\n        />\n      ),\n    },\n    {\n      title: 'Last Login',\n      key: 'lastLogin',\n      render: (record: User) => (\n        <div className=\"text-gray-400 text-xs\">\n          {record.lastLoginAt ? new Date(record.lastLoginAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: User) => (\n        <Space size=\"small\">\n          <Tooltip title=\"Edit User\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EditOutlined />}\n              onClick={() => {\n                setSelectedUser(record);\n                setIsUserModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Manage MFA\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<CheckCircleOutlined />}\n              onClick={() => {\n                // Handle MFA management\n              }}\n              className=\"text-purple-400 hover:text-purple-300\"\n            />\n          </Tooltip>\n          <Dropdown\n            menu={{\n              items: [\n                {\n                  key: 'suspend',\n                  label: record.status === 'active' ? 'Suspend User' : 'Activate User',\n                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\n                },\n                {\n                  key: 'delete',\n                  label: 'Delete User',\n                  icon: <DeleteOutlined />,\n                  danger: true,\n                },\n              ],\n            }}\n            trigger={['click']}\n          >\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<MoreOutlined />}\n              className=\"text-gray-400 hover:text-gray-300\"\n            />\n          </Dropdown>\n        </Space>\n      ),\n    },\n  ];\n\n  const apiKeyColumns = [\n    {\n      title: 'Name',\n      key: 'name',\n      render: (_record: APIKey) => (\n        <div>\n          <div className=\"text-white font-medium\">{_record.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.metadata.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Key',\n      key: 'key',\n      render: (_record: APIKey) => (\n        <div className=\"font-mono text-xs text-gray-300\">{_record.key.substring(0, 12)}...</div>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (_record: APIKey) => (\n        <Tag color={_record.status === 'active' ? 'green' : 'red'}>{_record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Expires',\n      key: 'expires',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.expiresAt ? new Date(_record.expiresAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Last Used',\n      key: 'lastUsed',\n      render: (_record: APIKey) => (\n        <div className=\"text-gray-400 text-xs\">\n          {_record.lastUsedAt ? new Date(_record.lastUsedAt).toLocaleDateString() : 'Never'}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: APIKey) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Revoke Key\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<DeleteOutlined />}\n              className=\"text-red-400 hover:text-red-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderUserStats = () => (\n    <div className=\"grid grid-cols-4 gap-4 mb-6\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic title=\"Total Users\" value={users.length} valueStyle={{ color: '#3b82f6' }} />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Active Users\"\n          value={users.filter((u) => u.status === 'active').length}\n          valueStyle={{ color: '#22c55e' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"Pending Invitations\"\n          value={invitations.filter((i) => i.status === 'pending').length}\n          valueStyle={{ color: '#f59e0b' }}\n        />\n      </Card>\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Statistic\n          title=\"MFA Enabled\"\n          value={users.filter((u) => u.mfaEnabled).length}\n          valueStyle={{ color: '#8b5cf6' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderUsersTab = () => (\n    <div className=\"space-y-4\">\n      {renderUserStats()}\n\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Users\n          </Title>\n          <Space>\n            <Search\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n            />\n            <Select value={selectedRole} onChange={setSelectedRole} className=\"w-32\">\n              <Option value=\"all\">All Roles</Option>\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n            <Button\n              type=\"primary\"\n              icon={<UserAddOutlined />}\n              onClick={() => setIsInviteModalOpen(true)}\n            >\n              Invite User\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={userColumns}\n          dataSource={filteredUsers}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderAPIKeysTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            API Keys\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsAPIKeyModalOpen(true)}>\n            Create API Key\n          </Button>\n        </div>\n\n        <Table\n          columns={apiKeyColumns}\n          dataSource={apiKeys}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderInvitationsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Pending Invitations\n          </Title>\n          <Button type=\"primary\" icon={<MailOutlined />} onClick={() => setIsInviteModalOpen(true)}>\n            Send Invitation\n          </Button>\n        </div>\n\n        <List\n          dataSource={invitations.filter((i) => i.status === 'pending')}\n          renderItem={(invitation) => (\n            <List.Item\n              actions={[\n                <Button key=\"resend\" type=\"text\" size=\"small\">\n                  Resend\n                </Button>,\n                <Button key=\"revoke\" type=\"text\" size=\"small\" danger>\n                  Revoke\n                </Button>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<Avatar icon={<MailOutlined />} />}\n                title={invitation.email}\n                description={\n                  <div>\n                    <div>Role: {invitation.role}</div>\n                    <div className=\"text-gray-400 text-xs\">\n                      Expires: {new Date(invitation.expiresAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderSSOTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <Title level={5} className=\"text-white mb-4\">\n          SSO Providers\n        </Title>\n\n        <div className=\"space-y-3\">\n          {ssoProviders.map((provider) => (\n            <div\n              key={provider.id}\n              className=\"flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img src={provider.metadata.logo} alt={provider.name} className=\"w-8 h-8 rounded\" />\n                <div>\n                  <div className=\"text-white font-medium\">{provider.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{provider.metadata.description}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={provider.enabled}\n                  onChange={(_checked) => {\n                    // Handle SSO provider toggle\n                  }}\n                />\n                <Button\n                  type=\"text\"\n                  size=\"small\"\n                  icon={<SettingOutlined />}\n                  onClick={() => {\n                    // Handle SSO configuration\n                  }}\n                  className=\"text-gray-400 hover:text-gray-300\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <TeamOutlined className=\"text-blue-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            User Management\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Manage users, roles, permissions, and authentication\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"user-management-tabs\"\n          items={[\n            {\n              key: 'users',\n              label: (\n                <span>\n                  <UserOutlined className=\"mr-1\" />\n                  Users\n                  <Badge count={users.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderUsersTab(),\n            },\n            {\n              key: 'apikeys',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  API Keys\n                  <Badge count={apiKeys.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAPIKeysTab(),\n            },\n            {\n              key: 'invitations',\n              label: (\n                <span>\n                  <MailOutlined className=\"mr-1\" />\n                  Invitations\n                  <Badge\n                    count={invitations.filter((i) => i.status === 'pending').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderInvitationsTab(),\n            },\n            {\n              key: 'sso',\n              label: (\n                <span>\n                  <LockOutlined className=\"mr-1\" />\n                  SSO\n                  <Badge\n                    count={ssoProviders.filter((p) => p.enabled).length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderSSOTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* User Edit Modal */}\n      <Modal\n        title=\"Edit User\"\n        open={isUserModalOpen}\n        onCancel={() => setIsUserModalOpen(false)}\n        onOk={() => setIsUserModalOpen(false)}\n        width={600}\n      >\n        {selectedUser && (\n          <Form layout=\"vertical\">\n            <Form.Item label=\"Name\">\n              <Input value={selectedUser.name} />\n            </Form.Item>\n            <Form.Item label=\"Email\">\n              <Input value={selectedUser.email} />\n            </Form.Item>\n            <Form.Item label=\"Role\">\n              <Select value={selectedUser.role.id}>\n                {roles.map((role) => (\n                  <Option key={role.id} value={role.id}>\n                    {role.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Status\">\n              <Select value={selectedUser.status}>\n                <Option value=\"active\">Active</Option>\n                <Option value=\"inactive\">Inactive</Option>\n                <Option value=\"suspended\">Suspended</Option>\n              </Select>\n            </Form.Item>\n          </Form>\n        )}\n      </Modal>\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={isInviteModalOpen}\n        onCancel={() => setIsInviteModalOpen(false)}\n        onOk={() => setIsInviteModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Email\" required>\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n          <Form.Item label=\"Role\" required>\n            <Select placeholder=\"Select role\">\n              {roles.map((role) => (\n                <Option key={role.id} value={role.id}>\n                  {role.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Message\">\n            <Input.TextArea placeholder=\"Welcome message (optional)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create API Key Modal */}\n      <Modal\n        title=\"Create API Key\"\n        open={isAPIKeyModalOpen}\n        onCancel={() => setIsAPIKeyModalOpen(false)}\n        onOk={() => setIsAPIKeyModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"API Key Name\" />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Description (optional)\" rows={2} />\n          </Form.Item>\n          <Form.Item label=\"Expiration\">\n            <Select placeholder=\"Select expiration\">\n              <Option value=\"30\">30 days</Option>\n              <Option value=\"90\">90 days</Option>\n              <Option value=\"365\">1 year</Option>\n              <Option value=\"never\">Never</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Permissions\">\n            <Select mode=\"multiple\" placeholder=\"Select permissions\">\n              <Option value=\"read\">Read</Option>\n              <Option value=\"write\">Write</Option>\n              <Option value=\"execute\">Execute</Option>\n              <Option value=\"manage\">Manage</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default UserManagementPanel;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/UserManagementPanel.tsx",
        "start": 1,
        "end": 995,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 995,
          "column": 2,
          "position": 7698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/UserManagement/usermanagementpanel/UserManagementPanel.tsx",
        "start": 4,
        "end": 998,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 998,
          "column": 2,
          "position": 7737
        }
      }
    },
    {
      "format": "javascript",
      "lines": 707,
      "fragment": "={getSeverityColor(_record.severity)}>{_record.action.type}</Tag>\n        </div>\n      ),\n    },\n    {\n      title: 'Resource',\n      key: 'resource',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.resource.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.resource.type}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (_record: AuditLog) => (\n        <Tag color={getSeverityColor(_record.severity)}>{_record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'IP Address',\n      key: 'ipAddress',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs font-mono\">{_record.ipAddress}</div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: AuditLog) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                // Show audit log details\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const incidentColumns = [\n    {\n      title: 'Title',\n      key: 'title',\n      render: (record: SecurityIncident) => (\n        <div>\n          <div className=\"text-white font-medium\">{record.title}</div>\n          <div className=\"text-gray-400 text-xs\">{record.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (record: SecurityIncident) => (\n        <Tag color={getSeverityColor(record.severity)}>{record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: SecurityIncident) => (\n        <Tag color={getStatusColor(record.status)}>{record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Category',\n      key: 'category',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs capitalize\">{record.category.replace('_', ' ')}</div>\n      ),\n    },\n    {\n      title: 'Created',\n      key: 'createdAt',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs\">\n          {new Date(record.createdAt).toLocaleDateString()}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: SecurityIncident) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedIncident(record);\n                setIsIncidentModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Update Status\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<SettingOutlined />}\n              onClick={() => {\n                // Update incident status\n              }}\n              className=\"text-green-400 hover:text-green-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {/* Security Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Security Score\"\n              value={metrics?.securityScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#22c55e' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Open Incidents\"\n              value={metrics?.openIncidents || 0}\n              valueStyle={{ color: '#ef4444' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Critical Incidents\"\n              value={metrics?.criticalIncidents || 0}\n              valueStyle={{ color: '#dc2626' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Compliance Score\"\n              value={metrics?.complianceScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#3b82f6' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Recent Security Events */}\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Recent Security Events\n          </Title>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<ReloadOutlined />}\n            onClick={loadSecurityData}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </div>\n\n        <Timeline\n          items={auditLogs.slice(0, 5).map((log) => ({\n            color: getSeverityColor(log.severity),\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white text-sm\">{log.action.description}</div>\n                <div className=\"text-gray-400 text-xs\">\n                  {log.userEmail} • {new Date(log.timestamp).toLocaleString()}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Tag color={getSeverityColor(log.severity)}>{log.severity}</Tag>\n                  <Tag>{log.category}</Tag>\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      </Card>\n\n      {/* Security Alerts */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Security Alerts\n            </Title>\n            <div className=\"space-y-3\">\n              {incidents.slice(0, 3).map((incident) => (\n                <Alert\n                  key={incident.id}\n                  message={incident.title}\n                  description={incident.description}\n                  type={incident.severity === 'critical' ? 'error' : 'warning'}\n                  showIcon\n                  className=\"bg-red-900 border-red-600\"\n                />\n              ))}\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Vulnerability Summary\n            </Title>\n            <div className=\"space-y-3\">\n              {vulnerabilityScans.slice(0, 3).map((scan) => (\n                <div\n                  key={scan.id}\n                  className=\"flex items-center justify-between p-2 bg-gray-700 rounded\"\n                >\n                  <div>\n                    <div className=\"text-white text-sm\">{scan.target}</div>\n                    <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-white text-sm\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">findings</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  const renderAuditLogsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Audit Logs\n          </Title>\n          <Space>\n            <Select\n              value={filters.severity}\n              onChange={(value) => setFilters({ ...filters, severity: value })}\n              className=\"w-32\"\n            >\n              <Option value=\"all\">All Severity</Option>\n              <Option value=\"critical\">Critical</Option>\n              <Option value=\"error\">Error</Option>\n              <Option value=\"warning\">Warning</Option>\n              <Option value=\"info\">Info</Option>\n            </Select>\n            <Select\n              value={filters.category}\n              onChange={(value) => setFilters({ ...filters, category: value })}\n              className=\"w-40\"\n            >\n              <Option value=\"all\">All Categories</Option>\n              <Option value=\"authentication\">Authentication</Option>\n              <Option value=\"authorization\">Authorization</Option>\n              <Option value=\"data_access\">Data Access</Option>\n              <Option value=\"security_event\">Security Event</Option>\n            </Select>\n            <RangePicker\n              value={[filters.startDate, filters.endDate]}\n              onChange={(dates) =>\n                setFilters({\n                  ...filters,\n                  startDate: dates?.[0],\n                  endDate: dates?.[1],\n                })\n              }\n              className=\"w-64\"\n            />\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => {\n                // Export audit logs\n              }}\n            >\n              Export\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={auditLogColumns}\n          dataSource={filteredAuditLogs}\n          loading={isLoading}\n          pagination={{ pageSize: 20 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n          scroll={{ x: 'max-content' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderIncidentsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Security Incidents\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AlertOutlined />}\n            onClick={() => setIsIncidentModalOpen(true)}\n          >\n            Create Incident\n          </Button>\n        </div>\n\n        <Table\n          columns={incidentColumns}\n          dataSource={incidents}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderVulnerabilitiesTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Vulnerability Scans\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<SecurityScanOutlined />}\n            onClick={() => setIsScanModalOpen(true)}\n          >\n            Start Scan\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {vulnerabilityScans.map((scan) => (\n            <Card key={scan.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{scan.target}</div>\n                  <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">Total</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-red-400 text-lg font-bold\">{scan.summary.critical}</div>\n                    <div className=\"text-gray-400 text-xs\">Critical</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-orange-400 text-lg font-bold\">{scan.summary.high}</div>\n                    <div className=\"text-gray-400 text-xs\">High</div>\n                  </div>\n                  <Tag color={scan.status === 'completed' ? 'green' : 'orange'}>{scan.status}</Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderComplianceTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Compliance Reports\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AuditOutlined />}\n            onClick={() => {\n              // Generate compliance report\n            }}\n          >\n            Generate Report\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {complianceReports.map((report) => (\n            <Card key={report.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{report.standard} Compliance Report</div>\n                  <div className=\"text-gray-400 text-xs\">\n                    Generated: {new Date(report.generatedAt).toLocaleDateString()}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.score}</div>\n                    <div className=\"text-gray-400 text-xs\">Score</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.findings.length}</div>\n                    <div className=\"text-gray-400 text-xs\">Findings</div>\n                  </div>\n                  <Tag color={report.status === 'completed' ? 'green' : 'orange'}>\n                    {report.status}\n                  </Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderSecretsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Secrets Management\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsSecretModalOpen(true)}>\n            Create Secret\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {secrets.map((secret) => (\n            <Card key={secret.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{secret.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{secret.type}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">\n                      {secret.metadata?.accessCount || 0}\n                    </div>\n                    <div className=\"text-gray-400 text-xs\">Access Count</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{secret.keyVersion}</div>\n                    <div className=\"text-gray-400 text-xs\">Key Version</div>\n                  </div>\n                  <Space>\n                    <Tooltip title=\"Rotate Secret\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<ReloadOutlined />}\n                        className=\"text-blue-400 hover:text-blue-300\"\n                      />\n                    </Tooltip>\n                    <Tooltip title=\"View Details\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<EyeOutlined />}\n                        className=\"text-green-400 hover:text-green-300\"\n                      />\n                    </Tooltip>\n                  </Space>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <CheckCircleOutlined className=\"text-green-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Security Dashboard\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Enterprise security monitoring and compliance management\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"security-dashboard-tabs\"\n          items={[\n            {\n              key: 'overview',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Overview\n                </span>\n              ),\n              children: renderOverviewTab(),\n            },\n            {\n              key: 'audit',\n              label: (\n                <span>\n                  <AuditOutlined className=\"mr-1\" />\n                  Audit Logs\n                  <Badge count={auditLogs.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAuditLogsTab(),\n            },\n            {\n              key: 'incidents',\n              label: (\n                <span>\n                  <AlertOutlined className=\"mr-1\" />\n                  Incidents\n                  <Badge\n                    count={incidents.filter((i) => i.status === 'open').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderIncidentsTab(),\n            },\n            {\n              key: 'vulnerabilities',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Vulnerabilities\n                  <Badge count={vulnerabilityScans.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderVulnerabilitiesTab(),\n            },\n            {\n              key: 'compliance',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Compliance\n                  <Badge count={complianceReports.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderComplianceTab(),\n            },\n            {\n              key: 'secrets',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  Secrets\n                  <Badge count={secrets.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderSecretsTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Incident Details Modal */}\n      <Modal\n        title=\"Security Incident Details\"\n        open={isIncidentModalOpen}\n        onCancel={() => setIsIncidentModalOpen(false)}\n        footer={null}\n        width={800}\n      >\n        {selectedIncident && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Text className=\"text-gray-400\">Title</Text>\n                <div className=\"text-white font-medium\">{selectedIncident.title}</div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Severity</Text>\n                <div>\n                  <Tag color={getSeverityColor(selectedIncident.severity)}>\n                    {selectedIncident.severity}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Status</Text>\n                <div>\n                  <Tag color={getStatusColor(selectedIncident.status)}>\n                    {selectedIncident.status}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Category</Text>\n                <div className=\"text-white\">{selectedIncident.category}</div>\n              </div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Description</Text>\n              <div className=\"text-white\">{selectedIncident.description}</div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Timeline</Text>\n              <Timeline\n                items={selectedIncident.timeline.map((event) => ({\n                  color: 'blue',\n                  children: (\n                    <div className=\"space-y-1\">\n                      <div className=\"text-white text-sm\">{event.description}</div>\n                      <div className=\"text-gray-400 text-xs\">\n                        {new Date(event.timestamp).toLocaleString()} • {event.actor}\n                      </div>\n                    </div>\n                  ),\n                }))}\n              />\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Start Vulnerability Scan Modal */}\n      <Modal\n        title=\"Start Vulnerability Scan\"\n        open={isScanModalOpen}\n        onCancel={() => setIsScanModalOpen(false)}\n        onOk={() => setIsScanModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Scan Type\" required>\n            <Select placeholder=\"Select scan type\">\n              <Option value=\"dependency\">Dependency Scan</Option>\n              <Option value=\"container\">Container Scan</Option>\n              <Option value=\"infrastructure\">Infrastructure Scan</Option>\n              <Option value=\"code\">Code Scan</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Target\" required>\n            <Input placeholder=\"Enter target (URL, path, etc.)\" />\n          </Form.Item>\n          <Form.Item label=\"Options\">\n            <Input.TextArea placeholder=\"Additional scan options (JSON)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create Secret Modal */}\n      <Modal\n        title=\"Create Secret\"\n        open={isSecretModalOpen}\n        onCancel={() => setIsSecretModalOpen(false)}\n        onOk={() => setIsSecretModalOpen(false)}\n        width={600}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"Secret name\" />\n          </Form.Item>\n          <Form.Item label=\"Type\" required>\n            <Select placeholder=\"Select secret type\">\n              <Option value=\"api_key\">API Key</Option>\n              <Option value=\"password\">Password</Option>\n              <Option value=\"certificate\">Certificate</Option>\n              <Option value=\"token\">Token</Option>\n              <Option value=\"database_credential\">Database Credential</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Value\" required>\n            <Input.TextArea placeholder=\"Secret value\" rows={3} />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Secret description\" rows={2}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx",
        "start": 186,
        "end": 892,
        "startLoc": {
          "line": 186,
          "column": 6,
          "position": 1547
        },
        "endLoc": {
          "line": 892,
          "column": 2,
          "position": 7525
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx",
        "start": 189,
        "end": 895,
        "startLoc": {
          "line": 189,
          "column": 6,
          "position": 1586
        },
        "endLoc": {
          "line": 895,
          "column": 2,
          "position": 7564
        }
      }
    },
    {
      "format": "tsx",
      "lines": 908,
      "fragment": "/**\n * Security Dashboard Component\n *\n * Comprehensive security monitoring interface providing:\n * - Real-time security metrics and alerts\n * - Audit log visualization and filtering\n * - Vulnerability scan results and management\n * - Security incident tracking and response\n * - Compliance reporting and monitoring\n * - Secrets management and rotation\n */\n\nimport {\n  AlertOutlined,\n  AuditOutlined,\n  BugOutlined,\n  CheckCircleOutlined,\n  DownloadOutlined,\n  EyeOutlined,\n  KeyOutlined,\n  ReloadOutlined,\n  SecurityScanOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { enterpriseSecurityService } from '@/core/services/enterpriseSecurityService';\nimport type {\n  AuditCategory,\n  AuditLog,\n  AuditSeverity,\n  ComplianceReport,\n  SecretManager,\n  SecurityIncident,\n  SecurityMetrics,\n  VulnerabilityScan,\n} from '@/core/types/security';\nimport { cn } from '@/design-system/utils';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\ninterface SecurityDashboardProps {\n  className?: string;\n}\n\nconst SecurityDashboard: React.FC<SecurityDashboardProps> = ({ className }) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [metrics, setMetrics] = useState<SecurityMetrics | null>(null);\n  const [auditLogs, setAuditLogs] = useState<AuditLog[]>([]);\n  const [incidents, setIncidents] = useState<SecurityIncident[]>([]);\n  const [vulnerabilityScans, setVulnerabilityScans] = useState<VulnerabilityScan[]>([]);\n  const [complianceReports, setComplianceReports] = useState<ComplianceReport[]>([]);\n  const [secrets, setSecrets] = useState<SecretManager[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedIncident, setSelectedIncident] = useState<SecurityIncident | null>(null);\n  const [isIncidentModalOpen, setIsIncidentModalOpen] = useState(false);\n  const [isScanModalOpen, setIsScanModalOpen] = useState(false);\n  const [isSecretModalOpen, setIsSecretModalOpen] = useState(false);\n  const [filters, setFilters] = useState({\n    severity: 'all' as AuditSeverity | 'all',\n    category: 'all' as AuditCategory | 'all',\n    startDate: null as any,\n    endDate: null as any,\n  });\n\n  // Load data on component mount\n  useEffect(() => {\n    loadSecurityData();\n  }, [loadSecurityData]);\n\n  const loadSecurityData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const [metricsData, auditLogsData, incidentsData, scansData, reportsData, secretsData] =\n        await Promise.all([\n          enterpriseSecurityService.getSecurityMetrics(),\n          enterpriseSecurityService.getAuditLogs({ limit: 100 }),\n          Promise.resolve([]), // getSecurityIncidents - method doesn't exist yet\n          enterpriseSecurityService.getVulnerabilityScans(),\n          Promise.resolve([]), // getComplianceReports - method doesn't exist yet\n          Promise.resolve([]), // getSecrets - method doesn't exist yet\n        ]);\n\n      setMetrics(metricsData);\n      setAuditLogs(auditLogsData);\n      setIncidents(incidentsData as SecurityIncident[]);\n      setVulnerabilityScans(scansData);\n      setComplianceReports(reportsData as ComplianceReport[]);\n      setSecrets(secretsData as SecretManager[]);\n    } catch (_error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'yellow';\n      case 'low':\n        return 'green';\n      case 'info':\n        return 'blue';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'red';\n      case 'investigating':\n        return 'orange';\n      case 'contained':\n        return 'blue';\n      case 'resolved':\n        return 'green';\n      case 'closed':\n        return 'gray';\n      default:\n        return 'default';\n    }\n  };\n\n  const filteredAuditLogs = auditLogs.filter((log) => {\n    if (filters.severity !== 'all' && log.severity !== filters.severity) return false;\n    if (filters.category !== 'all' && log.category !== filters.category) return false;\n    if (filters.startDate && log.timestamp < filters.startDate.valueOf()) return false;\n    if (filters.endDate && log.timestamp > filters.endDate.valueOf()) return false;\n    return true;\n  });\n\n  const auditLogColumns = [\n    {\n      title: 'Timestamp',\n      key: 'timestamp',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs\">{new Date(_record.timestamp).toLocaleString()}</div>\n      ),\n      sorter: (a: AuditLog, b: AuditLog) => a.timestamp - b.timestamp,\n    },\n    {\n      title: 'User',\n      key: 'user',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.userEmail}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.userId}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.action.description}</div>\n          <Tag color={getSeverityColor(_record.severity)}>{_record.action.type}</Tag>\n        </div>\n      ),\n    },\n    {\n      title: 'Resource',\n      key: 'resource',\n      render: (_record: AuditLog) => (\n        <div>\n          <div className=\"text-white text-sm\">{_record.resource.name}</div>\n          <div className=\"text-gray-400 text-xs\">{_record.resource.type}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (_record: AuditLog) => (\n        <Tag color={getSeverityColor(_record.severity)}>{_record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'IP Address',\n      key: 'ipAddress',\n      render: (_record: AuditLog) => (\n        <div className=\"text-gray-400 text-xs font-mono\">{_record.ipAddress}</div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_record: AuditLog) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                // Show audit log details\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const incidentColumns = [\n    {\n      title: 'Title',\n      key: 'title',\n      render: (record: SecurityIncident) => (\n        <div>\n          <div className=\"text-white font-medium\">{record.title}</div>\n          <div className=\"text-gray-400 text-xs\">{record.description}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Severity',\n      key: 'severity',\n      render: (record: SecurityIncident) => (\n        <Tag color={getSeverityColor(record.severity)}>{record.severity}</Tag>\n      ),\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      render: (record: SecurityIncident) => (\n        <Tag color={getStatusColor(record.status)}>{record.status}</Tag>\n      ),\n    },\n    {\n      title: 'Category',\n      key: 'category',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs capitalize\">{record.category.replace('_', ' ')}</div>\n      ),\n    },\n    {\n      title: 'Created',\n      key: 'createdAt',\n      render: (record: SecurityIncident) => (\n        <div className=\"text-gray-400 text-xs\">\n          {new Date(record.createdAt).toLocaleDateString()}\n        </div>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (record: SecurityIncident) => (\n        <Space size=\"small\">\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<EyeOutlined />}\n              onClick={() => {\n                setSelectedIncident(record);\n                setIsIncidentModalOpen(true);\n              }}\n              className=\"text-blue-400 hover:text-blue-300\"\n            />\n          </Tooltip>\n          <Tooltip title=\"Update Status\">\n            <Button\n              type=\"text\"\n              size=\"small\"\n              icon={<SettingOutlined />}\n              onClick={() => {\n                // Update incident status\n              }}\n              className=\"text-green-400 hover:text-green-300\"\n            />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {/* Security Metrics */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Security Score\"\n              value={metrics?.securityScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#22c55e' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Open Incidents\"\n              value={metrics?.openIncidents || 0}\n              valueStyle={{ color: '#ef4444' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Critical Incidents\"\n              value={metrics?.criticalIncidents || 0}\n              valueStyle={{ color: '#dc2626' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={6}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Statistic\n              title=\"Compliance Score\"\n              value={metrics?.complianceScore || 0}\n              suffix=\"/100\"\n              valueStyle={{ color: '#3b82f6' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Recent Security Events */}\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Recent Security Events\n          </Title>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<ReloadOutlined />}\n            onClick={loadSecurityData}\n            className=\"text-gray-400 hover:text-gray-300\"\n          />\n        </div>\n\n        <Timeline\n          items={auditLogs.slice(0, 5).map((log) => ({\n            color: getSeverityColor(log.severity),\n            children: (\n              <div className=\"space-y-1\">\n                <div className=\"text-white text-sm\">{log.action.description}</div>\n                <div className=\"text-gray-400 text-xs\">\n                  {log.userEmail} • {new Date(log.timestamp).toLocaleString()}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Tag color={getSeverityColor(log.severity)}>{log.severity}</Tag>\n                  <Tag>{log.category}</Tag>\n                </div>\n              </div>\n            ),\n          }))}\n        />\n      </Card>\n\n      {/* Security Alerts */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Security Alerts\n            </Title>\n            <div className=\"space-y-3\">\n              {incidents.slice(0, 3).map((incident) => (\n                <Alert\n                  key={incident.id}\n                  message={incident.title}\n                  description={incident.description}\n                  type={incident.severity === 'critical' ? 'error' : 'warning'}\n                  showIcon\n                  className=\"bg-red-900 border-red-600\"\n                />\n              ))}\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} md={12}>\n          <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n            <Title level={5} className=\"text-white mb-3\">\n              Vulnerability Summary\n            </Title>\n            <div className=\"space-y-3\">\n              {vulnerabilityScans.slice(0, 3).map((scan) => (\n                <div\n                  key={scan.id}\n                  className=\"flex items-center justify-between p-2 bg-gray-700 rounded\"\n                >\n                  <div>\n                    <div className=\"text-white text-sm\">{scan.target}</div>\n                    <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-white text-sm\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">findings</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n\n  const renderAuditLogsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Audit Logs\n          </Title>\n          <Space>\n            <Select\n              value={filters.severity}\n              onChange={(value) => setFilters({ ...filters, severity: value })}\n              className=\"w-32\"\n            >\n              <Option value=\"all\">All Severity</Option>\n              <Option value=\"critical\">Critical</Option>\n              <Option value=\"error\">Error</Option>\n              <Option value=\"warning\">Warning</Option>\n              <Option value=\"info\">Info</Option>\n            </Select>\n            <Select\n              value={filters.category}\n              onChange={(value) => setFilters({ ...filters, category: value })}\n              className=\"w-40\"\n            >\n              <Option value=\"all\">All Categories</Option>\n              <Option value=\"authentication\">Authentication</Option>\n              <Option value=\"authorization\">Authorization</Option>\n              <Option value=\"data_access\">Data Access</Option>\n              <Option value=\"security_event\">Security Event</Option>\n            </Select>\n            <RangePicker\n              value={[filters.startDate, filters.endDate]}\n              onChange={(dates) =>\n                setFilters({\n                  ...filters,\n                  startDate: dates?.[0],\n                  endDate: dates?.[1],\n                })\n              }\n              className=\"w-64\"\n            />\n            <Button\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              onClick={() => {\n                // Export audit logs\n              }}\n            >\n              Export\n            </Button>\n          </Space>\n        </div>\n\n        <Table\n          columns={auditLogColumns}\n          dataSource={filteredAuditLogs}\n          loading={isLoading}\n          pagination={{ pageSize: 20 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n          scroll={{ x: 'max-content' }}\n        />\n      </Card>\n    </div>\n  );\n\n  const renderIncidentsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Security Incidents\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AlertOutlined />}\n            onClick={() => setIsIncidentModalOpen(true)}\n          >\n            Create Incident\n          </Button>\n        </div>\n\n        <Table\n          columns={incidentColumns}\n          dataSource={incidents}\n          loading={isLoading}\n          pagination={{ pageSize: 10 }}\n          size=\"small\"\n          className=\"bg-transparent\"\n          rowKey=\"id\"\n        />\n      </Card>\n    </div>\n  );\n\n  const renderVulnerabilitiesTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Vulnerability Scans\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<SecurityScanOutlined />}\n            onClick={() => setIsScanModalOpen(true)}\n          >\n            Start Scan\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {vulnerabilityScans.map((scan) => (\n            <Card key={scan.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{scan.target}</div>\n                  <div className=\"text-gray-400 text-xs\">{scan.scanType}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{scan.summary.total}</div>\n                    <div className=\"text-gray-400 text-xs\">Total</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-red-400 text-lg font-bold\">{scan.summary.critical}</div>\n                    <div className=\"text-gray-400 text-xs\">Critical</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-orange-400 text-lg font-bold\">{scan.summary.high}</div>\n                    <div className=\"text-gray-400 text-xs\">High</div>\n                  </div>\n                  <Tag color={scan.status === 'completed' ? 'green' : 'orange'}>{scan.status}</Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderComplianceTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Compliance Reports\n          </Title>\n          <Button\n            type=\"primary\"\n            icon={<AuditOutlined />}\n            onClick={() => {\n              // Generate compliance report\n            }}\n          >\n            Generate Report\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {complianceReports.map((report) => (\n            <Card key={report.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{report.standard} Compliance Report</div>\n                  <div className=\"text-gray-400 text-xs\">\n                    Generated: {new Date(report.generatedAt).toLocaleDateString()}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.score}</div>\n                    <div className=\"text-gray-400 text-xs\">Score</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{report.findings.length}</div>\n                    <div className=\"text-gray-400 text-xs\">Findings</div>\n                  </div>\n                  <Tag color={report.status === 'completed' ? 'green' : 'orange'}>\n                    {report.status}\n                  </Tag>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderSecretsTab = () => (\n    <div className=\"space-y-4\">\n      <Card size=\"small\" className=\"bg-gray-800 border-gray-600\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Title level={5} className=\"text-white mb-0\">\n            Secrets Management\n          </Title>\n          <Button type=\"primary\" icon={<KeyOutlined />} onClick={() => setIsSecretModalOpen(true)}>\n            Create Secret\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {secrets.map((secret) => (\n            <Card key={secret.id} size=\"small\" className=\"bg-gray-700 border-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-white font-medium\">{secret.name}</div>\n                  <div className=\"text-gray-400 text-xs\">{secret.type}</div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">\n                      {secret.metadata?.accessCount || 0}\n                    </div>\n                    <div className=\"text-gray-400 text-xs\">Access Count</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-white text-lg font-bold\">{secret.keyVersion}</div>\n                    <div className=\"text-gray-400 text-xs\">Key Version</div>\n                  </div>\n                  <Space>\n                    <Tooltip title=\"Rotate Secret\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<ReloadOutlined />}\n                        className=\"text-blue-400 hover:text-blue-300\"\n                      />\n                    </Tooltip>\n                    <Tooltip title=\"View Details\">\n                      <Button\n                        type=\"text\"\n                        size=\"small\"\n                        icon={<EyeOutlined />}\n                        className=\"text-green-400 hover:text-green-300\"\n                      />\n                    </Tooltip>\n                  </Space>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className={cn('h-full bg-gray-900', className)}>\n      <div className=\"p-4 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <CheckCircleOutlined className=\"text-green-400 text-lg\" />\n          <Title level={4} className=\"text-white mb-0\">\n            Security Dashboard\n          </Title>\n        </div>\n        <Text className=\"text-gray-400 text-sm\">\n          Enterprise security monitoring and compliance management\n        </Text>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          className=\"security-dashboard-tabs\"\n          items={[\n            {\n              key: 'overview',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Overview\n                </span>\n              ),\n              children: renderOverviewTab(),\n            },\n            {\n              key: 'audit',\n              label: (\n                <span>\n                  <AuditOutlined className=\"mr-1\" />\n                  Audit Logs\n                  <Badge count={auditLogs.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderAuditLogsTab(),\n            },\n            {\n              key: 'incidents',\n              label: (\n                <span>\n                  <AlertOutlined className=\"mr-1\" />\n                  Incidents\n                  <Badge\n                    count={incidents.filter((i) => i.status === 'open').length}\n                    size=\"small\"\n                    className=\"ml-2\"\n                  />\n                </span>\n              ),\n              children: renderIncidentsTab(),\n            },\n            {\n              key: 'vulnerabilities',\n              label: (\n                <span>\n                  <BugOutlined className=\"mr-1\" />\n                  Vulnerabilities\n                  <Badge count={vulnerabilityScans.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderVulnerabilitiesTab(),\n            },\n            {\n              key: 'compliance',\n              label: (\n                <span>\n                  <CheckCircleOutlined className=\"mr-1\" />\n                  Compliance\n                  <Badge count={complianceReports.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderComplianceTab(),\n            },\n            {\n              key: 'secrets',\n              label: (\n                <span>\n                  <KeyOutlined className=\"mr-1\" />\n                  Secrets\n                  <Badge count={secrets.length} size=\"small\" className=\"ml-2\" />\n                </span>\n              ),\n              children: renderSecretsTab(),\n            },\n          ]}\n        />\n      </div>\n\n      {/* Incident Details Modal */}\n      <Modal\n        title=\"Security Incident Details\"\n        open={isIncidentModalOpen}\n        onCancel={() => setIsIncidentModalOpen(false)}\n        footer={null}\n        width={800}\n      >\n        {selectedIncident && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Text className=\"text-gray-400\">Title</Text>\n                <div className=\"text-white font-medium\">{selectedIncident.title}</div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Severity</Text>\n                <div>\n                  <Tag color={getSeverityColor(selectedIncident.severity)}>\n                    {selectedIncident.severity}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Status</Text>\n                <div>\n                  <Tag color={getStatusColor(selectedIncident.status)}>\n                    {selectedIncident.status}\n                  </Tag>\n                </div>\n              </div>\n              <div>\n                <Text className=\"text-gray-400\">Category</Text>\n                <div className=\"text-white\">{selectedIncident.category}</div>\n              </div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Description</Text>\n              <div className=\"text-white\">{selectedIncident.description}</div>\n            </div>\n\n            <div>\n              <Text className=\"text-gray-400\">Timeline</Text>\n              <Timeline\n                items={selectedIncident.timeline.map((event) => ({\n                  color: 'blue',\n                  children: (\n                    <div className=\"space-y-1\">\n                      <div className=\"text-white text-sm\">{event.description}</div>\n                      <div className=\"text-gray-400 text-xs\">\n                        {new Date(event.timestamp).toLocaleString()} • {event.actor}\n                      </div>\n                    </div>\n                  ),\n                }))}\n              />\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Start Vulnerability Scan Modal */}\n      <Modal\n        title=\"Start Vulnerability Scan\"\n        open={isScanModalOpen}\n        onCancel={() => setIsScanModalOpen(false)}\n        onOk={() => setIsScanModalOpen(false)}\n        width={500}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Scan Type\" required>\n            <Select placeholder=\"Select scan type\">\n              <Option value=\"dependency\">Dependency Scan</Option>\n              <Option value=\"container\">Container Scan</Option>\n              <Option value=\"infrastructure\">Infrastructure Scan</Option>\n              <Option value=\"code\">Code Scan</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Target\" required>\n            <Input placeholder=\"Enter target (URL, path, etc.)\" />\n          </Form.Item>\n          <Form.Item label=\"Options\">\n            <Input.TextArea placeholder=\"Additional scan options (JSON)\" rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Create Secret Modal */}\n      <Modal\n        title=\"Create Secret\"\n        open={isSecretModalOpen}\n        onCancel={() => setIsSecretModalOpen(false)}\n        onOk={() => setIsSecretModalOpen(false)}\n        width={600}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Name\" required>\n            <Input placeholder=\"Secret name\" />\n          </Form.Item>\n          <Form.Item label=\"Type\" required>\n            <Select placeholder=\"Select secret type\">\n              <Option value=\"api_key\">API Key</Option>\n              <Option value=\"password\">Password</Option>\n              <Option value=\"certificate\">Certificate</Option>\n              <Option value=\"token\">Token</Option>\n              <Option value=\"database_credential\">Database Credential</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Value\" required>\n            <Input.TextArea placeholder=\"Secret value\" rows={3} />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            <Input.TextArea placeholder=\"Secret description\" rows={2} />\n          </Form.Item>\n          <Form.Item label=\"Classification\">\n            <Select placeholder=\"Select data classification\">\n              <Option value=\"public\">Public</Option>\n              <Option value=\"internal\">Internal</Option>\n              <Option value=\"confidential\">Confidential</Option>\n              <Option value=\"restricted\">Restricted</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default SecurityDashboard;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/SecurityDashboard.tsx",
        "start": 1,
        "end": 908,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 908,
          "column": 2,
          "position": 7654
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/SecurityDashboard/securitydashboard/SecurityDashboard.tsx",
        "start": 4,
        "end": 911,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 911,
          "column": 2,
          "position": 7693
        }
      }
    },
    {
      "format": "javascript",
      "lines": 386,
      "fragment": "={role}\n          onChange={(newRole) => handleUpdateUserRole(record.userId, newRole)}\n          disabled={!canManageUsers() || record.role === 'owner'}\n          style={{ width: 120 }}\n        >\n          <Option value=\"owner\">Owner</Option>\n          <Option value=\"admin\">Admin</Option>\n          <Option value=\"member\">Member</Option>\n          <Option value=\"viewer\">Viewer</Option>\n        </Select>\n      ),\n    },\n    {\n      title: 'Joined',\n      dataIndex: 'joinedAt',\n      key: 'joinedAt',\n      render: (date: Date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_: unknown, record: OrganizationMember) => (\n        <Space>\n          {canManageUsers() && record.role !== 'owner' && (\n            <Button\n              type=\"link\"\n              danger\n              size=\"small\"\n              onClick={() => handleRemoveUser(record.userId, record.userId)}\n            >\n              Remove\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'general',\n      label: (\n        <span>\n          <SettingOutlined />\n          General\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Form.Item\n              name=\"name\"\n              label=\"Organization Name\"\n              rules={[{ required: true, message: 'Please enter organization name' }]}\n            >\n              <Input placeholder=\"Enter organization name\" />\n            </Form.Item>\n\n            <Form.Item name=\"description\" label=\"Description\">\n              <TextArea rows={3} placeholder=\"Enter organization description\" />\n            </Form.Item>\n\n            <Form.Item name=\"domain\" label=\"Domain\">\n              <Input placeholder=\"company.com\" addonBefore=\"@\" />\n            </Form.Item>\n\n            <Divider>Workflow Settings</Divider>\n\n            <Form.Item\n              name=\"allowPublicWorkflows\"\n              label=\"Allow Public Workflows\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"requireApprovalForExecution\"\n              label=\"Require Approval for Execution\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"maxWorkflowsPerUser\" label=\"Max Workflows per User\">\n              <InputNumber min={1} max={1000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"maxExecutionsPerMonth\" label=\"Max Executions per Month\">\n              <InputNumber min={100} max={1000000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Space>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  loading={loading || isLoading}\n                  disabled={!canManageOrganization()}\n                >\n                  Save Settings\n                </Button>\n                <Button type=\"link\" onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}>\n                  {showAdvancedSettings ? 'Hide' : 'Show'} Advanced Settings\n                </Button>\n              </Space>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Alert\n              message=\"Security Settings\"\n              description=\"Configure security policies and access controls for your organization.\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 24 }}\n            />\n\n            <Form.Item\n              name=\"enableAuditLogging\"\n              label=\"Enable Audit Logging\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"enableSSOIntegration\"\n              label=\"Enable SSO Integration\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"allowedDomains\" label=\"Allowed Domains\">\n              <Input\n                placeholder=\"domain1.com, domain2.com\"\n                addonAfter={\n                  <Tooltip title=\"Comma-separated list of allowed email domains\">\n                    <GlobalOutlined />\n                  </Tooltip>\n                }\n              />\n            </Form.Item>\n\n            <Form.Item name=\"sessionTimeout\" label=\"Session Timeout (minutes)\">\n              <InputNumber\n                min={5}\n                max={1440}\n                style={{ width: '100%' }}\n                addonAfter={<ClockCircleOutlined />}\n              />\n            </Form.Item>\n\n            <Divider>Password Policy</Divider>\n\n            <Form.Item name=\"passwordMinLength\" label=\"Minimum Length\">\n              <InputNumber min={6} max={32} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <Form.Item\n                name=\"passwordRequireUppercase\"\n                label=\"Require Uppercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireLowercase\"\n                label=\"Require Lowercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireNumbers\"\n                label=\"Require Numbers\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireSymbols\"\n                label=\"Require Symbols\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Space>\n\n            <Form.Item\n              name=\"passwordPreventReuse\"\n              label=\"Prevent Password Reuse (last N passwords)\"\n            >\n              <InputNumber min={0} max={10} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"passwordMaxAge\" label=\"Password Expiry (days)\">\n              <InputNumber min={30} max={365} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={loading || isLoading}\n                disabled={!canManageOrganization()}\n                icon={<CheckOutlined />}\n              >\n                Update Security Settings\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'members',\n      label: (\n        <span>\n          <TeamOutlined />\n          Members ({organization.members.length})\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={() => setInviteModalVisible(true)}\n                disabled={!canManageUsers()}\n                icon={<TeamOutlined />}\n              >\n                Invite User\n              </Button>\n              <Text type=\"secondary\">Manage organization members and their roles</Text>\n            </Space>\n          </div>\n\n          <Table\n            dataSource={organization.members}\n            columns={memberColumns}\n            rowKey=\"userId\"\n            pagination={{ pageSize: 10 }}\n            loading={isLoading}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'audit',\n      label: (\n        <span>\n          <AuditOutlined />\n          Audit & Compliance\n        </span>\n      ),\n      children: (\n        <Card>\n          <Alert\n            message=\"Audit & Compliance\"\n            description=\"Track all actions performed within your organization for security and compliance purposes.\"\n            type=\"info\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            <Card size=\"small\" title=\"Data Retention\">\n              <Paragraph>\n                Audit logs are retained for 90 days. Execution logs are retained for 30 days.\n                Contact support for longer retention periods.\n              </Paragraph>\n            </Card>\n\n            <Card size=\"small\" title=\"Compliance Standards\">\n              <Space wrap>\n                <Tag color=\"green\">SOC 2 Type II</Tag>\n                <Tag color=\"blue\">GDPR Compliant</Tag>\n                <Tag color=\"purple\">ISO 27001</Tag>\n                <Tag color=\"orange\">HIPAA Ready</Tag>\n              </Space>\n            </Card>\n\n            <Card size=\"small\" title=\"Data Export\">\n              <Space>\n                <Button>Export Audit Logs</Button>\n                <Button>Export User Data</Button>\n                <Button>Export Workflow Data</Button>\n              </Space>\n            </Card>\n          </Space>\n        </Card>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <SettingOutlined /> Organization Settings\n        </Title>\n        <Text type=\"secondary\">\n          Manage your organization's settings, security policies, and members\n        </Text>\n      </div>\n\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          closable\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Tabs items={tabs} />\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={inviteModalVisible}\n        onCancel={() => setInviteModalVisible(false)}\n        footer={null}\n        width={500}\n      >\n        <Form form={inviteForm} layout=\"vertical\" onFinish={handleInviteUser}>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              { required: true, message: 'Please enter email address' },\n              { type: 'email', message: 'Please enter a valid email address' },\n            ]}\n          >\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[{ required: true, message: 'Please select a role' }]}\n            initialValue=\"member\"\n          >\n            <Select>\n              <Option value=\"admin\">Admin</Option>\n              <Option value=\"member\">Member</Option>\n              <Option value=\"viewer\">Viewer</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                Send Invitation\n              </Button>\n              <Button onClick={() => setInviteModalVisible(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 172,
        "end": 557,
        "startLoc": {
          "line": 172,
          "column": 6,
          "position": 1336
        },
        "endLoc": {
          "line": 557,
          "column": 2,
          "position": 4040
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 176,
        "end": 561,
        "startLoc": {
          "line": 176,
          "column": 6,
          "position": 1388
        },
        "endLoc": {
          "line": 561,
          "column": 2,
          "position": 4092
        }
      }
    },
    {
      "format": "tsx",
      "lines": 38,
      "fragment": "import {\n  AuditOutlined,\n  CheckOutlined,\n  ClockCircleOutlined,\n  GlobalOutlined,\n  SecurityScanOutlined,\n  SettingOutlined,\n  TeamOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Divider,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  message,\n  Select,\n  Space,\n  Switch,\n  Table,\n  Tabs,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport type {\n  Organization,\n  OrganizationMember,\n  OrganizationSettings,\n} from '@/core/services/rbacService';\nimport { useRBACStore } from '@/core/stores/rbacStore';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 1,
        "end": 38,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 38,
          "column": 6,
          "position": 184
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 1,
        "end": 37,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 37,
          "column": 7,
          "position": 183
        }
      }
    },
    {
      "format": "tsx",
      "lines": 529,
      "fragment": ";\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\ninterface OrganizationSettingsProps {\n  organization: Organization;\n}\n\nexport const OrganizationSettingsComponent: React.FC<OrganizationSettingsProps> = ({\n  organization,\n}) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\n  const [inviteModalVisible, setInviteModalVisible] = useState(false);\n  const [inviteForm] = Form.useForm();\n\n  const {\n    updateOrganization,\n    inviteUser,\n    removeUser,\n    updateUserRole,\n    canManageOrganization,\n    canManageUsers,\n    isLoading,\n    error,\n  } = useRBACStore();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: organization.name,\n      description: organization.description,\n      domain: organization.domain,\n      ...organization.settings,\n    });\n  }, [organization, form]);\n\n  const handleSaveSettings = async (values: any) => {\n    setLoading(true);\n    try {\n      const settings: OrganizationSettings = {\n        allowPublicWorkflows: values.allowPublicWorkflows,\n        requireApprovalForExecution: values.requireApprovalForExecution,\n        maxWorkflowsPerUser: values.maxWorkflowsPerUser,\n        maxExecutionsPerMonth: values.maxExecutionsPerMonth,\n        enableAuditLogging: values.enableAuditLogging,\n        enableSSOIntegration: values.enableSSOIntegration,\n        allowedDomains: values.allowedDomains\n          ?.split(',')\n          .map((d: string) => d.trim())\n          .filter(Boolean),\n        sessionTimeout: values.sessionTimeout,\n        passwordPolicy: {\n          minLength: values.passwordMinLength,\n          requireUppercase: values.passwordRequireUppercase,\n          requireLowercase: values.passwordRequireLowercase,\n          requireNumbers: values.passwordRequireNumbers,\n          requireSymbols: values.passwordRequireSymbols,\n          preventReuse: values.passwordPreventReuse,\n          maxAge: values.passwordMaxAge,\n        },\n      };\n\n      await updateOrganization(organization.id, {\n        name: values.name,\n        description: values.description,\n        domain: values.domain,\n        settings,\n      });\n\n      message.success('Organization settings updated successfully');\n    } catch (error: any) {\n      message.error(error.message || 'Failed to update organization settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInviteUser = async (values: any) => {\n    try {\n      await inviteUser(organization.id, values.email, values.role);\n      message.success(`Invitation sent to ${values.email}`);\n      setInviteModalVisible(false);\n      inviteForm.resetFields();\n    } catch (error: any) {\n      message.error(error.message || 'Failed to send invitation');\n    }\n  };\n\n  const handleRemoveUser = async (userId: string, userName: string) => {\n    Modal.confirm({\n      title: 'Remove User',\n      content: `Are you sure you want to remove ${userName} from this organization?`,\n      okText: 'Remove',\n      okType: 'danger',\n      onOk: async () => {\n        try {\n          await removeUser(organization.id, userId);\n          message.success('User removed successfully');\n        } catch (error: any) {\n          message.error(error.message || 'Failed to remove user');\n        }\n      },\n    });\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: OrganizationMember['role']) => {\n    try {\n      await updateUserRole(organization.id, userId, newRole);\n      message.success('User role updated successfully');\n    } catch (error: any) {\n      message.error(error.message || 'Failed to update user role');\n    }\n  };\n\n  const memberColumns = [\n    {\n      title: 'User',\n      dataIndex: 'userId',\n      key: 'userId',\n      render: (userId: string) => (\n        <div>\n          <Text strong>{userId}</Text>\n          <br />\n          <Text type=\"secondary\">user@example.com</Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Role',\n      dataIndex: 'role',\n      key: 'role',\n      render: (role: OrganizationMember['role'], record: OrganizationMember) => (\n        <Select\n          value={role}\n          onChange={(newRole) => handleUpdateUserRole(record.userId, newRole)}\n          disabled={!canManageUsers() || record.role === 'owner'}\n          style={{ width: 120 }}\n        >\n          <Option value=\"owner\">Owner</Option>\n          <Option value=\"admin\">Admin</Option>\n          <Option value=\"member\">Member</Option>\n          <Option value=\"viewer\">Viewer</Option>\n        </Select>\n      ),\n    },\n    {\n      title: 'Joined',\n      dataIndex: 'joinedAt',\n      key: 'joinedAt',\n      render: (date: Date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_: unknown, record: OrganizationMember) => (\n        <Space>\n          {canManageUsers() && record.role !== 'owner' && (\n            <Button\n              type=\"link\"\n              danger\n              size=\"small\"\n              onClick={() => handleRemoveUser(record.userId, record.userId)}\n            >\n              Remove\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'general',\n      label: (\n        <span>\n          <SettingOutlined />\n          General\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Form.Item\n              name=\"name\"\n              label=\"Organization Name\"\n              rules={[{ required: true, message: 'Please enter organization name' }]}\n            >\n              <Input placeholder=\"Enter organization name\" />\n            </Form.Item>\n\n            <Form.Item name=\"description\" label=\"Description\">\n              <TextArea rows={3} placeholder=\"Enter organization description\" />\n            </Form.Item>\n\n            <Form.Item name=\"domain\" label=\"Domain\">\n              <Input placeholder=\"company.com\" addonBefore=\"@\" />\n            </Form.Item>\n\n            <Divider>Workflow Settings</Divider>\n\n            <Form.Item\n              name=\"allowPublicWorkflows\"\n              label=\"Allow Public Workflows\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"requireApprovalForExecution\"\n              label=\"Require Approval for Execution\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"maxWorkflowsPerUser\" label=\"Max Workflows per User\">\n              <InputNumber min={1} max={1000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"maxExecutionsPerMonth\" label=\"Max Executions per Month\">\n              <InputNumber min={100} max={1000000} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Space>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  loading={loading || isLoading}\n                  disabled={!canManageOrganization()}\n                >\n                  Save Settings\n                </Button>\n                <Button type=\"link\" onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}>\n                  {showAdvancedSettings ? 'Hide' : 'Show'} Advanced Settings\n                </Button>\n              </Space>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n        </span>\n      ),\n      children: (\n        <Card>\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSaveSettings}\n            disabled={!canManageOrganization()}\n          >\n            <Alert\n              message=\"Security Settings\"\n              description=\"Configure security policies and access controls for your organization.\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 24 }}\n            />\n\n            <Form.Item\n              name=\"enableAuditLogging\"\n              label=\"Enable Audit Logging\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item\n              name=\"enableSSOIntegration\"\n              label=\"Enable SSO Integration\"\n              valuePropName=\"checked\"\n            >\n              <Switch />\n            </Form.Item>\n\n            <Form.Item name=\"allowedDomains\" label=\"Allowed Domains\">\n              <Input\n                placeholder=\"domain1.com, domain2.com\"\n                addonAfter={\n                  <Tooltip title=\"Comma-separated list of allowed email domains\">\n                    <GlobalOutlined />\n                  </Tooltip>\n                }\n              />\n            </Form.Item>\n\n            <Form.Item name=\"sessionTimeout\" label=\"Session Timeout (minutes)\">\n              <InputNumber\n                min={5}\n                max={1440}\n                style={{ width: '100%' }}\n                addonAfter={<ClockCircleOutlined />}\n              />\n            </Form.Item>\n\n            <Divider>Password Policy</Divider>\n\n            <Form.Item name=\"passwordMinLength\" label=\"Minimum Length\">\n              <InputNumber min={6} max={32} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <Form.Item\n                name=\"passwordRequireUppercase\"\n                label=\"Require Uppercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireLowercase\"\n                label=\"Require Lowercase Letters\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireNumbers\"\n                label=\"Require Numbers\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRequireSymbols\"\n                label=\"Require Symbols\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Space>\n\n            <Form.Item\n              name=\"passwordPreventReuse\"\n              label=\"Prevent Password Reuse (last N passwords)\"\n            >\n              <InputNumber min={0} max={10} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item name=\"passwordMaxAge\" label=\"Password Expiry (days)\">\n              <InputNumber min={30} max={365} style={{ width: '100%' }} />\n            </Form.Item>\n\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={loading || isLoading}\n                disabled={!canManageOrganization()}\n                icon={<CheckOutlined />}\n              >\n                Update Security Settings\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      ),\n    },\n    {\n      key: 'members',\n      label: (\n        <span>\n          <TeamOutlined />\n          Members ({organization.members.length})\n        </span>\n      ),\n      children: (\n        <Card>\n          <div style={{ marginBottom: 16 }}>\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={() => setInviteModalVisible(true)}\n                disabled={!canManageUsers()}\n                icon={<TeamOutlined />}\n              >\n                Invite User\n              </Button>\n              <Text type=\"secondary\">Manage organization members and their roles</Text>\n            </Space>\n          </div>\n\n          <Table\n            dataSource={organization.members}\n            columns={memberColumns}\n            rowKey=\"userId\"\n            pagination={{ pageSize: 10 }}\n            loading={isLoading}\n          />\n        </Card>\n      ),\n    },\n    {\n      key: 'audit',\n      label: (\n        <span>\n          <AuditOutlined />\n          Audit & Compliance\n        </span>\n      ),\n      children: (\n        <Card>\n          <Alert\n            message=\"Audit & Compliance\"\n            description=\"Track all actions performed within your organization for security and compliance purposes.\"\n            type=\"info\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            <Card size=\"small\" title=\"Data Retention\">\n              <Paragraph>\n                Audit logs are retained for 90 days. Execution logs are retained for 30 days.\n                Contact support for longer retention periods.\n              </Paragraph>\n            </Card>\n\n            <Card size=\"small\" title=\"Compliance Standards\">\n              <Space wrap>\n                <Tag color=\"green\">SOC 2 Type II</Tag>\n                <Tag color=\"blue\">GDPR Compliant</Tag>\n                <Tag color=\"purple\">ISO 27001</Tag>\n                <Tag color=\"orange\">HIPAA Ready</Tag>\n              </Space>\n            </Card>\n\n            <Card size=\"small\" title=\"Data Export\">\n              <Space>\n                <Button>Export Audit Logs</Button>\n                <Button>Export User Data</Button>\n                <Button>Export Workflow Data</Button>\n              </Space>\n            </Card>\n          </Space>\n        </Card>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <SettingOutlined /> Organization Settings\n        </Title>\n        <Text type=\"secondary\">\n          Manage your organization's settings, security policies, and members\n        </Text>\n      </div>\n\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          closable\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Tabs items={tabs} />\n\n      {/* Invite User Modal */}\n      <Modal\n        title=\"Invite User\"\n        open={inviteModalVisible}\n        onCancel={() => setInviteModalVisible(false)}\n        footer={null}\n        width={500}\n      >\n        <Form form={inviteForm} layout=\"vertical\" onFinish={handleInviteUser}>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              { required: true, message: 'Please enter email address' },\n              { type: 'email', message: 'Please enter a valid email address' },\n            ]}\n          >\n            <Input placeholder=\"user@example.com\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[{ required: true, message: 'Please select a role' }]}\n            initialValue=\"member\"\n          >\n            <Select>\n              <Option value=\"admin\">Admin</Option>\n              <Option value=\"member\">Member</Option>\n              <Option value=\"viewer\">Viewer</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item>\n            <Space>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                Send Invitation\n              </Button>\n              <Button onClick={() => setInviteModalVisible(false)}>Cancel</Button>\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/OrganizationSettings.tsx",
        "start": 36,
        "end": 564,
        "startLoc": {
          "line": 36,
          "column": 26,
          "position": 181
        },
        "endLoc": {
          "line": 564,
          "column": 2,
          "position": 4077
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/OrganizationManagement/organizationsettings/OrganizationSettings.tsx",
        "start": 40,
        "end": 568,
        "startLoc": {
          "line": 40,
          "column": 19,
          "position": 233
        },
        "endLoc": {
          "line": 568,
          "column": 2,
          "position": 4129
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": ";\n\n  const handleCreateWorkflow = async () => {\n    const name = prompt('Enter workflow name:');\n    if (name) {\n      if (name.trim().length === 0) {\n        toast.error('Please enter a valid workflow name.');\n        return;\n      }\n\n      try {\n        await createNewWorkflow(name.trim(), navigate);\n        toast.success('Workflow created successfully!');\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create workflow';\n        toast.error(errorMessage);\n      }\n    }\n  };\n\n  const handleLogout = async () => {\n    await",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx",
        "start": 12,
        "end": 33,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 157
        },
        "endLoc": {
          "line": 33,
          "column": 6,
          "position": 336
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Sidebar.tsx",
        "start": 23,
        "end": 44,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 286
        },
        "endLoc": {
          "line": 44,
          "column": 4,
          "position": 465
        }
      }
    },
    {
      "format": "javascript",
      "lines": 291,
      "fragment": "={() => setBillingPeriod('monthly')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Monthly\n            </button>\n            <button\n              onClick={() => setBillingPeriod('annually')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'annually'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Annually\n              <span className=\"ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                Save 20%\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-20\">\n          {plans.map((plan, index) => {\n            const Icon = plan.icon;\n            const price = plan.price[billingPeriod];\n\n            return (\n              <div\n                key={index}\n                className={`relative rounded-2xl border-2 p-8 transition-all duration-300 ${\n                  plan.popular\n                    ? 'border-blue-500 shadow-xl shadow-blue-500/10 scale-105'\n                    : 'border-gray-200 hover:border-gray-300 hover:shadow-lg'\n                }`}\n              >\n                {/* Popular Badge */}\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                {/* Plan Header */}\n                <div className=\"text-center mb-8\">\n                  <div\n                    className={`w-16 h-16 rounded-xl bg-gradient-to-r ${plan.gradient} flex items-center justify-center mx-auto mb-4`}\n                  >\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  {/* Price */}\n                  <div className=\"mb-6\">\n                    {typeof price === 'number' ? (\n                      <>\n                        <div className=\"text-4xl font-bold text-gray-900\">\n                          ${price}\n                          {price > 0 && <span className=\"text-lg text-gray-600\">/user/month</span>}\n                        </div>\n                        {billingPeriod === 'annually' && price > 0 && (\n                          <div className=\"text-sm text-gray-500\">\n                            Billed annually (${price * 12}/user/year)\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900\">{price}</div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Features */}\n                <div className=\"mb-8\">\n                  <ul className=\"space-y-3\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Limitations */}\n                  {plan.limitations.length > 0 && (\n                    <div className=\"mt-6 pt-6 border-t border-gray-100\">\n                      <p className=\"text-sm text-gray-500 mb-2\">Limitations:</p>\n                      <ul className=\"space-y-2\">\n                        {plan.limitations.map((limitation, limitIndex) => (\n                          <li\n                            key={limitIndex}\n                            className=\"text-sm text-gray-500 flex items-start gap-2\"\n                          >\n                            <div className=\"w-1 h-1 rounded-full bg-gray-400 mt-2 flex-shrink-0\" />\n                            {limitation}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => handlePlanClick(plan.name)}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${\n                    plan.popular\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:scale-105 hover:shadow-lg'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {plan.cta}\n                  <ArrowRight className=\"w-5 h-5\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Feature Comparison Table */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">Feature Comparison</h3>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-4 pr-6 font-semibold text-gray-900\">Features</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Community</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">\n                    Professional\n                  </th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Enterprise</th>\n                </tr>\n              </thead>\n              <tbody>\n                {comparisonFeatures.map((category, categoryIndex) => (\n                  <React.Fragment key={categoryIndex}>\n                    <tr>\n                      <td\n                        colSpan={4}\n                        className=\"py-4 pr-6 font-semibold text-gray-800 bg-gray-100/50\"\n                      >\n                        {category.category}\n                      </td>\n                    </tr>\n                    {category.features.map((feature, featureIndex) => (\n                      <tr key={featureIndex} className=\"border-b border-gray-100\">\n                        <td className=\"py-3 pr-6 text-gray-700\">{feature.name}</td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.community === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.community === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.community}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.pro === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.pro === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.pro}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.enterprise === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.enterprise === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.enterprise}</span>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Competitive Pricing Comparison */}\n        <div className=\"mt-16 bg-white rounded-2xl border border-gray-200 p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n            How We Compare on{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            {/* Reporunner */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 border-2 border-blue-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Reporunner</h4>\n                <div className=\"text-2xl font-bold text-blue-600 mb-2\">$49/user</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Self-hosted + Pro features</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Unlimited executions</div>\n                  <div>✅ All enterprise features</div>\n                  <div>✅ No hidden costs</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Zapier */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Zapier</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$19.99+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud only</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited tasks/month</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Expensive at scale</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Make.com */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Make.com</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$9+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, operations-based</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited operations</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Costs add up quickly</div>\n                </div>\n              </div>\n            </div>\n\n            {/* n8n */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">n8n</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$20+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Self-hosting option</div>\n                  <div>❌ Limited AI features</div>\n                  <div>❌ Basic collaboration</div>\n                </div>\n              </div>\n            </div>\n\n            {/* SIM */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">SIM</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">Custom</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Enterprise pricing</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ AI features</div>\n                  <div>❌ Limited self-hosting</div>\n                  <div>❌ Higher enterprise cost</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              💡 <strong>Reporunner advantage:</strong> Enterprise features at mid-market pricing\n              with complete self-hosting control\n            </p>\n          </div>\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">Need a custom solution for your enterprise?</h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              We offer custom deployment options, dedicated support, and tailored features for large\n              organizations with specific requirements.\n            </p>\n            <button\n              onClick={() => navigate('/contact')}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx",
        "start": 210,
        "end": 500,
        "startLoc": {
          "line": 210,
          "column": 8,
          "position": 1316
        },
        "endLoc": {
          "line": 500,
          "column": 2,
          "position": 3879
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx",
        "start": 212,
        "end": 502,
        "startLoc": {
          "line": 212,
          "column": 8,
          "position": 1342
        },
        "endLoc": {
          "line": 502,
          "column": 2,
          "position": 3905
        }
      }
    },
    {
      "format": "tsx",
      "lines": 510,
      "fragment": "/**\n * Pricing Section Component\n *\n * Enterprise-focused pricing tiers with clear value proposition\n * and competitive positioning\n */\n\nimport { ArrowRight, Check, Crown, Star, Zap } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport const PricingSection: React.FC = () => {\n  const navigate = useNavigate();\n  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'annually'>('monthly');\n\n  const handlePlanClick = (planName: string) => {\n    if (planName === 'Community') {\n      navigate('/register');\n    } else if (planName === 'Professional') {\n      navigate('/register');\n    } else if (planName === 'Enterprise') {\n      navigate('/contact');\n    }\n  };\n\n  const plans = [\n    {\n      name: 'Community',\n      description: 'Perfect for getting started',\n      price: { monthly: 0, annually: 0 },\n      icon: Star,\n      gradient: 'from-gray-500 to-gray-600',\n      bgGradient: 'from-gray-50 to-gray-100',\n      features: [\n        'Self-hosted deployment',\n        'Core workflow features',\n        'Basic integrations (50+)',\n        'Community support',\n        'Up to 5 users',\n        'Basic analytics',\n        'Open source license',\n      ],\n      limitations: [\n        'Limited to 1,000 executions/month',\n        'Community support only',\n        'Basic security features',\n      ],\n      cta: 'Get Started Free',\n      popular: false,\n    },\n    {\n      name: 'Professional',\n      description: 'For growing teams and businesses',\n      price: { monthly: 49, annually: 39 },\n      icon: Zap,\n      gradient: 'from-blue-500 to-blue-600',\n      bgGradient: 'from-blue-50 to-blue-100',\n      features: [\n        'Everything in Community',\n        'Advanced integrations (500+)',\n        'AI-powered features',\n        'Real-time collaboration',\n        'Version control',\n        'Premium support',\n        'Up to 50 users',\n        'Advanced analytics',\n        'Custom node development',\n        'API access',\n      ],\n      limitations: ['Up to 10,000 executions/month', 'Standard support hours'],\n      cta: 'Start Free Trial',\n      popular: true,\n    },\n    {\n      name: 'Enterprise',\n      description: 'For large organizations',\n      price: { monthly: 'Custom', annually: 'Custom' },\n      icon: Crown,\n      gradient: 'from-purple-500 to-purple-600',\n      bgGradient: 'from-purple-50 to-purple-100',\n      features: [\n        'Everything in Professional',\n        'SSO/SAML integration',\n        'Advanced security & compliance',\n        'Custom deployment options',\n        'Unlimited users',\n        'Unlimited executions',\n        'Dedicated success manager',\n        '24/7 priority support',\n        'Custom integrations',\n        'On-premise deployment',\n        'SLA guarantees',\n        'Training & onboarding',\n      ],\n      limitations: [],\n      cta: 'Contact Sales',\n      popular: false,\n    },\n  ];\n\n  const comparisonFeatures = [\n    {\n      category: 'Core Features',\n      features: [\n        {\n          name: 'Visual workflow builder',\n          community: true,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Pre-built integrations',\n          community: '50+',\n          pro: '500+',\n          enterprise: 'Unlimited',\n        },\n        {\n          name: 'Real-time collaboration',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Version control',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'AI & Analytics',\n      features: [\n        {\n          name: 'AI-powered automation',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Advanced analytics',\n          community: 'Basic',\n          pro: 'Advanced',\n          enterprise: 'Enterprise',\n        },\n        {\n          name: 'Semantic search',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n        {\n          name: 'Intelligent optimization',\n          community: false,\n          pro: true,\n          enterprise: true,\n        },\n      ],\n    },\n    {\n      category: 'Security & Compliance',\n      features: [\n        {\n          name: 'SSO/SAML integration',\n          community: false,\n          pro: false,\n          enterprise: true,\n        },\n        {\n          name: 'RBAC permissions',\n          community: 'Basic',\n          pro: 'Advanced',\n          enterprise: 'Enterprise',\n        },\n        {\n          name: 'Audit logging',\n          community: false,\n          pro: 'Basic',\n          enterprise: 'Advanced',\n        },\n        {\n          name: 'Compliance certifications',\n          community: false,\n          pro: false,\n          enterprise: true,\n        },\n      ],\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Simple, Transparent{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            Start free, scale as you grow. No hidden fees, no vendor lock-in. Enterprise-grade\n            features at every level.\n          </p>\n\n          {/* Billing Toggle */}\n          <div className=\"inline-flex items-center bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setBillingPeriod('monthly')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Monthly\n            </button>\n            <button\n              onClick={() => setBillingPeriod('annually')}\n              className={`px-4 py-2 rounded-md font-medium transition-all ${\n                billingPeriod === 'annually'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Annually\n              <span className=\"ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                Save 20%\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-20\">\n          {plans.map((plan, index) => {\n            const Icon = plan.icon;\n            const price = plan.price[billingPeriod];\n\n            return (\n              <div\n                key={index}\n                className={`relative rounded-2xl border-2 p-8 transition-all duration-300 ${\n                  plan.popular\n                    ? 'border-blue-500 shadow-xl shadow-blue-500/10 scale-105'\n                    : 'border-gray-200 hover:border-gray-300 hover:shadow-lg'\n                }`}\n              >\n                {/* Popular Badge */}\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n\n                {/* Plan Header */}\n                <div className=\"text-center mb-8\">\n                  <div\n                    className={`w-16 h-16 rounded-xl bg-gradient-to-r ${plan.gradient} flex items-center justify-center mx-auto mb-4`}\n                  >\n                    <Icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-600 mb-4\">{plan.description}</p>\n\n                  {/* Price */}\n                  <div className=\"mb-6\">\n                    {typeof price === 'number' ? (\n                      <>\n                        <div className=\"text-4xl font-bold text-gray-900\">\n                          ${price}\n                          {price > 0 && <span className=\"text-lg text-gray-600\">/user/month</span>}\n                        </div>\n                        {billingPeriod === 'annually' && price > 0 && (\n                          <div className=\"text-sm text-gray-500\">\n                            Billed annually (${price * 12}/user/year)\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"text-4xl font-bold text-gray-900\">{price}</div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Features */}\n                <div className=\"mb-8\">\n                  <ul className=\"space-y-3\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Limitations */}\n                  {plan.limitations.length > 0 && (\n                    <div className=\"mt-6 pt-6 border-t border-gray-100\">\n                      <p className=\"text-sm text-gray-500 mb-2\">Limitations:</p>\n                      <ul className=\"space-y-2\">\n                        {plan.limitations.map((limitation, limitIndex) => (\n                          <li\n                            key={limitIndex}\n                            className=\"text-sm text-gray-500 flex items-start gap-2\"\n                          >\n                            <div className=\"w-1 h-1 rounded-full bg-gray-400 mt-2 flex-shrink-0\" />\n                            {limitation}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n\n                {/* CTA Button */}\n                <button\n                  onClick={() => handlePlanClick(plan.name)}\n                  className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${\n                    plan.popular\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:scale-105 hover:shadow-lg'\n                      : 'bg-gray-100 text-gray-900 hover:bg-gray-200'\n                  }`}\n                >\n                  {plan.cta}\n                  <ArrowRight className=\"w-5 h-5\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Feature Comparison Table */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">Feature Comparison</h3>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-4 pr-6 font-semibold text-gray-900\">Features</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Community</th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">\n                    Professional\n                  </th>\n                  <th className=\"text-center py-4 px-4 font-semibold text-gray-900\">Enterprise</th>\n                </tr>\n              </thead>\n              <tbody>\n                {comparisonFeatures.map((category, categoryIndex) => (\n                  <React.Fragment key={categoryIndex}>\n                    <tr>\n                      <td\n                        colSpan={4}\n                        className=\"py-4 pr-6 font-semibold text-gray-800 bg-gray-100/50\"\n                      >\n                        {category.category}\n                      </td>\n                    </tr>\n                    {category.features.map((feature, featureIndex) => (\n                      <tr key={featureIndex} className=\"border-b border-gray-100\">\n                        <td className=\"py-3 pr-6 text-gray-700\">{feature.name}</td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.community === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.community === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.community}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.pro === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.pro === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.pro}</span>\n                          )}\n                        </td>\n                        <td className=\"text-center py-3 px-4\">\n                          {feature.enterprise === true ? (\n                            <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                          ) : feature.enterprise === false ? (\n                            <span className=\"text-gray-400\">—</span>\n                          ) : (\n                            <span className=\"text-sm text-gray-600\">{feature.enterprise}</span>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Competitive Pricing Comparison */}\n        <div className=\"mt-16 bg-white rounded-2xl border border-gray-200 p-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n            How We Compare on{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Pricing\n            </span>\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            {/* Reporunner */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 border-2 border-blue-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Reporunner</h4>\n                <div className=\"text-2xl font-bold text-blue-600 mb-2\">$49/user</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Self-hosted + Pro features</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Unlimited executions</div>\n                  <div>✅ All enterprise features</div>\n                  <div>✅ No hidden costs</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Zapier */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Zapier</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$19.99+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud only</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited tasks/month</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Expensive at scale</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Make.com */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">Make.com</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$9+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, operations-based</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>❌ Limited operations</div>\n                  <div>❌ No self-hosting</div>\n                  <div>❌ Costs add up quickly</div>\n                </div>\n              </div>\n            </div>\n\n            {/* n8n */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">n8n</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">$20+</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Per month, cloud</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ Self-hosting option</div>\n                  <div>❌ Limited AI features</div>\n                  <div>❌ Basic collaboration</div>\n                </div>\n              </div>\n            </div>\n\n            {/* SIM */}\n            <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n              <div className=\"text-center\">\n                <h4 className=\"font-bold text-gray-900 mb-2\">SIM</h4>\n                <div className=\"text-2xl font-bold text-gray-600 mb-2\">Custom</div>\n                <p className=\"text-sm text-gray-600 mb-4\">Enterprise pricing</p>\n                <div className=\"text-xs text-gray-500\">\n                  <div>✅ AI features</div>\n                  <div>❌ Limited self-hosting</div>\n                  <div>❌ Higher enterprise cost</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              💡 <strong>Reporunner advantage:</strong> Enterprise features at mid-market pricing\n              with complete self-hosting control\n            </p>\n          </div>\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-4\">Need a custom solution for your enterprise?</h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n              We offer custom deployment options, dedicated support, and tailored features for large\n              organizations with specific requirements.\n            </p>\n            <button\n              onClick={() => navigate('/contact')}\n              className=\"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n            >\n              Contact Enterprise Sales\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/PricingSection.tsx",
        "start": 1,
        "end": 510,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 510,
          "column": 2,
          "position": 3926
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/pricingsection/PricingSection.tsx",
        "start": 3,
        "end": 512,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 512,
          "column": 2,
          "position": 3952
        }
      }
    },
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "={index}\n                className=\"bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-lg transition-all hover:-translate-y-1\"\n              >\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Integration Browser */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 shadow-lg overflow-hidden\">\n          {/* Browser Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <h3 className=\"text-2xl font-bold text-gray-900\">Integration Library</h3>\n\n              {/* Search Bar */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search integrations...\"\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-2 mt-6\">\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`px-4 py-2 rounded-lg font-medium transition-all ${\n                    activeCategory === category.id\n                      ? 'bg-blue-600 text-white shadow-lg'\n                      : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  {category.name}\n                  <span className=\"ml-2 text-sm opacity-75\">({category.count})</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Integration Grid */}\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {filteredIntegrations.map((integration, index) => {\n                const Icon = integration.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group relative bg-white border border-gray-200 rounded-xl p-4 hover:shadow-lg hover:border-gray-300 transition-all cursor-pointer\"\n                  >\n                    {/* Popular Badge */}\n                    {integration.popular && (\n                      <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs px-2 py-1 rounded-full font-medium\">\n                        Popular\n                      </div>\n                    )}\n\n                    {/* Icon */}\n                    <div\n                      className={`w-12 h-12 rounded-lg bg-gradient-to-r ${integration.gradient} flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx",
        "start": 156,
        "end": 225,
        "startLoc": {
          "line": 156,
          "column": 4,
          "position": 1074
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1565
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx",
        "start": 157,
        "end": 226,
        "startLoc": {
          "line": 157,
          "column": 4,
          "position": 1087
        },
        "endLoc": {
          "line": 226,
          "column": 2,
          "position": 1578
        }
      }
    },
    {
      "format": "tsx",
      "lines": 284,
      "fragment": "/**\n * Integration Ecosystem Section\n *\n * Showcases the extensive integration library and\n * custom development capabilities\n */\n\nimport {\n  ArrowRight,\n  Calendar,\n  Cloud,\n  Code,\n  Database,\n  FileText,\n  Grid3X3,\n  Mail,\n  Plus,\n  Search,\n  Slack,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\nexport const IntegrationEcosystem: React.FC = () => {\n  const [activeCategory, setActiveCategory] = useState('all');\n\n  const categories = [\n    { id: 'all', name: 'All Integrations', count: 500 },\n    { id: 'communication', name: 'Communication', count: 85 },\n    { id: 'productivity', name: 'Productivity', count: 120 },\n    { id: 'database', name: 'Database', count: 45 },\n    { id: 'ai', name: 'AI & ML', count: 75 },\n    { id: 'commerce', name: 'E-commerce', count: 60 },\n    { id: 'custom', name: 'Custom', count: 'Unlimited' },\n  ];\n\n  const integrations = [\n    {\n      name: 'Gmail',\n      category: 'communication',\n      icon: Mail,\n      description: 'Send, receive, and manage emails',\n      gradient: 'from-red-500 to-red-600',\n      popular: true,\n    },\n    {\n      name: 'Slack',\n      category: 'communication',\n      icon: Slack,\n      description: 'Team messaging and notifications',\n      gradient: 'from-purple-500 to-purple-600',\n      popular: true,\n    },\n    {\n      name: 'PostgreSQL',\n      category: 'database',\n      icon: Database,\n      description: 'Relational database operations',\n      gradient: 'from-blue-500 to-blue-600',\n      popular: false,\n    },\n    {\n      name: 'Google Sheets',\n      category: 'productivity',\n      icon: FileText,\n      description: 'Spreadsheet automation',\n      gradient: 'from-green-500 to-green-600',\n      popular: true,\n    },\n    {\n      name: 'Calendar',\n      category: 'productivity',\n      icon: Calendar,\n      description: 'Schedule and event management',\n      gradient: 'from-indigo-500 to-indigo-600',\n      popular: false,\n    },\n    {\n      name: 'AWS',\n      category: 'cloud',\n      icon: Cloud,\n      description: 'Cloud services integration',\n      gradient: 'from-orange-500 to-orange-600',\n      popular: true,\n    },\n    {\n      name: 'OpenAI',\n      category: 'ai',\n      icon: Zap,\n      description: 'AI and language models',\n      gradient: 'from-purple-500 to-pink-500',\n      popular: true,\n    },\n    {\n      name: 'Custom API',\n      category: 'custom',\n      icon: Code,\n      description: 'Build your own integrations',\n      gradient: 'from-gray-500 to-gray-600',\n      popular: false,\n    },\n  ];\n\n  const filteredIntegrations =\n    activeCategory === 'all'\n      ? integrations\n      : integrations.filter((integration) => integration.category === activeCategory);\n\n  const features = [\n    {\n      icon: Grid3X3,\n      title: '500+ Pre-built Integrations',\n      description: 'Connect to popular services out of the box with minimal configuration.',\n    },\n    {\n      icon: Code,\n      title: 'Custom Node SDK',\n      description: 'Build your own integrations with our comprehensive development kit.',\n    },\n    {\n      icon: Zap,\n      title: 'API-First Architecture',\n      description: 'Every integration is built on our robust API foundation.',\n    },\n    {\n      icon: Plus,\n      title: 'Community Marketplace',\n      description: 'Share and discover integrations built by the community.',\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Connect{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Everything\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Integrate with 500+ services or build your own custom connections. Our ecosystem grows\n            with your needs.\n          </p>\n        </div>\n\n        {/* Feature Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <div\n                key={index}\n                className=\"bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-lg transition-all hover:-translate-y-1\"\n              >\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">{feature.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Integration Browser */}\n        <div className=\"bg-white rounded-2xl border border-gray-200 shadow-lg overflow-hidden\">\n          {/* Browser Header */}\n          <div className=\"bg-gray-50 border-b border-gray-200 p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <h3 className=\"text-2xl font-bold text-gray-900\">Integration Library</h3>\n\n              {/* Search Bar */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search integrations...\"\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-2 mt-6\">\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`px-4 py-2 rounded-lg font-medium transition-all ${\n                    activeCategory === category.id\n                      ? 'bg-blue-600 text-white shadow-lg'\n                      : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  {category.name}\n                  <span className=\"ml-2 text-sm opacity-75\">({category.count})</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Integration Grid */}\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {filteredIntegrations.map((integration, index) => {\n                const Icon = integration.icon;\n                return (\n                  <div\n                    key={index}\n                    className=\"group relative bg-white border border-gray-200 rounded-xl p-4 hover:shadow-lg hover:border-gray-300 transition-all cursor-pointer\"\n                  >\n                    {/* Popular Badge */}\n                    {integration.popular && (\n                      <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs px-2 py-1 rounded-full font-medium\">\n                        Popular\n                      </div>\n                    )}\n\n                    {/* Icon */}\n                    <div\n                      className={`w-12 h-12 rounded-lg bg-gradient-to-r ${integration.gradient} flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}\n                    >\n                      <Icon className=\"w-6 h-6 text-white\" />\n                    </div>\n\n                    {/* Content */}\n                    <h4 className=\"font-semibold text-gray-900 mb-1\">{integration.name}</h4>\n                    <p className=\"text-sm text-gray-600 mb-3\">{integration.description}</p>\n\n                    {/* Install Button */}\n                    <button className=\"w-full bg-gray-50 hover:bg-blue-50 text-gray-700 hover:text-blue-600 py-2 px-3 rounded-lg text-sm font-medium transition-colors group-hover:bg-blue-50 group-hover:text-blue-600\">\n                      Install Integration\n                    </button>\n                  </div>\n                );\n              })}\n\n              {/* Add More Card */}\n              <div className=\"border-2 border-dashed border-gray-300 rounded-xl p-4 flex flex-col items-center justify-center text-center hover:border-blue-400 hover:bg-blue-50 transition-all cursor-pointer\">\n                <div className=\"w-12 h-12 rounded-lg bg-gray-100 flex items-center justify-center mb-3\">\n                  <Plus className=\"w-6 h-6 text-gray-600\" />\n                </div>\n                <h4 className=\"font-semibold text-gray-700 mb-1\">Need Something Else?</h4>\n                <p className=\"text-sm text-gray-500 mb-3\">Build a custom integration</p>\n                <button className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\">\n                  View SDK\n                </button>\n              </div>\n            </div>\n\n            {/* Load More */}\n            <div className=\"text-center mt-8\">\n              <button className=\"inline-flex items-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors\">\n                View All Integrations\n                <ArrowRight className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Custom Integration CTA */}\n        <div className=\"mt-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Don't See What You Need?</h3>\n          <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n            Build custom integrations with our comprehensive SDK, or let our team create one for\n            you. We support any API or service.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n              Explore SDK\n            </button>\n            <button className=\"border-2 border-white text-white px-6 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors\">\n              Request Integration\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/IntegrationEcosystem.tsx",
        "start": 1,
        "end": 284,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 284,
          "column": 2,
          "position": 2037
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/integrationecosystem/IntegrationEcosystem.tsx",
        "start": 2,
        "end": 285,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 285,
          "column": 2,
          "position": 2050
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n      <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n      {/* Animated Background Orbs */}\n      <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse delay-1000\" />\n\n      <div className=\"container mx-auto px-6 relative z-10",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/HeroSection.tsx",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 26,
          "position": 312
        },
        "endLoc": {
          "line": 49,
          "column": 37,
          "position": 380
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Layout.tsx",
        "start": 15,
        "end": 23,
        "startLoc": {
          "line": 15,
          "column": 56,
          "position": 130
        },
        "endLoc": {
          "line": 23,
          "column": 33,
          "position": 198
        }
      }
    },
    {
      "format": "javascript",
      "lines": 173,
      "fragment": "={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200/50'\n          : 'bg-white/80 backdrop-blur-sm'\n      }`}\n    >\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link to=\"/\" className=\"flex items-center gap-3 group\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Reporunner\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {menuItems.map((menu, index) => (\n              <div\n                key={index}\n                className=\"relative group\"\n                onMouseEnter={() => setActiveDropdown(menu.label)}\n                onMouseLeave={() => setActiveDropdown(null)}\n              >\n                <button className=\"flex items-center gap-1 text-gray-700 hover:text-blue-600 font-medium transition-colors py-2\">\n                  {menu.label}\n                  <ChevronDown className=\"w-4 h-4\" />\n                </button>\n\n                {/* Dropdown */}\n                {activeDropdown === menu.label && (\n                  <div className=\"absolute top-full left-0 mt-2 w-80 bg-white rounded-xl shadow-xl border border-gray-200 py-4 z-50\">\n                    <div className=\"px-4 pb-2 mb-2 border-b border-gray-100\">\n                      <h3 className=\"font-semibold text-gray-900\">{menu.label}</h3>\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className=\"flex items-start gap-3 px-4 py-3 hover:bg-gray-50 transition-colors group\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 group-hover:text-blue-600\">\n                              {item.name}\n                            </span>\n                            {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                          </div>\n                          <p className=\"text-sm text-gray-500 mt-1\">{item.description}</p>\n                        </div>\n                        <ArrowRight className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity mt-1\" />\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden lg:flex items-center gap-3\">\n            {isAuthenticated ? (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => navigate('/app/dashboard')}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <User className=\"w-4 h-4\" />\n                  Dashboard\n                </button>\n                <button\n                  onClick={() => navigate('/app/settings')}\n                  className=\"p-2 text-gray-500 hover:text-gray-700 transition-colors\"\n                  title=\"Settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            ) : (\n              <>\n                <button\n                  onClick={handleAuth}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <LogIn className=\"w-4 h-4\" />\n                  Sign In\n                </button>\n                <button\n                  onClick={handleGetStarted}\n                  className=\"flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all hover:scale-105\"\n                >\n                  <Play className=\"w-4 h-4\" />\n                  Get Started\n                </button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"lg:hidden p-2 text-gray-700 hover:text-blue-600 transition-colors\"\n          >\n            {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md\">\n            <div className=\"py-4\">\n              {/* Auth Section */}\n              <div className=\"px-4 py-4 border-b border-gray-200\">\n                {isAuthenticated ? (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => navigate('/app/dashboard')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <User className=\"w-5 h-5\" />\n                      Dashboard\n                    </button>\n                    <button\n                      onClick={() => navigate('/app/settings')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <Settings className=\"w-5 h-5\" />\n                      Settings\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={handleAuth}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <LogIn className=\"w-5 h-5\" />\n                      Sign In\n                    </button>\n                    <button\n                      onClick={handleGetStarted}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all\"\n                    >\n                      <Play className=\"w-5 h-5\" />\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {/* Navigation Menu */}\n              <div className=\"space-y-1 px-4 pt-4\">\n                {menuItems.map((menu, index) => (\n                  <div key={index} className=\"space-y-1\">\n                    <div className=\"px-4 py-2 font-semibold text-gray-900 text-sm uppercase tracking-wide\">\n                      {menu.label}\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className={`block px-4 py-3 rounded-lg transition-colors ${\n                          isActivePage(item.href)\n                            ? 'bg-blue-50 text-blue-600 font-medium'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx",
        "start": 180,
        "end": 352,
        "startLoc": {
          "line": 180,
          "column": 10,
          "position": 1195
        },
        "endLoc": {
          "line": 352,
          "column": 2,
          "position": 2463
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx",
        "start": 187,
        "end": 359,
        "startLoc": {
          "line": 187,
          "column": 10,
          "position": 1286
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2554
        }
      }
    },
    {
      "format": "tsx",
      "lines": 370,
      "fragment": "/**\n * Header Component\n *\n * Main navigation header for public pages\n * Similar to headers used by Zapier, Make, n8n, etc.\n */\n\nimport {\n  ArrowRight,\n  ChevronDown,\n  ExternalLink,\n  LogIn,\n  Menu,\n  Play,\n  Settings,\n  User,\n  X,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuthStore } from '@/core/stores/authStore';\n\nexport const Header: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { isAuthenticated } = useAuthStore();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  // Handle scroll effect\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n    setActiveDropdown(null);\n  }, []);\n\n  const handleAuth = () => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    } else {\n      navigate('/login');\n    }\n  };\n\n  const handleGetStarted = () => {\n    if (isAuthenticated) {\n      navigate('/app/dashboard');\n    } else {\n      navigate('/register');\n    }\n  };\n\n  const menuItems = [\n    {\n      label: 'Product',\n      items: [\n        {\n          name: 'Features',\n          href: '/features',\n          description: 'Comprehensive automation features',\n        },\n        {\n          name: 'Integrations',\n          href: '/integrations',\n          description: '150+ integrations available',\n        },\n        {\n          name: 'Pricing',\n          href: '/pricing',\n          description: 'Transparent pricing plans',\n        },\n        {\n          name: 'Enterprise',\n          href: '/enterprise',\n          description: 'Enterprise-grade solutions',\n        },\n        {\n          name: 'Self-hosted',\n          href: '/self-hosted',\n          description: 'Deploy anywhere',\n        },\n        {\n          name: 'Roadmap',\n          href: '/roadmap',\n          description: 'Product development roadmap',\n        },\n      ],\n    },\n    {\n      label: 'Developers',\n      items: [\n        {\n          name: 'Documentation',\n          href: '/documentation',\n          description: 'Complete guides and tutorials',\n        },\n        {\n          name: 'API Reference',\n          href: '/api-reference',\n          description: 'REST API documentation',\n        },\n        {\n          name: 'Node SDK',\n          href: '/documentation',\n          description: 'Build custom nodes',\n        },\n        {\n          name: 'Examples',\n          href: '/documentation',\n          description: 'Code examples and templates',\n        },\n        {\n          name: 'GitHub',\n          href: 'https://github.com/reporunner/reporunner',\n          description: 'Open source repository',\n          external: true,\n        },\n        {\n          name: 'Community',\n          href: '/contact',\n          description: 'Join our community',\n        },\n      ],\n    },\n    {\n      label: 'Resources',\n      items: [\n        {\n          name: 'Blog',\n          href: '/documentation',\n          description: 'Latest insights and tutorials',\n        },\n        {\n          name: 'Case Studies',\n          href: '/about',\n          description: 'Customer success stories',\n        },\n        {\n          name: 'Help Center',\n          href: '/documentation',\n          description: 'Support documentation',\n        },\n        {\n          name: 'Status',\n          href: 'https://status.reporunner.dev',\n          description: 'System status',\n          external: true,\n        },\n      ],\n    },\n    {\n      label: 'Company',\n      items: [\n        { name: 'About', href: '/about', description: 'Our story and mission' },\n        { name: 'Contact', href: '/contact', description: 'Get in touch' },\n        { name: 'Careers', href: '/about', description: 'Join our team' },\n      ],\n    },\n  ];\n\n  const isActivePage = (href: string) => {\n    if (href === '/' && location.pathname === '/') return true;\n    if (href !== '/' && location.pathname.startsWith(href)) return true;\n    return false;\n  };\n\n  return (\n    <header\n      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? 'bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200/50'\n          : 'bg-white/80 backdrop-blur-sm'\n      }`}\n    >\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link to=\"/\" className=\"flex items-center gap-3 group\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Reporunner\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {menuItems.map((menu, index) => (\n              <div\n                key={index}\n                className=\"relative group\"\n                onMouseEnter={() => setActiveDropdown(menu.label)}\n                onMouseLeave={() => setActiveDropdown(null)}\n              >\n                <button className=\"flex items-center gap-1 text-gray-700 hover:text-blue-600 font-medium transition-colors py-2\">\n                  {menu.label}\n                  <ChevronDown className=\"w-4 h-4\" />\n                </button>\n\n                {/* Dropdown */}\n                {activeDropdown === menu.label && (\n                  <div className=\"absolute top-full left-0 mt-2 w-80 bg-white rounded-xl shadow-xl border border-gray-200 py-4 z-50\">\n                    <div className=\"px-4 pb-2 mb-2 border-b border-gray-100\">\n                      <h3 className=\"font-semibold text-gray-900\">{menu.label}</h3>\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className=\"flex items-start gap-3 px-4 py-3 hover:bg-gray-50 transition-colors group\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-gray-900 group-hover:text-blue-600\">\n                              {item.name}\n                            </span>\n                            {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                          </div>\n                          <p className=\"text-sm text-gray-500 mt-1\">{item.description}</p>\n                        </div>\n                        <ArrowRight className=\"w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity mt-1\" />\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden lg:flex items-center gap-3\">\n            {isAuthenticated ? (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => navigate('/app/dashboard')}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <User className=\"w-4 h-4\" />\n                  Dashboard\n                </button>\n                <button\n                  onClick={() => navigate('/app/settings')}\n                  className=\"p-2 text-gray-500 hover:text-gray-700 transition-colors\"\n                  title=\"Settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            ) : (\n              <>\n                <button\n                  onClick={handleAuth}\n                  className=\"flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors\"\n                >\n                  <LogIn className=\"w-4 h-4\" />\n                  Sign In\n                </button>\n                <button\n                  onClick={handleGetStarted}\n                  className=\"flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all hover:scale-105\"\n                >\n                  <Play className=\"w-4 h-4\" />\n                  Get Started\n                </button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"lg:hidden p-2 text-gray-700 hover:text-blue-600 transition-colors\"\n          >\n            {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md\">\n            <div className=\"py-4\">\n              {/* Auth Section */}\n              <div className=\"px-4 py-4 border-b border-gray-200\">\n                {isAuthenticated ? (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => navigate('/app/dashboard')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <User className=\"w-5 h-5\" />\n                      Dashboard\n                    </button>\n                    <button\n                      onClick={() => navigate('/app/settings')}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <Settings className=\"w-5 h-5\" />\n                      Settings\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={handleAuth}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 text-left text-gray-700 hover:bg-gray-50 rounded-lg transition-colors\"\n                    >\n                      <LogIn className=\"w-5 h-5\" />\n                      Sign In\n                    </button>\n                    <button\n                      onClick={handleGetStarted}\n                      className=\"w-full flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all\"\n                    >\n                      <Play className=\"w-5 h-5\" />\n                      Get Started\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {/* Navigation Menu */}\n              <div className=\"space-y-1 px-4 pt-4\">\n                {menuItems.map((menu, index) => (\n                  <div key={index} className=\"space-y-1\">\n                    <div className=\"px-4 py-2 font-semibold text-gray-900 text-sm uppercase tracking-wide\">\n                      {menu.label}\n                    </div>\n                    {menu.items.map((item, itemIndex) => (\n                      <Link\n                        key={itemIndex}\n                        to={item.href}\n                        target={item.external ? '_blank' : undefined}\n                        rel={item.external ? 'noopener noreferrer' : undefined}\n                        className={`block px-4 py-3 rounded-lg transition-colors ${\n                          isActivePage(item.href)\n                            ? 'bg-blue-50 text-blue-600 font-medium'\n                            : 'text-gray-700 hover:bg-gray-50'\n                        }`}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {item.name}\n                          {item.external && <ExternalLink className=\"w-3 h-3 text-gray-400\" />}\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1\">{item.description}</div>\n                      </Link>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/Header.tsx",
        "start": 1,
        "end": 370,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 370,
          "column": 2,
          "position": 2583
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/header/Header.tsx",
        "start": 8,
        "end": 377,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 377,
          "column": 2,
          "position": 2674
        }
      }
    },
    {
      "format": "javascript",
      "lines": 171,
      "fragment": "={feature.id}\n                    className={`cursor-pointer transition-all duration-300 rounded-xl p-6 border-2 ${\n                      isActive\n                        ? 'border-blue-500 bg-white shadow-lg shadow-blue-500/10'\n                        : 'border-gray-200 bg-white/50 hover:border-gray-300 hover:bg-white'\n                    }`}\n                    onClick={() => setActiveFeature(index)}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      {/* Icon */}\n                      <div\n                        className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-300 ${\n                          isActive\n                            ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'\n                            : 'bg-gray-100 text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3\n                            className={`text-xl font-bold transition-colors ${\n                              isActive ? 'text-blue-600' : 'text-gray-900'\n                            }`}\n                          >\n                            {feature.title}\n                          </h3>\n                          {isActive && (\n                            <div className=\"flex items-center gap-1 text-sm text-blue-600 font-medium\">\n                              <Play className=\"w-4 h-4\" />\n                              Live Demo\n                            </div>\n                          )}\n                        </div>\n\n                        <p className=\"text-sm text-gray-500 mb-3\">{feature.subtitle}</p>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n\n                        {/* Highlights */}\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {feature.highlights.map((highlight, i) => (\n                            <div key={i} className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <div\n                                className={`w-1.5 h-1.5 rounded-full ${\n                                  isActive ? 'bg-blue-500' : 'bg-gray-400'\n                                }`}\n                              />\n                              {highlight}\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Try It Button */}\n                        {isActive && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <button className=\"group flex items-center gap-2 text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                              Try this feature\n                              <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Interactive Demo Area */}\n            <div className=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n              {/* Demo Header */}\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-green-400\" />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-600\">\n                    {currentFeature.title} Demo\n                  </span>\n                  <div className=\"ml-auto flex items-center gap-2 text-xs text-gray-500\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                    Live Demo\n                  </div>\n                </div>\n              </div>\n\n              {/* Demo Content */}\n              <div className=\"relative h-96 bg-gradient-to-br from-slate-50 to-blue-50 p-6\">\n                {/* Render demo elements based on feature type */}\n                {currentFeature.id === 0 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Workflow nodes */}\n                    {currentFeature.demoElements?.map((element, i) => {\n                      if (element.type === 'node') {\n                        return (\n                          <div\n                            key={i}\n                            className={`absolute w-24 h-16 ${element.color} rounded-lg flex items-center justify-center text-white text-xs font-medium shadow-lg transform transition-all duration-1000 hover:scale-110`}\n                            style={{\n                              left: `${element.x}px`,\n                              top: `${element.y}px`,\n                              animationDelay: `${i * 200}ms`,\n                            }}\n                          >\n                            {element.label}\n                          </div>\n                        );\n                      }\n                      return null;\n                    })}\n\n                    {/* Connections */}\n                    <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n                      <defs>\n                        <marker\n                          id=\"arrowhead\"\n                          markerWidth=\"10\"\n                          markerHeight=\"7\"\n                          refX=\"9\"\n                          refY=\"3.5\"\n                          orient=\"auto\"\n                        >\n                          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6366f1\" />\n                        </marker>\n                      </defs>\n                      <path\n                        d=\"M 150 167 Q 200 167 250 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                      />\n                      <path\n                        d=\"M 350 167 Q 400 167 450 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                        style={{ animationDelay: '500ms' }}\n                      />\n                    </svg>\n                  </div>\n                )}\n\n                {/* AI Feature Demo */}\n                {currentFeature.id === 1 && (\n                  <div className=\"relative w-full h-full\">\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"w-32 h-32 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center shadow-xl animate-pulse\">\n                        <Brain className=\"w-16 h-16 text-white\" />\n                      </div>\n                    </div>\n\n                    {/* AI Insights */}\n                    <div className=\"absolute top-12 right-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Zap className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-gray-700\">Performance optimized</span>\n                      </div>\n                    </div>\n\n                    <div\n                      className=\"absolute bottom-12 left-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\"\n                      style={{ animationDelay: '1s' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx",
        "start": 195,
        "end": 365,
        "startLoc": {
          "line": 195,
          "column": 4,
          "position": 1590
        },
        "endLoc": {
          "line": 365,
          "column": 2,
          "position": 2764
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx",
        "start": 196,
        "end": 366,
        "startLoc": {
          "line": 196,
          "column": 4,
          "position": 1603
        },
        "endLoc": {
          "line": 366,
          "column": 2,
          "position": 2777
        }
      }
    },
    {
      "format": "tsx",
      "lines": 460,
      "fragment": "/**\n * Feature Showcase Section\n *\n * Interactive demos of key Reporunner features with modern UI\n * and engaging animations\n */\n\nimport {\n  ArrowRight,\n  BarChart3,\n  Brain,\n  GitBranch,\n  Play,\n  Shield,\n  Users,\n  Workflow,\n  Zap,\n} from 'lucide-react';\nimport type React from 'react';\nimport { useState } from 'react';\n\ntype DemoElement =\n  | { type: 'node'; label: string; x: number; y: number; color: string }\n  | { type: 'connection'; from: number; to: number }\n  | { type: 'user'; name: string; x: number; y: number; color: string }\n  | { type: 'edit'; x: number; y: number; user: string }\n  | { type: 'chart'; x: number; y: number; width: number; height: number }\n  | { type: 'metric'; label: string; x: number; y: number }\n  | { type: 'ai-node'; label: string; x: number; y: number; color: string }\n  | { type: 'insight'; label: string; x: number; y: number; color: string };\n\nexport const FeatureShowcase: React.FC = () => {\n  const [activeFeature, setActiveFeature] = useState(0);\n\n  const features: Array<{\n    id: number;\n    icon: any;\n    title: string;\n    subtitle: string;\n    description: string;\n    image: string;\n    highlights: string[];\n    demoElements?: DemoElement[];\n  }> = [\n    {\n      id: 0,\n      icon: Workflow,\n      title: 'Visual Workflow Builder',\n      subtitle: 'Drag-and-drop simplicity',\n      description:\n        'Create complex automations with our intuitive visual editor. Connect 500+ integrations with simple drag-and-drop operations.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Drag-and-drop interface',\n        '500+ pre-built integrations',\n        'Real-time validation',\n        'Auto-connection suggestions',\n      ],\n      demoElements: [\n        {\n          type: 'node',\n          label: 'Gmail Trigger',\n          x: 100,\n          y: 150,\n          color: 'bg-red-500',\n        },\n        {\n          type: 'node',\n          label: 'AI Processor',\n          x: 300,\n          y: 150,\n          color: 'bg-blue-500',\n        },\n        {\n          type: 'node',\n          label: 'Slack Action',\n          x: 500,\n          y: 150,\n          color: 'bg-green-500',\n        },\n        { type: 'connection', from: 0, to: 1 },\n        { type: 'connection', from: 1, to: 2 },\n      ],\n    },\n    {\n      id: 1,\n      icon: Brain,\n      title: 'AI-Powered Automation',\n      subtitle: 'Intelligent workflows',\n      description:\n        'Leverage AI for smart error recovery, pattern recognition, and optimization suggestions. Your workflows learn and improve over time.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Smart error recovery',\n        'Pattern recognition',\n        'Auto-optimization',\n        'Natural language queries',\n      ],\n      demoElements: [\n        {\n          type: 'ai-node',\n          label: 'AI Agent',\n          x: 250,\n          y: 100,\n          color: 'bg-purple-500',\n        },\n        {\n          type: 'insight',\n          label: 'Optimized execution path',\n          x: 350,\n          y: 50,\n          color: 'text-green-500',\n        },\n        {\n          type: 'insight',\n          label: 'Error pattern detected',\n          x: 150,\n          y: 200,\n          color: 'text-red-500',\n        },\n      ],\n    },\n    {\n      id: 2,\n      icon: Users,\n      title: 'Enterprise Collaboration',\n      subtitle: 'Team workflows',\n      description:\n        'Real-time collaborative editing, version control, and enterprise-grade permissions. Build workflows as a team.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Real-time collaboration',\n        'Version control',\n        'Role-based permissions',\n        'Audit trails',\n      ],\n      demoElements: [\n        { type: 'user', name: 'Alice', x: 100, y: 80, color: 'bg-blue-500' },\n        { type: 'user', name: 'Bob', x: 200, y: 120, color: 'bg-green-500' },\n        { type: 'user', name: 'Carol', x: 300, y: 90, color: 'bg-purple-500' },\n        { type: 'edit', x: 150, y: 200, user: 'Alice' },\n      ],\n    },\n    {\n      id: 3,\n      icon: BarChart3,\n      title: 'Advanced Analytics',\n      subtitle: 'Performance insights',\n      description:\n        'Deep insights into workflow performance, cost optimization, and usage patterns. Make data-driven decisions.',\n      image: '/api/placeholder/600/400',\n      highlights: [\n        'Performance monitoring',\n        'Cost optimization',\n        'Usage analytics',\n        'Custom dashboards',\n      ],\n      demoElements: [\n        { type: 'chart', x: 150, y: 100, width: 300, height: 150 },\n        { type: 'metric', label: '99.9% Uptime', x: 100, y: 50 },\n        { type: 'metric', label: '2.3s Avg Response', x: 350, y: 50 },\n      ],\n    },\n  ];\n\n  const currentFeature = features[activeFeature];\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"container mx-auto px-6\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            See Reporunner{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              in Action\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Experience the power of enterprise workflow automation with interactive demos of our key\n            features and capabilities.\n          </p>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Feature Tabs */}\n            <div className=\"space-y-4\">\n              {features.map((feature, index) => {\n                const Icon = feature.icon;\n                const isActive = activeFeature === index;\n\n                return (\n                  <div\n                    key={feature.id}\n                    className={`cursor-pointer transition-all duration-300 rounded-xl p-6 border-2 ${\n                      isActive\n                        ? 'border-blue-500 bg-white shadow-lg shadow-blue-500/10'\n                        : 'border-gray-200 bg-white/50 hover:border-gray-300 hover:bg-white'\n                    }`}\n                    onClick={() => setActiveFeature(index)}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      {/* Icon */}\n                      <div\n                        className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-300 ${\n                          isActive\n                            ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'\n                            : 'bg-gray-100 text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3\n                            className={`text-xl font-bold transition-colors ${\n                              isActive ? 'text-blue-600' : 'text-gray-900'\n                            }`}\n                          >\n                            {feature.title}\n                          </h3>\n                          {isActive && (\n                            <div className=\"flex items-center gap-1 text-sm text-blue-600 font-medium\">\n                              <Play className=\"w-4 h-4\" />\n                              Live Demo\n                            </div>\n                          )}\n                        </div>\n\n                        <p className=\"text-sm text-gray-500 mb-3\">{feature.subtitle}</p>\n                        <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n\n                        {/* Highlights */}\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {feature.highlights.map((highlight, i) => (\n                            <div key={i} className=\"flex items-center gap-2 text-sm text-gray-600\">\n                              <div\n                                className={`w-1.5 h-1.5 rounded-full ${\n                                  isActive ? 'bg-blue-500' : 'bg-gray-400'\n                                }`}\n                              />\n                              {highlight}\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Try It Button */}\n                        {isActive && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <button className=\"group flex items-center gap-2 text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\">\n                              Try this feature\n                              <ArrowRight className=\"w-4 h-4 transition-transform group-hover:translate-x-1\" />\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Interactive Demo Area */}\n            <div className=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\">\n              {/* Demo Header */}\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-400\" />\n                    <div className=\"w-3 h-3 rounded-full bg-green-400\" />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-600\">\n                    {currentFeature.title} Demo\n                  </span>\n                  <div className=\"ml-auto flex items-center gap-2 text-xs text-gray-500\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                    Live Demo\n                  </div>\n                </div>\n              </div>\n\n              {/* Demo Content */}\n              <div className=\"relative h-96 bg-gradient-to-br from-slate-50 to-blue-50 p-6\">\n                {/* Render demo elements based on feature type */}\n                {currentFeature.id === 0 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Workflow nodes */}\n                    {currentFeature.demoElements?.map((element, i) => {\n                      if (element.type === 'node') {\n                        return (\n                          <div\n                            key={i}\n                            className={`absolute w-24 h-16 ${element.color} rounded-lg flex items-center justify-center text-white text-xs font-medium shadow-lg transform transition-all duration-1000 hover:scale-110`}\n                            style={{\n                              left: `${element.x}px`,\n                              top: `${element.y}px`,\n                              animationDelay: `${i * 200}ms`,\n                            }}\n                          >\n                            {element.label}\n                          </div>\n                        );\n                      }\n                      return null;\n                    })}\n\n                    {/* Connections */}\n                    <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n                      <defs>\n                        <marker\n                          id=\"arrowhead\"\n                          markerWidth=\"10\"\n                          markerHeight=\"7\"\n                          refX=\"9\"\n                          refY=\"3.5\"\n                          orient=\"auto\"\n                        >\n                          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6366f1\" />\n                        </marker>\n                      </defs>\n                      <path\n                        d=\"M 150 167 Q 200 167 250 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                      />\n                      <path\n                        d=\"M 350 167 Q 400 167 450 167\"\n                        stroke=\"#6366f1\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                        markerEnd=\"url(#arrowhead)\"\n                        className=\"animate-draw\"\n                        style={{ animationDelay: '500ms' }}\n                      />\n                    </svg>\n                  </div>\n                )}\n\n                {/* AI Feature Demo */}\n                {currentFeature.id === 1 && (\n                  <div className=\"relative w-full h-full\">\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"w-32 h-32 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center shadow-xl animate-pulse\">\n                        <Brain className=\"w-16 h-16 text-white\" />\n                      </div>\n                    </div>\n\n                    {/* AI Insights */}\n                    <div className=\"absolute top-12 right-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Zap className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-gray-700\">Performance optimized</span>\n                      </div>\n                    </div>\n\n                    <div\n                      className=\"absolute bottom-12 left-12 bg-white rounded-lg shadow-lg p-3 animate-bounce\"\n                      style={{ animationDelay: '1s' }}\n                    >\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Shield className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-gray-700\">Error pattern detected</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Collaboration Demo */}\n                {currentFeature.id === 2 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* User avatars */}\n                    <div className=\"absolute top-8 left-8 flex -space-x-2\">\n                      {['Alice', 'Bob', 'Carol'].map((name, i) => (\n                        <div\n                          key={name}\n                          className={`w-10 h-10 rounded-full bg-gradient-to-r ${\n                            i === 0\n                              ? 'from-blue-500 to-blue-600'\n                              : i === 1\n                                ? 'from-green-500 to-green-600'\n                                : 'from-purple-500 to-purple-600'\n                          } flex items-center justify-center text-white font-bold text-sm border-2 border-white shadow-lg`}\n                          style={{ animationDelay: `${i * 300}ms` }}\n                        >\n                          {name[0]}\n                        </div>\n                      ))}\n                    </div>\n\n                    {/* Collaboration indicator */}\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                      <div className=\"bg-white rounded-xl shadow-xl p-6 border border-gray-200\">\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <GitBranch className=\"w-6 h-6 text-blue-500\" />\n                          <span className=\"font-semibold text-gray-800\">Live Collaboration</span>\n                        </div>\n                        <div className=\"space-y-2 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                            Alice is editing workflow\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full bg-blue-500\" />\n                            Bob added a comment\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Analytics Demo */}\n                {currentFeature.id === 3 && (\n                  <div className=\"relative w-full h-full\">\n                    {/* Mock chart */}\n                    <div className=\"absolute inset-0 p-8\">\n                      <div className=\"bg-white rounded-lg shadow-lg p-4 h-full\">\n                        <h4 className=\"font-semibold text-gray-800 mb-4\">Workflow Performance</h4>\n                        <div className=\"h-32 bg-gradient-to-t from-blue-100 to-blue-50 rounded mb-4 relative overflow-hidden\">\n                          <div className=\"absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-blue-500 to-blue-400 rounded animate-pulse\" />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div className=\"bg-green-50 rounded p-2\">\n                            <div className=\"text-green-600 font-bold\">99.9%</div>\n                            <div className=\"text-gray-600\">Uptime</div>\n                          </div>\n                          <div className=\"bg-blue-50 rounded p-2\">\n                            <div className=\"text-blue-600 font-bold\">2.3s</div>\n                            <div className=\"text-gray-600\">Avg Response</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Demo Footer */}\n              <div className=\"bg-gray-50 px-6 py-4 border-t border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Interactive demo • Click to explore</span>\n                  <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors\">\n                    Try Full Demo\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/FeatureShowcase.tsx",
        "start": 1,
        "end": 460,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 460,
          "column": 2,
          "position": 3529
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/featureshowcase/FeatureShowcase.tsx",
        "start": 2,
        "end": 461,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 13
        },
        "endLoc": {
          "line": 461,
          "column": 2,
          "position": 3542
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                  <div className=\"p-3\"></div>\n                </",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx",
        "start": 405,
        "end": 410,
        "startLoc": {
          "line": 405,
          "column": 2,
          "position": 2628
        },
        "endLoc": {
          "line": 410,
          "column": 3,
          "position": 2690
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Landing/ComparisonTable.tsx",
        "start": 403,
        "end": 409,
        "startLoc": {
          "line": 403,
          "column": 3,
          "position": 2612
        },
        "endLoc": {
          "line": 409,
          "column": 2,
          "position": 2676
        }
      }
    },
    {
      "format": "javascript",
      "lines": 236,
      "fragment": "={getStatusColor(status)}>{status.toUpperCase()}</Tag>\n      ),\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 120,\n      render: (record: WorkflowExecution) => (\n        <div className=\"text-xs\">\n          {record.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length ||\n            0}{' '}\n          / {record.nodeExecutions?.length || 0} nodes\n        </div>\n      ),\n    },\n    {\n      title: 'Started',\n      dataIndex: 'startedAt',\n      key: 'startedAt',\n      width: 150,\n      render: (date: string) => new Date(date).toLocaleString(),\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (record: WorkflowExecution) => formatDuration(record.duration),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (record: WorkflowExecution) => (\n        <Space>\n          <Button size=\"small\" icon={<EyeOutlined />} onClick={() => showExecutionDetails(record)}>\n            Details\n          </Button>\n          {record.status === 'running' && (\n            <Button\n              size=\"small\"\n              danger\n              icon={<StopOutlined />}\n              onClick={() => handleStopExecution(record.id)}\n            >\n              Stop\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const content = (\n    <div className=\"execution-history\">\n      <div className=\"mb-4\">\n        <Row gutter={16} className=\"mb-4\">\n          <Col span={6}>\n            <Search\n              placeholder=\"Search executions...\"\n              onSearch={(value) => setFilter({ ...filter, workflowId: value || workflowId })}\n            />\n          </Col>\n          <Col span={6}>\n            <Select\n              placeholder=\"Filter by status\"\n              allowClear\n              style={{ width: '100%' }}\n              onChange={(value) => setFilter({ ...filter, status: value })}\n            >\n              <Option value=\"pending\">Pending</Option>\n              <Option value=\"running\">Running</Option>\n              <Option value=\"completed\">Completed</Option>\n              <Option value=\"failed\">Failed</Option>\n              <Option value=\"cancelled\">Cancelled</Option>\n            </Select>\n          </Col>\n          <Col span={8}>\n            <RangePicker\n              placeholder={['Start date', 'End date']}\n              onChange={(dates) => {\n                if (dates) {\n                  setFilter({\n                    ...filter,\n                    startDate: dates[0]?.toISOString(),\n                    endDate: dates[1]?.toISOString(),\n                  });\n                } else {\n                  setFilter({\n                    ...filter,\n                    startDate: undefined,\n                    endDate: undefined,\n                  });\n                }\n              }}\n            />\n          </Col>\n          <Col span={4}>\n            <Button icon={<ReloadOutlined />} onClick={loadExecutions} loading={loading}>\n              Refresh\n            </Button>\n          </Col>\n        </Row>\n      </div>\n\n      <Table\n        columns={columns}\n        dataSource={executions}\n        rowKey=\"id\"\n        loading={loading}\n        pagination={{\n          current: Math.floor((filter.offset || 0) / (filter.limit || 20)) + 1,\n          pageSize: filter.limit || 20,\n          total,\n          onChange: (page, pageSize) => {\n            setFilter({\n              ...filter,\n              offset: (page - 1) * (pageSize || 20),\n              limit: pageSize,\n            });\n          },\n        }}\n      />\n\n      <Modal\n        title=\"Execution Details\"\n        open={detailsVisible}\n        onCancel={() => setDetailsVisible(false)}\n        width={800}\n        footer={[\n          <Button key=\"close\" onClick={() => setDetailsVisible(false)}>\n            Close\n          </Button>,\n        ]}\n      >\n        {selectedExecution && (\n          <div>\n            <Row gutter={16} className=\"mb-4\">\n              <Col span={6}>\n                <Statistic\n                  title=\"Status\"\n                  value={selectedExecution.status.toUpperCase()}\n                  valueStyle={{\n                    color: getStatusColor(selectedExecution.status),\n                  }}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic title=\"Duration\" value={formatDuration(selectedExecution.duration)} />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Nodes Completed\"\n                  value={`${selectedExecution.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length || 0} / ${selectedExecution.nodeExecutions?.length || 0}`}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Success Rate\"\n                  value={(() => {\n                    const results = getExecutionResults(selectedExecution);\n                    const successCount = results.filter((r) => r.status === 'success').length;\n                    const total = results.length;\n                    return total > 0 ? Math.round((successCount / total) * 100) : 0;\n                  })()}\n                  suffix=\"%\"\n                />\n              </Col>\n            </Row>\n\n            <Card title=\"Node Execution Results\" className=\"mb-4\">\n              <Timeline>\n                {getExecutionResults(selectedExecution).map((result) => (\n                  <Timeline.Item\n                    key={result.nodeId}\n                    color={\n                      result.status === 'success'\n                        ? 'green'\n                        : result.status === 'error'\n                          ? 'red'\n                          : 'gray'\n                    }\n                  >\n                    <div>\n                      <strong>{result.nodeName}</strong>\n                      <Tag color={result.status === 'success' ? 'green' : 'red'} className=\"ml-2\">\n                        {result.status}\n                      </Tag>\n                      <div className=\"text-gray-500 text-xs\">\n                        {new Date(result.executedAt).toLocaleString()} •{' '}\n                        {formatDuration(result.duration)}\n                      </div>\n                      {result.error && (\n                        <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>\n                      )}\n                      {result.output && (\n                        <details className=\"mt-1\">\n                          <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                            View Output\n                          </summary>\n                          <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                            {JSON.stringify(result.output, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </Timeline.Item>\n                ))}\n              </Timeline>\n            </Card>\n\n            {selectedExecution.error && (\n              <Card title=\"Execution Error\" className=\"border-red-200\">\n                <div className=\"text-red-600\">\n                  <div className=\"font-semibold\">{selectedExecution.error}</div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n\n  // If onClose is provided, wrap in a modal\n  if (onClose) {\n    return (\n      <Modal\n        title=\"Execution History\"\n        open={true}\n        onCancel={onClose}\n        width={1200}\n        footer={[\n          <Button key=\"close\" onClick={onClose}>\n            Close\n          </Button>,\n        ]}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx",
        "start": 149,
        "end": 384,
        "startLoc": {
          "line": 149,
          "column": 6,
          "position": 1398
        },
        "endLoc": {
          "line": 384,
          "column": 2,
          "position": 3341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx",
        "start": 152,
        "end": 387,
        "startLoc": {
          "line": 152,
          "column": 6,
          "position": 1437
        },
        "endLoc": {
          "line": 387,
          "column": 2,
          "position": 3380
        }
      }
    },
    {
      "format": "tsx",
      "lines": 392,
      "fragment": "// Execution History Component - Display workflow execution results\n\nimport { EyeOutlined, ReloadOutlined, StopOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tag,\n  Timeline,\n} from 'antd';\nimport type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { WorkflowApiService } from '@/core';\nimport { logger } from '@/core/services/LoggingService';\n\nconst workflowApiService = new WorkflowApiService();\n\nimport type {\n  ExecutionFilter,\n  NodeExecution,\n  PaginationParams,\n  WorkflowExecution,\n} from '@/core/schemas';\n\nconst { RangePicker } = DatePicker;\nconst { Search } = Input;\nconst { Option } = Select;\n\nexport const ExecutionHistory: React.FC<{\n  workflowId?: string;\n  onClose?: () => void;\n}> = ({ workflowId, onClose }) => {\n  const [executions, setExecutions] = useState<WorkflowExecution[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedExecution, setSelectedExecution] = useState<WorkflowExecution | null>(null);\n  const [detailsVisible, setDetailsVisible] = useState(false);\n  const [filter, setFilter] = useState<ExecutionFilter & PaginationParams>({\n    workflowId,\n    limit: 20,\n    offset: 0,\n    sortOrder: 'desc',\n  });\n  const [total, setTotal] = useState(0);\n\n  const loadExecutions = useCallback(async () => {\n    setLoading(true);\n    try {\n      const result = await workflowApiService.getExecutions(filter);\n      setExecutions(result.items);\n      setTotal(result.total);\n    } catch (error) {\n      logger.error('Failed to load executions', error instanceof Error ? error : undefined);\n    } finally {\n      setLoading(false);\n    }\n  }, [filter]);\n\n  useEffect(() => {\n    loadExecutions();\n  }, [loadExecutions]);\n\n  const handleStopExecution = async (executionId: string) => {\n    try {\n      await workflowApiService.stopExecution(executionId);\n      await loadExecutions();\n    } catch (error) {\n      logger.error('Failed to stop execution', error instanceof Error ? error : undefined, {\n        executionId,\n      });\n    }\n  };\n\n  const showExecutionDetails = async (execution: WorkflowExecution) => {\n    setSelectedExecution(execution);\n    setDetailsVisible(true);\n  };\n\n  const getStatusColor = (status: WorkflowExecution['status']) => {\n    const colors: Record<string, string> = {\n      pending: 'orange',\n      running: 'blue',\n      completed: 'green',\n      failed: 'red',\n      cancelled: 'gray',\n      success: 'green',\n      error: 'red',\n    };\n    return colors[status] || 'default';\n  };\n\n  const formatDuration = (duration?: number) => {\n    if (!duration) return '-';\n    const seconds = Math.floor(duration / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  const getExecutionResults = (execution: WorkflowExecution) => {\n    // Handle both array and record results formats for backward compatibility\n    if (Array.isArray(execution.results)) {\n      return execution.results;\n    }\n    if (execution.results && typeof execution.results === 'object') {\n      return Object.entries(execution.results).map(([nodeId, data]: [string, any]) => ({\n        nodeId,\n        nodeName: data?.nodeName || nodeId,\n        status: data?.status || 'success',\n        output: data?.output,\n        error: data?.error,\n        executedAt: data?.executedAt || execution.startTime || new Date().toISOString(),\n        duration: data?.duration || 0,\n      }));\n    }\n    return [];\n  };\n\n  const columns = [\n    {\n      title: 'Execution ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 120,\n      render: (id: string) => <span className=\"font-mono text-xs\">{id.substring(0, 8)}...</span>,\n    },\n    {\n      title: 'Workflow',\n      dataIndex: 'workflowName',\n      key: 'workflowName',\n      width: 200,\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: WorkflowExecution['status']) => (\n        <Tag color={getStatusColor(status)}>{status.toUpperCase()}</Tag>\n      ),\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 120,\n      render: (record: WorkflowExecution) => (\n        <div className=\"text-xs\">\n          {record.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length ||\n            0}{' '}\n          / {record.nodeExecutions?.length || 0} nodes\n        </div>\n      ),\n    },\n    {\n      title: 'Started',\n      dataIndex: 'startedAt',\n      key: 'startedAt',\n      width: 150,\n      render: (date: string) => new Date(date).toLocaleString(),\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (record: WorkflowExecution) => formatDuration(record.duration),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (record: WorkflowExecution) => (\n        <Space>\n          <Button size=\"small\" icon={<EyeOutlined />} onClick={() => showExecutionDetails(record)}>\n            Details\n          </Button>\n          {record.status === 'running' && (\n            <Button\n              size=\"small\"\n              danger\n              icon={<StopOutlined />}\n              onClick={() => handleStopExecution(record.id)}\n            >\n              Stop\n            </Button>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const content = (\n    <div className=\"execution-history\">\n      <div className=\"mb-4\">\n        <Row gutter={16} className=\"mb-4\">\n          <Col span={6}>\n            <Search\n              placeholder=\"Search executions...\"\n              onSearch={(value) => setFilter({ ...filter, workflowId: value || workflowId })}\n            />\n          </Col>\n          <Col span={6}>\n            <Select\n              placeholder=\"Filter by status\"\n              allowClear\n              style={{ width: '100%' }}\n              onChange={(value) => setFilter({ ...filter, status: value })}\n            >\n              <Option value=\"pending\">Pending</Option>\n              <Option value=\"running\">Running</Option>\n              <Option value=\"completed\">Completed</Option>\n              <Option value=\"failed\">Failed</Option>\n              <Option value=\"cancelled\">Cancelled</Option>\n            </Select>\n          </Col>\n          <Col span={8}>\n            <RangePicker\n              placeholder={['Start date', 'End date']}\n              onChange={(dates) => {\n                if (dates) {\n                  setFilter({\n                    ...filter,\n                    startDate: dates[0]?.toISOString(),\n                    endDate: dates[1]?.toISOString(),\n                  });\n                } else {\n                  setFilter({\n                    ...filter,\n                    startDate: undefined,\n                    endDate: undefined,\n                  });\n                }\n              }}\n            />\n          </Col>\n          <Col span={4}>\n            <Button icon={<ReloadOutlined />} onClick={loadExecutions} loading={loading}>\n              Refresh\n            </Button>\n          </Col>\n        </Row>\n      </div>\n\n      <Table\n        columns={columns}\n        dataSource={executions}\n        rowKey=\"id\"\n        loading={loading}\n        pagination={{\n          current: Math.floor((filter.offset || 0) / (filter.limit || 20)) + 1,\n          pageSize: filter.limit || 20,\n          total,\n          onChange: (page, pageSize) => {\n            setFilter({\n              ...filter,\n              offset: (page - 1) * (pageSize || 20),\n              limit: pageSize,\n            });\n          },\n        }}\n      />\n\n      <Modal\n        title=\"Execution Details\"\n        open={detailsVisible}\n        onCancel={() => setDetailsVisible(false)}\n        width={800}\n        footer={[\n          <Button key=\"close\" onClick={() => setDetailsVisible(false)}>\n            Close\n          </Button>,\n        ]}\n      >\n        {selectedExecution && (\n          <div>\n            <Row gutter={16} className=\"mb-4\">\n              <Col span={6}>\n                <Statistic\n                  title=\"Status\"\n                  value={selectedExecution.status.toUpperCase()}\n                  valueStyle={{\n                    color: getStatusColor(selectedExecution.status),\n                  }}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic title=\"Duration\" value={formatDuration(selectedExecution.duration)} />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Nodes Completed\"\n                  value={`${selectedExecution.nodeExecutions?.filter((n: NodeExecution) => n.status === 'completed').length || 0} / ${selectedExecution.nodeExecutions?.length || 0}`}\n                />\n              </Col>\n              <Col span={6}>\n                <Statistic\n                  title=\"Success Rate\"\n                  value={(() => {\n                    const results = getExecutionResults(selectedExecution);\n                    const successCount = results.filter((r) => r.status === 'success').length;\n                    const total = results.length;\n                    return total > 0 ? Math.round((successCount / total) * 100) : 0;\n                  })()}\n                  suffix=\"%\"\n                />\n              </Col>\n            </Row>\n\n            <Card title=\"Node Execution Results\" className=\"mb-4\">\n              <Timeline>\n                {getExecutionResults(selectedExecution).map((result) => (\n                  <Timeline.Item\n                    key={result.nodeId}\n                    color={\n                      result.status === 'success'\n                        ? 'green'\n                        : result.status === 'error'\n                          ? 'red'\n                          : 'gray'\n                    }\n                  >\n                    <div>\n                      <strong>{result.nodeName}</strong>\n                      <Tag color={result.status === 'success' ? 'green' : 'red'} className=\"ml-2\">\n                        {result.status}\n                      </Tag>\n                      <div className=\"text-gray-500 text-xs\">\n                        {new Date(result.executedAt).toLocaleString()} •{' '}\n                        {formatDuration(result.duration)}\n                      </div>\n                      {result.error && (\n                        <div className=\"text-red-500 text-sm mt-1\">{result.error}</div>\n                      )}\n                      {result.output && (\n                        <details className=\"mt-1\">\n                          <summary className=\"text-blue-500 cursor-pointer text-sm\">\n                            View Output\n                          </summary>\n                          <pre className=\"bg-gray-100 p-2 rounded mt-1 text-xs overflow-auto max-h-32\">\n                            {JSON.stringify(result.output, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </Timeline.Item>\n                ))}\n              </Timeline>\n            </Card>\n\n            {selectedExecution.error && (\n              <Card title=\"Execution Error\" className=\"border-red-200\">\n                <div className=\"text-red-600\">\n                  <div className=\"font-semibold\">{selectedExecution.error}</div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n\n  // If onClose is provided, wrap in a modal\n  if (onClose) {\n    return (\n      <Modal\n        title=\"Execution History\"\n        open={true}\n        onCancel={onClose}\n        width={1200}\n        footer={[\n          <Button key=\"close\" onClick={onClose}>\n            Close\n          </Button>,\n        ]}\n      >\n        {content}\n      </Modal>\n    );\n  }\n\n  return content;\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/ExecutionHistory.tsx",
        "start": 1,
        "end": 392,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 3370
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/ExecutionHistory/executionhistory/ExecutionHistory.tsx",
        "start": 4,
        "end": 395,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 39
        },
        "endLoc": {
          "line": 395,
          "column": 2,
          "position": 3409
        }
      }
    },
    {
      "format": "javascript",
      "lines": 570,
      "fragment": "={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Total Organizations\"\n                  value={metrics?.organizations.total}\n                  prefix={<TeamOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.organizations.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Users\"\n                  value={metrics?.users.active}\n                  prefix={<UserOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.users.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Workflow Executions\"\n                  value={metrics?.workflows.executions}\n                  prefix={<ThunderboltOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px' }}>\n                      {metrics?.workflows.successRate}% success\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"System Uptime\"\n                  value={metrics?.performance.systemUptime}\n                  precision={2}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{ color: '#52c41a' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {/* Charts */}\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card\n                title=\"Execution Trends\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Line\n                  data={executionTrendData}\n                  xField=\"date\"\n                  yField=\"executions\"\n                  height={300}\n                  smooth\n                  point={{ size: 5, shape: 'circle' }}\n                />\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card\n                title=\"User Growth\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Column\n                  data={userGrowthData}\n                  xField=\"month\"\n                  yField=\"total\"\n                  height={300}\n                  columnStyle={{ fill: '#1890ff' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'performance',\n      label: (\n        <span>\n          <RiseOutlined />\n          Performance\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Avg Execution Time\"\n                  value={metrics?.performance.avgExecutionTime}\n                  precision={1}\n                  suffix=\"s\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Error Rate\"\n                  value={metrics?.performance.errorRate ?? 0}\n                  precision={1}\n                  suffix=\"%\"\n                  prefix={<BugOutlined />}\n                  valueStyle={{\n                    color: (metrics?.performance.errorRate ?? 0) > 2 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Throughput\"\n                  value={metrics?.performance.throughput}\n                  suffix=\"/hour\"\n                  prefix={<ApiOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Monthly Spend\"\n                  value={metrics?.costs.monthlySpend}\n                  prefix=\"$\"\n                  suffix={\n                    <span\n                      style={{\n                        fontSize: '14px',\n                        color: (metrics?.costs.growth ?? 0) < 0 ? '#52c41a' : '#cf1322',\n                      }}\n                    >\n                      {(metrics?.costs.growth ?? 0) < 0 ? <FallOutlined /> : <RiseOutlined />}{' '}\n                      {Math.abs(metrics?.costs.growth ?? 0)}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]}>\n            <Col span={16}>\n              <Card\n                title=\"System Performance (24h)\"\n                extra={\n                  <Button icon={<ReloadOutlined />} size=\"small\">\n                    Refresh\n                  </Button>\n                }\n              >\n                <Area\n                  data={performanceData}\n                  xField=\"time\"\n                  yField=\"cpu\"\n                  height={300}\n                  // @ts-expect-error Area config shape may differ by version\n                  areaStyle={{ fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' }}\n                />\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Workflow Categories\">\n                <Pie\n                  data={workflowCategoriesData}\n                  angleField=\"value\"\n                  colorField=\"type\"\n                  height={300}\n                  radius={0.8}\n                  label={{\n                    type: 'spider',\n                    content: '{name}\\n{percentage}',\n                  }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n          {metrics?.security && metrics.security.alerts > 0 && (\n            <Badge count={metrics.security.alerts} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Threats\"\n                  value={metrics?.security.threats ?? 0}\n                  prefix={<WarningOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.threats ?? 0) > 0 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Security Alerts\"\n                  value={metrics?.security.alerts ?? 0}\n                  prefix={<SecurityScanOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.alerts ?? 0) > 5 ? '#fa8c16' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Compliance Score\"\n                  value={metrics?.security.complianceScore ?? 0}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security?.complianceScore ?? 0) >= 90 ? '#52c41a' : '#fa8c16',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Last Incident\"\n                  value={\n                    metrics?.security.lastIncident\n                      ? Math.floor(\n                          (Date.now() - metrics.security.lastIncident.getTime()) /\n                            (24 * 60 * 60 * 1000)\n                        )\n                      : 0\n                  }\n                  suffix=\" days ago\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {(metrics?.security.alerts ?? 0) > 0 && (\n            <Alert\n              message=\"Security Alerts Require Attention\"\n              description={`There are ${metrics?.security.alerts ?? 0} active security alerts that need investigation.`}\n              type=\"warning\"\n              showIcon\n              style={{ marginBottom: 24 }}\n              action={\n                <Button size=\"small\" type=\"primary\">\n                  View All Alerts\n                </Button>\n              }\n            />\n          )}\n\n          <Card title=\"Security Overview\">\n            <Row gutter={16}>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Threat Detection</Text>\n                  <Progress percent={85} status=\"active\" strokeColor=\"#52c41a\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Access Control</Text>\n                  <Progress percent={92} status=\"active\" strokeColor=\"#1890ff\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Data Encryption</Text>\n                  <Progress percent={98} status=\"active\" strokeColor=\"#722ed1\" />\n                </div>\n              </Col>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Audit Coverage</Text>\n                  <Progress percent={94} status=\"active\" strokeColor=\"#fa8c16\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Vulnerability Management</Text>\n                  <Progress percent={88} status=\"active\" strokeColor=\"#13c2c2\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Incident Response</Text>\n                  <Progress percent={90} status=\"active\" strokeColor=\"#eb2f96\" />\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'organizations',\n      label: (\n        <span>\n          <TeamOutlined />\n          Organizations\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Top Organizations\"\n            extra={\n              <Space>\n                <Button icon={<ExportOutlined />} size=\"small\">\n                  Export\n                </Button>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Table\n              dataSource={topOrganizationsData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'Organization',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string) => (\n                    <div>\n                      <Avatar size=\"small\" style={{ backgroundColor: '#1890ff', marginRight: 8 }}>\n                        {name.charAt(0)}\n                      </Avatar>\n                      <Text strong>{name}</Text>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Users',\n                  dataIndex: 'users',\n                  key: 'users',\n                  render: (users: number) => <Statistic value={users} />,\n                },\n                {\n                  title: 'Workflows',\n                  dataIndex: 'workflows',\n                  key: 'workflows',\n                  render: (workflows: number) => <Statistic value={workflows} />,\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Growth',\n                  dataIndex: 'growth',\n                  key: 'growth',\n                  render: (growth: number) => (\n                    <span style={{ color: growth >= 0 ? '#52c41a' : '#cf1322' }}>\n                      {growth >= 0 ? <RiseOutlined /> : <FallOutlined />} {Math.abs(growth)}%\n                    </span>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n\n          <Card title=\"Top Users\" style={{ marginTop: 16 }}>\n            <Table\n              dataSource={topUsersData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'User',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string, record: any) => (\n                    <div>\n                      <Avatar size=\"small\" icon={<UserOutlined />} style={{ marginRight: 8 }} />\n                      <div>\n                        <Text strong>{name}</Text>\n                        <br />\n                        <Text type=\"secondary\">{record.organization}</Text>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Success Rate',\n                  dataIndex: 'successRate',\n                  key: 'successRate',\n                  render: (rate: number) => (\n                    <Progress\n                      percent={rate}\n                      size=\"small\"\n                      status={rate >= 95 ? 'success' : rate >= 90 ? 'normal' : 'exception'}\n                    />\n                  ),\n                },\n              ]}\n            />\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'activity',\n      label: (\n        <span>\n          <ClockCircleOutlined />\n          Activity\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Recent Activity\"\n            extra={\n              <Space>\n                <Select defaultValue=\"all\" style={{ width: 120 }}>\n                  <Option value=\"all\">All Events</Option>\n                  <Option value=\"security\">Security</Option>\n                  <Option value=\"workflow\">Workflows</Option>\n                  <Option value=\"user\">Users</Option>\n                </Select>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Timeline>\n              {activities.map((activity) => (\n                <Timeline.Item\n                  key={activity.id}\n                  dot={\n                    <Avatar\n                      size=\"small\"\n                      style={{\n                        backgroundColor: getSeverityColor(activity.severity),\n                      }}\n                      icon={getActivityIcon(activity.type)}\n                    />\n                  }\n                >\n                  <div>\n                    <div\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Text strong>{activity.title}</Text>\n                      <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                        {activity.timestamp.toLocaleTimeString()}\n                      </Text>\n                    </div>\n                    <div style={{ marginTop: 4 }}>\n                      <Text>{activity.description}</Text>\n                    </div>\n                    {(activity.user || activity.organization) && (\n                      <div style={{ marginTop: 8 }}>\n                        {activity.user && (\n                          <Tag icon={<UserOutlined />} color=\"blue\">\n                            {activity.user}\n                          </Tag>\n                        )}\n                        {activity.organization && (\n                          <Tag icon={<TeamOutlined />} color=\"green\">\n                            {activity.organization}\n                          </Tag>\n                        )}\n                        <Tag color={getSeverityColor(activity.severity)}>{activity.severity}</Tag>\n                      </div>\n                    )}\n                  </div>\n                </Timeline.Item>\n              ))}\n            </Timeline>\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  if (!metrics) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <div>\n            <Title level={2}>\n              <DashboardOutlined /> Enterprise Dashboard\n            </Title>\n            <Text type=\"secondary\">\n              Comprehensive overview of your organization's automation platform\n            </Text>\n          </div>\n          <Space>\n            <RangePicker value={dateRange} onChange={setDateRange} style={{ width: 300 }} />\n            {canManageOrganization() && (\n              <Select\n                value={selectedOrganization}\n                onChange={setSelectedOrganization}\n                style={{ width: 200 }}\n              >\n                <Option value=\"all\">All Organizations</Option>\n                {organizations.map((org) => (\n                  <Option key={org.id} value={org.id}>\n                    {org.name}\n                  </Option>\n                ))}\n              </Select>\n            )}\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardData} loading={loading}>\n              Refresh\n            </Button>\n          </Space>\n        </div>\n      </div>\n\n      <Tabs items={tabs}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 349,
        "end": 918,
        "startLoc": {
          "line": 349,
          "column": 7,
          "position": 2695
        },
        "endLoc": {
          "line": 918,
          "column": 2,
          "position": 7040
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 352,
        "end": 921,
        "startLoc": {
          "line": 352,
          "column": 7,
          "position": 2734
        },
        "endLoc": {
          "line": 921,
          "column": 2,
          "position": 7079
        }
      }
    },
    {
      "format": "tsx",
      "lines": 42,
      "fragment": "import {\n  ApiOutlined,\n  BugOutlined,\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  DashboardOutlined,\n  DatabaseOutlined,\n  ExportOutlined,\n  FallOutlined,\n  ReloadOutlined,\n  RiseOutlined,\n  SecurityScanOutlined,\n  TeamOutlined,\n  ThunderboltOutlined,\n  UserOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport { Area, Column, Line, Pie } from '@ant-design/plots';\nimport {\n  Alert,\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Progress,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useRBACStore } from '@/core/stores/rbacStore';\n\n// import { auditService } from \"@/core/services/auditService\";",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 1,
        "end": 42,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 42,
          "column": 64,
          "position": 213
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 1,
        "end": 41,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 41,
          "column": 7,
          "position": 212
        }
      }
    },
    {
      "format": "tsx",
      "lines": 882,
      "fragment": ";\n\n// import { auditService } from \"@/core/services/auditService\";\n// import { securityService } from \"@/core/services/securityService\";\n\nconst { Title, Text } = Typography;\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\ninterface DashboardMetrics {\n  organizations: {\n    total: number;\n    active: number;\n    growth: number;\n  };\n  users: {\n    total: number;\n    active: number;\n    newThisMonth: number;\n    growth: number;\n  };\n  workflows: {\n    total: number;\n    active: number;\n    executions: number;\n    successRate: number;\n  };\n  security: {\n    threats: number;\n    alerts: number;\n    complianceScore: number;\n    lastIncident?: Date;\n  };\n  performance: {\n    avgExecutionTime: number;\n    systemUptime: number;\n    errorRate: number;\n    throughput: number;\n  };\n  costs: {\n    monthlySpend: number;\n    growth: number;\n    costPerExecution: number;\n  };\n}\n\ninterface ActivityEvent {\n  id: string;\n  type: 'user_login' | 'workflow_execution' | 'security_alert' | 'system_event';\n  title: string;\n  description: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  user?: string;\n  organization?: string;\n}\n\nexport const EnterpriseDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [activities, setActivities] = useState<ActivityEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\n  const [selectedOrganization, setSelectedOrganization] = useState<string>('all');\n\n  const { organizations, canManageOrganization } = useRBACStore();\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [loadDashboardData]);\n\n  const loadDashboardData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls - in real app these would be actual API endpoints\n      const mockMetrics: DashboardMetrics = {\n        organizations: {\n          total: 25,\n          active: 22,\n          growth: 8.5,\n        },\n        users: {\n          total: 1247,\n          active: 892,\n          newThisMonth: 156,\n          growth: 12.3,\n        },\n        workflows: {\n          total: 5432,\n          active: 3891,\n          executions: 125678,\n          successRate: 94.7,\n        },\n        security: {\n          threats: 3,\n          alerts: 12,\n          complianceScore: 92,\n          lastIncident: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        },\n        performance: {\n          avgExecutionTime: 2.3,\n          systemUptime: 99.97,\n          errorRate: 0.8,\n          throughput: 1250,\n        },\n        costs: {\n          monthlySpend: 45678,\n          growth: -5.2,\n          costPerExecution: 0.036,\n        },\n      };\n\n      const mockActivities: ActivityEvent[] = [\n        {\n          id: '1',\n          type: 'security_alert',\n          title: 'Multiple Failed Login Attempts',\n          description: 'User john.doe@acme.com has 5 failed login attempts',\n          timestamp: new Date(Date.now() - 30 * 60 * 1000),\n          severity: 'high',\n          user: 'john.doe@acme.com',\n          organization: 'Acme Corp',\n        },\n        {\n          id: '2',\n          type: 'workflow_execution',\n          title: 'High Volume Data Pipeline Completed',\n          description: 'Successfully processed 50,000 records in 4.2 minutes',\n          timestamp: new Date(Date.now() - 45 * 60 * 1000),\n          severity: 'low',\n          user: 'sarah.chen@techcorp.com',\n          organization: 'TechCorp',\n        },\n        {\n          id: '3',\n          type: 'user_login',\n          title: 'Admin Login from New Location',\n          description: 'Administrator logged in from Tokyo, Japan',\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n          severity: 'medium',\n          user: 'admin@enterprise.com',\n          organization: 'Enterprise Ltd',\n        },\n        {\n          id: '4',\n          type: 'system_event',\n          title: 'System Maintenance Completed',\n          description: 'Scheduled maintenance window completed successfully',\n          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\n          severity: 'low',\n        },\n      ];\n\n      setMetrics(mockMetrics);\n      setActivities(mockActivities);\n    } catch (_error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getActivityIcon = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'security_alert':\n        return <SecurityScanOutlined />;\n      case 'workflow_execution':\n        return <ThunderboltOutlined />;\n      case 'user_login':\n        return <UserOutlined />;\n      case 'system_event':\n        return <DatabaseOutlined />;\n      default:\n        return <ClockCircleOutlined />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return '#ff4d4f';\n      case 'high':\n        return '#fa8c16';\n      case 'medium':\n        return '#fadb14';\n      case 'low':\n        return '#52c41a';\n      default:\n        return '#d9d9d9';\n    }\n  };\n\n  // Chart data\n  const executionTrendData = [\n    { date: '2024-01', executions: 8500 },\n    { date: '2024-02', executions: 9200 },\n    { date: '2024-03', executions: 8800 },\n    { date: '2024-04', executions: 10500 },\n    { date: '2024-05', executions: 11200 },\n    { date: '2024-06', executions: 12800 },\n  ];\n\n  const userGrowthData = [\n    { month: 'Jan', active: 750, total: 1100 },\n    { month: 'Feb', active: 820, total: 1150 },\n    { month: 'Mar', active: 780, total: 1180 },\n    { month: 'Apr', active: 890, total: 1220 },\n    { month: 'May', active: 850, total: 1250 },\n    { month: 'Jun', active: 892, total: 1247 },\n  ];\n\n  const workflowCategoriesData = [\n    { type: 'Data Processing', value: 35 },\n    { type: 'Email Automation', value: 25 },\n    { type: 'AI/ML Workflows', value: 20 },\n    { type: 'Integration', value: 12 },\n    { type: 'Other', value: 8 },\n  ];\n\n  const performanceData = [\n    { time: '00:00', cpu: 45, memory: 62, throughput: 1200 },\n    { time: '04:00', cpu: 32, memory: 58, throughput: 800 },\n    { time: '08:00', cpu: 78, memory: 75, throughput: 2100 },\n    { time: '12:00', cpu: 85, memory: 82, throughput: 2500 },\n    { time: '16:00', cpu: 92, memory: 88, throughput: 2800 },\n    { time: '20:00', cpu: 67, memory: 71, throughput: 1900 },\n  ];\n\n  const topUsersData = [\n    {\n      name: 'Sarah Chen',\n      organization: 'TechCorp',\n      executions: 1250,\n      successRate: 98.5,\n    },\n    {\n      name: 'Mike Johnson',\n      organization: 'DataFlow Inc',\n      executions: 980,\n      successRate: 96.2,\n    },\n    {\n      name: 'Lisa Wang',\n      organization: 'AutoSys',\n      executions: 875,\n      successRate: 99.1,\n    },\n    {\n      name: 'John Smith',\n      organization: 'ProcessPro',\n      executions: 820,\n      successRate: 94.8,\n    },\n    {\n      name: 'Emma Davis',\n      organization: 'FlowTech',\n      executions: 765,\n      successRate: 97.3,\n    },\n  ];\n\n  const topOrganizationsData = [\n    {\n      name: 'TechCorp',\n      users: 89,\n      workflows: 342,\n      executions: 15680,\n      growth: 15.2,\n    },\n    {\n      name: 'DataFlow Inc',\n      users: 67,\n      workflows: 298,\n      executions: 12450,\n      growth: 8.7,\n    },\n    {\n      name: 'AutoSys',\n      users: 54,\n      workflows: 234,\n      executions: 9870,\n      growth: 22.1,\n    },\n    {\n      name: 'ProcessPro',\n      users: 43,\n      workflows: 187,\n      executions: 7890,\n      growth: -2.4,\n    },\n    {\n      name: 'FlowTech',\n      users: 38,\n      workflows: 156,\n      executions: 6540,\n      growth: 11.8,\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'overview',\n      label: (\n        <span>\n          <DashboardOutlined />\n          Overview\n        </span>\n      ),\n      children: (\n        <div>\n          {/* Key Metrics */}\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Total Organizations\"\n                  value={metrics?.organizations.total}\n                  prefix={<TeamOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.organizations.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Users\"\n                  value={metrics?.users.active}\n                  prefix={<UserOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px', color: '#52c41a' }}>\n                      <RiseOutlined /> {metrics?.users.growth}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Workflow Executions\"\n                  value={metrics?.workflows.executions}\n                  prefix={<ThunderboltOutlined />}\n                  suffix={\n                    <span style={{ fontSize: '14px' }}>\n                      {metrics?.workflows.successRate}% success\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"System Uptime\"\n                  value={metrics?.performance.systemUptime}\n                  precision={2}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{ color: '#52c41a' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {/* Charts */}\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card\n                title=\"Execution Trends\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Line\n                  data={executionTrendData}\n                  xField=\"date\"\n                  yField=\"executions\"\n                  height={300}\n                  smooth\n                  point={{ size: 5, shape: 'circle' }}\n                />\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card\n                title=\"User Growth\"\n                extra={\n                  <Button icon={<ExportOutlined />} size=\"small\">\n                    Export\n                  </Button>\n                }\n              >\n                <Column\n                  data={userGrowthData}\n                  xField=\"month\"\n                  yField=\"total\"\n                  height={300}\n                  columnStyle={{ fill: '#1890ff' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'performance',\n      label: (\n        <span>\n          <RiseOutlined />\n          Performance\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Avg Execution Time\"\n                  value={metrics?.performance.avgExecutionTime}\n                  precision={1}\n                  suffix=\"s\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Error Rate\"\n                  value={metrics?.performance.errorRate ?? 0}\n                  precision={1}\n                  suffix=\"%\"\n                  prefix={<BugOutlined />}\n                  valueStyle={{\n                    color: (metrics?.performance.errorRate ?? 0) > 2 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Throughput\"\n                  value={metrics?.performance.throughput}\n                  suffix=\"/hour\"\n                  prefix={<ApiOutlined />}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Monthly Spend\"\n                  value={metrics?.costs.monthlySpend}\n                  prefix=\"$\"\n                  suffix={\n                    <span\n                      style={{\n                        fontSize: '14px',\n                        color: (metrics?.costs.growth ?? 0) < 0 ? '#52c41a' : '#cf1322',\n                      }}\n                    >\n                      {(metrics?.costs.growth ?? 0) < 0 ? <FallOutlined /> : <RiseOutlined />}{' '}\n                      {Math.abs(metrics?.costs.growth ?? 0)}%\n                    </span>\n                  }\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]}>\n            <Col span={16}>\n              <Card\n                title=\"System Performance (24h)\"\n                extra={\n                  <Button icon={<ReloadOutlined />} size=\"small\">\n                    Refresh\n                  </Button>\n                }\n              >\n                <Area\n                  data={performanceData}\n                  xField=\"time\"\n                  yField=\"cpu\"\n                  height={300}\n                  // @ts-expect-error Area config shape may differ by version\n                  areaStyle={{ fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' }}\n                />\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Workflow Categories\">\n                <Pie\n                  data={workflowCategoriesData}\n                  angleField=\"value\"\n                  colorField=\"type\"\n                  height={300}\n                  radius={0.8}\n                  label={{\n                    type: 'spider',\n                    content: '{name}\\n{percentage}',\n                  }}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'security',\n      label: (\n        <span>\n          <SecurityScanOutlined />\n          Security\n          {metrics?.security && metrics.security.alerts > 0 && (\n            <Badge count={metrics.security.alerts} style={{ marginLeft: 8 }} />\n          )}\n        </span>\n      ),\n      children: (\n        <div>\n          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Active Threats\"\n                  value={metrics?.security.threats ?? 0}\n                  prefix={<WarningOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.threats ?? 0) > 0 ? '#cf1322' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Security Alerts\"\n                  value={metrics?.security.alerts ?? 0}\n                  prefix={<SecurityScanOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security.alerts ?? 0) > 5 ? '#fa8c16' : '#52c41a',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Compliance Score\"\n                  value={metrics?.security.complianceScore ?? 0}\n                  suffix=\"%\"\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{\n                    color: (metrics?.security?.complianceScore ?? 0) >= 90 ? '#52c41a' : '#fa8c16',\n                  }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"Last Incident\"\n                  value={\n                    metrics?.security.lastIncident\n                      ? Math.floor(\n                          (Date.now() - metrics.security.lastIncident.getTime()) /\n                            (24 * 60 * 60 * 1000)\n                        )\n                      : 0\n                  }\n                  suffix=\" days ago\"\n                  prefix={<ClockCircleOutlined />}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {(metrics?.security.alerts ?? 0) > 0 && (\n            <Alert\n              message=\"Security Alerts Require Attention\"\n              description={`There are ${metrics?.security.alerts ?? 0} active security alerts that need investigation.`}\n              type=\"warning\"\n              showIcon\n              style={{ marginBottom: 24 }}\n              action={\n                <Button size=\"small\" type=\"primary\">\n                  View All Alerts\n                </Button>\n              }\n            />\n          )}\n\n          <Card title=\"Security Overview\">\n            <Row gutter={16}>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Threat Detection</Text>\n                  <Progress percent={85} status=\"active\" strokeColor=\"#52c41a\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Access Control</Text>\n                  <Progress percent={92} status=\"active\" strokeColor=\"#1890ff\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Data Encryption</Text>\n                  <Progress percent={98} status=\"active\" strokeColor=\"#722ed1\" />\n                </div>\n              </Col>\n              <Col span={12}>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Audit Coverage</Text>\n                  <Progress percent={94} status=\"active\" strokeColor=\"#fa8c16\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Vulnerability Management</Text>\n                  <Progress percent={88} status=\"active\" strokeColor=\"#13c2c2\" />\n                </div>\n                <div style={{ marginBottom: 16 }}>\n                  <Text strong>Incident Response</Text>\n                  <Progress percent={90} status=\"active\" strokeColor=\"#eb2f96\" />\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'organizations',\n      label: (\n        <span>\n          <TeamOutlined />\n          Organizations\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Top Organizations\"\n            extra={\n              <Space>\n                <Button icon={<ExportOutlined />} size=\"small\">\n                  Export\n                </Button>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Table\n              dataSource={topOrganizationsData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'Organization',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string) => (\n                    <div>\n                      <Avatar size=\"small\" style={{ backgroundColor: '#1890ff', marginRight: 8 }}>\n                        {name.charAt(0)}\n                      </Avatar>\n                      <Text strong>{name}</Text>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Users',\n                  dataIndex: 'users',\n                  key: 'users',\n                  render: (users: number) => <Statistic value={users} />,\n                },\n                {\n                  title: 'Workflows',\n                  dataIndex: 'workflows',\n                  key: 'workflows',\n                  render: (workflows: number) => <Statistic value={workflows} />,\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Growth',\n                  dataIndex: 'growth',\n                  key: 'growth',\n                  render: (growth: number) => (\n                    <span style={{ color: growth >= 0 ? '#52c41a' : '#cf1322' }}>\n                      {growth >= 0 ? <RiseOutlined /> : <FallOutlined />} {Math.abs(growth)}%\n                    </span>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n\n          <Card title=\"Top Users\" style={{ marginTop: 16 }}>\n            <Table\n              dataSource={topUsersData}\n              pagination={false}\n              columns={[\n                {\n                  title: 'User',\n                  dataIndex: 'name',\n                  key: 'name',\n                  render: (name: string, record: any) => (\n                    <div>\n                      <Avatar size=\"small\" icon={<UserOutlined />} style={{ marginRight: 8 }} />\n                      <div>\n                        <Text strong>{name}</Text>\n                        <br />\n                        <Text type=\"secondary\">{record.organization}</Text>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  title: 'Executions',\n                  dataIndex: 'executions',\n                  key: 'executions',\n                  render: (executions: number) => <Statistic value={executions} />,\n                },\n                {\n                  title: 'Success Rate',\n                  dataIndex: 'successRate',\n                  key: 'successRate',\n                  render: (rate: number) => (\n                    <Progress\n                      percent={rate}\n                      size=\"small\"\n                      status={rate >= 95 ? 'success' : rate >= 90 ? 'normal' : 'exception'}\n                    />\n                  ),\n                },\n              ]}\n            />\n          </Card>\n        </div>\n      ),\n    },\n    {\n      key: 'activity',\n      label: (\n        <span>\n          <ClockCircleOutlined />\n          Activity\n        </span>\n      ),\n      children: (\n        <div>\n          <Card\n            title=\"Recent Activity\"\n            extra={\n              <Space>\n                <Select defaultValue=\"all\" style={{ width: 120 }}>\n                  <Option value=\"all\">All Events</Option>\n                  <Option value=\"security\">Security</Option>\n                  <Option value=\"workflow\">Workflows</Option>\n                  <Option value=\"user\">Users</Option>\n                </Select>\n                <Button icon={<ReloadOutlined />} size=\"small\">\n                  Refresh\n                </Button>\n              </Space>\n            }\n          >\n            <Timeline>\n              {activities.map((activity) => (\n                <Timeline.Item\n                  key={activity.id}\n                  dot={\n                    <Avatar\n                      size=\"small\"\n                      style={{\n                        backgroundColor: getSeverityColor(activity.severity),\n                      }}\n                      icon={getActivityIcon(activity.type)}\n                    />\n                  }\n                >\n                  <div>\n                    <div\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                      }}\n                    >\n                      <Text strong>{activity.title}</Text>\n                      <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                        {activity.timestamp.toLocaleTimeString()}\n                      </Text>\n                    </div>\n                    <div style={{ marginTop: 4 }}>\n                      <Text>{activity.description}</Text>\n                    </div>\n                    {(activity.user || activity.organization) && (\n                      <div style={{ marginTop: 8 }}>\n                        {activity.user && (\n                          <Tag icon={<UserOutlined />} color=\"blue\">\n                            {activity.user}\n                          </Tag>\n                        )}\n                        {activity.organization && (\n                          <Tag icon={<TeamOutlined />} color=\"green\">\n                            {activity.organization}\n                          </Tag>\n                        )}\n                        <Tag color={getSeverityColor(activity.severity)}>{activity.severity}</Tag>\n                      </div>\n                    )}\n                  </div>\n                </Timeline.Item>\n              ))}\n            </Timeline>\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  if (!metrics) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <div>\n            <Title level={2}>\n              <DashboardOutlined /> Enterprise Dashboard\n            </Title>\n            <Text type=\"secondary\">\n              Comprehensive overview of your organization's automation platform\n            </Text>\n          </div>\n          <Space>\n            <RangePicker value={dateRange} onChange={setDateRange} style={{ width: 300 }} />\n            {canManageOrganization() && (\n              <Select\n                value={selectedOrganization}\n                onChange={setSelectedOrganization}\n                style={{ width: 200 }}\n              >\n                <Option value=\"all\">All Organizations</Option>\n                {organizations.map((org) => (\n                  <Option key={org.id} value={org.id}>\n                    {org.name}\n                  </Option>\n                ))}\n              </Select>\n            )}\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardData} loading={loading}>\n              Refresh\n            </Button>\n          </Space>\n        </div>\n      </div>\n\n      <Tabs items={tabs} />\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/EnterpriseDashboard.tsx",
        "start": 40,
        "end": 921,
        "startLoc": {
          "line": 40,
          "column": 26,
          "position": 210
        },
        "endLoc": {
          "line": 921,
          "column": 2,
          "position": 7054
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/EnterpriseDashboard/enterprisedashboard/EnterpriseDashboard.tsx",
        "start": 43,
        "end": 924,
        "startLoc": {
          "line": 43,
          "column": 19,
          "position": 249
        },
        "endLoc": {
          "line": 924,
          "column": 2,
          "position": 7093
        }
      }
    },
    {
      "format": "javascript",
      "lines": 376,
      "fragment": "={{ fontSize: '12px' }}>\n            {record.ipAddress}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 120,\n      render: (action: string) => <Tag color=\"blue\">{action}</Tag>,\n    },\n    {\n      title: 'Resource',\n      dataIndex: 'resource',\n      key: 'resource',\n      width: 120,\n      render: (resource: string, record: AuditEvent) => (\n        <div>\n          <Tag color=\"purple\">{resource}</Tag>\n          {record.resourceId && (\n            <div>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                ID: {record.resourceId}\n              </Text>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: 'Result',\n      dataIndex: 'result',\n      key: 'result',\n      width: 100,\n      render: (result: string) => <Tag color={getResultColor(result)}>{result}</Tag>,\n    },\n    {\n      title: 'Severity',\n      dataIndex: 'severity',\n      key: 'severity',\n      width: 100,\n      render: (severity: string) => <Tag color={getSeverityColor(severity)}>{severity}</Tag>,\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 120,\n      render: (category: string) => <Tag>{category}</Tag>,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 100,\n      render: (_: unknown, record: AuditEvent) => (\n        <Button type=\"link\" icon={<EyeOutlined />} onClick={() => setSelectedEvent(record)}>\n          View\n        </Button>\n      ),\n    },\n  ];\n\n  const uniqueUsers = Array.from(new Set(events.map((e) => e.userName)));\n  const uniqueActions = Array.from(new Set(events.map((e) => e.action)));\n  const uniqueResources = Array.from(new Set(events.map((e) => e.resource)));\n\n  const securityMetrics = {\n    totalEvents: filteredEvents.length,\n    securityEvents: filteredEvents.filter(\n      (e) =>\n        e.category === 'authentication' ||\n        e.category === 'authorization' ||\n        e.severity === 'high' ||\n        e.severity === 'critical'\n    ).length,\n    failedLogins: filteredEvents.filter((e) => e.action === 'login' && e.result === 'failure')\n      .length,\n    criticalEvents: filteredEvents.filter((e) => e.severity === 'critical').length,\n  };\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <AuditOutlined /> Audit & Security Dashboard\n        </Title>\n        <Text type=\"secondary\">Monitor security events, audit trails, and compliance status</Text>\n      </div>\n\n      {/* Security Metrics */}\n      <Row gutter={16} style={{ marginBottom: 24 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Events\"\n              value={securityMetrics.totalEvents}\n              prefix={<AuditOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Security Events\"\n              value={securityMetrics.securityEvents}\n              prefix={<SecurityScanOutlined />}\n              valueStyle={{ color: '#faad14' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Failed Logins\"\n              value={securityMetrics.failedLogins}\n              prefix={<WarningOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Critical Events\"\n              value={securityMetrics.criticalEvents}\n              prefix={<AlertOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Security Alerts */}\n      {securityAlerts.length > 0 && (\n        <Card\n          title={\n            <span>\n              <AlertOutlined /> Active Security Alerts\n            </span>\n          }\n          style={{ marginBottom: 24 }}\n        >\n          {securityAlerts.map((alert) => (\n            <Alert\n              key={alert.id}\n              message={alert.title}\n              description={alert.description}\n              type={\n                alert.severity === 'critical'\n                  ? 'error'\n                  : alert.severity === 'high'\n                    ? 'warning'\n                    : 'info'\n              }\n              showIcon\n              style={{ marginBottom: 8 }}\n              action={\n                <Button size=\"small\" type=\"link\">\n                  Investigate\n                </Button>\n              }\n            />\n          ))}\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card\n        title={\n          <span>\n            <FilterOutlined /> Filters & Search\n          </span>\n        }\n        style={{ marginBottom: 24 }}\n        extra={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadAuditData} loading={loading}>\n              Refresh\n            </Button>\n            <Button icon={<ExportOutlined />} onClick={() => setExportModalVisible(true)}>\n              Export\n            </Button>\n            <Button icon={<CheckCircleOutlined />} onClick={generateComplianceReport}>\n              Generate Report\n            </Button>\n          </Space>\n        }\n      >\n        <Space wrap style={{ marginBottom: 16 }}>\n          <RangePicker\n            value={dateRange}\n            onChange={setDateRange}\n            showTime\n            format=\"YYYY-MM-DD HH:mm\"\n            placeholder={['Start Date', 'End Date']}\n          />\n\n          <Select\n            placeholder=\"Select User\"\n            value={selectedUser}\n            onChange={setSelectedUser}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueUsers.map((user) => (\n              <Option key={user} value={user}>\n                {user}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Action\"\n            value={selectedAction}\n            onChange={setSelectedAction}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueActions.map((action) => (\n              <Option key={action} value={action}>\n                {action}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Resource\"\n            value={selectedResource}\n            onChange={setSelectedResource}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueResources.map((resource) => (\n              <Option key={resource} value={resource}>\n                {resource}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Severity\"\n            value={selectedSeverity}\n            onChange={setSelectedSeverity}\n            allowClear\n            style={{ width: 120 }}\n          >\n            <Option value=\"low\">Low</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"high\">High</Option>\n            <Option value=\"critical\">Critical</Option>\n          </Select>\n\n          <Select\n            placeholder=\"Category\"\n            value={selectedCategory}\n            onChange={setSelectedCategory}\n            allowClear\n            style={{ width: 150 }}\n          >\n            <Option value=\"authentication\">Authentication</Option>\n            <Option value=\"authorization\">Authorization</Option>\n            <Option value=\"workflow\">Workflow</Option>\n            <Option value=\"credential\">Credential</Option>\n            <Option value=\"organization\">Organization</Option>\n            <Option value=\"user_management\">User Management</Option>\n          </Select>\n\n          <Button onClick={clearFilters}>Clear Filters</Button>\n        </Space>\n\n        <Search\n          placeholder=\"Search events...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ width: 300 }}\n        />\n      </Card>\n\n      {/* Audit Events Table */}\n      <Card\n        title={\n          <span>\n            <AuditOutlined /> Audit Events ({filteredEvents.length})\n          </span>\n        }\n      >\n        <Table\n          dataSource={filteredEvents}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 50,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} events`,\n          }}\n          scroll={{ x: 1200 }}\n        />\n      </Card>\n\n      {/* Event Details Modal */}\n      <Modal\n        title=\"Event Details\"\n        open={!!selectedEvent}\n        onCancel={() => setSelectedEvent(null)}\n        footer={null}\n        width={800}\n      >\n        {selectedEvent && (\n          <Descriptions column={2} bordered>\n            <Descriptions.Item label=\"Timestamp\">\n              {selectedEvent.timestamp.toLocaleString()}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User\">\n              {selectedEvent.userName} ({selectedEvent.userId})\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Action\">\n              <Tag color=\"blue\">{selectedEvent.action}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Resource\">\n              <Tag color=\"purple\">{selectedEvent.resource}</Tag>\n              {selectedEvent.resourceId && ` (${selectedEvent.resourceId})`}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Result\">\n              <Tag color={getResultColor(selectedEvent.result)}>{selectedEvent.result}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Severity\">\n              <Tag color={getSeverityColor(selectedEvent.severity)}>{selectedEvent.severity}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Category\">\n              <Tag>{selectedEvent.category}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"IP Address\">\n              <GlobalOutlined /> {selectedEvent.ipAddress}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Organization\" span={2}>\n              {selectedEvent.organizationId || 'N/A'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Details\" span={2}>\n              <pre\n                style={{\n                  fontSize: '12px',\n                  background: '#f5f5f5',\n                  padding: '8px',\n                  borderRadius: '4px',\n                }}\n              >\n                {JSON.stringify(selectedEvent.details, null, 2)}\n              </pre>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User Agent\" span={2}>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                {selectedEvent.userAgent}\n              </Text>\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Export Modal */}\n      <Modal\n        title=\"Export Audit Data\"\n        open={exportModalVisible}\n        onCancel={() => setExportModalVisible(false)}\n        footer={null}\n      >\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Text>Select export format:</Text>\n          <Space>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('json')} type=\"primary\">\n              Export as JSON\n            </Button>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('csv')}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 317,
        "end": 692,
        "startLoc": {
          "line": 317,
          "column": 6,
          "position": 2896
        },
        "endLoc": {
          "line": 692,
          "column": 2,
          "position": 5915
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 319,
        "end": 694,
        "startLoc": {
          "line": 319,
          "column": 6,
          "position": 2922
        },
        "endLoc": {
          "line": 694,
          "column": 2,
          "position": 5941
        }
      }
    },
    {
      "format": "tsx",
      "lines": 42,
      "fragment": "import {\n  AlertOutlined,\n  AuditOutlined,\n  CheckCircleOutlined,\n  DownloadOutlined,\n  ExportOutlined,\n  EyeOutlined,\n  FilterOutlined,\n  GlobalOutlined,\n  ReloadOutlined,\n  SecurityScanOutlined,\n  UserOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Descriptions,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  Statistic,\n  Table,\n  Tag,\n  Typography,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type AuditEvent,\n  type AuditFilter,\n  auditService,\n  type ComplianceReport,\n  type SecurityAlert,\n} from '@/core/services/auditService';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 1,
        "end": 42,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 42,
          "column": 6,
          "position": 197
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 1,
        "end": 41,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 41,
          "column": 7,
          "position": 196
        }
      }
    },
    {
      "format": "tsx",
      "lines": 664,
      "fragment": ";\n\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\nconst { Search } = Input;\nconst { Title, Text } = Typography;\n\nexport const AuditDashboard: React.FC = () => {\n  const [events, setEvents] = useState<AuditEvent[]>([]);\n  const [filteredEvents, setFilteredEvents] = useState<AuditEvent[]>([]);\n  const [securityAlerts, setSecurityAlerts] = useState<SecurityAlert[]>([]);\n  const [complianceReports, setComplianceReports] = useState<ComplianceReport[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<AuditEvent | null>(null);\n  const [filter, setFilter] = useState<AuditFilter>({});\n  const [exportModalVisible, setExportModalVisible] = useState(false);\n\n  // Filter states\n  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<string>();\n  const [selectedAction, setSelectedAction] = useState<string>();\n  const [selectedResource, setSelectedResource] = useState<string>();\n  const [selectedSeverity, setSelectedSeverity] = useState<string>();\n  const [selectedCategory, setSelectedCategory] = useState<string>();\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    loadAuditData();\n  }, [loadAuditData]);\n\n  useEffect(() => {\n    applyFilters();\n  }, [applyFilters]);\n\n  const loadAuditData = async () => {\n    setLoading(true);\n    try {\n      // In a real app, these would be API calls\n      const mockEvents: AuditEvent[] = [\n        {\n          id: '1',\n          timestamp: new Date(Date.now() - 3600000),\n          userId: 'user1',\n          userName: 'John Doe',\n          action: 'login',\n          resource: 'authentication',\n          details: { success: true },\n          ipAddress: '192.168.1.100',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'low',\n          category: 'authentication',\n          result: 'success',\n        },\n        {\n          id: '2',\n          timestamp: new Date(Date.now() - 7200000),\n          userId: 'user2',\n          userName: 'Jane Smith',\n          action: 'execute',\n          resource: 'workflow',\n          resourceId: 'wf123',\n          details: { workflowName: 'Data Pipeline', executionId: 'exec456' },\n          ipAddress: '192.168.1.101',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'medium',\n          category: 'workflow',\n          result: 'success',\n        },\n        {\n          id: '3',\n          timestamp: new Date(Date.now() - 10800000),\n          userId: 'user3',\n          userName: 'Bob Wilson',\n          action: 'delete',\n          resource: 'workflow',\n          resourceId: 'wf789',\n          details: { workflowName: 'Legacy Process' },\n          ipAddress: '192.168.1.102',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'high',\n          category: 'workflow',\n          result: 'success',\n        },\n        {\n          id: '4',\n          timestamp: new Date(Date.now() - 14400000),\n          userId: 'user1',\n          userName: 'John Doe',\n          action: 'login',\n          resource: 'authentication',\n          details: { success: false },\n          ipAddress: '192.168.1.100',\n          userAgent: 'Mozilla/5.0...',\n          organizationId: 'org1',\n          severity: 'medium',\n          category: 'authentication',\n          result: 'failure',\n        },\n      ];\n\n      const mockAlerts: SecurityAlert[] = [\n        {\n          id: 'alert1',\n          type: 'failed_login_attempts',\n          severity: 'high',\n          title: 'Multiple Failed Login Attempts',\n          description: 'User john.doe@example.com has 5 failed login attempts in the last hour',\n          triggeredAt: new Date(Date.now() - 1800000),\n          userId: 'user1',\n          organizationId: 'org1',\n          events: [mockEvents[3]],\n          status: 'open',\n        },\n      ];\n\n      setEvents(mockEvents);\n      setSecurityAlerts(mockAlerts);\n    } catch (_error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilters = async () => {\n    const newFilter: AuditFilter = {\n      ...filter,\n      startDate: dateRange?.[0]?.toDate(),\n      endDate: dateRange?.[1]?.toDate(),\n      userId: selectedUser,\n      action: selectedAction,\n      resource: selectedResource,\n      severity: selectedSeverity as any,\n      category: selectedCategory as any,\n      searchTerm,\n    };\n\n    try {\n      const filtered = await auditService.getEvents(newFilter, 1000, 0);\n      setFilteredEvents(\n        filtered.length > 0\n          ? filtered\n          : events.filter((event) => {\n              if (newFilter.startDate && event.timestamp < newFilter.startDate) return false;\n              if (newFilter.endDate && event.timestamp > newFilter.endDate) return false;\n              if (newFilter.userId && event.userId !== newFilter.userId) return false;\n              if (newFilter.action && !event.action.includes(newFilter.action)) return false;\n              if (newFilter.resource && event.resource !== newFilter.resource) return false;\n              if (newFilter.severity && event.severity !== newFilter.severity) return false;\n              if (newFilter.category && event.category !== newFilter.category) return false;\n              if (newFilter.searchTerm) {\n                const searchLower = newFilter.searchTerm.toLowerCase();\n                const matchesSearch =\n                  event.action.toLowerCase().includes(searchLower) ||\n                  event.resource.toLowerCase().includes(searchLower) ||\n                  event.userName.toLowerCase().includes(searchLower) ||\n                  JSON.stringify(event.details).toLowerCase().includes(searchLower);\n                if (!matchesSearch) return false;\n              }\n              return true;\n            })\n      );\n    } catch (_error) {\n      setFilteredEvents(events);\n    }\n  };\n\n  const clearFilters = () => {\n    setDateRange(null);\n    setSelectedUser(undefined);\n    setSelectedAction(undefined);\n    setSelectedResource(undefined);\n    setSelectedSeverity(undefined);\n    setSelectedCategory(undefined);\n    setSearchTerm('');\n    setFilter({});\n  };\n\n  const exportData = async (format: 'json' | 'csv') => {\n    try {\n      const startDate = dateRange?.[0]?.toDate() || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const endDate = dateRange?.[1]?.toDate() || new Date();\n\n      const data = await auditService.exportAuditData('org1', startDate, endDate, format);\n\n      const blob = new Blob([data], {\n        type: format === 'json' ? 'application/json' : 'text/csv',\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `audit-log-${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      setExportModalVisible(false);\n    } catch (_error) {}\n  };\n\n  const generateComplianceReport = async () => {\n    try {\n      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Last 30 days\n      const endDate = new Date();\n\n      const report = await auditService.generateComplianceReport(\n        'org1',\n        startDate,\n        endDate,\n        'current-user'\n      );\n      setComplianceReports([...complianceReports, report]);\n\n      Modal.info({\n        title: 'Compliance Report Generated',\n        content: `Report \"${report.name}\" has been generated successfully. Status: ${report.status}`,\n        width: 600,\n      });\n    } catch (_error) {}\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'gold';\n      case 'low':\n        return 'green';\n      default:\n        return 'default';\n    }\n  };\n\n  const getResultColor = (result: string) => {\n    switch (result) {\n      case 'success':\n        return 'green';\n      case 'failure':\n        return 'red';\n      case 'error':\n        return 'orange';\n      default:\n        return 'default';\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Timestamp',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      width: 180,\n      render: (timestamp: Date) => (\n        <div>\n          <div>{timestamp.toLocaleDateString()}</div>\n          <Text type=\"secondary\">{timestamp.toLocaleTimeString()}</Text>\n        </div>\n      ),\n      sorter: (a: AuditEvent, b: AuditEvent) => b.timestamp.getTime() - a.timestamp.getTime(),\n      defaultSortOrder: 'descend' as const,\n    },\n    {\n      title: 'User',\n      dataIndex: 'userName',\n      key: 'userName',\n      width: 150,\n      render: (userName: string, record: AuditEvent) => (\n        <div>\n          <UserOutlined /> {userName}\n          <br />\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            {record.ipAddress}\n          </Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 120,\n      render: (action: string) => <Tag color=\"blue\">{action}</Tag>,\n    },\n    {\n      title: 'Resource',\n      dataIndex: 'resource',\n      key: 'resource',\n      width: 120,\n      render: (resource: string, record: AuditEvent) => (\n        <div>\n          <Tag color=\"purple\">{resource}</Tag>\n          {record.resourceId && (\n            <div>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                ID: {record.resourceId}\n              </Text>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: 'Result',\n      dataIndex: 'result',\n      key: 'result',\n      width: 100,\n      render: (result: string) => <Tag color={getResultColor(result)}>{result}</Tag>,\n    },\n    {\n      title: 'Severity',\n      dataIndex: 'severity',\n      key: 'severity',\n      width: 100,\n      render: (severity: string) => <Tag color={getSeverityColor(severity)}>{severity}</Tag>,\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 120,\n      render: (category: string) => <Tag>{category}</Tag>,\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 100,\n      render: (_: unknown, record: AuditEvent) => (\n        <Button type=\"link\" icon={<EyeOutlined />} onClick={() => setSelectedEvent(record)}>\n          View\n        </Button>\n      ),\n    },\n  ];\n\n  const uniqueUsers = Array.from(new Set(events.map((e) => e.userName)));\n  const uniqueActions = Array.from(new Set(events.map((e) => e.action)));\n  const uniqueResources = Array.from(new Set(events.map((e) => e.resource)));\n\n  const securityMetrics = {\n    totalEvents: filteredEvents.length,\n    securityEvents: filteredEvents.filter(\n      (e) =>\n        e.category === 'authentication' ||\n        e.category === 'authorization' ||\n        e.severity === 'high' ||\n        e.severity === 'critical'\n    ).length,\n    failedLogins: filteredEvents.filter((e) => e.action === 'login' && e.result === 'failure')\n      .length,\n    criticalEvents: filteredEvents.filter((e) => e.severity === 'critical').length,\n  };\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <AuditOutlined /> Audit & Security Dashboard\n        </Title>\n        <Text type=\"secondary\">Monitor security events, audit trails, and compliance status</Text>\n      </div>\n\n      {/* Security Metrics */}\n      <Row gutter={16} style={{ marginBottom: 24 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Events\"\n              value={securityMetrics.totalEvents}\n              prefix={<AuditOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Security Events\"\n              value={securityMetrics.securityEvents}\n              prefix={<SecurityScanOutlined />}\n              valueStyle={{ color: '#faad14' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Failed Logins\"\n              value={securityMetrics.failedLogins}\n              prefix={<WarningOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Critical Events\"\n              value={securityMetrics.criticalEvents}\n              prefix={<AlertOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Security Alerts */}\n      {securityAlerts.length > 0 && (\n        <Card\n          title={\n            <span>\n              <AlertOutlined /> Active Security Alerts\n            </span>\n          }\n          style={{ marginBottom: 24 }}\n        >\n          {securityAlerts.map((alert) => (\n            <Alert\n              key={alert.id}\n              message={alert.title}\n              description={alert.description}\n              type={\n                alert.severity === 'critical'\n                  ? 'error'\n                  : alert.severity === 'high'\n                    ? 'warning'\n                    : 'info'\n              }\n              showIcon\n              style={{ marginBottom: 8 }}\n              action={\n                <Button size=\"small\" type=\"link\">\n                  Investigate\n                </Button>\n              }\n            />\n          ))}\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card\n        title={\n          <span>\n            <FilterOutlined /> Filters & Search\n          </span>\n        }\n        style={{ marginBottom: 24 }}\n        extra={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadAuditData} loading={loading}>\n              Refresh\n            </Button>\n            <Button icon={<ExportOutlined />} onClick={() => setExportModalVisible(true)}>\n              Export\n            </Button>\n            <Button icon={<CheckCircleOutlined />} onClick={generateComplianceReport}>\n              Generate Report\n            </Button>\n          </Space>\n        }\n      >\n        <Space wrap style={{ marginBottom: 16 }}>\n          <RangePicker\n            value={dateRange}\n            onChange={setDateRange}\n            showTime\n            format=\"YYYY-MM-DD HH:mm\"\n            placeholder={['Start Date', 'End Date']}\n          />\n\n          <Select\n            placeholder=\"Select User\"\n            value={selectedUser}\n            onChange={setSelectedUser}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueUsers.map((user) => (\n              <Option key={user} value={user}>\n                {user}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Action\"\n            value={selectedAction}\n            onChange={setSelectedAction}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueActions.map((action) => (\n              <Option key={action} value={action}>\n                {action}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Select Resource\"\n            value={selectedResource}\n            onChange={setSelectedResource}\n            allowClear\n            style={{ width: 150 }}\n          >\n            {uniqueResources.map((resource) => (\n              <Option key={resource} value={resource}>\n                {resource}\n              </Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"Severity\"\n            value={selectedSeverity}\n            onChange={setSelectedSeverity}\n            allowClear\n            style={{ width: 120 }}\n          >\n            <Option value=\"low\">Low</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"high\">High</Option>\n            <Option value=\"critical\">Critical</Option>\n          </Select>\n\n          <Select\n            placeholder=\"Category\"\n            value={selectedCategory}\n            onChange={setSelectedCategory}\n            allowClear\n            style={{ width: 150 }}\n          >\n            <Option value=\"authentication\">Authentication</Option>\n            <Option value=\"authorization\">Authorization</Option>\n            <Option value=\"workflow\">Workflow</Option>\n            <Option value=\"credential\">Credential</Option>\n            <Option value=\"organization\">Organization</Option>\n            <Option value=\"user_management\">User Management</Option>\n          </Select>\n\n          <Button onClick={clearFilters}>Clear Filters</Button>\n        </Space>\n\n        <Search\n          placeholder=\"Search events...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ width: 300 }}\n        />\n      </Card>\n\n      {/* Audit Events Table */}\n      <Card\n        title={\n          <span>\n            <AuditOutlined /> Audit Events ({filteredEvents.length})\n          </span>\n        }\n      >\n        <Table\n          dataSource={filteredEvents}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 50,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} events`,\n          }}\n          scroll={{ x: 1200 }}\n        />\n      </Card>\n\n      {/* Event Details Modal */}\n      <Modal\n        title=\"Event Details\"\n        open={!!selectedEvent}\n        onCancel={() => setSelectedEvent(null)}\n        footer={null}\n        width={800}\n      >\n        {selectedEvent && (\n          <Descriptions column={2} bordered>\n            <Descriptions.Item label=\"Timestamp\">\n              {selectedEvent.timestamp.toLocaleString()}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User\">\n              {selectedEvent.userName} ({selectedEvent.userId})\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Action\">\n              <Tag color=\"blue\">{selectedEvent.action}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Resource\">\n              <Tag color=\"purple\">{selectedEvent.resource}</Tag>\n              {selectedEvent.resourceId && ` (${selectedEvent.resourceId})`}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Result\">\n              <Tag color={getResultColor(selectedEvent.result)}>{selectedEvent.result}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Severity\">\n              <Tag color={getSeverityColor(selectedEvent.severity)}>{selectedEvent.severity}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Category\">\n              <Tag>{selectedEvent.category}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"IP Address\">\n              <GlobalOutlined /> {selectedEvent.ipAddress}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Organization\" span={2}>\n              {selectedEvent.organizationId || 'N/A'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Details\" span={2}>\n              <pre\n                style={{\n                  fontSize: '12px',\n                  background: '#f5f5f5',\n                  padding: '8px',\n                  borderRadius: '4px',\n                }}\n              >\n                {JSON.stringify(selectedEvent.details, null, 2)}\n              </pre>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"User Agent\" span={2}>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                {selectedEvent.userAgent}\n              </Text>\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Export Modal */}\n      <Modal\n        title=\"Export Audit Data\"\n        open={exportModalVisible}\n        onCancel={() => setExportModalVisible(false)}\n        footer={null}\n      >\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Text>Select export format:</Text>\n          <Space>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('json')} type=\"primary\">\n              Export as JSON\n            </Button>\n            <Button icon={<DownloadOutlined />} onClick={() => exportData('csv')}>\n              Export as CSV\n            </Button>\n          </Space>\n          <Text type=\"secondary\">\n            Export will include all events within the selected date range.\n          </Text>\n        </Space>\n      </Modal>\n    </div>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/AuditDashboard.tsx",
        "start": 40,
        "end": 703,
        "startLoc": {
          "line": 40,
          "column": 31,
          "position": 194
        },
        "endLoc": {
          "line": 703,
          "column": 2,
          "position": 5993
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AuditDashboard/auditdashboard/AuditDashboard.tsx",
        "start": 42,
        "end": 705,
        "startLoc": {
          "line": 42,
          "column": 19,
          "position": 220
        },
        "endLoc": {
          "line": 705,
          "column": 2,
          "position": 6019
        }
      }
    },
    {
      "format": "javascript",
      "lines": 528,
      "fragment": "={color}>{status}</Tag>;\n      },\n    },\n    {\n      title: 'Quality',\n      dataIndex: 'qualityScore',\n      key: 'qualityScore',\n      width: 100,\n      render: (score: number) => (\n        <Progress\n          percent={Math.round(score * 100)}\n          size=\"small\"\n          status={score >= 0.8 ? 'success' : score >= 0.6 ? 'normal' : 'exception'}\n        />\n      ),\n    },\n    {\n      title: 'Cost',\n      dataIndex: 'totalCost',\n      key: 'totalCost',\n      width: 80,\n      render: (cost: number) => <Text>${cost.toFixed(4)}</Text>,\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (_: unknown, record: AIWorkflowExecution) => {\n        if (!record.endTime) return '-';\n        const duration = record.endTime.getTime() - record.startTime.getTime();\n        return <Text>{(duration / 1000).toFixed(1)}s</Text>;\n      },\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'builder',\n      label: (\n        <span>\n          <SettingOutlined />\n          AI Builder\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Row gutter={[24, 24]}>\n            <Col span={12}>\n              <Card title=\"AI Model Configuration\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Select AI Model</Text>\n                    <Select\n                      value={selectedModel}\n                      onChange={setSelectedModel}\n                      style={{ width: '100%', marginTop: 8 }}\n                      placeholder=\"Choose an AI model\"\n                    >\n                      {availableModels.map((model) => (\n                        <Option key={model.id} value={model.id}>\n                          <div\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                            }}\n                          >\n                            <span>\n                              {getModelIcon(model)} {model.name}\n                            </span>\n                            <div>\n                              <Tag>{model.provider}</Tag>\n                              <Tag color=\"blue\">${model.costPer1kTokens}/1k</Tag>\n                            </div>\n                          </div>\n                        </Option>\n                      ))}\n                    </Select>\n                  </div>\n\n                  {selectedModel &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      return (\n                        <div>\n                          <Divider style={{ margin: '16px 0' }} />\n                          <div style={{ marginBottom: 16 }}>\n                            <Text strong>Model Details</Text>\n                            <div style={{ marginTop: 8 }}>\n                              <div>\n                                <Text type=\"secondary\">Type:</Text> <Tag>{model.type}</Tag>\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Input:</Text>\n                                {model.inputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Output:</Text>\n                                {model.outputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Context Window:</Text>{' '}\n                                <Text>{model.contextWindow.toLocaleString()} tokens</Text>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Text strong>Capabilities</Text>\n                            <div style={{ marginTop: 8 }}>\n                              {model.capabilities.map((cap) => (\n                                <Tag key={cap.name} color=\"purple\">\n                                  {cap.name} ({cap.proficiency}/5)\n                                </Tag>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })()}\n\n                  <Divider />\n\n                  <div>\n                    <Text strong>Main Prompt</Text>\n                    <TextArea\n                      value={nodeConfig.prompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          prompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter your main prompt here...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>System Prompt (Optional)</Text>\n                    <TextArea\n                      value={nodeConfig.systemPrompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          systemPrompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter system instructions...\"\n                      rows={3}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Temperature</Text>\n                        <Slider\n                          min={0}\n                          max={2}\n                          step={0.1}\n                          value={nodeConfig.temperature}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              temperature: value,\n                            }))\n                          }\n                          style={{ marginTop: 8 }}\n                        />\n                        <Text type=\"secondary\">Current: {nodeConfig.temperature}</Text>\n                      </div>\n                    </Col>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Max Tokens</Text>\n                        <InputNumber\n                          min={1}\n                          max={\n                            selectedModel\n                              ? availableModels.find((m) => m.id === selectedModel)?.maxTokens\n                              : 4096\n                          }\n                          value={nodeConfig.maxTokens}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              maxTokens: value || 1000,\n                            }))\n                          }\n                          style={{ width: '100%', marginTop: 8 }}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </Space>\n              </Card>\n            </Col>\n\n            <Col span={12}>\n              <Card title=\"Multi-Modal Inputs\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Text Input</Text>\n                    <TextArea\n                      value={workflowInputs.text || ''}\n                      onChange={(e) =>\n                        setWorkflowInputs((prev) => ({\n                          ...prev,\n                          text: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter text input for the AI model...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>File Uploads</Text>\n                    <Dragger\n                      multiple\n                      beforeUpload={handleFileUpload}\n                      showUploadList={false}\n                      style={{ marginTop: 8 }}\n                    >\n                      <p className=\"ant-upload-drag-icon\">\n                        <CloudUploadOutlined />\n                      </p>\n                      <p className=\"ant-upload-text\">Click or drag files to upload</p>\n                      <p className=\"ant-upload-hint\">\n                        Support for images, audio, video, and documents\n                      </p>\n                    </Dragger>\n                  </div>\n\n                  {uploadedFiles.length > 0 && (\n                    <div>\n                      <Text strong>Uploaded Files</Text>\n                      <div style={{ marginTop: 8 }}>\n                        {uploadedFiles.map((file, index) => (\n                          <Tag\n                            key={index}\n                            icon={getModalityIcon(file.type.split('/')[0])}\n                            style={{ marginBottom: 4, marginRight: 4 }}\n                          >\n                            {file.name}\n                          </Tag>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Divider />\n\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={handleExecuteWorkflow}\n                    loading={isExecuting}\n                    disabled={!selectedModel || !nodeConfig.prompt}\n                    icon={<PlayCircleOutlined />}\n                    style={{ width: '100%' }}\n                  >\n                    {isExecuting ? 'Executing...' : 'Execute AI Workflow'}\n                  </Button>\n\n                  {selectedModel &&\n                    nodeConfig.prompt &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      const estimatedTokens = Math.ceil((nodeConfig.prompt?.length || 0) / 4);\n                      const estimatedCost = (estimatedTokens / 1000) * model.costPer1kTokens;\n\n                      return (\n                        <Alert\n                          message=\"Execution Estimate\"\n                          description={\n                            <div>\n                              <div>Estimated tokens: ~{estimatedTokens}</div>\n                              <div>Estimated cost: ${estimatedCost.toFixed(4)}</div>\n                            </div>\n                          }\n                          type=\"info\"\n                          showIcon\n                        />\n                      );\n                    })()}\n                </Space>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'execution',\n      label: (\n        <span>\n          <PlayCircleOutlined />\n          Execution Results\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          {currentExecution ? (\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Card title={`Execution ${currentExecution.id.slice(-8)}`} size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Status\"\n                        value={currentExecution.status}\n                        valueStyle={{\n                          color: currentExecution.status === 'completed' ? '#3f8600' : '#cf1322',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Quality Score\"\n                        value={Math.round(currentExecution.qualityScore * 100)}\n                        suffix=\"%\"\n                        valueStyle={{\n                          color: currentExecution.qualityScore >= 0.8 ? '#3f8600' : '#fa8c16',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Total Cost\"\n                        value={currentExecution.totalCost}\n                        prefix=\"$\"\n                        precision={4}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic title=\"Tokens Used\" value={currentExecution.totalTokens} />\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Node Executions\" size=\"small\">\n                  <Timeline>\n                    {currentExecution.nodeExecutions.map((nodeExec, index) => (\n                      <Timeline.Item\n                        key={index}\n                        color={\n                          nodeExec.status === 'completed'\n                            ? 'green'\n                            : nodeExec.status === 'failed'\n                              ? 'red'\n                              : 'blue'\n                        }\n                      >\n                        <div>\n                          <Text strong>Node {nodeExec.nodeId}</Text>\n                          <div style={{ marginTop: 4 }}>\n                            <Tag color={nodeExec.status === 'completed' ? 'green' : 'red'}>\n                              {nodeExec.status}\n                            </Tag>\n                            <Text type=\"secondary\">\n                              {nodeExec.endTime\n                                ? `${((nodeExec.endTime.getTime() - nodeExec.startTime.getTime()) / 1000).toFixed(1)}s`\n                                : 'Running...'}\n                            </Text>\n                          </div>\n                          {nodeExec.outputs.length > 0 && (\n                            <div\n                              style={{\n                                marginTop: 8,\n                                padding: 8,\n                                background: '#f5f5f5',\n                                borderRadius: 4,\n                              }}\n                            >\n                              <Text style={{ fontSize: '12px' }}>\n                                {typeof nodeExec.outputs[0].content === 'string'\n                                  ? nodeExec.outputs[0].content.slice(0, 200) +\n                                    (nodeExec.outputs[0].content.length > 200 ? '...' : '')\n                                  : JSON.stringify(nodeExec.outputs[0].content).slice(0, 200)}\n                              </Text>\n                            </div>\n                          )}\n                        </div>\n                      </Timeline.Item>\n                    ))}\n                  </Timeline>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Quality Metrics\" size=\"small\">\n                  {currentExecution.nodeExecutions.length > 0 && (\n                    <div>\n                      {Object.entries(currentExecution.nodeExecutions[0].qualityMetrics).map(\n                        ([metric, value]) => (\n                          <div key={metric} style={{ marginBottom: 8 }}>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                marginBottom: 4,\n                              }}\n                            >\n                              <Text>{metric.charAt(0).toUpperCase() + metric.slice(1)}</Text>\n                              <Text>{Math.round(value * 100)}%</Text>\n                            </div>\n                            <Progress\n                              percent={Math.round(value * 100)}\n                              size=\"small\"\n                              status={\n                                value >= 0.8 ? 'success' : value >= 0.6 ? 'normal' : 'exception'\n                              }\n                              showInfo={false}\n                            />\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </Card>\n\n                {currentExecution.insights.length > 0 && (\n                  <Card title=\"AI Insights\" size=\"small\" style={{ marginTop: 16 }}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      {currentExecution.insights.map((insight, index) => (\n                        <Alert\n                          key={index}\n                          message={insight.message}\n                          description={insight.recommendation}\n                          type={insight.impact === 'high' ? 'warning' : 'info'}\n                          showIcon\n                          style={{ fontSize: '12px' }}\n                        />\n                      ))}\n                    </Space>\n                  </Card>\n                )}\n              </Col>\n            </Row>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '48px' }}>\n              <ExperimentOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\n              <Title level={4} type=\"secondary\">\n                No execution results yet\n              </Title>\n              <Paragraph type=\"secondary\">\n                Execute a workflow from the AI Builder tab to see results here\n              </Paragraph>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'history',\n      label: (\n        <span>\n          <BarChartOutlined />\n          Execution History\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Card title=\"Execution History\" size=\"small\">\n            <Table\n              dataSource={executionHistory}\n              columns={executionColumns}\n              rowKey=\"id\"\n              pagination={{ pageSize: 10 }}\n              onRow={(record) => ({\n                onClick: () => setCurrentExecution(record),\n              })}\n              style={{ cursor: 'pointer' }}\n            />\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Modal\n      title={\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ExperimentOutlined style={{ marginRight: 8 }} />\n          AI Workflow Studio\n          <Badge count=\"Beta\" style={{ marginLeft: 8 }} />\n        </div>\n      }\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width=\"90%\"\n      style={{ top: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabs}\n        style={{ minHeight: '70vh' }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 228,
        "end": 755,
        "startLoc": {
          "line": 228,
          "column": 6,
          "position": 1862
        },
        "endLoc": {
          "line": 755,
          "column": 2,
          "position": 6171
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 230,
        "end": 757,
        "startLoc": {
          "line": 230,
          "column": 6,
          "position": 1888
        },
        "endLoc": {
          "line": 757,
          "column": 2,
          "position": 6197
        }
      }
    },
    {
      "format": "tsx",
      "lines": 51,
      "fragment": "import {\n  AudioOutlined,\n  BarChartOutlined,\n  CloudUploadOutlined,\n  CodeOutlined,\n  ExperimentOutlined,\n  EyeOutlined,\n  FileImageOutlined,\n  FileTextOutlined,\n  PlayCircleOutlined,\n  RobotOutlined,\n  SettingOutlined,\n  SoundOutlined,\n  ThunderboltOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Col,\n  Divider,\n  Input,\n  InputNumber,\n  Modal,\n  message,\n  Progress,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Statistic,\n  Table,\n  Tabs,\n  Tag,\n  Timeline,\n  Typography,\n  Upload,\n} from 'antd';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  type AIModel,\n  type AINodeConfig,\n  type AIWorkflowExecution,\n  aiOrchestrationService,\n  type MultiModalWorkflow,\n} from '@/core/services/aiOrchestrationService';\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 1,
        "end": 51,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 51,
          "column": 6,
          "position": 233
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 7,
          "position": 232
        }
      }
    },
    {
      "format": "tsx",
      "lines": 711,
      "fragment": ";\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\ninterface AIWorkflowStudioProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nexport const AIWorkflowStudio: React.FC<AIWorkflowStudioProps> = ({ visible, onClose }) => {\n  const [availableModels, setAvailableModels] = useState<AIModel[]>([]);\n  const [selectedModel, setSelectedModel] = useState<string>('');\n  const [nodeConfig, setNodeConfig] = useState<Partial<AINodeConfig>>({\n    prompt: '',\n    systemPrompt: '',\n    temperature: 0.7,\n    maxTokens: 1000,\n  });\n  const [currentExecution, setCurrentExecution] = useState<AIWorkflowExecution | null>(null);\n  const [executionHistory, setExecutionHistory] = useState<AIWorkflowExecution[]>([]);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [activeTab, setActiveTab] = useState('builder');\n  const [uploadedFiles, setUploadedFiles] = useState<any[]>([]);\n  const [workflowInputs, setWorkflowInputs] = useState<Record<string, any>>({});\n\n  useEffect(() => {\n    if (visible) {\n      loadAvailableModels();\n    }\n  }, [visible, loadAvailableModels]);\n\n  const loadAvailableModels = () => {\n    const models = aiOrchestrationService.getAvailableModels();\n    setAvailableModels(models);\n    if (models.length > 0) {\n      setSelectedModel(models[0].id);\n    }\n  };\n\n  const handleExecuteWorkflow = async () => {\n    if (!selectedModel) {\n      message.error('Please select an AI model');\n      return;\n    }\n\n    setIsExecuting(true);\n    try {\n      // Create a simple workflow for demonstration\n      const workflow: Omit<MultiModalWorkflow, 'id'> = {\n        name: 'AI Studio Workflow',\n        description: 'Interactive AI workflow execution',\n        inputTypes: ['text', 'image', 'audio'],\n        outputTypes: ['text', 'structured_data'],\n        nodes: [\n          {\n            id: 'main-node',\n            type: 'ai_reasoning',\n            config: {\n              modelId: selectedModel,\n              ...nodeConfig,\n            } as AINodeConfig,\n            dependencies: [],\n            outputs: [],\n            retryPolicy: {\n              maxRetries: 2,\n              backoffStrategy: 'exponential',\n              retryConditions: ['error', 'low_confidence'],\n              fallbackStrategy: 'different_model',\n            },\n          },\n        ],\n        edges: [],\n        triggers: [{ type: 'manual', config: {}, enabled: true }],\n        metadata: {\n          version: '1.0.0',\n          author: 'AI Studio',\n          tags: ['interactive', 'multi-modal'],\n          category: 'experimental',\n          complexity: 'simple',\n          estimatedCost: 0.1,\n          estimatedTime: 5000,\n          lastUpdated: new Date(),\n        },\n      };\n\n      const createdWorkflow = await aiOrchestrationService.createMultiModalWorkflow(workflow);\n      const execution = await aiOrchestrationService.executeWorkflow(\n        createdWorkflow.id,\n        workflowInputs\n      );\n\n      setCurrentExecution(execution);\n      setExecutionHistory((prev: AIWorkflowExecution[]) => [execution, ...prev]);\n      message.success('Workflow executed successfully!');\n    } catch (error: any) {\n      message.error(`Execution failed: ${error.message}`);\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  const handleFileUpload = (file: any) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const fileData = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        content: e.target?.result,\n        timestamp: new Date(),\n      };\n      setUploadedFiles((prev: any[]) => [...prev, fileData]);\n      setWorkflowInputs((prev: Record<string, any>) => ({\n        ...prev,\n        files: [...(prev.files || []), fileData],\n      }));\n    };\n\n    if (file.type.startsWith('image/')) {\n      reader.readAsDataURL(file);\n    } else if (file.type.startsWith('audio/')) {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reader.readAsText(file);\n    }\n\n    return false; // Prevent auto upload\n  };\n\n  const getModelIcon = (model: AIModel) => {\n    switch (model.type) {\n      case 'language':\n        return <RobotOutlined />;\n      case 'vision':\n        return <EyeOutlined />;\n      case 'speech':\n        return <AudioOutlined />;\n      case 'code':\n        return <CodeOutlined />;\n      case 'multimodal':\n        return <ExperimentOutlined />;\n      default:\n        return <ThunderboltOutlined />;\n    }\n  };\n\n  const getModalityIcon = (modality: string) => {\n    switch (modality) {\n      case 'text':\n        return <FileTextOutlined />;\n      case 'image':\n        return <FileImageOutlined />;\n      case 'audio':\n        return <SoundOutlined />;\n      case 'video':\n        return <VideoCameraOutlined />;\n      default:\n        return <FileTextOutlined />;\n    }\n  };\n\n  const executionColumns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 120,\n      render: (id: string) => <Text code>{id.slice(-8)}</Text>,\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: string) => {\n        const color = status === 'completed' ? 'green' : status === 'failed' ? 'red' : 'blue';\n        return <Tag color={color}>{status}</Tag>;\n      },\n    },\n    {\n      title: 'Quality',\n      dataIndex: 'qualityScore',\n      key: 'qualityScore',\n      width: 100,\n      render: (score: number) => (\n        <Progress\n          percent={Math.round(score * 100)}\n          size=\"small\"\n          status={score >= 0.8 ? 'success' : score >= 0.6 ? 'normal' : 'exception'}\n        />\n      ),\n    },\n    {\n      title: 'Cost',\n      dataIndex: 'totalCost',\n      key: 'totalCost',\n      width: 80,\n      render: (cost: number) => <Text>${cost.toFixed(4)}</Text>,\n    },\n    {\n      title: 'Duration',\n      key: 'duration',\n      width: 100,\n      render: (_: unknown, record: AIWorkflowExecution) => {\n        if (!record.endTime) return '-';\n        const duration = record.endTime.getTime() - record.startTime.getTime();\n        return <Text>{(duration / 1000).toFixed(1)}s</Text>;\n      },\n    },\n  ];\n\n  const tabs = [\n    {\n      key: 'builder',\n      label: (\n        <span>\n          <SettingOutlined />\n          AI Builder\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Row gutter={[24, 24]}>\n            <Col span={12}>\n              <Card title=\"AI Model Configuration\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Select AI Model</Text>\n                    <Select\n                      value={selectedModel}\n                      onChange={setSelectedModel}\n                      style={{ width: '100%', marginTop: 8 }}\n                      placeholder=\"Choose an AI model\"\n                    >\n                      {availableModels.map((model) => (\n                        <Option key={model.id} value={model.id}>\n                          <div\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                            }}\n                          >\n                            <span>\n                              {getModelIcon(model)} {model.name}\n                            </span>\n                            <div>\n                              <Tag>{model.provider}</Tag>\n                              <Tag color=\"blue\">${model.costPer1kTokens}/1k</Tag>\n                            </div>\n                          </div>\n                        </Option>\n                      ))}\n                    </Select>\n                  </div>\n\n                  {selectedModel &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      return (\n                        <div>\n                          <Divider style={{ margin: '16px 0' }} />\n                          <div style={{ marginBottom: 16 }}>\n                            <Text strong>Model Details</Text>\n                            <div style={{ marginTop: 8 }}>\n                              <div>\n                                <Text type=\"secondary\">Type:</Text> <Tag>{model.type}</Tag>\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Input:</Text>\n                                {model.inputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Output:</Text>\n                                {model.outputModalities.map((modality) => (\n                                  <Tag\n                                    key={modality}\n                                    icon={getModalityIcon(modality)}\n                                    style={{ marginLeft: 4 }}\n                                  >\n                                    {modality}\n                                  </Tag>\n                                ))}\n                              </div>\n                              <div style={{ marginTop: 4 }}>\n                                <Text type=\"secondary\">Context Window:</Text>{' '}\n                                <Text>{model.contextWindow.toLocaleString()} tokens</Text>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Text strong>Capabilities</Text>\n                            <div style={{ marginTop: 8 }}>\n                              {model.capabilities.map((cap) => (\n                                <Tag key={cap.name} color=\"purple\">\n                                  {cap.name} ({cap.proficiency}/5)\n                                </Tag>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })()}\n\n                  <Divider />\n\n                  <div>\n                    <Text strong>Main Prompt</Text>\n                    <TextArea\n                      value={nodeConfig.prompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          prompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter your main prompt here...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>System Prompt (Optional)</Text>\n                    <TextArea\n                      value={nodeConfig.systemPrompt}\n                      onChange={(e) =>\n                        setNodeConfig((prev) => ({\n                          ...prev,\n                          systemPrompt: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter system instructions...\"\n                      rows={3}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Temperature</Text>\n                        <Slider\n                          min={0}\n                          max={2}\n                          step={0.1}\n                          value={nodeConfig.temperature}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              temperature: value,\n                            }))\n                          }\n                          style={{ marginTop: 8 }}\n                        />\n                        <Text type=\"secondary\">Current: {nodeConfig.temperature}</Text>\n                      </div>\n                    </Col>\n                    <Col span={12}>\n                      <div>\n                        <Text strong>Max Tokens</Text>\n                        <InputNumber\n                          min={1}\n                          max={\n                            selectedModel\n                              ? availableModels.find((m) => m.id === selectedModel)?.maxTokens\n                              : 4096\n                          }\n                          value={nodeConfig.maxTokens}\n                          onChange={(value) =>\n                            setNodeConfig((prev) => ({\n                              ...prev,\n                              maxTokens: value || 1000,\n                            }))\n                          }\n                          style={{ width: '100%', marginTop: 8 }}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </Space>\n              </Card>\n            </Col>\n\n            <Col span={12}>\n              <Card title=\"Multi-Modal Inputs\" size=\"small\">\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <div>\n                    <Text strong>Text Input</Text>\n                    <TextArea\n                      value={workflowInputs.text || ''}\n                      onChange={(e) =>\n                        setWorkflowInputs((prev) => ({\n                          ...prev,\n                          text: e.target.value,\n                        }))\n                      }\n                      placeholder=\"Enter text input for the AI model...\"\n                      rows={4}\n                      style={{ marginTop: 8 }}\n                    />\n                  </div>\n\n                  <div>\n                    <Text strong>File Uploads</Text>\n                    <Dragger\n                      multiple\n                      beforeUpload={handleFileUpload}\n                      showUploadList={false}\n                      style={{ marginTop: 8 }}\n                    >\n                      <p className=\"ant-upload-drag-icon\">\n                        <CloudUploadOutlined />\n                      </p>\n                      <p className=\"ant-upload-text\">Click or drag files to upload</p>\n                      <p className=\"ant-upload-hint\">\n                        Support for images, audio, video, and documents\n                      </p>\n                    </Dragger>\n                  </div>\n\n                  {uploadedFiles.length > 0 && (\n                    <div>\n                      <Text strong>Uploaded Files</Text>\n                      <div style={{ marginTop: 8 }}>\n                        {uploadedFiles.map((file, index) => (\n                          <Tag\n                            key={index}\n                            icon={getModalityIcon(file.type.split('/')[0])}\n                            style={{ marginBottom: 4, marginRight: 4 }}\n                          >\n                            {file.name}\n                          </Tag>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Divider />\n\n                  <Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={handleExecuteWorkflow}\n                    loading={isExecuting}\n                    disabled={!selectedModel || !nodeConfig.prompt}\n                    icon={<PlayCircleOutlined />}\n                    style={{ width: '100%' }}\n                  >\n                    {isExecuting ? 'Executing...' : 'Execute AI Workflow'}\n                  </Button>\n\n                  {selectedModel &&\n                    nodeConfig.prompt &&\n                    (() => {\n                      const model = availableModels.find((m) => m.id === selectedModel);\n                      if (!model) return null;\n\n                      const estimatedTokens = Math.ceil((nodeConfig.prompt?.length || 0) / 4);\n                      const estimatedCost = (estimatedTokens / 1000) * model.costPer1kTokens;\n\n                      return (\n                        <Alert\n                          message=\"Execution Estimate\"\n                          description={\n                            <div>\n                              <div>Estimated tokens: ~{estimatedTokens}</div>\n                              <div>Estimated cost: ${estimatedCost.toFixed(4)}</div>\n                            </div>\n                          }\n                          type=\"info\"\n                          showIcon\n                        />\n                      );\n                    })()}\n                </Space>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      ),\n    },\n    {\n      key: 'execution',\n      label: (\n        <span>\n          <PlayCircleOutlined />\n          Execution Results\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          {currentExecution ? (\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Card title={`Execution ${currentExecution.id.slice(-8)}`} size=\"small\">\n                  <Row gutter={16}>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Status\"\n                        value={currentExecution.status}\n                        valueStyle={{\n                          color: currentExecution.status === 'completed' ? '#3f8600' : '#cf1322',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Quality Score\"\n                        value={Math.round(currentExecution.qualityScore * 100)}\n                        suffix=\"%\"\n                        valueStyle={{\n                          color: currentExecution.qualityScore >= 0.8 ? '#3f8600' : '#fa8c16',\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic\n                        title=\"Total Cost\"\n                        value={currentExecution.totalCost}\n                        prefix=\"$\"\n                        precision={4}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Statistic title=\"Tokens Used\" value={currentExecution.totalTokens} />\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Node Executions\" size=\"small\">\n                  <Timeline>\n                    {currentExecution.nodeExecutions.map((nodeExec, index) => (\n                      <Timeline.Item\n                        key={index}\n                        color={\n                          nodeExec.status === 'completed'\n                            ? 'green'\n                            : nodeExec.status === 'failed'\n                              ? 'red'\n                              : 'blue'\n                        }\n                      >\n                        <div>\n                          <Text strong>Node {nodeExec.nodeId}</Text>\n                          <div style={{ marginTop: 4 }}>\n                            <Tag color={nodeExec.status === 'completed' ? 'green' : 'red'}>\n                              {nodeExec.status}\n                            </Tag>\n                            <Text type=\"secondary\">\n                              {nodeExec.endTime\n                                ? `${((nodeExec.endTime.getTime() - nodeExec.startTime.getTime()) / 1000).toFixed(1)}s`\n                                : 'Running...'}\n                            </Text>\n                          </div>\n                          {nodeExec.outputs.length > 0 && (\n                            <div\n                              style={{\n                                marginTop: 8,\n                                padding: 8,\n                                background: '#f5f5f5',\n                                borderRadius: 4,\n                              }}\n                            >\n                              <Text style={{ fontSize: '12px' }}>\n                                {typeof nodeExec.outputs[0].content === 'string'\n                                  ? nodeExec.outputs[0].content.slice(0, 200) +\n                                    (nodeExec.outputs[0].content.length > 200 ? '...' : '')\n                                  : JSON.stringify(nodeExec.outputs[0].content).slice(0, 200)}\n                              </Text>\n                            </div>\n                          )}\n                        </div>\n                      </Timeline.Item>\n                    ))}\n                  </Timeline>\n                </Card>\n              </Col>\n\n              <Col span={12}>\n                <Card title=\"Quality Metrics\" size=\"small\">\n                  {currentExecution.nodeExecutions.length > 0 && (\n                    <div>\n                      {Object.entries(currentExecution.nodeExecutions[0].qualityMetrics).map(\n                        ([metric, value]) => (\n                          <div key={metric} style={{ marginBottom: 8 }}>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                marginBottom: 4,\n                              }}\n                            >\n                              <Text>{metric.charAt(0).toUpperCase() + metric.slice(1)}</Text>\n                              <Text>{Math.round(value * 100)}%</Text>\n                            </div>\n                            <Progress\n                              percent={Math.round(value * 100)}\n                              size=\"small\"\n                              status={\n                                value >= 0.8 ? 'success' : value >= 0.6 ? 'normal' : 'exception'\n                              }\n                              showInfo={false}\n                            />\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </Card>\n\n                {currentExecution.insights.length > 0 && (\n                  <Card title=\"AI Insights\" size=\"small\" style={{ marginTop: 16 }}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      {currentExecution.insights.map((insight, index) => (\n                        <Alert\n                          key={index}\n                          message={insight.message}\n                          description={insight.recommendation}\n                          type={insight.impact === 'high' ? 'warning' : 'info'}\n                          showIcon\n                          style={{ fontSize: '12px' }}\n                        />\n                      ))}\n                    </Space>\n                  </Card>\n                )}\n              </Col>\n            </Row>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '48px' }}>\n              <ExperimentOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\n              <Title level={4} type=\"secondary\">\n                No execution results yet\n              </Title>\n              <Paragraph type=\"secondary\">\n                Execute a workflow from the AI Builder tab to see results here\n              </Paragraph>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'history',\n      label: (\n        <span>\n          <BarChartOutlined />\n          Execution History\n        </span>\n      ),\n      children: (\n        <div style={{ padding: '24px' }}>\n          <Card title=\"Execution History\" size=\"small\">\n            <Table\n              dataSource={executionHistory}\n              columns={executionColumns}\n              rowKey=\"id\"\n              pagination={{ pageSize: 10 }}\n              onRow={(record) => ({\n                onClick: () => setCurrentExecution(record),\n              })}\n              style={{ cursor: 'pointer' }}\n            />\n          </Card>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Modal\n      title={\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ExperimentOutlined style={{ marginRight: 8 }} />\n          AI Workflow Studio\n          <Badge count=\"Beta\" style={{ marginLeft: 8 }} />\n        </div>\n      }\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width=\"90%\"\n      style={{ top: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={tabs}\n        style={{ minHeight: '70vh' }}\n      />\n    </Modal>\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/AIWorkflowStudio.tsx",
        "start": 49,
        "end": 759,
        "startLoc": {
          "line": 49,
          "column": 41,
          "position": 230
        },
        "endLoc": {
          "line": 759,
          "column": 2,
          "position": 6185
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/AIWorkflowStudio/aiworkflowstudio/AIWorkflowStudio.tsx",
        "start": 51,
        "end": 761,
        "startLoc": {
          "line": 51,
          "column": 19,
          "position": 256
        },
        "endLoc": {
          "line": 761,
          "column": 2,
          "position": 6211
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async calculateMemoryTrend",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 124,
        "end": 135,
        "startLoc": {
          "line": 124,
          "column": 11,
          "position": 1314
        },
        "endLoc": {
          "line": 135,
          "column": 21,
          "position": 1400
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async for(input: any): Promise<any> {\n    return this.forUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async setupGCMonitoring",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 136,
        "end": 147,
        "startLoc": {
          "line": 136,
          "column": 28,
          "position": 1422
        },
        "endLoc": {
          "line": 147,
          "column": 18,
          "position": 1508
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 120,
        "end": 131,
        "startLoc": {
          "line": 120,
          "column": 25,
          "position": 1278
        },
        "endLoc": {
          "line": 131,
          "column": 3,
          "position": 1364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async getAverageMetric",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 156,
        "end": 167,
        "startLoc": {
          "line": 156,
          "column": 18,
          "position": 1602
        },
        "endLoc": {
          "line": 167,
          "column": 17,
          "position": 1688
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async updateErrorRate",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 110,
        "end": 121,
        "startLoc": {
          "line": 110,
          "column": 26,
          "position": 1245
        },
        "endLoc": {
          "line": 121,
          "column": 16,
          "position": 1331
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async handleCriticalError",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 28,
          "position": 1425
        },
        "endLoc": {
          "line": 141,
          "column": 20,
          "position": 1511
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 194,
        "end": 205,
        "startLoc": {
          "line": 194,
          "column": 17,
          "position": 2001
        },
        "endLoc": {
          "line": 205,
          "column": 3,
          "position": 2087
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ".execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async getErrorPatterns",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 198,
        "end": 213,
        "startLoc": {
          "line": 198,
          "column": 10,
          "position": 2037
        },
        "endLoc": {
          "line": 213,
          "column": 17,
          "position": 2159
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 16,
          "position": 882
        },
        "endLoc": {
          "line": 87,
          "column": 6,
          "position": 968
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".execute(input);\n  }\n\n  async for(input: any): Promise<any> {\n    return this.forUseCase.execute(input);\n  }\n\n  async if(input: any): Promise<any> {\n    return this.ifUseCase.execute(input);\n  }\n\n  async stop",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/errortracker/ErrorTrackerService.ts",
        "start": 238,
        "end": 249,
        "startLoc": {
          "line": 238,
          "column": 24,
          "position": 2397
        },
        "endLoc": {
          "line": 249,
          "column": 5,
          "position": 2483
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/monitoring/performancemonitor/PerformanceMonitorService.ts",
        "start": 120,
        "end": 131,
        "startLoc": {
          "line": 120,
          "column": 25,
          "position": 1278
        },
        "endLoc": {
          "line": 131,
          "column": 3,
          "position": 1364
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ")\n    .trim()\n    .isLength({ min: 1, max: 100 })\n    .withMessage('Workflow name must be between 1 and 100 characters'),\n\n  body('description')\n    .optional()\n    .trim()\n    .isLength({ max: 500 })\n    .withMessage('Description must not exceed 500 characters'),\n\n  body('nodes').optional",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts",
        "start": 53,
        "end": 64,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 361
        },
        "endLoc": {
          "line": 64,
          "column": 9,
          "position": 445
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/validators/workflowValidators.ts",
        "start": 25,
        "end": 36,
        "startLoc": {
          "line": 25,
          "column": 7,
          "position": 157
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 241
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ") {\n    const workflow = await this.workflowRepository.findOne({\n      _id: id,\n      $or: [{ userId }, { isPublic: true }],\n    });\n\n    if (!workflow) {\n      throw new AppError('Workflow not found', 404);\n    }\n\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts",
        "start": 285,
        "end": 295,
        "startLoc": {
          "line": 285,
          "column": 7,
          "position": 2184
        },
        "endLoc": {
          "line": 295,
          "column": 6,
          "position": 2270
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/workflows/services/WorkflowService.ts",
        "start": 94,
        "end": 104,
        "startLoc": {
          "line": 94,
          "column": 7,
          "position": 741
        },
        "endLoc": {
          "line": 104,
          "column": 7,
          "position": 827
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= async (req: Request, res: Response) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      throw new AppError('Validation failed', 400);\n    }\n\n    const userId = (req as any).user?.id;",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/controllers/NodeExecutionController.ts",
        "start": 16,
        "end": 22,
        "startLoc": {
          "line": 16,
          "column": 2,
          "position": 107
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 192
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/oauth/controllers/OAuthController.ts",
        "start": 16,
        "end": 22,
        "startLoc": {
          "line": 16,
          "column": 2,
          "position": 107
        },
        "endLoc": {
          "line": 22,
          "column": 3,
          "position": 193
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\n\n    if (!sessionId) {\n      res.status(400).json(ApiResponse.error('Session ID is required'));\n      return;\n    }\n\n    const session = await CollaborationSession.findOne({\n      sessionId,\n      isActive: true,\n    });\n\n    if (!session) {\n      res.status(404).json(ApiResponse.error('Session not found'));\n      return;\n    }\n\n    // End the session",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 225,
        "end": 242,
        "startLoc": {
          "line": 225,
          "column": 7,
          "position": 1775
        },
        "endLoc": {
          "line": 242,
          "column": 19,
          "position": 1885
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 186,
        "end": 203,
        "startLoc": {
          "line": 186,
          "column": 5,
          "position": 1519
        },
        "endLoc": {
          "line": 203,
          "column": 19,
          "position": 1629
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 203,
        "end": 216,
        "startLoc": {
          "line": 203,
          "column": 7,
          "position": 1633
        },
        "endLoc": {
          "line": 216,
          "column": 6,
          "position": 1728
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 151,
        "end": 164,
        "startLoc": {
          "line": 151,
          "column": 5,
          "position": 1207
        },
        "endLoc": {
          "line": 164,
          "column": 53,
          "position": 1302
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    // Check if user already reacted",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 283,
        "end": 299,
        "startLoc": {
          "line": 283,
          "column": 44,
          "position": 2295
        },
        "endLoc": {
          "line": 299,
          "column": 33,
          "position": 2420
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 238,
        "end": 254,
        "startLoc": {
          "line": 238,
          "column": 38,
          "position": 1941
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 2066
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "= asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { commentId } = req.params;\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const userId",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 329,
        "end": 337,
        "startLoc": {
          "line": 329,
          "column": 2,
          "position": 2612
        },
        "endLoc": {
          "line": 337,
          "column": 7,
          "position": 2698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 202,
        "end": 210,
        "startLoc": {
          "line": 202,
          "column": 2,
          "position": 1590
        },
        "endLoc": {
          "line": 210,
          "column": 8,
          "position": 1676
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    const reactionIndex",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 333,
        "end": 349,
        "startLoc": {
          "line": 333,
          "column": 25,
          "position": 2683
        },
        "endLoc": {
          "line": 349,
          "column": 14,
          "position": 2810
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 238,
        "end": 254,
        "startLoc": {
          "line": 238,
          "column": 38,
          "position": 1941
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 2068
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ";\n\n    if (!commentId) {\n      res.status(400).json(ApiResponse.error('Comment ID is required'));\n      return;\n    }\n\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      res.status(401).json(ApiResponse.error('Authentication required'));\n      return;\n    }\n\n    const comment = await Comment.findById(commentId);\n    if (!comment) {\n      res.status(404).json(ApiResponse.error('Comment not found'));\n      return;\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 373,
        "end": 392,
        "startLoc": {
          "line": 373,
          "column": 5,
          "position": 3015
        },
        "endLoc": {
          "line": 392,
          "column": 3,
          "position": 3168
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 330,
        "end": 254,
        "startLoc": {
          "line": 330,
          "column": 7,
          "position": 2655
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 2066
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "= asyncHandler(async (req: Request, res: Response): Promise<void> => {\n    const { workflowId } = req.params;\n    const { dateRange = 7 } = req.query; // days\n\n    if (!workflowId) {\n      res.status(400).json(ApiResponse.error('Workflow ID is required'));\n      return;\n    }\n\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - Number(dateRange));\n\n    // Get comment analytics",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/CommentController.ts",
        "start": 418,
        "end": 430,
        "startLoc": {
          "line": 418,
          "column": 2,
          "position": 3339
        },
        "endLoc": {
          "line": 430,
          "column": 25,
          "position": 3480
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/collaboration/controllers/SessionController.ts",
        "start": 259,
        "end": 272,
        "startLoc": {
          "line": 259,
          "column": 2,
          "position": 1975
        },
        "endLoc": {
          "line": 272,
          "column": 25,
          "position": 2118
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n\n    // Transform response to match frontend expectations\n    const responseData = {\n      user: result.user,\n      token: result.accessToken, // Frontend expects 'token', backend returns 'accessToken'\n      refreshToken: result.refreshToken,\n      permissions: result.user.permissions || [],\n      sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    };\n\n    logger.info(`User logged in: ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts",
        "start": 46,
        "end": 57,
        "startLoc": {
          "line": 46,
          "column": 9,
          "position": 435
        },
        "endLoc": {
          "line": 57,
          "column": 18,
          "position": 542
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/auth/controllers/AuthController.ts",
        "start": 24,
        "end": 35,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 19,
          "position": 328
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ">;\n\n  constructor(options: ValidationOptions) {\n    this.options = {\n      validateQuery: false,\n      validateBody: true,\n      validateParams: false,\n      validateHeaders: false,\n      validateCookies: false,\n      validateFiles: false,\n      allowUnknown: false,\n      stripUnknown: true,\n      abortEarly: true,\n      messages: {},\n      ...options,\n      onError: options.onError || (() => {}),\n      onSuccess: options.onSuccess || (() => {})\n    };\n\n    this",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/CustomValidator.ts",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 15,
          "position": 95
        },
        "endLoc": {
          "line": 28,
          "column": 5,
          "position": 242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts",
        "start": 7,
        "end": 25,
        "startLoc": {
          "line": 7,
          "column": 18,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 222
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(\n  name: string,\n  validateFn: (context: ValidationContext) => Promise<ValidationResult>,\n  options?: {\n    description?: string;\n    applies?: (context: ValidationContext) => Promise<boolean>;\n    dependencies?: ValidationRule[];\n  }\n):",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts",
        "start": 215,
        "end": 223,
        "startLoc": {
          "line": 215,
          "column": 11,
          "position": 1403
        },
        "endLoc": {
          "line": 223,
          "column": 2,
          "position": 1480
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/rules/ValidationRule.ts",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 12,
          "position": 364
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 443
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ";\n\n  constructor(options: UploadOptions) {\n    this.options = {\n      maxFileSize: 5 * 1024 * 1024,\n      maxFiles: 1,\n      allowedTypes: ['image/*', 'application/pdf'],\n      preserveOriginal: false,\n      generateUniqueName: true,\n      validateMimeType: true,\n      createDirectory: true,\n      overwrite: false,\n      uploadDir",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/storage/LocalStorageEngine.ts",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 181
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 274
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 133
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 226
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ">;\n\n  constructor(options: UploadOptions) {\n    this.options = {\n      maxFileSize: 5 * 1024 * 1024,\n      maxFiles: 1,\n      allowedTypes: ['image/*', 'application/pdf'],\n      preserveOriginal: false,\n      generateUniqueName: true,\n      validateMimeType: true,\n      createDirectory: true,\n      overwrite: false,\n      ...",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts",
        "start": 7,
        "end": 19,
        "startLoc": {
          "line": 7,
          "column": 14,
          "position": 74
        },
        "endLoc": {
          "line": 19,
          "column": 4,
          "position": 168
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 15,
          "position": 132
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 226
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "}\n\n  /**\n   * Match MIME type against pattern\n   */\n  private matchMimeType(mime: string, pattern: string): boolean {\n    if (pattern === '*/*' || pattern === mime) {\n      return true;\n    }\n\n    if (pattern.endsWith('/*')) {\n      const [typePattern] = pattern.split('/');\n      const [type] = mime.split('/');\n      return typePattern === type;\n    }\n\n    return false;\n  }\n\n  /**\n   * Validate type-specific size limits\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/filters/BasicFileFilter.ts",
        "start": 59,
        "end": 80,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 432
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 564
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/upload/src/middleware/validators/BasicFileValidator.ts",
        "start": 177,
        "end": 198,
        "startLoc": {
          "line": 177,
          "column": 3,
          "position": 1252
        },
        "endLoc": {
          "line": 198,
          "column": 6,
          "position": 1384
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ">\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ui/src/components/base/modal.tsx",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 11,
          "position": 437
        },
        "endLoc": {
          "line": 107,
          "column": 23,
          "position": 526
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/WorkflowEditor/credentialmodal/CredentialModal.tsx",
        "start": 346,
        "end": 359,
        "startLoc": {
          "line": 346,
          "column": 2,
          "position": 2902
        },
        "endLoc": {
          "line": 359,
          "column": 28,
          "position": 2991
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ",\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          success: false,\n          errors: error.errors,\n          message: 'Validation failed',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async getById",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 128,
        "end": 143,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 1408
        },
        "endLoc": {
          "line": 143,
          "column": 8,
          "position": 1508
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 81,
        "end": 96,
        "startLoc": {
          "line": 81,
          "column": 32,
          "position": 985
        },
        "endLoc": {
          "line": 96,
          "column": 5,
          "position": 1085
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "if ((error as any).message?.includes('permissions')) {\n        res.status(403).json({\n          success: false,\n          message: 'Access denied',\n        });\n      } else {\n        next(error);\n      }\n    }\n  }\n\n  async execute",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 232,
        "end": 243,
        "startLoc": {
          "line": 232,
          "column": 7,
          "position": 2299
        },
        "endLoc": {
          "line": 243,
          "column": 8,
          "position": 2379
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 201,
        "end": 212,
        "startLoc": {
          "line": 201,
          "column": 2,
          "position": 2038
        },
        "endLoc": {
          "line": 212,
          "column": 7,
          "position": 2118
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ".parse(req.body);\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      if (!this.hasSharePermission",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 319,
        "end": 332,
        "startLoc": {
          "line": 319,
          "column": 20,
          "position": 3019
        },
        "endLoc": {
          "line": 332,
          "column": 19,
          "position": 3126
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 246,
        "end": 259,
        "startLoc": {
          "line": 246,
          "column": 22,
          "position": 2436
        },
        "endLoc": {
          "line": 259,
          "column": 21,
          "position": 2543
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n      const userId = (req as any).user?.id;\n\n      const workflow = await this.workflowService.get(id);\n\n      if (!workflow) {\n        res.status(404).json({\n          success: false,\n          message: 'Workflow not found',\n        });\n        return;\n      }\n\n      // Create a new version",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 422,
        "end": 435,
        "startLoc": {
          "line": 422,
          "column": 5,
          "position": 3861
        },
        "endLoc": {
          "line": 435,
          "column": 24,
          "position": 3955
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 246,
        "end": 259,
        "startLoc": {
          "line": 246,
          "column": 2,
          "position": 2443
        },
        "endLoc": {
          "line": 259,
          "column": 3,
          "position": 2537
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ",\n    private mongoClient: MongoClient,\n    eventBus: DistributedEventBus\n  ) {\n    super();\n    this.eventBus = eventBus;\n    this.cache = new Redis(config.redis);\n    this.db = mongoClient.db(config.mongodb.database);\n\n    // Initialize collections\n    this.events",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/analytics-service/src/index/analytics-service.ts",
        "start": 81,
        "end": 91,
        "startLoc": {
          "line": 81,
          "column": 16,
          "position": 748
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 829
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/notification-service/src/index/service-core.ts",
        "start": 44,
        "end": 54,
        "startLoc": {
          "line": 44,
          "column": 19,
          "position": 386
        },
        "endLoc": {
          "line": 54,
          "column": 9,
          "position": 467
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "frameProtection: {\n    enabled: true,\n    action: 'DENY'\n  },\n  contentTypeOptions: {\n    enabled: true,\n    nosniff: true\n  },\n  xssProtection: {\n    enabled: true,\n    mode: '1; mode=block'\n  },\n  referrerPolicy: {\n    enabled: true,\n    policy: 'strict-origin-when-cross-origin'\n  },\n  permissionsPolicy: {\n    enabled: true,\n    features: {\n      geolocation: [\"'self'\"],\n      microphone: [\"'none'\"],\n      camera: [\"'none'\"],\n      payment: [\"'self'\"],\n      usb: [\"'none'\"]\n    }\n  }\n};\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/SecurityHeadersMiddleware.ts",
        "start": 112,
        "end": 140,
        "startLoc": {
          "line": 112,
          "column": 3,
          "position": 682
        },
        "endLoc": {
          "line": 140,
          "column": 7,
          "position": 846
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/security-headers/builders/SecurityHeadersBuilder.ts",
        "start": 111,
        "end": 138,
        "startLoc": {
          "line": 111,
          "column": 7,
          "position": 823
        },
        "endLoc": {
          "line": 138,
          "column": 7,
          "position": 988
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(name: string, config: any): { success: boolean; data?: any; errors?: any[] } {\n    const schema = this.schemas.get(name) || this.schemas.get('base');\n\n    if (!schema) {\n      return {\n        success: false,\n        errors: [{ message: `No schema found for ${name}` }],\n      };\n    }\n\n    try {\n      const partialSchema",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 64,
        "end": 75,
        "startLoc": {
          "line": 64,
          "column": 16,
          "position": 520
        },
        "endLoc": {
          "line": 75,
          "column": 14,
          "position": 648
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 30,
        "end": 41,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 213
        },
        "endLoc": {
          "line": 41,
          "column": 5,
          "position": 341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ".parse(config);\n      return { success: true, data };\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return {\n          success: false,\n          errors: error.errors.map((e) => ({\n            path: e.path.join('.'),\n            message: e.message,\n            code: e.code,\n          })),\n        };\n      }\n      return {\n        success: false,\n        errors: [{ message: error.message }],\n      };\n    }\n  }\n\n  /**\n   * Get schema\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 76,
        "end": 98,
        "startLoc": {
          "line": 76,
          "column": 14,
          "position": 667
        },
        "endLoc": {
          "line": 98,
          "column": 6,
          "position": 837
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/config/configuration-schema/default-configs.ts",
        "start": 41,
        "end": 63,
        "startLoc": {
          "line": 41,
          "column": 7,
          "position": 346
        },
        "endLoc": {
          "line": 63,
          "column": 6,
          "position": 516
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": ");\n  }\n  \n  /**\n   * Convert string ID to ObjectId\n   */\n  protected toObjectId(id: ID): ObjectId {\n    return new ObjectId(id as string);\n  }\n  \n  /**\n   * Transform repository filter to MongoDB filter\n   */\n  protected transformFilter(filter: Filter<T> = {}): any {\n    // Convert string IDs to ObjectIds in the filter\n    const transformed = { ...filter };\n    if (transformed._id) {\n      if (typeof transformed._id === 'string') {\n        transformed._id = this.toObjectId(transformed._id as unknown as ID);\n      } else if (typeof transformed._id === 'object') {\n        const idFilter = transformed._id as any;\n        if (idFilter.$eq) idFilter.$eq = this.toObjectId(idFilter.$eq);\n        if (idFilter.$in) idFilter.$in = idFilter.$in.map((id: string) => this.toObjectId(id as unknown as ID));\n      }\n    }\n    return transformed;\n  }\n  \n  /**\n   * Transform repository sort to MongoDB sort\n   */\n  protected transformSort(sort: Sort<T> = {}): any {\n    const transformed: Record<string, 1 | -1> = {};\n    for (const [key, value] of Object.entries(sort)) {\n      transformed[key] = value === 'desc' || value === -1 ? -1 : 1;\n    }\n    return transformed;\n  }\n  \n  protected",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 18,
        "end": 57,
        "startLoc": {
          "line": 18,
          "column": 12,
          "position": 167
        },
        "endLoc": {
          "line": 57,
          "column": 10,
          "position": 566
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 15,
        "end": 54,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 140
        },
        "endLoc": {
          "line": 54,
          "column": 6,
          "position": 539
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": ";\n    });\n  }\n  \n  async findOne(filter: Filter<T>): Promise<T | null> {\n    return this.wrapError(async () => {\n      return this.collection.findOne(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n    });\n  }\n  \n  async find(filter?: Filter<T>, sort?: Sort<T>, pagination?: Pagination): Promise<T[]> {\n    return this.wrapError(async () => {\n      let query = this.collection.find(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n      \n      if (sort) {\n        query = query.sort(this.transformSort(sort));\n      }\n      \n      if (pagination) {\n        query = query.skip(pagination.skip).limit(pagination.limit);\n      }\n      \n      return query.toArray();\n    });\n  }\n  \n  async count(filter?: Filter<T>): Promise<number> {\n    return this.wrapError(async () => {\n      return this.collection.countDocuments(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n    });\n  }\n  \n  async create(data: Partial<T>): Promise<T> {\n    return this.wrapError(async () => {\n      const result = await this.collection.insertOne(\n        data as any,\n        { session: this.session }\n      );\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 87,
        "end": 134,
        "startLoc": {
          "line": 87,
          "column": 9,
          "position": 864
        },
        "endLoc": {
          "line": 134,
          "column": 6,
          "position": 1313
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 59,
        "end": 106,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 621
        },
        "endLoc": {
          "line": 106,
          "column": 7,
          "position": 1070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ";\n    });\n  }\n  \n  async createMany(data: Partial<T>[]): Promise<T[]> {\n    return this.wrapError(async () => {\n      const result = await this.collection.insertMany(\n        data as any[],\n        { session: this.session }\n      );\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 136,
        "end": 146,
        "startLoc": {
          "line": 136,
          "column": 7,
          "position": 1362
        },
        "endLoc": {
          "line": 146,
          "column": 6,
          "position": 1459
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 106,
        "end": 116,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 1090
        },
        "endLoc": {
          "line": 116,
          "column": 7,
          "position": 1187
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ";\n    });\n  }\n  \n  async update(id: ID, data: Partial<T>): Promise<T> {\n    return this.wrapError(async () => {\n      const result = await this.collection.findOneAndUpdate(\n        { _id: this.toObjectId(id) } as any,\n        { $set: data },\n        { \n          session: this.session,\n          returnDocument: 'after'\n        }\n      );\n      \n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 151,
        "end": 166,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1524
        },
        "endLoc": {
          "line": 166,
          "column": 6,
          "position": 1657
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 119,
        "end": 133,
        "startLoc": {
          "line": 119,
          "column": 2,
          "position": 1231
        },
        "endLoc": {
          "line": 133,
          "column": 7,
          "position": 1362
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ";\n    });\n  }\n  \n  async updateMany(filter: Filter<T>, data: Partial<T>): Promise<number> {\n    return this.wrapError(async () => {\n      const result = await this.collection.updateMany(\n        this.transformFilter(filter),\n        { $set: data },\n        { session: this.session }\n      );\n      return result.modifiedCount;\n    });\n  }\n  \n  async delete(id: ID): Promise<boolean> {\n    return this.wrapError(async () => {\n      const result = await this.collection.deleteOne(\n        { _id: this.toObjectId(id) } as any,\n        { session: this.session }\n      );\n      \n      if",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 168,
        "end": 190,
        "startLoc": {
          "line": 168,
          "column": 7,
          "position": 1692
        },
        "endLoc": {
          "line": 190,
          "column": 3,
          "position": 1912
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 133,
        "end": 154,
        "startLoc": {
          "line": 133,
          "column": 2,
          "position": 1373
        },
        "endLoc": {
          "line": 154,
          "column": 7,
          "position": 1591
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "return result.deletedCount > 0;\n    });\n  }\n  \n  async deleteMany(filter: Filter<T>): Promise<number> {\n    return this.wrapError(async () => {\n      const result = await this.collection.deleteMany(\n        this.transformFilter(filter),\n        { session: this.session }\n      );\n      return result.deletedCount;\n    });\n  }\n  \n  protected async beginTransactionImpl(): Promise<void> {\n    this.session = await this.collection.db.client.startSession();\n    await this.session.startTransaction();\n  }\n  \n  protected async commitTransactionImpl(): Promise<void> {\n    await this.session?.commitTransaction();\n    await this.session?.endSession();\n    this.session = null;\n  }\n  \n  protected async rollbackTransactionImpl(): Promise<void> {\n    await this.session?.abortTransaction();\n    await this.session?.endSession();\n    this.session = null;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/cached-mongodb-repository.ts",
        "start": 194,
        "end": 224,
        "startLoc": {
          "line": 194,
          "column": 7,
          "position": 1943
        },
        "endLoc": {
          "line": 224,
          "column": 2,
          "position": 2231
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/repository/mongodb/mongodb-repository.ts",
        "start": 154,
        "end": 184,
        "startLoc": {
          "line": 154,
          "column": 7,
          "position": 1591
        },
        "endLoc": {
          "line": 184,
          "column": 2,
          "position": 1879
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "= await this.client.chat.completions.create({\n        model: params.model,\n        messages,\n        temperature: params.temperature,\n        max_tokens: params.maxTokens,\n        stop: params.stopSequences,\n        tools: params.tools ? this.formatTools(params.tools) : undefined,\n        stream",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 2,
          "position": 614
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 695
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/ai/src/providers/openai-provider/openai-provider.ts",
        "start": 44,
        "end": 51,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 253
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 334
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n      if (!result) {\n        res.status(404).json({ error: 'Not found' });\n        return;\n      }\n      res.json({ success: true, data: result });\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  }\n\n  async handleDelete",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts",
        "start": 94,
        "end": 105,
        "startLoc": {
          "line": 94,
          "column": 5,
          "position": 987
        },
        "endLoc": {
          "line": 105,
          "column": 13,
          "position": 1094
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/shared/src/base/optimized/unified-service-base.ts",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 3,
          "position": 809
        },
        "endLoc": {
          "line": 91,
          "column": 13,
          "position": 916
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": ",\n    properties: [\n      {\n        displayName: 'Host',\n        name: 'host',\n        type: 'string',\n        required: true,\n        default: 'localhost',\n      },\n      {\n        displayName: 'Database',\n        name: 'database',\n        type: 'string',\n        required: true,\n      },\n      {\n        displayName: 'User',\n        name: 'user',\n        type: 'string',\n        required: true,\n      },\n      {\n        displayName: 'Password',\n        name: 'password',\n        type: 'password',\n        required: true,\n      },\n      {\n        displayName: 'Port',\n        name: 'port',\n        type: 'number',\n        default: 3306",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts",
        "start": 241,
        "end": 272,
        "startLoc": {
          "line": 241,
          "column": 5,
          "position": 1526
        },
        "endLoc": {
          "line": 272,
          "column": 5,
          "position": 1709
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/types/credentials.ts",
        "start": 196,
        "end": 227,
        "startLoc": {
          "line": 196,
          "column": 5,
          "position": 1264
        },
        "endLoc": {
          "line": 227,
          "column": 5,
          "position": 1447
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ");\n          set({\n            user: authResponse.user,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n        } catch (error: any) {\n          set({\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: error.message || 'Registration failed'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts",
        "start": 62,
        "end": 74,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 569
        },
        "endLoc": {
          "line": 74,
          "column": 22,
          "position": 662
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/stores/authStore.ts",
        "start": 41,
        "end": 53,
        "startLoc": {
          "line": 41,
          "column": 12,
          "position": 398
        },
        "endLoc": {
          "line": 53,
          "column": 15,
          "position": 491
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ": z\n      .object({\n        totalExecutions: z.number().int().min(0),\n        successfulExecutions: z.number().int().min(0),\n        failedExecutions: z.number().int().min(0),\n        avgDuration: z.number().min(0).optional(),\n        successRate: z.number().min(0).max(100).optional(),\n      })\n      .optional(), // Backend returns \"statistics\" instead of \"executionStats\"",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts",
        "start": 92,
        "end": 100,
        "startLoc": {
          "line": 92,
          "column": 11,
          "position": 920
        },
        "endLoc": {
          "line": 100,
          "column": 60,
          "position": 1046
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/schemas/WorkflowSchemas.ts",
        "start": 83,
        "end": 92,
        "startLoc": {
          "line": 83,
          "column": 15,
          "position": 792
        },
        "endLoc": {
          "line": 92,
          "column": 11,
          "position": 919
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "{\n        displayName: enhancedNode.displayName || enhancedNode.name,\n        name: enhancedNode.name,\n        icon: enhancedNode.icon || 'fa:envelope',\n        group: [enhancedNode.type === 'trigger' ? 'trigger' : 'transform'],\n        version: 1,\n        description: enhancedNode.description || '',\n        defaults: {\n          name: enhancedNode.displayName || enhancedNode.name,\n          color: (enhancedNode as any).color || '#DD4B39',\n        },\n        inputs: (enhancedNode.inputs || [{ type: 'main' }]).map((input) =>\n          typeof input === 'string' ? input : input.type || 'main'\n        ),\n        outputs: (enhancedNode.outputs || [{ type: 'main' }]).map((output) =>\n          typeof output === 'string' ? output : output.type || 'main'\n        ),\n        categories: enhancedNode.codex?.categories || [],\n        properties: [], // Enhanced nodes use different property system\n        // Preserve custom UI components from enhanced nodes\n        customBodyComponent: (enhancedNode as any).customBodyComponent,\n        // customPropertiesPanel: (enhancedNode as any).customPropertiesPanel,\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts",
        "start": 233,
        "end": 255,
        "startLoc": {
          "line": 233,
          "column": 2,
          "position": 1688
        },
        "endLoc": {
          "line": 255,
          "column": 2,
          "position": 1980
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/nodes/registry.ts",
        "start": 176,
        "end": 198,
        "startLoc": {
          "line": 176,
          "column": 2,
          "position": 1206
        },
        "endLoc": {
          "line": 198,
          "column": 2,
          "position": 1498
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", LoginApiResponseSchema);\n\n      // Store tokens in localStorage\n      if (response.token) {\n        localStorage.setItem(configService.get('auth').tokenKey, response.token);\n      }\n      if (response.refreshToken) {\n        localStorage.setItem(configService.get('auth').refreshTokenKey, response.refreshToken);\n      }\n\n      return response;\n    } catch (error) {\n      throw new ApiClientError('Registration failed'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 94,
        "end": 106,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 584
        },
        "endLoc": {
          "line": 106,
          "column": 22,
          "position": 689
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 73,
        "end": 85,
        "startLoc": {
          "line": 73,
          "column": 12,
          "position": 415
        },
        "endLoc": {
          "line": 85,
          "column": 15,
          "position": 520
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ",\n      });\n\n      // Backend returns: { success, data: { user: UserProfile } }\n      // Extract user from nested structure\n      const responseData = response.data as any;\n      const userData = responseData.data?.user || responseData.user;\n\n      if (!userData) {\n        throw new ApiClientError('Invalid profile response structure', 422, 'INVALID_RESPONSE');\n      }\n\n      // Transform and validate the user data\n      return this.transformUserProfile(userData);\n    } catch (error) {\n      throw new ApiClientError('Failed to update profile'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 259,
        "end": 274,
        "startLoc": {
          "line": 259,
          "column": 8,
          "position": 1701
        },
        "endLoc": {
          "line": 274,
          "column": 27,
          "position": 1816
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/core/api/AuthApiService.ts",
        "start": 231,
        "end": 246,
        "startLoc": {
          "line": 231,
          "column": 16,
          "position": 1502
        },
        "endLoc": {
          "line": 246,
          "column": 31,
          "position": 1617
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 205,
        "end": 219,
        "startLoc": {
          "line": 205,
          "column": 2,
          "position": 1377
        },
        "endLoc": {
          "line": 219,
          "column": 2,
          "position": 1486
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 68,
        "end": 82,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 538
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "};\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Product",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx",
        "start": 258,
        "end": 272,
        "startLoc": {
          "line": 258,
          "column": 3,
          "position": 1830
        },
        "endLoc": {
          "line": 272,
          "column": 8,
          "position": 1940
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 205,
        "end": 82,
        "startLoc": {
          "line": 205,
          "column": 3,
          "position": 1376
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Privacy",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Privacy.tsx",
        "start": 80,
        "end": 97,
        "startLoc": {
          "line": 80,
          "column": 15,
          "position": 476
        },
        "endLoc": {
          "line": 97,
          "column": 8,
          "position": 604
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 66,
        "end": 220,
        "startLoc": {
          "line": 66,
          "column": 108,
          "position": 530
        },
        "endLoc": {
          "line": 220,
          "column": 5,
          "position": 1497
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Simple",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx",
        "start": 352,
        "end": 368,
        "startLoc": {
          "line": 352,
          "column": 172,
          "position": 1933
        },
        "endLoc": {
          "line": 368,
          "column": 7,
          "position": 2050
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 66,
        "end": 82,
        "startLoc": {
          "line": 66,
          "column": 108,
          "position": 530
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Join",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx",
        "start": 669,
        "end": 679,
        "startLoc": {
          "line": 669,
          "column": 13,
          "position": 4530
        },
        "endLoc": {
          "line": 679,
          "column": 5,
          "position": 4611
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 492,
        "end": 502,
        "startLoc": {
          "line": 492,
          "column": 13,
          "position": 5071
        },
        "endLoc": {
          "line": 502,
          "column": 3,
          "position": 5152
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                150",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx",
        "start": 260,
        "end": 275,
        "startLoc": {
          "line": 260,
          "column": 2,
          "position": 2042
        },
        "endLoc": {
          "line": 275,
          "column": 4,
          "position": 2162
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 68,
        "end": 220,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 538
        },
        "endLoc": {
          "line": 220,
          "column": 5,
          "position": 1497
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Features",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Features.tsx",
        "start": 295,
        "end": 310,
        "startLoc": {
          "line": 295,
          "column": 2,
          "position": 1682
        },
        "endLoc": {
          "line": 310,
          "column": 9,
          "position": 1795
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx",
        "start": 257,
        "end": 82,
        "startLoc": {
          "line": 257,
          "column": 2,
          "position": 1827
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-6xl mx-auto",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Enterprise.tsx",
        "start": 217,
        "end": 230,
        "startLoc": {
          "line": 217,
          "column": 2,
          "position": 1348
        },
        "endLoc": {
          "line": 230,
          "column": 18,
          "position": 1445
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Roadmap.tsx",
        "start": 257,
        "end": 80,
        "startLoc": {
          "line": 257,
          "column": 2,
          "position": 1827
        },
        "endLoc": {
          "line": 80,
          "column": 30,
          "position": 631
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "};\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                Documentation",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 288,
        "end": 303,
        "startLoc": {
          "line": 288,
          "column": 3,
          "position": 2002
        },
        "endLoc": {
          "line": 303,
          "column": 14,
          "position": 2123
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 205,
        "end": 220,
        "startLoc": {
          "line": 205,
          "column": 3,
          "position": 1376
        },
        "endLoc": {
          "line": 220,
          "column": 5,
          "position": 1497
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 605,
        "end": 615,
        "startLoc": {
          "line": 605,
          "column": 17,
          "position": 4622
        },
        "endLoc": {
          "line": 615,
          "column": 6,
          "position": 4693
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 490,
        "end": 500,
        "startLoc": {
          "line": 490,
          "column": 17,
          "position": 5061
        },
        "endLoc": {
          "line": 500,
          "column": 4,
          "position": 5132
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ");\n\n  const handleCreateWorkflow = async () => {\n    const name = prompt('Enter workflow name:');\n    if (name) {\n      if (name.trim().length === 0) {\n        toast.error('Please enter a valid workflow name.');\n        return;\n      }\n\n      try {\n        await createNewWorkflow(name.trim(), navigate);\n        // Refresh the dashboard workflows list",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 106,
        "end": 118,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 989
        },
        "endLoc": {
          "line": 118,
          "column": 40,
          "position": 1089
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/components/Layout/Header.tsx",
        "start": 12,
        "end": 35,
        "startLoc": {
          "line": 12,
          "column": 6,
          "position": 156
        },
        "endLoc": {
          "line": 35,
          "column": 6,
          "position": 385
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ".map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white/10 backdrop-blur-md p-6 rounded-lg border border-white/20 shadow-lg hover:bg-white/15 transition-all duration-300\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"text-2xl mr-4\">{stat.icon}</div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-300\">{stat.name}</p>\n                <p className=\"text-2xl font-semibold text-white\">{stat.value}</p>\n                {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 242,
        "end": 252,
        "startLoc": {
          "line": 242,
          "column": 15,
          "position": 2129
        },
        "endLoc": {
          "line": 252,
          "column": 2,
          "position": 2234
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Executions.tsx",
        "start": 140,
        "end": 150,
        "startLoc": {
          "line": 140,
          "column": 2,
          "position": 1364
        },
        "endLoc": {
          "line": 150,
          "column": 3,
          "position": 1469
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "</h2>\n            <button\n              onClick={() => setShowCreateForm(true)}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              Create New\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-300\">Loading credentials",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Credentials.tsx",
        "start": 253,
        "end": 266,
        "startLoc": {
          "line": 253,
          "column": 12,
          "position": 2205
        },
        "endLoc": {
          "line": 266,
          "column": 12,
          "position": 2311
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Dashboard.tsx",
        "start": 269,
        "end": 283,
        "startLoc": {
          "line": 269,
          "column": 10,
          "position": 2391
        },
        "endLoc": {
          "line": 283,
          "column": 10,
          "position": 2490
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx",
        "start": 180,
        "end": 195,
        "startLoc": {
          "line": 180,
          "column": 5,
          "position": 1348
        },
        "endLoc": {
          "line": 195,
          "column": 4,
          "position": 1462
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/SelfHosted.tsx",
        "start": 204,
        "end": 82,
        "startLoc": {
          "line": 204,
          "column": 5,
          "position": 1372
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "</div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx",
        "start": 539,
        "end": 549,
        "startLoc": {
          "line": 539,
          "column": 13,
          "position": 4055
        },
        "endLoc": {
          "line": 549,
          "column": 38,
          "position": 4131
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/PricingPage.tsx",
        "start": 631,
        "end": 641,
        "startLoc": {
          "line": 631,
          "column": 13,
          "position": 4194
        },
        "endLoc": {
          "line": 641,
          "column": 38,
          "position": 4270
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ">\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Don't",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Contact.tsx",
        "start": 566,
        "end": 577,
        "startLoc": {
          "line": 566,
          "column": 7,
          "position": 4325
        },
        "endLoc": {
          "line": 577,
          "column": 6,
          "position": 4409
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 491,
        "end": 502,
        "startLoc": {
          "line": 491,
          "column": 4,
          "position": 5068
        },
        "endLoc": {
          "line": 502,
          "column": 3,
          "position": 5152
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "},\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              Building",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/About.tsx",
        "start": 170,
        "end": 185,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 966
        },
        "endLoc": {
          "line": 185,
          "column": 9,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Terms.tsx",
        "start": 67,
        "end": 82,
        "startLoc": {
          "line": 67,
          "column": 5,
          "position": 533
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 647
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <Header />\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900\" />\n        <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-20\" />\n\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                API",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx",
        "start": 337,
        "end": 354,
        "startLoc": {
          "line": 337,
          "column": 28,
          "position": 1547
        },
        "endLoc": {
          "line": 354,
          "column": 4,
          "position": 1674
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 286,
        "end": 220,
        "startLoc": {
          "line": 286,
          "column": 9,
          "position": 1996
        },
        "endLoc": {
          "line": 220,
          "column": 5,
          "position": 1497
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ".map((category) => {\n                      const Icon = category.icon;\n                      return (\n                        <button\n                          key={category.id}\n                          onClick={() => setActiveEndpoint(category.id)}\n                          className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                            activeEndpoint === category.id\n                              ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                              : 'text-gray-700 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Icon className=\"w-5 h-5\" />\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <span ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx",
        "start": 492,
        "end": 508,
        "startLoc": {
          "line": 492,
          "column": 19,
          "position": 2890
        },
        "endLoc": {
          "line": 508,
          "column": 2,
          "position": 3020
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/IntegrationsPage.tsx",
        "start": 399,
        "end": 416,
        "startLoc": {
          "line": 399,
          "column": 11,
          "position": 3178
        },
        "endLoc": {
          "line": 416,
          "column": 29,
          "position": 3308
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start Building?</h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto opacity-90\">\n            Get",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/APIReference.tsx",
        "start": 788,
        "end": 799,
        "startLoc": {
          "line": 788,
          "column": 15,
          "position": 5190
        },
        "endLoc": {
          "line": 799,
          "column": 4,
          "position": 5276
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/pages/Documentation.tsx",
        "start": 606,
        "end": 617,
        "startLoc": {
          "line": 606,
          "column": 15,
          "position": 4627
        },
        "endLoc": {
          "line": 617,
          "column": 7,
          "position": 4713
        }
      }
    },
    {
      "format": "javascript",
      "lines": 26,
      "fragment": " : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#22c55e'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 66,
        "end": 91,
        "startLoc": {
          "line": 66,
          "column": 92,
          "position": 566
        },
        "endLoc": {
          "line": 91,
          "column": 10,
          "position": 691
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 63,
        "end": 88,
        "startLoc": {
          "line": 63,
          "column": 89,
          "position": 481
        },
        "endLoc": {
          "line": 88,
          "column": 7,
          "position": 606
        }
      }
    },
    {
      "format": "javascript",
      "lines": 41,
      "fragment": ",\n              }}\n            >\n              F\n            </div>\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    ",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 136,
        "end": 176,
        "startLoc": {
          "line": 136,
          "column": 7,
          "position": 914
        },
        "endLoc": {
          "line": 176,
          "column": 21,
          "position": 1162
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 91,
        "end": 137,
        "startLoc": {
          "line": 91,
          "column": 2,
          "position": 623
        },
        "endLoc": {
          "line": 137,
          "column": 37,
          "position": 937
        }
      }
    },
    {
      "format": "javascript",
      "lines": 57,
      "fragment": "}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badges */}\n            {nodeData.disabled && <StatusBadge type=\"disabled\" position=\"top-right\" />}\n            {mode === 'rules' && rules.length > 0 && (\n              <StatusBadge type=\"count\" content={rules",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 161,
        "end": 217,
        "startLoc": {
          "line": 161,
          "column": 2,
          "position": 1071
        },
        "endLoc": {
          "line": 217,
          "column": 6,
          "position": 1459
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 139,
        "end": 163,
        "startLoc": {
          "line": 139,
          "column": 2,
          "position": 951
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1092
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ";\n\n  // Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef:",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 25,
        "end": 35,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 217
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 308
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 32,
        "end": 42,
        "startLoc": {
          "line": 32,
          "column": 80,
          "position": 253
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 344
        }
      }
    },
    {
      "format": "tsx",
      "lines": 36,
      "fragment": ";\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-yellow-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Input Handle */}\n            <Handle\n              type=\"target\"\n              position={Position.Left}\n              id=\"input_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                left: -5,\n              }}\n            />\n\n            {/* True Output Handle */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 50,
        "end": 85,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 460
        },
        "endLoc": {
          "line": 85,
          "column": 25,
          "position": 657
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 43,
        "end": 82,
        "startLoc": {
          "line": 43,
          "column": 2,
          "position": 377
        },
        "endLoc": {
          "line": 82,
          "column": 20,
          "position": 572
        }
      }
    },
    {
      "format": "javascript",
      "lines": 24,
      "fragment": ",\n              }}\n            />\n\n            {/* Output Handle */}\n            <Handle\n              type=\"source\"\n              position={Position.Right}\n              id=\"output_0\"\n              style={{\n                background: '#555',\n                width: 10,\n                height: 10,\n                right: -5,\n              }}\n            />\n\n            {/* AI Agent Icon */}\n            <NodeIcon icon={icon} displayName={displayName} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={(",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 115,
        "end": 138,
        "startLoc": {
          "line": 115,
          "column": 6,
          "position": 725
        },
        "endLoc": {
          "line": 138,
          "column": 2,
          "position": 842
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/bodies/DatabaseNodeBody.tsx",
        "start": 74,
        "end": 95,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 564
        },
        "endLoc": {
          "line": 95,
          "column": 17,
          "position": 681
        }
      }
    },
    {
      "format": "javascript",
      "lines": 67,
      "fragment": "} size=\"md\" />\n\n            {/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 133,
        "end": 199,
        "startLoc": {
          "line": 133,
          "column": 12,
          "position": 813
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1237
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 92,
        "end": 177,
        "startLoc": {
          "line": 92,
          "column": 2,
          "position": 626
        },
        "endLoc": {
          "line": 177,
          "column": 2,
          "position": 1185
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "import type React from 'react';\nimport { useRef, useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport NodeToolbar from '../components/WorkflowEditor/NodeTypes/BaseNode/NodeToolbar';\nimport { useSmartMenuPosition } from '../hooks/useSmartMenuPosition';\nimport type { CustomNodeBodyProps } from './nodeUiRegistry';\nimport { NodeIcon, NodeLabel, StatusBadge } from './shared';\n\n/**\n * Custom AI Agent Node Body Component\n * Gmail-style UI with AI-specific features and handles\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 4,
          "position": 100
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/ConditionNodeBody.tsx",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 4,
          "position": 100
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "// Menu state for NodeToolbar\n  const [showLocalMenu, setShowLocalMenu] = useState(false);\n  const menuTriggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const { positionClasses, positionStyles } = useSmartMenuPosition({\n    isOpen: showLocalMenu,\n    triggerRef: menuTriggerRef,\n    menuRef: menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 28,
        "end": 43,
        "startLoc": {
          "line": 28,
          "column": 3,
          "position": 214
        },
        "endLoc": {
          "line": 43,
          "column": 18,
          "position": 341
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 34,
        "end": 41,
        "startLoc": {
          "line": 34,
          "column": 3,
          "position": 257
        },
        "endLoc": {
          "line": 41,
          "column": 6,
          "position": 347
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": "menuRef,\n    offset: 4,\n    onClose: () => setShowLocalMenu(false),\n  });\n\n  // Click-outside handling is now centralized in useSmartMenuPosition hook\n\n  const handleDoubleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onOpenProperties?.();\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div\n            className={`\n              relative flex items-center justify-center bg-gray-800 p-4 shadow-lg transition-all duration-200\n              rounded-md min-w-[80px] max-w-[150px] min-h-[60px]\n              ${selected ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n              ${isHovered ? 'hover:shadow-xl hover:scale-105 ring-2 ring-offset-2 ring-offset-gray-900 ring-purple-400' : ''}\n            `}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onDoubleClick={handleDoubleClick}\n          >\n            {/* Standard Input Handle */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 36,
        "end": 63,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 303
        },
        "endLoc": {
          "line": 63,
          "column": 28,
          "position": 471
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 42,
        "end": 69,
        "startLoc": {
          "line": 42,
          "column": 5,
          "position": 343
        },
        "endLoc": {
          "line": 69,
          "column": 19,
          "position": 511
        }
      }
    },
    {
      "format": "tsx",
      "lines": 73,
      "fragment": "{/* Shared NodeToolbar */}\n            <NodeToolbar\n              visible={isHovered}\n              onPlay={() => {}}\n              onStop={() => {}}\n              onDelete={(e) => {\n                e.stopPropagation();\n                onDelete?.();\n              }}\n              onMenuToggle={() => setShowLocalMenu(!showLocalMenu)}\n              menuTriggerRef={menuTriggerRef}\n            />\n\n            {/* Menu Dropdown */}\n            {showLocalMenu && (\n              <div\n                ref={menuRef}\n                className={`${positionClasses} bg-gray-800 border border-gray-600 rounded-md shadow-lg py-1 min-w-[120px]`}\n                style={positionStyles}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenProperties?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📂</span> Open\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🧪</span> Test\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📄</span> Copy\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-gray-200 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>📋</span> Duplicate\n                </button>\n                <hr className=\"my-1 border-gray-600\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete?.();\n                    setShowLocalMenu(false);\n                  }}\n                  className=\"w-full px-3 py-1.5 text-left text-sm text-red-400 hover:bg-gray-700 flex items-center gap-2\"\n                >\n                  <span>🗑️</span> Delete\n                </button>\n              </div>\n            )}\n\n            {/* Status Badge */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/AIAgentNodeBody.tsx",
        "start": 135,
        "end": 207,
        "startLoc": {
          "line": 135,
          "column": 13,
          "position": 825
        },
        "endLoc": {
          "line": 207,
          "column": 19,
          "position": 1275
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/node-extensions/custom-nodes/GmailNodeBody.tsx",
        "start": 113,
        "end": 185,
        "startLoc": {
          "line": 113,
          "column": 13,
          "position": 773
        },
        "endLoc": {
          "line": 185,
          "column": 24,
          "position": 1223
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ";\n\n      // Calculate available space in each direction\n      const spaceRight = viewport.width - triggerRect.right;\n      const spaceLeft = triggerRect.left;\n      const spaceBelow = viewport.height - triggerRect.bottom;\n\n      let newPosition: MenuPosition = {};\n      let strategy: typeof positionStrategy = 'right';\n\n      // Try positioning to the right of the button (preferred)\n      if (spaceRight >= menuRect",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts",
        "start": 155,
        "end": 166,
        "startLoc": {
          "line": 155,
          "column": 2,
          "position": 1315
        },
        "endLoc": {
          "line": 166,
          "column": 9,
          "position": 1411
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/frontend/src/app/hooks/useSmartMenuPosition.ts",
        "start": 76,
        "end": 87,
        "startLoc": {
          "line": 76,
          "column": 4,
          "position": 629
        },
        "endLoc": {
          "line": 87,
          "column": 19,
          "position": 725
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "this.options = {\n      validateQuery: false,\n      validateBody: true,\n      validateParams: false,\n      validateHeaders: false,\n      validateCookies: false,\n      validateFiles: false,\n      allowUnknown: false,\n      stripUnknown: true,\n      abortEarly: true,\n      messages: {},\n      ...options,\n      onError: options.onError || this",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/ValidationMiddleware.ts",
        "start": 89,
        "end": 101,
        "startLoc": {
          "line": 89,
          "column": 5,
          "position": 396
        },
        "endLoc": {
          "line": 101,
          "column": 5,
          "position": 490
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/validation/src/middleware/validators/SchemaValidator.ts",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 92
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 186
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": {\n    rules: [\n      {\n        field: 'email',\n        type: 'email',\n        required: true,\n        normalizeEmail: true,\n        toLowerCase: true,\n        sanitize: true,\n      },\n      {\n        field: 'password',\n        type: 'string',\n        required: true,\n        minLength: 8,\n        maxLength: 128,\n        pattern",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 638,
        "end": 654,
        "startLoc": {
          "line": 638,
          "column": 13,
          "position": 4752
        },
        "endLoc": {
          "line": 654,
          "column": 8,
          "position": 4850
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 618,
        "end": 634,
        "startLoc": {
          "line": 618,
          "column": 6,
          "position": 4640
        },
        "endLoc": {
          "line": 634,
          "column": 2,
          "position": 4738
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ">) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const files = req.file ? [req.file] : (req.files as Express.Multer.File[]) || [];\n\n    for (const file of files) {\n      const limit",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 527,
        "end": 532,
        "startLoc": {
          "line": 527,
          "column": 7,
          "position": 4433
        },
        "endLoc": {
          "line": 532,
          "column": 6,
          "position": 4529
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/file-upload.middleware.ts",
        "start": 490,
        "end": 495,
        "startLoc": {
          "line": 490,
          "column": 2,
          "position": 4127
        },
        "endLoc": {
          "line": 495,
          "column": 11,
          "position": 4223
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": async (req: Request, res: Response) => {\n      if (!req.user) {\n        return res.status(401).json({\n          success: false,\n          error: {\n            code: ERROR_CODES.UNAUTHORIZED,\n            message: 'Not authenticated',\n          },\n        });\n      }\n\n      const {",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 311,
        "end": 322,
        "startLoc": {
          "line": 311,
          "column": 14,
          "position": 2369
        },
        "endLoc": {
          "line": 322,
          "column": 2,
          "position": 2461
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 282,
        "end": 293,
        "startLoc": {
          "line": 282,
          "column": 12,
          "position": 2128
        },
        "endLoc": {
          "line": 293,
          "column": 9,
          "position": 2220
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ": string[]) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: {\n          code: ERROR_CODES.UNAUTHORIZED,\n          message: 'Authentication required',\n        },\n      });\n      return;\n    }\n\n    if (\n      !req.user.permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 380,
        "end": 394,
        "startLoc": {
          "line": 380,
          "column": 20,
          "position": 2878
        },
        "endLoc": {
          "line": 394,
          "column": 12,
          "position": 2997
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/auth.middleware.ts",
        "start": 349,
        "end": 362,
        "startLoc": {
          "line": 349,
          "column": 14,
          "position": 2639
        },
        "endLoc": {
          "line": 362,
          "column": 6,
          "position": 2756
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('node:moved'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 336,
        "end": 342,
        "startLoc": {
          "line": 336,
          "column": 15,
          "position": 3066
        },
        "endLoc": {
          "line": 342,
          "column": 13,
          "position": 3143
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 323,
        "end": 329,
        "startLoc": {
          "line": 323,
          "column": 17,
          "position": 2946
        },
        "endLoc": {
          "line": 329,
          "column": 15,
          "position": 3023
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:added'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 349,
        "end": 355,
        "startLoc": {
          "line": 349,
          "column": 14,
          "position": 3186
        },
        "endLoc": {
          "line": 355,
          "column": 13,
          "position": 3263
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 323,
        "end": 329,
        "startLoc": {
          "line": 323,
          "column": 17,
          "position": 2946
        },
        "endLoc": {
          "line": 329,
          "column": 15,
          "position": 3023
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:updated'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 362,
        "end": 368,
        "startLoc": {
          "line": 362,
          "column": 17,
          "position": 3306
        },
        "endLoc": {
          "line": 368,
          "column": 15,
          "position": 3383
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 323,
        "end": 329,
        "startLoc": {
          "line": 323,
          "column": 17,
          "position": 2946
        },
        "endLoc": {
          "line": 329,
          "column": 15,
          "position": 3023
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "(socket: Socket, data: any): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('edge:deleted'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 375,
        "end": 381,
        "startLoc": {
          "line": 375,
          "column": 17,
          "position": 3426
        },
        "endLoc": {
          "line": 381,
          "column": 15,
          "position": 3503
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 323,
        "end": 329,
        "startLoc": {
          "line": 323,
          "column": 17,
          "position": 2946
        },
        "endLoc": {
          "line": 329,
          "column": 15,
          "position": 3023
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "(socket: Socket, data: { nodeId: string; field: string }): void {\n    const workflowId = socket.data.workflowId;\n    const user = socket.data.user as IJwtPayload;\n    const sessionId = socket.data.sessionId;\n\n    if (!workflowId) return;\n\n    socket.to(`workflow:${workflowId}`).emit('typing:stopped'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 451,
        "end": 458,
        "startLoc": {
          "line": 451,
          "column": 17,
          "position": 4134
        },
        "endLoc": {
          "line": 458,
          "column": 17,
          "position": 4238
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/real-time/src/socket-server/socket-manager.ts",
        "start": 436,
        "end": 443,
        "startLoc": {
          "line": 436,
          "column": 18,
          "position": 3985
        },
        "endLoc": {
          "line": 443,
          "column": 17,
          "position": 4089
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "private async executeWithRetry<T>(\n    fn: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error:",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/base/base-integration.ts",
        "start": 298,
        "end": 308,
        "startLoc": {
          "line": 298,
          "column": 3,
          "position": 2145
        },
        "endLoc": {
          "line": 308,
          "column": 2,
          "position": 2260
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/integrations/src/webhook/webhook-manager.ts",
        "start": 260,
        "end": 270,
        "startLoc": {
          "line": 260,
          "column": 3,
          "position": 2064
        },
        "endLoc": {
          "line": 270,
          "column": 2,
          "position": 2179
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(schema: SchemaDefinition) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n    const validator = new SchemaValidator(schema);\n\n    descriptor.value = async function (...args: any[]) {\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts",
        "start": 63,
        "end": 74,
        "startLoc": {
          "line": 63,
          "column": 15,
          "position": 498
        },
        "endLoc": {
          "line": 74,
          "column": 6,
          "position": 601
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/validation.ts",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 14,
          "position": 268
        },
        "endLoc": {
          "line": 44,
          "column": 4,
          "position": 371
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(logger?: Logger) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const className = target.constructor.name;\n\n    descriptor.value = async function (...args: any[]) {\n      const methodLogger = logger || new Logger(`${className}:${propertyKey}`);\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts",
        "start": 32,
        "end": 43,
        "startLoc": {
          "line": 32,
          "column": 6,
          "position": 262
        },
        "endLoc": {
          "line": 43,
          "column": 6,
          "position": 382
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/core.ts",
        "start": 4,
        "end": 16,
        "startLoc": {
          "line": 4,
          "column": 4,
          "position": 21
        },
        "endLoc": {
          "line": 16,
          "column": 4,
          "position": 143
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ") {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      if (!user.permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 50,
        "startLoc": {
          "line": 34,
          "column": 7,
          "position": 270
        },
        "endLoc": {
          "line": 50,
          "column": 12,
          "position": 408
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 4,
        "end": 20,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 31
        },
        "endLoc": {
          "line": 20,
          "column": 6,
          "position": 169
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ") {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      // Extract resource ID from args using the path",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 64,
        "end": 80,
        "startLoc": {
          "line": 64,
          "column": 5,
          "position": 494
        },
        "endLoc": {
          "line": 80,
          "column": 48,
          "position": 626
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 4,
        "end": 20,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 31
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      // Extract action from method name or args",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 110,
        "end": 126,
        "startLoc": {
          "line": 110,
          "column": 9,
          "position": 822
        },
        "endLoc": {
          "line": 126,
          "column": 43,
          "position": 957
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 20,
        "startLoc": {
          "line": 34,
          "column": 11,
          "position": 267
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": string) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    const methodName = propertyKey;\n\n    descriptor.value = async function (...args: any[]) {\n      const user = this.currentUser || args[0]?.user;\n      \n      if (!user) {\n        throw new AuthenticationError('No authenticated user found');\n      }\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 146,
        "end": 162,
        "startLoc": {
          "line": 146,
          "column": 6,
          "position": 1090
        },
        "endLoc": {
          "line": 162,
          "column": 6,
          "position": 1225
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/core/src/decorators/auth.ts",
        "start": 34,
        "end": 20,
        "startLoc": {
          "line": 34,
          "column": 11,
          "position": 267
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 163
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ") {\n    return async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n      try {\n        if (!req.userId) {\n          return res.status(401).json({ error: 'Not authenticated' });\n        }\n\n        const userRoleIds = await config.getUserRoles(req.userId);\n        const userRoles = config.roles.filter((role) => userRoleIds.includes(role.id));\n        const hasRequiredRole",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts",
        "start": 57,
        "end": 66,
        "startLoc": {
          "line": 57,
          "column": 2,
          "position": 526
        },
        "endLoc": {
          "line": 66,
          "column": 16,
          "position": 654
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/auth/src/middleware/rbac-middleware.ts",
        "start": 22,
        "end": 32,
        "startLoc": {
          "line": 22,
          "column": 11,
          "position": 175
        },
        "endLoc": {
          "line": 32,
          "column": 14,
          "position": 304
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "${rule.enum.join(', ')}`);\n      }\n\n      // Custom validation\n      if (rule.custom) {\n        const result = rule.custom(value);\n        if (typeof result === 'string') {\n          errors.push(result);\n        } else if (!result) {\n          errors.push(`",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/api/src/middleware/validation.ts",
        "start": 66,
        "end": 75,
        "startLoc": {
          "line": 66,
          "column": 18,
          "position": 745
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 835
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/security/src/middleware/validation.middleware.ts",
        "start": 316,
        "end": 325,
        "startLoc": {
          "line": 316,
          "column": 24,
          "position": 2338
        },
        "endLoc": {
          "line": 325,
          "column": 27,
          "position": 2428
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "z.object({\n  id: z.string(),\n  source: z.string(),\n  target: z.string(),\n  sourceHandle: z.string().optional(),\n  targetHandle: z.string().optional(),\n});",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/core/src/schemas/index.ts",
        "start": 21,
        "end": 27,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 185
        },
        "endLoc": {
          "line": 27,
          "column": 2,
          "position": 256
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/services/workflow-service/src/controllers/workflow.controller.ts",
        "start": 21,
        "end": 28,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 230
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 304
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "{\n  id: string;\n  workflowId: string;\n  userId: string;\n  status: 'pending' | 'running' | 'success' | 'error' | 'cancelled';\n  startedAt: Date;\n  completedAt?: Date;\n  executedNodes: string[];\n  currentNode?: string;\n  results: Map<string, any>;\n  error?: string;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/types/workflow.ts",
        "start": 27,
        "end": 38,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 143
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 242
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/domains/executions/interfaces/index.ts",
        "start": 5,
        "end": 16,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 9
        },
        "endLoc": {
          "line": 16,
          "column": 9,
          "position": 109
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 212,
        "end": 219,
        "startLoc": {
          "line": 212,
          "column": 15,
          "position": 1481
        },
        "endLoc": {
          "line": 219,
          "column": 6,
          "position": 1561
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 175,
        "end": 182,
        "startLoc": {
          "line": 175,
          "column": 7,
          "position": 1225
        },
        "endLoc": {
          "line": 182,
          "column": 3,
          "position": 1305
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const userPresence = workflowUsers?.get(userId);\n\n    if (userPresence) {\n      userPresence.selection",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 251,
        "end": 261,
        "startLoc": {
          "line": 251,
          "column": 3,
          "position": 1756
        },
        "endLoc": {
          "line": 261,
          "column": 10,
          "position": 1864
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 175,
        "end": 222,
        "startLoc": {
          "line": 175,
          "column": 7,
          "position": 1225
        },
        "endLoc": {
          "line": 222,
          "column": 7,
          "position": 1589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "]\n  ): Promise<void> {\n    const workflowId = this.socketToWorkflow.get(socketId);\n    const userId = this.socketToUser.get(socketId);\n\n    if (!workflowId || !userId) return;\n\n    const workflowUsers = this.workflowPresence.get(workflowId);\n    const userPresence = workflowUsers?.get(userId);\n\n    if (userPresence) {\n      userPresence.activeArea",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 288,
        "end": 299,
        "startLoc": {
          "line": 288,
          "column": 13,
          "position": 2005
        },
        "endLoc": {
          "line": 299,
          "column": 11,
          "position": 2116
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/CursorTrackingService.ts",
        "start": 250,
        "end": 222,
        "startLoc": {
          "line": 250,
          "column": 12,
          "position": 1753
        },
        "endLoc": {
          "line": 222,
          "column": 7,
          "position": 1589
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "{\n    requestId: req.id,\n    method: req.method,\n    url: req.originalUrl,\n    userAgent: req.get('User-Agent'),\n    ip: req.ip,\n    userId: (req as any).user?.id,\n  });\n\n  // Log detailed request information",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 144,
        "end": 153,
        "startLoc": {
          "line": 144,
          "column": 2,
          "position": 1059
        },
        "endLoc": {
          "line": 153,
          "column": 36,
          "position": 1134
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 102,
        "end": 111,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 731
        },
        "endLoc": {
          "line": 111,
          "column": 40,
          "position": 806
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n      body: req.body,\n    },\n  });\n\n  // Intercept response\n  const originalSend = res.send;\n  res.send = function (data: any) {\n    if (req.debugSession) {\n      debugTools.addDebugEvent(req.debugSession, {\n        timestamp: Date.now(),\n        type: 'log',\n        level: 'debug',\n        message: 'Response sent'",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 162,
        "end": 175,
        "startLoc": {
          "line": 162,
          "column": 7,
          "position": 1211
        },
        "endLoc": {
          "line": 175,
          "column": 16,
          "position": 1317
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts",
        "start": 490,
        "end": 503,
        "startLoc": {
          "line": 490,
          "column": 6,
          "position": 4076
        },
        "endLoc": {
          "line": 503,
          "column": 21,
          "position": 4182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ",\n        data: {\n          statusCode: res.statusCode,\n          headers: res.getHeaders(),\n          body: data,\n        },\n      });\n\n      debugTools.endDebugSession(req.debugSession);\n    }\n\n    return originalSend.call(this, data);\n  };\n\n  next();\n}\n\n/**\n * Error tracking middleware\n */",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/debugging.ts",
        "start": 175,
        "end": 194,
        "startLoc": {
          "line": 175,
          "column": 16,
          "position": 1318
        },
        "endLoc": {
          "line": 194,
          "column": 4,
          "position": 1406
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/services/debugging/DebugTools.ts",
        "start": 503,
        "end": 518,
        "startLoc": {
          "line": 503,
          "column": 21,
          "position": 4183
        },
        "endLoc": {
          "line": 518,
          "column": 2,
          "position": 4270
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => {\n    return async (req: Request, _res: Response, next: NextFunction): Promise<void> => {\n      try {\n        if (!req.user) {\n          throw new AppError('Authentication required', 401);\n        }\n\n        // Super admin has all permissions\n        if (req.user.role === 'super_admin') {\n          return next();\n        }\n\n        // Check if user has any of the required permissions",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 158,
        "end": 170,
        "startLoc": {
          "line": 158,
          "column": 2,
          "position": 1141
        },
        "endLoc": {
          "line": 170,
          "column": 53,
          "position": 1249
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/backend/src/middleware/auth.ts",
        "start": 131,
        "end": 143,
        "startLoc": {
          "line": 131,
          "column": 11,
          "position": 943
        },
        "endLoc": {
          "line": 143,
          "column": 45,
          "position": 1051
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ");\n      const duration = Date.now() - startTime;\n\n      if (testCase.expectedOutput) {\n        const isMatch = JSON.stringify(actualOutput) === JSON.stringify(testCase.expectedOutput);\n\n        if (!isMatch) {\n          return {\n            testCaseId: testCase.id,\n            status: 'failed',\n            duration,\n            actualOutput,\n            assertion: 'Output does not match expected',\n          };\n        }\n      }\n\n      return {\n        testCaseId: testCase.id,\n        status: 'passed',\n        duration,\n        actualOutput,\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      return",
      "tokens": 0,
      "firstFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts",
        "start": 160,
        "end": 187,
        "startLoc": {
          "line": 160,
          "column": 8,
          "position": 1490
        },
        "endLoc": {
          "line": 187,
          "column": 7,
          "position": 1698
        }
      },
      "secondFile": {
        "name": "/home/margon/Reporunner/reporunner/packages/@reporunner/dev-tools/src/testing.ts",
        "start": 43,
        "end": 70,
        "startLoc": {
          "line": 43,
          "column": 6,
          "position": 341
        },
        "endLoc": {
          "line": 70,
          "column": 3,
          "position": 549
        }
      }
    }
  ],
  "filename": "/home/margon/Reporunner/reporunner/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}