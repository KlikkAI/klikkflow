# ============================================
# Worker Dockerfile - KlikkFlow
# Multi-stage build: TypeScript â†’ Node.js Worker
# Target size: ~85MB
# Based on backend, runs BullMQ worker process
# ============================================

# ============================================
# Stage 1: Base - Install pnpm
# ============================================
FROM node:20-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm@10.18.1

WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY .npmrc* ./

# ============================================
# Stage 2: Dependencies - Install all deps
# ============================================
FROM base AS deps

# Copy all package.json files for complete monorepo dependency resolution
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared/package.json ./packages/shared/
COPY packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/
COPY packages/@klikkflow/workflow/package.json ./packages/@klikkflow/workflow/

# Install all dependencies (skip preinstall script - only needed for local dev)
RUN pnpm install --frozen-lockfile --ignore-scripts

# ============================================
# Stage 3: Production Dependencies
# ============================================
FROM base AS prod-deps

# Copy package files
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared/package.json ./packages/shared/
COPY packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/
COPY packages/@klikkflow/workflow/package.json ./packages/@klikkflow/workflow/

# Install production dependencies only (skip preinstall script - only needed for local dev)
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# ============================================
# Stage 4: Runtime - Run the worker with tsx
# ============================================
FROM node:20-alpine AS runtime

# Install dumb-init and tsx for TypeScript execution
RUN apk add --no-cache dumb-init && \
    npm install -g tsx@4.19.2

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S klikkflow -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy source code for backend (run with tsx)
COPY --chown=klikkflow:nodejs packages/backend/src ./packages/backend/src

# Copy compiled dist for @klikkflow packages (libraries)
COPY --chown=klikkflow:nodejs packages/shared/dist ./packages/shared/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/ai/dist ./packages/@klikkflow/ai/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/core/dist ./packages/@klikkflow/core/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/platform/dist ./packages/@klikkflow/platform/dist
COPY --chown=klikkflow:nodejs packages/@klikkflow/workflow/dist ./packages/@klikkflow/workflow/dist

# Copy TypeScript config for backend (libraries use compiled dist)
COPY --chown=klikkflow:nodejs tsconfig.base.json ./
COPY --chown=klikkflow:nodejs packages/backend/tsconfig.json ./packages/backend/

# Copy production dependencies
COPY --from=prod-deps --chown=klikkflow:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=klikkflow:nodejs /app/packages/backend/node_modules ./packages/backend/node_modules

# Copy package.json files
COPY --chown=klikkflow:nodejs package.json pnpm-workspace.yaml ./
COPY --chown=klikkflow:nodejs packages/backend/package.json ./packages/backend/
COPY --chown=klikkflow:nodejs packages/shared/package.json ./packages/shared/
COPY --chown=klikkflow:nodejs packages/@klikkflow/ai/package.json ./packages/@klikkflow/ai/
COPY --chown=klikkflow:nodejs packages/@klikkflow/core/package.json ./packages/@klikkflow/core/
COPY --chown=klikkflow:nodejs packages/@klikkflow/platform/package.json ./packages/@klikkflow/platform/
COPY --chown=klikkflow:nodejs packages/@klikkflow/workflow/package.json ./packages/@klikkflow/workflow/

# Switch to non-root user
USER klikkflow

# Set environment
ENV NODE_ENV=production
ENV WORKER_MODE=true

# No ports exposed (worker doesn't serve HTTP)

# Health check via process existence
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD ps aux | grep -v grep | grep -q "node" || exit 1

# Labels for metadata
LABEL org.opencontainers.image.title="KlikkFlow Worker"
LABEL org.opencontainers.image.description="KlikkFlow workflow automation platform - BullMQ worker for workflow execution"
LABEL org.opencontainers.image.url="https://github.com/KlikkAI/klikkflow"
LABEL org.opencontainers.image.source="https://github.com/KlikkAI/klikkflow"
LABEL org.opencontainers.image.vendor="KlikkFlow Team"
LABEL org.opencontainers.image.licenses="MIT"

# Start worker with dumb-init and tsx
ENTRYPOINT ["dumb-init", "--"]
CMD ["tsx", "packages/backend/src/worker.ts"]
